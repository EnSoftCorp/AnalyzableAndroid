public class com.android.org.conscrypt.OpenSSLRSAKeyFactory extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.X509EncodedKeySpec $r9;
        java.security.PublicKey $r10;
        com.android.org.conscrypt.OpenSSLRSAPublicKey $r11;
        java.security.spec.RSAPublicKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.RSAPublicKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLRSAPublicKey;

        $r12 = (java.security.spec.RSAPublicKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void <init>(java.security.spec.RSAPublicKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.X509EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec,int)>($r9, 6);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use RSAPublicKeySpec or X509EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1, $z2;
        java.security.spec.InvalidKeySpecException $r2, $r15;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.security.PrivateKey $r10;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey $r11;
        java.security.spec.RSAPrivateKeySpec $r12;
        java.security.spec.RSAPrivateCrtKeySpec $r13;
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey $r14;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r15 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r15.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r15;

     label1:
        $z0 = r1 instanceof java.security.spec.RSAPrivateCrtKeySpec;

        if $z0 == 0 goto label2;

        $r14 = new com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        $r13 = (java.security.spec.RSAPrivateCrtKeySpec) r1;

        specialinvoke $r14.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void <init>(java.security.spec.RSAPrivateCrtKeySpec)>($r13);

        return $r14;

     label2:
        $z1 = r1 instanceof java.security.spec.RSAPrivateKeySpec;

        if $z1 == 0 goto label3;

        $r11 = new com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r12 = (java.security.spec.RSAPrivateKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(java.security.spec.RSAPrivateKeySpec)>($r12);

        return $r11;

     label3:
        $z2 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z2 == 0 goto label4;

        $r9 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec,int)>($r9, 6);

        return $r10;

     label4:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.Key r1;
        java.lang.Class r2, $r10, $r18, $r27, $r41, $r45, $r65, $r68, $r75, $r79, $r96;
        java.security.interfaces.RSAPublicKey r3, r4;
        java.security.interfaces.RSAPrivateCrtKey r5, r100, r101;
        java.lang.String $r6, $r7, $r13, $r14, $r16, $r19, $r22, $r24, $r29, $r30, $r31, $r36, $r38, $r40, $r44, $r46, $r54, $r89, $r90;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        java.lang.StringBuilder $r8, $r11, $r12, $r15, $r17, $r23, $r26, $r28, $r32, $r37, $r39;
        java.security.spec.InvalidKeySpecException $r9, $r21, $r25, $r33, $r34, $r43, $r52, $r55, $r88, $r91, $r92, $r98;
        java.security.spec.X509EncodedKeySpec $r20, $r87;
        java.security.spec.PKCS8EncodedKeySpec $r35, $r42, $r56;
        java.security.PrivateKey $r47, $r51;
        java.security.spec.RSAPrivateKeySpec $r48, $r67, $r70;
        java.math.BigInteger $r49, $r50, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r66, $r69, $r71, $r72, $r74, $r76, $r77, $r78, $r80, $r81, $r82, $r83, $r84, $r93, $r94, $r97;
        java.security.spec.RSAPrivateCrtKeySpec $r53, $r73;
        java.security.spec.RSAPublicKeySpec $r85, $r95;
        java.security.PublicKey $r86;
        byte[] r99, r103, r105, r107, r108;
        java.security.interfaces.RSAPrivateKey r102, r104, r106;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label01;

        $r98 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r98.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key == null");

        throw $r98;

     label01:
        if r2 != null goto label02;

        $r91 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r91.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r91;

     label02:
        $r6 = "RSA";

        $r7 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label03;

        $r92 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r92.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key must be a RSA key");

        throw $r92;

     label03:
        $z1 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z1 == 0 goto label04;

        $r96 = class "java/security/spec/RSAPublicKeySpec";

        $z24 = virtualinvoke $r96.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z24 == 0 goto label04;

        r3 = (java.security.interfaces.RSAPublicKey) r1;

        $r95 = new java.security.spec.RSAPublicKeySpec;

        $r94 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r93 = interfaceinvoke r3.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r95.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r94, $r93);

        return $r95;

     label04:
        $z2 = r1 instanceof java.security.PublicKey;

        if $z2 == 0 goto label07;

        $r79 = class "java/security/spec/RSAPublicKeySpec";

        $z22 = virtualinvoke $r79.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z22 == 0 goto label07;

        r99 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r90 = "X.509";

        $r89 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z23 = virtualinvoke $r90.<java.lang.String: boolean equals(java.lang.Object)>($r89);

        if $z23 == 0 goto label05;

        if r99 != null goto label06;

     label05:
        $r88 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r88.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid X.509 encoding");

        throw $r88;

     label06:
        $r87 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r87.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r99);

        $r86 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r87);

        r4 = (java.security.interfaces.RSAPublicKey) $r86;

        $r85 = new java.security.spec.RSAPublicKeySpec;

        $r84 = interfaceinvoke r4.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r97 = interfaceinvoke r4.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r85.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r84, $r97);

        return $r85;

     label07:
        $z3 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z3 == 0 goto label08;

        $r75 = class "java/security/spec/RSAPrivateCrtKeySpec";

        $z21 = virtualinvoke $r75.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z21 == 0 goto label08;

        r100 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r73 = new java.security.spec.RSAPrivateCrtKeySpec;

        $r74 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r71 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r72 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r82 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r83 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r80 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r81 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r78 = interfaceinvoke r100.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r73.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r74, $r71, $r72, $r82, $r83, $r80, $r81, $r78);

        return $r73;

     label08:
        $z4 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z4 == 0 goto label09;

        $r65 = class "java/security/spec/RSAPrivateKeySpec";

        $z19 = virtualinvoke $r65.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z19 == 0 goto label09;

        r101 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r67 = new java.security.spec.RSAPrivateKeySpec;

        $r76 = interfaceinvoke r101.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r77 = interfaceinvoke r101.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r67.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r76, $r77);

        return $r67;

     label09:
        $z5 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z5 == 0 goto label10;

        $r68 = class "java/security/spec/RSAPrivateKeySpec";

        $z20 = virtualinvoke $r68.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z20 == 0 goto label10;

        r102 = (java.security.interfaces.RSAPrivateKey) r1;

        $r70 = new java.security.spec.RSAPrivateKeySpec;

        $r69 = interfaceinvoke r102.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r66 = interfaceinvoke r102.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r70.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r69, $r66);

        return $r70;

     label10:
        $z6 = r1 instanceof java.security.PrivateKey;

        if $z6 == 0 goto label14;

        $r45 = class "java/security/spec/RSAPrivateCrtKeySpec";

        $z16 = virtualinvoke $r45.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z16 == 0 goto label14;

        r103 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r46 = "PKCS#8";

        $r54 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z18 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z18 == 0 goto label11;

        if r103 != null goto label12;

     label11:
        $r55 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r55.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r55;

     label12:
        $r56 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r56.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r103);

        $r51 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r56);

        r104 = (java.security.interfaces.RSAPrivateKey) $r51;

        $z17 = r104 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z17 == 0 goto label13;

        r5 = (java.security.interfaces.RSAPrivateCrtKey) r104;

        $r53 = new java.security.spec.RSAPrivateCrtKeySpec;

        $r62 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r61 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r64 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r63 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r58 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r57 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r60 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r59 = interfaceinvoke r5.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r53.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r62, $r61, $r64, $r63, $r58, $r57, $r60, $r59);

        return $r53;

     label13:
        $r52 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r52.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Encoded key is not an RSAPrivateCrtKey");

        throw $r52;

     label14:
        $z7 = r1 instanceof java.security.PrivateKey;

        if $z7 == 0 goto label17;

        $r41 = class "java/security/spec/RSAPrivateKeySpec";

        $z14 = virtualinvoke $r41.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z14 == 0 goto label17;

        r105 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r40 = "PKCS#8";

        $r44 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z15 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z15 == 0 goto label15;

        if r105 != null goto label16;

     label15:
        $r43 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r43.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r43;

     label16:
        $r42 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r42.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r105);

        $r47 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r42);

        r106 = (java.security.interfaces.RSAPrivateKey) $r47;

        $r48 = new java.security.spec.RSAPrivateKeySpec;

        $r49 = interfaceinvoke r106.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r50 = interfaceinvoke r106.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r48.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r49, $r50);

        return $r48;

     label17:
        $z9 = r1 instanceof java.security.PrivateKey;

        if $z9 == 0 goto label20;

        $r27 = class "java/security/spec/PKCS8EncodedKeySpec";

        $z12 = virtualinvoke $r27.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z12 == 0 goto label20;

        r107 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r31 = "PKCS#8";

        $r30 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z13 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z13 != 0 goto label18;

        $r33 = new java.security.spec.InvalidKeySpecException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be PKCS#8; was ");

        $r38 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r36);

        throw $r33;

     label18:
        if r107 != null goto label19;

        $r34 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r34.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r34;

     label19:
        $r35 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r35.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r107);

        return $r35;

     label20:
        $z8 = r1 instanceof java.security.PublicKey;

        if $z8 == 0 goto label23;

        $r18 = class "java/security/spec/X509EncodedKeySpec";

        $z10 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z10 == 0 goto label23;

        r108 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r19 = "X.509";

        $r22 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z11 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z11 != 0 goto label21;

        $r25 = new java.security.spec.InvalidKeySpecException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be X.509; was ");

        $r24 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label21:
        if r108 != null goto label22;

        $r21 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r21;

     label22:
        $r20 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r20.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r108);

        return $r20;

     label23:
        $r9 = new java.security.spec.InvalidKeySpecException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type and key spec combination; key=");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keySpec=");

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.Key r1;
        java.security.interfaces.RSAPublicKey r2;
        java.security.spec.InvalidKeySpecException r3, r11, $r35, $r39, $r41, $r45, $r47, r53, r55, r57;
        java.math.BigInteger r4, r5, r6, r7, r8, r9, r10, $r31, $r38, r49, r51, r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.security.InvalidKeyException $r12, $r24, $r27, $r36, $r40, $r42, $r43, $r44, $r46;
        java.lang.StringBuilder $r13, $r14, $r18;
        java.lang.String $r15, $r17, $r19, $r20, $r23, $r25;
        java.lang.Class $r16;
        java.security.PublicKey $r21, $r37;
        java.security.spec.X509EncodedKeySpec $r22;
        java.security.PrivateKey $r26, $r30, $r33;
        java.security.spec.PKCS8EncodedKeySpec $r28;
        java.security.spec.RSAPrivateKeySpec $r29;
        java.security.spec.RSAPublicKeySpec $r32;
        java.security.spec.RSAPrivateCrtKeySpec $r34;
        java.security.interfaces.RSAPrivateCrtKey r48;
        java.security.interfaces.RSAPrivateKey r50;
        byte[] r54, r56;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r36 = new java.security.InvalidKeyException;

        specialinvoke $r36.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r36;

     label01:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPublicKey;

        if $z0 != 0 goto label02;

        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        if $z1 == 0 goto label03;

     label02:
        return r1;

     label03:
        $z2 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z2 == 0 goto label07;

        r2 = (java.security.interfaces.RSAPublicKey) r1;

     label04:
        $r32 = new java.security.spec.RSAPublicKeySpec;

        $r31 = interfaceinvoke r2.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r38 = interfaceinvoke r2.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r32.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r31, $r38);

        $r37 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r32);

     label05:
        return $r37;

     label06:
        $r39 := @caughtexception;

        r3 = $r39;

        $r44 = new java.security.InvalidKeyException;

        specialinvoke $r44.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);

        throw $r44;

     label07:
        $z3 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z3 == 0 goto label11;

        r48 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        r49 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        r4 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        r5 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        r6 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        r7 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        r8 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        r9 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        r10 = interfaceinvoke r48.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

     label08:
        $r34 = new java.security.spec.RSAPrivateCrtKeySpec;

        specialinvoke $r34.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r49, r4, r5, r6, r7, r8, r9, r10);

        $r33 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r34);

     label09:
        return $r33;

     label10:
        $r35 := @caughtexception;

        r11 = $r35;

        $r42 = new java.security.InvalidKeyException;

        specialinvoke $r42.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r11);

        throw $r42;

     label11:
        $z5 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z5 == 0 goto label15;

        r50 = (java.security.interfaces.RSAPrivateKey) r1;

        r51 = interfaceinvoke r50.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        r52 = interfaceinvoke r50.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

     label12:
        $r29 = new java.security.spec.RSAPrivateKeySpec;

        specialinvoke $r29.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>(r51, r52);

        $r30 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r29);

     label13:
        return $r30;

     label14:
        $r45 := @caughtexception;

        r53 = $r45;

        $r46 = new java.security.InvalidKeyException;

        specialinvoke $r46.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r53);

        throw $r46;

     label15:
        $z4 = r1 instanceof java.security.PrivateKey;

        if $z4 == 0 goto label19;

        $r25 = "PKCS#8";

        $r23 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z8 == 0 goto label19;

        r54 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r54 != null goto label16;

        $r27 = new java.security.InvalidKeyException;

        specialinvoke $r27.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r27;

     label16:
        $r28 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r28.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r54);

        $r26 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r28);

     label17:
        return $r26;

     label18:
        $r41 := @caughtexception;

        r55 = $r41;

        $r40 = new java.security.InvalidKeyException;

        specialinvoke $r40.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r55);

        throw $r40;

     label19:
        $z6 = r1 instanceof java.security.PublicKey;

        if $z6 == 0 goto label23;

        $r20 = "X.509";

        $r19 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z7 == 0 goto label23;

        r56 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r56 != null goto label20;

        $r24 = new java.security.InvalidKeyException;

        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r24;

     label20:
        $r22 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r22.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r56);

        $r21 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r22);

     label21:
        return $r21;

     label22:
        $r47 := @caughtexception;

        r57 = $r47;

        $r43 = new java.security.InvalidKeyException;

        specialinvoke $r43.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r57);

        throw $r43;

     label23:
        $r12 = new java.security.InvalidKeyException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be an RSA public or private key; was ");

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r17);

        throw $r12;

        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label06;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label10;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
        catch java.security.spec.InvalidKeySpecException from label20 to label21 with label22;
    }
}
