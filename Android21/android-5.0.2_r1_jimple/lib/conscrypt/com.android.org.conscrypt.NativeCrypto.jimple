public final class com.android.org.conscrypt.NativeCrypto extends java.lang.Object
{
    public static final int EC_CURVE_GFP;
    public static final int EC_CURVE_GF2M;
    public static final int OPENSSL_EC_NAMED_CURVE;
    public static final int POINT_CONVERSION_COMPRESSED;
    public static final int POINT_CONVERSION_UNCOMPRESSED;
    public static final int POINT_CONVERSION_HYBRID;
    public static final int RAND_SEED_LENGTH_IN_BYTES;
    public static final int GN_STACK_SUBJECT_ALT_NAME;
    public static final int GN_STACK_ISSUER_ALT_NAME;
    public static final int EXTENSION_TYPE_NON_CRITICAL;
    public static final int EXTENSION_TYPE_CRITICAL;
    public static final int EXFLAG_CA;
    public static final int EXFLAG_CRITICAL;
    public static final int PKCS7_CERTS;
    public static final int PKCS7_CRLS;
    private static final java.lang.String SUPPORTED_PROTOCOL_SSLV3;
    private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1;
    private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1_1;
    private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1_2;
    public static final java.util.Map OPENSSL_TO_STANDARD_CIPHER_SUITES;
    public static final java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES;
    public static final java.lang.String TLS_EMPTY_RENEGOTIATION_INFO_SCSV;
    public static final java.lang.String TLS_FALLBACK_SCSV;
    private static final java.lang.String[] SUPPORTED_CIPHER_SUITES;
    public static final int EVP_PKEY_RSA;
    public static final int EVP_PKEY_DSA;
    public static final int EVP_PKEY_DH;
    public static final int EVP_PKEY_EC;
    public static final int EVP_PKEY_HMAC;
    public static final int EVP_PKEY_CMAC;
    public static final int RSA_PKCS1_PADDING;
    public static final int RSA_NO_PADDING;
    public static final long SSL_MODE_HANDSHAKE_CUTTHROUGH;
    public static final long SSL_MODE_CBC_RECORD_SPLITTING;
    public static final long SSL_MODE_SEND_FALLBACK_SCSV;
    public static final long SSL_OP_TLSEXT_PADDING;
    public static final long SSL_OP_NO_TICKET;
    public static final long SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION;
    public static final long SSL_OP_NO_SSLv3;
    public static final long SSL_OP_NO_TLSv1;
    public static final long SSL_OP_NO_TLSv1_1;
    public static final long SSL_OP_NO_TLSv1_2;
    public static final byte TLS_CT_RSA_SIGN;
    public static final byte TLS_CT_DSS_SIGN;
    public static final byte TLS_CT_RSA_FIXED_DH;
    public static final byte TLS_CT_DSS_FIXED_DH;
    public static final byte TLS_CT_ECDSA_SIGN;
    public static final byte TLS_CT_RSA_FIXED_ECDH;
    public static final byte TLS_CT_ECDSA_FIXED_ECDH;
    public static final int SSL_SENT_SHUTDOWN;
    public static final int SSL_RECEIVED_SHUTDOWN;
    static final java.lang.String[] DEFAULT_X509_CIPHER_SUITES;
    static final java.lang.String[] DEFAULT_PSK_CIPHER_SUITES;
    public static final java.lang.String[] DEFAULT_PROTOCOLS;
    public static final int SSL_kRSA;
    public static final int SSL_kDHr;
    public static final int SSL_kDHd;
    public static final int SSL_kEDH;
    public static final int SSL_kKRB5;
    public static final int SSL_kECDHr;
    public static final int SSL_kECDHe;
    public static final int SSL_kEECDH;
    public static final int SSL_kPSK;
    public static final int SSL_kGOST;
    public static final int SSL_kSRP;
    public static final int SSL_aRSA;
    public static final int SSL_aDSS;
    public static final int SSL_aNULL;
    public static final int SSL_aDH;
    public static final int SSL_aECDH;
    public static final int SSL_aKRB5;
    public static final int SSL_aECDSA;
    public static final int SSL_aPSK;
    public static final int SSL_aGOST94;
    public static final int SSL_aGOST01;
    public static final int SSL_VERIFY_NONE;
    public static final int SSL_VERIFY_PEER;
    public static final int SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
    public static final int SSL_ST_CONNECT;
    public static final int SSL_ST_ACCEPT;
    public static final int SSL_ST_MASK;
    public static final int SSL_ST_INIT;
    public static final int SSL_ST_BEFORE;
    public static final int SSL_ST_OK;
    public static final int SSL_ST_RENEGOTIATE;
    public static final int SSL_CB_LOOP;
    public static final int SSL_CB_EXIT;
    public static final int SSL_CB_READ;
    public static final int SSL_CB_WRITE;
    public static final int SSL_CB_ALERT;
    public static final int SSL_CB_READ_ALERT;
    public static final int SSL_CB_WRITE_ALERT;
    public static final int SSL_CB_ACCEPT_LOOP;
    public static final int SSL_CB_ACCEPT_EXIT;
    public static final int SSL_CB_CONNECT_LOOP;
    public static final int SSL_CB_CONNECT_EXIT;
    public static final int SSL_CB_HANDSHAKE_START;
    public static final int SSL_CB_HANDSHAKE_DONE;
    public static final int SSL3_RT_HEADER_LENGTH;
    public static final int SSL_RT_MAX_CIPHER_BLOCK_SIZE;
    public static final int SSL3_RT_MAX_MD_SIZE;
    public static final int SSL3_RT_MAX_PLAIN_LENGTH;
    public static final int SSL3_RT_MAX_ENCRYPTED_OVERHEAD;
    public static final int SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;
    public static final int SSL3_RT_MAX_COMPRESSED_LENGTH;
    public static final int SSL3_RT_MAX_ENCRYPTED_LENGTH;
    public static final int SSL3_RT_MAX_PACKET_SIZE;

    public void <init>()
    {
        com.android.org.conscrypt.NativeCrypto r0;

        r0 := @this: com.android.org.conscrypt.NativeCrypto;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static native void clinit();

    public static native void ENGINE_load_dynamic();

    public static native long ENGINE_by_id(java.lang.String);

    public static native int ENGINE_add(long);

    public static native int ENGINE_init(long);

    public static native int ENGINE_finish(long);

    public static native int ENGINE_free(long);

    public static native long ENGINE_load_private_key(long, java.lang.String);

    public static native java.lang.String ENGINE_get_id(long);

    public static native int ENGINE_ctrl_cmd_string(long, java.lang.String, java.lang.String, int);

    public static native long EVP_PKEY_new_DSA(byte[], byte[], byte[], byte[], byte[]);

    public static native long EVP_PKEY_new_RSA(byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[]);

    public static native long EVP_PKEY_new_mac_key(int, byte[]);

    public static native int EVP_PKEY_size(long);

    public static native int EVP_PKEY_type(long);

    public static native java.lang.String EVP_PKEY_print_public(long);

    public static native java.lang.String EVP_PKEY_print_private(long);

    public static native void EVP_PKEY_free(long);

    public static native int EVP_PKEY_cmp(long, long);

    public static native byte[] i2d_PKCS8_PRIV_KEY_INFO(long);

    public static native long d2i_PKCS8_PRIV_KEY_INFO(byte[]);

    public static native byte[] i2d_PUBKEY(long);

    public static native long d2i_PUBKEY(byte[]);

    public static native long getRSAPrivateKeyWrapper(java.security.interfaces.RSAPrivateKey, byte[]);

    public static native long getDSAPrivateKeyWrapper(java.security.interfaces.DSAPrivateKey);

    public static native long getECPrivateKeyWrapper(java.security.interfaces.ECPrivateKey, long);

    public static native long RSA_generate_key_ex(int, byte[]);

    public static native int RSA_size(long);

    public static native int RSA_private_encrypt(int, byte[], byte[], long, int);

    public static native int RSA_public_decrypt(int, byte[], byte[], long, int) throws javax.crypto.BadPaddingException, java.security.SignatureException;

    public static native int RSA_public_encrypt(int, byte[], byte[], long, int);

    public static native int RSA_private_decrypt(int, byte[], byte[], long, int) throws javax.crypto.BadPaddingException, java.security.SignatureException;

    public static native byte[][] get_RSA_public_params(long);

    public static native byte[][] get_RSA_private_params(long);

    public static native long DSA_generate_key(int, byte[], byte[], byte[], byte[]);

    public static native byte[][] get_DSA_params(long);

    public static native void set_DSA_flag_nonce_from_hash(long);

    public static native byte[] i2d_RSAPublicKey(long);

    public static native byte[] i2d_RSAPrivateKey(long);

    public static native byte[] i2d_DSAPublicKey(long);

    public static native byte[] i2d_DSAPrivateKey(long);

    public static native long EVP_PKEY_new_DH(byte[], byte[], byte[], byte[]);

    public static native long DH_generate_parameters_ex(int, long);

    public static native void DH_generate_key(long);

    public static native byte[][] get_DH_params(long);

    public static native long EVP_PKEY_new_EC_KEY(long, long, byte[]);

    public static native long EC_GROUP_new_by_curve_name(java.lang.String);

    public static native long EC_GROUP_new_curve(int, byte[], byte[], byte[]);

    public static native long EC_GROUP_dup(long);

    public static native void EC_GROUP_set_asn1_flag(long, int);

    public static native void EC_GROUP_set_point_conversion_form(long, int);

    public static native java.lang.String EC_GROUP_get_curve_name(long);

    public static native byte[][] EC_GROUP_get_curve(long);

    public static native void EC_GROUP_clear_free(long);

    public static native boolean EC_GROUP_cmp(long, long);

    public static native void EC_GROUP_set_generator(long, long, byte[], byte[]);

    public static native long EC_GROUP_get_generator(long);

    public static native int get_EC_GROUP_type(long);

    public static native byte[] EC_GROUP_get_order(long);

    public static native int EC_GROUP_get_degree(long);

    public static native byte[] EC_GROUP_get_cofactor(long);

    public static native long EC_POINT_new(long);

    public static native void EC_POINT_clear_free(long);

    public static native boolean EC_POINT_cmp(long, long, long);

    public static native byte[][] EC_POINT_get_affine_coordinates(long, long);

    public static native void EC_POINT_set_affine_coordinates(long, long, byte[], byte[]);

    public static native long EC_KEY_generate_key(long);

    public static native long EC_KEY_get0_group(long);

    public static native byte[] EC_KEY_get_private_key(long);

    public static native long EC_KEY_get_public_key(long);

    public static native void EC_KEY_set_nonce_from_hash(long, boolean);

    public static native int ECDH_compute_key(byte[], int, long, long);

    public static native long EVP_get_digestbyname(java.lang.String);

    public static native int EVP_MD_size(long);

    public static native int EVP_MD_block_size(long);

    public static native long EVP_MD_CTX_create();

    public static native void EVP_MD_CTX_init(com.android.org.conscrypt.OpenSSLDigestContext);

    public static native void EVP_MD_CTX_destroy(long);

    public static native int EVP_MD_CTX_copy(com.android.org.conscrypt.OpenSSLDigestContext, com.android.org.conscrypt.OpenSSLDigestContext);

    public static native int EVP_DigestInit(com.android.org.conscrypt.OpenSSLDigestContext, long);

    public static native void EVP_DigestUpdate(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int, int);

    public static native int EVP_DigestFinal(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int);

    public static native void EVP_DigestSignInit(com.android.org.conscrypt.OpenSSLDigestContext, long, long);

    public static native void EVP_DigestSignUpdate(com.android.org.conscrypt.OpenSSLDigestContext, byte[]);

    public static native byte[] EVP_DigestSignFinal(com.android.org.conscrypt.OpenSSLDigestContext);

    public static native int EVP_SignInit(com.android.org.conscrypt.OpenSSLDigestContext, long);

    public static native void EVP_SignUpdate(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int, int);

    public static native int EVP_SignFinal(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int, long);

    public static native int EVP_VerifyInit(com.android.org.conscrypt.OpenSSLDigestContext, long);

    public static native void EVP_VerifyUpdate(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int, int);

    public static native int EVP_VerifyFinal(com.android.org.conscrypt.OpenSSLDigestContext, byte[], int, int, long);

    public static native long EVP_get_cipherbyname(java.lang.String);

    public static native void EVP_CipherInit_ex(long, long, byte[], byte[], boolean);

    public static native int EVP_CipherUpdate(long, byte[], int, byte[], int, int);

    public static native int EVP_CipherFinal_ex(long, byte[], int) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;

    public static native int EVP_CIPHER_iv_length(long);

    public static native long EVP_CIPHER_CTX_new();

    public static native int EVP_CIPHER_CTX_block_size(long);

    public static native int get_EVP_CIPHER_CTX_buf_len(long);

    public static native void EVP_CIPHER_CTX_set_padding(long, boolean);

    public static native void EVP_CIPHER_CTX_set_key_length(long, int);

    public static native void EVP_CIPHER_CTX_cleanup(long);

    public static native void RAND_seed(byte[]);

    public static native int RAND_load_file(java.lang.String, long);

    public static native void RAND_bytes(byte[]);

    public static native int OBJ_txt2nid(java.lang.String);

    public static native java.lang.String OBJ_txt2nid_longName(java.lang.String);

    public static native java.lang.String OBJ_txt2nid_oid(java.lang.String);

    public static int X509_NAME_hash(javax.security.auth.x500.X500Principal)
    {
        javax.security.auth.x500.X500Principal r0;
        int $i0;

        r0 := @parameter0: javax.security.auth.x500.X500Principal;

        $i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int X509_NAME_hash(javax.security.auth.x500.X500Principal,java.lang.String)>(r0, "SHA1");

        return $i0;
    }

    public static int X509_NAME_hash_old(javax.security.auth.x500.X500Principal)
    {
        javax.security.auth.x500.X500Principal r0;
        int $i0;

        r0 := @parameter0: javax.security.auth.x500.X500Principal;

        $i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int X509_NAME_hash(javax.security.auth.x500.X500Principal,java.lang.String)>(r0, "MD5");

        return $i0;
    }

    private static int X509_NAME_hash(javax.security.auth.x500.X500Principal, java.lang.String)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1;
        byte[] r2, $r4;
        byte b0, $b1, $b3, $b8, $b12;
        java.security.MessageDigest $r3;
        short $s2, $s4, $s7, $s11;
        int $i5, $i6, $i9, $i10, $i13, $i14, $i15, i16, i17, i18;
        java.security.NoSuchAlgorithmException $r5, r7;
        java.lang.AssertionError $r6;

        r0 := @parameter0: javax.security.auth.x500.X500Principal;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4);

        b0 = 0;

        i16 = b0 + 1;

        $b1 = r2[b0];

        $s2 = $b1 & 255;

        $i6 = $s2 << 0;

        i17 = i16 + 1;

        $b3 = r2[i16];

        $s4 = $b3 & 255;

        $i5 = $s4 << 8;

        $i9 = $i6 | $i5;

        i18 = i17 + 1;

        $b8 = r2[i17];

        $s7 = $b8 & 255;

        $i10 = $s7 << 16;

        $i13 = $i9 | $i10;

        $b12 = r2[i18];

        $s11 = $b12 & 255;

        $i14 = $s11 << 24;

        $i15 = $i13 | $i14;

     label2:
        return $i15;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r7);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static native java.lang.String X509_NAME_print_ex(long, long);

    public static native long d2i_X509_bio(long);

    public static native long d2i_X509(byte[]);

    public static native long PEM_read_bio_X509(long);

    public static native byte[] i2d_X509(long);

    public static native byte[] i2d_X509_PUBKEY(long);

    public static native byte[] ASN1_seq_pack_X509(long[]);

    public static native long[] ASN1_seq_unpack_X509_bio(long);

    public static native void X509_free(long);

    public static native int X509_cmp(long, long);

    public static native int get_X509_hashCode(long);

    public static native void X509_print_ex(long, long, long, long);

    public static native byte[] X509_get_issuer_name(long);

    public static native byte[] X509_get_subject_name(long);

    public static native java.lang.String get_X509_sig_alg_oid(long);

    public static native byte[] get_X509_sig_alg_parameter(long);

    public static native boolean[] get_X509_issuerUID(long);

    public static native boolean[] get_X509_subjectUID(long);

    public static native long X509_get_pubkey(long) throws java.security.NoSuchAlgorithmException;

    public static native java.lang.String get_X509_pubkey_oid(long);

    public static native byte[] X509_get_ext_oid(long, java.lang.String);

    public static native java.lang.String[] get_X509_ext_oids(long, int);

    public static native java.lang.Object[][] get_X509_GENERAL_NAME_stack(long, int) throws java.security.cert.CertificateParsingException;

    public static native boolean[] get_X509_ex_kusage(long);

    public static native java.lang.String[] get_X509_ex_xkusage(long);

    public static native int get_X509_ex_pathlen(long);

    public static native long X509_get_notBefore(long);

    public static native long X509_get_notAfter(long);

    public static native long X509_get_version(long);

    public static native byte[] X509_get_serialNumber(long);

    public static native void X509_verify(long, long) throws javax.crypto.BadPaddingException;

    public static native byte[] get_X509_cert_info_enc(long);

    public static native byte[] get_X509_signature(long);

    public static native int get_X509_ex_flags(long);

    public static native int X509_check_issued(long, long);

    public static native long[] d2i_PKCS7_bio(long, int);

    public static native byte[] i2d_PKCS7(long[]);

    public static native long[] PEM_read_bio_PKCS7(long, int);

    public static native long d2i_X509_CRL_bio(long);

    public static native long PEM_read_bio_X509_CRL(long);

    public static native byte[] i2d_X509_CRL(long);

    public static native void X509_CRL_free(long);

    public static native void X509_CRL_print(long, long);

    public static native java.lang.String get_X509_CRL_sig_alg_oid(long);

    public static native byte[] get_X509_CRL_sig_alg_parameter(long);

    public static native byte[] X509_CRL_get_issuer_name(long);

    public static native long X509_CRL_get0_by_cert(long, long);

    public static native long X509_CRL_get0_by_serial(long, byte[]);

    public static native long[] X509_CRL_get_REVOKED(long);

    public static native java.lang.String[] get_X509_CRL_ext_oids(long, int);

    public static native byte[] X509_CRL_get_ext_oid(long, java.lang.String);

    public static native long X509_CRL_get_version(long);

    public static native long X509_CRL_get_ext(long, java.lang.String);

    public static native byte[] get_X509_CRL_signature(long);

    public static native void X509_CRL_verify(long, long);

    public static native byte[] get_X509_CRL_crl_enc(long);

    public static native long X509_CRL_get_lastUpdate(long);

    public static native long X509_CRL_get_nextUpdate(long);

    public static native long X509_REVOKED_dup(long);

    public static native byte[] i2d_X509_REVOKED(long);

    public static native java.lang.String[] get_X509_REVOKED_ext_oids(long, int);

    public static native byte[] X509_REVOKED_get_ext_oid(long, java.lang.String);

    public static native byte[] X509_REVOKED_get_serialNumber(long);

    public static native long X509_REVOKED_get_ext(long, java.lang.String);

    public static native long get_X509_REVOKED_revocationDate(long);

    public static native void X509_REVOKED_print(long, long);

    public static native int X509_supported_extension(long);

    public static native void ASN1_TIME_to_Calendar(long, java.util.Calendar);

    public static native long create_BIO_InputStream(com.android.org.conscrypt.OpenSSLBIOInputStream);

    public static native long create_BIO_OutputStream(java.io.OutputStream);

    public static native int BIO_read(long, byte[]);

    public static native void BIO_write(long, byte[], int, int) throws java.io.IOException;

    public static native void BIO_free_all(long);

    private static void add(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.Map $r2, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <com.android.org.conscrypt.NativeCrypto: java.util.Map OPENSSL_TO_STANDARD_CIPHER_SUITES>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

        $r4 = <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static native long SSL_CTX_new();

    public static java.lang.String[] getSupportedCipherSuites()
    {
        java.lang.String[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] SUPPORTED_CIPHER_SUITES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r1;

        return $r2;
    }

    public static native void SSL_CTX_free(long);

    public static native void SSL_CTX_set_session_id_context(long, byte[]);

    public static native long SSL_new(long) throws javax.net.ssl.SSLException;

    public static native void SSL_enable_tls_channel_id(long) throws javax.net.ssl.SSLException;

    public static native byte[] SSL_get_tls_channel_id(long) throws javax.net.ssl.SSLException;

    public static native void SSL_set1_tls_channel_id(long, long);

    public static native void SSL_use_certificate(long, long[]);

    public static native void SSL_use_PrivateKey(long, long);

    public static native void SSL_check_private_key(long) throws javax.net.ssl.SSLException;

    public static native void SSL_set_client_CA_list(long, byte[][]);

    public static native long SSL_get_mode(long);

    public static native long SSL_set_mode(long, long);

    public static native long SSL_clear_mode(long, long);

    public static native long SSL_get_options(long);

    public static native long SSL_set_options(long, long);

    public static native long SSL_clear_options(long, long);

    public static native void SSL_use_psk_identity_hint(long, java.lang.String) throws javax.net.ssl.SSLException;

    public static native void set_SSL_psk_client_callback_enabled(long, boolean);

    public static native void set_SSL_psk_server_callback_enabled(long, boolean);

    public static java.lang.String[] getSupportedProtocols()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "SSLv3";

        $r0[1] = "TLSv1";

        $r0[2] = "TLSv1.1";

        $r0[3] = "TLSv1.2";

        return $r0;
    }

    public static void setEnabledProtocols(long, java.lang.String[])
    {
        long l0, l1, l2;
        java.lang.String[] r0;
        int i3, $i4;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalStateException $r3;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String[];

        staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledProtocols(java.lang.String[])>(r0);

        l1 = 503316480L;

        l2 = 0L;

        i3 = 0;

     label1:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label7;

        r1 = r0[i3];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("SSLv3");

        if $z0 == 0 goto label2;

        l1 = l1 & -33554433L;

        l2 = l2 | 33554432L;

        goto label6;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1");

        if $z1 == 0 goto label3;

        l1 = l1 & -67108865L;

        l2 = l2 | 67108864L;

        goto label6;

     label3:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.1");

        if $z2 == 0 goto label4;

        l1 = l1 & -268435457L;

        l2 = l2 | 268435456L;

        goto label6;

     label4:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.2");

        if $z3 == 0 goto label5;

        l1 = l1 & -134217729L;

        l2 = l2 | 134217728L;

        goto label6;

     label5:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_set_options(long,long)>(l0, l1);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_clear_options(long,long)>(l0, l2);

        return;
    }

    public static java.lang.String[] checkEnabledProtocols(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i1;
        java.lang.String r1, $r7, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2, $r8, $r14;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r13;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocols == null");

        throw $r14;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label5;

        r1 = r0[i0];

        if r1 != null goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols[");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == null");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("SSLv3");

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.1");

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.2");

        if $z3 != 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocol ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return r0;
    }

    public static native void SSL_set_cipher_lists(long, java.lang.String[]);

    public static native long[] SSL_get_ciphers(long);

    public static native int get_SSL_CIPHER_algorithm_mkey(long);

    public static native int get_SSL_CIPHER_algorithm_auth(long);

    public static void setEnabledCipherSuites(long, java.lang.String[])
    {
        long l0;
        java.lang.String[] r0, $r7, $r9;
        java.util.ArrayList r1, $r6;
        int i1, $i2, $i3;
        java.lang.String r2, r3, r4, $r12;
        java.lang.Object[] $r8;
        boolean $z0, $z1;
        java.util.Map $r10;
        java.lang.Object $r11;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String[];

        staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledCipherSuites(java.lang.String[])>(r0);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label7;

        r2 = r0[i1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");

        if $z0 == 0 goto label2;

        goto label6;

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("TLS_FALLBACK_SCSV");

        if $z1 == 0 goto label3;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_set_mode(long,long)>(l0, 512L);

        goto label6;

     label3:
        $r10 = <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.String) $r11;

        if r3 != null goto label4;

        $r12 = r2;

        goto label5;

     label4:
        $r12 = r3;

     label5:
        r4 = $r12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r7 = newarray (java.lang.String)[$i3];

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_cipher_lists(long,java.lang.String[])>(l0, $r9);

        return;
    }

    public static java.lang.String[] checkEnabledCipherSuites(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i1;
        java.lang.String r1, $r9, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r2, $r3;
        java.lang.IllegalArgumentException $r4, $r11, $r16;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r12, $r13, $r15;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cipherSuites == null");

        throw $r16;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label8;

        r1 = r0[i0];

        if r1 != null goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cipherSuites[");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == null");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");

        if $z0 != 0 goto label7;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TLS_FALLBACK_SCSV");

        if $z1 == 0 goto label4;

        goto label7;

     label4:
        $r2 = <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES>;

        $z2 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label5;

        goto label7;

     label5:
        $r3 = <com.android.org.conscrypt.NativeCrypto: java.util.Map OPENSSL_TO_STANDARD_CIPHER_SUITES>;

        $z3 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z3 == 0 goto label6;

        goto label7;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cipherSuite ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label7:
        i0 = i0 + 1;

        goto label2;

     label8:
        return r0;
    }

    public static native void SSL_set_accept_state(long);

    public static native void SSL_set_connect_state(long);

    public static native void SSL_set_verify(long, int);

    public static native void SSL_set_session(long, long) throws javax.net.ssl.SSLException;

    public static native void SSL_set_session_creation_enabled(long, boolean) throws javax.net.ssl.SSLException;

    public static native void SSL_set_tlsext_host_name(long, java.lang.String) throws javax.net.ssl.SSLException;

    public static native java.lang.String SSL_get_servername(long);

    public static native void SSL_CTX_enable_npn(long);

    public static native void SSL_CTX_disable_npn(long);

    public static native int SSL_set_alpn_protos(long, byte[]);

    public static native byte[] SSL_get0_alpn_selected(long);

    public static native long SSL_do_handshake(long, java.io.FileDescriptor, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, int, boolean, byte[], byte[]) throws javax.net.ssl.SSLException, java.net.SocketTimeoutException, java.security.cert.CertificateException;

    public static native long SSL_do_handshake_bio(long, long, long, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, boolean, byte[], byte[]) throws javax.net.ssl.SSLException, java.net.SocketTimeoutException, java.security.cert.CertificateException;

    public static native byte[] SSL_get_npn_negotiated_protocol(long);

    public static native void SSL_renegotiate(long) throws javax.net.ssl.SSLException;

    public static native long[] SSL_get_certificate(long);

    public static native long[] SSL_get_peer_cert_chain(long);

    public static native int SSL_read(long, java.io.FileDescriptor, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, byte[], int, int, int) throws java.io.IOException;

    public static native int SSL_read_BIO(long, byte[], int, int, long, long, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

    public static native void SSL_write(long, java.io.FileDescriptor, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, byte[], int, int, int) throws java.io.IOException;

    public static native int SSL_write_BIO(long, byte[], int, long, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

    public static native void SSL_interrupt(long);

    public static native void SSL_shutdown(long, java.io.FileDescriptor, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

    public static native void SSL_shutdown_BIO(long, long, long, com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

    public static native int SSL_get_shutdown(long);

    public static native void SSL_free(long);

    public static native byte[] SSL_SESSION_session_id(long);

    public static native long SSL_SESSION_get_time(long);

    public static native java.lang.String SSL_SESSION_get_version(long);

    public static native java.lang.String SSL_SESSION_cipher(long);

    public static native void SSL_SESSION_free(long);

    public static native byte[] i2d_SSL_SESSION(long);

    public static native long d2i_SSL_SESSION(byte[]);

    public static native long ERR_peek_last_error();

    static void <clinit>()
    {
        int i0, $i1, $i2;
        java.lang.Class $r0, $r4;
        java.lang.String $r1, $r3, $r5, $r7;
        java.lang.Package $r2, $r6;
        boolean $z0, $z1;
        java.util.HashMap $r8;
        java.util.LinkedHashMap $r9;
        java.util.Map $r10, $r11;
        java.lang.String[] $r12, $r13, $r15, $r17, $r18, $r19, $r20;
        java.util.Set $r14;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_PACKET_SIZE> = 16709;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_ENCRYPTED_LENGTH> = 16704;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_COMPRESSED_LENGTH> = 16384;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD> = 80;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_ENCRYPTED_OVERHEAD> = 320;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_PLAIN_LENGTH> = 16384;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_MAX_MD_SIZE> = 64;

        <com.android.org.conscrypt.NativeCrypto: int SSL_RT_MAX_CIPHER_BLOCK_SIZE> = 16;

        <com.android.org.conscrypt.NativeCrypto: int SSL3_RT_HEADER_LENGTH> = 5;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_HANDSHAKE_DONE> = 32;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_HANDSHAKE_START> = 16;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_CONNECT_EXIT> = 4098;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_CONNECT_LOOP> = 4097;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_ACCEPT_EXIT> = 8194;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_ACCEPT_LOOP> = 8193;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_WRITE_ALERT> = 16392;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_READ_ALERT> = 16388;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_ALERT> = 16384;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_WRITE> = 8;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_READ> = 4;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_EXIT> = 2;

        <com.android.org.conscrypt.NativeCrypto: int SSL_CB_LOOP> = 1;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_RENEGOTIATE> = 12292;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_OK> = 3;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_BEFORE> = 16384;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_INIT> = 12288;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_MASK> = 4095;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_ACCEPT> = 8192;

        <com.android.org.conscrypt.NativeCrypto: int SSL_ST_CONNECT> = 4096;

        <com.android.org.conscrypt.NativeCrypto: int SSL_VERIFY_FAIL_IF_NO_PEER_CERT> = 2;

        <com.android.org.conscrypt.NativeCrypto: int SSL_VERIFY_PEER> = 1;

        <com.android.org.conscrypt.NativeCrypto: int SSL_VERIFY_NONE> = 0;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aGOST01> = 512;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aGOST94> = 256;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aPSK> = 128;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aECDSA> = 64;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aKRB5> = 32;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aECDH> = 16;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aDH> = 8;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aNULL> = 4;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aDSS> = 2;

        <com.android.org.conscrypt.NativeCrypto: int SSL_aRSA> = 1;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kSRP> = 1024;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kGOST> = 512;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kPSK> = 256;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kEECDH> = 128;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kECDHe> = 64;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kECDHr> = 32;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kKRB5> = 16;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kEDH> = 8;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kDHd> = 4;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kDHr> = 2;

        <com.android.org.conscrypt.NativeCrypto: int SSL_kRSA> = 1;

        <com.android.org.conscrypt.NativeCrypto: int SSL_RECEIVED_SHUTDOWN> = 2;

        <com.android.org.conscrypt.NativeCrypto: int SSL_SENT_SHUTDOWN> = 1;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_ECDSA_FIXED_ECDH> = 66;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_RSA_FIXED_ECDH> = 65;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_ECDSA_SIGN> = 64;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_DSS_FIXED_DH> = 4;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_RSA_FIXED_DH> = 3;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_DSS_SIGN> = 2;

        <com.android.org.conscrypt.NativeCrypto: byte TLS_CT_RSA_SIGN> = 1;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_TLSv1_2> = 134217728L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_TLSv1_1> = 268435456L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_TLSv1> = 67108864L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_SSLv3> = 33554432L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION> = 65536L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_NO_TICKET> = 16384L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_OP_TLSEXT_PADDING> = 16L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_MODE_SEND_FALLBACK_SCSV> = 512L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_MODE_CBC_RECORD_SPLITTING> = 256L;

        <com.android.org.conscrypt.NativeCrypto: long SSL_MODE_HANDSHAKE_CUTTHROUGH> = 128L;

        <com.android.org.conscrypt.NativeCrypto: int RSA_NO_PADDING> = 3;

        <com.android.org.conscrypt.NativeCrypto: int RSA_PKCS1_PADDING> = 1;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_CMAC> = 894;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_HMAC> = 855;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_EC> = 408;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_DH> = 28;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_DSA> = 116;

        <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_RSA> = 6;

        <com.android.org.conscrypt.NativeCrypto: java.lang.String TLS_FALLBACK_SCSV> = "TLS_FALLBACK_SCSV";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String TLS_EMPTY_RENEGOTIATION_INFO_SCSV> = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String SUPPORTED_PROTOCOL_TLSV1_2> = "TLSv1.2";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String SUPPORTED_PROTOCOL_TLSV1_1> = "TLSv1.1";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String SUPPORTED_PROTOCOL_TLSV1> = "TLSv1";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String SUPPORTED_PROTOCOL_SSLV3> = "SSLv3";

        <com.android.org.conscrypt.NativeCrypto: int PKCS7_CRLS> = 2;

        <com.android.org.conscrypt.NativeCrypto: int PKCS7_CERTS> = 1;

        <com.android.org.conscrypt.NativeCrypto: int EXFLAG_CRITICAL> = 512;

        <com.android.org.conscrypt.NativeCrypto: int EXFLAG_CA> = 16;

        <com.android.org.conscrypt.NativeCrypto: int EXTENSION_TYPE_CRITICAL> = 1;

        <com.android.org.conscrypt.NativeCrypto: int EXTENSION_TYPE_NON_CRITICAL> = 0;

        <com.android.org.conscrypt.NativeCrypto: int GN_STACK_ISSUER_ALT_NAME> = 2;

        <com.android.org.conscrypt.NativeCrypto: int GN_STACK_SUBJECT_ALT_NAME> = 1;

        <com.android.org.conscrypt.NativeCrypto: int RAND_SEED_LENGTH_IN_BYTES> = 1024;

        <com.android.org.conscrypt.NativeCrypto: int POINT_CONVERSION_HYBRID> = 4;

        <com.android.org.conscrypt.NativeCrypto: int POINT_CONVERSION_UNCOMPRESSED> = 4;

        <com.android.org.conscrypt.NativeCrypto: int POINT_CONVERSION_COMPRESSED> = 2;

        <com.android.org.conscrypt.NativeCrypto: int OPENSSL_EC_NAMED_CURVE> = 1;

        <com.android.org.conscrypt.NativeCrypto: int EC_CURVE_GF2M> = 2;

        <com.android.org.conscrypt.NativeCrypto: int EC_CURVE_GFP> = 1;

        $r1 = "com.android.org.conscrypt";

        $r0 = class "com/android/org/conscrypt/NativeCrypto";

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Package getPackage()>();

        $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("javacrypto");

        goto label3;

     label1:
        $r5 = "com.google.android.gms.org.conscrypt";

        $r4 = class "com/android/org/conscrypt/NativeCrypto";

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.Package getPackage()>();

        $r7 = virtualinvoke $r6.<java.lang.Package: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("gmscore");

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("conscrypt_gmscore_jni");

        goto label3;

     label2:
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("conscrypt_jni");

     label3:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void clinit()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        <com.android.org.conscrypt.NativeCrypto: java.util.Map OPENSSL_TO_STANDARD_CIPHER_SUITES> = $r8;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES> = $r9;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_RC4_128_MD5", "RC4-MD5");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_RC4_128_SHA", "RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_128_CBC_SHA", "AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_256_CBC_SHA", "AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", "ECDH-ECDSA-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "ECDH-ECDSA-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "ECDH-ECDSA-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_RC4_128_SHA", "ECDH-RSA-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "ECDH-RSA-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "ECDH-RSA-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", "ECDHE-ECDSA-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "ECDHE-ECDSA-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "ECDHE-ECDSA-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_RC4_128_SHA", "ECDHE-RSA-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "ECDHE-RSA-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "ECDHE-RSA-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "DHE-RSA-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "DHE-RSA-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", "DHE-DSS-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", "DHE-DSS-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_3DES_EDE_CBC_SHA", "DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", "ECDH-ECDSA-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", "ECDH-RSA-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", "ECDHE-ECDSA-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", "ECDHE-RSA-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", "EDH-RSA-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", "EDH-DSS-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_DES_CBC_SHA", "DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_RSA_WITH_DES_CBC_SHA", "EDH-RSA-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_DSS_WITH_DES_CBC_SHA", "EDH-DSS-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_EXPORT_WITH_RC4_40_MD5", "EXP-RC4-MD5");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", "EXP-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", "EXP-EDH-RSA-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", "EXP-EDH-DSS-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_NULL_MD5", "NULL-MD5");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_RSA_WITH_NULL_SHA", "NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_NULL_SHA", "ECDH-ECDSA-NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_NULL_SHA", "ECDH-RSA-NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_NULL_SHA", "ECDHE-ECDSA-NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_NULL_SHA", "ECDHE-RSA-NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DH_anon_WITH_RC4_128_MD5", "ADH-RC4-MD5");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_128_CBC_SHA", "ADH-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_256_CBC_SHA", "ADH-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", "ADH-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DH_anon_WITH_DES_CBC_SHA", "ADH-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_anon_WITH_RC4_128_SHA", "AECDH-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", "AECDH-AES128-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", "AECDH-AES256-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", "AECDH-DES-CBC3-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", "EXP-ADH-RC4-MD5");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", "EXP-ADH-DES-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_anon_WITH_NULL_SHA", "AECDH-NULL-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_NULL_SHA256", "NULL-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_128_CBC_SHA256", "AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_256_CBC_SHA256", "AES256-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_128_GCM_SHA256", "AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_RSA_WITH_AES_256_GCM_SHA384", "AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "DHE-RSA-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "DHE-RSA-AES256-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "DHE-RSA-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "DHE-RSA-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "DHE-DSS-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "DHE-DSS-AES256-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", "DHE-DSS-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", "DHE-DSS-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "ECDH-RSA-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "ECDH-RSA-AES256-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "ECDH-RSA-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", "ECDH-RSA-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "ECDH-ECDSA-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "ECDH-ECDSA-AES256-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "ECDH-ECDSA-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "ECDH-ECDSA-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "ECDHE-RSA-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "ECDHE-RSA-AES256-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "ECDHE-RSA-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "ECDHE-RSA-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "ECDHE-ECDSA-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "ECDHE-ECDSA-AES256-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "ECDHE-ECDSA-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "ECDHE-ECDSA-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_128_CBC_SHA256", "ADH-AES128-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_256_CBC_SHA256", "ADH-AES256-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_128_GCM_SHA256", "ADH-AES128-GCM-SHA256");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_DH_anon_WITH_AES_256_GCM_SHA384", "ADH-AES256-GCM-SHA384");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_PSK_WITH_3DES_EDE_CBC_SHA", "PSK-3DES-EDE-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_PSK_WITH_AES_128_CBC_SHA", "PSK-AES128-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_PSK_WITH_AES_256_CBC_SHA", "PSK-AES256-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_PSK_WITH_RC4_128_SHA", "PSK-RC4-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA", "ECDHE-PSK-AES128-CBC-SHA");

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void add(java.lang.String,java.lang.String)>("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA", "ECDHE-PSK-AES256-CBC-SHA");

        $r10 = <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES>;

        i0 = interfaceinvoke $r10.<java.util.Map: int size()>();

        $i1 = i0 + 2;

        $r12 = newarray (java.lang.String)[$i1];

        <com.android.org.conscrypt.NativeCrypto: java.lang.String[] SUPPORTED_CIPHER_SUITES> = $r12;

        $r11 = <com.android.org.conscrypt.NativeCrypto: java.util.Map STANDARD_TO_OPENSSL_CIPHER_SUITES>;

        $r14 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        $r13 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] SUPPORTED_CIPHER_SUITES>;

        interfaceinvoke $r14.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] SUPPORTED_CIPHER_SUITES>;

        $r15[i0] = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        $r17 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] SUPPORTED_CIPHER_SUITES>;

        $i2 = i0 + 1;

        $r17[$i2] = "TLS_FALLBACK_SCSV";

        $r19 = newarray (java.lang.String)[21];

        $r19[0] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";

        $r19[1] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";

        $r19[2] = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";

        $r19[3] = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";

        $r19[4] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";

        $r19[5] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";

        $r19[6] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";

        $r19[7] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";

        $r19[8] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";

        $r19[9] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";

        $r19[10] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";

        $r19[11] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";

        $r19[12] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";

        $r19[13] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";

        $r19[14] = "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA";

        $r19[15] = "TLS_ECDHE_RSA_WITH_RC4_128_SHA";

        $r19[16] = "TLS_RSA_WITH_AES_128_GCM_SHA256";

        $r19[17] = "TLS_RSA_WITH_AES_256_GCM_SHA384";

        $r19[18] = "TLS_RSA_WITH_AES_128_CBC_SHA";

        $r19[19] = "TLS_RSA_WITH_AES_256_CBC_SHA";

        $r19[20] = "SSL_RSA_WITH_RC4_128_SHA";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_X509_CIPHER_SUITES> = $r19;

        $r18 = newarray (java.lang.String)[4];

        $r18[0] = "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA";

        $r18[1] = "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA";

        $r18[2] = "TLS_PSK_WITH_AES_128_CBC_SHA";

        $r18[3] = "TLS_PSK_WITH_AES_256_CBC_SHA";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_PSK_CIPHER_SUITES> = $r18;

        $r20 = newarray (java.lang.String)[4];

        $r20[0] = "SSLv3";

        $r20[1] = "TLSv1";

        $r20[2] = "TLSv1.1";

        $r20[3] = "TLSv1.2";

        <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_PROTOCOLS> = $r20;

        return;
    }
}
