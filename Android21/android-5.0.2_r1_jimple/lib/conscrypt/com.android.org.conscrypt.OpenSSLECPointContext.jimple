final class com.android.org.conscrypt.OpenSSLECPointContext extends java.lang.Object
{
    private final com.android.org.conscrypt.OpenSSLECGroupContext group;
    private final long pointCtx;

    void <init>(com.android.org.conscrypt.OpenSSLECGroupContext, long)
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0;
        com.android.org.conscrypt.OpenSSLECGroupContext r1;
        long l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLECGroupContext;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECGroupContext group> = r1;

        r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx> = l0;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EC_POINT_clear_free(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        com.android.org.conscrypt.OpenSSLECGroupContext $r3, $r4, $r5;
        long $l0, $l1, $l2, $l3, $l4;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLECPointContext;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (com.android.org.conscrypt.OpenSSLECPointContext) r1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $r4 = r2.<com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l1 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $z1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: boolean EC_GROUP_cmp(long,long)>($l0, $l1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l2 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l4 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        $l3 = r2.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        $z2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: boolean EC_POINT_cmp(long,long,long)>($l2, $l4, $l3);

        return $z2;
    }

    public java.security.spec.ECPoint getECPoint()
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0;
        byte[][] r1;
        java.math.BigInteger r2, r3, $r5, $r7;
        com.android.org.conscrypt.OpenSSLECGroupContext $r4;
        long $l0, $l1;
        byte[] $r6, $r8;
        java.security.spec.ECPoint $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l0 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l1 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] EC_POINT_get_affine_coordinates(long,long)>($l0, $l1);

        $r5 = new java.math.BigInteger;

        $r6 = r1[0];

        specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6);

        r2 = $r5;

        $r7 = new java.math.BigInteger;

        $r8 = r1[1];

        specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>($r8);

        r3 = $r7;

        $r9 = new java.security.spec.ECPoint;

        specialinvoke $r9.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>(r2, r3);

        return $r9;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public long getContext()
    {
        com.android.org.conscrypt.OpenSSLECPointContext r0;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPointContext;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLECPointContext: long pointCtx>;

        return $l0;
    }

    public static com.android.org.conscrypt.OpenSSLECPointContext getInstance(int, com.android.org.conscrypt.OpenSSLECGroupContext, java.security.spec.ECPoint)
    {
        int i0;
        com.android.org.conscrypt.OpenSSLECGroupContext r0;
        java.security.spec.ECPoint r1;
        com.android.org.conscrypt.OpenSSLECPointContext r2, $r3;
        long $l1, $l2, $l3, $l4;
        java.math.BigInteger $r4, $r6;
        byte[] $r5, $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.org.conscrypt.OpenSSLECGroupContext;

        r1 := @parameter2: java.security.spec.ECPoint;

        $r3 = new com.android.org.conscrypt.OpenSSLECPointContext;

        $l1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_POINT_new(long)>($l1);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLECPointContext: void <init>(com.android.org.conscrypt.OpenSSLECGroupContext,long)>(r0, $l2);

        r2 = $r3;

        $l3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l4 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLECPointContext: long getContext()>();

        $r4 = virtualinvoke r1.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = virtualinvoke r1.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EC_POINT_set_affine_coordinates(long,long,byte[],byte[])>($l3, $l4, $r5, $r7);

        return r2;
    }
}
