public class com.android.org.conscrypt.OpenSSLSessionImpl extends java.lang.Object implements javax.net.ssl.SSLSession
{
    private long creationTime;
    long lastAccessedTime;
    final java.security.cert.X509Certificate[] localCertificates;
    final java.security.cert.X509Certificate[] peerCertificates;
    private boolean isValid;
    private final java.util.Map values;
    private volatile javax.security.cert.X509Certificate[] peerCertificateChain;
    protected long sslSessionNativePointer;
    private java.lang.String peerHost;
    private int peerPort;
    private java.lang.String cipherSuite;
    private java.lang.String protocol;
    private com.android.org.conscrypt.AbstractSessionContext sessionContext;
    private byte[] id;

    protected void <init>(long, java.security.cert.X509Certificate[], java.security.cert.X509Certificate[], java.lang.String, int, com.android.org.conscrypt.AbstractSessionContext)
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        long l0;
        java.security.cert.X509Certificate[] r1, r2;
        java.lang.String r3;
        int i1;
        com.android.org.conscrypt.AbstractSessionContext r4;
        java.util.HashMap $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: java.security.cert.X509Certificate[];

        r2 := @parameter2: java.security.cert.X509Certificate[];

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r4 := @parameter5: com.android.org.conscrypt.AbstractSessionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long creationTime> = 0L;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long lastAccessedTime> = 0L;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: boolean isValid> = 1;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: int peerPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer> = l0;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String peerHost> = r3;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: int peerPort> = i1;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: com.android.org.conscrypt.AbstractSessionContext sessionContext> = r4;

        return;
    }

    void <init>(byte[], java.lang.String, int, java.security.cert.X509Certificate[], com.android.org.conscrypt.AbstractSessionContext) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        byte[] r1;
        java.lang.String r2;
        int i0;
        java.security.cert.X509Certificate[] r3;
        com.android.org.conscrypt.AbstractSessionContext r4;
        long $l1, $l2;
        byte $b3;
        java.io.IOException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.security.cert.X509Certificate[];

        r4 := @parameter4: com.android.org.conscrypt.AbstractSessionContext;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_SSL_SESSION(byte[])>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(long,java.security.cert.X509Certificate[],java.security.cert.X509Certificate[],java.lang.String,int,com.android.org.conscrypt.AbstractSessionContext)>($l1, null, r3, r2, i0, r4);

        $l2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Invalid session data");

        throw $r5;

     label1:
        return;
    }

    public byte[] getId()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        byte[] $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] id>;

        if $r1 != null goto label1;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: void resetId()>();

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] id>;

        return $r2;
    }

    void resetId()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_SESSION_session_id(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] id> = $r1;

        return;
    }

    byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_SSL_SESSION(long)>($l0);

        return $r1;
    }

    public long getCreationTime()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        long $l0, $l2, $l3, $l4;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long creationTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_SESSION_get_time(long)>($l3);

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long creationTime> = $l4;

     label1:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long creationTime>;

        return $l2;
    }

    public long getLastAccessedTime()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long lastAccessedTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long getCreationTime()>();

        goto label2;

     label1:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long lastAccessedTime>;

     label2:
        return $l2;
    }

    public int getApplicationBufferSize()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        return 16384;
    }

    public int getPacketBufferSize()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        return 18437;
    }

    public java.security.Principal getLocalPrincipal()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.security.cert.X509Certificate[] $r1, $r2, $r3;
        int $i0;
        java.security.cert.X509Certificate $r4;
        javax.security.auth.x500.X500Principal $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r5;

     label1:
        return null;
    }

    public java.security.cert.Certificate[] getLocalCertificates()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.security.cert.X509Certificate[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        return $r1;
    }

    public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        javax.security.cert.X509Certificate[] r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: void checkPeerCertificatesPresent()>();

        r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] createPeerCertificateChain()>();

        r1 = $r2;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain> = $r2;

     label1:
        return r1;
    }

    private javax.security.cert.X509Certificate[] createPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        javax.security.cert.X509Certificate[] r1;
        int i0, $i1, $i2;
        byte[] r2;
        java.security.cert.X509Certificate[] $r3, $r4, $r5;
        java.security.cert.X509Certificate $r6;
        javax.security.cert.X509Certificate $r7;
        java.security.cert.CertificateEncodingException $r8, r16;
        javax.net.ssl.SSLPeerUnverifiedException $r9, $r12, r17, r19;
        java.lang.String $r10, $r15;
        javax.security.cert.CertificateException $r13, r18;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $i1 = lengthof $r3;

        r1 = newarray (javax.security.cert.X509Certificate)[$i1];

        i0 = 0;

     label2:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $i2 = lengthof $r4;

        if i0 >= $i2 goto label3;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r6 = $r5[i0];

        r2 = virtualinvoke $r6.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r7 = staticinvoke <javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>(r2);

        r1[i0] = $r7;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r1;

     label4:
        $r8 := @caughtexception;

        r16 = $r8;

        $r9 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r10 = virtualinvoke r16.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        specialinvoke $r9.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r10);

        r17 = $r9;

        virtualinvoke r17.<javax.net.ssl.SSLPeerUnverifiedException: java.lang.Throwable initCause(java.lang.Throwable)>(r17);

        throw r17;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

        $r12 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r15 = virtualinvoke r18.<javax.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r12.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r15);

        r19 = $r12;

        virtualinvoke r19.<javax.net.ssl.SSLPeerUnverifiedException: java.lang.Throwable initCause(java.lang.Throwable)>(r19);

        throw r19;

        catch java.security.cert.CertificateEncodingException from label1 to label3 with label4;
        catch javax.security.cert.CertificateException from label1 to label3 with label5;
    }

    public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.security.cert.X509Certificate[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: void checkPeerCertificatesPresent()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        return $r1;
    }

    private void checkPeerCertificatesPresent() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.security.cert.X509Certificate[] $r1, $r3;
        javax.net.ssl.SSLPeerUnverifiedException $r2;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

     label1:
        $r2 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r2.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No peer certificates");

        throw $r2;

     label2:
        return;
    }

    public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.security.cert.X509Certificate[] $r1;
        java.security.cert.X509Certificate $r2;
        javax.security.auth.x500.X500Principal $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: void checkPeerCertificatesPresent()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r2 = $r1[0];

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r3;
    }

    public java.lang.String getPeerHost()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String peerHost>;

        return $r1;
    }

    public int getPeerPort()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: int peerPort>;

        return $i0;
    }

    public java.lang.String getCipherSuite()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String r1, $r2, $r3, $r6, $r7;
        long $l0;
        java.util.Map $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String cipherSuite>;

        if $r2 != null goto label1;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String SSL_SESSION_cipher(long)>($l0);

        $r4 = <com.android.org.conscrypt.NativeCrypto: java.util.Map OPENSSL_TO_STANDARD_CIPHER_SUITES>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String cipherSuite> = $r6;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String cipherSuite>;

        if $r7 != null goto label1;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String cipherSuite> = r1;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String cipherSuite>;

        return $r3;
    }

    public java.lang.String getProtocol()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String $r1, $r2, $r3;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String protocol>;

        if $r1 != null goto label1;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String SSL_SESSION_get_version(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String protocol> = $r3;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String protocol>;

        return $r2;
    }

    public javax.net.ssl.SSLSessionContext getSessionContext()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        com.android.org.conscrypt.AbstractSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: com.android.org.conscrypt.AbstractSessionContext sessionContext>;

        return $r1;
    }

    public boolean isValid()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        com.android.org.conscrypt.AbstractSessionContext r1;
        boolean $z0, $z1;
        int $i0, $i2, $i3;
        long $l1, $l4, $l5, $l6;
        byte $b7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: com.android.org.conscrypt.AbstractSessionContext sessionContext>;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: boolean isValid>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        if $i0 == 0 goto label1;

        $l1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long getCreationTime()>();

        $i2 = interfaceinvoke r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        $i3 = $i2 * 1000;

        $l4 = (long) $i3;

        $l5 = $l1 + $l4;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b7 = $l5 cmp $l6;

        if $b7 >= 0 goto label1;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: boolean isValid> = 0;

     label1:
        $z1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: boolean isValid>;

        return $z1;
    }

    public void invalidate()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: boolean isValid> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSessionImpl: com.android.org.conscrypt.AbstractSessionContext sessionContext> = null;

        return;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name == null");

        throw $r4;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String[] getValueNames()
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.util.Map $r1, $r3;
        java.util.Set $r2;
        int $i0;
        java.lang.String[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public void putValue(java.lang.String, java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r5;
        boolean $z0, $z1;
        javax.net.ssl.SSLSessionBindingEvent $r6, $r8;
        javax.net.ssl.SSLSessionBindingListener $r7, $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name == null || value == null");

        throw $r4;

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values>;

        r3 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $z0 = r2 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label3;

        $r9 = (javax.net.ssl.SSLSessionBindingListener) r2;

        $r8 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r8.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>(r0, r1);

        interfaceinvoke $r9.<javax.net.ssl.SSLSessionBindingListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>($r8);

     label3:
        $z1 = r3 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z1 == 0 goto label4;

        $r7 = (javax.net.ssl.SSLSessionBindingListener) r3;

        $r6 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r6.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>(r0, r1);

        interfaceinvoke $r7.<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>($r6);

     label4:
        return;
    }

    public void removeValue(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.String r1;
        java.lang.Object r2;
        javax.net.ssl.SSLSessionBindingListener r3;
        java.util.Map $r4;
        boolean $z0;
        javax.net.ssl.SSLSessionBindingEvent $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name == null");

        throw $r6;

     label1:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: java.util.Map values>;

        r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $z0 = r2 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label2;

        r3 = (javax.net.ssl.SSLSessionBindingListener) r2;

        $r5 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r5.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>(r0, r1);

        interfaceinvoke r3.<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>($r5);

     label2:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLSessionImpl r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSessionImpl;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
