public class com.android.org.conscrypt.OpenSSLCipher$DESEDE extends com.android.org.conscrypt.OpenSSLCipher
{
    private static int DES_BLOCK_SIZE;

    public void <init>(com.android.org.conscrypt.OpenSSLCipher$Mode, com.android.org.conscrypt.OpenSSLCipher$Padding)
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1;
        com.android.org.conscrypt.OpenSSLCipher$Padding r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Mode;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLCipher$Padding;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void <init>(com.android.org.conscrypt.OpenSSLCipher$Mode,com.android.org.conscrypt.OpenSSLCipher$Padding)>(r1, r2);

        return;
    }

    protected java.lang.String getBaseCipherName()
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        return "DESede";
    }

    protected java.lang.String getCipherName(int, com.android.org.conscrypt.OpenSSLCipher$Mode)
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        int i0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1, $r3;
        java.lang.String r2, $r7, $r9, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r10;
        java.util.Locale $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLCipher$Mode;

        if i0 != 16 goto label1;

        r2 = "des-ede";

        goto label2;

     label1:
        r2 = "des-ede3";

     label2:
        $r3 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode ECB>;

        if r1 != $r3 goto label3;

        return r2;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLCipher$Mode: java.lang.String toString()>();

        $r8 = <java.util.Locale: java.util.Locale US>;

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    protected void checkSupportedKeySize(int) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        int i0;
        java.security.InvalidKeyException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        i0 := @parameter0: int;

        if i0 == 16 goto label1;

        if i0 == 24 goto label1;

        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key size must be 128 or 192 bits");

        throw $r1;

     label1:
        return;
    }

    protected void checkSupportedMode(com.android.org.conscrypt.OpenSSLCipher$Mode) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1;
        int[] $r2;
        int $i0, $i1;
        java.security.NoSuchAlgorithmException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Mode;

        $r2 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Mode>;

        $i0 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLCipher$Mode: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label1;
            default: goto label2;
        };

     label1:
        return;

     label2:
        $r3 = new java.security.NoSuchAlgorithmException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported mode ");

        $r6 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLCipher$Mode: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    protected void checkSupportedPadding(com.android.org.conscrypt.OpenSSLCipher$Padding) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        com.android.org.conscrypt.OpenSSLCipher$Padding r1;
        int[] $r2;
        int $i0, $i1;
        javax.crypto.NoSuchPaddingException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Padding;

        $r2 = <com.android.org.conscrypt.OpenSSLCipher$1: int[] $SwitchMap$org$conscrypt$OpenSSLCipher$Padding>;

        $i0 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLCipher$Padding: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        return;

     label2:
        $r3 = new javax.crypto.NoSuchPaddingException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported padding ");

        $r6 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLCipher$Padding: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    protected int getCipherBlockSize()
    {
        com.android.org.conscrypt.OpenSSLCipher$DESEDE r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher$DESEDE;

        $i0 = <com.android.org.conscrypt.OpenSSLCipher$DESEDE: int DES_BLOCK_SIZE>;

        return $i0;
    }

    static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLCipher$DESEDE: int DES_BLOCK_SIZE> = 8;

        return;
    }
}
