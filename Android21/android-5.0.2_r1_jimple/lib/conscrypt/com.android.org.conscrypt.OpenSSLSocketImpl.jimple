public class com.android.org.conscrypt.OpenSSLSocketImpl extends javax.net.ssl.SSLSocket implements com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, com.android.org.conscrypt.SSLParametersImpl$AliasChooser, com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks
{
    private static final boolean DBG_STATE;
    private final java.lang.Object stateLock;
    private static final int STATE_NEW;
    private static final int STATE_HANDSHAKE_STARTED;
    private static final int STATE_HANDSHAKE_COMPLETED;
    private static final int STATE_READY_HANDSHAKE_CUT_THROUGH;
    private static final int STATE_READY;
    private static final int STATE_CLOSED;
    private int state;
    private long sslNativePointer;
    private com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream is;
    private com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream os;
    private final java.net.Socket socket;
    private final boolean autoClose;
    private java.lang.String wrappedHost;
    private final int wrappedPort;
    private final com.android.org.conscrypt.SSLParametersImpl sslParameters;
    private final dalvik.system.CloseGuard guard;
    private java.util.ArrayList listeners;
    com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey;
    private com.android.org.conscrypt.OpenSSLSessionImpl sslSession;
    private com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession;
    private int readTimeoutMilliseconds;
    private int writeTimeoutMilliseconds;
    private int handshakeTimeoutMilliseconds;

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.Object $r2;
        dalvik.system.CloseGuard $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    protected void <init>(java.lang.String, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.Object $r3;
        dalvik.system.CloseGuard $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        return;
    }

    protected void <init>(java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.Object $r3;
        dalvik.system.CloseGuard $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)>(r1, i0);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r3;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        return;
    }

    protected void <init>(java.lang.String, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        int i0, i1;
        java.net.InetAddress r2;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4;
        dalvik.system.CloseGuard $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r3;

        return;
    }

    protected void <init>(java.net.InetAddress, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4;
        dalvik.system.CloseGuard $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = null;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r3;

        return;
    }

    protected void <init>(java.net.Socket, java.lang.String, int, boolean, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket r1;
        java.lang.String r2;
        int i0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4;
        dalvik.system.CloseGuard $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 0;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = i0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = z0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r3;

        return;
    }

    private void checkOpen() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean $z0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r1;

     label1:
        return;
    }

    public void startHandshake() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, r5, r6, r10, r18, $r19, $r32, $r36, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r65, $r71, $r72, $r80, $r81, r88, r92, r93, r95, r96;
        java.lang.Throwable r2, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, $r50, $r54, $r59, $r62, $r64, $r68, $r69, $r73, $r77, $r78, $r79, $r82;
        boolean z0, z1, z2, $z3, $z4, z5;
        com.android.org.conscrypt.AbstractSessionContext r3;
        long l0, l3, $l5, $l6, $l8, $l9, $l10, $l13, $l19, $l23;
        com.android.org.conscrypt.OpenSSLSessionImpl r4, $r41;
        int i1, i2, $i4, $i7, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i25, $i26, $i27;
        byte[] $r20, $r35, $r39;
        com.android.org.conscrypt.SSLParametersImpl $r21, $r22, $r23, $r24, $r26, $r28, $r30, $r37, $r38, $r42;
        dalvik.system.CloseGuard $r25;
        java.lang.String $r27, $r29, $r40, $r55, $r76, r90, r91;
        com.android.org.conscrypt.OpenSSLKey $r31;
        java.io.FileDescriptor $r33;
        java.net.Socket $r34;
        java.io.IOException $r52, $r53, $r63, $r67, $r74;
        java.security.cert.CertificateException $r57, r85;
        javax.net.ssl.SSLHandshakeException $r58, $r60, $r70, r86;
        javax.net.ssl.SSLProtocolException $r61, r98;
        javax.net.ssl.SSLException $r66, r87;
        java.lang.Object[] $r75;
        java.security.SecureRandom r83;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        $r19 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r19;

        entermonitor $r19;

     label01:
        $i4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i4 != 0 goto label02;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 1;

        goto label04;

     label02:
        exitmonitor r1;

     label03:
        return;

     label04:
        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r78 := @caughtexception;

        r2 = $r78;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $r22 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r83 = virtualinvoke $r22.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()>();

        if r83 != null goto label09;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int RAND_load_file(java.lang.String,long)>("/dev/urandom", 1024L);

        goto label10;

     label09:
        $r20 = virtualinvoke r83.<java.security.SecureRandom: byte[] generateSeed(int)>(1024);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void RAND_seed(byte[])>($r20);

     label10:
        $r21 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        z0 = virtualinvoke $r21.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = 0L;

        z1 = 1;

     label11:
        $r23 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r3 = virtualinvoke $r23.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.AbstractSessionContext getSessionContext()>();

        l0 = r3.<com.android.org.conscrypt.AbstractSessionContext: long sslCtxNativePointer>;

        $l5 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_new(long)>(l0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = $l5;

        $r25 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r25.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        z2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getEnableSessionCreation()>();

        if z2 != 0 goto label12;

        $l23 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_session_creation_enabled(long,boolean)>($l23, z2);

     label12:
        $r24 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r27 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        $i7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getPeerPort()>();

        r4 = virtualinvoke $r24.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLSessionImpl getSessionToReuse(long,java.lang.String,int)>($l6, $r27, $i7);

        $r26 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r29 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        virtualinvoke $r26.<com.android.org.conscrypt.SSLParametersImpl: void setSSLParameters(long,long,com.android.org.conscrypt.SSLParametersImpl$AliasChooser,com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks,java.lang.String)>(l0, $l9, r0, r0, $r29);

        $r28 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        virtualinvoke $r28.<com.android.org.conscrypt.SSLParametersImpl: void setCertificateValidation(long)>($l8);

        $r30 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r31 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey>;

        virtualinvoke $r30.<com.android.org.conscrypt.SSLParametersImpl: void setTlsChannelId(long,com.android.org.conscrypt.OpenSSLKey)>($l10, $r31);

        i1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoTimeout()>();

        i2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoWriteTimeout()>();

        $i12 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        if $i12 < 0 goto label13;

        $i25 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoTimeout(int)>($i25);

        $i26 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>($i26);

     label13:
        $r32 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r5 = $r32;

        entermonitor $r32;

     label14:
        $i11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i11 != 5 goto label24;

        exitmonitor r5;

     label15:
        if z1 == 0 goto label23;

        $r47 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r6 = $r47;

        entermonitor $r47;

     label16:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        $r51 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r51.<java.lang.Object: void notifyAll()>();

        exitmonitor r6;

     label17:
        goto label20;

     label18:
        $r54 := @caughtexception;

        r7 = $r54;

        exitmonitor r6;

     label19:
        throw r7;

     label20:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

     label21:
        goto label23;

     label22:
        $r53 := @caughtexception;

     label23:
        return;

     label24:
        exitmonitor r5;

     label25:
        goto label28;

     label26:
        $r73 := @caughtexception;

        r8 = $r73;

        exitmonitor r5;

     label27:
        throw r8;

     label28:
        $l13 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r34 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $r33 = staticinvoke <com.android.org.conscrypt.Platform: java.io.FileDescriptor getFileDescriptor(java.net.Socket)>($r34);

        $i15 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoTimeout()>();

        $r37 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r35 = $r37.<com.android.org.conscrypt.SSLParametersImpl: byte[] npnProtocols>;

        if z0 == 0 goto label29;

        $r39 = null;

        goto label30;

     label29:
        $r38 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r39 = $r38.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols>;

     label30:
        l3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_do_handshake(long,java.io.FileDescriptor,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks,int,boolean,byte[],byte[])>($l13, $r33, r0, $i15, z0, $r35, $r39);

     label31:
        goto label50;

     label32:
        $r57 := @caughtexception;

        r85 = $r57;

        $r58 = new javax.net.ssl.SSLHandshakeException;

        $r55 = virtualinvoke r85.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r58.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>($r55);

        r86 = $r58;

        virtualinvoke r86.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(r85);

        throw r86;

     label33:
        $r66 := @caughtexception;

        r87 = $r66;

        $r65 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r88 = $r65;

        entermonitor $r65;

     label34:
        $i27 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i27 != 5 goto label44;

        exitmonitor r88;

     label35:
        if z1 == 0 goto label43;

        $r72 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r10 = $r72;

        entermonitor $r72;

     label36:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        $r71 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r71.<java.lang.Object: void notifyAll()>();

        exitmonitor r10;

     label37:
        goto label40;

     label38:
        $r69 := @caughtexception;

        r9 = $r69;

        exitmonitor r10;

     label39:
        throw r9;

     label40:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

     label41:
        goto label43;

     label42:
        $r74 := @caughtexception;

     label43:
        return;

     label44:
        exitmonitor r88;

     label45:
        goto label48;

     label46:
        $r64 := @caughtexception;

        r12 = $r64;

        exitmonitor r88;

     label47:
        throw r12;

     label48:
        r90 = virtualinvoke r87.<javax.net.ssl.SSLException: java.lang.String getMessage()>();

        $z4 = virtualinvoke r90.<java.lang.String: boolean contains(java.lang.CharSequence)>("unexpected CCS");

        if $z4 == 0 goto label49;

        $r75 = newarray (java.lang.Object)[1];

        $r76 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        $r75[0] = $r76;

        r91 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ssl_unexpected_ccs: host=%s", $r75);

        staticinvoke <com.android.org.conscrypt.Platform: void logEvent(java.lang.String)>(r91);

     label49:
        throw r87;

     label50:
        z5 = 0;

        $r36 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r92 = $r36;

        entermonitor $r36;

     label51:
        $i14 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i14 != 2 goto label52;

        z5 = 1;

        goto label62;

     label52:
        $i18 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i18 != 5 goto label62;

        exitmonitor r92;

     label53:
        if z1 == 0 goto label61;

        $r49 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r93 = $r49;

        entermonitor $r49;

     label54:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        $r46 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r46.<java.lang.Object: void notifyAll()>();

        exitmonitor r93;

     label55:
        goto label58;

     label56:
        $r62 := @caughtexception;

        r11 = $r62;

        exitmonitor r93;

     label57:
        throw r11;

     label58:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

     label59:
        goto label61;

     label60:
        $r63 := @caughtexception;

     label61:
        return;

     label62:
        exitmonitor r92;

     label63:
        goto label66;

     label64:
        $r82 := @caughtexception;

        r14 = $r82;

        exitmonitor r92;

     label65:
        throw r14;

     label66:
        $r42 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l19 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r40 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        $i16 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getPeerPort()>();

        $r41 = virtualinvoke $r42.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLSessionImpl setupSession(long,long,com.android.org.conscrypt.OpenSSLSessionImpl,java.lang.String,int,boolean)>(l3, $l19, r4, $r40, $i16, z5);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession> = $r41;

        $i17 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        if $i17 < 0 goto label67;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoTimeout(int)>(i1);

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>(i2);

     label67:
        if z5 == 0 goto label68;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void notifyHandshakeCompletedListeners()>();

     label68:
        $r45 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r95 = $r45;

        entermonitor $r45;

     label69:
        $i20 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i20 != 5 goto label70;

        $z3 = 1;

        goto label71;

     label70:
        $z3 = 0;

     label71:
        z1 = $z3;

        $i22 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i22 != 1 goto label72;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 3;

        goto label73;

     label72:
        $i21 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i21 != 2 goto label73;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 4;

     label73:
        if z1 != 0 goto label74;

        $r48 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r48.<java.lang.Object: void notifyAll()>();

     label74:
        exitmonitor r95;

     label75:
        goto label78;

     label76:
        $r68 := @caughtexception;

        r13 = $r68;

        exitmonitor r95;

     label77:
        throw r13;

     label78:
        if z1 == 0 goto label97;

        $r43 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r96 = $r43;

        entermonitor $r43;

     label79:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        $r44 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r44.<java.lang.Object: void notifyAll()>();

        exitmonitor r96;

     label80:
        goto label83;

     label81:
        $r50 := @caughtexception;

        r16 = $r50;

        exitmonitor r96;

     label82:
        throw r16;

     label83:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

     label84:
        goto label97;

     label85:
        $r52 := @caughtexception;

        goto label97;

     label86:
        $r61 := @caughtexception;

        r98 = $r61;

        $r60 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r60.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Handshake failed");

        $r59 = virtualinvoke $r60.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(r98);

        $r70 = (javax.net.ssl.SSLHandshakeException) $r59;

        throw $r70;

     label87:
        $r79 := @caughtexception;

        r15 = $r79;

     label88:
        if z1 == 0 goto label96;

        $r80 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r18 = $r80;

        entermonitor $r80;

     label89:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        $r81 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r81.<java.lang.Object: void notifyAll()>();

        exitmonitor r18;

     label90:
        goto label93;

     label91:
        $r77 := @caughtexception;

        r17 = $r77;

        exitmonitor r18;

     label92:
        throw r17;

     label93:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

     label94:
        goto label96;

     label95:
        $r67 := @caughtexception;

     label96:
        throw r15;

     label97:
        return;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.security.cert.CertificateException from label28 to label31 with label32;
        catch javax.net.ssl.SSLException from label28 to label31 with label33;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.lang.Throwable from label34 to label35 with label46;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.lang.Throwable from label46 to label47 with label46;
        catch java.lang.Throwable from label54 to label55 with label56;
        catch java.lang.Throwable from label56 to label57 with label56;
        catch java.io.IOException from label58 to label59 with label60;
        catch java.lang.Throwable from label51 to label53 with label64;
        catch java.lang.Throwable from label62 to label63 with label64;
        catch java.lang.Throwable from label64 to label65 with label64;
        catch java.lang.Throwable from label69 to label75 with label76;
        catch java.lang.Throwable from label76 to label77 with label76;
        catch java.lang.Throwable from label79 to label80 with label81;
        catch java.lang.Throwable from label81 to label82 with label81;
        catch java.io.IOException from label83 to label84 with label85;
        catch javax.net.ssl.SSLProtocolException from label11 to label15 with label86;
        catch javax.net.ssl.SSLProtocolException from label24 to label35 with label86;
        catch javax.net.ssl.SSLProtocolException from label44 to label53 with label86;
        catch javax.net.ssl.SSLProtocolException from label62 to label78 with label86;
        catch java.lang.Throwable from label11 to label15 with label87;
        catch java.lang.Throwable from label24 to label35 with label87;
        catch java.lang.Throwable from label44 to label53 with label87;
        catch java.lang.Throwable from label62 to label78 with label87;
        catch java.lang.Throwable from label89 to label90 with label91;
        catch java.lang.Throwable from label91 to label92 with label91;
        catch java.io.IOException from label93 to label94 with label95;
        catch java.lang.Throwable from label86 to label88 with label87;
    }

    java.lang.String getPeerHostName()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        return $r4;

     label1:
        r1 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>();

        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        return $r3;

     label2:
        return null;
    }

    int getPeerPort()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        if $r1 != null goto label1;

        $i0 = specialinvoke r0.<javax.net.ssl.SSLSocket: int getPort()>();

        goto label2;

     label1:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort>;

     label2:
        return $i0;
    }

    public void clientCertificateRequested(byte[], byte[][]) throws java.security.cert.CertificateEncodingException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1;
        byte[][] r2;
        long $l0;
        com.android.org.conscrypt.SSLParametersImpl $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[][];

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        virtualinvoke $r3.<com.android.org.conscrypt.SSLParametersImpl: void chooseClientCertificate(byte[],byte[][],long,com.android.org.conscrypt.SSLParametersImpl$AliasChooser)>(r1, r2, $l0, r0);

        return;
    }

    public int clientPSKKeyRequested(java.lang.String, byte[], byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        byte[] r2, r3;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $i0 = virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: int clientPSKKeyRequested(java.lang.String,byte[],byte[],com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)>(r1, r2, r3, r0);

        return $i0;
    }

    public int serverPSKKeyRequested(java.lang.String, java.lang.String, byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1, r2;
        byte[] r3;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $i0 = virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: int serverPSKKeyRequested(java.lang.String,java.lang.String,byte[],com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)>(r1, r2, r3, r0);

        return $i0;
    }

    public void onSSLStateChange(long, int, int)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long l0;
        int i1, i2, $i3, $i4, $i5;
        java.lang.Object r1, $r4, $r9, $r11, r16;
        java.lang.Throwable r2, r3, $r13, $r14;
        com.android.org.conscrypt.OpenSSLSessionImpl $r5, $r10;
        com.android.org.conscrypt.SSLParametersImpl $r6, $r8, $r12;
        boolean $z0;
        com.android.org.conscrypt.AbstractSessionContext $r7, r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 == 32 goto label01;

        return;

     label01:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $i3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i3 != 1 goto label04;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 2;

        exitmonitor r1;

     label03:
        return;

     label04:
        $i4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i4 != 3 goto label05;

        goto label07;

     label05:
        $i5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i5 != 5 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLSessionImpl: void resetId()>();

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r6.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label12;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r7 = virtualinvoke $r12.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext getClientSessionContext()>();

        goto label13;

     label12:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r7 = virtualinvoke $r8.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext getServerSessionContext()>();

     label13:
        r15 = $r7;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        virtualinvoke r15.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>($r10);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void notifyHandshakeCompletedListeners()>();

        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r16 = $r9;

        entermonitor $r9;

     label14:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 4;

        $r11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r11.<java.lang.Object: void notifyAll()>();

        exitmonitor r16;

     label15:
        goto label18;

     label16:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r16;

     label17:
        throw r3;

     label18:
        return;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void notifyHandshakeCompletedListeners()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedEvent r1, $r8;
        java.util.Iterator r2;
        javax.net.ssl.HandshakeCompletedListener r3;
        java.lang.RuntimeException r4, $r12;
        java.lang.Thread r5;
        java.util.ArrayList $r6, $r7, $r10;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLSessionImpl $r9;
        java.lang.Object $r11;
        java.lang.Thread$UncaughtExceptionHandler $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r6 == null goto label6;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r8 = new javax.net.ssl.HandshakeCompletedEvent;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        specialinvoke $r8.<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>(r0, $r9);

        r1 = $r8;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        r2 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javax.net.ssl.HandshakeCompletedListener) $r11;

     label2:
        interfaceinvoke r3.<javax.net.ssl.HandshakeCompletedListener: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>(r1);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke r5.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r13.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r5, r4);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    public void verifyCertificateChain(long, long[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long l0, $l6;
        java.security.cert.CertificateException $r1, $r17, $r18, r21;
        long[] r2;
        java.lang.String r3, r6, $r11, $r15;
        javax.net.ssl.X509TrustManager r4;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r5;
        int i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r7, $r20;
        com.android.org.conscrypt.SSLParametersImpl $r8, $r12;
        javax.net.ssl.SSLException $r9;
        com.android.org.conscrypt.OpenSSLSessionImpl $r10;
        java.security.PublicKey $r13;
        com.android.org.conscrypt.OpenSSLX509Certificate $r14, $r16;
        java.lang.Exception $r19, r22;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        l0 := @parameter0: long;

        r2 := @parameter1: long[];

        r3 := @parameter2: java.lang.String;

     label01:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r4 = virtualinvoke $r8.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getX509TrustManager()>();

        if r4 != null goto label02;

        $r18 = new java.security.cert.CertificateException;

        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String)>("No X.509 TrustManager");

        throw $r18;

     label02:
        if r2 == null goto label03;

        $i2 = lengthof r2;

        if $i2 != 0 goto label04;

     label03:
        $r9 = new javax.net.ssl.SSLException;

        specialinvoke $r9.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Peer sent no certificate");

        throw $r9;

     label04:
        $i3 = lengthof r2;

        r5 = newarray (com.android.org.conscrypt.OpenSSLX509Certificate)[$i3];

        i1 = 0;

     label05:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label06;

        $r16 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l6 = r2[i1];

        specialinvoke $r16.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l6);

        r5[i1] = $r16;

        i1 = i1 + 1;

        goto label05;

     label06:
        $r10 = new com.android.org.conscrypt.OpenSSLSessionImpl;

        $r11 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        $i5 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getPeerPort()>();

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(long,java.security.cert.X509Certificate[],java.security.cert.X509Certificate[],java.lang.String,int,com.android.org.conscrypt.AbstractSessionContext)>(l0, null, r5, $r11, $i5, null);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = $r10;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        z0 = virtualinvoke $r12.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if z0 == 0 goto label07;

        $r15 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        staticinvoke <com.android.org.conscrypt.Platform: void checkServerTrusted(javax.net.ssl.X509TrustManager,java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r4, r5, r3, $r15);

        goto label08;

     label07:
        $r14 = r5[0];

        $r13 = virtualinvoke $r14.<com.android.org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>();

        r6 = interfaceinvoke $r13.<java.security.PublicKey: java.lang.String getAlgorithm()>();

        interfaceinvoke r4.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r5, r6);

     label08:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = null;

        goto label13;

     label09:
        $r17 := @caughtexception;

        r21 = $r17;

        throw r21;

     label10:
        $r19 := @caughtexception;

        r22 = $r19;

        $r1 = new java.security.cert.CertificateException;

        specialinvoke $r1.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r22);

        throw $r1;

     label11:
        $r20 := @caughtexception;

        r7 = $r20;

     label12:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = null;

        throw r7;

     label13:
        return;

        catch java.security.cert.CertificateException from label01 to label08 with label09;
        catch java.lang.Exception from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label08 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, $r4;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream r2, $r5, $r6;
        java.lang.Throwable r3, $r8;
        int $i0;
        java.net.SocketException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 != 5 goto label2;

        $r7 = new java.net.SocketException;

        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r7;

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream is>;

        if $r5 != null goto label3;

        $r6 = new com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream: void <init>(com.android.org.conscrypt.OpenSSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream is> = $r6;

     label3:
        r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream is>;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void waitForHandshake()>();

        return r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, $r4;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r2, $r5, $r6;
        java.lang.Throwable r3, $r8;
        int $i0;
        java.net.SocketException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 != 5 goto label2;

        $r7 = new java.net.SocketException;

        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r7;

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream os>;

        if $r5 != null goto label3;

        $r6 = new com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: void <init>(com.android.org.conscrypt.OpenSSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream os> = $r6;

     label3:
        r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream os>;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void waitForHandshake()>();

        return r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void assertReadableOrWriteableState()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 4 goto label1;

        $i1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i1 != 3 goto label2;

     label1:
        return;

     label2:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state: ");

        $i2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r1;
    }

    private void waitForHandshake() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, $r5, $r7;
        java.lang.InterruptedException r2, $r9;
        java.io.IOException r3, $r10;
        java.lang.Throwable r4, $r8;
        int $i0, $i1, $i2, $i3;
        java.net.SocketException $r6;
        java.lang.Thread $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void startHandshake()>();

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 4 goto label05;

        $i2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i2 == 3 goto label05;

        $i3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i3 == 5 goto label05;

     label02:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r7.<java.lang.Object: void wait()>();

     label03:
        goto label01;

     label04:
        $r9 := @caughtexception;

        r2 = $r9;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Interrupted waiting for handshake");

        r3 = $r10;

        virtualinvoke r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);

        throw r3;

     label05:
        $i1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i1 != 5 goto label06;

        $r6 = new java.net.SocketException;

        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r6;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label09:
        throw r4;

     label10:
        return;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.OpenSSLSessionImpl $r2, $r3;
        java.io.IOException $r4;
        javax.net.ssl.SSLSession $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r2 != null goto label4;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void waitForHandshake()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <com.android.org.conscrypt.SSLNullSession: javax.net.ssl.SSLSession getNullSession()>();

        return $r5;

     label4:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r5;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners> = $r4;

     label2:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r6;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r5;

     label2:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r4;

     label3:
        return;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>();

        return $r2;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        return $r1;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>();

        return $r2;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledProtocols(java.lang.String[])>(r1);

        return;
    }

    public void setUseSessionTickets(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean useSessionTickets> = z0;

        return;
    }

    public void setHostname(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setUseSni(boolean)>($z0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = r1;

        return;
    }

    public void setChannelIdEnabled(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        int $i0;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        java.lang.IllegalStateException $r5, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client mode");

        throw $r6;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not enable/disable Channel ID after the initial handshake has begun.");

        throw $r5;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r4.<com.android.org.conscrypt.SSLParametersImpl: boolean channelIdEnabled> = z0;

        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public byte[] getChannelId() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        int $i0;
        long $l1;
        byte[] $r4;
        java.lang.IllegalStateException $r5, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client mode");

        throw $r6;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 4 goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Channel ID is only available after handshake completes");

        throw $r5;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get_tls_channel_id(long)>($l1);

        return $r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setChannelIdPrivateKey(java.security.PrivateKey)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.security.PrivateKey r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r10;
        boolean $z0;
        int $i0;
        com.android.org.conscrypt.SSLParametersImpl $r5, $r7;
        com.android.org.conscrypt.OpenSSLKey $r6;
        java.lang.IllegalStateException $r8, $r9;
        java.security.InvalidKeyException $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.security.PrivateKey;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z0 != 0 goto label01;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Server mode");

        throw $r9;

     label01:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r2 = $r4;

        entermonitor $r4;

     label02:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 0 goto label03;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not change Channel ID private key after the initial handshake has begun.");

        throw $r8;

     label03:
        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        if r1 != null goto label08;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r7.<com.android.org.conscrypt.SSLParametersImpl: boolean channelIdEnabled> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey> = null;

        goto label12;

     label08:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r5.<com.android.org.conscrypt.SSLParametersImpl: boolean channelIdEnabled> = 1;

     label09:
        $r6 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey)>(r1);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey> = $r6;

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

     label12:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.security.InvalidKeyException from label09 to label10 with label11;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        int $i0;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not change the mode after the initial handshake has begun.");

        throw $r5;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public void sendUrgentData(int) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Method sendUrgentData() is not supported.");

        throw $r1;
    }

    public void setOOBInline(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Methods sendUrgentData, setOOBInline are not supported.");

        throw $r1;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(i0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = i0;

        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds>;

        return $i0;
    }

    public void setSoWriteTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;
        long $l1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = i0;

        $l1 = (long) i0;

        staticinvoke <com.android.org.conscrypt.Platform: void setSocketTimeout(java.net.Socket,long)>(r0, $l1);

        return;
    }

    public int getSoWriteTimeout() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds>;

        return $i0;
    }

    public void setHandshakeTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = i0;

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, $r3, $r4, $r5, $r6;
        int i0, $i1;
        java.lang.Throwable r2, $r7;
        long $l2, $l3;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream r8;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $i1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        if $i1 != 5 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state> = 5;

        if i0 != 0 goto label05;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void closeUnderlyingSocket()>();

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label04:
        return;

     label05:
        if i0 == 4 goto label07;

        if i0 == 3 goto label07;

        $l3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_interrupt(long)>($l3);

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label06:
        return;

     label07:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        r8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream is>;

        r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream os>;

        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        if r8 != null goto label12;

        if r9 == null goto label13;

     label12:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_interrupt(long)>($l2);

     label13:
        if r8 == null goto label14;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream: void awaitPendingOps()>();

     label14:
        if r9 == null goto label15;

        virtualinvoke r9.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: void awaitPendingOps()>();

     label15:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void shutdownAndFreeSslNative()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void shutdownAndFreeSslNative() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r2, $r7;
        dalvik.system.BlockGuard$Policy $r3;
        java.net.Socket $r4;
        long $l0;
        java.io.FileDescriptor $r5;
        java.io.IOException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

     label1:
        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $r5 = staticinvoke <com.android.org.conscrypt.Platform: java.io.FileDescriptor getFileDescriptor(java.net.Socket)>($r4);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_shutdown(long,java.io.FileDescriptor,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks)>($l0, $r5, r0);

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void closeUnderlyingSocket()>();

        goto label7;

     label3:
        $r6 := @caughtexception;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void closeUnderlyingSocket()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

     label6:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void closeUnderlyingSocket()>();

        throw r2;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void closeUnderlyingSocket() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r1 == r0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose>;

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $z2 = virtualinvoke $r2.<java.net.Socket: boolean isClosed()>();

        if $z2 != 0 goto label2;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void close()>();

        goto label2;

     label1:
        $z0 = specialinvoke r0.<javax.net.ssl.SSLSocket: boolean isClosed()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

     label2:
        return;
    }

    private void free()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_free(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = 0L;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.FileDescriptor getFileDescriptor$()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket $r1, $r2;
        java.io.FileDescriptor $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r1 != r0 goto label1;

        $r4 = staticinvoke <com.android.org.conscrypt.Platform: java.io.FileDescriptor getFileDescriptorFromSSLSocket(com.android.org.conscrypt.OpenSSLSocketImpl)>(r0);

        return $r4;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $r3 = staticinvoke <com.android.org.conscrypt.Platform: java.io.FileDescriptor getFileDescriptor(java.net.Socket)>($r2);

        return $r3;
    }

    public byte[] getNpnSelectedProtocol()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get_npn_negotiated_protocol(long)>($l0);

        return $r1;
    }

    public byte[] getAlpnSelectedProtocol()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get0_alpn_selected(long)>($l0);

        return $r1;
    }

    public void setNpnProtocols(byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("npnProtocols.length == 0");

        throw $r3;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2.<com.android.org.conscrypt.SSLParametersImpl: byte[] npnProtocols> = r1;

        return;
    }

    public void setAlpnProtocols(byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("alpnProtocols.length == 0");

        throw $r3;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols> = r1;

        return;
    }

    public java.lang.String chooseServerAlias(javax.net.ssl.X509KeyManager, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.X509KeyManager r1;
        java.lang.String r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.X509KeyManager;

        r2 := @parameter1: java.lang.String;

        $r3 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(r2, null, r0);

        return $r3;
    }

    public java.lang.String chooseClientAlias(javax.net.ssl.X509KeyManager, javax.security.auth.x500.X500Principal[], java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.X509KeyManager r1;
        javax.security.auth.x500.X500Principal[] r2;
        java.lang.String[] r3;
        java.lang.String $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.X509KeyManager;

        r2 := @parameter1: javax.security.auth.x500.X500Principal[];

        r3 := @parameter2: java.lang.String[];

        $r4 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(r3, null, r0);

        return $r4;
    }

    public java.lang.String chooseServerPSKIdentityHint(com.android.org.conscrypt.PSKKeyManager)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        $r2 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: java.lang.String chooseServerKeyIdentityHint(java.net.Socket)>(r0);

        return $r2;
    }

    public java.lang.String chooseClientPSKIdentity(com.android.org.conscrypt.PSKKeyManager, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        r2 := @parameter1: java.lang.String;

        $r3 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: java.lang.String chooseClientKeyIdentity(java.lang.String,java.net.Socket)>(r2, r0);

        return $r3;
    }

    public javax.crypto.SecretKey getPSKKey(com.android.org.conscrypt.PSKKeyManager, java.lang.String, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String r2, r3;
        javax.crypto.SecretKey $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: javax.crypto.SecretKey getKey(java.lang.String,java.lang.String,java.net.Socket)>(r2, r3, r0);

        return $r4;
    }

    static void access$000(com.android.org.conscrypt.OpenSSLSocketImpl) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        return;
    }

    static java.lang.Object access$100(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object stateLock>;

        return $r1;
    }

    static int access$200(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int state>;

        return $i0;
    }

    static long access$300(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        return $l0;
    }

    static java.net.Socket access$400(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket $r1;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        return $r1;
    }

    static int access$500(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_CLOSED> = 5;

        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_READY> = 4;

        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_READY_HANDSHAKE_CUT_THROUGH> = 3;

        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_HANDSHAKE_COMPLETED> = 2;

        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_HANDSHAKE_STARTED> = 1;

        <com.android.org.conscrypt.OpenSSLSocketImpl: int STATE_NEW> = 0;

        <com.android.org.conscrypt.OpenSSLSocketImpl: boolean DBG_STATE> = 0;

        return;
    }
}
