public class com.android.org.conscrypt.OpenSSLDHPrivateKey extends java.lang.Object implements javax.crypto.interfaces.DHPrivateKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    private transient com.android.org.conscrypt.OpenSSLKey key;
    private transient byte[] p;
    private transient byte[] g;
    private transient byte[] x;
    private transient java.lang.Object mParamsLock;
    private transient boolean readParams;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: java.lang.Object mParamsLock> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    void <init>(javax.crypto.spec.DHPrivateKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        javax.crypto.spec.DHPrivateKeySpec r1;
        java.lang.Exception r2, $r11;
        java.lang.Object $r3;
        com.android.org.conscrypt.OpenSSLKey $r4;
        java.math.BigInteger $r5, $r7, $r9;
        byte[] $r6, $r8, $r10;
        long $l0;
        java.security.spec.InvalidKeySpecException $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        r1 := @parameter0: javax.crypto.spec.DHPrivateKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: java.lang.Object mParamsLock> = $r3;

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = virtualinvoke r1.<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r7 = virtualinvoke r1.<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()>();

        $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        $r9 = virtualinvoke r1.<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()>();

        $r10 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DH(byte[],byte[],byte[],byte[])>($r6, $r8, null, $r10);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = $r4;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r12.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r2);

        throw $r12;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        java.lang.Object r1, $r4;
        byte[][] r2;
        java.lang.Throwable r3, $r9;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKey $r5;
        long $l0;
        byte[] $r6, $r7, $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: java.lang.Object mParamsLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: boolean readParams>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_DH_params(long)>($l0);

        $r6 = r2[0];

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p> = $r6;

        $r7 = r2[1];

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g> = $r7;

        $r8 = r2[3];

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x> = $r8;

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: boolean readParams> = 1;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static com.android.org.conscrypt.OpenSSLKey getInstance(javax.crypto.interfaces.DHPrivateKey) throws java.security.InvalidKeyException
    {
        javax.crypto.interfaces.DHPrivateKey r0;
        javax.crypto.spec.DHParameterSpec r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        java.math.BigInteger $r3, $r5, $r7;
        byte[] $r4, $r6, $r8;
        long $l0;
        java.lang.Exception $r9, r11;
        java.security.InvalidKeyException $r10;

        r0 := @parameter0: javax.crypto.interfaces.DHPrivateKey;

     label1:
        r1 = interfaceinvoke r0.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = virtualinvoke r1.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = virtualinvoke r1.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r7 = interfaceinvoke r0.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DH(byte[],byte[],byte[],byte[])>($r4, $r6, null, $r8);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label2:
        return $r2;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r11);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        return "DH";
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        return "PKCS#8";
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1, $r2;
        boolean $z0;
        long $l0;
        byte[] $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PKCS8_PRIV_KEY_INFO(long)>($l0);

        return $r3;
    }

    public javax.crypto.spec.DHParameterSpec getParams()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        javax.crypto.spec.DHParameterSpec $r1;
        java.math.BigInteger $r2, $r4;
        byte[] $r3, $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        $r1 = new javax.crypto.spec.DHParameterSpec;

        $r2 = new java.math.BigInteger;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p>;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>($r3);

        $r4 = new java.math.BigInteger;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g>;

        specialinvoke $r4.<java.math.BigInteger: void <init>(byte[])>($r5);

        specialinvoke $r1.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r2, $r4);

        return $r1;
    }

    public java.math.BigInteger getX()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;
        java.math.BigInteger $r2;
        byte[] $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("private key value X cannot be extracted");

        throw $r4;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        $r2 = new java.math.BigInteger;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x>;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>($r3);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0, r2;
        java.lang.Object r1;
        javax.crypto.spec.DHParameterSpec r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte[] $r4, $r6, $r8;
        java.math.BigInteger $r5, $r7, $r9;
        com.android.org.conscrypt.OpenSSLKey $r10, $r11;
        javax.crypto.interfaces.DHPrivateKey r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLDHPrivateKey;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLDHPrivateKey) r1;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r11 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z6 = virtualinvoke $r10.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label2;

        return 1;

     label2:
        $z1 = r1 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        r12 = (javax.crypto.interfaces.DHPrivateKey) r1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x>;

        $r5 = interfaceinvoke r12.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        r3 = interfaceinvoke r12.<javax.crypto.interfaces.DHPrivateKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r6 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g>;

        $r7 = virtualinvoke r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        $z3 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label5;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p>;

        $r9 = virtualinvoke r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        $z4 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;
        byte[] $r2, $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        i0 = 1;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 != 0 goto label1;

        $i5 = i0 * 3;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x>;

        $i6 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        i0 = $i5 + $i6;

     label1:
        $i1 = i0 * 7;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i7 = $i1 + $i2;

        $i3 = i7 * 13;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g>;

        $i4 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        i8 = $i3 + $i4;

        return i8;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        java.lang.StringBuilder r1, $r2;
        com.android.org.conscrypt.OpenSSLKey $r3, $r23;
        boolean $z0;
        java.math.BigInteger $r5, $r11, $r18;
        byte[] $r6, $r12, $r17;
        java.lang.String $r7, $r13, $r20, $r21, $r27;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLDHPrivateKey{");

        r1 = $r2;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=");

        $r23 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r27 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X=");

        $r5 = new java.math.BigInteger;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x>;

        specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P=");

        $r11 = new java.math.BigInteger;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p>;

        specialinvoke $r11.<java.math.BigInteger: void <init>(byte[])>($r12);

        $r13 = virtualinvoke $r11.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("G=");

        $r18 = new java.math.BigInteger;

        $r17 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g>;

        specialinvoke $r18.<java.math.BigInteger: void <init>(byte[])>($r17);

        $r20 = virtualinvoke $r18.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r21 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        java.io.ObjectInputStream r1;
        java.math.BigInteger r2, r3, r4;
        java.lang.Object $r5, $r6, $r7, $r12;
        com.android.org.conscrypt.OpenSSLKey $r8;
        byte[] $r9, $r10, $r11;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (java.math.BigInteger) $r5;

        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = (java.math.BigInteger) $r6;

        $r7 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (java.math.BigInteger) $r7;

        $r8 = new com.android.org.conscrypt.OpenSSLKey;

        $r9 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        $r11 = virtualinvoke r4.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DH(byte[],byte[],byte[],byte[])>($r9, $r10, null, $r11);

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = $r8;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: java.lang.Object mParamsLock> = $r12;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLDHPrivateKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        java.math.BigInteger $r3, $r5, $r7;
        byte[] $r4, $r6, $r8;
        java.io.NotSerializableException $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHPrivateKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r9 = new java.io.NotSerializableException;

        specialinvoke $r9.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r9;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void ensureReadParams()>();

        $r3 = new java.math.BigInteger;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] g>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>($r4);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r5 = new java.math.BigInteger;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] p>;

        specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        $r7 = new java.math.BigInteger;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDHPrivateKey: byte[] x>;

        specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>($r8);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLDHPrivateKey: long serialVersionUID> = -7321023036951606638L;

        return;
    }
}
