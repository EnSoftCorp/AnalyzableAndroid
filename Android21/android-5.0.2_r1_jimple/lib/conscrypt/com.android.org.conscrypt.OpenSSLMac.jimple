public abstract class com.android.org.conscrypt.OpenSSLMac extends javax.crypto.MacSpi
{
    private com.android.org.conscrypt.OpenSSLDigestContext ctx;
    private final long evp_md;
    private final int evp_pkey_type;
    private com.android.org.conscrypt.OpenSSLKey macKey;
    private final int size;
    private final byte[] singleByte;

    private void <init>(long, int, int)
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        long l0;
        int i1, i2;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<com.android.org.conscrypt.OpenSSLMac: byte[] singleByte> = $r1;

        r0.<com.android.org.conscrypt.OpenSSLMac: long evp_md> = l0;

        r0.<com.android.org.conscrypt.OpenSSLMac: int size> = i1;

        r0.<com.android.org.conscrypt.OpenSSLMac: int evp_pkey_type> = i2;

        return;
    }

    protected int engineGetMacLength()
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLMac: int size>;

        return $i0;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        byte[] r3;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLKey $r4, $r7;
        int $i0;
        long $l1;
        java.security.InvalidKeyException $r5, $r9;
        com.android.org.conscrypt.OpenSSLKeyHolder $r6;
        java.security.InvalidAlgorithmParameterException $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label1;

        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key must be a SecretKey");

        throw $r9;

     label1:
        if r2 == null goto label2;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type");

        throw $r8;

     label2:
        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z1 == 0 goto label3;

        $r6 = (com.android.org.conscrypt.OpenSSLKeyHolder) r1;

        $r7 = interfaceinvoke $r6.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLKey macKey> = $r7;

        goto label5;

     label3:
        r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r3 != null goto label4;

        $r5 = new java.security.InvalidKeyException;

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key cannot be encoded");

        throw $r5;

     label4:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLMac: int evp_pkey_type>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_mac_key(int,byte[])>($i0, r3);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLKey macKey> = $r4;

     label5:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLMac: void resetContext()>();

        return;
    }

    private final void resetContext()
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        com.android.org.conscrypt.OpenSSLDigestContext r1, $r3;
        com.android.org.conscrypt.OpenSSLKey r2;
        long $l0, $l1, $l2;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        $r3 = new com.android.org.conscrypt.OpenSSLDigestContext;

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_MD_CTX_create()>();

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLDigestContext: void <init>(long)>($l0);

        r1 = $r3;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_MD_CTX_init(com.android.org.conscrypt.OpenSSLDigestContext)>(r1);

        r2 = r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLKey macKey>;

        if r2 == null goto label1;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLMac: long evp_md>;

        $l2 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_DigestSignInit(com.android.org.conscrypt.OpenSSLDigestContext,long,long)>(r1, $l1, $l2);

     label1:
        r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLDigestContext ctx> = r1;

        return;
    }

    protected void engineUpdate(byte)
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        byte b0;
        byte[] $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        b0 := @parameter0: byte;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLMac: byte[] singleByte>;

        $r1[0] = b0;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLMac: byte[] singleByte>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLMac: void engineUpdate(byte[],int,int)>($r2, 0, 1);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        byte[] r1;
        int i0, i1;
        com.android.org.conscrypt.OpenSSLDigestContext r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLDigestContext ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_DigestUpdate(com.android.org.conscrypt.OpenSSLDigestContext,byte[],int,int)>(r2, r1, i0, i1);

        return;
    }

    protected byte[] engineDoFinal()
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        com.android.org.conscrypt.OpenSSLDigestContext r1;
        byte[] r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        r1 = r0.<com.android.org.conscrypt.OpenSSLMac: com.android.org.conscrypt.OpenSSLDigestContext ctx>;

        r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] EVP_DigestSignFinal(com.android.org.conscrypt.OpenSSLDigestContext)>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLMac: void resetContext()>();

        return r2;
    }

    protected void engineReset()
    {
        com.android.org.conscrypt.OpenSSLMac r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLMac: void resetContext()>();

        return;
    }

    void <init>(long, int, int, com.android.org.conscrypt.OpenSSLMac$1)
    {
        com.android.org.conscrypt.OpenSSLMac r0;
        long l0;
        int i1, i2;
        com.android.org.conscrypt.OpenSSLMac$1 r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLMac;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: com.android.org.conscrypt.OpenSSLMac$1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLMac: void <init>(long,int,int)>(l0, i1, i2);

        return;
    }
}
