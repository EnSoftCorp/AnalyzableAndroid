public class com.android.org.conscrypt.OpenSSLEngineImpl extends javax.net.ssl.SSLEngine implements com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, com.android.org.conscrypt.SSLParametersImpl$AliasChooser, com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks
{
    private final com.android.org.conscrypt.SSLParametersImpl sslParameters;
    private final java.lang.Object stateLock;
    private com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState;
    private long sslNativePointer;
    private static com.android.org.conscrypt.OpenSSLBIOSource nullSource;
    private com.android.org.conscrypt.OpenSSLBIOSink handshakeSink;
    private final com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink;
    private com.android.org.conscrypt.OpenSSLSessionImpl sslSession;
    private com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession;
    com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey;

    public void <init>(com.android.org.conscrypt.SSLParametersImpl)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.Object $r2;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r3;
        com.android.org.conscrypt.OpenSSLBIOSink $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLEngine: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock> = $r2;

        $r3 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r3;

        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSink: com.android.org.conscrypt.OpenSSLBIOSink create()>();

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    public void <init>(java.lang.String, int, com.android.org.conscrypt.SSLParametersImpl)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.Object $r3;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4;
        com.android.org.conscrypt.OpenSSLBIOSink $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock> = $r3;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r4;

        $r5 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSink: com.android.org.conscrypt.OpenSSLBIOSink create()>();

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        return;
    }

    public void beginHandshake() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, r7, $r9, $r29, $r39, r45;
        java.lang.Throwable r2, r3, r6, r8, $r40, $r41, $r42, $r43;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6;
        java.lang.String r4, r5, $r24, $r37;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r30, $r33, $r38;
        java.lang.IllegalStateException $r12, $r31, $r34;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.org.conscrypt.SSLParametersImpl $r22, $r23, $r26, $r28;
        com.android.org.conscrypt.OpenSSLKey $r25;
        com.android.org.conscrypt.OpenSSLBIOSink $r27;
        java.io.IOException $r32, r46;
        java.lang.Object[] $r35;
        javax.net.ssl.SSLException $r36;
        com.android.org.conscrypt.AbstractSessionContext r44;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r9;

        entermonitor $r9;

     label01:
        $r11 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r10 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r11 == $r10 goto label02;

        $r15 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r13 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        if $r15 == $r13 goto label02;

        $r17 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r14 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_INBOUND>;

        if $r17 != $r14 goto label03;

     label02:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Engine has already been closed");

        throw $r12;

     label03:
        $r19 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r16 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        if $r19 != $r16 goto label04;

        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Handshake has already been started");

        throw $r31;

     label04:
        $r20 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r18 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        if $r20 == $r18 goto label05;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client/server mode must be set before handshake");

        throw $r34;

     label05:
        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label06;

        $r33 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_WANTED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r33;

        goto label07;

     label06:
        $r21 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r21;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r43 := @caughtexception;

        r2 = $r43;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        z3 = 1;

     label12:
        $r22 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r44 = virtualinvoke $r22.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.AbstractSessionContext getSessionContext()>();

        l0 = r44.<com.android.org.conscrypt.AbstractSessionContext: long sslCtxNativePointer>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_new(long)>(l0);

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer> = $l1;

        $r23 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r24 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        virtualinvoke $r23.<com.android.org.conscrypt.SSLParametersImpl: void setSSLParameters(long,long,com.android.org.conscrypt.SSLParametersImpl$AliasChooser,com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks,java.lang.String)>(l0, $l2, r0, r0, $r24);

        $r26 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l4 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        virtualinvoke $r26.<com.android.org.conscrypt.SSLParametersImpl: void setCertificateValidation(long)>($l4);

        $r28 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r25 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey>;

        virtualinvoke $r28.<com.android.org.conscrypt.SSLParametersImpl: void setTlsChannelId(long,com.android.org.conscrypt.OpenSSLKey)>($l3, $r25);

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: boolean getUseClientMode()>();

        if $z1 == 0 goto label13;

        $l6 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_connect_state(long)>($l6);

        goto label14;

     label13:
        $l5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_accept_state(long)>($l5);

     label14:
        $r27 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSink: com.android.org.conscrypt.OpenSSLBIOSink create()>();

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink> = $r27;

        z4 = 0;

     label15:
        if z4 == 0 goto label31;

        $r29 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r45 = $r29;

        entermonitor $r29;

     label16:
        $r30 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r30;

        exitmonitor r45;

     label17:
        goto label20;

     label18:
        $r42 := @caughtexception;

        r3 = $r42;

        exitmonitor r45;

     label19:
        throw r3;

     label20:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void shutdownAndFreeSslNative()>();

        goto label31;

     label21:
        $r32 := @caughtexception;

        r46 = $r32;

        r4 = virtualinvoke r46.<java.io.IOException: java.lang.String getMessage()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("unexpected CCS");

        if $z2 == 0 goto label22;

        $r35 = newarray (java.lang.Object)[1];

        $r37 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        $r35[0] = $r37;

        r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ssl_unexpected_ccs: host=%s", $r35);

        staticinvoke <com.android.org.conscrypt.Platform: void logEvent(java.lang.String)>(r5);

     label22:
        $r36 = new javax.net.ssl.SSLException;

        specialinvoke $r36.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r46);

        throw $r36;

     label23:
        $r40 := @caughtexception;

        r6 = $r40;

     label24:
        if z3 == 0 goto label30;

        $r39 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r7 = $r39;

        entermonitor $r39;

     label25:
        $r38 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r38;

        exitmonitor r7;

     label26:
        goto label29;

     label27:
        $r41 := @caughtexception;

        r8 = $r41;

        exitmonitor r7;

     label28:
        throw r8;

     label29:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void shutdownAndFreeSslNative()>();

     label30:
        throw r6;

     label31:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.io.IOException from label12 to label15 with label21;
        catch java.lang.Throwable from label12 to label15 with label23;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Throwable from label21 to label24 with label23;
    }

    public void closeInbound() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r10;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r5 != $r4 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        if $r7 != $r6 goto label4;

        $r9 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r9;

        goto label5;

     label4:
        $r8 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_INBOUND>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r8;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void closeOutbound()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r16;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r5 == $r4 goto label02;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        if $r7 != $r6 goto label04;

     label02:
        exitmonitor r1;

     label03:
        return;

     label04:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r8 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        if $r9 == $r8 goto label05;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r15 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        if $r14 == $r15 goto label05;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void shutdownAndFreeSslNative()>();

     label05:
        $r11 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r10 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_INBOUND>;

        if $r11 != $r10 goto label06;

        $r13 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r13;

        goto label07;

     label06:
        $r12 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r12;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r2 = $r16;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void shutdown()>();

        return;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.Runnable getDelegatedTask()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        return null;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>();

        return $r2;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r20;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r10, $r18;
        int[] $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r6, $r7, $r8, $r11, $r12, $r14, $r15;
        com.android.org.conscrypt.OpenSSLBIOSink $r9, $r13;
        java.lang.StringBuilder $r16, $r19, $r21;
        java.lang.IllegalStateException $r17;
        java.lang.String $r22;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = <com.android.org.conscrypt.OpenSSLEngineImpl$1: int[] $SwitchMap$org$conscrypt$OpenSSLEngineImpl$EngineState>;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $i0 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label10;
            case 4: goto label14;
            case 5: goto label14;
            case 6: goto label14;
            case 7: goto label14;
            case 8: goto label14;
            case 9: goto label14;
            case 10: goto label14;
            default: goto label16;
        };

     label02:
        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label04;

        $r7 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        exitmonitor r1;

     label03:
        return $r7;

     label04:
        $r6 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        exitmonitor r1;

     label05:
        return $r6;

     label06:
        $r13 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        $i3 = virtualinvoke $r13.<com.android.org.conscrypt.OpenSSLBIOSink: int available()>();

        if $i3 <= 0 goto label08;

        $r15 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        exitmonitor r1;

     label07:
        return $r15;

     label08:
        $r14 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        exitmonitor r1;

     label09:
        return $r14;

     label10:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        $i2 = virtualinvoke $r9.<com.android.org.conscrypt.OpenSSLBIOSink: int available()>();

        if $i2 != 0 goto label12;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink> = null;

        $r10 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState READY>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r10;

        $r12 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        exitmonitor r1;

     label11:
        return $r12;

     label12:
        $r11 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        exitmonitor r1;

     label13:
        return $r11;

     label14:
        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        exitmonitor r1;

     label15:
        return $r8;

     label16:
        $r17 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected engine state: ");

        $r18 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label17:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r1;

     label18:
        throw r2;

        catch java.lang.Throwable from label01 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.OpenSSLSessionImpl $r1, $r2;
        javax.net.ssl.SSLSession $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.android.org.conscrypt.SSLNullSession: javax.net.ssl.SSLSession getNullSession()>();

        return $r3;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        return $r2;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        return $r1;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean isInboundDone()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        long $l0, $l2;
        byte $b1;
        int $i3, $i4;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label08;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r5 == $r4 goto label02;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_INBOUND>;

        if $r7 != $r6 goto label03;

     label02:
        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        exitmonitor r1;

     label05:
        return $z1;

     label06:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $i3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_get_shutdown(long)>($l2);

        $i4 = $i3 & 2;

        if $i4 == 0 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        return $z0;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public boolean isOutboundDone()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        long $l0, $l2;
        byte $b1;
        int $i3, $i4;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label08;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r5 == $r4 goto label02;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        if $r7 != $r6 goto label03;

     label02:
        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        exitmonitor r1;

     label05:
        return $z1;

     label06:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $i3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_get_shutdown(long)>($l2);

        $i4 = $i3 & 1;

        if $i4 == 0 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        return $z0;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledProtocols(java.lang.String[])>(r1);

        return;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r16;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r8, $r9, $r13;
        com.android.org.conscrypt.SSLParametersImpl $r7;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.String $r14;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        if $r5 == $r4 goto label2;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r8 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        if $r9 == $r8 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not change mode after handshake: engineState == ");

        $r13 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r6;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        r2 = $r16;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r7.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }

    private static void checkIndex(int, int, int)
    {
        int i0, i1, i2, $i3;
        java.lang.IndexOutOfBoundsException $r0, $r1, $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("offset < 0");

        throw $r3;

     label1:
        if i2 >= 0 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("count < 0");

        throw $r2;

     label2:
        if i1 <= i0 goto label3;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("offset > length");

        throw $r1;

     label3:
        $i3 = i0 - i2;

        if i1 <= $i3 goto label4;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("offset + count > length");

        throw $r0;

     label4:
        return;
    }

    public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.nio.ByteBuffer r1, r3, r7, r73, r75;
        java.nio.ByteBuffer[] r2;
        int i0, i1, i2, i3, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i19, $i20, $i21, $i27, $i29, $i30, i32, i33;
        java.lang.Throwable r4, r6, r8, $r57, $r65, $r67, $r68;
        long l4, $l15, $l17, $l18, $l22, $l23, $l25, $l28;
        javax.net.ssl.SSLEngineResult r5, $r13, $r21, $r29, $r34, $r45, r76;
        java.lang.Object $r9, r69;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r10, $r11, $r15, $r16, $r17, $r18, $r47, $r48, $r54, $r55, $r56;
        javax.net.ssl.SSLEngineResult$Status $r12, $r22, $r32, $r35, $r44;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r14, $r19, $r20, $r24, $r33, $r41, r70;
        boolean $z0, $z1, $z2, z3;
        byte[] $r25, $r36, $r37;
        com.android.org.conscrypt.OpenSSLBIOSink $r26, $r31, $r43;
        byte $b24, $b26, $b31;
        com.android.org.conscrypt.SSLParametersImpl $r38, $r39, $r49;
        com.android.org.conscrypt.OpenSSLSessionImpl $r40, $r42, $r46, $r51, $r66;
        java.lang.String $r50;
        java.nio.ReadOnlyBufferException $r52;
        java.lang.IllegalArgumentException $r53, $r63, $r64;
        javax.net.ssl.SSLHandshakeException $r58, $r60;
        java.lang.Exception $r59, r72;
        java.io.IOException $r61, r77;
        javax.net.ssl.SSLException $r62;
        com.android.org.conscrypt.OpenSSLBIOSource r71, r74;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r1 != null goto label01;

        $r64 = new java.lang.IllegalArgumentException;

        specialinvoke $r64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src == null");

        throw $r64;

     label01:
        if r2 != null goto label02;

        $r63 = new java.lang.IllegalArgumentException;

        specialinvoke $r63.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dsts == null");

        throw $r63;

     label02:
        $i9 = lengthof r2;

        staticinvoke <com.android.org.conscrypt.OpenSSLEngineImpl: void checkIndex(int,int,int)>($i9, i0, i1);

        i2 = 0;

        i3 = 0;

     label03:
        $i10 = lengthof r2;

        if i3 >= $i10 goto label07;

        r3 = r2[i3];

        if r3 != null goto label04;

        $r53 = new java.lang.IllegalArgumentException;

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("one of the dst == null");

        throw $r53;

     label04:
        $z2 = virtualinvoke r3.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z2 == 0 goto label05;

        $r52 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r52.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r52;

     label05:
        if i3 < i0 goto label06;

        $i29 = i0 + i1;

        if i3 >= $i29 goto label06;

        $i30 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        i2 = i2 + $i30;

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r69 = $r9;

        entermonitor $r9;

     label08:
        $r10 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r11 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r10 == $r11 goto label09;

        $r15 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r16 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_INBOUND>;

        if $r15 != $r16 goto label11;

     label09:
        $r13 = new javax.net.ssl.SSLEngineResult;

        $r12 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r14 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r13.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r12, $r14, 0, 0);

        exitmonitor r69;

     label10:
        return $r13;

     label11:
        $r17 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r18 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        if $r17 == $r18 goto label12;

        $r54 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r56 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        if $r54 != $r56 goto label13;

     label12:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void beginHandshake()>();

     label13:
        exitmonitor r69;

     label14:
        goto label17;

     label15:
        $r65 := @caughtexception;

        r4 = $r65;

        exitmonitor r69;

     label16:
        throw r4;

     label17:
        r70 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r19 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        if r70 != $r19 goto label27;

        r71 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOSource wrap(java.nio.ByteBuffer)>(r1);

        l4 = 0L;

     label18:
        $l22 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $l23 = virtualinvoke r71.<com.android.org.conscrypt.OpenSSLBIOSource: long getContext()>();

        $r31 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        $l25 = virtualinvoke $r31.<com.android.org.conscrypt.OpenSSLBIOSink: long getContext()>();

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: boolean getUseClientMode()>();

        $r38 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r37 = $r38.<com.android.org.conscrypt.SSLParametersImpl: byte[] npnProtocols>;

        $r39 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r36 = $r39.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols>;

        l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_do_handshake_bio(long,long,long,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks,boolean,byte[],byte[])>($l22, $l23, $l25, r0, $z1, $r37, $r36);

        $b24 = l4 cmp 0L;

        if $b24 == 0 goto label20;

        $r42 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r42 == null goto label19;

        $r47 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r48 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        if $r47 != $r48 goto label19;

        $r55 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState READY_HANDSHAKE_CUT_THROUGH>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r55;

     label19:
        $r49 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l28 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r51 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        $r50 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        $i27 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: int getPeerPort()>();

        $r46 = virtualinvoke $r49.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLSessionImpl setupSession(long,long,com.android.org.conscrypt.OpenSSLSessionImpl,java.lang.String,int,boolean)>(l4, $l28, $r51, $r50, $i27, 1);

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession> = $r46;

     label20:
        $r43 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        i5 = virtualinvoke $r43.<com.android.org.conscrypt.OpenSSLBIOSink: int position()>();

        $r45 = new javax.net.ssl.SSLEngineResult;

        $r44 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        $r41 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r45.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r44, $r41, 0, i5);

        r5 = $r45;

     label21:
        $r40 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r40 != null goto label22;

        $b26 = l4 cmp 0L;

        if $b26 == 0 goto label22;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>(l4);

     label22:
        virtualinvoke r71.<com.android.org.conscrypt.OpenSSLBIOSource: void release()>();

        return r5;

     label23:
        $r59 := @caughtexception;

        r72 = $r59;

        $r60 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r60.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Handshake failed");

        $r57 = virtualinvoke $r60.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(r72);

        $r58 = (javax.net.ssl.SSLHandshakeException) $r57;

        throw $r58;

     label24:
        $r67 := @caughtexception;

        r6 = $r67;

     label25:
        $r66 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r66 != null goto label26;

        $b31 = l4 cmp 0L;

        if $b31 == 0 goto label26;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>(l4);

     label26:
        virtualinvoke r71.<com.android.org.conscrypt.OpenSSLBIOSource: void release()>();

        throw r6;

     label27:
        $r20 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        if r70 == $r20 goto label28;

        $r34 = new javax.net.ssl.SSLEngineResult;

        $r35 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        specialinvoke $r34.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r35, r70, 0, 0);

        return $r34;

     label28:
        if i2 != 0 goto label29;

        $r29 = new javax.net.ssl.SSLEngineResult;

        $r32 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        $r33 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r29.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r32, $r33, 0, 0);

        return $r29;

     label29:
        r73 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        r74 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOSource wrap(java.nio.ByteBuffer)>(r73);

     label30:
        i6 = virtualinvoke r73.<java.nio.ByteBuffer: int position()>();

        i32 = 0;

        z3 = 0;

     label31:
        if z3 != 0 goto label36;

        r75 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.nio.ByteBuffer getNextAvailableByteBuffer(java.nio.ByteBuffer[],int,int)>(r2, i0, i1);

        if r75 != null goto label32;

        z3 = 1;

        goto label31;

     label32:
        r7 = r75;

        $z0 = virtualinvoke r75.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label33;

        $i21 = virtualinvoke r75.<java.nio.ByteBuffer: int remaining()>();

        r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i21);

     label33:
        $i13 = virtualinvoke r7.<java.nio.ByteBuffer: int arrayOffset()>();

        $i16 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        i8 = $i13 + $i16;

        $l15 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r25 = virtualinvoke r7.<java.nio.ByteBuffer: byte[] array()>();

        $i14 = virtualinvoke r75.<java.nio.ByteBuffer: int remaining()>();

        $l18 = virtualinvoke r74.<com.android.org.conscrypt.OpenSSLBIOSource: long getContext()>();

        $r26 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink>;

        $l17 = virtualinvoke $r26.<com.android.org.conscrypt.OpenSSLBIOSink: long getContext()>();

        i7 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_read_BIO(long,byte[],int,int,long,long,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks)>($l15, $r25, i8, $i14, $l18, $l17, r0);

        if i7 > 0 goto label34;

        z3 = 1;

        goto label31;

     label34:
        $i20 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $i19 = $i20 + i7;

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i19);

        i32 = i32 + i7;

        if r75 == r7 goto label35;

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r75.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r7);

     label35:
        goto label31;

     label36:
        $i11 = virtualinvoke r73.<java.nio.ByteBuffer: int position()>();

        i33 = $i11 - i6;

        $i12 = virtualinvoke r73.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i12);

        $r21 = new javax.net.ssl.SSLEngineResult;

        $r22 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        $r24 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r21.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r22, $r24, i33, i32);

        r76 = $r21;

     label37:
        virtualinvoke r74.<com.android.org.conscrypt.OpenSSLBIOSource: void release()>();

        return r76;

     label38:
        $r61 := @caughtexception;

        r77 = $r61;

        $r62 = new javax.net.ssl.SSLException;

        specialinvoke $r62.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r77);

        throw $r62;

     label39:
        $r68 := @caughtexception;

        r8 = $r68;

     label40:
        virtualinvoke r74.<com.android.org.conscrypt.OpenSSLBIOSource: void release()>();

        throw r8;

        catch java.lang.Throwable from label08 to label10 with label15;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Exception from label18 to label21 with label23;
        catch java.lang.Throwable from label18 to label21 with label24;
        catch java.lang.Throwable from label23 to label25 with label24;
        catch java.io.IOException from label30 to label37 with label38;
        catch java.lang.Throwable from label30 to label37 with label39;
        catch java.lang.Throwable from label38 to label40 with label39;
    }

    private java.nio.ByteBuffer getNextAvailableByteBuffer(java.nio.ByteBuffer[], int, int)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, $i3;
        java.nio.ByteBuffer $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        $r2 = r1[i2];

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if $i3 <= 0 goto label2;

        $r3 = r1[i2];

        return $r3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.nio.ByteBuffer[] r1, r3, r72;
        int i0, i1, i2, i3, i5, i6, $i7, $i8, $i9, $i11, $i12, $i14, $i15, $i20, i24, i25, i26, i27;
        java.nio.ByteBuffer r2, r4, r7, $r25;
        java.lang.Throwable r5, r6, $r57, $r64, $r66;
        long l4, $l10, $l13, $l16, $l17, $l18, $l22;
        boolean $z0, $z1;
        java.lang.Object $r8, r68;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r9, $r10, $r14, $r15, $r16, $r17, $r48, $r51, $r52, $r53, $r54;
        javax.net.ssl.SSLEngineResult$Status $r11, $r19, $r27, $r34, $r50;
        javax.net.ssl.SSLEngineResult $r12, $r18, $r28, $r35, $r47;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r13, $r20, $r21, $r22, $r33, $r49, r69;
        com.android.org.conscrypt.OpenSSLBIOSink $r23, $r24, $r30, $r31, $r36;
        com.android.org.conscrypt.OpenSSLBIOSource $r32;
        byte[] $r37, $r41, r71;
        byte $b19, $b21, $b23;
        com.android.org.conscrypt.OpenSSLSessionImpl $r38, $r42, $r44, $r45, $r67;
        com.android.org.conscrypt.SSLParametersImpl $r39, $r40, $r46;
        java.lang.String $r43;
        javax.net.ssl.SSLException $r55;
        java.io.IOException $r56, r73;
        java.nio.ReadOnlyBufferException $r58;
        java.lang.IllegalArgumentException $r59, $r60, $r61;
        javax.net.ssl.SSLHandshakeException $r62, $r63;
        java.lang.Exception $r65, r70;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.nio.ByteBuffer;

        if r1 != null goto label01;

        $r60 = new java.lang.IllegalArgumentException;

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("srcs == null");

        throw $r60;

     label01:
        if r2 != null goto label02;

        $r61 = new java.lang.IllegalArgumentException;

        specialinvoke $r61.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dst == null");

        throw $r61;

     label02:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label03;

        $r58 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r58.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r58;

     label03:
        r3 = r1;

        i2 = lengthof r3;

        i3 = 0;

     label04:
        if i3 >= i2 goto label06;

        r4 = r3[i3];

        if r4 != null goto label05;

        $r59 = new java.lang.IllegalArgumentException;

        specialinvoke $r59.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("one of the src == null");

        throw $r59;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        $i7 = lengthof r1;

        staticinvoke <com.android.org.conscrypt.OpenSSLEngineImpl: void checkIndex(int,int,int)>($i7, i0, i1);

        $i8 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        if $i8 >= 16709 goto label07;

        $r47 = new javax.net.ssl.SSLEngineResult;

        $r50 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        $r49 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r47.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r50, $r49, 0, 0);

        return $r47;

     label07:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r68 = $r8;

        entermonitor $r8;

     label08:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r10 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED>;

        if $r9 == $r10 goto label09;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r15 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState CLOSED_OUTBOUND>;

        if $r14 != $r15 goto label11;

     label09:
        $r12 = new javax.net.ssl.SSLEngineResult;

        $r11 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r13 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r12.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r11, $r13, 0, 0);

        exitmonitor r68;

     label10:
        return $r12;

     label11:
        $r16 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r17 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState NEW>;

        if $r16 == $r17 goto label12;

        $r48 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r53 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState MODE_SET>;

        if $r48 != $r53 goto label13;

     label12:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void beginHandshake()>();

     label13:
        exitmonitor r68;

     label14:
        goto label17;

     label15:
        $r57 := @caughtexception;

        r5 = $r57;

        exitmonitor r68;

     label16:
        throw r5;

     label17:
        r69 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r20 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        if r69 != $r20 goto label26;

        $r31 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        $i15 = virtualinvoke $r31.<com.android.org.conscrypt.OpenSSLBIOSink: int available()>();

        if $i15 != 0 goto label25;

        l4 = 0L;

     label18:
        $l18 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r32 = <com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSource nullSource>;

        $l17 = virtualinvoke $r32.<com.android.org.conscrypt.OpenSSLBIOSource: long getContext()>();

        $r36 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        $l16 = virtualinvoke $r36.<com.android.org.conscrypt.OpenSSLBIOSink: long getContext()>();

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: boolean getUseClientMode()>();

        $r39 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r37 = $r39.<com.android.org.conscrypt.SSLParametersImpl: byte[] npnProtocols>;

        $r40 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r41 = $r40.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols>;

        l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_do_handshake_bio(long,long,long,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks,boolean,byte[],byte[])>($l18, $l17, $l16, r0, $z1, $r37, $r41);

        $b19 = l4 cmp 0L;

        if $b19 == 0 goto label20;

        $r45 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r45 == null goto label19;

        $r51 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r52 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        if $r51 != $r52 goto label19;

        $r54 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState READY_HANDSHAKE_CUT_THROUGH>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r54;

     label19:
        $r46 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l22 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r42 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        $r43 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        $i20 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: int getPeerPort()>();

        $r44 = virtualinvoke $r46.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLSessionImpl setupSession(long,long,com.android.org.conscrypt.OpenSSLSessionImpl,java.lang.String,int,boolean)>(l4, $l22, $r42, $r43, $i20, 1);

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession> = $r44;

     label20:
        $r38 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r38 != null goto label25;

        $b21 = l4 cmp 0L;

        if $b21 == 0 goto label25;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>(l4);

        goto label25;

     label21:
        $r65 := @caughtexception;

        r70 = $r65;

        $r63 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r63.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Handshake failed");

        $r64 = virtualinvoke $r63.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(r70);

        $r62 = (javax.net.ssl.SSLHandshakeException) $r64;

        throw $r62;

     label22:
        $r66 := @caughtexception;

        r6 = $r66;

     label23:
        $r67 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r67 != null goto label24;

        $b23 = l4 cmp 0L;

        if $b23 == 0 goto label24;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>(l4);

     label24:
        throw r6;

     label25:
        $r30 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink handshakeSink>;

        i24 = staticinvoke <com.android.org.conscrypt.OpenSSLEngineImpl: int writeSinkToByteBuffer(com.android.org.conscrypt.OpenSSLBIOSink,java.nio.ByteBuffer)>($r30, r2);

        $r35 = new javax.net.ssl.SSLEngineResult;

        $r34 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        $r33 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r35.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r34, $r33, 0, i24);

        return $r35;

     label26:
        $r21 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        if r69 == $r21 goto label27;

        $r28 = new javax.net.ssl.SSLEngineResult;

        $r27 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        specialinvoke $r28.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r27, r69, 0, 0);

        return $r28;

     label27:
        i25 = 0;

        r71 = null;

        r72 = r1;

        i26 = lengthof r72;

        i27 = 0;

     label28:
        if i27 >= i26 goto label32;

        r7 = r72[i27];

        i5 = virtualinvoke r7.<java.nio.ByteBuffer: int remaining()>();

        if r71 == null goto label29;

        $i14 = lengthof r71;

        if i5 <= $i14 goto label30;

     label29:
        r71 = newarray (byte)[i5];

     label30:
        $r25 = virtualinvoke r7.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        virtualinvoke $r25.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r71, 0, i5);

        $l10 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r24 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink>;

        $l13 = virtualinvoke $r24.<com.android.org.conscrypt.OpenSSLBIOSink: long getContext()>();

        i6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_write_BIO(long,byte[],int,long,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks)>($l10, r71, i5, $l13, r0);

        if i6 <= 0 goto label31;

        $i11 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $i12 = $i11 + i6;

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i12);

        i25 = i25 + i6;

     label31:
        i27 = i27 + 1;

        goto label28;

     label32:
        $r18 = new javax.net.ssl.SSLEngineResult;

        $r19 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        $r22 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r23 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink>;

        $i9 = staticinvoke <com.android.org.conscrypt.OpenSSLEngineImpl: int writeSinkToByteBuffer(com.android.org.conscrypt.OpenSSLBIOSink,java.nio.ByteBuffer)>($r23, r2);

        specialinvoke $r18.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r19, $r22, i25, $i9);

     label33:
        return $r18;

     label34:
        $r56 := @caughtexception;

        r73 = $r56;

        $r55 = new javax.net.ssl.SSLException;

        specialinvoke $r55.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r73);

        throw $r55;

        catch java.lang.Throwable from label08 to label10 with label15;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Exception from label18 to label20 with label21;
        catch java.lang.Throwable from label18 to label20 with label22;
        catch java.lang.Throwable from label21 to label23 with label22;
        catch java.io.IOException from label27 to label33 with label34;
    }

    private static int writeSinkToByteBuffer(com.android.org.conscrypt.OpenSSLBIOSink, java.nio.ByteBuffer)
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2, $i3;
        byte[] $r2;
        long $l4;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLBIOSink;

        r1 := @parameter1: java.nio.ByteBuffer;

        $i1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: int available()>();

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: byte[] toByteArray()>();

        $i3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, $i3, i0);

        $l4 = (long) i0;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: long skip(long)>($l4);

        return i0;
    }

    public int clientPSKKeyRequested(java.lang.String, byte[], byte[])
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String r1;
        byte[] r2, r3;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $i0 = virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: int clientPSKKeyRequested(java.lang.String,byte[],byte[],com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)>(r1, r2, r3, r0);

        return $i0;
    }

    public int serverPSKKeyRequested(java.lang.String, java.lang.String, byte[])
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.String r1, r2;
        byte[] r3;
        com.android.org.conscrypt.SSLParametersImpl $r4;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $i0 = virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: int serverPSKKeyRequested(java.lang.String,java.lang.String,byte[],com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)>(r1, r2, r3, r0);

        return $i0;
    }

    public void onSSLStateChange(long, int, int)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        long l0;
        int i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r15;
        com.android.org.conscrypt.OpenSSLEngineImpl$EngineState $r4, $r5, $r6, $r7, $r8, $r11, $r16;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.Object stateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        lookupswitch(i1)
        {
            case 16: goto label4;
            case 32: goto label2;
            default: goto label5;
        };

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r4 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        if $r5 == $r4 goto label3;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r7 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState READY_HANDSHAKE_CUT_THROUGH>;

        if $r8 == $r7 goto label3;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Completed handshake while in mode ");

        $r11 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        $r6 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_COMPLETED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r6;

        goto label5;

     label4:
        $r16 = <com.android.org.conscrypt.OpenSSLEngineImpl$EngineState: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState HANDSHAKE_STARTED>;

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLEngineImpl$EngineState engineState> = $r16;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r15 := @caughtexception;

        r2 = $r15;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void verifyCertificateChain(long, long[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        long l0, $l6;
        java.security.cert.CertificateException $r1, $r18, $r20, r21;
        long[] r2;
        java.lang.String r3, r6, $r11, $r15;
        javax.net.ssl.X509TrustManager r4;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r5;
        int i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r7, $r19;
        com.android.org.conscrypt.SSLParametersImpl $r8, $r12;
        javax.net.ssl.SSLException $r9;
        com.android.org.conscrypt.OpenSSLSessionImpl $r10;
        java.security.PublicKey $r13;
        com.android.org.conscrypt.OpenSSLX509Certificate $r14, $r16;
        java.lang.Exception $r17, r22;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        l0 := @parameter0: long;

        r2 := @parameter1: long[];

        r3 := @parameter2: java.lang.String;

     label01:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r4 = virtualinvoke $r8.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getX509TrustManager()>();

        if r4 != null goto label02;

        $r18 = new java.security.cert.CertificateException;

        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String)>("No X.509 TrustManager");

        throw $r18;

     label02:
        if r2 == null goto label03;

        $i2 = lengthof r2;

        if $i2 != 0 goto label04;

     label03:
        $r9 = new javax.net.ssl.SSLException;

        specialinvoke $r9.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Peer sent no certificate");

        throw $r9;

     label04:
        $i3 = lengthof r2;

        r5 = newarray (com.android.org.conscrypt.OpenSSLX509Certificate)[$i3];

        i1 = 0;

     label05:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label06;

        $r16 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l6 = r2[i1];

        specialinvoke $r16.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l6);

        r5[i1] = $r16;

        i1 = i1 + 1;

        goto label05;

     label06:
        $r10 = new com.android.org.conscrypt.OpenSSLSessionImpl;

        $r11 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        $i5 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: int getPeerPort()>();

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(long,java.security.cert.X509Certificate[],java.security.cert.X509Certificate[],java.lang.String,int,com.android.org.conscrypt.AbstractSessionContext)>(l0, null, r5, $r11, $i5, null);

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = $r10;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        z0 = virtualinvoke $r12.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if z0 == 0 goto label07;

        $r15 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: java.lang.String getPeerHost()>();

        staticinvoke <com.android.org.conscrypt.Platform: void checkServerTrusted(javax.net.ssl.X509TrustManager,java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r4, r5, r3, $r15);

        goto label08;

     label07:
        $r14 = r5[0];

        $r13 = virtualinvoke $r14.<com.android.org.conscrypt.OpenSSLX509Certificate: java.security.PublicKey getPublicKey()>();

        r6 = interfaceinvoke $r13.<java.security.PublicKey: java.lang.String getAlgorithm()>();

        interfaceinvoke r4.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r5, r6);

     label08:
        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = null;

        goto label13;

     label09:
        $r1 := @caughtexception;

        r21 = $r1;

        throw r21;

     label10:
        $r17 := @caughtexception;

        r22 = $r17;

        $r20 = new java.security.cert.CertificateException;

        specialinvoke $r20.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r22);

        throw $r20;

     label11:
        $r19 := @caughtexception;

        r7 = $r19;

     label12:
        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLSessionImpl handshakeSession> = null;

        throw r7;

     label13:
        return;

        catch java.security.cert.CertificateException from label01 to label08 with label09;
        catch java.lang.Exception from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label08 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public void clientCertificateRequested(byte[], byte[][]) throws java.security.cert.CertificateEncodingException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        byte[] r1;
        byte[][] r2;
        long $l0;
        com.android.org.conscrypt.SSLParametersImpl $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[][];

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        virtualinvoke $r3.<com.android.org.conscrypt.SSLParametersImpl: void chooseClientCertificate(byte[],byte[][],long,com.android.org.conscrypt.SSLParametersImpl$AliasChooser)>(r1, r2, $l0, r0);

        return;
    }

    private void shutdown()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.OpenSSLBIOSource $r2;
        long $l0, $l1, $l2;
        com.android.org.conscrypt.OpenSSLBIOSink $r3;
        java.io.IOException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $r2 = <com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSource nullSource>;

        $l1 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLBIOSource: long getContext()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSink localToRemoteSink>;

        $l2 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLBIOSink: long getContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_shutdown_BIO(long,long,long,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks)>($l0, $l1, $l2, r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void shutdownAndFreeSslNative()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void shutdown()>();

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void free()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void free()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void free()
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_free(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLEngineImpl: long sslNativePointer> = 0L;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLEngineImpl: void free()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String chooseServerAlias(javax.net.ssl.X509KeyManager, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        javax.net.ssl.X509KeyManager r1;
        java.lang.String r2, $r4, $r5;
        javax.net.ssl.X509ExtendedKeyManager r3;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: javax.net.ssl.X509KeyManager;

        r2 := @parameter1: java.lang.String;

        $z0 = r1 instanceof javax.net.ssl.X509ExtendedKeyManager;

        if $z0 == 0 goto label1;

        r3 = (javax.net.ssl.X509ExtendedKeyManager) r1;

        $r5 = virtualinvoke r3.<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>(r2, null, r0);

        return $r5;

     label1:
        $r4 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(r2, null, null);

        return $r4;
    }

    public java.lang.String chooseClientAlias(javax.net.ssl.X509KeyManager, javax.security.auth.x500.X500Principal[], java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        javax.net.ssl.X509KeyManager r1;
        javax.security.auth.x500.X500Principal[] r2;
        java.lang.String[] r3;
        javax.net.ssl.X509ExtendedKeyManager r4;
        boolean $z0;
        java.lang.String $r5, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: javax.net.ssl.X509KeyManager;

        r2 := @parameter1: javax.security.auth.x500.X500Principal[];

        r3 := @parameter2: java.lang.String[];

        $z0 = r1 instanceof javax.net.ssl.X509ExtendedKeyManager;

        if $z0 == 0 goto label1;

        r4 = (javax.net.ssl.X509ExtendedKeyManager) r1;

        $r6 = virtualinvoke r4.<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>(r3, r2, r0);

        return $r6;

     label1:
        $r5 = interfaceinvoke r1.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(r3, r2, null);

        return $r5;
    }

    public java.lang.String chooseServerPSKIdentityHint(com.android.org.conscrypt.PSKKeyManager)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        $r2 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: java.lang.String chooseServerKeyIdentityHint(javax.net.ssl.SSLEngine)>(r0);

        return $r2;
    }

    public java.lang.String chooseClientPSKIdentity(com.android.org.conscrypt.PSKKeyManager, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        r2 := @parameter1: java.lang.String;

        $r3 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: java.lang.String chooseClientKeyIdentity(java.lang.String,javax.net.ssl.SSLEngine)>(r2, r0);

        return $r3;
    }

    public javax.crypto.SecretKey getPSKKey(com.android.org.conscrypt.PSKKeyManager, java.lang.String, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLEngineImpl r0;
        com.android.org.conscrypt.PSKKeyManager r1;
        java.lang.String r2, r3;
        javax.crypto.SecretKey $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLEngineImpl;

        r1 := @parameter0: com.android.org.conscrypt.PSKKeyManager;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = interfaceinvoke r1.<com.android.org.conscrypt.PSKKeyManager: javax.crypto.SecretKey getKey(java.lang.String,java.lang.String,javax.net.ssl.SSLEngine)>(r2, r3, r0);

        return $r4;
    }

    static void <clinit>()
    {
        java.nio.ByteBuffer $r0;
        com.android.org.conscrypt.OpenSSLBIOSource $r1;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0);

        $r1 = staticinvoke <com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOSource wrap(java.nio.ByteBuffer)>($r0);

        <com.android.org.conscrypt.OpenSSLEngineImpl: com.android.org.conscrypt.OpenSSLBIOSource nullSource> = $r1;

        return;
    }
}
