public class com.android.org.conscrypt.OpenSSLRandom extends java.security.SecureRandomSpi implements java.io.Serializable
{
    private static final long serialVersionUID;
    private boolean mSeeded;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLRandom r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRandom;

        specialinvoke r0.<java.security.SecureRandomSpi: void <init>()>();

        return;
    }

    protected void engineSetSeed(byte[])
    {
        com.android.org.conscrypt.OpenSSLRandom r0;
        byte[] r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRandom;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRandom: void selfSeedIfNotSeeded()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void RAND_seed(byte[])>(r1);

        return;
    }

    protected void engineNextBytes(byte[])
    {
        com.android.org.conscrypt.OpenSSLRandom r0;
        byte[] r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRandom;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRandom: void selfSeedIfNotSeeded()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void RAND_bytes(byte[])>(r1);

        return;
    }

    protected byte[] engineGenerateSeed(int)
    {
        com.android.org.conscrypt.OpenSSLRandom r0;
        int i0;
        byte[] r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRandom;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRandom: void selfSeedIfNotSeeded()>();

        r1 = newarray (byte)[i0];

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void RAND_bytes(byte[])>(r1);

        return r1;
    }

    private void selfSeedIfNotSeeded()
    {
        com.android.org.conscrypt.OpenSSLRandom r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRandom;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLRandom: boolean mSeeded>;

        if $z0 == 0 goto label1;

        return;

     label1:
        staticinvoke <com.android.org.conscrypt.OpenSSLRandom: void seedOpenSSLPRNGFromLinuxRNG()>();

        r0.<com.android.org.conscrypt.OpenSSLRandom: boolean mSeeded> = 1;

        return;
    }

    public static void seedOpenSSLPRNGFromLinuxRNG()
    {
        short s0;
        int i1;
        long $l2;
        java.lang.SecurityException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        s0 = 1024;

        $l2 = (long) s0;

        i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int RAND_load_file(java.lang.String,long)>("/dev/urandom", $l2);

        if i1 == s0 goto label1;

        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read sufficient bytes from /dev/urandom. Expected: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLRandom: long serialVersionUID> = 8506210602917522860L;

        return;
    }
}
