public final class com.android.org.conscrypt.OpenSSLECKeyPairGenerator extends java.security.KeyPairGenerator
{
    private static final java.lang.String ALGORITHM;
    private static final int DEFAULT_KEY_SIZE;
    private static final java.util.Map SIZE_TO_CURVE_NAME;
    private com.android.org.conscrypt.OpenSSLECGroupContext group;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLECKeyPairGenerator r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyPairGenerator;

        specialinvoke r0.<java.security.KeyPairGenerator: void <init>(java.lang.String)>("EC");

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        com.android.org.conscrypt.OpenSSLECKeyPairGenerator r0;
        java.lang.String r1;
        com.android.org.conscrypt.OpenSSLECGroupContext $r2, $r4, $r7, $r9, $r13;
        com.android.org.conscrypt.OpenSSLKey $r3, r14;
        long $l0, $l1;
        java.security.KeyPair $r5;
        com.android.org.conscrypt.OpenSSLECPublicKey $r6;
        com.android.org.conscrypt.OpenSSLECPrivateKey $r8;
        java.util.Map $r10;
        java.lang.Integer $r11;
        java.lang.Object $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyPairGenerator;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        if $r2 != null goto label1;

        $r10 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(192);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r1 = (java.lang.String) $r12;

        $r13 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getCurveByName(java.lang.String)>(r1);

        r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r13;

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLKey;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l0 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_generate_key(long)>($l0);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r14 = $r3;

        $r5 = new java.security.KeyPair;

        $r6 = new com.android.org.conscrypt.OpenSSLECPublicKey;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLECPublicKey: void <init>(com.android.org.conscrypt.OpenSSLECGroupContext,com.android.org.conscrypt.OpenSSLKey)>($r7, r14);

        $r8 = new com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLECPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLECGroupContext,com.android.org.conscrypt.OpenSSLKey)>($r9, r14);

        specialinvoke $r5.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r8);

        return $r5;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        com.android.org.conscrypt.OpenSSLECKeyPairGenerator r0;
        int i0;
        java.security.SecureRandom r1;
        java.lang.String r2, $r11, $r16;
        com.android.org.conscrypt.OpenSSLECGroupContext r3;
        java.util.Map $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        java.security.InvalidParameterException $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyPairGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        $r4 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r2 = (java.lang.String) $r6;

        if r2 != null goto label1;

        $r12 = new java.security.InvalidParameterException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown key size ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        r3 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getCurveByName(java.lang.String)>(r2);

        if r3 != null goto label2;

        $r7 = new java.security.InvalidParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown curve ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group> = r3;

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLECKeyPairGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;
        java.security.spec.ECParameterSpec r3;
        java.lang.String r4, $r11;
        com.android.org.conscrypt.OpenSSLECGroupContext r5, $r12;
        boolean $z0, $z1;
        java.security.InvalidAlgorithmParameterException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.security.spec.ECGenParameterSpec r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyPairGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: java.security.SecureRandom;

        $z0 = r1 instanceof java.security.spec.ECParameterSpec;

        if $z0 == 0 goto label1;

        r3 = (java.security.spec.ECParameterSpec) r1;

        $r12 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getInstance(java.security.spec.ECParameterSpec)>(r3);

        r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r12;

        goto label4;

     label1:
        $z1 = r1 instanceof java.security.spec.ECGenParameterSpec;

        if $z1 == 0 goto label3;

        r13 = (java.security.spec.ECGenParameterSpec) r1;

        r4 = virtualinvoke r13.<java.security.spec.ECGenParameterSpec: java.lang.String getName()>();

        r5 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getCurveByName(java.lang.String)>(r4);

        if r5 != null goto label2;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown curve name: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        r0.<com.android.org.conscrypt.OpenSSLECKeyPairGenerator: com.android.org.conscrypt.OpenSSLECGroupContext group> = r5;

        goto label4;

     label3:
        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter must be ECParameterSpec or ECGenParameterSpec");

        throw $r6;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r4, $r7, $r10, $r13;
        java.lang.Integer $r2, $r5, $r8, $r11, $r14;

        <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: int DEFAULT_KEY_SIZE> = 192;

        <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.lang.String ALGORITHM> = "EC";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME> = $r0;

        $r1 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(192);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "prime192v1");

        $r4 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(224);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "secp224r1");

        $r7 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "prime256v1");

        $r10 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(384);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "secp384r1");

        $r13 = <com.android.org.conscrypt.OpenSSLECKeyPairGenerator: java.util.Map SIZE_TO_CURVE_NAME>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(521);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "secp521r1");

        return;
    }
}
