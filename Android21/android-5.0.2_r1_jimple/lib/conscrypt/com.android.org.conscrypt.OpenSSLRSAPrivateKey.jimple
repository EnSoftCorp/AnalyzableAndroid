public class com.android.org.conscrypt.OpenSSLRSAPrivateKey extends java.lang.Object implements java.security.interfaces.RSAPrivateKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    protected transient com.android.org.conscrypt.OpenSSLKey key;
    protected transient boolean fetchedParams;
    protected java.math.BigInteger modulus;
    protected java.math.BigInteger privateExponent;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    void <init>(com.android.org.conscrypt.OpenSSLKey, byte[][])
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        byte[][] r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        r2 := @parameter1: byte[][];

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r1);

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void readParams(byte[][])>(r2);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: boolean fetchedParams> = 1;

        return;
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public void <init>(java.security.spec.RSAPrivateKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        java.security.spec.RSAPrivateKeySpec r1;
        com.android.org.conscrypt.OpenSSLKey $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: java.security.spec.RSAPrivateKeySpec;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey init(java.security.spec.RSAPrivateKeySpec)>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>($r2);

        return;
    }

    private static com.android.org.conscrypt.OpenSSLKey init(java.security.spec.RSAPrivateKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.RSAPrivateKeySpec r0;
        java.math.BigInteger r1, r2;
        java.lang.Exception r3, $r9;
        com.android.org.conscrypt.OpenSSLKey $r4;
        byte[] $r5, $r6;
        long $l0;
        java.security.spec.InvalidKeySpecException $r7, $r8, $r10;

        r0 := @parameter0: java.security.spec.RSAPrivateKeySpec;

        r1 = virtualinvoke r0.<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()>();

        r2 = virtualinvoke r0.<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()>();

        if r1 != null goto label1;

        $r8 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r8.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("modulus == null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r7;

     label2:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r5, null, $r6, null, null, null, null, null);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label3:
        return $r4;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r3);

        throw $r10;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static com.android.org.conscrypt.OpenSSLRSAPrivateKey getInstance(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        byte[][] r1;
        long $l0;
        byte[] $r2;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey $r3;
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey $r4;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        $l0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_RSA_private_params(long)>($l0);

        $r2 = r1[1];

        if $r2 == null goto label1;

        $r4 = new com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void <init>(com.android.org.conscrypt.OpenSSLKey,byte[][])>(r0, r1);

        return $r4;

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey,byte[][])>(r0, r1);

        return $r3;
    }

    protected static com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.RSAPrivateKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.RSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey r1, $r2;
        java.math.BigInteger $r3;
        byte[] $r4;
        long $l0;

        r0 := @parameter0: java.security.interfaces.RSAPrivateKey;

        r1 = staticinvoke <com.android.org.conscrypt.Platform: com.android.org.conscrypt.OpenSSLKey wrapRsaKey(java.security.PrivateKey)>(r0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long getRSAPrivateKeyWrapper(java.security.interfaces.RSAPrivateKey,byte[])>(r0, $r4);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        return $r2;
    }

    static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.RSAPrivateKey r0;
        java.math.BigInteger r1, r2;
        java.lang.Exception r3, $r11;
        java.lang.String $r4;
        com.android.org.conscrypt.OpenSSLKey $r5, $r10;
        byte[] $r6, $r7;
        long $l0;
        java.security.InvalidKeyException $r8, $r9, $r12;

        r0 := @parameter0: java.security.interfaces.RSAPrivateKey;

        $r4 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateKey: java.lang.String getFormat()>();

        if $r4 != null goto label1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.RSAPrivateKey)>(r0);

        return $r10;

     label1:
        r1 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        r2 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        if r1 != null goto label2;

        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("modulus == null");

        throw $r9;

     label2:
        if r2 != null goto label3;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r8;

     label3:
        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        $r6 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        $r7 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r6, null, $r7, null, null, null, null, null);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label4:
        return $r5;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.security.InvalidKeyException;

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);

        throw $r12;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    final synchronized void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[][] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: boolean fetchedParams>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_RSA_private_params(long)>($l0);

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void readParams(byte[][])>($r2);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: boolean fetchedParams> = 1;

        return;
    }

    void readParams(byte[][])
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        byte[][] r1;
        byte[] $r2, $r3, $r5, $r6, $r8;
        java.math.BigInteger $r4, $r7;
        com.android.org.conscrypt.OpenSSLKey $r9;
        boolean $z0;
        java.lang.NullPointerException $r10, $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: byte[][];

        $r2 = r1[0];

        if $r2 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("modulus == null");

        throw $r11;

     label1:
        $r3 = r1[2];

        if $r3 != null goto label2;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r9.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 != 0 goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r10;

     label2:
        $r4 = new java.math.BigInteger;

        $r5 = r1[0];

        specialinvoke $r4.<java.math.BigInteger: void <init>(byte[])>($r5);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus> = $r4;

        $r6 = r1[2];

        if $r6 == null goto label3;

        $r7 = new java.math.BigInteger;

        $r8 = r1[2];

        specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>($r8);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent> = $r7;

     label3:
        return;
    }

    public final java.math.BigInteger getPrivateExponent()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;
        java.math.BigInteger $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("private exponent cannot be extracted");

        throw $r3;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        return $r2;
    }

    public final java.math.BigInteger getModulus()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus>;

        return $r1;
    }

    public final byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1, $r2;
        boolean $z0;
        long $l0;
        byte[] $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PKCS8_PRIV_KEY_INFO(long)>($l0);

        return $r3;
    }

    public final java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        return "PKCS#8";
    }

    public final java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        return "RSA";
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.math.BigInteger $r3, $r4, $r5, $r6;
        com.android.org.conscrypt.OpenSSLKey $r7, $r8;
        java.security.interfaces.RSAPrivateKey r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLRSAPrivateKey) r1;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r8 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z5 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r8);

        return $z5;

     label2:
        $z1 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z1 == 0 goto label5;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        r9 = (java.security.interfaces.RSAPrivateKey) r1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus>;

        $r4 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $z2 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        $r6 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        $z3 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;

     label5:
        return 0;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        byte b0;
        java.math.BigInteger $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, i5;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        b0 = 1;

        $i1 = b0 * 3;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus>;

        $i2 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        i5 = $i1 + $i2;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        if $r2 == null goto label1;

        $i3 = i5 * 7;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        $i4 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        i5 = $i3 + $i4;

     label1:
        return i5;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        java.lang.StringBuilder r1, $r2;
        boolean z0;
        com.android.org.conscrypt.OpenSSLKey $r3, $r17;
        java.math.BigInteger $r5, $r11;
        java.lang.String $r6, $r9, $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLRSAPrivateKey{");

        r1 = $r2;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        z0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=");

        $r17 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modulus=");

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        if z0 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("privateExponent=");

        $r11 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        java.io.ObjectInputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        java.math.BigInteger $r3, $r5;
        byte[] $r4, $r6;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger modulus>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: java.math.BigInteger privateExponent>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r4, null, $r6, null, null, null, null, null);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: boolean fetchedParams> = 1;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        java.io.NotSerializableException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r3 = new java.io.NotSerializableException;

        specialinvoke $r3.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r3;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void ensureReadParams()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLRSAPrivateKey: long serialVersionUID> = 4872170254439578735L;

        return;
    }
}
