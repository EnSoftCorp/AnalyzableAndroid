public final class com.android.org.conscrypt.OpenSSLBIOSink extends java.lang.Object
{
    private final long ctx;
    private final java.io.ByteArrayOutputStream buffer;
    private int position;

    public static com.android.org.conscrypt.OpenSSLBIOSink create()
    {
        java.io.ByteArrayOutputStream r0, $r1;
        com.android.org.conscrypt.OpenSSLBIOSink $r2;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0 = $r1;

        $r2 = new com.android.org.conscrypt.OpenSSLBIOSink;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLBIOSink: void <init>(java.io.ByteArrayOutputStream)>(r0);

        return $r2;
    }

    private void <init>(java.io.ByteArrayOutputStream)
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.io.ByteArrayOutputStream r1;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        r1 := @parameter0: java.io.ByteArrayOutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long create_BIO_OutputStream(java.io.OutputStream)>(r1);

        r0.<com.android.org.conscrypt.OpenSSLBIOSink: long ctx> = $l0;

        r0.<com.android.org.conscrypt.OpenSSLBIOSink: java.io.ByteArrayOutputStream buffer> = r1;

        return;
    }

    public int available()
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.io.ByteArrayOutputStream $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: java.io.ByteArrayOutputStream buffer>;

        $i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i1 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public void reset()
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void reset()>();

        r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position> = 0;

        return;
    }

    public long skip(long)
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        long l0, $l8;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        l0 := @parameter0: long;

        $i2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: int available()>();

        $i3 = (int) l0;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i4 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position>;

        $i5 = $i4 + i1;

        r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position> = $i5;

        $i6 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position>;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: java.io.ByteArrayOutputStream buffer>;

        $i7 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        if $i6 != $i7 goto label1;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSink: void reset()>();

     label1:
        $l8 = (long) i1;

        return $l8;
    }

    public long getContext()
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: long ctx>;

        return $l0;
    }

    public byte[] toByteArray()
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: java.io.ByteArrayOutputStream buffer>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public int position()
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: int position>;

        return $i0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLBIOSink r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSink;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLBIOSink: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free_all(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
