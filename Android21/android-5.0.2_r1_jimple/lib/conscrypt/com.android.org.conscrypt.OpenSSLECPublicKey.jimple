public final class com.android.org.conscrypt.OpenSSLECPublicKey extends java.lang.Object implements java.security.interfaces.ECPublicKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    private static final java.lang.String ALGORITHM;
    protected transient com.android.org.conscrypt.OpenSSLKey key;
    protected transient com.android.org.conscrypt.OpenSSLECGroupContext group;

    public void <init>(com.android.org.conscrypt.OpenSSLECGroupContext, com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLECGroupContext r1;
        com.android.org.conscrypt.OpenSSLKey r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLECGroupContext;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = r1;

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key> = r2;

        return;
    }

    public void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        long l0, $l1, $l2;
        com.android.org.conscrypt.OpenSSLECGroupContext $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get0_group(long)>($l1);

        $r2 = new com.android.org.conscrypt.OpenSSLECGroupContext;

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_GROUP_dup(long)>(l0);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLECGroupContext: void <init>(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    public void <init>(java.security.spec.ECPublicKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        java.security.spec.ECPublicKeySpec r1;
        com.android.org.conscrypt.OpenSSLECPointContext r2;
        java.security.spec.ECParameterSpec $r3;
        com.android.org.conscrypt.OpenSSLECGroupContext $r4, $r5, $r6, $r9;
        long $l0, $l2, $l3, $l4;
        int $i1;
        java.security.spec.ECPoint $r7;
        com.android.org.conscrypt.OpenSSLKey $r8;
        java.security.spec.InvalidKeySpecException $r10;
        java.lang.Exception $r11, r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: java.security.spec.ECPublicKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = virtualinvoke r1.<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()>();

        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getInstance(java.security.spec.ECParameterSpec)>($r3);

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r4;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l0 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_EC_GROUP_type(long)>($l0);

        $r6 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $r7 = virtualinvoke r1.<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()>();

        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECPointContext getInstance(int,com.android.org.conscrypt.OpenSSLECGroupContext,java.security.spec.ECPoint)>($i1, $r6, $r7);

        $r8 = new com.android.org.conscrypt.OpenSSLKey;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l2 = virtualinvoke $r9.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l3 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLECPointContext: long getContext()>();

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_EC_KEY(long,long,byte[])>($l2, $l3, null);

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l4);

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r8;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r12 = $r11;

        $r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r12);

        throw $r10;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.ECPublicKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.ECPublicKey r0;
        com.android.org.conscrypt.OpenSSLECGroupContext r1;
        com.android.org.conscrypt.OpenSSLECPointContext r2;
        java.security.spec.ECParameterSpec $r3;
        long $l0, $l2, $l3, $l4;
        int $i1;
        java.security.spec.ECPoint $r4;
        com.android.org.conscrypt.OpenSSLKey $r5;
        java.lang.Exception $r6, r8;
        java.security.InvalidKeyException $r7;

        r0 := @parameter0: java.security.interfaces.ECPublicKey;

     label1:
        $r3 = interfaceinvoke r0.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        r1 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getInstance(java.security.spec.ECParameterSpec)>($r3);

        $l0 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_EC_GROUP_type(long)>($l0);

        $r4 = interfaceinvoke r0.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLECPointContext: com.android.org.conscrypt.OpenSSLECPointContext getInstance(int,com.android.org.conscrypt.OpenSSLECGroupContext,java.security.spec.ECPoint)>($i1, r1, $r4);

        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $l3 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLECPointContext: long getContext()>();

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_EC_KEY(long,long,byte[])>($l2, $l3, null);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r8);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        return "EC";
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        return "X.509";
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PUBKEY(long)>($l0);

        return $r2;
    }

    public java.security.spec.ECParameterSpec getParams()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLECGroupContext $r1;
        java.security.spec.ECParameterSpec $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLECGroupContext: java.security.spec.ECParameterSpec getECParameterSpec()>();

        return $r2;
    }

    private java.security.spec.ECPoint getPublicKey()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLECPointContext r1, $r2;
        com.android.org.conscrypt.OpenSSLKey $r3;
        com.android.org.conscrypt.OpenSSLECGroupContext $r4;
        long $l0, $l1;
        java.security.spec.ECPoint $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r2 = new com.android.org.conscrypt.OpenSSLECPointContext;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get_public_key(long)>($l0);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLECPointContext: void <init>(com.android.org.conscrypt.OpenSSLECGroupContext,long)>($r4, $l1);

        r1 = $r2;

        $r5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLECPointContext: java.security.spec.ECPoint getECPoint()>();

        return $r5;
    }

    public java.security.spec.ECPoint getW()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        java.security.spec.ECPoint $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLECPublicKey: java.security.spec.ECPoint getPublicKey()>();

        return $r1;
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        java.lang.Object r1;
        com.android.org.conscrypt.OpenSSLECPrivateKey r2;
        java.security.spec.ECParameterSpec r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.security.spec.ECPoint $r5, $r6, $r9, $r10;
        java.security.spec.EllipticCurve $r7, $r8;
        java.math.BigInteger $r11, $r12;
        int $i0, $i1;
        com.android.org.conscrypt.OpenSSLKey $r13, $r14;
        java.security.interfaces.ECPublicKey r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLECPrivateKey;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLECPrivateKey) r1;

        $r13 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r14 = r2.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z7 = virtualinvoke $r13.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r14);

        return $z7;

     label2:
        $z1 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        r15 = (java.security.interfaces.ECPublicKey) r1;

        $r5 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLECPublicKey: java.security.spec.ECPoint getPublicKey()>();

        $r6 = interfaceinvoke r15.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $z2 = virtualinvoke $r5.<java.security.spec.ECPoint: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        r4 = interfaceinvoke r15.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r7 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r8 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $z3 = virtualinvoke $r7.<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

        $r9 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r10 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $z4 = virtualinvoke $r9.<java.security.spec.ECPoint: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label5;

        $r12 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r11 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $z5 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label5;

        $i0 = virtualinvoke r3.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $i1 = virtualinvoke r4.<java.security.spec.ECParameterSpec: int getCofactor()>();

        if $i0 != $i1 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[] $r2;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PUBKEY(long)>($l0);

        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r2);

        return $i1;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        java.lang.String $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String EVP_PKEY_print_public(long)>($l0);

        return $r2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        java.io.ObjectInputStream r1;
        byte[] r2, $r4;
        long l0, $l1, $l2, $l3;
        java.lang.Object $r3;
        com.android.org.conscrypt.OpenSSLKey $r5, $r6;
        com.android.org.conscrypt.OpenSSLECGroupContext $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (byte[]) $r3;

        r2 = (byte[]) $r4;

        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PUBKEY(byte[])>(r2);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r5;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l2 = virtualinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get0_group(long)>($l2);

        $r7 = new com.android.org.conscrypt.OpenSSLECGroupContext;

        $l3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_GROUP_dup(long)>(l0);

        specialinvoke $r7.<com.android.org.conscrypt.OpenSSLECGroupContext: void <init>(long)>($l3);

        r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r7;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLECPublicKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        byte[] $r3;
        java.io.NotSerializableException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPublicKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLECPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r4 = new java.io.NotSerializableException;

        specialinvoke $r4.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r4;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECPublicKey: byte[] getEncoded()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLECPublicKey: java.lang.String ALGORITHM> = "EC";

        <com.android.org.conscrypt.OpenSSLECPublicKey: long serialVersionUID> = 3215842926808298020L;

        return;
    }
}
