public class com.android.org.conscrypt.OpenSSLSignature extends java.security.SignatureSpi
{
    private com.android.org.conscrypt.OpenSSLDigestContext ctx;
    private com.android.org.conscrypt.OpenSSLKey key;
    private final com.android.org.conscrypt.OpenSSLSignature$EngineType engineType;
    private final long evpAlgorithm;
    private final byte[] singleByte;
    private boolean signing;

    private void <init>(long, com.android.org.conscrypt.OpenSSLSignature$EngineType) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        long l0;
        com.android.org.conscrypt.OpenSSLSignature$EngineType r1;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLSignature$EngineType;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        $r2 = newarray (byte)[1];

        r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSignature: long evpAlgorithm> = l0;

        return;
    }

    private final void resetContext()
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLDigestContext r1, $r2;
        long $l0, $l1, $l3;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        $r2 = new com.android.org.conscrypt.OpenSSLDigestContext;

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_MD_CTX_create()>();

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLDigestContext: void <init>(long)>($l0);

        r1 = $r2;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_MD_CTX_init(com.android.org.conscrypt.OpenSSLDigestContext)>(r1);

        $z0 = r0.<com.android.org.conscrypt.OpenSSLSignature: boolean signing>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void enableDSASignatureNonceHardeningIfApplicable()>();

        $l3 = r0.<com.android.org.conscrypt.OpenSSLSignature: long evpAlgorithm>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_SignInit(com.android.org.conscrypt.OpenSSLDigestContext,long)>(r1, $l3);

        goto label2;

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLSignature: long evpAlgorithm>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_VerifyInit(com.android.org.conscrypt.OpenSSLDigestContext,long)>(r1, $l1);

     label2:
        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLDigestContext ctx> = r1;

        return;
    }

    protected void engineUpdate(byte)
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte b0;
        byte[] $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        b0 := @parameter0: byte;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte>;

        $r1[0] = b0;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: byte[] singleByte>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void engineUpdate(byte[],int,int)>($r2, 0, 1);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte[] r1;
        int i0, i1;
        com.android.org.conscrypt.OpenSSLDigestContext r2;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLDigestContext ctx>;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLSignature: boolean signing>;

        if $z0 == 0 goto label1;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_SignUpdate(com.android.org.conscrypt.OpenSSLDigestContext,byte[],int,int)>(r2, r1, i0, i1);

        goto label2;

     label1:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_VerifyUpdate(com.android.org.conscrypt.OpenSSLDigestContext,byte[],int,int)>(r2, r1, i0, i1);

     label2:
        return;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    private void checkEngineType(com.android.org.conscrypt.OpenSSLKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        int i0, $i2, $i3;
        long $l1;
        com.android.org.conscrypt.OpenSSLSignature$EngineType $r2, $r7, $r13, $r22, $r30;
        int[] $r3;
        java.security.InvalidKeyException $r4, $r12, $r17, $r26;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r14, $r15, $r16, $r19, $r20, $r21, $r24, $r25, $r27, $r29;
        java.lang.String $r10, $r18, $r23, $r28;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l1);

        $r3 = <com.android.org.conscrypt.OpenSSLSignature$1: int[] $SwitchMap$org$conscrypt$OpenSSLSignature$EngineType>;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $i2 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSignature$EngineType: int ordinal()>();

        $i3 = $r3[$i2];

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        if i0 == 6 goto label5;

        $r4 = new java.security.InvalidKeyException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature initialized as ");

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (not RSA)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        if i0 == 116 goto label5;

        $r17 = new java.security.InvalidKeyException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature initialized as ");

        $r22 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (not DSA)");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label3:
        if i0 == 408 goto label5;

        $r12 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature initialized as ");

        $r13 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (not EC)");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label4:
        $r26 = new java.security.InvalidKeyException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be of type ");

        $r30 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r28);

        throw $r26;

     label5:
        return;
    }

    private void initInternal(com.android.org.conscrypt.OpenSSLKey, boolean) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void checkEngineType(com.android.org.conscrypt.OpenSSLKey)>(r1);

        r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSignature: boolean signing> = z0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        return;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.security.PrivateKey r1;
        com.android.org.conscrypt.OpenSSLKey $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.security.PrivateKey;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey)>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void initInternal(com.android.org.conscrypt.OpenSSLKey,boolean)>($r2, 1);

        return;
    }

    private void enableDSASignatureNonceHardeningIfApplicable()
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        com.android.org.conscrypt.OpenSSLSignature$EngineType $r2;
        int[] $r3;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $r3 = <com.android.org.conscrypt.OpenSSLSignature$1: int[] $SwitchMap$org$conscrypt$OpenSSLSignature$EngineType>;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLSignature$EngineType engineType>;

        $i0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSignature$EngineType: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 2: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void set_DSA_flag_nonce_from_hash(long)>($l3);

        goto label3;

     label2:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EC_KEY_set_nonce_from_hash(long,boolean)>($l2, 1);

        goto label3;

     label3:
        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.security.PublicKey r1;
        com.android.org.conscrypt.OpenSSLKey $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.security.PublicKey;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPublicKey(java.security.PublicKey)>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void initInternal(com.android.org.conscrypt.OpenSSLKey,boolean)>($r2, 0);

        return;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        com.android.org.conscrypt.OpenSSLDigestContext r1;
        byte[] r2, r3, r4;
        int i0, $i2;
        java.lang.Throwable r5, $r11;
        com.android.org.conscrypt.OpenSSLKey $r6, $r7, $r8;
        long $l1, $l3;
        java.security.SignatureException $r9, $r12;
        java.lang.Exception $r10, r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        if $r6 != null goto label1;

        $r9 = new java.security.SignatureException;

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>("Need DSA or RSA or EC private key");

        throw $r9;

     label1:
        r1 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLDigestContext ctx>;

     label2:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l1 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_size(long)>($l1);

        r2 = newarray (byte)[$i2];

        $r8 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l3 = virtualinvoke $r8.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_SignFinal(com.android.org.conscrypt.OpenSSLDigestContext,byte[],int,long)>(r1, r2, 0, $l3);

        r3 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, r3, 0, i0);

        r4 = r3;

     label3:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        return r4;

     label4:
        $r10 := @caughtexception;

        r13 = $r10;

        $r12 = new java.security.SignatureException;

        specialinvoke $r12.<java.security.SignatureException: void <init>(java.lang.Throwable)>(r13);

        throw $r12;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

     label6:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        throw r5;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        byte[] r1;
        int i0, $i1;
        boolean z0, $z1, z2;
        java.lang.Throwable r2, $r8;
        com.android.org.conscrypt.OpenSSLKey $r3, $r4;
        com.android.org.conscrypt.OpenSSLDigestContext $r5;
        long $l2;
        java.security.SignatureException $r6;
        java.lang.Exception $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        r1 := @parameter0: byte[];

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        if $r3 != null goto label1;

        $r6 = new java.security.SignatureException;

        specialinvoke $r6.<java.security.SignatureException: void <init>(java.lang.String)>("Need DSA or RSA public key");

        throw $r6;

     label1:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLDigestContext ctx>;

        $i1 = lengthof r1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSignature: com.android.org.conscrypt.OpenSSLKey key>;

        $l2 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_VerifyFinal(com.android.org.conscrypt.OpenSSLDigestContext,byte[],int,int,long)>($r5, r1, 0, $i1, $l2);

        if i0 != 1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        return z0;

     label5:
        $r7 := @caughtexception;

        z2 = 0;

     label6:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        return z2;

     label7:
        $r8 := @caughtexception;

        r2 = $r8;

     label8:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void resetContext()>();

        throw r2;

        catch java.lang.Exception from label1 to label4 with label5;
        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void <init>(long, com.android.org.conscrypt.OpenSSLSignature$EngineType, com.android.org.conscrypt.OpenSSLSignature$1) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLSignature r0;
        long l0;
        com.android.org.conscrypt.OpenSSLSignature$EngineType r1;
        com.android.org.conscrypt.OpenSSLSignature$1 r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignature;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLSignature$EngineType;

        r2 := @parameter2: com.android.org.conscrypt.OpenSSLSignature$1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSignature: void <init>(long,com.android.org.conscrypt.OpenSSLSignature$EngineType)>(l0, r1);

        return;
    }
}
