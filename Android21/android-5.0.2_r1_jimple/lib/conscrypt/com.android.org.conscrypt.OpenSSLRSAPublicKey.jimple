public class com.android.org.conscrypt.OpenSSLRSAPublicKey extends java.lang.Object implements java.security.interfaces.RSAPublicKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    private transient com.android.org.conscrypt.OpenSSLKey key;
    private java.math.BigInteger publicExponent;
    private java.math.BigInteger modulus;
    private transient boolean fetchedParams;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    void <init>(java.security.spec.RSAPublicKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.security.spec.RSAPublicKeySpec r1;
        java.lang.Exception r2, $r8;
        com.android.org.conscrypt.OpenSSLKey $r3;
        java.math.BigInteger $r4, $r6;
        byte[] $r5, $r7;
        long $l0;
        java.security.spec.InvalidKeySpecException $r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        r1 := @parameter0: java.security.spec.RSAPublicKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLKey;

        $r4 = virtualinvoke r1.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = virtualinvoke r1.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r5, $r7, null, null, null, null, null, null);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r3;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPublicKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.RSAPublicKey r0;
        java.lang.Exception r1, $r7;
        com.android.org.conscrypt.OpenSSLKey $r2;
        java.math.BigInteger $r3, $r5;
        byte[] $r4, $r6;
        long $l0;
        java.security.InvalidKeyException $r8;

        r0 := @parameter0: java.security.interfaces.RSAPublicKey;

     label1:
        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = interfaceinvoke r0.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = interfaceinvoke r0.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r4, $r6, null, null, null, null, null, null);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        return "RSA";
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        return "X.509";
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PUBKEY(long)>($l0);

        return $r2;
    }

    private void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        byte[][] r1;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKey $r2;
        long $l0;
        java.math.BigInteger $r3, $r5;
        byte[] $r4, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: boolean fetchedParams>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_RSA_public_params(long)>($l0);

        $r3 = new java.math.BigInteger;

        $r4 = r1[0];

        specialinvoke $r3.<java.math.BigInteger: void <init>(byte[])>($r4);

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus> = $r3;

        $r5 = new java.math.BigInteger;

        $r6 = r1[1];

        specialinvoke $r5.<java.math.BigInteger: void <init>(byte[])>($r6);

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: boolean fetchedParams> = 1;

        return;
    }

    public java.math.BigInteger getModulus()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus>;

        return $r1;
    }

    public java.math.BigInteger getPublicExponent()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.math.BigInteger $r3, $r4, $r5, $r6;
        com.android.org.conscrypt.OpenSSLKey $r7, $r8;
        java.security.interfaces.RSAPublicKey r9;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPublicKey;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLRSAPublicKey) r1;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r8 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z5 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r8);

        if $z5 == 0 goto label2;

        return 1;

     label2:
        $z1 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        r9 = (java.security.interfaces.RSAPublicKey) r1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus>;

        $r4 = interfaceinvoke r9.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $z2 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent>;

        $r6 = interfaceinvoke r9.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $z3 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.math.BigInteger $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent>;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.lang.StringBuilder r1, $r2;
        java.math.BigInteger $r4, $r9;
        java.lang.String $r5, $r10, $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLRSAPublicKey{");

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modulus=");

        $r4 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("publicExponent=");

        $r9 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent>;

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.io.ObjectInputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        java.math.BigInteger $r3, $r5;
        byte[] $r4, $r6;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger modulus>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: java.math.BigInteger publicExponent>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r4, $r6, null, null, null, null, null, null);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: boolean fetchedParams> = 1;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLRSAPublicKey r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPublicKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void ensureReadParams()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLRSAPublicKey: long serialVersionUID> = 123125005824688292L;

        return;
    }
}
