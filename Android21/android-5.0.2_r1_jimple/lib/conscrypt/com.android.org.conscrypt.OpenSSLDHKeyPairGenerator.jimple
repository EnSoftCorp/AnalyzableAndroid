public class com.android.org.conscrypt.OpenSSLDHKeyPairGenerator extends java.security.KeyPairGeneratorSpi
{
    private java.math.BigInteger prime;
    private int primeBits;
    private static final java.math.BigInteger DEFAULT_GENERATOR;
    private java.math.BigInteger generator;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLDHKeyPairGenerator r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHKeyPairGenerator;

        specialinvoke r0.<java.security.KeyPairGeneratorSpi: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: int primeBits> = 1024;

        $r1 = <com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger DEFAULT_GENERATOR>;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator> = $r1;

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        com.android.org.conscrypt.OpenSSLDHKeyPairGenerator r0;
        com.android.org.conscrypt.OpenSSLKey r1, $r5, $r10;
        com.android.org.conscrypt.OpenSSLDHPrivateKey r2, $r7;
        com.android.org.conscrypt.OpenSSLDHPublicKey r3, $r8;
        java.math.BigInteger $r4, $r6, $r11, $r12;
        int $i0;
        long $l1, $l2, $l3, $l4;
        java.security.KeyPair $r9;
        byte[] $r13, $r14;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHKeyPairGenerator;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger prime>;

        if $r4 == null goto label1;

        $r10 = new com.android.org.conscrypt.OpenSSLKey;

        $r11 = r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger prime>;

        $r13 = virtualinvoke $r11.<java.math.BigInteger: byte[] toByteArray()>();

        $r12 = r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator>;

        $r14 = virtualinvoke $r12.<java.math.BigInteger: byte[] toByteArray()>();

        $l4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DH(byte[],byte[],byte[],byte[])>($r13, $r14, null, null);

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l4);

        r1 = $r10;

        goto label2;

     label1:
        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: int primeBits>;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator>;

        $l1 = virtualinvoke $r6.<java.math.BigInteger: long longValue()>();

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long DH_generate_parameters_ex(int,long)>($i0, $l1);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l2);

        r1 = $r5;

     label2:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void DH_generate_key(long)>($l3);

        $r7 = new com.android.org.conscrypt.OpenSSLDHPrivateKey;

        specialinvoke $r7.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r1);

        r2 = $r7;

        $r8 = new com.android.org.conscrypt.OpenSSLDHPublicKey;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLDHPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r1);

        r3 = $r8;

        $r9 = new java.security.KeyPair;

        specialinvoke $r9.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>(r3, r2);

        return $r9;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        com.android.org.conscrypt.OpenSSLDHKeyPairGenerator r0;
        int i0;
        java.security.SecureRandom r1;
        java.math.BigInteger $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHKeyPairGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger prime> = null;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: int primeBits> = i0;

        $r2 = <com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger DEFAULT_GENERATOR>;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator> = $r2;

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLDHKeyPairGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;
        javax.crypto.spec.DHParameterSpec r3;
        java.math.BigInteger r4, $r5, $r7;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLDHKeyPairGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: java.security.SecureRandom;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger prime> = null;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: int primeBits> = 1024;

        $r5 = <com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger DEFAULT_GENERATOR>;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator> = $r5;

        $z0 = r1 instanceof javax.crypto.spec.DHParameterSpec;

        if $z0 == 0 goto label2;

        r3 = (javax.crypto.spec.DHParameterSpec) r1;

        $r7 = virtualinvoke r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()>();

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger prime> = $r7;

        r4 = virtualinvoke r3.<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()>();

        if r4 == null goto label1;

        r0.<com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger generator> = r4;

     label1:
        goto label3;

     label2:
        if r1 == null goto label3;

        $r6 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r6.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Params must be DHParameterSpec");

        throw $r6;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <com.android.org.conscrypt.OpenSSLDHKeyPairGenerator: java.math.BigInteger DEFAULT_GENERATOR> = $r0;

        return;
    }
}
