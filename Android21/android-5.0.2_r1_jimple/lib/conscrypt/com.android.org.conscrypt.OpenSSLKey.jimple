public class com.android.org.conscrypt.OpenSSLKey extends java.lang.Object
{
    private final long ctx;
    private final com.android.org.conscrypt.OpenSSLEngine engine;
    private final java.lang.String alias;

    public void <init>(long)
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        long l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLKey: long ctx> = l0;

        r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine> = null;

        r0.<com.android.org.conscrypt.OpenSSLKey: java.lang.String alias> = null;

        return;
    }

    public void <init>(long, com.android.org.conscrypt.OpenSSLEngine, java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        long l0;
        com.android.org.conscrypt.OpenSSLEngine r1;
        java.lang.String r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLEngine;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLKey: long ctx> = l0;

        r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine> = r1;

        r0.<com.android.org.conscrypt.OpenSSLKey: java.lang.String alias> = r2;

        return;
    }

    public long getPkeyContext()
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        return $l0;
    }

    com.android.org.conscrypt.OpenSSLEngine getEngine()
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        com.android.org.conscrypt.OpenSSLEngine $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        return $r1;
    }

    boolean isEngineBased()
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        com.android.org.conscrypt.OpenSSLEngine $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getAlias()
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLKey: java.lang.String alias>;

        return $r1;
    }

    public static com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey r0;
        java.lang.String r1, $r3, $r4, $r11;
        byte[] r2, $r6;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLKey $r5, $r14, $r15;
        long $l0;
        java.security.InvalidKeyException $r7, $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        com.android.org.conscrypt.OpenSSLKeyHolder $r13;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r13 = (com.android.org.conscrypt.OpenSSLKeyHolder) r0;

        $r15 = interfaceinvoke $r13.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        return $r15;

     label1:
        r1 = interfaceinvoke r0.<java.security.PrivateKey: java.lang.String getFormat()>();

        if r1 != null goto label2;

        $r14 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey wrapPrivateKey(java.security.PrivateKey)>(r0);

        return $r14;

     label2:
        $r3 = "PKCS#8";

        $r4 = interfaceinvoke r0.<java.security.PrivateKey: java.lang.String getFormat()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        $r8 = new java.security.InvalidKeyException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key format ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label3:
        r2 = interfaceinvoke r0.<java.security.PrivateKey: byte[] getEncoded()>();

        if r2 != null goto label4;

        $r7 = new java.security.InvalidKeyException;

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key encoding is null");

        throw $r7;

     label4:
        $r5 = new com.android.org.conscrypt.OpenSSLKey;

        $r6 = interfaceinvoke r0.<java.security.PrivateKey: byte[] getEncoded()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PKCS8_PRIV_KEY_INFO(byte[])>($r6);

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        return $r5;
    }

    private static com.android.org.conscrypt.OpenSSLKey wrapPrivateKey(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.PrivateKey r0;
        boolean $z0, $z1, $z2;
        java.security.InvalidKeyException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        java.security.interfaces.ECPrivateKey $r7;
        com.android.org.conscrypt.OpenSSLKey $r8, $r10, $r12;
        java.security.interfaces.DSAPrivateKey $r9;
        java.security.interfaces.RSAPrivateKey $r11;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label1;

        $r11 = (java.security.interfaces.RSAPrivateKey) r0;

        $r12 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.RSAPrivateKey)>($r11);

        return $r12;

     label1:
        $z1 = r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z1 == 0 goto label2;

        $r9 = (java.security.interfaces.DSAPrivateKey) r0;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLDSAPrivateKey: com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.DSAPrivateKey)>($r9);

        return $r10;

     label2:
        $z2 = r0 instanceof java.security.interfaces.ECPrivateKey;

        if $z2 == 0 goto label3;

        $r7 = (java.security.interfaces.ECPrivateKey) r0;

        $r8 = staticinvoke <com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.ECPrivateKey)>($r7);

        return $r8;

     label3:
        $r1 = new java.security.InvalidKeyException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static com.android.org.conscrypt.OpenSSLKey fromPublicKey(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.PublicKey r0;
        byte[] r1, $r5;
        boolean $z0, $z1;
        java.lang.String $r2, $r3, $r10, $r13;
        com.android.org.conscrypt.OpenSSLKey $r4, $r14;
        long $l0;
        java.security.InvalidKeyException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        com.android.org.conscrypt.OpenSSLKeyHolder $r12;

        r0 := @parameter0: java.security.PublicKey;

        $z0 = r0 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r12 = (com.android.org.conscrypt.OpenSSLKeyHolder) r0;

        $r14 = interfaceinvoke $r12.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        return $r14;

     label1:
        $r2 = "X.509";

        $r3 = interfaceinvoke r0.<java.security.PublicKey: java.lang.String getFormat()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r7 = new java.security.InvalidKeyException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key format ");

        $r10 = interfaceinvoke r0.<java.security.PublicKey: java.lang.String getFormat()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        r1 = interfaceinvoke r0.<java.security.PublicKey: byte[] getEncoded()>();

        if r1 != null goto label3;

        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key encoding is null");

        throw $r6;

     label3:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = interfaceinvoke r0.<java.security.PublicKey: byte[] getEncoded()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PUBKEY(byte[])>($r5);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        return $r4;
    }

    public java.security.PublicKey getPublicKey() throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        long $l0;
        int $i1;
        com.android.org.conscrypt.OpenSSLECPublicKey $r1;
        com.android.org.conscrypt.OpenSSLDSAPublicKey $r2;
        com.android.org.conscrypt.OpenSSLDHPublicKey $r3;
        com.android.org.conscrypt.OpenSSLRSAPublicKey $r4;
        java.security.NoSuchAlgorithmException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l0);

        lookupswitch($i1)
        {
            case 6: goto label1;
            case 28: goto label2;
            case 116: goto label3;
            case 408: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLRSAPublicKey;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r4;

     label2:
        $r3 = new com.android.org.conscrypt.OpenSSLDHPublicKey;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLDHPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r3;

     label3:
        $r2 = new com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r2;

     label4:
        $r1 = new com.android.org.conscrypt.OpenSSLECPublicKey;

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLECPublicKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r1;

     label5:
        $r5 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r5.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("unknown PKEY type");

        throw $r5;
    }

    static java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec, int) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.X509EncodedKeySpec r0, r1;
        int i0, $i3;
        com.android.org.conscrypt.OpenSSLKey r2, $r4;
        java.lang.Exception r3, $r8;
        byte[] $r5;
        long $l1, $l2;
        java.security.PublicKey $r6;
        java.security.spec.InvalidKeySpecException $r7, $r9, $r11;
        java.security.NoSuchAlgorithmException $r10, r12;

        r0 := @parameter0: java.security.spec.X509EncodedKeySpec;

        i0 := @parameter1: int;

        r1 = r0;

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = virtualinvoke r1.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PUBKEY(byte[])>($r5);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r2 = $r4;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r3);

        throw $r9;

     label4:
        $l2 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l2);

        if $i3 == i0 goto label5;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Unexpected key type");

        throw $r7;

     label5:
        $r6 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey()>();

     label6:
        return $r6;

     label7:
        $r10 := @caughtexception;

        r12 = $r10;

        $r11 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r11.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r12);

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label7;
    }

    public java.security.PrivateKey getPrivateKey() throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        long $l0;
        int $i1;
        com.android.org.conscrypt.OpenSSLECPrivateKey $r1;
        com.android.org.conscrypt.OpenSSLDSAPrivateKey $r2;
        com.android.org.conscrypt.OpenSSLDHPrivateKey $r3;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey $r4;
        java.security.NoSuchAlgorithmException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l0);

        lookupswitch($i1)
        {
            case 6: goto label1;
            case 28: goto label2;
            case 116: goto label3;
            case 408: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r4;

     label2:
        $r3 = new com.android.org.conscrypt.OpenSSLDHPrivateKey;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLDHPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r3;

     label3:
        $r2 = new com.android.org.conscrypt.OpenSSLDSAPrivateKey;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLDSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r2;

     label4:
        $r1 = new com.android.org.conscrypt.OpenSSLECPrivateKey;

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLECPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r0);

        return $r1;

     label5:
        $r5 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r5.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("unknown PKEY type");

        throw $r5;
    }

    static java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec, int) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.PKCS8EncodedKeySpec r0, r1;
        int i0, $i3;
        com.android.org.conscrypt.OpenSSLKey r2, $r4;
        java.lang.Exception r3, $r10;
        byte[] $r5;
        long $l1, $l2;
        java.security.PrivateKey $r6;
        java.security.spec.InvalidKeySpecException $r7, $r9, $r11;
        java.security.NoSuchAlgorithmException $r8, r12;

        r0 := @parameter0: java.security.spec.PKCS8EncodedKeySpec;

        i0 := @parameter1: int;

        r1 = r0;

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = virtualinvoke r1.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PKCS8_PRIV_KEY_INFO(byte[])>($r5);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r2 = $r4;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

        $r11 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r11.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r3);

        throw $r11;

     label4:
        $l2 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l2);

        if $i3 == i0 goto label5;

        $r7 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Unexpected key type");

        throw $r7;

     label5:
        $r6 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey()>();

     label6:
        return $r6;

     label7:
        $r8 := @caughtexception;

        r12 = $r8;

        $r9 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r12);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label7;
    }

    public javax.crypto.SecretKey getSecretKey(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        java.lang.String r1;
        long $l0;
        int $i1;
        com.android.org.conscrypt.OpenSSLSecretKey $r2;
        java.security.NoSuchAlgorithmException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_type(long)>($l0);

        lookupswitch($i1)
        {
            case 855: goto label1;
            case 894: goto label1;
            default: goto label2;
        };

     label1:
        $r2 = new com.android.org.conscrypt.OpenSSLSecretKey;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLSecretKey: void <init>(java.lang.String,com.android.org.conscrypt.OpenSSLKey)>(r1, r0);

        return $r2;

     label2:
        $r3 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r3.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("unknown PKEY type");

        throw $r3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_PKEY_free(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLKey r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        com.android.org.conscrypt.OpenSSLEngine $r3, $r4, $r5, $r10;
        java.lang.String $r6, $r7, $r8, $r9;
        int $i5;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLKey;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.android.org.conscrypt.OpenSSLKey) r1;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $l1 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        if $r3 != null goto label4;

        $r10 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine getEngine()>();

        if $r10 == null goto label7;

        return 0;

     label4:
        $r4 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        $r5 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine getEngine()>();

        $z1 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLEngine: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLKey: java.lang.String alias>;

        if $r6 == null goto label6;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLKey: java.lang.String alias>;

        $r9 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: java.lang.String getAlias()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        return $z3;

     label6:
        $r7 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: java.lang.String getAlias()>();

        if $r7 == null goto label7;

        return 0;

     label7:
        $l3 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $l4 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $i5 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_PKEY_cmp(long,long)>($l3, $l4);

        if $i5 != 1 goto label8;

        $z2 = 1;

        goto label9;

     label8:
        $z2 = 0;

     label9:
        return $z2;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLKey r0;
        byte b0;
        long $l1, $l5;
        int $i2, $i3, $i4, $i6, i7, i8;
        com.android.org.conscrypt.OpenSSLEngine $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLKey;

        b0 = 1;

        $i3 = b0 * 17;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLKey: long ctx>;

        $i2 = (int) $l1;

        i7 = $i3 + $i2;

        $i4 = i7 * 31;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        if $r1 != null goto label1;

        $l5 = 0L;

        goto label2;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLEngine engine>;

        $l5 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLEngine: long getEngineContext()>();

     label2:
        $i6 = (int) $l5;

        i8 = $i4 + $i6;

        return i8;
    }
}
