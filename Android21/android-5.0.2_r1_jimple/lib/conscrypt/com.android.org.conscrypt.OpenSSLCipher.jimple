public abstract class com.android.org.conscrypt.OpenSSLCipher extends javax.crypto.CipherSpi
{
    private com.android.org.conscrypt.OpenSSLCipherContext cipherCtx;
    private com.android.org.conscrypt.OpenSSLCipher$Mode mode;
    private com.android.org.conscrypt.OpenSSLCipher$Padding padding;
    private byte[] encodedKey;
    private byte[] iv;
    private boolean encrypting;
    private int blockSize;
    private int modeBlockSize;
    private boolean calledUpdate;

    protected void <init>()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        com.android.org.conscrypt.OpenSSLCipherContext $r1;
        long $l0;
        com.android.org.conscrypt.OpenSSLCipher$Mode $r2;
        com.android.org.conscrypt.OpenSSLCipher$Padding $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = new com.android.org.conscrypt.OpenSSLCipherContext;

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_CIPHER_CTX_new()>();

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLCipherContext: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx> = $r1;

        $r2 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode ECB>;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode> = $r2;

        $r3 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding PKCS5PADDING>;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding> = $r3;

        return;
    }

    protected void <init>(com.android.org.conscrypt.OpenSSLCipher$Mode, com.android.org.conscrypt.OpenSSLCipher$Padding)
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        com.android.org.conscrypt.OpenSSLCipher$Mode r1, $r4;
        com.android.org.conscrypt.OpenSSLCipher$Padding r2, $r5;
        com.android.org.conscrypt.OpenSSLCipherContext $r3;
        long $l0;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLCipher$Mode;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLCipher$Padding;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r3 = new com.android.org.conscrypt.OpenSSLCipherContext;

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_CIPHER_CTX_new()>();

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLCipherContext: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx> = $r3;

        $r4 = <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode ECB>;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode> = $r4;

        $r5 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding PKCS5PADDING>;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode> = r1;

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding> = r2;

        $i1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getCipherBlockSize()>();

        r0.<com.android.org.conscrypt.OpenSSLCipher: int blockSize> = $i1;

        return;
    }

    protected abstract java.lang.String getBaseCipherName();

    protected abstract java.lang.String getCipherName(int, com.android.org.conscrypt.OpenSSLCipher$Mode);

    protected abstract void checkSupportedKeySize(int) throws java.security.InvalidKeyException;

    protected abstract void checkSupportedMode(com.android.org.conscrypt.OpenSSLCipher$Mode) throws java.security.NoSuchAlgorithmException;

    protected abstract void checkSupportedPadding(com.android.org.conscrypt.OpenSSLCipher$Padding) throws javax.crypto.NoSuchPaddingException;

    protected abstract int getCipherBlockSize();

    protected boolean supportsVariableSizeKey()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        return 0;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        java.lang.String r1, $r6, $r12;
        com.android.org.conscrypt.OpenSSLCipher$Mode r2;
        java.lang.IllegalArgumentException r3, $r7;
        java.security.NoSuchAlgorithmException r4, $r8;
        java.util.Locale $r5;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: java.lang.String;

     label1:
        $r5 = <java.util.Locale: java.util.Locale US>;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r5);

        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLCipher$Mode: com.android.org.conscrypt.OpenSSLCipher$Mode valueOf(java.lang.String)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.security.NoSuchAlgorithmException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such mode: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r12);

        r4 = $r8;

        virtualinvoke r4.<java.security.NoSuchAlgorithmException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        throw r4;

     label4:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void checkSupportedMode(com.android.org.conscrypt.OpenSSLCipher$Mode)>(r2);

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode> = r2;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        java.lang.String r1, r2, $r12;
        com.android.org.conscrypt.OpenSSLCipher$Padding r3;
        java.lang.IllegalArgumentException r4, $r7;
        javax.crypto.NoSuchPaddingException r5, $r8;
        java.util.Locale $r6;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: java.lang.String;

        $r6 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r6);

     label1:
        r3 = staticinvoke <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding valueOf(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = new javax.crypto.NoSuchPaddingException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such padding: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r12);

        r5 = $r8;

        virtualinvoke r5.<javax.crypto.NoSuchPaddingException: java.lang.Throwable initCause(java.lang.Throwable)>(r4);

        throw r5;

     label4:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void checkSupportedPadding(com.android.org.conscrypt.OpenSSLCipher$Padding)>(r3);

        r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding> = r3;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected int engineGetBlockSize()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLCipher: int blockSize>;

        return $i0;
    }

    private int getOutputSize(int)
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        com.android.org.conscrypt.OpenSSLCipherContext $r1;
        long $l4;
        com.android.org.conscrypt.OpenSSLCipher$Padding $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        $i3 = r0.<com.android.org.conscrypt.OpenSSLCipher: int modeBlockSize>;

        if $i3 != 1 goto label1;

        return i0;

     label1:
        $r1 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l4 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_EVP_CIPHER_CTX_buf_len(long)>($l4);

        $r3 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding>;

        $r2 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding NOPADDING>;

        if $r3 != $r2 goto label2;

        $i10 = i1 + i0;

        return $i10;

     label2:
        $i6 = i0 + i1;

        $i5 = r0.<com.android.org.conscrypt.OpenSSLCipher: int modeBlockSize>;

        i2 = $i6 + $i5;

        $i7 = r0.<com.android.org.conscrypt.OpenSSLCipher: int modeBlockSize>;

        $i8 = i2 % $i7;

        $i9 = i2 - $i8;

        return $i9;
    }

    protected int engineGetOutputSize(int)
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0, $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getOutputSize(int)>(i0);

        return $i1;
    }

    protected byte[] engineGetIV()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv>;

        return $r1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        java.security.AlgorithmParameters r1;
        byte[] $r2, $r3, $r5;
        int $i0;
        java.lang.String $r4;
        java.io.IOException $r6;
        java.security.NoSuchAlgorithmException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv>;

        if $r2 == null goto label5;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv>;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label5;

     label1:
        $r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: java.lang.String getBaseCipherName()>();

        r1 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>($r4);

        $r5 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv>;

        virtualinvoke r1.<java.security.AlgorithmParameters: void init(byte[])>($r5);

     label2:
        return r1;

     label3:
        $r7 := @caughtexception;

        return null;

     label4:
        $r6 := @caughtexception;

        return null;

     label5:
        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    private void engineInitInternal(int, java.security.Key, byte[], java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0, i2, $i3, $i4, $i9, $i12, $i13, $i15, $i16;
        java.security.Key r1;
        byte[] r2, r4;
        java.security.SecureRandom r3, $r19;
        long l1, $l6, $l7, $l8, $l10, $l11, $l14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.org.conscrypt.OpenSSLCipher$Mode $r5, $r25;
        java.lang.String $r6, $r21, $r31, $r32;
        byte $b5;
        com.android.org.conscrypt.OpenSSLCipherContext $r7, $r8, $r11, $r12, $r13, $r14;
        com.android.org.conscrypt.OpenSSLCipher$Padding $r9, $r10;
        java.lang.StringBuilder $r15, $r16, $r18, $r22, $r23, $r24, $r26, $r27, $r33, $r34, $r35;
        java.security.InvalidAlgorithmParameterException $r17, $r20;
        java.security.InvalidParameterException $r28;
        java.security.InvalidKeyException $r29, $r30;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: byte[];

        r3 := @parameter3: java.security.SecureRandom;

        if i0 == 1 goto label01;

        if i0 != 3 goto label02;

     label01:
        r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting> = 1;

        goto label05;

     label02:
        if i0 == 2 goto label03;

        if i0 != 4 goto label04;

     label03:
        r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting> = 0;

        goto label05;

     label04:
        $r28 = new java.security.InvalidParameterException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported opmode ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label05:
        $z0 = r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label06;

        $r29 = new java.security.InvalidKeyException;

        specialinvoke $r29.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Only SecretKey is supported");

        throw $r29;

     label06:
        r4 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r4 != null goto label07;

        $r30 = new java.security.InvalidKeyException;

        specialinvoke $r30.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key.getEncoded() == null");

        throw $r30;

     label07:
        $i3 = lengthof r4;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void checkSupportedKeySize(int)>($i3);

        r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] encodedKey> = r4;

        $i4 = lengthof r4;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode>;

        $r6 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: java.lang.String getCipherName(int,com.android.org.conscrypt.OpenSSLCipher$Mode)>($i4, $r5);

        l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_get_cipherbyname(java.lang.String)>($r6);

        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label08;

        $r20 = new java.security.InvalidAlgorithmParameterException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find name for key length = ");

        $i16 = lengthof r4;

        $i15 = $i16 * 8;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and mode = ");

        $r25 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Mode mode>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r31 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r31);

        throw $r20;

     label08:
        i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_CIPHER_iv_length(long)>(l1);

        if r2 != null goto label10;

        if i2 == 0 goto label10;

        r2 = newarray (byte)[i2];

        $z6 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        if $z6 == 0 goto label11;

        if r3 != null goto label09;

        $r19 = new java.security.SecureRandom;

        specialinvoke $r19.<java.security.SecureRandom: void <init>()>();

        r3 = $r19;

     label09:
        virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        goto label11;

     label10:
        if r2 == null goto label11;

        $i13 = lengthof r2;

        if $i13 == i2 goto label11;

        $r17 = new java.security.InvalidAlgorithmParameterException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected IV length of ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label11:
        r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv> = r2;

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: boolean supportsVariableSizeKey()>();

        if $z1 == 0 goto label12;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l10 = virtualinvoke $r12.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $z4 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CipherInit_ex(long,long,byte[],byte[],boolean)>($l10, l1, null, null, $z4);

        $r13 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l11 = virtualinvoke $r13.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $i12 = lengthof r4;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CIPHER_CTX_set_key_length(long,int)>($l11, $i12);

        $r14 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l14 = virtualinvoke $r14.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $z5 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CipherInit_ex(long,long,byte[],byte[],boolean)>($l14, 0L, r4, r2, $z5);

        goto label13;

     label12:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l6 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $z2 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CipherInit_ex(long,long,byte[],byte[],boolean)>($l6, l1, r4, r2, $z2);

     label13:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l7 = virtualinvoke $r8.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $r9 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipher$Padding padding>;

        $r10 = <com.android.org.conscrypt.OpenSSLCipher$Padding: com.android.org.conscrypt.OpenSSLCipher$Padding PKCS5PADDING>;

        if $r9 != $r10 goto label14;

        $z3 = 1;

        goto label15;

     label14:
        $z3 = 0;

     label15:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CIPHER_CTX_set_padding(long,boolean)>($l7, $z3);

        $r11 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l8 = virtualinvoke $r11.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $i9 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_CIPHER_CTX_block_size(long)>($l8);

        r0.<com.android.org.conscrypt.OpenSSLCipher: int modeBlockSize> = $i9;

        r0.<com.android.org.conscrypt.OpenSSLCipher: boolean calledUpdate> = 0;

        return;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        java.security.InvalidAlgorithmParameterException r3, $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void engineInitInternal(int,java.security.Key,byte[],java.security.SecureRandom)>(i0, r1, null, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r5;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        javax.crypto.spec.IvParameterSpec r4;
        byte[] r5;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter3: java.security.SecureRandom;

        $z0 = r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label1;

        r4 = (javax.crypto.spec.IvParameterSpec) r2;

        r5 = virtualinvoke r4.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        goto label2;

     label1:
        r5 = null;

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void engineInitInternal(int,java.security.Key,byte[],java.security.SecureRandom)>(i0, r1, r5, r3);

        return;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        int i0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom r3;
        java.security.spec.AlgorithmParameterSpec r4;
        java.security.spec.InvalidParameterSpecException r5, $r6;
        java.security.InvalidAlgorithmParameterException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        if r2 == null goto label4;

     label1:
        r4 = virtualinvoke r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec");

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>(r5);

        throw $r7;

     label4:
        r4 = null;

     label5:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r4, r3);

        return;

        catch java.security.spec.InvalidParameterSpecException from label1 to label2 with label3;
    }

    private final int updateInternal(byte[], int, int, byte[], int, int) throws javax.crypto.ShortBufferException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i8, $i9, i10;
        com.android.org.conscrypt.OpenSSLCipherContext $r3;
        long $l7;
        javax.crypto.ShortBufferException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 = i2;

        $i6 = lengthof r2;

        i5 = $i6 - i2;

        if i5 >= i3 goto label1;

        $r4 = new javax.crypto.ShortBufferException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("output buffer too small during update: ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l7 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $i8 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_CipherUpdate(long,byte[],int,byte[],int,int)>($l7, r2, i2, r1, i0, i1);

        i10 = i2 + $i8;

        r0.<com.android.org.conscrypt.OpenSSLCipher: boolean calledUpdate> = 1;

        $i9 = i10 - i4;

        return $i9;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2, $r4, $r5;
        int i0, i1, i2, i3, $i4;
        javax.crypto.ShortBufferException $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getOutputSize(int)>(i1);

        if i2 <= 0 goto label1;

        r2 = newarray (byte)[i2];

        goto label2;

     label1:
        r2 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

     label2:
        i3 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int updateInternal(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, 0, i2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("calculated buffer size was wrong: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label5:
        $i4 = lengthof r2;

        if $i4 != i3 goto label6;

        return r2;

     label6:
        if i3 != 0 goto label7;

        $r5 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        return $r5;

     label7:
        $r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i3);

        return $r4;

        catch javax.crypto.ShortBufferException from label2 to label3 with label4;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2;
        int i0, i1, i2, i3, $i4;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getOutputSize(int)>(i1);

        $i4 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int updateInternal(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, i2, i3);

        return $i4;
    }

    private void reset()
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        com.android.org.conscrypt.OpenSSLCipherContext $r1;
        long $l0;
        boolean $z0;
        byte[] $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] encodedKey>;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] iv>;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void EVP_CipherInit_ex(long,long,byte[],byte[],boolean)>($l0, 0L, $r3, $r2, $z0);

        r0.<com.android.org.conscrypt.OpenSSLCipher: boolean calledUpdate> = 0;

        return;
    }

    private int doFinalInternal(byte[], int, int, byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, javax.crypto.ShortBufferException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2, r3;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, i11, i12;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLCipherContext $r4, $r12;
        long $l8, $l10;
        javax.crypto.ShortBufferException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 = i2;

        if i1 <= 0 goto label1;

        i5 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int updateInternal(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, i2, i3);

        i2 = i2 + i5;

        i3 = i3 - i5;

     label1:
        $z0 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean calledUpdate>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i7 = lengthof r2;

        i11 = $i7 - i2;

        if i11 < i3 goto label3;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l10 = virtualinvoke $r12.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        i6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_CipherFinal_ex(long,byte[],int)>($l10, r2, i2);

        goto label5;

     label3:
        r3 = newarray (byte)[i3];

        $r4 = r0.<com.android.org.conscrypt.OpenSSLCipher: com.android.org.conscrypt.OpenSSLCipherContext cipherCtx>;

        $l8 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLCipherContext: long getContext()>();

        i6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int EVP_CipherFinal_ex(long,byte[],int)>($l8, r3, 0);

        if i6 <= i11 goto label4;

        $r5 = new javax.crypto.ShortBufferException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffer is too short: ");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        if i6 <= 0 goto label5;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r3, 0, r2, i2, i6);

     label5:
        i12 = i2 + i6;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void reset()>();

        $i9 = i12 - i4;

        return $i9;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2, $r4, $r5;
        int i0, i1, i2, i3, $i4;
        javax.crypto.ShortBufferException r3, $r6;
        boolean $z0, $z1;
        java.lang.RuntimeException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean encrypting>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.OpenSSLCipher: boolean calledUpdate>;

        if $z1 != 0 goto label1;

        if i1 != 0 goto label1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: void reset()>();

        return null;

     label1:
        i2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getOutputSize(int)>(i1);

        r2 = newarray (byte)[i2];

     label2:
        i3 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int doFinalInternal(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, 0, i2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("our calculated buffer was too small", r3);

        throw $r7;

     label5:
        $i4 = lengthof r2;

        if i3 != $i4 goto label6;

        return r2;

     label6:
        if i3 != 0 goto label7;

        $r5 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        return $r5;

     label7:
        $r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i3);

        return $r4;

        catch javax.crypto.ShortBufferException from label2 to label3 with label4;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r2;
        int i0, i1, i2, i3, $i4;
        java.lang.NullPointerException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        if r2 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("output == null");

        throw $r3;

     label1:
        i3 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int getOutputSize(int)>(i1);

        $i4 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: int doFinalInternal(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, i2, i3);

        return $i4;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        java.security.Key r1;
        byte[] r2, $r4;
        javax.crypto.IllegalBlockSizeException r3, $r6;
        int $i0;
        javax.crypto.BadPaddingException $r5, r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: java.security.Key;

     label1:
        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof r2;

        $r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] engineDoFinal(byte[],int,int)>(r2, 0, $i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r8 = $r5;

        $r6 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r6.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        r3 = $r6;

        virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>(r8);

        throw r3;

        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        com.android.org.conscrypt.OpenSSLCipher r0;
        byte[] r1, r3;
        java.lang.String r2, $r9;
        int i0, $i1;
        java.security.KeyFactory r4, r21;
        java.lang.UnsupportedOperationException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r10;
        java.security.spec.PKCS8EncodedKeySpec $r11;
        java.security.PrivateKey $r12;
        java.security.PublicKey $r13;
        java.security.spec.X509EncodedKeySpec $r14;
        java.security.InvalidKeyException $r15, $r17, $r19;
        javax.crypto.IllegalBlockSizeException $r16, r22;
        java.security.spec.InvalidKeySpecException $r18, r24;
        javax.crypto.BadPaddingException $r20, r23;

        r0 := @this: com.android.org.conscrypt.OpenSSLCipher;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label01:
        $i1 = lengthof r1;

        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLCipher: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i1);

        if i0 != 1 goto label03;

        r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r2);

        $r14 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r14.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        $r13 = virtualinvoke r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r14);

     label02:
        return $r13;

     label03:
        if i0 != 2 goto label05;

        r21 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r2);

        $r11 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r11.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r3);

        $r12 = virtualinvoke r21.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r11);

     label04:
        return $r12;

     label05:
        if i0 != 3 goto label07;

        $r10 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r3, r2);

     label06:
        return $r10;

     label07:
        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrappedKeyType == ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label08:
        $r16 := @caughtexception;

        r22 = $r16;

        $r15 = new java.security.InvalidKeyException;

        specialinvoke $r15.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r22);

        throw $r15;

     label09:
        $r20 := @caughtexception;

        r23 = $r20;

        $r19 = new java.security.InvalidKeyException;

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r23);

        throw $r19;

     label10:
        $r18 := @caughtexception;

        r24 = $r18;

        $r17 = new java.security.InvalidKeyException;

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r24);

        throw $r17;

        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label08;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label08;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label08;
        catch javax.crypto.BadPaddingException from label01 to label02 with label09;
        catch javax.crypto.BadPaddingException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label05 to label06 with label09;
        catch javax.crypto.BadPaddingException from label07 to label08 with label09;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label10;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label10;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label10;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label10;
    }
}
