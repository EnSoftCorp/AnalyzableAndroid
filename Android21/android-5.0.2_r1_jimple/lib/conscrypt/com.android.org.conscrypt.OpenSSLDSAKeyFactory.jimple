public class com.android.org.conscrypt.OpenSSLDSAKeyFactory extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLDSAKeyFactory r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyFactory;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLDSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.X509EncodedKeySpec $r9;
        java.security.PublicKey $r10;
        com.android.org.conscrypt.OpenSSLDSAPublicKey $r11;
        java.security.spec.DSAPublicKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.DSAPublicKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLDSAPublicKey;

        $r12 = (java.security.spec.DSAPublicKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void <init>(java.security.spec.DSAPublicKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.X509EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec,int)>($r9, 116);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use DSAPublicKeySpec or X509EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLDSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.security.PrivateKey $r10;
        com.android.org.conscrypt.OpenSSLDSAPrivateKey $r11;
        java.security.spec.DSAPrivateKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.DSAPrivateKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLDSAPrivateKey;

        $r12 = (java.security.spec.DSAPrivateKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLDSAPrivateKey: void <init>(java.security.spec.DSAPrivateKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec,int)>($r9, 116);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use DSAPrivateKeySpec or PKCS8EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLDSAKeyFactory r0;
        java.security.Key r1;
        java.lang.Class r2, $r12, $r17, $r27, $r39, $r47, $r53, $r69;
        java.security.interfaces.DSAPublicKey r3, r78;
        java.security.interfaces.DSAParams r4, r5, r80, r83;
        java.lang.String $r6, $r7, $r11, $r16, $r18, $r19, $r20, $r26, $r28, $r30, $r31, $r36, $r40, $r42, $r43, $r54, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.security.spec.InvalidKeySpecException $r8, $r24, $r25, $r32, $r33, $r41, $r64, $r71, $r72, $r74;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r15, $r22, $r23, $r29, $r35, $r37, $r38;
        java.security.spec.X509EncodedKeySpec $r21, $r63;
        java.security.spec.PKCS8EncodedKeySpec $r34, $r46;
        java.security.spec.DSAPrivateKeySpec $r44, $r48;
        java.security.PrivateKey $r45;
        java.math.BigInteger $r49, $r50, $r51, $r52, $r55, $r56, $r57, $r58, $r60, $r65, $r67, $r68, $r70, $r73, $r75, $r76;
        java.security.PublicKey $r59;
        java.security.spec.DSAPublicKeySpec $r61, $r66;
        byte[] r77, r81, r84, r85;
        java.security.interfaces.DSAPrivateKey r79, r82;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label01;

        $r72 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r72.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key == null");

        throw $r72;

     label01:
        if r2 != null goto label02;

        $r71 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r71.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r71;

     label02:
        $r6 = "DSA";

        $r7 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label03;

        $r74 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r74.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key must be a DSA key");

        throw $r74;

     label03:
        $z1 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z1 == 0 goto label04;

        $r69 = class "java/security/spec/DSAPublicKeySpec";

        $z16 = virtualinvoke $r69.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z16 == 0 goto label04;

        r3 = (java.security.interfaces.DSAPublicKey) r1;

        r4 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r66 = new java.security.spec.DSAPublicKeySpec;

        $r65 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r75 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r76 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r73 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r66.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r65, $r75, $r76, $r73);

        return $r66;

     label04:
        $z2 = r1 instanceof java.security.PublicKey;

        if $z2 == 0 goto label07;

        $r53 = class "java/security/spec/DSAPublicKeySpec";

        $z14 = virtualinvoke $r53.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z14 == 0 goto label07;

        r77 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r54 = "X.509";

        $r62 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z15 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>($r62);

        if $z15 == 0 goto label05;

        if r77 != null goto label06;

     label05:
        $r64 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r64.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid X.509 encoding");

        throw $r64;

     label06:
        $r63 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r63.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r77);

        $r59 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r63);

        r78 = (java.security.interfaces.DSAPublicKey) $r59;

        r5 = interfaceinvoke r78.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r61 = new java.security.spec.DSAPublicKeySpec;

        $r60 = interfaceinvoke r78.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r68 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r67 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r70 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r61.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r60, $r68, $r67, $r70);

        return $r61;

     label07:
        $z3 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z3 == 0 goto label08;

        $r47 = class "java/security/spec/DSAPrivateKeySpec";

        $z13 = virtualinvoke $r47.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z13 == 0 goto label08;

        r79 = (java.security.interfaces.DSAPrivateKey) r1;

        r80 = interfaceinvoke r79.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r48 = new java.security.spec.DSAPrivateKeySpec;

        $r55 = interfaceinvoke r79.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r56 = interfaceinvoke r80.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r57 = interfaceinvoke r80.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r58 = interfaceinvoke r80.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r48.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r55, $r56, $r57, $r58);

        return $r48;

     label08:
        $z4 = r1 instanceof java.security.PrivateKey;

        if $z4 == 0 goto label11;

        $r39 = class "java/security/spec/DSAPrivateKeySpec";

        $z11 = virtualinvoke $r39.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z11 == 0 goto label11;

        r81 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r43 = "PKCS#8";

        $r42 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z12 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r42);

        if $z12 == 0 goto label09;

        if r81 != null goto label10;

     label09:
        $r41 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r41.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r41;

     label10:
        $r46 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r46.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r81);

        $r45 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r46);

        r82 = (java.security.interfaces.DSAPrivateKey) $r45;

        r83 = interfaceinvoke r82.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r44 = new java.security.spec.DSAPrivateKeySpec;

        $r49 = interfaceinvoke r82.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r50 = interfaceinvoke r83.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r51 = interfaceinvoke r83.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r52 = interfaceinvoke r83.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r44.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r49, $r50, $r51, $r52);

        return $r44;

     label11:
        $z5 = r1 instanceof java.security.PrivateKey;

        if $z5 == 0 goto label14;

        $r27 = class "java/security/spec/PKCS8EncodedKeySpec";

        $z9 = virtualinvoke $r27.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z9 == 0 goto label14;

        r84 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r30 = "PKCS#8";

        $r31 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z10 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z10 != 0 goto label12;

        $r33 = new java.security.spec.InvalidKeySpecException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be PKCS#8; was ");

        $r36 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r40);

        throw $r33;

     label12:
        if r84 != null goto label13;

        $r32 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r32.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r32;

     label13:
        $r34 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r34.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r84);

        return $r34;

     label14:
        $z6 = r1 instanceof java.security.PublicKey;

        if $z6 == 0 goto label17;

        $r17 = class "java/security/spec/X509EncodedKeySpec";

        $z7 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z7 == 0 goto label17;

        r85 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r20 = "X.509";

        $r19 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z8 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z8 != 0 goto label15;

        $r25 = new java.security.spec.InvalidKeySpecException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be X.509; was ");

        $r28 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label15:
        if r85 != null goto label16;

        $r24 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r24.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r24;

     label16:
        $r21 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r21.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r85);

        return $r21;

     label17:
        $r8 = new java.security.spec.InvalidKeySpecException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type and key spec combination; key=");

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keySpec=");

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r18);

        throw $r8;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLDSAKeyFactory r0;
        java.security.Key r1;
        java.security.interfaces.DSAPublicKey r2;
        java.math.BigInteger r3, r5, r6, r7, r40, r42, r43, r44;
        java.security.interfaces.DSAParams r4, r41;
        java.security.spec.InvalidKeySpecException r8, $r28, $r32, $r34, $r37, r45, r47, r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.security.InvalidKeyException $r9, $r21, $r24, $r29, $r33, $r35, $r36, $r38;
        java.lang.StringBuilder $r10, $r11, $r15;
        java.lang.String $r12, $r14, $r16, $r17, $r20, $r22;
        java.lang.Class $r13;
        java.security.PublicKey $r18, $r30;
        java.security.spec.X509EncodedKeySpec $r19;
        java.security.PrivateKey $r23, $r26;
        java.security.spec.PKCS8EncodedKeySpec $r25;
        java.security.spec.DSAPrivateKeySpec $r27;
        java.security.spec.DSAPublicKeySpec $r31;
        java.security.interfaces.DSAPrivateKey r39;
        byte[] r46, r48;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r29 = new java.security.InvalidKeyException;

        specialinvoke $r29.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r29;

     label01:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLDSAPublicKey;

        if $z0 != 0 goto label02;

        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLDSAPrivateKey;

        if $z1 == 0 goto label03;

     label02:
        return r1;

     label03:
        $z2 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z2 == 0 goto label07;

        r2 = (java.security.interfaces.DSAPublicKey) r1;

        r3 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        r4 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        r5 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        r6 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        r7 = interfaceinvoke r4.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

     label04:
        $r31 = new java.security.spec.DSAPublicKeySpec;

        specialinvoke $r31.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r3, r5, r6, r7);

        $r30 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r31);

     label05:
        return $r30;

     label06:
        $r34 := @caughtexception;

        r8 = $r34;

        $r33 = new java.security.InvalidKeyException;

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r8);

        throw $r33;

     label07:
        $z3 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z3 == 0 goto label11;

        r39 = (java.security.interfaces.DSAPrivateKey) r1;

        r40 = interfaceinvoke r39.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        r41 = interfaceinvoke r39.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        r42 = interfaceinvoke r41.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        r43 = interfaceinvoke r41.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        r44 = interfaceinvoke r41.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

     label08:
        $r27 = new java.security.spec.DSAPrivateKeySpec;

        specialinvoke $r27.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r40, r42, r43, r44);

        $r26 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r27);

     label09:
        return $r26;

     label10:
        $r28 := @caughtexception;

        r45 = $r28;

        $r35 = new java.security.InvalidKeyException;

        specialinvoke $r35.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r45);

        throw $r35;

     label11:
        $z4 = r1 instanceof java.security.PrivateKey;

        if $z4 == 0 goto label15;

        $r20 = "PKCS#8";

        $r22 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z7 == 0 goto label15;

        r46 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r46 != null goto label12;

        $r24 = new java.security.InvalidKeyException;

        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r24;

     label12:
        $r25 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r25.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r46);

        $r23 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r25);

     label13:
        return $r23;

     label14:
        $r32 := @caughtexception;

        r47 = $r32;

        $r38 = new java.security.InvalidKeyException;

        specialinvoke $r38.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r47);

        throw $r38;

     label15:
        $z5 = r1 instanceof java.security.PublicKey;

        if $z5 == 0 goto label19;

        $r17 = "X.509";

        $r16 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label19;

        r48 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r48 != null goto label16;

        $r21 = new java.security.InvalidKeyException;

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r21;

     label16:
        $r19 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r19.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r48);

        $r18 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r19);

     label17:
        return $r18;

     label18:
        $r37 := @caughtexception;

        r49 = $r37;

        $r36 = new java.security.InvalidKeyException;

        specialinvoke $r36.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r49);

        throw $r36;

     label19:
        $r9 = new java.security.InvalidKeyException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be DSA public or private key; was ");

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r14);

        throw $r9;

        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label06;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label10;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
    }
}
