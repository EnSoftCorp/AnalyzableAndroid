class com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream extends java.io.OutputStream
{
    private final java.lang.Object writeLock;
    final com.android.org.conscrypt.OpenSSLSocketImpl this$0;

    void <init>(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r0;
        com.android.org.conscrypt.OpenSSLSocketImpl r1;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0> = r1;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: java.lang.Object writeLock> = $r2;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r0;
        int i0, $i1;
        byte[] r1;
        byte $b2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        i0 := @parameter0: int;

        r1 = newarray (byte)[1];

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        r1[0] = $b2;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: void write(byte[])>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i5;
        java.lang.Object r2, r3, $r8, $r10;
        java.lang.Throwable r4, r5, $r18, $r20;
        dalvik.system.BlockGuard$Policy $r6;
        com.android.org.conscrypt.OpenSSLSocketImpl $r7, $r9, $r11, $r12, $r13, $r16, $r17;
        long $l4;
        java.io.FileDescriptor $r14;
        java.net.Socket $r15;
        java.net.SocketException $r19;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r6 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r6.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: void access$000(com.android.org.conscrypt.OpenSSLSocketImpl)>($r7);

        $i2 = lengthof r1;

        staticinvoke <com.android.org.conscrypt.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        if i1 != 0 goto label01;

        return;

     label01:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: java.lang.Object writeLock>;

        r2 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object access$100(com.android.org.conscrypt.OpenSSLSocketImpl)>($r9);

        r3 = $r10;

        entermonitor $r10;

     label03:
        $r11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $i3 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: int access$200(com.android.org.conscrypt.OpenSSLSocketImpl)>($r11);

        if $i3 != 5 goto label04;

        $r19 = new java.net.SocketException;

        specialinvoke $r19.<java.net.SocketException: void <init>(java.lang.String)>("socket is closed");

        throw $r19;

     label04:
        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r18 := @caughtexception;

        r4 = $r18;

        exitmonitor r3;

     label07:
        throw r4;

     label08:
        $r12 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $l4 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: long access$300(com.android.org.conscrypt.OpenSSLSocketImpl)>($r12);

        $r13 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $r15 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket access$400(com.android.org.conscrypt.OpenSSLSocketImpl)>($r13);

        $r14 = staticinvoke <com.android.org.conscrypt.Platform: java.io.FileDescriptor getFileDescriptor(java.net.Socket)>($r15);

        $r16 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $r17 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: com.android.org.conscrypt.OpenSSLSocketImpl this$0>;

        $i5 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: int access$500(com.android.org.conscrypt.OpenSSLSocketImpl)>($r17);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_write(long,java.io.FileDescriptor,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks,byte[],int,int,int)>($l4, $r14, $r16, r1, i0, i1, $i5);

        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r20 := @caughtexception;

        r5 = $r20;

        exitmonitor r2;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void awaitPendingOps()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: java.lang.Object writeLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
