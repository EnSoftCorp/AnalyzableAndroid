class com.android.org.conscrypt.Platform extends java.lang.Object
{

    public static void setup()
    {
        com.android.org.conscrypt.Platform $r0;

        $r0 = <com.android.org.conscrypt.Platform$NoPreloadHolder: com.android.org.conscrypt.Platform MAPPER>;

        specialinvoke $r0.<com.android.org.conscrypt.Platform: void ping()>();

        return;
    }

    private void ping()
    {
        com.android.org.conscrypt.Platform r0;

        r0 := @this: com.android.org.conscrypt.Platform;

        return;
    }

    private void <init>()
    {
        com.android.org.conscrypt.Platform r0;
        com.android.org.conscrypt.Platform$OpenSSLMapper $r1;

        r0 := @this: com.android.org.conscrypt.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.org.conscrypt.Platform$OpenSSLMapper;

        specialinvoke $r1.<com.android.org.conscrypt.Platform$OpenSSLMapper: void <init>(com.android.org.conscrypt.Platform$1)>(null);

        staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: void setSource(org.apache.harmony.security.utils.AlgNameMapperSource)>($r1);

        return;
    }

    public static java.io.FileDescriptor getFileDescriptor(java.net.Socket)
    {
        java.net.Socket r0;
        java.io.FileDescriptor $r1;

        r0 := @parameter0: java.net.Socket;

        $r1 = virtualinvoke r0.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        return $r1;
    }

    public static java.io.FileDescriptor getFileDescriptorFromSSLSocket(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.reflect.Field r1, r3;
        java.lang.Object r2, $r6;
        java.lang.Class $r4, $r5;
        java.io.FileDescriptor $r7;
        java.lang.Exception $r8, r10;
        java.lang.RuntimeException $r9;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

     label1:
        $r4 = class "java/net/Socket";

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("impl");

        virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r5 = class "java/net/SocketImpl";

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("fd");

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.io.FileDescriptor) $r6;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t get FileDescriptor from socket", r10);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getCurveName(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec r0;
        java.lang.String $r1;

        r0 := @parameter0: java.security.spec.ECParameterSpec;

        $r1 = virtualinvoke r0.<java.security.spec.ECParameterSpec: java.lang.String getCurveName()>();

        return $r1;
    }

    public static void setCurveName(java.security.spec.ECParameterSpec, java.lang.String)
    {
        java.security.spec.ECParameterSpec r0;
        java.lang.String r1;

        r0 := @parameter0: java.security.spec.ECParameterSpec;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.security.spec.ECParameterSpec: void setCurveName(java.lang.String)>(r1);

        return;
    }

    public static void setSocketTimeout(java.net.Socket, long) throws java.net.SocketException
    {
        java.net.Socket r0;
        long l0;
        android.system.StructTimeval r1;
        android.system.ErrnoException r2, $r4;
        java.io.FileDescriptor $r3;
        int $i1, $i2;
        java.net.SocketException $r5;

        r0 := @parameter0: java.net.Socket;

        l0 := @parameter1: long;

        r1 = staticinvoke <android.system.StructTimeval: android.system.StructTimeval fromMillis(long)>(l0);

     label1:
        $r3 = virtualinvoke r0.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        $i2 = <android.system.OsConstants: int SOL_SOCKET>;

        $i1 = <android.system.OsConstants: int SO_SNDTIMEO>;

        staticinvoke <android.system.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,android.system.StructTimeval)>($r3, $i2, $i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = virtualinvoke r2.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r5;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static void checkServerTrusted(javax.net.ssl.X509TrustManager, java.security.cert.X509Certificate[], java.lang.String, java.lang.String) throws java.security.cert.CertificateException
    {
        javax.net.ssl.X509TrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2, r3;
        com.android.org.conscrypt.TrustManagerImpl r4;
        boolean $z0;

        r0 := @parameter0: javax.net.ssl.X509TrustManager;

        r1 := @parameter1: java.security.cert.X509Certificate[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = r0 instanceof com.android.org.conscrypt.TrustManagerImpl;

        if $z0 == 0 goto label1;

        r4 = (com.android.org.conscrypt.TrustManagerImpl) r0;

        virtualinvoke r4.<com.android.org.conscrypt.TrustManagerImpl: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label2;

     label1:
        interfaceinvoke r0.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r1, r2);

     label2:
        return;
    }

    public static com.android.org.conscrypt.OpenSSLKey wrapRsaKey(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;

        r0 := @parameter0: java.security.PrivateKey;

        return null;
    }

    public static void logEvent(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class r1, r4, $r11;
        java.lang.Object r2, r5, $r9;
        java.lang.reflect.Method r3, r6;
        int i0;
        java.lang.Class[] $r7, $r12;
        java.lang.Object[] $r8, $r13, $r15;
        java.lang.Integer $r10, $r14, $r16;
        java.lang.Exception $r17;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.os.Process");

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r7 = (java.lang.Class[]) null;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("myUid", $r7);

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r8);

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.util.EventLog");

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r12 = newarray (java.lang.Class)[2];

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        $r12[0] = $r11;

        $r12[1] = class "[Ljava/lang/Object;";

        r6 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("writeEvent", $r12);

        $r13 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1397638484);

        $r13[0] = $r14;

        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = "conscrypt";

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[1] = $r16;

        $r15[2] = r0;

        $r13[1] = $r15;

        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, $r13);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void <init>(com.android.org.conscrypt.Platform$1)
    {
        com.android.org.conscrypt.Platform r0;
        com.android.org.conscrypt.Platform$1 r1;

        r0 := @this: com.android.org.conscrypt.Platform;

        r1 := @parameter0: com.android.org.conscrypt.Platform$1;

        specialinvoke r0.<com.android.org.conscrypt.Platform: void <init>()>();

        return;
    }
}
