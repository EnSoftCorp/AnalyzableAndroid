public final class com.android.org.conscrypt.ChainStrengthAnalyzer extends java.lang.Object
{
    private static final int MIN_MODULUS;
    private static final java.lang.String[] OID_BLACKLIST;

    public void <init>()
    {
        com.android.org.conscrypt.ChainStrengthAnalyzer r0;

        r0 := @this: com.android.org.conscrypt.ChainStrengthAnalyzer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final void check(java.security.cert.X509Certificate[]) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate[] r0, r1;
        int i0, i1;
        java.security.cert.X509Certificate r2;

        r0 := @parameter0: java.security.cert.X509Certificate[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        staticinvoke <com.android.org.conscrypt.ChainStrengthAnalyzer: void checkCert(java.security.cert.X509Certificate)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final void checkCert(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate r0;

        r0 := @parameter0: java.security.cert.X509Certificate;

        staticinvoke <com.android.org.conscrypt.ChainStrengthAnalyzer: void checkModulusLength(java.security.cert.X509Certificate)>(r0);

        staticinvoke <com.android.org.conscrypt.ChainStrengthAnalyzer: void checkNotMD5(java.security.cert.X509Certificate)>(r0);

        return;
    }

    private static final void checkModulusLength(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate r0;
        java.security.PublicKey r1;
        int i0;
        boolean $z0;
        java.security.interfaces.RSAPublicKey $r2;
        java.math.BigInteger $r3;
        java.security.cert.CertificateException $r4;

        r0 := @parameter0: java.security.cert.X509Certificate;

        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $z0 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label1;

        $r2 = (java.security.interfaces.RSAPublicKey) r1;

        $r3 = interfaceinvoke $r2.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        if i0 >= 1024 goto label1;

        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Modulus is < 1024 bits");

        throw $r4;

     label1:
        return;
    }

    private static final void checkNotMD5(java.security.cert.X509Certificate) throws java.security.cert.CertificateException
    {
        java.security.cert.X509Certificate r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0;
        java.security.cert.CertificateException $r4;

        r0 := @parameter0: java.security.cert.X509Certificate;

        r1 = virtualinvoke r0.<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>();

        r2 = <com.android.org.conscrypt.ChainStrengthAnalyzer: java.lang.String[] OID_BLACKLIST>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Signature uses an insecure hash function");

        throw $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.android.org.conscrypt.ChainStrengthAnalyzer: int MIN_MODULUS> = 1024;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "1.2.840.113549.1.1.4";

        <com.android.org.conscrypt.ChainStrengthAnalyzer: java.lang.String[] OID_BLACKLIST> = $r0;

        return;
    }
}
