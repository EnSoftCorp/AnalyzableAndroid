abstract class com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser extends java.lang.Object
{

    private void <init>()
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object generateItem(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser r0;
        java.io.InputStream r1;
        boolean z0, $z1;
        java.io.PushbackInputStream r2, $r5;
        byte[] r3, $r6, $r9, $r10, $r13;
        int i0, $i1, $i4, $i5, $i6, $i7;
        java.util.List r4, r19;
        byte $b2, $b3;
        java.lang.Object $r7, $r8, $r11;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r14, $r15, $r16;
        java.io.IOException $r17;
        java.lang.Exception $r18, r20;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label01;

        $r15 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r15.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String)>("inStream == null");

        throw $r15;

     label01:
        z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if z0 == 0 goto label02;

        $r13 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $i7 = lengthof $r13;

        virtualinvoke r1.<java.io.InputStream: void mark(int)>($i7);

     label02:
        $r5 = new java.io.PushbackInputStream;

        specialinvoke $r5.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 64);

        r2 = $r5;

     label03:
        $r6 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $i1 = lengthof $r6;

        r3 = newarray (byte)[$i1];

        i0 = virtualinvoke r2.<java.io.PushbackInputStream: int read(byte[])>(r3);

        if i0 >= 0 goto label04;

        $r14 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r14.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String)>("inStream is empty");

        throw $r14;

     label04:
        virtualinvoke r2.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r3, 0, i0);

        $b2 = r3[0];

        if $b2 != 45 goto label09;

        $r9 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $i5 = lengthof $r9;

        if i0 != $i5 goto label07;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r10, r3);

        if $z1 == 0 goto label07;

        r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.List fromPkcs7PemInputStream(java.io.InputStream)>(r2);

        $i6 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i6 != 0 goto label06;

     label05:
        return null;

     label06:
        interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        goto label09;

     label07:
        $r11 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.lang.Object fromX509PemInputStream(java.io.InputStream)>(r2);

     label08:
        return $r11;

     label09:
        $b3 = r3[4];

        if $b3 != 6 goto label13;

        r19 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.List fromPkcs7DerInputStream(java.io.InputStream)>(r2);

        $i4 = interfaceinvoke r19.<java.util.List: int size()>();

        if $i4 != 0 goto label11;

     label10:
        return null;

     label11:
        $r8 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

     label12:
        return $r8;

     label13:
        $r7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.lang.Object fromX509DerInputStream(java.io.InputStream)>(r2);

     label14:
        return $r7;

     label15:
        $r18 := @caughtexception;

        r20 = $r18;

        if z0 == 0 goto label19;

     label16:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label17:
        goto label19;

     label18:
        $r17 := @caughtexception;

     label19:
        $r16 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r16.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r20);

        throw $r16;

        catch java.lang.Exception from label03 to label05 with label15;
        catch java.lang.Exception from label06 to label08 with label15;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
    }

    public java.util.Collection generateItems(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r14, $r18, $r20;
        java.io.PushbackInputStream r3, $r5;
        byte[] r4, $r6, $r7, $r9;
        int i0, $i1, $i2, $i3;
        java.util.ArrayList $r8, r23;
        byte $b4;
        java.util.List $r10, $r11, $r12;
        boolean $z0, z1;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r13, $r15, $r17, $r19, $r21;
        java.lang.Exception $r16, r22;
        java.lang.Object r24;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label01;

        $r15 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r15.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String)>("inStream == null");

        throw $r15;

     label01:
        $i1 = virtualinvoke r1.<java.io.InputStream: int available()>();

        if $i1 != 0 goto label03;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label02:
        return $r12;

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

        r2 = $r20;

        $r21 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r21.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String,java.lang.Exception)>("Problem reading input stream", r2);

        throw $r21;

     label05:
        z1 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if z1 == 0 goto label06;

        virtualinvoke r1.<java.io.InputStream: void mark(int)>(64);

     label06:
        $r5 = new java.io.PushbackInputStream;

        specialinvoke $r5.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 64);

        r3 = $r5;

     label07:
        $r6 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $i2 = lengthof $r6;

        r4 = newarray (byte)[$i2];

        i0 = virtualinvoke r3.<java.io.PushbackInputStream: int read(byte[])>(r4);

        if i0 >= 0 goto label08;

        $r13 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r13.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.String)>("inStream is empty");

        throw $r13;

     label08:
        virtualinvoke r3.<java.io.PushbackInputStream: void unread(byte[],int,int)>(r4, 0, i0);

        $r7 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $i3 = lengthof $r7;

        if i0 != $i3 goto label10;

        $r9 = staticinvoke <com.android.org.conscrypt.OpenSSLX509CertificateFactory: byte[] access$000()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r9, r4);

        if $z0 == 0 goto label10;

        $r11 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.List fromPkcs7PemInputStream(java.io.InputStream)>(r3);

     label09:
        return $r11;

     label10:
        $b4 = r4[4];

        if $b4 != 6 goto label12;

        $r10 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.util.List fromPkcs7DerInputStream(java.io.InputStream)>(r3);

     label11:
        return $r10;

     label12:
        goto label18;

     label13:
        $r16 := @caughtexception;

        r22 = $r16;

        if z1 == 0 goto label17;

     label14:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label15:
        goto label17;

     label16:
        $r14 := @caughtexception;

     label17:
        $r17 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r17.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r22);

        throw $r17;

     label18:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r23 = $r8;

     label19:
        if z1 == 0 goto label20;

        virtualinvoke r1.<java.io.InputStream: void mark(int)>(64);

     label20:
        r24 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: java.lang.Object generateItem(java.io.InputStream)>(r3);

        interfaceinvoke r23.<java.util.List: boolean add(java.lang.Object)>(r24);

     label21:
        goto label27;

     label22:
        $r19 := @caughtexception;

        if z1 == 0 goto label26;

     label23:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label24:
        goto label26;

     label25:
        $r18 := @caughtexception;

     label26:
        r24 = null;

     label27:
        if r24 != null goto label19;

        return r23;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Exception from label07 to label09 with label13;
        catch java.lang.Exception from label10 to label11 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException from label20 to label21 with label22;
        catch java.io.IOException from label23 to label24 with label25;
    }

    protected abstract java.lang.Object fromX509PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

    protected abstract java.lang.Object fromX509DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

    protected abstract java.util.List fromPkcs7PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

    protected abstract java.util.List fromPkcs7DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

    void <init>(com.android.org.conscrypt.OpenSSLX509CertificateFactory$1)
    {
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser r0;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$1 r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLX509CertificateFactory$1;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$Parser: void <init>()>();

        return;
    }
}
