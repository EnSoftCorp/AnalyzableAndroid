final enum class com.android.okhttp.internal.spdy.Huffman$Codec extends java.lang.Enum
{
    public static final enum com.android.okhttp.internal.spdy.Huffman$Codec REQUEST;
    public static final enum com.android.okhttp.internal.spdy.Huffman$Codec RESPONSE;
    private final com.android.okhttp.internal.spdy.Huffman$Node root;
    private final int[] codes;
    private final byte[] lengths;
    private static final com.android.okhttp.internal.spdy.Huffman$Codec[] $VALUES;

    public static com.android.okhttp.internal.spdy.Huffman$Codec[] values()
    {
        com.android.okhttp.internal.spdy.Huffman$Codec[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.android.okhttp.internal.spdy.Huffman$Codec[]) $r1;

        return $r2;
    }

    public static com.android.okhttp.internal.spdy.Huffman$Codec valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.android.okhttp.internal.spdy.Huffman$Codec $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "com/android/okhttp/internal/spdy/Huffman$Codec", r0);

        $r2 = (com.android.okhttp.internal.spdy.Huffman$Codec) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int[], byte[])
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        java.lang.String r1;
        int i0;
        int[] r2;
        byte[] r3;
        com.android.okhttp.internal.spdy.Huffman$Node $r4;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $r4 = new com.android.okhttp.internal.spdy.Huffman$Node;

        specialinvoke $r4.<com.android.okhttp.internal.spdy.Huffman$Node: void <init>()>();

        r0.<com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Node root> = $r4;

        specialinvoke r0.<com.android.okhttp.internal.spdy.Huffman$Codec: void buildTree(int[],byte[])>(r2, r3);

        r0.<com.android.okhttp.internal.spdy.Huffman$Codec: int[] codes> = r2;

        r0.<com.android.okhttp.internal.spdy.Huffman$Codec: byte[] lengths> = r3;

        return;
    }

    void encode(byte[], java.io.OutputStream) throws java.io.IOException
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        byte[] r1, $r3;
        java.io.OutputStream r2;
        long l0, $l9, $l12, $l13, l15, l16, l17;
        int i1, i2, i4, $i6, $i7, $i10, $i14;
        short s3, $s8;
        byte b5, $b11;
        int[] $r4;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.OutputStream;

        l0 = 0L;

        i1 = 0;

        i2 = 0;

     label1:
        $i6 = lengthof r1;

        if i2 >= $i6 goto label4;

        $b11 = r1[i2];

        s3 = $b11 & 255;

        $r4 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: int[] codes>;

        i4 = $r4[s3];

        $r3 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: byte[] lengths>;

        b5 = $r3[s3];

        l15 = l0 << b5;

        $l13 = (long) i4;

        l0 = l15 | $l13;

        i1 = i1 + b5;

     label2:
        if i1 < 8 goto label3;

        i1 = i1 + -8;

        $l12 = l0 >> i1;

        $i14 = (int) $l12;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i14);

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        if i1 <= 0 goto label5;

        $i7 = 8 - i1;

        l16 = l0 << $i7;

        $s8 = 255 >>> i1;

        $l9 = (long) $s8;

        l17 = l16 | $l9;

        $i10 = (int) l17;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i10);

     label5:
        return;
    }

    int encodedLength(byte[])
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        byte[] r1, $r2;
        long l0, $l4, $l5, $l9;
        int i1, $i3, $i6;
        short s2;
        byte $b7, $b8;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: byte[];

        l0 = 0L;

        i1 = 0;

     label1:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label2;

        $b7 = r1[i1];

        s2 = $b7 & 255;

        $r2 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: byte[] lengths>;

        $b8 = $r2[s2];

        $l9 = (long) $b8;

        l0 = l0 + $l9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $l4 = l0 + 7L;

        $l5 = $l4 >> 3;

        $i6 = (int) $l5;

        return $i6;
    }

    com.android.okio.ByteString decode(com.android.okio.ByteString) throws java.io.IOException
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        com.android.okio.ByteString r1, $r4;
        byte[] $r2, $r3;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: com.android.okio.ByteString;

        $r2 = virtualinvoke r1.<com.android.okio.ByteString: byte[] toByteArray()>();

        $r3 = virtualinvoke r0.<com.android.okhttp.internal.spdy.Huffman$Codec: byte[] decode(byte[])>($r2);

        $r4 = staticinvoke <com.android.okio.ByteString: com.android.okio.ByteString of(byte[])>($r3);

        return $r4;
    }

    byte[] decode(byte[]) throws java.io.IOException
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        byte[] r1, $r5;
        java.io.ByteArrayOutputStream r2, $r4;
        com.android.okhttp.internal.spdy.Huffman$Node r3, r10;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        short s3;
        com.android.okhttp.internal.spdy.Huffman$Node[] $r6, $r7, $r8, $r9;
        byte $b10;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: byte[];

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r4;

        r3 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Node root>;

        i0 = 0;

        i1 = 0;

        i2 = 0;

     label1:
        $i5 = lengthof r1;

        if i2 >= $i5 goto label6;

        $b10 = r1[i2];

        s3 = $b10 & 255;

        $i13 = i0 << 8;

        i0 = $i13 | s3;

        i1 = i1 + 8;

     label2:
        if i1 < 8 goto label5;

        $i12 = i1 - 8;

        $i14 = i0 >>> $i12;

        i4 = $i14 & 255;

        $r8 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r3);

        r3 = $r8[i4];

        $r9 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r3);

        if $r9 != null goto label3;

        $i15 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: int access$500(com.android.okhttp.internal.spdy.Huffman$Node)>(r3);

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>($i15);

        $i16 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: int access$600(com.android.okhttp.internal.spdy.Huffman$Node)>(r3);

        i1 = i1 - $i16;

        r3 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Node root>;

        goto label4;

     label3:
        i1 = i1 + -8;

     label4:
        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        if i1 <= 0 goto label8;

        $i6 = 8 - i1;

        $i7 = i0 << $i6;

        i17 = $i7 & 255;

        $r6 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r3);

        r10 = $r6[i17];

        $r7 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r10);

        if $r7 != null goto label8;

        $i9 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: int access$600(com.android.okhttp.internal.spdy.Huffman$Node)>(r10);

        if $i9 <= i1 goto label7;

        goto label8;

     label7:
        $i8 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: int access$500(com.android.okhttp.internal.spdy.Huffman$Node)>(r10);

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(int)>($i8);

        $i11 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: int access$600(com.android.okhttp.internal.spdy.Huffman$Node)>(r10);

        i1 = i1 - $i11;

        r3 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Node root>;

        goto label6;

     label8:
        $r5 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;
    }

    private void buildTree(int[], byte[])
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        int[] r1;
        byte[] r2;
        int i0, $i1, $i3;
        byte $b2;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        r1 := @parameter0: int[];

        r2 := @parameter1: byte[];

        i0 = 0;

     label1:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label2;

        $i3 = r1[i0];

        $b2 = r2[i0];

        specialinvoke r0.<com.android.okhttp.internal.spdy.Huffman$Codec: void addCode(int,int,byte)>(i0, $i3, $b2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void addCode(int, int, byte)
    {
        com.android.okhttp.internal.spdy.Huffman$Codec r0;
        int i0, i1, i3, i4, i5, i6, $i7, $i8, $i9, $i10, i11;
        byte b2;
        com.android.okhttp.internal.spdy.Huffman$Node r1, r2, $r3, $r8, $r9;
        com.android.okhttp.internal.spdy.Huffman$Node[] $r4, $r5, $r6, $r7, $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.okhttp.internal.spdy.Huffman$Codec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        b2 := @parameter2: byte;

        $r3 = new com.android.okhttp.internal.spdy.Huffman$Node;

        specialinvoke $r3.<com.android.okhttp.internal.spdy.Huffman$Node: void <init>(int,int)>(i0, b2);

        r1 = $r3;

        r2 = r0.<com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Node root>;

     label1:
        if b2 <= 8 goto label4;

        $i9 = b2 - 8;

        b2 = (byte) $i9;

        $i10 = i1 >>> b2;

        i3 = $i10 & 255;

        $r6 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r2);

        if $r6 != null goto label2;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("invalid dictionary: prefix not unique");

        throw $r11;

     label2:
        $r5 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r2);

        $r8 = $r5[i3];

        if $r8 != null goto label3;

        $r10 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r2);

        $r9 = new com.android.okhttp.internal.spdy.Huffman$Node;

        specialinvoke $r9.<com.android.okhttp.internal.spdy.Huffman$Node: void <init>()>();

        $r10[i3] = $r9;

     label3:
        $r7 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r2);

        r2 = $r7[i3];

        goto label1;

     label4:
        i11 = 8 - b2;

        $i7 = i1 << i11;

        i4 = $i7 & 255;

        i5 = 1 << i11;

        i6 = i4;

     label5:
        $i8 = i4 + i5;

        if i6 >= $i8 goto label6;

        $r4 = staticinvoke <com.android.okhttp.internal.spdy.Huffman$Node: com.android.okhttp.internal.spdy.Huffman$Node[] access$400(com.android.okhttp.internal.spdy.Huffman$Node)>(r2);

        $r4[i6] = r1;

        i6 = i6 + 1;

        goto label5;

     label6:
        return;
    }

    static void <clinit>()
    {
        com.android.okhttp.internal.spdy.Huffman$Codec $r0, $r3, $r7, $r8;
        int[] $r1, $r4;
        byte[] $r2, $r5;
        com.android.okhttp.internal.spdy.Huffman$Codec[] $r6;

        $r0 = new com.android.okhttp.internal.spdy.Huffman$Codec;

        $r1 = staticinvoke <com.android.okhttp.internal.spdy.Huffman: int[] access$000()>();

        $r2 = staticinvoke <com.android.okhttp.internal.spdy.Huffman: byte[] access$100()>();

        specialinvoke $r0.<com.android.okhttp.internal.spdy.Huffman$Codec: void <init>(java.lang.String,int,int[],byte[])>("REQUEST", 0, $r1, $r2);

        <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec REQUEST> = $r0;

        $r3 = new com.android.okhttp.internal.spdy.Huffman$Codec;

        $r4 = staticinvoke <com.android.okhttp.internal.spdy.Huffman: int[] access$200()>();

        $r5 = staticinvoke <com.android.okhttp.internal.spdy.Huffman: byte[] access$300()>();

        specialinvoke $r3.<com.android.okhttp.internal.spdy.Huffman$Codec: void <init>(java.lang.String,int,int[],byte[])>("RESPONSE", 1, $r4, $r5);

        <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec RESPONSE> = $r3;

        $r6 = newarray (com.android.okhttp.internal.spdy.Huffman$Codec)[2];

        $r7 = <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec REQUEST>;

        $r6[0] = $r7;

        $r8 = <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec RESPONSE>;

        $r6[1] = $r8;

        <com.android.okhttp.internal.spdy.Huffman$Codec: com.android.okhttp.internal.spdy.Huffman$Codec[] $VALUES> = $r6;

        return;
    }
}
