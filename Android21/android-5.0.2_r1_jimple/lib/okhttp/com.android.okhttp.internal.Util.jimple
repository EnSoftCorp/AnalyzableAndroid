public final class com.android.okhttp.internal.Util extends java.lang.Object
{
    public static final byte[] EMPTY_BYTE_ARRAY;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final java.io.InputStream EMPTY_INPUT_STREAM;
    public static final java.nio.charset.Charset US_ASCII;
    public static final java.nio.charset.Charset UTF_8;

    private void <init>()
    {
        com.android.okhttp.internal.Util r0;

        r0 := @this: com.android.okhttp.internal.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getEffectivePort(java.net.URI)
    {
        java.net.URI r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $i0 = virtualinvoke r0.<java.net.URI: int getPort()>();

        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getEffectivePort(java.lang.String,int)>($r1, $i0);

        return $i1;
    }

    public static int getEffectivePort(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $i0 = virtualinvoke r0.<java.net.URL: int getPort()>();

        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getEffectivePort(java.lang.String,int)>($r1, $i0);

        return $i1;
    }

    private static int getEffectivePort(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 == -1 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = staticinvoke <com.android.okhttp.internal.Util: int getDefaultPort(java.lang.String)>(r0);

     label2:
        return $i1;
    }

    public static int getDefaultPort(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "http";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 80;

     label1:
        $r2 = "https";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 443;

     label2:
        return -1;
    }

    public static void checkOffsetAndCount(long, long, long)
    {
        long l0, l1, l2, $l3, $l6;
        byte $b4, $b5, $b7;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $l3 = l1 | l2;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $b5 = l1 cmp l0;

        if $b5 > 0 goto label1;

        $l6 = l0 - l1;

        $b7 = $l6 cmp l2;

        if $b7 >= 0 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        return;
    }

    public static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.lang.RuntimeException r1, $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label5;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        throw r1;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void closeQuietly(java.net.Socket)
    {
        java.net.Socket r0;
        java.lang.RuntimeException r1, $r3;
        java.lang.Exception $r2;

        r0 := @parameter0: java.net.Socket;

        if r0 == null goto label5;

     label1:
        virtualinvoke r0.<java.net.Socket: void close()>();

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        throw r1;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void closeQuietly(java.net.ServerSocket)
    {
        java.net.ServerSocket r0;
        java.lang.RuntimeException r1, $r3;
        java.lang.Exception $r2;

        r0 := @parameter0: java.net.ServerSocket;

        if r0 == null goto label5;

     label1:
        virtualinvoke r0.<java.net.ServerSocket: void close()>();

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        throw r1;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void closeAll(java.io.Closeable, java.io.Closeable) throws java.io.IOException
    {
        java.io.Closeable r0, r1;
        java.lang.Throwable r2, r3, $r8, $r9, r10;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r4;
        java.lang.Error $r5;
        java.lang.RuntimeException $r6;
        java.io.IOException $r7;

        r0 := @parameter0: java.io.Closeable;

        r1 := @parameter1: java.io.Closeable;

        r2 = null;

     label01:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r3 = $r8;

        r2 = r3;

     label04:
        interfaceinvoke r1.<java.io.Closeable: void close()>();

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r10 = $r9;

        if r2 != null goto label07;

        r2 = r10;

     label07:
        if r2 != null goto label08;

        return;

     label08:
        $z0 = r2 instanceof java.io.IOException;

        if $z0 == 0 goto label09;

        $r7 = (java.io.IOException) r2;

        throw $r7;

     label09:
        $z1 = r2 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label10;

        $r6 = (java.lang.RuntimeException) r2;

        throw $r6;

     label10:
        $z2 = r2 instanceof java.lang.Error;

        if $z2 == 0 goto label11;

        $r5 = (java.lang.Error) r2;

        throw $r5;

     label11:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    public static void deleteContents(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.io.File[] r1, r2;
        int i0, i1;
        boolean $z0, $z1;
        java.io.IOException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 != null goto label1;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a readable directory: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        staticinvoke <com.android.okhttp.internal.Util: void deleteContents(java.io.File)>(r3);

     label3:
        $z1 = virtualinvoke r3.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label4;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete file: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        long $l4, $l5, $l6;
        java.io.EOFException $r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 != 0 goto label1;

        return;

     label1:
        if r0 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r4;

     label2:
        if r1 != null goto label3;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("dst == null");

        throw $r3;

     label3:
        $i3 = lengthof r1;

        $l6 = (long) $i3;

        $l5 = (long) i0;

        $l4 = (long) i1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(long,long,long)>($l6, $l5, $l4);

     label4:
        if i1 <= 0 goto label6;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 >= 0 goto label5;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label5:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label4;

     label6:
        return;
    }

    public static com.android.okio.OkBuffer readFully(com.android.okio.Source) throws java.io.IOException
    {
        com.android.okio.Source r0;
        com.android.okio.OkBuffer r1, $r2;
        long $l0;
        byte $b1;

        r0 := @parameter0: com.android.okio.Source;

        $r2 = new com.android.okio.OkBuffer;

        specialinvoke $r2.<com.android.okio.OkBuffer: void <init>()>();

        r1 = $r2;

     label1:
        $l0 = interfaceinvoke r0.<com.android.okio.Source: long read(com.android.okio.OkBuffer,long)>(r1, 2048L);

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        goto label1;

     label2:
        interfaceinvoke r0.<com.android.okio.Source: void close()>();

        return r1;
    }

    public static boolean skipAll(com.android.okio.Source, int) throws java.io.IOException
    {
        com.android.okio.Source r0;
        int i0;
        long l1, l2, $l3, $l4, $l5, $l6;
        com.android.okio.OkBuffer r1, $r2;
        java.util.concurrent.TimeUnit $r3;
        byte $b7, $b8;

        r0 := @parameter0: com.android.okio.Source;

        i0 := @parameter1: int;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = new com.android.okio.OkBuffer;

        specialinvoke $r2.<com.android.okio.OkBuffer: void <init>()>();

        r1 = $r2;

     label1:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l3 - l1;

        $l5 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>($l4);

        $l6 = (long) i0;

        $b7 = $l5 cmp $l6;

        if $b7 >= 0 goto label3;

        l2 = interfaceinvoke r0.<com.android.okio.Source: long read(com.android.okio.OkBuffer,long)>(r1, 2048L);

        $b8 = l2 cmp -1L;

        if $b8 != 0 goto label2;

        return 1;

     label2:
        virtualinvoke r1.<com.android.okio.OkBuffer: void clear()>();

        goto label1;

     label3:
        return 0;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        int i0, i1, $i2;
        byte[] r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 = 0;

        r2 = newarray (byte)[8192];

     label1:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        i1 = $i2;

        if $i2 == -1 goto label2;

        i0 = i0 + i1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i1);

        goto label1;

     label2:
        return i0;
    }

    public static java.lang.String hash(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.security.MessageDigest r1;
        byte[] r2, $r3;
        com.android.okio.ByteString $r4;
        java.io.UnsupportedEncodingException $r6, r11;
        java.lang.AssertionError $r7, $r9;
        java.security.NoSuchAlgorithmException $r8, r10;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        $r4 = staticinvoke <com.android.okio.ByteString: com.android.okio.ByteString of(byte[])>(r2);

        $r5 = virtualinvoke $r4.<com.android.okio.ByteString: java.lang.String hex()>();

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r10);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        r11 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r11);

        throw $r7;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    public static java.util.List immutableList(java.util.List)
    {
        java.util.List r0, $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public static transient java.util.List immutableList(java.lang.Object[])
    {
        java.lang.Object[] r0, $r2;
        java.lang.Object $r1;
        java.util.List $r3, $r4;

        r0 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.Object[]) $r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public static java.util.concurrent.ThreadFactory threadFactory(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        com.android.okhttp.internal.Util$1 $r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = new com.android.okhttp.internal.Util$1;

        specialinvoke $r1.<com.android.okhttp.internal.Util$1: void <init>(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    public static transient java.util.List headerEntries(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.ArrayList r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        com.android.okhttp.internal.spdy.Header $r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.util.ArrayList;

        $i1 = lengthof r0;

        $i2 = $i1 / 2;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        r1 = $r2;

        i0 = 0;

     label1:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label2;

        $r3 = new com.android.okhttp.internal.spdy.Header;

        $r5 = r0[i0];

        $i4 = i0 + 1;

        $r4 = r0[$i4];

        specialinvoke $r3.<com.android.okhttp.internal.spdy.Header: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i0 = i0 + 2;

        goto label1;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        byte[] $r0, $r3;
        java.lang.String[] $r1;
        java.io.ByteArrayInputStream $r2;
        java.nio.charset.Charset $r4, $r5;

        $r0 = newarray (byte)[0];

        <com.android.okhttp.internal.Util: byte[] EMPTY_BYTE_ARRAY> = $r0;

        $r1 = newarray (java.lang.String)[0];

        <com.android.okhttp.internal.Util: java.lang.String[] EMPTY_STRING_ARRAY> = $r1;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = <com.android.okhttp.internal.Util: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        <com.android.okhttp.internal.Util: java.io.InputStream EMPTY_INPUT_STREAM> = $r2;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <com.android.okhttp.internal.Util: java.nio.charset.Charset US_ASCII> = $r4;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <com.android.okhttp.internal.Util: java.nio.charset.Charset UTF_8> = $r5;

        return;
    }
}
