final class com.android.okhttp.internal.http.RetryableSink extends java.lang.Object implements com.android.okio.Sink
{
    private boolean closed;
    private final int limit;
    private final com.android.okio.OkBuffer content;

    public void <init>(int)
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        int i0;
        com.android.okio.OkBuffer $r1;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.okio.OkBuffer;

        specialinvoke $r1.<com.android.okio.OkBuffer: void <init>()>();

        r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content> = $r1;

        r0.<com.android.okhttp.internal.http.RetryableSink: int limit> = i0;

        return;
    }

    public void <init>()
    {
        com.android.okhttp.internal.http.RetryableSink r0;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        specialinvoke r0.<com.android.okhttp.internal.http.RetryableSink: void <init>(int)>(-1);

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        boolean $z0;
        com.android.okio.OkBuffer $r1, $r7;
        long $l0, $l2, $l5;
        int $i1, $i4;
        byte $b3;
        java.net.ProtocolException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        $z0 = r0.<com.android.okhttp.internal.http.RetryableSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.okhttp.internal.http.RetryableSink: boolean closed> = 1;

        $r1 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $l0 = virtualinvoke $r1.<com.android.okio.OkBuffer: long size()>();

        $i1 = r0.<com.android.okhttp.internal.http.RetryableSink: int limit>;

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label2;

        $r2 = new java.net.ProtocolException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content-length promised ");

        $i4 = r0.<com.android.okhttp.internal.http.RetryableSink: int limit>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, but received ");

        $r7 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $l5 = virtualinvoke $r7.<com.android.okio.OkBuffer: long size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.net.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        return;
    }

    public void write(com.android.okio.OkBuffer, long) throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        com.android.okio.OkBuffer r1, $r2, $r3;
        long l0, $l1, $l3, $l5, $l6;
        boolean $z0;
        int $i2, $i4, $i8;
        byte $b7;
        java.net.ProtocolException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        r1 := @parameter0: com.android.okio.OkBuffer;

        l0 := @parameter1: long;

        $z0 = r0.<com.android.okhttp.internal.http.RetryableSink: boolean closed>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r9;

     label1:
        $l1 = virtualinvoke r1.<com.android.okio.OkBuffer: long size()>();

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(long,long,long)>($l1, 0L, l0);

        $i2 = r0.<com.android.okhttp.internal.http.RetryableSink: int limit>;

        if $i2 == -1 goto label2;

        $r3 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $l3 = virtualinvoke $r3.<com.android.okio.OkBuffer: long size()>();

        $i4 = r0.<com.android.okhttp.internal.http.RetryableSink: int limit>;

        $l5 = (long) $i4;

        $l6 = $l5 - l0;

        $b7 = $l3 cmp $l6;

        if $b7 <= 0 goto label2;

        $r4 = new java.net.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exceeded content-length limit of ");

        $i8 = r0.<com.android.okhttp.internal.http.RetryableSink: int limit>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $r2 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        virtualinvoke $r2.<com.android.okio.OkBuffer: void write(com.android.okio.OkBuffer,long)>(r1, l0);

        return;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableSink r0;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        return;
    }

    public com.android.okio.Sink deadline(com.android.okio.Deadline)
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        com.android.okio.Deadline r1;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        r1 := @parameter0: com.android.okio.Deadline;

        return r0;
    }

    public long contentLength() throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        com.android.okio.OkBuffer $r1;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        $r1 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $l0 = virtualinvoke $r1.<com.android.okio.OkBuffer: long size()>();

        return $l0;
    }

    public void writeToSocket(com.android.okio.BufferedSink) throws java.io.IOException
    {
        com.android.okhttp.internal.http.RetryableSink r0;
        com.android.okio.BufferedSink r1;
        com.android.okio.OkBuffer $r2, $r3, $r4;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.RetryableSink;

        r1 := @parameter0: com.android.okio.BufferedSink;

        $r2 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $r3 = virtualinvoke $r2.<com.android.okio.OkBuffer: com.android.okio.OkBuffer clone()>();

        $r4 = r0.<com.android.okhttp.internal.http.RetryableSink: com.android.okio.OkBuffer content>;

        $l0 = virtualinvoke $r4.<com.android.okio.OkBuffer: long size()>();

        interfaceinvoke r1.<com.android.okio.BufferedSink: void write(com.android.okio.OkBuffer,long)>($r3, $l0);

        return;
    }
}
