public final class com.android.okhttp.MediaType extends java.lang.Object
{
    private static final java.lang.String TOKEN;
    private static final java.lang.String QUOTED;
    private static final java.util.regex.Pattern TYPE_SUBTYPE;
    private static final java.util.regex.Pattern PARAMETER;
    private final java.lang.String mediaType;
    private final java.lang.String type;
    private final java.lang.String subtype;
    private final java.lang.String charset;

    private void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.okhttp.MediaType r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: com.android.okhttp.MediaType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.MediaType: java.lang.String mediaType> = r1;

        r0.<com.android.okhttp.MediaType: java.lang.String type> = r2;

        r0.<com.android.okhttp.MediaType: java.lang.String subtype> = r3;

        r0.<com.android.okhttp.MediaType: java.lang.String charset> = r4;

        return;
    }

    public static com.android.okhttp.MediaType parse(java.lang.String)
    {
        java.lang.String r0, r2, r3, r4, r6, $r8, $r10, $r15, $r16, $r19;
        java.util.regex.Matcher r1, r5;
        int i0, $i1, $i2;
        java.util.regex.Pattern $r7, $r12;
        boolean $z0, $z1, $z2;
        java.util.Locale $r9, $r11;
        com.android.okhttp.MediaType $r13;
        java.lang.IllegalArgumentException $r17;
        java.lang.StringBuilder $r18, $r20, $r21;

        r0 := @parameter0: java.lang.String;

        $r7 = <com.android.okhttp.MediaType: java.util.regex.Pattern TYPE_SUBTYPE>;

        r1 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r8 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r9 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $r10 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r11 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        r4 = null;

        $r12 = <com.android.okhttp.MediaType: java.util.regex.Pattern PARAMETER>;

        r5 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        i0 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i1 goto label9;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i0, $i2);

        $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 != 0 goto label3;

        return null;

     label3:
        r6 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if r6 == null goto label8;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("charset");

        if $z2 != 0 goto label4;

        goto label8;

     label4:
        if r4 == null goto label5;

        $r17 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple charsets: ");

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label5:
        $r16 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r16 == null goto label6;

        $r15 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        goto label7;

     label6:
        $r15 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(3);

     label7:
        r4 = $r15;

     label8:
        i0 = virtualinvoke r5.<java.util.regex.Matcher: int end()>();

        goto label2;

     label9:
        $r13 = new com.android.okhttp.MediaType;

        specialinvoke $r13.<com.android.okhttp.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r2, r3, r4);

        return $r13;
    }

    public java.lang.String type()
    {
        com.android.okhttp.MediaType r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.MediaType;

        $r1 = r0.<com.android.okhttp.MediaType: java.lang.String type>;

        return $r1;
    }

    public java.lang.String subtype()
    {
        com.android.okhttp.MediaType r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.MediaType;

        $r1 = r0.<com.android.okhttp.MediaType: java.lang.String subtype>;

        return $r1;
    }

    public java.nio.charset.Charset charset()
    {
        com.android.okhttp.MediaType r0;
        java.lang.String $r1, $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: com.android.okhttp.MediaType;

        $r1 = r0.<com.android.okhttp.MediaType: java.lang.String charset>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.okhttp.MediaType: java.lang.String charset>;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.nio.charset.Charset charset(java.nio.charset.Charset)
    {
        com.android.okhttp.MediaType r0;
        java.nio.charset.Charset r1, $r4;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.okhttp.MediaType;

        r1 := @parameter0: java.nio.charset.Charset;

        $r2 = r0.<com.android.okhttp.MediaType: java.lang.String charset>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.okhttp.MediaType: java.lang.String charset>;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r3);

        goto label2;

     label1:
        $r4 = r1;

     label2:
        return $r4;
    }

    public java.lang.String toString()
    {
        com.android.okhttp.MediaType r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.MediaType;

        $r1 = r0.<com.android.okhttp.MediaType: java.lang.String mediaType>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.okhttp.MediaType r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.okhttp.MediaType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof com.android.okhttp.MediaType;

        if $z0 == 0 goto label1;

        $r2 = (com.android.okhttp.MediaType) r1;

        $r4 = $r2.<com.android.okhttp.MediaType: java.lang.String mediaType>;

        $r3 = r0.<com.android.okhttp.MediaType: java.lang.String mediaType>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        com.android.okhttp.MediaType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.android.okhttp.MediaType;

        $r1 = r0.<com.android.okhttp.MediaType: java.lang.String mediaType>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        <com.android.okhttp.MediaType: java.lang.String QUOTED> = "\"([^\"]*)\"";

        <com.android.okhttp.MediaType: java.lang.String TOKEN> = "([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)/([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)");

        <com.android.okhttp.MediaType: java.util.regex.Pattern TYPE_SUBTYPE> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(";\\s*([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)=(?:([a-zA-Z0-9-!#$%&\'*+.^_`{|}~]+)|\"([^\"]*)\")");

        <com.android.okhttp.MediaType: java.util.regex.Pattern PARAMETER> = $r1;

        return;
    }
}
