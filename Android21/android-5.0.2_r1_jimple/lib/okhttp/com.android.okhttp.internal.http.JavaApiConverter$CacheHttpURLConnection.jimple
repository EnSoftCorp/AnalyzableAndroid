final class com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection extends java.net.HttpURLConnection
{
    private final com.android.okhttp.Request request;
    private final com.android.okhttp.Response response;

    public void <init>(com.android.okhttp.Response)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Response r1;
        com.android.okhttp.Request $r2, $r4, $r6;
        java.net.URL $r3;
        com.android.okhttp.Response$Body $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: com.android.okhttp.Response;

        $r2 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $r3 = virtualinvoke $r2.<com.android.okhttp.Request: java.net.URL url()>();

        specialinvoke r0.<java.net.HttpURLConnection: void <init>(java.net.URL)>($r3);

        $r4 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Request request> = $r4;

        r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response> = r1;

        r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: boolean connected> = 1;

        $r5 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Response$Body body()>();

        if $r5 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: boolean doOutput> = $z0;

        $r6 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Request request>;

        $r7 = virtualinvoke $r6.<com.android.okhttp.Request: java.lang.String method()>();

        r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: java.lang.String method> = $r7;

        return;
    }

    public void connect() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void disconnect()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void setRequestProperty(java.lang.String, java.lang.String)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.String r1, r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r3;
    }

    public void addRequestProperty(java.lang.String, java.lang.String)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.String r1, r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r3;
    }

    public java.lang.String getRequestProperty(java.lang.String)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.String r1, $r3;
        com.android.okhttp.Request $r2;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Request request>;

        $r3 = virtualinvoke $r2.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Map getRequestProperties()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$100()>();

        throw $r1;
    }

    public void setFixedLengthStreamingMode(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void setFixedLengthStreamingMode(long)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        l0 := @parameter0: long;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void setChunkedStreamingMode(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void setInstanceFollowRedirects(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public boolean getInstanceFollowRedirects()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $z0 = specialinvoke r0.<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>();

        return $z0;
    }

    public void setRequestMethod(java.lang.String) throws java.net.ProtocolException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.String r1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r2;
    }

    public java.lang.String getRequestMethod()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Request $r1;
        java.lang.String $r2;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Request request>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Request: java.lang.String method()>();

        return $r2;
    }

    public java.lang.String getHeaderFieldKey(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0, $i1;
        com.android.okhttp.Response $r1;
        com.android.okhttp.Headers $r2;
        java.lang.String $r3, $r8;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid header index: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        if i0 != 0 goto label2;

        return null;

     label2:
        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        $i1 = i0 - 1;

        $r3 = virtualinvoke $r2.<com.android.okhttp.Headers: java.lang.String name(int)>($i1);

        return $r3;
    }

    public java.lang.String getHeaderField(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0, $i1;
        com.android.okhttp.Response $r1, $r4;
        com.android.okhttp.Headers $r2;
        java.lang.String $r3, $r5, $r10;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid header index: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        if i0 != 0 goto label2;

        $r4 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r5 = virtualinvoke $r4.<com.android.okhttp.Response: java.lang.String statusLine()>();

        return $r5;

     label2:
        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        $i1 = i0 - 1;

        $r3 = virtualinvoke $r2.<com.android.okhttp.Headers: java.lang.String value(int)>($i1);

        return $r3;
    }

    public java.lang.String getHeaderField(java.lang.String)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.String r1, $r4;
        com.android.okhttp.Response $r2, $r5;
        com.android.okhttp.Headers $r3;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r4 = virtualinvoke $r5.<com.android.okhttp.Response: java.lang.String statusLine()>();

        goto label2;

     label1:
        $r2 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r3 = virtualinvoke $r2.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        $r4 = virtualinvoke $r3.<com.android.okhttp.Headers: java.lang.String get(java.lang.String)>(r1);

     label2:
        return $r4;
    }

    public java.util.Map getHeaderFields()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Response $r1, $r3;
        com.android.okhttp.Headers $r2;
        java.lang.String $r4;
        java.util.Map $r5;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        $r3 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r4 = virtualinvoke $r3.<com.android.okhttp.Response: java.lang.String statusLine()>();

        $r5 = staticinvoke <com.android.okhttp.internal.http.OkHeaders: java.util.Map toMultimap(com.android.okhttp.Headers,java.lang.String)>($r2, $r4);

        return $r5;
    }

    public int getResponseCode() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Response $r1;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.Response: int code()>();

        return $i0;
    }

    public java.lang.String getResponseMessage() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Response $r1;
        java.lang.String $r2;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Response: java.lang.String statusMessage()>();

        return $r2;
    }

    public java.io.InputStream getErrorStream()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return null;
    }

    public boolean usingProxy()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 0;
    }

    public void setConnectTimeout(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public int getConnectTimeout()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 0;
    }

    public void setReadTimeout(int)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        int i0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public int getReadTimeout()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 0;
    }

    public java.lang.Object getContent() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$200()>();

        throw $r1;
    }

    public java.lang.Object getContent(java.lang.Class[]) throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.Class[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        r1 := @parameter0: java.lang.Class[];

        $r2 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$200()>();

        throw $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$200()>();

        throw $r1;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public void setDoInput(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public boolean getDoInput()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 1;
    }

    public void setDoOutput(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public boolean getDoOutput()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Request $r1;
        com.android.okhttp.Request$Body $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Request request>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Request: com.android.okhttp.Request$Body body()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setAllowUserInteraction(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public boolean getAllowUserInteraction()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 0;
    }

    public void setUseCaches(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public boolean getUseCaches()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $z0 = specialinvoke r0.<java.net.HttpURLConnection: boolean getUseCaches()>();

        return $z0;
    }

    public void setIfModifiedSince(long)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        long l0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        l0 := @parameter0: long;

        $r1 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException access$000()>();

        throw $r1;
    }

    public long getIfModifiedSince()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        return 0L;
    }

    public boolean getDefaultUseCaches()
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $z0 = specialinvoke r0.<java.net.HttpURLConnection: boolean getDefaultUseCaches()>();

        return $z0;
    }

    public void setDefaultUseCaches(boolean)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.HttpURLConnection: void setDefaultUseCaches(boolean)>(z0);

        return;
    }

    static com.android.okhttp.Response access$300(com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection)
    {
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection r0;
        com.android.okhttp.Response $r1;

        r0 := @parameter0: com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        $r1 = r0.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: com.android.okhttp.Response response>;

        return $r1;
    }
}
