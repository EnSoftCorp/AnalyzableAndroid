public final class com.android.okhttp.Dispatcher extends java.lang.Object
{
    private int maxRequests;
    private int maxRequestsPerHost;
    private java.util.concurrent.ExecutorService executorService;
    private final java.util.Deque readyJobs;
    private final java.util.Deque runningJobs;

    public void <init>(java.util.concurrent.ExecutorService)
    {
        com.android.okhttp.Dispatcher r0;
        java.util.concurrent.ExecutorService r1;
        java.util.ArrayDeque $r2, $r3;

        r0 := @this: com.android.okhttp.Dispatcher;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: int maxRequests> = 64;

        r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost> = 5;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs> = $r2;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs> = $r3;

        r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService executorService> = r1;

        return;
    }

    public void <init>()
    {
        com.android.okhttp.Dispatcher r0;
        java.util.ArrayDeque $r1, $r2;

        r0 := @this: com.android.okhttp.Dispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: int maxRequests> = 64;

        r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost> = 5;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs> = $r1;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs> = $r2;

        return;
    }

    public synchronized java.util.concurrent.ExecutorService getExecutorService()
    {
        com.android.okhttp.Dispatcher r0;
        java.util.concurrent.ExecutorService $r1, $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.concurrent.TimeUnit $r5;
        java.util.concurrent.ThreadFactory $r6;

        r0 := @this: com.android.okhttp.Dispatcher;

        $r1 = r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService executorService>;

        if $r1 != null goto label1;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r6 = staticinvoke <com.android.okhttp.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0);

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 2147483647, 60L, $r5, $r4, $r6);

        r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService executorService> = $r3;

     label1:
        $r2 = r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService executorService>;

        return $r2;
    }

    public synchronized void setMaxRequests(int)
    {
        com.android.okhttp.Dispatcher r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.okhttp.Dispatcher;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max < 1: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<com.android.okhttp.Dispatcher: int maxRequests> = i0;

        specialinvoke r0.<com.android.okhttp.Dispatcher: void promoteJobs()>();

        return;
    }

    public synchronized int getMaxRequests()
    {
        com.android.okhttp.Dispatcher r0;
        int $i0;

        r0 := @this: com.android.okhttp.Dispatcher;

        $i0 = r0.<com.android.okhttp.Dispatcher: int maxRequests>;

        return $i0;
    }

    public synchronized void setMaxRequestsPerHost(int)
    {
        com.android.okhttp.Dispatcher r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.okhttp.Dispatcher;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max < 1: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost> = i0;

        specialinvoke r0.<com.android.okhttp.Dispatcher: void promoteJobs()>();

        return;
    }

    public synchronized int getMaxRequestsPerHost()
    {
        com.android.okhttp.Dispatcher r0;
        int $i0;

        r0 := @this: com.android.okhttp.Dispatcher;

        $i0 = r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost>;

        return $i0;
    }

    synchronized void enqueue(com.android.okhttp.OkHttpClient, com.android.okhttp.Request, com.android.okhttp.Response$Receiver)
    {
        com.android.okhttp.Dispatcher r0;
        com.android.okhttp.OkHttpClient r1, r10;
        com.android.okhttp.Request r2;
        com.android.okhttp.Response$Receiver r3;
        com.android.okhttp.Job r4, $r5;
        java.util.Deque $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.ExecutorService $r9;

        r0 := @this: com.android.okhttp.Dispatcher;

        r1 := @parameter0: com.android.okhttp.OkHttpClient;

        r2 := @parameter1: com.android.okhttp.Request;

        r3 := @parameter2: com.android.okhttp.Response$Receiver;

        r10 = virtualinvoke r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient copyWithDefaults()>();

        $r5 = new com.android.okhttp.Job;

        specialinvoke $r5.<com.android.okhttp.Job: void <init>(com.android.okhttp.Dispatcher,com.android.okhttp.OkHttpClient,com.android.okhttp.Request,com.android.okhttp.Response$Receiver)>(r0, r10, r2, r3);

        r4 = $r5;

        $r6 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        $i0 = interfaceinvoke $r6.<java.util.Deque: int size()>();

        $i1 = r0.<com.android.okhttp.Dispatcher: int maxRequests>;

        if $i0 >= $i1 goto label1;

        $i2 = specialinvoke r0.<com.android.okhttp.Dispatcher: int runningJobsForHost(com.android.okhttp.Job)>(r4);

        $i3 = r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost>;

        if $i2 >= $i3 goto label1;

        $r8 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        interfaceinvoke $r8.<java.util.Deque: boolean add(java.lang.Object)>(r4);

        $r9 = virtualinvoke r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService getExecutorService()>();

        interfaceinvoke $r9.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r4);

        goto label2;

     label1:
        $r7 = r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs>;

        interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>(r4);

     label2:
        return;
    }

    public synchronized void cancel(java.lang.Object)
    {
        com.android.okhttp.Dispatcher r0;
        java.lang.Object r1, $r6, $r7, $r8, $r10;
        java.util.Iterator r2, r11;
        com.android.okhttp.Job r3, $r9;
        java.util.Deque $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.okhttp.Dispatcher;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs>;

        r2 = interfaceinvoke $r4.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.android.okhttp.Job) $r8;

        $r10 = virtualinvoke $r9.<com.android.okhttp.Job: java.lang.Object tag()>();

        $z3 = staticinvoke <com.android.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z3 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r5 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        r11 = interfaceinvoke $r5.<java.util.Deque: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.okhttp.Job) $r6;

        $r7 = virtualinvoke r3.<com.android.okhttp.Job: java.lang.Object tag()>();

        $z2 = staticinvoke <com.android.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z2 == 0 goto label4;

        r3.<com.android.okhttp.Job: boolean canceled> = 1;

     label4:
        goto label3;

     label5:
        return;
    }

    synchronized void finished(com.android.okhttp.Job)
    {
        com.android.okhttp.Dispatcher r0;
        com.android.okhttp.Job r1;
        java.util.Deque $r2;
        boolean $z0;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.okhttp.Dispatcher;

        r1 := @parameter0: com.android.okhttp.Job;

        $r2 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        $z0 = interfaceinvoke $r2.<java.util.Deque: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Job wasn\'t running!");

        throw $r3;

     label1:
        specialinvoke r0.<com.android.okhttp.Dispatcher: void promoteJobs()>();

        return;
    }

    private void promoteJobs()
    {
        com.android.okhttp.Dispatcher r0;
        java.util.Iterator r1;
        com.android.okhttp.Job r2;
        java.util.Deque $r3, $r4, $r5, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.util.concurrent.ExecutorService $r9;

        r0 := @this: com.android.okhttp.Dispatcher;

        $r3 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        $i0 = interfaceinvoke $r3.<java.util.Deque: int size()>();

        $i1 = r0.<com.android.okhttp.Dispatcher: int maxRequests>;

        if $i0 < $i1 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs>;

        $z0 = interfaceinvoke $r4.<java.util.Deque: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.okhttp.Dispatcher: java.util.Deque readyJobs>;

        r1 = interfaceinvoke $r5.<java.util.Deque: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.okhttp.Job) $r6;

        $i2 = specialinvoke r0.<com.android.okhttp.Dispatcher: int runningJobsForHost(com.android.okhttp.Job)>(r2);

        $i3 = r0.<com.android.okhttp.Dispatcher: int maxRequestsPerHost>;

        if $i2 >= $i3 goto label4;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        $r8 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        interfaceinvoke $r8.<java.util.Deque: boolean add(java.lang.Object)>(r2);

        $r9 = virtualinvoke r0.<com.android.okhttp.Dispatcher: java.util.concurrent.ExecutorService getExecutorService()>();

        interfaceinvoke $r9.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r2);

     label4:
        $r7 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        $i4 = interfaceinvoke $r7.<java.util.Deque: int size()>();

        $i5 = r0.<com.android.okhttp.Dispatcher: int maxRequests>;

        if $i4 < $i5 goto label5;

        return;

     label5:
        goto label3;

     label6:
        return;
    }

    private int runningJobsForHost(com.android.okhttp.Job)
    {
        com.android.okhttp.Dispatcher r0;
        com.android.okhttp.Job r1, r3;
        int i0;
        java.util.Iterator r2;
        java.util.Deque $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.okhttp.Dispatcher;

        r1 := @parameter0: com.android.okhttp.Job;

        i0 = 0;

        $r4 = r0.<com.android.okhttp.Dispatcher: java.util.Deque runningJobs>;

        r2 = interfaceinvoke $r4.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.okhttp.Job) $r5;

        $r6 = virtualinvoke r3.<com.android.okhttp.Job: java.lang.String host()>();

        $r7 = virtualinvoke r1.<com.android.okhttp.Job: java.lang.String host()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        return i0;
    }
}
