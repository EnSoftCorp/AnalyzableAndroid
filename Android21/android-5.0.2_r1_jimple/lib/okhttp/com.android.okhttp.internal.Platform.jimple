public final class com.android.okhttp.internal.Platform extends java.lang.Object
{
    private static final com.android.okhttp.internal.Platform PLATFORM;

    public void <init>()
    {
        com.android.okhttp.internal.Platform r0;

        r0 := @this: com.android.okhttp.internal.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.okhttp.internal.Platform get()
    {
        com.android.okhttp.internal.Platform $r0;

        $r0 = <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform PLATFORM>;

        return $r0;
    }

    public void logW(java.lang.String)
    {
        com.android.okhttp.internal.Platform r0;
        java.lang.String r1;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void logW(java.lang.String)>(r1);

        return;
    }

    public void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        dalvik.system.SocketTagger $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r2.<dalvik.system.SocketTagger: void tag(java.net.Socket)>(r1);

        return;
    }

    public void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        dalvik.system.SocketTagger $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r2.<dalvik.system.SocketTagger: void untag(java.net.Socket)>(r1);

        return;
    }

    public java.net.URI toUriLenient(java.net.URL) throws java.net.URISyntaxException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.URL r1;
        java.net.URI $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URI toURILenient()>();

        return $r2;
    }

    public void enableTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.lang.String;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setUseSessionTickets(boolean)>(1);

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHostname(java.lang.String)>(r2);

     label1:
        return;
    }

    public void supportTlsIntolerantServer(javax.net.ssl.SSLSocket)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        boolean z0, $z1;
        java.lang.String[] r3, $r5, r7, r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r4, $r6;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        z0 = 0;

        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $i1 = lengthof r3;

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        r4 = r3[i0];

        $r6 = "TLS_FALLBACK_SCSV";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        r7 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $i2 = lengthof r7;

        $i3 = $i2 + 1;

        r8 = newarray (java.lang.String)[$i3];

        $i4 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r8, 0, $i4);

        $i5 = lengthof r8;

        $i6 = $i5 - 1;

        r8[$i6] = "TLS_FALLBACK_SCSV";

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>(r8);

     label4:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "SSLv3";

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r5);

        return;
    }

    public com.android.okio.ByteString getNpnSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        com.android.org.conscrypt.OpenSSLSocketImpl r2;
        byte[] r3, r4;
        boolean $z0;
        com.android.okio.ByteString $r5, $r6;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        r3 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getAlpnSelectedProtocol()>();

        if r3 == null goto label2;

        $r6 = staticinvoke <com.android.okio.ByteString: com.android.okio.ByteString of(byte[])>(r3);

        return $r6;

     label2:
        r4 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()>();

        if r4 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r5 = staticinvoke <com.android.okio.ByteString: com.android.okio.ByteString of(byte[])>(r4);

     label4:
        return $r5;
    }

    public void setNpnProtocols(javax.net.ssl.SSLSocket, java.util.List)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        java.util.List r2;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        byte[] r4;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.util.List;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        r4 = staticinvoke <com.android.okhttp.internal.Platform: byte[] concatLengthPrefixed(java.util.List)>(r2);

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>(r4);

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>(r4);

     label1:
        return;
    }

    public java.io.OutputStream newDeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean)
    {
        com.android.okhttp.internal.Platform r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;
        boolean z0;
        java.util.zip.DeflaterOutputStream $r3;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        z0 := @parameter2: boolean;

        $r3 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r3.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,boolean)>(r1, r2, z0);

        return $r3;
    }

    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        java.net.InetSocketAddress r2;
        int i0;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.net.InetSocketAddress;

        i0 := @parameter2: int;

        virtualinvoke r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r2, i0);

        return;
    }

    public java.lang.String getPrefix()
    {
        com.android.okhttp.internal.Platform r0;

        r0 := @this: com.android.okhttp.internal.Platform;

        return "X-Android";
    }

    static byte[] concatLengthPrefixed(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i3, $i4, i5, i6;
        java.util.Iterator r1, r3;
        com.android.okhttp.Protocol r2, r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r10;
        com.android.okio.ByteString $r6, $r8, $r9;
        byte $b2;
        byte[] $r7, r11;

        r0 := @parameter0: java.util.List;

        i0 = 0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.okhttp.Protocol) $r10;

        $r9 = r2.<com.android.okhttp.Protocol: com.android.okio.ByteString name>;

        $i4 = virtualinvoke $r9.<com.android.okio.ByteString: int size()>();

        $i3 = $i4 + 1;

        i0 = i0 + $i3;

        goto label1;

     label2:
        r11 = newarray (byte)[i0];

        i5 = 0;

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.okhttp.Protocol) $r5;

        $r6 = r4.<com.android.okhttp.Protocol: com.android.okio.ByteString name>;

        i1 = virtualinvoke $r6.<com.android.okio.ByteString: int size()>();

        i6 = i5 + 1;

        $b2 = (byte) i1;

        r11[i5] = $b2;

        $r8 = r4.<com.android.okhttp.Protocol: com.android.okio.ByteString name>;

        $r7 = virtualinvoke $r8.<com.android.okio.ByteString: byte[] toByteArray()>();

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r7, 0, r11, i6, i1);

        i5 = i6 + i1;

        goto label3;

     label4:
        return r11;
    }

    static void <clinit>()
    {
        com.android.okhttp.internal.Platform $r0;

        $r0 = new com.android.okhttp.internal.Platform;

        specialinvoke $r0.<com.android.okhttp.internal.Platform: void <init>()>();

        <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform PLATFORM> = $r0;

        return;
    }
}
