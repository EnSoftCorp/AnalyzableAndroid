public final class com.android.okhttp.HttpResponseCache extends java.net.ResponseCache implements com.android.okhttp.OkResponseCache
{
    private static final int VERSION;
    private static final int ENTRY_METADATA;
    private static final int ENTRY_BODY;
    private static final int ENTRY_COUNT;
    private final com.android.okhttp.internal.DiskLruCache cache;
    private int writeSuccessCount;
    private int writeAbortCount;
    private int networkCount;
    private int hitCount;
    private int requestCount;

    public void <init>(java.io.File, long) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.io.File r1;
        long l0;
        com.android.okhttp.internal.DiskLruCache $r2;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        specialinvoke r0.<java.net.ResponseCache: void <init>()>();

        $r2 = staticinvoke <com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache open(java.io.File,int,int,long)>(r1, 201105, 2, l0);

        r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache> = $r2;

        return;
    }

    public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URI r1;
        java.lang.String r2;
        java.util.Map r3;
        com.android.okhttp.Request r4;
        com.android.okhttp.Response r5;
        java.net.CacheResponse $r6;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r4 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Request createOkRequest(java.net.URI,java.lang.String,java.util.Map)>(r1, r2, r3);

        r5 = virtualinvoke r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.Response get(com.android.okhttp.Request)>(r4);

        if r5 != null goto label1;

        return null;

     label1:
        $r6 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.net.CacheResponse createJavaCacheResponse(com.android.okhttp.Response)>(r5);

        return $r6;
    }

    private static java.lang.String urlToKey(com.android.okhttp.Request)
    {
        com.android.okhttp.Request r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: com.android.okhttp.Request;

        $r1 = virtualinvoke r0.<com.android.okhttp.Request: java.lang.String urlString()>();

        $r2 = staticinvoke <com.android.okhttp.internal.Util: java.lang.String hash(java.lang.String)>($r1);

        return $r2;
    }

    public com.android.okhttp.Response get(com.android.okhttp.Request)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.Request r1;
        java.lang.String r2;
        com.android.okhttp.internal.DiskLruCache$Snapshot r3;
        com.android.okhttp.HttpResponseCache$Entry r4, $r7;
        com.android.okhttp.internal.DiskLruCache $r6;
        java.io.InputStream $r8;
        boolean $z0;
        com.android.okhttp.Response$Body $r9;
        java.io.IOException $r10;
        com.android.okhttp.Response r11;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 = staticinvoke <com.android.okhttp.HttpResponseCache: java.lang.String urlToKey(com.android.okhttp.Request)>(r1);

     label1:
        $r6 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        r3 = virtualinvoke $r6.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Snapshot get(java.lang.String)>(r2);

        if r3 != null goto label3;

     label2:
        return null;

     label3:
        $r7 = new com.android.okhttp.HttpResponseCache$Entry;

        $r8 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Snapshot: java.io.InputStream getInputStream(int)>(0);

        specialinvoke $r7.<com.android.okhttp.HttpResponseCache$Entry: void <init>(java.io.InputStream)>($r8);

        r4 = $r7;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        return null;

     label6:
        r11 = virtualinvoke r4.<com.android.okhttp.HttpResponseCache$Entry: com.android.okhttp.Response response(com.android.okhttp.Request,com.android.okhttp.internal.DiskLruCache$Snapshot)>(r1, r3);

        $z0 = virtualinvoke r4.<com.android.okhttp.HttpResponseCache$Entry: boolean matches(com.android.okhttp.Request,com.android.okhttp.Response)>(r1, r11);

        if $z0 != 0 goto label7;

        $r9 = virtualinvoke r11.<com.android.okhttp.Response: com.android.okhttp.Response$Body body()>();

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

        return null;

     label7:
        return r11;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.net.CacheRequest put(java.net.URI, java.net.URLConnection) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        java.net.URI r1;
        java.net.URLConnection r2;
        boolean $z0;
        com.android.okhttp.Response $r3;
        java.net.CacheRequest $r4;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.net.URLConnection;

        $z0 = staticinvoke <com.android.okhttp.HttpResponseCache: boolean isCacheableConnection(java.net.URLConnection)>(r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Response createOkResponse(java.net.URI,java.net.URLConnection)>(r1, r2);

        $r4 = virtualinvoke r0.<com.android.okhttp.HttpResponseCache: java.net.CacheRequest put(com.android.okhttp.Response)>($r3);

        return $r4;
    }

    private static boolean isCacheableConnection(java.net.URLConnection)
    {
        java.net.URLConnection r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.net.URLConnection;

        $z0 = r0 instanceof com.android.okhttp.internal.http.HttpURLConnectionImpl;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.net.CacheRequest put(com.android.okhttp.Response) throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.Response r1;
        java.lang.String r2, $r11;
        com.android.okhttp.HttpResponseCache$Entry r3, $r8;
        com.android.okhttp.internal.DiskLruCache$Editor r4;
        com.android.okhttp.Request $r6, $r7, $r10;
        boolean $z0, $z1, $z2;
        com.android.okhttp.internal.DiskLruCache $r9;
        com.android.okhttp.HttpResponseCache$CacheRequestImpl $r12;
        java.io.IOException $r13;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.Response;

        $r6 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        r2 = virtualinvoke $r6.<com.android.okhttp.Request: java.lang.String method()>();

        $r7 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $z0 = virtualinvoke r0.<com.android.okhttp.HttpResponseCache: boolean maybeRemove(com.android.okhttp.Request)>($r7);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("GET");

        if $z1 != 0 goto label2;

        return null;

     label2:
        $z2 = virtualinvoke r1.<com.android.okhttp.Response: boolean hasVaryAll()>();

        if $z2 == 0 goto label3;

        return null;

     label3:
        $r8 = new com.android.okhttp.HttpResponseCache$Entry;

        specialinvoke $r8.<com.android.okhttp.HttpResponseCache$Entry: void <init>(com.android.okhttp.Response)>(r1);

        r3 = $r8;

        r4 = null;

     label4:
        $r9 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r10 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $r11 = staticinvoke <com.android.okhttp.HttpResponseCache: java.lang.String urlToKey(com.android.okhttp.Request)>($r10);

        r4 = virtualinvoke $r9.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String)>($r11);

        if r4 != null goto label6;

     label5:
        return null;

     label6:
        virtualinvoke r3.<com.android.okhttp.HttpResponseCache$Entry: void writeTo(com.android.okhttp.internal.DiskLruCache$Editor)>(r4);

        $r12 = new com.android.okhttp.HttpResponseCache$CacheRequestImpl;

        specialinvoke $r12.<com.android.okhttp.HttpResponseCache$CacheRequestImpl: void <init>(com.android.okhttp.HttpResponseCache,com.android.okhttp.internal.DiskLruCache$Editor)>(r0, r4);

     label7:
        return $r12;

     label8:
        $r13 := @caughtexception;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)>(r4);

        return null;

        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public boolean maybeRemove(com.android.okhttp.Request)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.Request r1;
        java.lang.String $r3, $r5;
        boolean $z0;
        com.android.okhttp.internal.DiskLruCache $r4;
        java.io.IOException $r6;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.Request;

        $r3 = virtualinvoke r1.<com.android.okhttp.Request: java.lang.String method()>();

        $z0 = staticinvoke <com.android.okhttp.internal.http.HttpMethod: boolean invalidatesCache(java.lang.String)>($r3);

        if $z0 == 0 goto label5;

     label1:
        $r4 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r5 = staticinvoke <com.android.okhttp.HttpResponseCache: java.lang.String urlToKey(com.android.okhttp.Request)>(r1);

        virtualinvoke $r4.<com.android.okhttp.internal.DiskLruCache: boolean remove(java.lang.String)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return 1;

     label5:
        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void update(com.android.okhttp.Response, com.android.okhttp.Response)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.Response r1, r2;
        com.android.okhttp.HttpResponseCache$Entry r3, $r7;
        com.android.okhttp.internal.DiskLruCache$Snapshot r4;
        com.android.okhttp.internal.DiskLruCache$Editor r5;
        com.android.okhttp.Response$Body $r8;
        com.android.okhttp.HttpResponseCache$CacheResponseBody $r9;
        java.io.IOException $r10;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.Response;

        r2 := @parameter1: com.android.okhttp.Response;

        $r7 = new com.android.okhttp.HttpResponseCache$Entry;

        specialinvoke $r7.<com.android.okhttp.HttpResponseCache$Entry: void <init>(com.android.okhttp.Response)>(r2);

        r3 = $r7;

        $r8 = virtualinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Response$Body body()>();

        $r9 = (com.android.okhttp.HttpResponseCache$CacheResponseBody) $r8;

        r4 = staticinvoke <com.android.okhttp.HttpResponseCache$CacheResponseBody: com.android.okhttp.internal.DiskLruCache$Snapshot access$000(com.android.okhttp.HttpResponseCache$CacheResponseBody)>($r9);

        r5 = null;

     label1:
        r5 = virtualinvoke r4.<com.android.okhttp.internal.DiskLruCache$Snapshot: com.android.okhttp.internal.DiskLruCache$Editor edit()>();

        if r5 == null goto label2;

        virtualinvoke r3.<com.android.okhttp.HttpResponseCache$Entry: void writeTo(com.android.okhttp.internal.DiskLruCache$Editor)>(r5);

        virtualinvoke r5.<com.android.okhttp.internal.DiskLruCache$Editor: void commit()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        specialinvoke r0.<com.android.okhttp.HttpResponseCache: void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)>(r5);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void abortQuietly(com.android.okhttp.internal.DiskLruCache$Editor)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1;
        java.io.IOException $r3;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.internal.DiskLruCache$Editor;

     label1:
        if r1 == null goto label2;

        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void delete() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void delete()>();

        return;
    }

    public synchronized int getWriteAbortCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount>;

        return $i0;
    }

    public synchronized int getWriteSuccessCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount>;

        return $i0;
    }

    public long getSize()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        long $l0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: long size()>();

        return $l0;
    }

    public long getMaxSize()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        long $l0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $l0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: long getMaxSize()>();

        return $l0;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: void close()>();

        return;
    }

    public java.io.File getDirectory()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        java.io.File $r2;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: java.io.File getDirectory()>();

        return $r2;
    }

    public boolean isClosed()
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.internal.DiskLruCache $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $r1 = r0.<com.android.okhttp.HttpResponseCache: com.android.okhttp.internal.DiskLruCache cache>;

        $z0 = virtualinvoke $r1.<com.android.okhttp.internal.DiskLruCache: boolean isClosed()>();

        return $z0;
    }

    public synchronized void trackResponse(com.android.okhttp.ResponseSource)
    {
        com.android.okhttp.HttpResponseCache r0;
        com.android.okhttp.ResponseSource r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r2;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.ResponseSource;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int requestCount>;

        $i1 = $i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int requestCount> = $i1;

        $r2 = <com.android.okhttp.HttpResponseCache$1: int[] $SwitchMap$com$squareup$okhttp$ResponseSource>;

        $i2 = virtualinvoke r1.<com.android.okhttp.ResponseSource: int ordinal()>();

        $i3 = $r2[$i2];

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        $i4 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

        $i5 = $i4 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int hitCount> = $i5;

        goto label3;

     label2:
        $i6 = r0.<com.android.okhttp.HttpResponseCache: int networkCount>;

        $i7 = $i6 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int networkCount> = $i7;

     label3:
        return;
    }

    public synchronized void trackConditionalCacheHit()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0, $i1;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

        $i1 = $i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int hitCount> = $i1;

        return;
    }

    public synchronized int getNetworkCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int networkCount>;

        return $i0;
    }

    public synchronized int getHitCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int hitCount>;

        return $i0;
    }

    public synchronized int getRequestCount()
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0;

        r0 := @this: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int requestCount>;

        return $i0;
    }

    private static int readInt(com.android.okio.BufferedSource) throws java.io.IOException
    {
        com.android.okio.BufferedSource r0;
        java.lang.String r1, $r9;
        int $i0;
        java.lang.NumberFormatException $r3;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @parameter0: com.android.okio.BufferedSource;

        r1 = interfaceinvoke r0.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected an integer but was \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    static int access$208(com.android.okhttp.HttpResponseCache)
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0, $i1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount>;

        $i1 = $i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int writeSuccessCount> = $i1;

        return $i0;
    }

    static int access$308(com.android.okhttp.HttpResponseCache)
    {
        com.android.okhttp.HttpResponseCache r0;
        int $i0, $i1;

        r0 := @parameter0: com.android.okhttp.HttpResponseCache;

        $i0 = r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount>;

        $i1 = $i0 + 1;

        r0.<com.android.okhttp.HttpResponseCache: int writeAbortCount> = $i1;

        return $i0;
    }

    static int access$400(com.android.okio.BufferedSource) throws java.io.IOException
    {
        com.android.okio.BufferedSource r0;
        int $i0;

        r0 := @parameter0: com.android.okio.BufferedSource;

        $i0 = staticinvoke <com.android.okhttp.HttpResponseCache: int readInt(com.android.okio.BufferedSource)>(r0);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.okhttp.HttpResponseCache: int ENTRY_COUNT> = 2;

        <com.android.okhttp.HttpResponseCache: int ENTRY_BODY> = 1;

        <com.android.okhttp.HttpResponseCache: int ENTRY_METADATA> = 0;

        <com.android.okhttp.HttpResponseCache: int VERSION> = 201105;

        return;
    }
}
