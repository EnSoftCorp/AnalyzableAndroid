public final class com.android.okhttp.internal.http.CacheStrategy extends java.lang.Object
{
    private static final com.android.okhttp.Response$Body EMPTY_BODY;
    private static final com.android.okhttp.internal.http.StatusLine GATEWAY_TIMEOUT_STATUS_LINE;
    public final com.android.okhttp.Request networkRequest;
    public final com.android.okhttp.Response cacheResponse;
    public final com.android.okhttp.ResponseSource source;

    private void <init>(com.android.okhttp.Request, com.android.okhttp.Response, com.android.okhttp.ResponseSource)
    {
        com.android.okhttp.internal.http.CacheStrategy r0;
        com.android.okhttp.Request r1;
        com.android.okhttp.Response r2;
        com.android.okhttp.ResponseSource r3;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 := @parameter1: com.android.okhttp.Response;

        r3 := @parameter2: com.android.okhttp.ResponseSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Request networkRequest> = r1;

        r0.<com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Response cacheResponse> = r2;

        r0.<com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.ResponseSource source> = r3;

        return;
    }

    public static boolean isCacheable(com.android.okhttp.Response, com.android.okhttp.Request)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Request r1;
        int i0, $i1;
        com.android.okhttp.CacheControl r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.android.okhttp.Response;

        r1 := @parameter1: com.android.okhttp.Request;

        i0 = virtualinvoke r0.<com.android.okhttp.Response: int code()>();

        if i0 == 200 goto label1;

        if i0 == 203 goto label1;

        if i0 == 300 goto label1;

        if i0 == 301 goto label1;

        if i0 == 410 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl()>();

        $r3 = virtualinvoke r1.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>("Authorization");

        if $r3 == null goto label2;

        $z1 = virtualinvoke r2.<com.android.okhttp.CacheControl: boolean isPublic()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r2.<com.android.okhttp.CacheControl: boolean mustRevalidate()>();

        if $z2 != 0 goto label2;

        $i1 = virtualinvoke r2.<com.android.okhttp.CacheControl: int sMaxAgeSeconds()>();

        if $i1 != -1 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r2.<com.android.okhttp.CacheControl: boolean noStore()>();

        if $z0 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    static com.android.okhttp.Response$Body access$000()
    {
        com.android.okhttp.Response$Body $r0;

        $r0 = <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Response$Body EMPTY_BODY>;

        return $r0;
    }

    static com.android.okhttp.internal.http.StatusLine access$100()
    {
        com.android.okhttp.internal.http.StatusLine $r0;

        $r0 = <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.internal.http.StatusLine GATEWAY_TIMEOUT_STATUS_LINE>;

        return $r0;
    }

    void <init>(com.android.okhttp.Request, com.android.okhttp.Response, com.android.okhttp.ResponseSource, com.android.okhttp.internal.http.CacheStrategy$1)
    {
        com.android.okhttp.internal.http.CacheStrategy r0;
        com.android.okhttp.Request r1;
        com.android.okhttp.Response r2;
        com.android.okhttp.ResponseSource r3;
        com.android.okhttp.internal.http.CacheStrategy$1 r4;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 := @parameter1: com.android.okhttp.Response;

        r3 := @parameter2: com.android.okhttp.ResponseSource;

        r4 := @parameter3: com.android.okhttp.internal.http.CacheStrategy$1;

        specialinvoke r0.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        com.android.okhttp.internal.http.CacheStrategy$1 $r1;
        com.android.okhttp.internal.http.StatusLine $r2;
        java.io.IOException $r3;
        java.lang.AssertionError $r4;

        $r1 = new com.android.okhttp.internal.http.CacheStrategy$1;

        specialinvoke $r1.<com.android.okhttp.internal.http.CacheStrategy$1: void <init>()>();

        <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Response$Body EMPTY_BODY> = $r1;

     label1:
        $r2 = new com.android.okhttp.internal.http.StatusLine;

        specialinvoke $r2.<com.android.okhttp.internal.http.StatusLine: void <init>(java.lang.String)>("HTTP/1.1 504 Gateway Timeout");

        <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.internal.http.StatusLine GATEWAY_TIMEOUT_STATUS_LINE> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
