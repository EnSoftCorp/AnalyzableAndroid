public class com.android.okhttp.internal.http.CacheStrategy$Factory extends java.lang.Object
{
    final long nowMillis;
    final com.android.okhttp.Request request;
    final com.android.okhttp.Response cacheResponse;
    private java.util.Date servedDate;
    private java.lang.String servedDateString;
    private java.util.Date lastModified;
    private java.lang.String lastModifiedString;
    private java.util.Date expires;
    private long sentRequestMillis;
    private long receivedResponseMillis;
    private java.lang.String etag;
    private int ageSeconds;

    public void <init>(long, com.android.okhttp.Request, com.android.okhttp.Response)
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        long l0, $l3, $l4;
        com.android.okhttp.Request r1;
        com.android.okhttp.Response r2;
        int i1, $i2, $i5;
        java.lang.String r3, r4, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.android.okhttp.Headers $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Date $r15, $r16, $r17;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.okhttp.Request;

        r2 := @parameter2: com.android.okhttp.Response;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: int ageSeconds> = -1;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long nowMillis> = l0;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request> = r1;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse> = r2;

        if r2 == null goto label9;

        i1 = 0;

     label1:
        $r5 = virtualinvoke r2.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        $i2 = virtualinvoke $r5.<com.android.okhttp.Headers: int size()>();

        if i1 >= $i2 goto label9;

        $r6 = virtualinvoke r2.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        r3 = virtualinvoke $r6.<com.android.okhttp.Headers: java.lang.String name(int)>(i1);

        $r7 = virtualinvoke r2.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        r4 = virtualinvoke $r7.<com.android.okhttp.Headers: java.lang.String value(int)>(i1);

        $r8 = "Date";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        $r17 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate> = $r17;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String servedDateString> = r4;

        goto label8;

     label2:
        $r9 = "Expires";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z1 == 0 goto label3;

        $r16 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date expires> = $r16;

        goto label8;

     label3:
        $r10 = "Last-Modified";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z2 == 0 goto label4;

        $r15 = staticinvoke <com.android.okhttp.internal.http.HttpDate: java.util.Date parse(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date lastModified> = $r15;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String lastModifiedString> = r4;

        goto label8;

     label4:
        $r11 = "ETag";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z3 == 0 goto label5;

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String etag> = r4;

        goto label8;

     label5:
        $r12 = "Age";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z4 == 0 goto label6;

        $i5 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int parseSeconds(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: int ageSeconds> = $i5;

        goto label8;

     label6:
        $r13 = <com.android.okhttp.internal.http.OkHeaders: java.lang.String SENT_MILLIS>;

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z5 == 0 goto label7;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long sentRequestMillis> = $l3;

        goto label8;

     label7:
        $r14 = <com.android.okhttp.internal.http.OkHeaders: java.lang.String RECEIVED_MILLIS>;

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z6 == 0 goto label8;

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long receivedResponseMillis> = $l4;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    public com.android.okhttp.internal.http.CacheStrategy get()
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        com.android.okhttp.internal.http.CacheStrategy r1, $r16;
        com.android.okhttp.Response r2;
        com.android.okhttp.ResponseSource $r3, $r4, $r12, $r17;
        com.android.okhttp.Request $r5, $r8;
        com.android.okhttp.CacheControl $r6;
        boolean $z0;
        com.android.okhttp.Response$Builder $r7, $r9, $r11, $r13, $r14;
        com.android.okhttp.internal.http.StatusLine $r10;
        com.android.okhttp.Response$Body $r15;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        r1 = specialinvoke r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.internal.http.CacheStrategy getCandidate()>();

        $r4 = r1.<com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.ResponseSource source>;

        $r3 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CACHE>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $r6 = virtualinvoke $r5.<com.android.okhttp.Request: com.android.okhttp.CacheControl cacheControl()>();

        $z0 = virtualinvoke $r6.<com.android.okhttp.CacheControl: boolean onlyIfCached()>();

        if $z0 == 0 goto label1;

        $r7 = new com.android.okhttp.Response$Builder;

        specialinvoke $r7.<com.android.okhttp.Response$Builder: void <init>()>();

        $r8 = r1.<com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Request networkRequest>;

        $r9 = virtualinvoke $r7.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder request(com.android.okhttp.Request)>($r8);

        $r10 = staticinvoke <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.internal.http.StatusLine access$100()>();

        $r11 = virtualinvoke $r9.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder statusLine(com.android.okhttp.internal.http.StatusLine)>($r10);

        $r12 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NONE>;

        $r13 = virtualinvoke $r11.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder setResponseSource(com.android.okhttp.ResponseSource)>($r12);

        $r15 = staticinvoke <com.android.okhttp.internal.http.CacheStrategy: com.android.okhttp.Response$Body access$000()>();

        $r14 = virtualinvoke $r13.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder body(com.android.okhttp.Response$Body)>($r15);

        r2 = virtualinvoke $r14.<com.android.okhttp.Response$Builder: com.android.okhttp.Response build()>();

        $r16 = new com.android.okhttp.internal.http.CacheStrategy;

        $r17 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NONE>;

        specialinvoke $r16.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>(null, r2, $r17, null);

        return $r16;

     label1:
        return r1;
    }

    private com.android.okhttp.internal.http.CacheStrategy getCandidate()
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        com.android.okhttp.CacheControl r1, r2;
        long l0, l1, l2, l3, l4, $l8, $l9, $l10, $l13, $l17, $l18, $l19;
        com.android.okhttp.Response$Builder r3, $r32;
        com.android.okhttp.Request r4, $r6, $r8, $r9, $r12, $r14, $r16, $r45, $r46, $r51;
        com.android.okhttp.Response $r5, $r7, $r13, $r15, $r24, $r30, $r33, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.android.okhttp.ResponseSource $r10, $r20, $r25, $r31, $r34, $r42, $r47, $r50;
        com.android.okhttp.internal.http.CacheStrategy $r11, $r21, $r36, $r40, $r43, $r44;
        int $i5, $i6, $i14, $i15, $i16, $i20;
        java.lang.String $r17, $r23, $r27, $r29;
        java.util.Date $r18, $r19;
        byte $b7, $b11, $b12;
        java.util.concurrent.TimeUnit $r37, $r39, $r41;
        com.android.okhttp.Handshake $r48;
        com.android.okhttp.Request$Builder r52;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        $r5 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        if $r5 != null goto label01;

        $r44 = new com.android.okhttp.internal.http.CacheStrategy;

        $r51 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $r50 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        specialinvoke $r44.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>($r51, null, $r50, null);

        return $r44;

     label01:
        $r6 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $z0 = virtualinvoke $r6.<com.android.okhttp.Request: boolean isHttps()>();

        if $z0 == 0 goto label02;

        $r49 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r48 = virtualinvoke $r49.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake()>();

        if $r48 != null goto label02;

        $r43 = new com.android.okhttp.internal.http.CacheStrategy;

        $r45 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $r42 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        specialinvoke $r43.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>($r45, null, $r42, null);

        return $r43;

     label02:
        $r7 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r8 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $z1 = staticinvoke <com.android.okhttp.internal.http.CacheStrategy: boolean isCacheable(com.android.okhttp.Response,com.android.okhttp.Request)>($r7, $r8);

        if $z1 != 0 goto label03;

        $r40 = new com.android.okhttp.internal.http.CacheStrategy;

        $r46 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $r47 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        specialinvoke $r40.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>($r46, null, $r47, null);

        return $r40;

     label03:
        $r9 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        r1 = virtualinvoke $r9.<com.android.okhttp.Request: com.android.okhttp.CacheControl cacheControl()>();

        $z2 = virtualinvoke r1.<com.android.okhttp.CacheControl: boolean noCache()>();

        if $z2 != 0 goto label04;

        $r14 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $z3 = staticinvoke <com.android.okhttp.internal.http.CacheStrategy$Factory: boolean hasConditions(com.android.okhttp.Request)>($r14);

        if $z3 == 0 goto label05;

     label04:
        $r11 = new com.android.okhttp.internal.http.CacheStrategy;

        $r12 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        $r13 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r10 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        specialinvoke $r11.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>($r12, $r13, $r10, null);

        return $r11;

     label05:
        l0 = specialinvoke r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long cacheResponseAge()>();

        l1 = specialinvoke r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long computeFreshnessLifetime()>();

        $i5 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxAgeSeconds()>();

        if $i5 == -1 goto label06;

        $r41 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i20 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxAgeSeconds()>();

        $l18 = (long) $i20;

        $l17 = virtualinvoke $r41.<java.util.concurrent.TimeUnit: long toMillis(long)>($l18);

        l1 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l17);

     label06:
        l2 = 0L;

        $i6 = virtualinvoke r1.<com.android.okhttp.CacheControl: int minFreshSeconds()>();

        if $i6 == -1 goto label07;

        $r37 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i14 = virtualinvoke r1.<com.android.okhttp.CacheControl: int minFreshSeconds()>();

        $l19 = (long) $i14;

        l2 = virtualinvoke $r37.<java.util.concurrent.TimeUnit: long toMillis(long)>($l19);

     label07:
        l3 = 0L;

        $r15 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        r2 = virtualinvoke $r15.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl()>();

        $z4 = virtualinvoke r2.<com.android.okhttp.CacheControl: boolean mustRevalidate()>();

        if $z4 != 0 goto label08;

        $i15 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxStaleSeconds()>();

        if $i15 == -1 goto label08;

        $r39 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i16 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxStaleSeconds()>();

        $l13 = (long) $i16;

        l3 = virtualinvoke $r39.<java.util.concurrent.TimeUnit: long toMillis(long)>($l13);

     label08:
        $z5 = virtualinvoke r2.<com.android.okhttp.CacheControl: boolean noCache()>();

        if $z5 != 0 goto label11;

        $l8 = l0 + l2;

        $l9 = l1 + l3;

        $b7 = $l8 cmp $l9;

        if $b7 >= 0 goto label11;

        $r30 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r32 = virtualinvoke $r30.<com.android.okhttp.Response: com.android.okhttp.Response$Builder newBuilder()>();

        $r31 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CACHE>;

        r3 = virtualinvoke $r32.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder setResponseSource(com.android.okhttp.ResponseSource)>($r31);

        $l10 = l0 + l2;

        $b11 = $l10 cmp l1;

        if $b11 < 0 goto label09;

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder addHeader(java.lang.String,java.lang.String)>("Warning", "110 HttpURLConnection \"Response is stale\"");

     label09:
        l4 = 86400000L;

        $b12 = l0 cmp l4;

        if $b12 <= 0 goto label10;

        $z7 = specialinvoke r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: boolean isFreshnessLifetimeHeuristic()>();

        if $z7 == 0 goto label10;

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder addHeader(java.lang.String,java.lang.String)>("Warning", "113 HttpURLConnection \"Heuristic expiration\"");

     label10:
        $r36 = new com.android.okhttp.internal.http.CacheStrategy;

        $r33 = virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response build()>();

        $r34 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CACHE>;

        specialinvoke $r36.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>(null, $r33, $r34, null);

        return $r36;

     label11:
        $r16 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Request request>;

        r52 = virtualinvoke $r16.<com.android.okhttp.Request: com.android.okhttp.Request$Builder newBuilder()>();

        $r18 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date lastModified>;

        if $r18 == null goto label12;

        $r27 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String lastModifiedString>;

        virtualinvoke r52.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder header(java.lang.String,java.lang.String)>("If-Modified-Since", $r27);

        goto label13;

     label12:
        $r19 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r19 == null goto label13;

        $r29 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String servedDateString>;

        virtualinvoke r52.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder header(java.lang.String,java.lang.String)>("If-Modified-Since", $r29);

     label13:
        $r17 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String etag>;

        if $r17 == null goto label14;

        $r23 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.lang.String etag>;

        virtualinvoke r52.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder header(java.lang.String,java.lang.String)>("If-None-Match", $r23);

     label14:
        r4 = virtualinvoke r52.<com.android.okhttp.Request$Builder: com.android.okhttp.Request build()>();

        $z6 = staticinvoke <com.android.okhttp.internal.http.CacheStrategy$Factory: boolean hasConditions(com.android.okhttp.Request)>(r4);

        if $z6 == 0 goto label15;

        $r21 = new com.android.okhttp.internal.http.CacheStrategy;

        $r24 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r25 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CONDITIONAL_CACHE>;

        specialinvoke $r21.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>(r4, $r24, $r25, null);

        goto label16;

     label15:
        $r21 = new com.android.okhttp.internal.http.CacheStrategy;

        $r20 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        specialinvoke $r21.<com.android.okhttp.internal.http.CacheStrategy: void <init>(com.android.okhttp.Request,com.android.okhttp.Response,com.android.okhttp.ResponseSource,com.android.okhttp.internal.http.CacheStrategy$1)>(r4, null, $r20, null);

     label16:
        return $r21;
    }

    private long computeFreshnessLifetime()
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        com.android.okhttp.CacheControl r1;
        long l0, l1, $l3, $l4, $l6, $l8, $l9, $l10, $l11, $l13, l14, l15;
        com.android.okhttp.Response $r2, $r5;
        int $i2, $i12;
        java.util.Date $r3, $r4, $r9, $r10, $r11, $r12, $r13, $r14;
        com.android.okhttp.Request $r6;
        java.net.URL $r7;
        java.lang.String $r8;
        byte $b5, $b7;
        java.util.concurrent.TimeUnit $r15;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        $r2 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        r1 = virtualinvoke $r2.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl()>();

        $i2 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxAgeSeconds()>();

        if $i2 == -1 goto label01;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i12 = virtualinvoke r1.<com.android.okhttp.CacheControl: int maxAgeSeconds()>();

        $l11 = (long) $i12;

        $l13 = virtualinvoke $r15.<java.util.concurrent.TimeUnit: long toMillis(long)>($l11);

        return $l13;

     label01:
        $r3 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date expires>;

        if $r3 == null goto label06;

        $r13 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r13 == null goto label02;

        $r14 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        $l10 = virtualinvoke $r14.<java.util.Date: long getTime()>();

        goto label03;

     label02:
        $l10 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long receivedResponseMillis>;

     label03:
        l0 = $l10;

        $r12 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date expires>;

        $l8 = virtualinvoke $r12.<java.util.Date: long getTime()>();

        l1 = $l8 - l0;

        $b7 = l1 cmp 0L;

        if $b7 <= 0 goto label04;

        $l9 = l1;

        goto label05;

     label04:
        $l9 = 0L;

     label05:
        return $l9;

     label06:
        $r4 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date lastModified>;

        if $r4 == null goto label11;

        $r5 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r6 = virtualinvoke $r5.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $r7 = virtualinvoke $r6.<com.android.okhttp.Request: java.net.URL url()>();

        $r8 = virtualinvoke $r7.<java.net.URL: java.lang.String getQuery()>();

        if $r8 != null goto label11;

        $r9 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r9 == null goto label07;

        $r11 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        $l6 = virtualinvoke $r11.<java.util.Date: long getTime()>();

        goto label08;

     label07:
        $l6 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long sentRequestMillis>;

     label08:
        l14 = $l6;

        $r10 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date lastModified>;

        $l3 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        l15 = l14 - $l3;

        $b5 = l15 cmp 0L;

        if $b5 <= 0 goto label09;

        $l4 = l15 / 10L;

        goto label10;

     label09:
        $l4 = 0L;

     label10:
        return $l4;

     label11:
        return 0L;
    }

    private long cacheResponseAge()
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        long l0, l1, l2, l3, $l5, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18;
        java.util.Date $r1, $r3;
        int $i4, $i10;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        $r1 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        if $r1 == null goto label1;

        $l16 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long receivedResponseMillis>;

        $r3 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date servedDate>;

        $l15 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $l18 = $l16 - $l15;

        $l17 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l18);

        goto label2;

     label1:
        $l17 = 0L;

     label2:
        l0 = $l17;

        $i4 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: int ageSeconds>;

        if $i4 == -1 goto label3;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $i10 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: int ageSeconds>;

        $l12 = (long) $i10;

        $l14 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>($l12);

        $l13 = staticinvoke <java.lang.Math: long max(long,long)>(l0, $l14);

        goto label4;

     label3:
        $l13 = l0;

     label4:
        l1 = $l13;

        $l6 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long receivedResponseMillis>;

        $l5 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long sentRequestMillis>;

        l2 = $l6 - $l5;

        $l8 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long nowMillis>;

        $l7 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: long receivedResponseMillis>;

        l3 = $l8 - $l7;

        $l9 = l1 + l2;

        $l11 = $l9 + l3;

        return $l11;
    }

    private boolean isFreshnessLifetimeHeuristic()
    {
        com.android.okhttp.internal.http.CacheStrategy$Factory r0;
        com.android.okhttp.Response $r1;
        com.android.okhttp.CacheControl $r2;
        int $i0;
        java.util.Date $r3;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.CacheStrategy$Factory;

        $r1 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: com.android.okhttp.Response cacheResponse>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl()>();

        $i0 = virtualinvoke $r2.<com.android.okhttp.CacheControl: int maxAgeSeconds()>();

        if $i0 != -1 goto label1;

        $r3 = r0.<com.android.okhttp.internal.http.CacheStrategy$Factory: java.util.Date expires>;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean hasConditions(com.android.okhttp.Request)
    {
        com.android.okhttp.Request r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.Request;

        $r1 = virtualinvoke r0.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>("If-Modified-Since");

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>("If-None-Match");

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
