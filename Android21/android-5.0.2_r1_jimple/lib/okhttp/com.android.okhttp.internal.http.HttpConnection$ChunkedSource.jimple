class com.android.okhttp.internal.http.HttpConnection$ChunkedSource extends com.android.okhttp.internal.http.HttpConnection$AbstractSource implements com.android.okio.Source
{
    private static final int NO_CHUNK_YET;
    private int bytesRemainingInChunk;
    private boolean hasMoreChunks;
    private final com.android.okhttp.internal.http.HttpEngine httpEngine;
    final com.android.okhttp.internal.http.HttpConnection this$0;

    void <init>(com.android.okhttp.internal.http.HttpConnection, java.net.CacheRequest, com.android.okhttp.internal.http.HttpEngine) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpConnection$ChunkedSource r0;
        com.android.okhttp.internal.http.HttpConnection r1;
        java.net.CacheRequest r2;
        com.android.okhttp.internal.http.HttpEngine r3;

        r0 := @this: com.android.okhttp.internal.http.HttpConnection$ChunkedSource;

        r1 := @parameter0: com.android.okhttp.internal.http.HttpConnection;

        r2 := @parameter1: java.net.CacheRequest;

        r3 := @parameter2: com.android.okhttp.internal.http.HttpEngine;

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0> = r1;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpConnection$AbstractSource: void <init>(com.android.okhttp.internal.http.HttpConnection,java.net.CacheRequest)>(r1, r2);

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk> = -1;

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean hasMoreChunks> = 1;

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpEngine httpEngine> = r3;

        return;
    }

    public long read(com.android.okio.OkBuffer, long) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpConnection$ChunkedSource r0;
        com.android.okio.OkBuffer r1;
        long l0, l1, $l5, $l6, $l8, $l11;
        byte $b2, $b7;
        boolean $z0, $z1, $z2;
        int $i3, $i4, $i9, $i10, $i12;
        com.android.okhttp.internal.http.HttpConnection $r2;
        com.android.okio.BufferedSource $r3;
        java.io.IOException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.internal.http.HttpConnection$ChunkedSource;

        r1 := @parameter0: com.android.okio.OkBuffer;

        l0 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $z0 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean closed>;

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r6;

     label2:
        $z1 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean hasMoreChunks>;

        if $z1 != 0 goto label3;

        return -1L;

     label3:
        $i3 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        if $i3 == 0 goto label4;

        $i12 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        if $i12 != -1 goto label5;

     label4:
        specialinvoke r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: void readChunkSize()>();

        $z2 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean hasMoreChunks>;

        if $z2 != 0 goto label5;

        return -1L;

     label5:
        $r2 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        $r3 = staticinvoke <com.android.okhttp.internal.http.HttpConnection: com.android.okio.BufferedSource access$900(com.android.okhttp.internal.http.HttpConnection)>($r2);

        $i4 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        $l5 = (long) $i4;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>(l0, $l5);

        l1 = interfaceinvoke $r3.<com.android.okio.BufferedSource: long read(com.android.okio.OkBuffer,long)>(r1, $l6);

        $b7 = l1 cmp -1L;

        if $b7 != 0 goto label6;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: void unexpectedEndOfInput()>();

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("unexpected end of stream");

        throw $r4;

     label6:
        $i9 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        $l8 = (long) $i9;

        $l11 = $l8 - l1;

        $i10 = (int) $l11;

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk> = $i10;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: void cacheWrite(com.android.okio.OkBuffer,long)>(r1, l1);

        return l1;
    }

    private void readChunkSize() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpConnection$ChunkedSource r0;
        java.lang.String r1, $r5, $r17;
        int i0, $i1, $i2, $i3;
        com.android.okhttp.internal.http.HttpConnection $r3, $r7, $r10;
        com.android.okio.BufferedSource $r4, $r12;
        com.android.okhttp.Headers$Builder $r6, r19;
        com.android.okhttp.internal.http.HttpEngine $r8;
        com.android.okhttp.Headers $r9;
        java.net.ProtocolException $r13;
        java.lang.NumberFormatException $r14;
        java.lang.StringBuilder $r15, $r16, $r18;

        r0 := @this: com.android.okhttp.internal.http.HttpConnection$ChunkedSource;

        $i1 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        if $i1 == -1 goto label1;

        $r10 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        $r12 = staticinvoke <com.android.okhttp.internal.http.HttpConnection: com.android.okio.BufferedSource access$900(com.android.okhttp.internal.http.HttpConnection)>($r10);

        interfaceinvoke $r12.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        $r4 = staticinvoke <com.android.okhttp.internal.http.HttpConnection: com.android.okio.BufferedSource access$900(com.android.okhttp.internal.http.HttpConnection)>($r3);

        r1 = interfaceinvoke $r4.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(";");

        if i0 == -1 goto label2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, 16);

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk> = $i2;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r13 = new java.net.ProtocolException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a hex chunk size but was ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.net.ProtocolException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label5:
        $i3 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int bytesRemainingInChunk>;

        if $i3 != 0 goto label6;

        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean hasMoreChunks> = 0;

        $r6 = new com.android.okhttp.Headers$Builder;

        specialinvoke $r6.<com.android.okhttp.Headers$Builder: void <init>()>();

        r19 = $r6;

        $r7 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        virtualinvoke $r7.<com.android.okhttp.internal.http.HttpConnection: void readHeaders(com.android.okhttp.Headers$Builder)>(r19);

        $r8 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r9 = virtualinvoke r19.<com.android.okhttp.Headers$Builder: com.android.okhttp.Headers build()>();

        virtualinvoke $r8.<com.android.okhttp.internal.http.HttpEngine: void receiveHeaders(com.android.okhttp.Headers)>($r9);

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: void endOfInput(boolean)>(1);

     label6:
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public com.android.okio.Source deadline(com.android.okio.Deadline)
    {
        com.android.okhttp.internal.http.HttpConnection$ChunkedSource r0;
        com.android.okio.Deadline r1;
        com.android.okhttp.internal.http.HttpConnection $r2;
        com.android.okio.BufferedSource $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpConnection$ChunkedSource;

        r1 := @parameter0: com.android.okio.Deadline;

        $r2 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        $r3 = staticinvoke <com.android.okhttp.internal.http.HttpConnection: com.android.okio.BufferedSource access$900(com.android.okhttp.internal.http.HttpConnection)>($r2);

        interfaceinvoke $r3.<com.android.okio.BufferedSource: com.android.okio.Source deadline(com.android.okio.Deadline)>(r1);

        return r0;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpConnection$ChunkedSource r0;
        boolean $z0, $z1, $z2;
        com.android.okhttp.internal.http.HttpConnection $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpConnection$ChunkedSource;

        $z0 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean hasMoreChunks>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: com.android.okhttp.internal.http.HttpConnection this$0>;

        $z2 = virtualinvoke $r1.<com.android.okhttp.internal.http.HttpConnection: boolean discard(com.android.okio.Source,int)>(r0, 100);

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: void unexpectedEndOfInput()>();

     label2:
        r0.<com.android.okhttp.internal.http.HttpConnection$ChunkedSource: boolean closed> = 1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.okhttp.internal.http.HttpConnection$ChunkedSource: int NO_CHUNK_YET> = -1;

        return;
    }
}
