public final class com.android.okhttp.internal.DiskLruCache extends java.lang.Object implements java.io.Closeable
{
    static final java.lang.String JOURNAL_FILE;
    static final java.lang.String JOURNAL_FILE_TEMP;
    static final java.lang.String JOURNAL_FILE_BACKUP;
    static final java.lang.String MAGIC;
    static final java.lang.String VERSION_1;
    static final long ANY_SEQUENCE_NUMBER;
    static final java.util.regex.Pattern LEGAL_KEY_PATTERN;
    private static final java.lang.String CLEAN;
    private static final java.lang.String DIRTY;
    private static final java.lang.String REMOVE;
    private static final java.lang.String READ;
    private final java.io.File directory;
    private final java.io.File journalFile;
    private final java.io.File journalFileTmp;
    private final java.io.File journalFileBackup;
    private final int appVersion;
    private long maxSize;
    private final int valueCount;
    private long size;
    private com.android.okio.BufferedSink journalWriter;
    private final java.util.LinkedHashMap lruEntries;
    private int redundantOpCount;
    private long nextSequenceNumber;
    final java.util.concurrent.ThreadPoolExecutor executorService;
    private final java.lang.Runnable cleanupRunnable;
    private static final java.io.OutputStream NULL_OUTPUT_STREAM;

    private void <init>(java.io.File, int, int, long)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File r1, $r8, $r9, $r10;
        int i0, i1;
        long l2;
        java.util.LinkedHashMap $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.concurrent.TimeUnit $r5;
        java.util.concurrent.ThreadFactory $r6;
        com.android.okhttp.internal.DiskLruCache$1 $r7;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = 0L;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(0, 0.75F, 1);

        r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries> = $r2;

        r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber> = 0L;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r6 = staticinvoke <com.android.okhttp.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp DiskLruCache", 1);

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, 60L, $r5, $r4, $r6);

        r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService> = $r3;

        $r7 = new com.android.okhttp.internal.DiskLruCache$1;

        specialinvoke $r7.<com.android.okhttp.internal.DiskLruCache$1: void <init>(com.android.okhttp.internal.DiskLruCache)>(r0);

        r0.<com.android.okhttp.internal.DiskLruCache: java.lang.Runnable cleanupRunnable> = $r7;

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory> = r1;

        r0.<com.android.okhttp.internal.DiskLruCache: int appVersion> = i0;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile> = $r8;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal.tmp");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp> = $r10;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "journal.bkp");

        r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup> = $r9;

        r0.<com.android.okhttp.internal.DiskLruCache: int valueCount> = i1;

        r0.<com.android.okhttp.internal.DiskLruCache: long maxSize> = l2;

        return;
    }

    public static com.android.okhttp.internal.DiskLruCache open(java.io.File, int, int, long) throws java.io.IOException
    {
        java.io.File r0, r1, r2, $r4, $r6, $r8, $r12;
        int i0, i1;
        long l2;
        java.io.IOException r3, $r14;
        byte $b3;
        boolean $z0, $z1, $z3;
        com.android.okhttp.internal.DiskLruCache $r5, $r7, r25, r26;
        java.io.FileOutputStream $r9;
        com.android.okio.BufferedSink $r10;
        com.android.okio.Sink $r11;
        java.lang.IllegalArgumentException $r13, $r15;
        java.lang.StringBuilder $r16, $r18, $r19, $r21, $r23, $r24;
        com.android.okhttp.internal.Platform $r17;
        java.lang.String $r20, $r22;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $b3 = l2 cmp 0L;

        if $b3 > 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSize <= 0");

        throw $r15;

     label1:
        if i1 > 0 goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valueCount <= 0");

        throw $r13;

     label2:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "journal.bkp");

        r1 = $r4;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "journal");

        r2 = $r12;

        $z3 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean delete()>();

        goto label4;

     label3:
        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>(r1, r2, 0);

     label4:
        $r5 = new com.android.okhttp.internal.DiskLruCache;

        specialinvoke $r5.<com.android.okhttp.internal.DiskLruCache: void <init>(java.io.File,int,int,long)>(r0, i0, i1, l2);

        r25 = $r5;

        $r6 = r25.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label8;

     label5:
        specialinvoke r25.<com.android.okhttp.internal.DiskLruCache: void readJournal()>();

        specialinvoke r25.<com.android.okhttp.internal.DiskLruCache: void processJournal()>();

        $r9 = new java.io.FileOutputStream;

        $r8 = r25.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r8, 1);

        $r11 = staticinvoke <com.android.okio.Okio: com.android.okio.Sink sink(java.io.OutputStream)>($r9);

        $r10 = staticinvoke <com.android.okio.Okio: com.android.okio.BufferedSink buffer(com.android.okio.Sink)>($r11);

        r25.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter> = $r10;

     label6:
        return r25;

     label7:
        $r14 := @caughtexception;

        r3 = $r14;

        $r17 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiskLruCache ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is corrupt: ");

        $r20 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", removing");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<com.android.okhttp.internal.Platform: void logW(java.lang.String)>($r22);

        virtualinvoke r25.<com.android.okhttp.internal.DiskLruCache: void delete()>();

     label8:
        virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        $r7 = new com.android.okhttp.internal.DiskLruCache;

        specialinvoke $r7.<com.android.okhttp.internal.DiskLruCache: void <init>(java.io.File,int,int,long)>(r0, i0, i1, l2);

        r26 = $r7;

        specialinvoke r26.<com.android.okhttp.internal.DiskLruCache: void rebuildJournal()>();

        return r26;

        catch java.io.IOException from label5 to label6 with label7;
    }

    private void readJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSource r1;
        java.lang.String r2, r3, r4, r5, r6, $r12, $r24, $r25, $r26, $r27, $r28, $r29;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r8, $r31;
        java.io.FileInputStream $r9;
        java.io.File $r10;
        com.android.okio.Source $r11;
        java.io.IOException $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        java.util.LinkedHashMap $r30;
        java.io.EOFException $r32;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r9 = new java.io.FileInputStream;

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r10);

        $r11 = staticinvoke <com.android.okio.Okio: com.android.okio.Source source(java.io.InputStream)>($r9);

        r1 = staticinvoke <com.android.okio.Okio: com.android.okio.BufferedSource buffer(com.android.okio.Source)>($r11);

     label01:
        r2 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r3 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r4 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r5 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        r6 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $r12 = "libcore.io.DiskLruCache";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label02;

        $r25 = "1";

        $z1 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label02;

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int appVersion>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label02;

        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $z4 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z4 == 0 goto label02;

        $r29 = "";

        $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z3 != 0 goto label03;

     label02:
        $r13 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal header: [");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r13;

     label03:
        i0 = 0;

     label04:
        $r28 = interfaceinvoke r1.<com.android.okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void readJournalLine(java.lang.String)>($r28);

        i0 = i0 + 1;

     label05:
        goto label04;

     label06:
        $r32 := @caughtexception;

        goto label07;

     label07:
        $r30 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i3 = virtualinvoke $r30.<java.util.LinkedHashMap: int size()>();

        $i4 = i0 - $i3;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i4;

     label08:
        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        goto label11;

     label09:
        $r31 := @caughtexception;

        r8 = $r31;

     label10:
        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>(r1);

        throw r8;

     label11:
        return;

        catch java.io.EOFException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void readJournalLine(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, r2, $r10, $r12, $r13, $r16, $r17, $r21, $r27;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        com.android.okhttp.internal.DiskLruCache$Entry r3, $r18;
        java.lang.String[] r4;
        java.util.LinkedHashMap $r5, $r19, $r25;
        java.lang.Object $r6;
        java.io.IOException $r7, $r24;
        java.lang.StringBuilder $r8, $r9, $r11, $r26, $r28, $r29;
        boolean $z0, $z1, $z2, $z4;
        com.android.okhttp.internal.DiskLruCache$Editor $r15;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(32);

        if i0 != -1 goto label1;

        $r24 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label1:
        i1 = i0 + 1;

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(32, i1);

        if i2 != -1 goto label2;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r21 = "REMOVE";

        $i7 = virtualinvoke $r21.<java.lang.String: int length()>();

        if i0 != $i7 goto label3;

        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("REMOVE");

        if $z4 == 0 goto label3;

        $r25 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r2);

        return;

     label2:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

     label3:
        $r5 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r6;

        if r3 != null goto label4;

        $r18 = new com.android.okhttp.internal.DiskLruCache$Entry;

        specialinvoke $r18.<com.android.okhttp.internal.DiskLruCache$Entry: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,com.android.okhttp.internal.DiskLruCache$1)>(r0, r2, null);

        r3 = $r18;

        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r19.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label4:
        if i2 == -1 goto label5;

        $r16 = "CLEAN";

        $i5 = virtualinvoke $r16.<java.lang.String: int length()>();

        if i0 != $i5 goto label5;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("CLEAN");

        if $z2 == 0 goto label5;

        $i6 = i2 + 1;

        $r17 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6);

        r4 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$602(com.android.okhttp.internal.DiskLruCache$Entry,boolean)>(r3, 1);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, null);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: void access$800(com.android.okhttp.internal.DiskLruCache$Entry,java.lang.String[])>(r3, r4);

        goto label8;

     label5:
        if i2 != -1 goto label6;

        $r13 = "DIRTY";

        $i4 = virtualinvoke $r13.<java.lang.String: int length()>();

        if i0 != $i4 goto label6;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("DIRTY");

        if $z1 == 0 goto label6;

        $r15 = new com.android.okhttp.internal.DiskLruCache$Editor;

        specialinvoke $r15.<com.android.okhttp.internal.DiskLruCache$Editor: void <init>(com.android.okhttp.internal.DiskLruCache,com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$1)>(r0, r3, null);

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r3, $r15);

        goto label8;

     label6:
        if i2 != -1 goto label7;

        $r12 = "READ";

        $i3 = virtualinvoke $r12.<java.lang.String: int length()>();

        if i0 != $i3 goto label7;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("READ");

        if $z0 == 0 goto label7;

        goto label8;

     label7:
        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label8:
        return;
    }

    private void processJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.util.Iterator r1;
        com.android.okhttp.internal.DiskLruCache$Entry r2;
        int i0, $i1, $i2, i6;
        java.io.File $r3, $r9, $r10;
        java.util.LinkedHashMap $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        com.android.okhttp.internal.DiskLruCache$Editor $r7;
        long[] $r11;
        long $l3, $l4, $l5;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r3 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r3);

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.okhttp.internal.DiskLruCache$Entry) $r6;

        $r7 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $r7 != null goto label4;

        i0 = 0;

     label2:
        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i2 goto label3;

        $l3 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $r11 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $l5 = $r11[i0];

        $l4 = $l3 + $l5;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l4;

        i0 = i0 + 1;

        goto label2;

     label3:
        goto label7;

     label4:
        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r2, null);

        i6 = 0;

     label5:
        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i6 >= $i1 goto label6;

        $r9 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i6);

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r9);

        $r10 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i6);

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>($r10);

        i6 = i6 + 1;

        goto label5;

     label6:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label7:
        goto label1;

     label8:
        return;
    }

    private synchronized void rebuildJournal() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSink r1, $r5, $r31, $r50;
        java.util.Iterator r2;
        com.android.okhttp.internal.DiskLruCache$Entry r3;
        java.lang.Throwable r4, $r49;
        java.io.FileOutputStream $r6, $r28;
        java.io.File $r7, $r22, $r23, $r24, $r25, $r26, $r29, $r32;
        com.android.okio.Sink $r8, $r27;
        int $i0, $i1;
        java.lang.String $r13, $r16, $r34, $r40, $r44, $r45, $r48;
        java.util.LinkedHashMap $r19;
        java.util.Collection $r21;
        boolean $z0, $z1;
        java.lang.Object $r30;
        java.lang.StringBuilder $r33, $r36, $r37, $r38, $r39, $r41, $r42, $r46, $r47;
        com.android.okhttp.internal.DiskLruCache$Editor $r35;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r5 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        if $r5 == null goto label01;

        $r50 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        interfaceinvoke $r50.<com.android.okio.BufferedSink: void close()>();

     label01:
        $r6 = new java.io.FileOutputStream;

        $r7 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        $r8 = staticinvoke <com.android.okio.Okio: com.android.okio.Sink sink(java.io.OutputStream)>($r6);

        r1 = staticinvoke <com.android.okio.Okio: com.android.okio.BufferedSink buffer(com.android.okio.Sink)>($r8);

     label02:
        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("libcore.io.DiskLruCache");

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("\n");

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("1");

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("\n");

        $i0 = r0.<com.android.okhttp.internal.DiskLruCache: int appVersion>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r13);

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("\n");

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r16);

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("\n");

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>("\n");

        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r21 = virtualinvoke $r19.<java.util.LinkedHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r30 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) $r30;

        $r35 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        if $r35 == null goto label04;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r48 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r45);

        goto label05;

     label04:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r34 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r40 = virtualinvoke r3.<com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r44);

     label05:
        goto label03;

     label06:
        interfaceinvoke r1.<com.android.okio.BufferedSink: void close()>();

        goto label09;

     label07:
        $r49 := @caughtexception;

        r4 = $r49;

     label08:
        interfaceinvoke r1.<com.android.okio.BufferedSink: void close()>();

        throw r4;

     label09:
        $r22 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $z1 = virtualinvoke $r22.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label10;

        $r29 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        $r32 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r29, $r32, 1);

     label10:
        $r25 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileTmp>;

        $r23 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r25, $r23, 0);

        $r24 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFileBackup>;

        virtualinvoke $r24.<java.io.File: boolean delete()>();

        $r28 = new java.io.FileOutputStream;

        $r26 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r28.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r26, 1);

        $r27 = staticinvoke <com.android.okio.Okio: com.android.okio.Sink sink(java.io.OutputStream)>($r28);

        $r31 = staticinvoke <com.android.okio.Okio: com.android.okio.BufferedSink buffer(com.android.okio.Sink)>($r27);

        r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter> = $r31;

        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private static void deleteIfExists(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private static void renameTo(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>(r1);

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z1 != 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    public synchronized com.android.okhttp.internal.DiskLruCache$Snapshot get(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r12;
        com.android.okhttp.internal.DiskLruCache$Entry r2;
        java.io.InputStream[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i7;
        java.util.LinkedHashMap $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        com.android.okio.BufferedSink $r7;
        com.android.okhttp.internal.DiskLruCache$Snapshot $r13;
        long[] $r14;
        long $l6;
        java.util.concurrent.ThreadPoolExecutor $r15;
        java.lang.Runnable $r16;
        java.io.File $r17;
        java.io.FileInputStream $r18;
        java.io.FileNotFoundException $r19;
        java.io.InputStream $r20, $r21;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.okhttp.internal.DiskLruCache$Entry) $r5;

        if r2 != null goto label01;

        return null;

     label01:
        $z0 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $z0 != 0 goto label02;

        return null;

     label02:
        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        r3 = newarray (java.io.InputStream)[$i2];

     label03:
        i0 = 0;

     label04:
        $i3 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i3 goto label05;

        $r18 = new java.io.FileInputStream;

        $r17 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        specialinvoke $r18.<java.io.FileInputStream: void <init>(java.io.File)>($r17);

        r3[i0] = $r18;

        i0 = i0 + 1;

        goto label04;

     label05:
        goto label09;

     label06:
        $r19 := @caughtexception;

        i1 = 0;

     label07:
        $i7 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i1 >= $i7 goto label08;

        $r21 = r3[i1];

        if $r21 == null goto label08;

        $r20 = r3[i1];

        staticinvoke <com.android.okhttp.internal.Util: void closeQuietly(java.io.Closeable)>($r20);

        i1 = i1 + 1;

        goto label07;

     label08:
        return null;

     label09:
        $i4 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i5 = $i4 + 1;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i5;

        $r7 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("READ ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r12);

        $z1 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z1 == 0 goto label10;

        $r15 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r16 = r0.<com.android.okhttp.internal.DiskLruCache: java.lang.Runnable cleanupRunnable>;

        virtualinvoke $r15.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r16);

     label10:
        $r13 = new com.android.okhttp.internal.DiskLruCache$Snapshot;

        $l6 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1200(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $r14 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        specialinvoke $r13.<com.android.okhttp.internal.DiskLruCache$Snapshot: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,long,java.io.InputStream[],long[],com.android.okhttp.internal.DiskLruCache$1)>(r0, r1, $l6, r3, $r14, null);

        return $r13;

        catch java.io.FileNotFoundException from label03 to label05 with label06;
    }

    public com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1;
        com.android.okhttp.internal.DiskLruCache$Editor $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String,long)>(r1, -1L);

        return $r2;
    }

    private synchronized com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String, long) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r13;
        long l0, $l2;
        com.android.okhttp.internal.DiskLruCache$Entry r2, $r18;
        com.android.okhttp.internal.DiskLruCache$Editor r3, $r6, $r7;
        java.util.LinkedHashMap $r4, $r17;
        java.lang.Object $r5;
        byte $b1, $b3;
        java.lang.StringBuilder $r9, $r11, $r12, $r14;
        com.android.okio.BufferedSink $r10, $r15;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.okhttp.internal.DiskLruCache$Entry) $r5;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label2;

        if r2 == null goto label1;

        $l2 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1200(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label2;

     label1:
        return null;

     label2:
        if r2 != null goto label3;

        $r18 = new com.android.okhttp.internal.DiskLruCache$Entry;

        specialinvoke $r18.<com.android.okhttp.internal.DiskLruCache$Entry: void <init>(com.android.okhttp.internal.DiskLruCache,java.lang.String,com.android.okhttp.internal.DiskLruCache$1)>(r0, r1, null);

        r2 = $r18;

        $r17 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r17.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label4;

     label3:
        $r6 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $r6 == null goto label4;

        return null;

     label4:
        $r7 = new com.android.okhttp.internal.DiskLruCache$Editor;

        specialinvoke $r7.<com.android.okhttp.internal.DiskLruCache$Editor: void <init>(com.android.okhttp.internal.DiskLruCache,com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$1)>(r0, r2, null);

        r3 = $r7;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r2, r3);

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r13);

        $r15 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        interfaceinvoke $r15.<com.android.okio.BufferedSink: void flush()>();

        return r3;
    }

    public java.io.File getDirectory()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        return $r1;
    }

    public synchronized long getMaxSize()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $l0 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        return $l0;
    }

    public synchronized void setMaxSize(long)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long l0;
        java.lang.Runnable $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        l0 := @parameter0: long;

        r0.<com.android.okhttp.internal.DiskLruCache: long maxSize> = l0;

        $r2 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.lang.Runnable cleanupRunnable>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r1);

        return;
    }

    public synchronized long size()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $l0 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        return $l0;
    }

    private synchronized void completeEdit(com.android.okhttp.internal.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1, $r5;
        boolean z0, $z1, $z2, $z3, $z6, $z7, $z8, $z9;
        com.android.okhttp.internal.DiskLruCache$Entry r2;
        int i0, $i3, $i4, $i5, $i14, i16;
        java.io.File r3, r4, $r38;
        long l1, l2, $l6, $l7, $l10, $l11, $l12, $l13, $l15;
        java.util.LinkedHashMap $r7;
        java.lang.String $r9, $r12, $r17, $r24, $r26, $r27, $r37;
        com.android.okio.BufferedSink $r10, $r18, $r22;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r21, $r23, $r25, $r29, $r30, $r34, $r35, $r36;
        java.lang.Runnable $r19;
        java.util.concurrent.ThreadPoolExecutor $r20;
        byte $b8;
        long[] $r31, $r32;
        boolean[] $r33;
        java.lang.IllegalStateException $r39, $r40;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: com.android.okhttp.internal.DiskLruCache$Editor;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Editor: com.android.okhttp.internal.DiskLruCache$Entry access$1400(com.android.okhttp.internal.DiskLruCache$Editor)>(r1);

        $r5 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $r5 == r1 goto label01;

        $r40 = new java.lang.IllegalStateException;

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>()>();

        throw $r40;

     label01:
        if z0 == 0 goto label05;

        $z7 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $z7 != 0 goto label05;

        i0 = 0;

     label02:
        $i14 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i14 goto label05;

        $r33 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Editor: boolean[] access$1500(com.android.okhttp.internal.DiskLruCache$Editor)>(r1);

        $z8 = $r33[i0];

        if $z8 != 0 goto label03;

        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

        $r39 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newly created entry didn\'t create value for index ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37);

        throw $r39;

     label03:
        $r38 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i0);

        $z9 = virtualinvoke $r38.<java.io.File: boolean exists()>();

        if $z9 != 0 goto label04;

        virtualinvoke r1.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

        return;

     label04:
        i0 = i0 + 1;

        goto label02;

     label05:
        i16 = 0;

     label06:
        $i3 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i16 >= $i3 goto label09;

        r3 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i16);

        if z0 == 0 goto label07;

        $z6 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label08;

        r4 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i16);

        virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r4);

        $r31 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        l1 = $r31[i16];

        l2 = virtualinvoke r4.<java.io.File: long length()>();

        $r32 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $r32[i16] = l2;

        $l13 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l12 = $l13 - l1;

        $l15 = $l12 + l2;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l15;

        goto label08;

     label07:
        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>(r3);

     label08:
        i16 = i16 + 1;

        goto label06;

     label09:
        $i4 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i5 = $i4 + 1;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i5;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$702(com.android.okhttp.internal.DiskLruCache$Entry,com.android.okhttp.internal.DiskLruCache$Editor)>(r2, null);

        $z1 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$600(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $z2 = $z1 | z0;

        if $z2 == 0 goto label10;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: boolean access$602(com.android.okhttp.internal.DiskLruCache$Entry,boolean)>(r2, 1);

        $r22 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r26 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r27);

        if z0 == 0 goto label11;

        $l11 = r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber>;

        $l10 = $l11 + 1L;

        r0.<com.android.okhttp.internal.DiskLruCache: long nextSequenceNumber> = $l10;

        staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long access$1202(com.android.okhttp.internal.DiskLruCache$Entry,long)>(r2, $l11);

        goto label11;

     label10:
        $r7 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r9 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r9);

        $r10 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r12 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: java.lang.String access$1100(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r17);

     label11:
        $r18 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        interfaceinvoke $r18.<com.android.okio.BufferedSink: void flush()>();

        $l7 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l6 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        $b8 = $l7 cmp $l6;

        if $b8 > 0 goto label12;

        $z3 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z3 == 0 goto label13;

     label12:
        $r20 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r19 = r0.<com.android.okhttp.internal.DiskLruCache: java.lang.Runnable cleanupRunnable>;

        virtualinvoke $r20.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r19);

     label13:
        return;
    }

    private boolean journalRebuildRequired()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int $i1, $i2, $i3;
        java.util.LinkedHashMap $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        if $i1 < 2000 goto label1;

        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i3 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        if $i2 < $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized boolean remove(java.lang.String) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r13;
        com.android.okhttp.internal.DiskLruCache$Entry r2;
        int i0, $i1, $i2, $i3;
        java.io.File r3;
        java.util.LinkedHashMap $r4, $r15;
        java.lang.Object $r5;
        com.android.okhttp.internal.DiskLruCache$Editor $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        com.android.okio.BufferedSink $r8;
        java.lang.Runnable $r16;
        boolean $z0;
        java.util.concurrent.ThreadPoolExecutor $r17;
        long[] $r18, $r19;
        long $l4, $l5, $l6;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void validateKey(java.lang.String)>(r1);

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.okhttp.internal.DiskLruCache$Entry) $r5;

        if r2 == null goto label1;

        $r6 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        if $r6 == null goto label2;

     label1:
        return 0;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        if i0 >= $i1 goto label4;

        r3 = virtualinvoke r2.<com.android.okhttp.internal.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        staticinvoke <com.android.okhttp.internal.DiskLruCache: void deleteIfExists(java.io.File)>(r3);

        $l4 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $r18 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $l6 = $r18[i0];

        $l5 = $l4 - $l6;

        r0.<com.android.okhttp.internal.DiskLruCache: long size> = $l5;

        $r19 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: long[] access$1000(com.android.okhttp.internal.DiskLruCache$Entry)>(r2);

        $r19[i0] = 0L;

        i0 = i0 + 1;

        goto label3;

     label4:
        $i2 = r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount>;

        $i3 = $i2 + 1;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = $i3;

        $r8 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<com.android.okio.BufferedSink: com.android.okio.BufferedSink writeUtf8(java.lang.String)>($r13);

        $r15 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r15.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $z0 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label5;

        $r17 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r16 = r0.<com.android.okhttp.internal.DiskLruCache: java.lang.Runnable cleanupRunnable>;

        virtualinvoke $r17.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r16);

     label5:
        return 1;
    }

    public boolean isClosed()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSink $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkNotClosed()
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSink $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r2;

     label1:
        return;
    }

    public synchronized void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSink $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        interfaceinvoke $r1.<com.android.okio.BufferedSink: void flush()>();

        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r2;
        com.android.okhttp.internal.DiskLruCache$Entry r3;
        com.android.okio.BufferedSink $r4, $r7;
        java.util.LinkedHashMap $r5;
        java.util.Collection $r6;
        com.android.okhttp.internal.DiskLruCache$Editor $r8, $r9;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        $r4 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        r3 = (com.android.okhttp.internal.DiskLruCache$Entry) r2;

        $r8 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        if $r8 == null goto label3;

        $r9 = staticinvoke <com.android.okhttp.internal.DiskLruCache$Entry: com.android.okhttp.internal.DiskLruCache$Editor access$700(com.android.okhttp.internal.DiskLruCache$Entry)>(r3);

        virtualinvoke $r9.<com.android.okhttp.internal.DiskLruCache$Editor: void abort()>();

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        $r7 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        interfaceinvoke $r7.<com.android.okio.BufferedSink: void close()>();

        r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter> = null;

        return;
    }

    private void trimToSize() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.util.Map$Entry r1;
        long $l0, $l1;
        byte $b2;
        java.util.LinkedHashMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

     label1:
        $l1 = r0.<com.android.okhttp.internal.DiskLruCache: long size>;

        $l0 = r0.<com.android.okhttp.internal.DiskLruCache: long maxSize>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label2;

        $r2 = r0.<com.android.okhttp.internal.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean remove(java.lang.String)>($r7);

        goto label1;

     label2:
        return;
    }

    public void delete() throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        virtualinvoke r0.<com.android.okhttp.internal.DiskLruCache: void close()>();

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        staticinvoke <com.android.okhttp.internal.Util: void deleteContents(java.io.File)>($r1);

        return;
    }

    private void validateKey(java.lang.String)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1, $r9;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter0: java.lang.String;

        $r3 = <com.android.okhttp.internal.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN>;

        r2 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keys must match regex [a-z0-9_-]{1,64}: \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    private static java.lang.String inputStreamToString(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        com.android.okio.OkBuffer r1;
        com.android.okio.Source $r2;
        long $l0;
        java.lang.String $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <com.android.okio.Okio: com.android.okio.Source source(java.io.InputStream)>(r0);

        r1 = staticinvoke <com.android.okhttp.internal.Util: com.android.okio.OkBuffer readFully(com.android.okio.Source)>($r2);

        $l0 = virtualinvoke r1.<com.android.okio.OkBuffer: long size()>();

        $r3 = virtualinvoke r1.<com.android.okio.OkBuffer: java.lang.String readUtf8(long)>($l0);

        return $r3;
    }

    static com.android.okio.BufferedSink access$000(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okio.BufferedSink $r1;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: com.android.okio.BufferedSink journalWriter>;

        return $r1;
    }

    static void access$100(com.android.okhttp.internal.DiskLruCache) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void trimToSize()>();

        return;
    }

    static boolean access$200(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: boolean journalRebuildRequired()>();

        return $z0;
    }

    static void access$300(com.android.okhttp.internal.DiskLruCache) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void rebuildJournal()>();

        return;
    }

    static int access$402(com.android.okhttp.internal.DiskLruCache, int)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int i0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        i0 := @parameter1: int;

        r0.<com.android.okhttp.internal.DiskLruCache: int redundantOpCount> = i0;

        return i0;
    }

    static com.android.okhttp.internal.DiskLruCache$Editor access$1600(com.android.okhttp.internal.DiskLruCache, java.lang.String, long) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.lang.String r1;
        long l0;
        com.android.okhttp.internal.DiskLruCache$Editor $r2;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: com.android.okhttp.internal.DiskLruCache$Editor edit(java.lang.String,long)>(r1, l0);

        return $r2;
    }

    static java.lang.String access$1700(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.android.okhttp.internal.DiskLruCache: java.lang.String inputStreamToString(java.io.InputStream)>(r0);

        return $r1;
    }

    static int access$1800(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        int $i0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $i0 = r0.<com.android.okhttp.internal.DiskLruCache: int valueCount>;

        return $i0;
    }

    static java.io.File access$1900(com.android.okhttp.internal.DiskLruCache)
    {
        com.android.okhttp.internal.DiskLruCache r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        $r1 = r0.<com.android.okhttp.internal.DiskLruCache: java.io.File directory>;

        return $r1;
    }

    static java.io.OutputStream access$2000()
    {
        java.io.OutputStream $r0;

        $r0 = <com.android.okhttp.internal.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM>;

        return $r0;
    }

    static void access$2200(com.android.okhttp.internal.DiskLruCache, com.android.okhttp.internal.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.android.okhttp.internal.DiskLruCache r0;
        com.android.okhttp.internal.DiskLruCache$Editor r1;
        boolean z0;

        r0 := @parameter0: com.android.okhttp.internal.DiskLruCache;

        r1 := @parameter1: com.android.okhttp.internal.DiskLruCache$Editor;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.okhttp.internal.DiskLruCache: void completeEdit(com.android.okhttp.internal.DiskLruCache$Editor,boolean)>(r1, z0);

        return;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        com.android.okhttp.internal.DiskLruCache$2 $r1;

        <com.android.okhttp.internal.DiskLruCache: java.lang.String READ> = "READ";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String REMOVE> = "REMOVE";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String DIRTY> = "DIRTY";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String CLEAN> = "CLEAN";

        <com.android.okhttp.internal.DiskLruCache: long ANY_SEQUENCE_NUMBER> = -1L;

        <com.android.okhttp.internal.DiskLruCache: java.lang.String VERSION_1> = "1";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String MAGIC> = "libcore.io.DiskLruCache";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE_BACKUP> = "journal.bkp";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE_TEMP> = "journal.tmp";

        <com.android.okhttp.internal.DiskLruCache: java.lang.String JOURNAL_FILE> = "journal";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-z0-9_-]{1,64}");

        <com.android.okhttp.internal.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN> = $r0;

        $r1 = new com.android.okhttp.internal.DiskLruCache$2;

        specialinvoke $r1.<com.android.okhttp.internal.DiskLruCache$2: void <init>()>();

        <com.android.okhttp.internal.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM> = $r1;

        return;
    }
}
