public final class com.android.okhttp.internal.http.HttpsURLConnectionImpl extends com.android.okhttp.internal.http.DelegatingHttpsURLConnection
{
    private final com.android.okhttp.internal.http.HttpURLConnectionImpl delegate;

    public void <init>(java.net.URL, com.android.okhttp.OkHttpClient)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.net.URL r1;
        com.android.okhttp.OkHttpClient r2;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: com.android.okhttp.OkHttpClient;

        $r3 = new com.android.okhttp.internal.http.HttpURLConnectionImpl;

        specialinvoke $r3.<com.android.okhttp.internal.http.HttpURLConnectionImpl: void <init>(java.net.URL,com.android.okhttp.OkHttpClient)>(r1, r2);

        specialinvoke r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: void <init>(com.android.okhttp.internal.http.HttpURLConnectionImpl)>($r3);

        return;
    }

    public void <init>(com.android.okhttp.internal.http.HttpURLConnectionImpl)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        com.android.okhttp.internal.http.HttpURLConnectionImpl r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: com.android.okhttp.internal.http.HttpURLConnectionImpl;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void <init>(java.net.HttpURLConnection)>(r1);

        r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate> = r1;

        return;
    }

    protected com.android.okhttp.Handshake handshake()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r1, $r3, $r5, $r7;
        com.android.okhttp.internal.http.HttpEngine $r2, $r4, $r8;
        boolean $z0;
        com.android.okhttp.Handshake $r6;
        com.android.okhttp.Response $r9;
        java.lang.IllegalStateException $r10;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r2 = $r1.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        if $r2 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection has not yet been established");

        throw $r10;

     label1:
        $r3 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r4 = $r3.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z0 = virtualinvoke $r4.<com.android.okhttp.internal.http.HttpEngine: boolean hasResponse()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r8 = $r7.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r9 = virtualinvoke $r8.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Response getResponse()>();

        $r6 = virtualinvoke $r9.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake()>();

        goto label3;

     label2:
        $r5 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r6 = $r5.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.Handshake handshake>;

     label3:
        return $r6;
    }

    public void setHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        javax.net.ssl.HostnameVerifier r1;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r2;
        com.android.okhttp.OkHttpClient $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        $r2 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r3 = $r2.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.OkHttpClient client>;

        virtualinvoke $r3.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)>(r1);

        return;
    }

    public javax.net.ssl.HostnameVerifier getHostnameVerifier()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r1;
        com.android.okhttp.OkHttpClient $r2;
        javax.net.ssl.HostnameVerifier $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r2 = $r1.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.OkHttpClient client>;

        $r3 = virtualinvoke $r2.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier getHostnameVerifier()>();

        return $r3;
    }

    public void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        javax.net.ssl.SSLSocketFactory r1;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r2;
        com.android.okhttp.OkHttpClient $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r2 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r3 = $r2.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.OkHttpClient client>;

        virtualinvoke $r3.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)>(r1);

        return;
    }

    public javax.net.ssl.SSLSocketFactory getSSLSocketFactory()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r1;
        com.android.okhttp.OkHttpClient $r2;
        javax.net.ssl.SSLSocketFactory $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        $r2 = $r1.<com.android.okhttp.internal.http.HttpURLConnectionImpl: com.android.okhttp.OkHttpClient client>;

        $r3 = virtualinvoke $r2.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory getSslSocketFactory()>();

        return $r3;
    }

    public void setFixedLengthStreamingMode(long)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long l0;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: com.android.okhttp.internal.http.HttpURLConnectionImpl delegate>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.HttpURLConnectionImpl: void setFixedLengthStreamingMode(long)>(l0);

        return;
    }

    public volatile void setChunkedStreamingMode(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setChunkedStreamingMode(int)>(i0);

        return;
    }

    public volatile void setFixedLengthStreamingMode(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setFixedLengthStreamingMode(int)>(i0);

        return;
    }

    public volatile java.lang.String toString()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String toString()>();

        return $r1;
    }

    public volatile int getReadTimeout()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $i0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: int getReadTimeout()>();

        return $i0;
    }

    public volatile void setReadTimeout(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setReadTimeout(int)>(i0);

        return;
    }

    public volatile int getConnectTimeout()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $i0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: int getConnectTimeout()>();

        return $i0;
    }

    public volatile void setConnectTimeout(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setConnectTimeout(int)>(i0);

        return;
    }

    public volatile void setUseCaches(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setUseCaches(boolean)>(z0);

        return;
    }

    public volatile void setRequestProperty(java.lang.String, java.lang.String)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public volatile void setIfModifiedSince(long)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long l0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setIfModifiedSince(long)>(l0);

        return;
    }

    public volatile void setDoOutput(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setDoOutput(boolean)>(z0);

        return;
    }

    public volatile void setDoInput(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setDoInput(boolean)>(z0);

        return;
    }

    public volatile void setDefaultUseCaches(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setDefaultUseCaches(boolean)>(z0);

        return;
    }

    public volatile void setAllowUserInteraction(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setAllowUserInteraction(boolean)>(z0);

        return;
    }

    public volatile boolean getUseCaches()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getUseCaches()>();

        return $z0;
    }

    public volatile java.net.URL getURL()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.net.URL $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.net.URL getURL()>();

        return $r1;
    }

    public volatile java.lang.String getRequestProperty(java.lang.String)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getRequestProperty(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.security.Permission getPermission() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.security.Permission $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.security.Permission getPermission()>();

        return $r1;
    }

    public volatile java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.io.OutputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.io.OutputStream getOutputStream()>();

        return $r1;
    }

    public volatile long getLastModified()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $l0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: long getLastModified()>();

        return $l0;
    }

    public volatile java.io.InputStream getInputStream() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.io.InputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.io.InputStream getInputStream()>();

        return $r1;
    }

    public volatile long getIfModifiedSince()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $l0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: long getIfModifiedSince()>();

        return $l0;
    }

    public volatile java.lang.String getHeaderFieldKey(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getHeaderFieldKey(int)>(i0);

        return $r1;
    }

    public volatile int getHeaderFieldInt(java.lang.String, int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: int getHeaderFieldInt(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public volatile long getHeaderFieldDate(java.lang.String, long)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1;
        long l0, $l1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $l1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: long getHeaderFieldDate(java.lang.String,long)>(r1, l0);

        return $l1;
    }

    public volatile java.lang.String getHeaderField(java.lang.String)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getHeaderField(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void addRequestProperty(java.lang.String, java.lang.String)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public volatile java.util.Map getRequestProperties()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.util.Map $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.util.Map getRequestProperties()>();

        return $r1;
    }

    public volatile java.util.Map getHeaderFields()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.util.Map $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.util.Map getHeaderFields()>();

        return $r1;
    }

    public volatile java.lang.String getHeaderField(int)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getHeaderField(int)>(i0);

        return $r1;
    }

    public volatile long getExpiration()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $l0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: long getExpiration()>();

        return $l0;
    }

    public volatile boolean getDoOutput()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getDoOutput()>();

        return $z0;
    }

    public volatile boolean getDoInput()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getDoInput()>();

        return $z0;
    }

    public volatile boolean getDefaultUseCaches()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getDefaultUseCaches()>();

        return $z0;
    }

    public volatile long getDate()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        long $l0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $l0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: long getDate()>();

        return $l0;
    }

    public volatile java.lang.String getContentType()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getContentType()>();

        return $r1;
    }

    public volatile int getContentLength()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $i0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: int getContentLength()>();

        return $i0;
    }

    public volatile java.lang.String getContentEncoding()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getContentEncoding()>();

        return $r1;
    }

    public volatile java.lang.Object getContent(java.lang.Class[]) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.Class[] r1;
        java.lang.Object $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.Class[];

        $r2 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.Object getContent(java.lang.Class[])>(r1);

        return $r2;
    }

    public volatile java.lang.Object getContent() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.Object $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.Object getContent()>();

        return $r1;
    }

    public volatile boolean getAllowUserInteraction()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getAllowUserInteraction()>();

        return $z0;
    }

    public volatile void setInstanceFollowRedirects(boolean)
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setInstanceFollowRedirects(boolean)>(z0);

        return;
    }

    public volatile boolean getInstanceFollowRedirects()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean getInstanceFollowRedirects()>();

        return $z0;
    }

    public volatile boolean usingProxy()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $z0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: boolean usingProxy()>();

        return $z0;
    }

    public volatile void setRequestMethod(java.lang.String) throws java.net.ProtocolException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void setRequestMethod(java.lang.String)>(r1);

        return;
    }

    public volatile java.lang.String getResponseMessage() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getResponseMessage()>();

        return $r1;
    }

    public volatile int getResponseCode() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $i0 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: int getResponseCode()>();

        return $i0;
    }

    public volatile java.lang.String getRequestMethod()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getRequestMethod()>();

        return $r1;
    }

    public volatile java.io.InputStream getErrorStream()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.io.InputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.io.InputStream getErrorStream()>();

        return $r1;
    }

    public volatile void disconnect()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void disconnect()>();

        return;
    }

    public volatile void connect() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: void connect()>();

        return;
    }

    public volatile java.security.Principal getLocalPrincipal()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.security.Principal $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.security.Principal getLocalPrincipal()>();

        return $r1;
    }

    public volatile java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.security.Principal $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.security.Principal getPeerPrincipal()>();

        return $r1;
    }

    public volatile java.security.cert.Certificate[] getServerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.security.cert.Certificate[] $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.security.cert.Certificate[] getServerCertificates()>();

        return $r1;
    }

    public volatile java.security.cert.Certificate[] getLocalCertificates()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.security.cert.Certificate[] $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.security.cert.Certificate[] getLocalCertificates()>();

        return $r1;
    }

    public volatile java.lang.String getCipherSuite()
    {
        com.android.okhttp.internal.http.HttpsURLConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        $r1 = specialinvoke r0.<com.android.okhttp.internal.http.DelegatingHttpsURLConnection: java.lang.String getCipherSuite()>();

        return $r1;
    }
}
