public final class com.android.okhttp.internal.BitArray$VariableCapacity extends java.lang.Object implements com.android.okhttp.internal.BitArray
{
    long[] data;
    private int start;

    public void <init>()
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        long[] $r1;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[1];

        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data> = $r1;

        return;
    }

    private void <init>(com.android.okhttp.internal.BitArray$FixedCapacity)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        com.android.okhttp.internal.BitArray$FixedCapacity r1;
        long[] $r2;
        long $l0;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        r1 := @parameter0: com.android.okhttp.internal.BitArray$FixedCapacity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (long)[2];

        $l0 = r1.<com.android.okhttp.internal.BitArray$FixedCapacity: long data>;

        $r2[0] = $l0;

        $r2[1] = 0L;

        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data> = $r2;

        return;
    }

    private void growToSize(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, $i1;
        long[] r1, $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        r1 = newarray (long)[i0];

        $r2 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $r3 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(long[],int,long[],int,int)>($r4, 0, r1, 0, $i1);

     label1:
        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data> = r1;

        return;
    }

    private int offsetOf(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        long[] $r1;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        i6 = i0 + $i2;

        i1 = i6 / 64;

        $r1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $i3 = lengthof $r1;

        $i4 = $i3 - 1;

        if i1 <= $i4 goto label1;

        $i5 = i1 + 1;

        specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: void growToSize(int)>($i5);

     label1:
        return i1;
    }

    private int shiftOf(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        $i2 = i0 + $i1;

        $i3 = $i2 % 64;

        return $i3;
    }

    public void clear()
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        long[] $r1;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        $r1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        return;
    }

    public void set(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, i1, $i4;
        long[] $r1;
        long $l3, $l5, $l6;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        staticinvoke <com.android.okhttp.internal.BitArray$VariableCapacity: int checkInput(int)>(i0);

        i1 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int offsetOf(int)>(i0);

        $r1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $l3 = $r1[i1];

        $i4 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int shiftOf(int)>(i0);

        $l5 = 1L << $i4;

        $l6 = $l3 | $l5;

        $r1[i1] = $l6;

        return;
    }

    public void toggle(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, i1, $i4;
        long[] $r1;
        long $l3, $l5, $l6;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        staticinvoke <com.android.okhttp.internal.BitArray$VariableCapacity: int checkInput(int)>(i0);

        i1 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int offsetOf(int)>(i0);

        $r1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $l3 = $r1[i1];

        $i4 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int shiftOf(int)>(i0);

        $l5 = 1L << $i4;

        $l6 = $l3 ^ $l5;

        $r1[i1] = $l6;

        return;
    }

    public boolean get(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, i1, $i4;
        long[] $r1;
        long $l3, $l5, $l6;
        byte $b7;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        staticinvoke <com.android.okhttp.internal.BitArray$VariableCapacity: int checkInput(int)>(i0);

        i1 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int offsetOf(int)>(i0);

        $r1 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $l3 = $r1[i1];

        $i4 = specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int shiftOf(int)>(i0);

        $l5 = 1L << $i4;

        $l6 = $l3 & $l5;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void shiftLeft(int)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long[] r1, $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        $i3 = staticinvoke <com.android.okhttp.internal.BitArray$VariableCapacity: int checkInput(int)>(i0);

        $i4 = $i2 - $i3;

        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start> = $i4;

        $i5 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        if $i5 >= 0 goto label1;

        $i6 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        $i7 = $i6 / -64;

        i1 = $i7 + 1;

        $r2 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $i8 = lengthof $r2;

        $i9 = $i8 + i1;

        r1 = newarray (long)[$i9];

        $r4 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $r3 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $i10 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(long[],int,long[],int,int)>($r4, 0, r1, i1, $i10);

        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data> = r1;

        $i12 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        $i11 = $i12 % 64;

        $i13 = 64 + $i11;

        r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start> = $i13;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        java.lang.StringBuilder r1, $r3, $r4;
        java.util.List r2;
        int i0, i1;
        java.lang.String $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("{");

        r1 = $r3;

        r2 = virtualinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: java.util.List toIntegerList()>();

        i0 = 0;

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    java.util.List toIntegerList()
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        java.util.ArrayList r1, $r2;
        int i0, i1, $i2, $i3, $i4;
        long[] $r3;
        boolean $z0;
        java.lang.Integer $r4;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        i0 = 0;

        $r3 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: long[] data>;

        $i2 = lengthof $r3;

        $i4 = $i2 * 64;

        $i3 = r0.<com.android.okhttp.internal.BitArray$VariableCapacity: int start>;

        i1 = $i4 - $i3;

     label1:
        if i0 >= i1 goto label3;

        $z0 = virtualinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: boolean get(int)>(i0);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r1;
    }

    private static int checkInput(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("input must be a positive number: %s", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label1:
        return i0;
    }

    void <init>(com.android.okhttp.internal.BitArray$FixedCapacity, com.android.okhttp.internal.BitArray$1)
    {
        com.android.okhttp.internal.BitArray$VariableCapacity r0;
        com.android.okhttp.internal.BitArray$FixedCapacity r1;
        com.android.okhttp.internal.BitArray$1 r2;

        r0 := @this: com.android.okhttp.internal.BitArray$VariableCapacity;

        r1 := @parameter0: com.android.okhttp.internal.BitArray$FixedCapacity;

        r2 := @parameter1: com.android.okhttp.internal.BitArray$1;

        specialinvoke r0.<com.android.okhttp.internal.BitArray$VariableCapacity: void <init>(com.android.okhttp.internal.BitArray$FixedCapacity)>(r1);

        return;
    }
}
