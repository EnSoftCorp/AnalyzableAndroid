public final class com.android.okhttp.Connection extends java.lang.Object implements java.io.Closeable
{
    private final com.android.okhttp.ConnectionPool pool;
    private final com.android.okhttp.Route route;
    private java.net.Socket socket;
    private boolean connected;
    private com.android.okhttp.internal.http.HttpConnection httpConnection;
    private com.android.okhttp.internal.spdy.SpdyConnection spdyConnection;
    private int httpMinorVersion;
    private long idleStartTimeNs;
    private com.android.okhttp.Handshake handshake;
    private int recycleCount;
    private java.lang.Object owner;

    public void <init>(com.android.okhttp.ConnectionPool, com.android.okhttp.Route)
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.ConnectionPool r1;
        com.android.okhttp.Route r2;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: com.android.okhttp.ConnectionPool;

        r2 := @parameter1: com.android.okhttp.Route;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.Connection: boolean connected> = 0;

        r0.<com.android.okhttp.Connection: int httpMinorVersion> = 1;

        r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool> = r1;

        r0.<com.android.okhttp.Connection: com.android.okhttp.Route route> = r2;

        return;
    }

    public java.lang.Object getOwner()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.ConnectionPool r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.Object $r4;

        r0 := @this: com.android.okhttp.Connection;

        $r3 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.okhttp.Connection: java.lang.Object owner>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setOwner(java.lang.Object)
    {
        com.android.okhttp.Connection r0;
        java.lang.Object r1, $r5;
        com.android.okhttp.ConnectionPool r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.android.okhttp.Connection: boolean isSpdy()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.okhttp.Connection: java.lang.Object owner>;

        if $r5 == null goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection already has an owner!");

        throw $r6;

     label3:
        r0.<com.android.okhttp.Connection: java.lang.Object owner> = r1;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean clearOwner()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.ConnectionPool r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.Object $r4;

        r0 := @this: com.android.okhttp.Connection;

        $r3 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.okhttp.Connection: java.lang.Object owner>;

        if $r4 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        r0.<com.android.okhttp.Connection: java.lang.Object owner> = null;

        exitmonitor r1;

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void closeIfOwnedBy(java.lang.Object) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        java.lang.Object r1, $r5;
        com.android.okhttp.ConnectionPool r2, $r4;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        java.net.Socket $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.android.okhttp.Connection: boolean isSpdy()>();

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        $r4 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.okhttp.Connection: java.lang.Object owner>;

        if $r5 == r1 goto label4;

        exitmonitor r2;

     label3:
        return;

     label4:
        r0.<com.android.okhttp.Connection: java.lang.Object owner> = null;

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r6 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        virtualinvoke $r6.<java.net.Socket: void close()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void connect(int, int, com.android.okhttp.TunnelRequest) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        int i0, i1;
        com.android.okhttp.TunnelRequest r1;
        boolean $z0;
        com.android.okhttp.Route $r2, $r6, $r12, $r16, $r22, $r25;
        java.net.Proxy $r3, $r21, $r28;
        java.net.Proxy$Type $r4, $r5, $r23, $r24;
        com.android.okhttp.Address $r7, $r15;
        javax.net.SocketFactory $r8;
        java.net.Socket $r9, $r10, $r13, $r20, $r26;
        com.android.okhttp.internal.Platform $r11;
        java.net.InetSocketAddress $r14;
        com.android.okhttp.internal.http.HttpConnection $r17;
        javax.net.ssl.SSLSocketFactory $r18;
        com.android.okhttp.ConnectionPool $r19;
        java.lang.IllegalStateException $r27;

        r0 := @this: com.android.okhttp.Connection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.okhttp.TunnelRequest;

        $z0 = r0.<com.android.okhttp.Connection: boolean connected>;

        if $z0 == 0 goto label1;

        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already connected");

        throw $r27;

     label1:
        $r2 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r3 = $r2.<com.android.okhttp.Route: java.net.Proxy proxy>;

        $r4 = virtualinvoke $r3.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r5 = <java.net.Proxy$Type: java.net.Proxy$Type DIRECT>;

        if $r4 == $r5 goto label2;

        $r22 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r21 = $r22.<com.android.okhttp.Route: java.net.Proxy proxy>;

        $r24 = virtualinvoke $r21.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r23 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r24 != $r23 goto label3;

     label2:
        $r6 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r7 = $r6.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r8 = $r7.<com.android.okhttp.Address: javax.net.SocketFactory socketFactory>;

        $r9 = virtualinvoke $r8.<javax.net.SocketFactory: java.net.Socket createSocket()>();

        r0.<com.android.okhttp.Connection: java.net.Socket socket> = $r9;

        goto label4;

     label3:
        $r26 = new java.net.Socket;

        $r25 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r28 = $r25.<com.android.okhttp.Route: java.net.Proxy proxy>;

        specialinvoke $r26.<java.net.Socket: void <init>(java.net.Proxy)>($r28);

        r0.<com.android.okhttp.Connection: java.net.Socket socket> = $r26;

     label4:
        $r10 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        virtualinvoke $r10.<java.net.Socket: void setSoTimeout(int)>(i1);

        $r11 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $r13 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        $r12 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r14 = $r12.<com.android.okhttp.Route: java.net.InetSocketAddress inetSocketAddress>;

        virtualinvoke $r11.<com.android.okhttp.internal.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r13, $r14, i0);

        $r16 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r15 = $r16.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r18 = $r15.<com.android.okhttp.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r18 == null goto label5;

        specialinvoke r0.<com.android.okhttp.Connection: void upgradeToTls(com.android.okhttp.TunnelRequest)>(r1);

        goto label6;

     label5:
        $r17 = new com.android.okhttp.internal.http.HttpConnection;

        $r19 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        $r20 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        specialinvoke $r17.<com.android.okhttp.internal.http.HttpConnection: void <init>(com.android.okhttp.ConnectionPool,com.android.okhttp.Connection,java.net.Socket)>($r19, r0, $r20);

        r0.<com.android.okhttp.Connection: com.android.okhttp.internal.http.HttpConnection httpConnection> = $r17;

     label6:
        r0.<com.android.okhttp.Connection: boolean connected> = 1;

        return;
    }

    private void upgradeToTls(com.android.okhttp.TunnelRequest) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.TunnelRequest r1;
        com.android.okhttp.internal.Platform r2;
        javax.net.ssl.SSLSocket r3;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        com.android.okhttp.Route $r4, $r6, $r8, $r14, $r16, $r17, $r18, $r32, $r44, $r46, $r49, $r55;
        com.android.okhttp.Address $r5, $r7, $r9, $r19, $r21, $r33, $r43, $r45, $r56, $r59;
        int $i0;
        java.net.Socket $r10, $r12, $r15, $r29, $r31;
        java.lang.String $r11, $r23, $r30, $r42, $r47, $r60;
        javax.net.ssl.SSLSocketFactory $r13;
        javax.net.ssl.HostnameVerifier $r20;
        javax.net.ssl.SSLSession $r22, $r25;
        com.android.okhttp.Handshake $r24;
        com.android.okhttp.ConnectionPool $r26;
        com.android.okhttp.internal.spdy.SpdyConnection$Builder $r27, $r36;
        com.android.okhttp.internal.http.HttpConnection $r28;
        com.android.okhttp.internal.spdy.SpdyConnection $r34, $r37;
        com.android.okio.ByteString $r35, r62;
        java.lang.StringBuilder $r38, $r39, $r41, $r48;
        java.io.IOException $r40;
        java.util.List $r50, $r52, $r53, $r54, $r58;
        com.android.okhttp.Protocol $r51, $r57, r61;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: com.android.okhttp.TunnelRequest;

        r2 = staticinvoke <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform get()>();

        $z3 = virtualinvoke r0.<com.android.okhttp.Connection: boolean requiresTunnel()>();

        if $z3 == 0 goto label01;

        specialinvoke r0.<com.android.okhttp.Connection: void makeTunnel(com.android.okhttp.TunnelRequest)>(r1);

     label01:
        $r4 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r5 = $r4.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r13 = $r5.<com.android.okhttp.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r10 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        $r6 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r7 = $r6.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r11 = $r7.<com.android.okhttp.Address: java.lang.String uriHost>;

        $r8 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r9 = $r8.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $i0 = $r9.<com.android.okhttp.Address: int uriPort>;

        $r12 = virtualinvoke $r13.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r10, $r11, $i0, 1);

        r0.<com.android.okhttp.Connection: java.net.Socket socket> = $r12;

        $r15 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        r3 = (javax.net.ssl.SSLSocket) $r15;

        $r14 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $z4 = $r14.<com.android.okhttp.Route: boolean modernTls>;

        if $z4 == 0 goto label02;

        $r55 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r59 = $r55.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r60 = $r59.<com.android.okhttp.Address: java.lang.String uriHost>;

        virtualinvoke r2.<com.android.okhttp.internal.Platform: void enableTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String)>(r3, $r60);

        goto label03;

     label02:
        virtualinvoke r2.<com.android.okhttp.internal.Platform: void supportTlsIntolerantServer(javax.net.ssl.SSLSocket)>(r3);

     label03:
        z0 = 0;

        $r16 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $z5 = $r16.<com.android.okhttp.Route: boolean modernTls>;

        if $z5 == 0 goto label06;

        $r46 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r45 = $r46.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r50 = $r45.<com.android.okhttp.Address: java.util.List protocols>;

        $r51 = <com.android.okhttp.Protocol: com.android.okhttp.Protocol HTTP_2>;

        z1 = interfaceinvoke $r50.<java.util.List: boolean contains(java.lang.Object)>($r51);

        $r49 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r56 = $r49.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r58 = $r56.<com.android.okhttp.Address: java.util.List protocols>;

        $r57 = <com.android.okhttp.Protocol: com.android.okhttp.Protocol SPDY_3>;

        z2 = interfaceinvoke $r58.<java.util.List: boolean contains(java.lang.Object)>($r57);

        if z1 == 0 goto label04;

        if z2 == 0 goto label04;

        $r54 = <com.android.okhttp.Protocol: java.util.List HTTP2_SPDY3_AND_HTTP>;

        virtualinvoke r2.<com.android.okhttp.internal.Platform: void setNpnProtocols(javax.net.ssl.SSLSocket,java.util.List)>(r3, $r54);

        z0 = 1;

        goto label06;

     label04:
        if z1 == 0 goto label05;

        $r53 = <com.android.okhttp.Protocol: java.util.List HTTP2_AND_HTTP_11>;

        virtualinvoke r2.<com.android.okhttp.internal.Platform: void setNpnProtocols(javax.net.ssl.SSLSocket,java.util.List)>(r3, $r53);

        z0 = 1;

        goto label06;

     label05:
        if z2 == 0 goto label06;

        $r52 = <com.android.okhttp.Protocol: java.util.List SPDY3_AND_HTTP11>;

        virtualinvoke r2.<com.android.okhttp.internal.Platform: void setNpnProtocols(javax.net.ssl.SSLSocket,java.util.List)>(r3, $r52);

        z0 = 1;

     label06:
        virtualinvoke r3.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r17 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r19 = $r17.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r20 = $r19.<com.android.okhttp.Address: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        $r18 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r21 = $r18.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r23 = $r21.<com.android.okhttp.Address: java.lang.String uriHost>;

        $r22 = virtualinvoke r3.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $z7 = interfaceinvoke $r20.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r23, $r22);

        if $z7 != 0 goto label07;

        $r40 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hostname \'");

        $r44 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r43 = $r44.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r42 = $r43.<com.android.okhttp.Address: java.lang.String uriHost>;

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r48 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not verified");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>($r47);

        throw $r40;

     label07:
        $r25 = virtualinvoke r3.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r24 = staticinvoke <com.android.okhttp.Handshake: com.android.okhttp.Handshake get(javax.net.ssl.SSLSession)>($r25);

        r0.<com.android.okhttp.Connection: com.android.okhttp.Handshake handshake> = $r24;

        r61 = <com.android.okhttp.Protocol: com.android.okhttp.Protocol HTTP_11>;

        if z0 == 0 goto label08;

        $r35 = virtualinvoke r2.<com.android.okhttp.internal.Platform: com.android.okio.ByteString getNpnSelectedProtocol(javax.net.ssl.SSLSocket)>(r3);

        r62 = $r35;

        if $r35 == null goto label08;

        r61 = staticinvoke <com.android.okhttp.Protocol: com.android.okhttp.Protocol find(com.android.okio.ByteString)>(r62);

     label08:
        $z6 = r61.<com.android.okhttp.Protocol: boolean spdyVariant>;

        if $z6 == 0 goto label09;

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(0);

        $r27 = new com.android.okhttp.internal.spdy.SpdyConnection$Builder;

        $r32 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r33 = $r32.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r30 = virtualinvoke $r33.<com.android.okhttp.Address: java.lang.String getUriHost()>();

        $r31 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        specialinvoke $r27.<com.android.okhttp.internal.spdy.SpdyConnection$Builder: void <init>(java.lang.String,boolean,java.net.Socket)>($r30, 1, $r31);

        $r36 = virtualinvoke $r27.<com.android.okhttp.internal.spdy.SpdyConnection$Builder: com.android.okhttp.internal.spdy.SpdyConnection$Builder protocol(com.android.okhttp.Protocol)>(r61);

        $r37 = virtualinvoke $r36.<com.android.okhttp.internal.spdy.SpdyConnection$Builder: com.android.okhttp.internal.spdy.SpdyConnection build()>();

        r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection> = $r37;

        $r34 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        virtualinvoke $r34.<com.android.okhttp.internal.spdy.SpdyConnection: void sendConnectionHeader()>();

        goto label10;

     label09:
        $r28 = new com.android.okhttp.internal.http.HttpConnection;

        $r26 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        $r29 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        specialinvoke $r28.<com.android.okhttp.internal.http.HttpConnection: void <init>(com.android.okhttp.ConnectionPool,com.android.okhttp.Connection,java.net.Socket)>($r26, r0, $r29);

        r0.<com.android.okhttp.Connection: com.android.okhttp.internal.http.HttpConnection httpConnection> = $r28;

     label10:
        return;
    }

    public boolean isConnected()
    {
        com.android.okhttp.Connection r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.Connection;

        $z0 = r0.<com.android.okhttp.Connection: boolean connected>;

        return $z0;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        java.net.Socket $r1, $r2;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void close()>();

     label1:
        return;
    }

    public com.android.okhttp.Route getRoute()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.Route $r1;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        return $r1;
    }

    public java.net.Socket getSocket()
    {
        com.android.okhttp.Connection r0;
        java.net.Socket $r1;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        return $r1;
    }

    public boolean isAlive()
    {
        com.android.okhttp.Connection r0;
        java.net.Socket $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        $z1 = virtualinvoke $r2.<java.net.Socket: boolean isInputShutdown()>();

        if $z1 != 0 goto label1;

        $r3 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        $z2 = virtualinvoke $r3.<java.net.Socket: boolean isOutputShutdown()>();

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean isReadable()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.http.HttpConnection $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $z0 = virtualinvoke $r2.<com.android.okhttp.internal.http.HttpConnection: boolean isReadable()>();

        return $z0;

     label1:
        return 1;
    }

    public void resetIdleStartTime()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.spdy.SpdyConnection $r1;
        long $l0;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("spdyConnection != null");

        throw $r2;

     label1:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.android.okhttp.Connection: long idleStartTimeNs> = $l0;

        return;
    }

    public boolean isIdle()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.spdy.SpdyConnection $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        $z0 = virtualinvoke $r2.<com.android.okhttp.internal.spdy.SpdyConnection: boolean isIdle()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isExpired(long)
    {
        com.android.okhttp.Connection r0;
        long l0, $l1, $l2, $l3;
        byte $b4;
        boolean $z0;

        r0 := @this: com.android.okhttp.Connection;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<com.android.okhttp.Connection: long getIdleStartTimeNs()>();

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l2 - l0;

        $b4 = $l1 cmp $l3;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getIdleStartTimeNs()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.spdy.SpdyConnection $r1, $r2;
        long $l0;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        if $r1 != null goto label1;

        $l0 = r0.<com.android.okhttp.Connection: long idleStartTimeNs>;

        goto label2;

     label1:
        $r2 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        $l0 = virtualinvoke $r2.<com.android.okhttp.internal.spdy.SpdyConnection: long getIdleStartTimeNs()>();

     label2:
        return $l0;
    }

    public com.android.okhttp.Handshake getHandshake()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.Handshake $r1;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.Handshake handshake>;

        return $r1;
    }

    public java.lang.Object newTransport(com.android.okhttp.internal.http.HttpEngine) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.http.HttpEngine r1;
        com.android.okhttp.internal.spdy.SpdyConnection $r2, $r5;
        com.android.okhttp.internal.http.Transport $r3;
        com.android.okhttp.internal.http.HttpConnection $r4;
        com.android.okhttp.internal.http.SpdyTransport r6;
        com.android.okhttp.internal.http.HttpTransport r7;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: com.android.okhttp.internal.http.HttpEngine;

        $r2 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        if $r2 == null goto label1;

        r6 = new com.android.okhttp.internal.http.SpdyTransport;

        $r3 = r6;

        $r5 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        specialinvoke r6.<com.android.okhttp.internal.http.SpdyTransport: void <init>(com.android.okhttp.internal.http.HttpEngine,com.android.okhttp.internal.spdy.SpdyConnection)>(r1, $r5);

        goto label2;

     label1:
        r7 = new com.android.okhttp.internal.http.HttpTransport;

        $r3 = r7;

        $r4 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        specialinvoke r7.<com.android.okhttp.internal.http.HttpTransport: void <init>(com.android.okhttp.internal.http.HttpEngine,com.android.okhttp.internal.http.HttpConnection)>(r1, $r4);

     label2:
        return $r3;
    }

    public boolean isSpdy()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.internal.spdy.SpdyConnection $r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.internal.spdy.SpdyConnection spdyConnection>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getHttpMinorVersion()
    {
        com.android.okhttp.Connection r0;
        int $i0;

        r0 := @this: com.android.okhttp.Connection;

        $i0 = r0.<com.android.okhttp.Connection: int httpMinorVersion>;

        return $i0;
    }

    public void setHttpMinorVersion(int)
    {
        com.android.okhttp.Connection r0;
        int i0;

        r0 := @this: com.android.okhttp.Connection;

        i0 := @parameter0: int;

        r0.<com.android.okhttp.Connection: int httpMinorVersion> = i0;

        return;
    }

    public boolean requiresTunnel()
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.Route $r1, $r4;
        com.android.okhttp.Address $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Proxy $r5;
        java.net.Proxy$Type $r6, $r7;
        boolean $z0;

        r0 := @this: com.android.okhttp.Connection;

        $r1 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r2 = $r1.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r3 = $r2.<com.android.okhttp.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r5 = $r4.<com.android.okhttp.Route: java.net.Proxy proxy>;

        $r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r7 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r6 != $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void updateReadTimeout(int) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        int i0;
        boolean $z0;
        java.net.Socket $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.okhttp.Connection;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.okhttp.Connection: boolean connected>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("updateReadTimeout - not connected");

        throw $r2;

     label1:
        $r1 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>(i0);

        return;
    }

    public void incrementRecycleCount()
    {
        com.android.okhttp.Connection r0;
        int $i0, $i1;

        r0 := @this: com.android.okhttp.Connection;

        $i0 = r0.<com.android.okhttp.Connection: int recycleCount>;

        $i1 = $i0 + 1;

        r0.<com.android.okhttp.Connection: int recycleCount> = $i1;

        return;
    }

    public int recycleCount()
    {
        com.android.okhttp.Connection r0;
        int $i0;

        r0 := @this: com.android.okhttp.Connection;

        $i0 = r0.<com.android.okhttp.Connection: int recycleCount>;

        return $i0;
    }

    private void makeTunnel(com.android.okhttp.TunnelRequest) throws java.io.IOException
    {
        com.android.okhttp.Connection r0;
        com.android.okhttp.TunnelRequest r1;
        com.android.okhttp.internal.http.HttpConnection r2, $r6;
        com.android.okhttp.Request r3;
        java.lang.String r4, $r22;
        com.android.okhttp.Response r5;
        java.net.Socket $r7;
        com.android.okhttp.ConnectionPool $r8;
        com.android.okhttp.Headers $r9;
        com.android.okhttp.Response$Builder $r10, $r11;
        int $i0, $i3;
        com.android.okhttp.Address $r12;
        com.android.okhttp.Route $r13, $r15;
        java.net.Proxy $r14;
        com.android.okhttp.OkAuthenticator $r16;
        long $l1;
        java.io.IOException $r17, $r18, $r20;
        byte $b2;
        java.lang.StringBuilder $r19, $r21, $r23;

        r0 := @this: com.android.okhttp.Connection;

        r1 := @parameter0: com.android.okhttp.TunnelRequest;

        $r6 = new com.android.okhttp.internal.http.HttpConnection;

        $r8 = r0.<com.android.okhttp.Connection: com.android.okhttp.ConnectionPool pool>;

        $r7 = r0.<com.android.okhttp.Connection: java.net.Socket socket>;

        specialinvoke $r6.<com.android.okhttp.internal.http.HttpConnection: void <init>(com.android.okhttp.ConnectionPool,com.android.okhttp.Connection,java.net.Socket)>($r8, r0, $r7);

        r2 = $r6;

        r3 = virtualinvoke r1.<com.android.okhttp.TunnelRequest: com.android.okhttp.Request getRequest()>();

        r4 = virtualinvoke r1.<com.android.okhttp.TunnelRequest: java.lang.String requestLine()>();

     label1:
        $r9 = virtualinvoke r3.<com.android.okhttp.Request: com.android.okhttp.Headers headers()>();

        virtualinvoke r2.<com.android.okhttp.internal.http.HttpConnection: void writeRequest(com.android.okhttp.Headers,java.lang.String)>($r9, r4);

        virtualinvoke r2.<com.android.okhttp.internal.http.HttpConnection: void flush()>();

        $r10 = virtualinvoke r2.<com.android.okhttp.internal.http.HttpConnection: com.android.okhttp.Response$Builder readResponse()>();

        $r11 = virtualinvoke $r10.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder request(com.android.okhttp.Request)>(r3);

        r5 = virtualinvoke $r11.<com.android.okhttp.Response$Builder: com.android.okhttp.Response build()>();

        virtualinvoke r2.<com.android.okhttp.internal.http.HttpConnection: void emptyResponseBody()>();

        $i0 = virtualinvoke r5.<com.android.okhttp.Response: int code()>();

        lookupswitch($i0)
        {
            case 200: goto label2;
            case 407: goto label4;
            default: goto label6;
        };

     label2:
        $l1 = virtualinvoke r2.<com.android.okhttp.internal.http.HttpConnection: long bufferSize()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("TLS tunnel buffered too many bytes!");

        throw $r18;

     label3:
        return;

     label4:
        $r13 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r12 = $r13.<com.android.okhttp.Route: com.android.okhttp.Address address>;

        $r16 = $r12.<com.android.okhttp.Address: com.android.okhttp.OkAuthenticator authenticator>;

        $r15 = r0.<com.android.okhttp.Connection: com.android.okhttp.Route route>;

        $r14 = $r15.<com.android.okhttp.Route: java.net.Proxy proxy>;

        r3 = staticinvoke <com.android.okhttp.internal.http.HttpAuthenticator: com.android.okhttp.Request processAuthHeader(com.android.okhttp.OkAuthenticator,com.android.okhttp.Response,java.net.Proxy)>($r16, r5, $r14);

        if r3 == null goto label5;

        goto label1;

     label5:
        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Failed to authenticate with proxy");

        throw $r17;

     label6:
        $r20 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected response code for CONNECT: ");

        $i3 = virtualinvoke r5.<com.android.okhttp.Response: int code()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r20;
    }
}
