public final class com.android.okhttp.Response extends java.lang.Object
{
    private final com.android.okhttp.Request request;
    private final com.android.okhttp.internal.http.StatusLine statusLine;
    private final com.android.okhttp.Handshake handshake;
    private final com.android.okhttp.Headers headers;
    private final com.android.okhttp.Response$Body body;
    private com.android.okhttp.Response networkResponse;
    private com.android.okhttp.Response cacheResponse;
    private final com.android.okhttp.Response priorResponse;
    private volatile com.android.okhttp.Response$ParsedHeaders parsedHeaders;
    private volatile com.android.okhttp.CacheControl cacheControl;

    private void <init>(com.android.okhttp.Response$Builder)
    {
        com.android.okhttp.Response r0, $r8, $r9, $r10;
        com.android.okhttp.Response$Builder r1;
        com.android.okhttp.Request $r2;
        com.android.okhttp.internal.http.StatusLine $r3;
        com.android.okhttp.Handshake $r4;
        com.android.okhttp.Headers$Builder $r5;
        com.android.okhttp.Headers $r6;
        com.android.okhttp.Response$Body $r7;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: com.android.okhttp.Response$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Request access$000(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Request request> = $r2;

        $r3 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.internal.http.StatusLine access$100(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine> = $r3;

        $r4 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Handshake access$200(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake> = $r4;

        $r5 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Headers$Builder access$300(com.android.okhttp.Response$Builder)>(r1);

        $r6 = virtualinvoke $r5.<com.android.okhttp.Headers$Builder: com.android.okhttp.Headers build()>();

        r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers> = $r6;

        $r7 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Response$Body access$400(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Response$Body body> = $r7;

        $r8 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Response access$500(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Response networkResponse> = $r8;

        $r9 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Response access$600(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Response cacheResponse> = $r9;

        $r10 = staticinvoke <com.android.okhttp.Response$Builder: com.android.okhttp.Response access$700(com.android.okhttp.Response$Builder)>(r1);

        r0.<com.android.okhttp.Response: com.android.okhttp.Response priorResponse> = $r10;

        return;
    }

    public com.android.okhttp.Request request()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Request $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Request request>;

        return $r1;
    }

    public java.lang.String statusLine()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.internal.http.StatusLine $r1;
        java.lang.String $r2;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.http.StatusLine: java.lang.String getStatusLine()>();

        return $r2;
    }

    public int code()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.internal.http.StatusLine $r1;
        int $i0;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.internal.http.StatusLine: int code()>();

        return $i0;
    }

    public java.lang.String statusMessage()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.internal.http.StatusLine $r1;
        java.lang.String $r2;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.http.StatusLine: java.lang.String message()>();

        return $r2;
    }

    public int httpMinorVersion()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.internal.http.StatusLine $r1;
        int $i0;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.internal.http.StatusLine: int httpMinorVersion()>();

        return $i0;
    }

    public com.android.okhttp.Handshake handshake()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Handshake $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake>;

        return $r1;
    }

    public java.util.List headers(java.lang.String)
    {
        com.android.okhttp.Response r0;
        java.lang.String r1;
        com.android.okhttp.Headers $r2;
        java.util.List $r3;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        $r3 = virtualinvoke $r2.<com.android.okhttp.Headers: java.util.List values(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String header(java.lang.String)
    {
        com.android.okhttp.Response r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.okhttp.Response: java.lang.String header(java.lang.String,java.lang.String)>(r1, null);

        return $r2;
    }

    public java.lang.String header(java.lang.String, java.lang.String)
    {
        com.android.okhttp.Response r0;
        java.lang.String r1, r2, r3, $r5;
        com.android.okhttp.Headers $r4;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        r3 = virtualinvoke $r4.<com.android.okhttp.Headers: java.lang.String get(java.lang.String)>(r1);

        if r3 == null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        $r5 = r2;

     label2:
        return $r5;
    }

    public com.android.okhttp.Headers headers()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Headers $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        return $r1;
    }

    public com.android.okhttp.Response$Body body()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$Body $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response$Body body>;

        return $r1;
    }

    public com.android.okhttp.Response$Builder newBuilder()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$Builder $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = new com.android.okhttp.Response$Builder;

        specialinvoke $r1.<com.android.okhttp.Response$Builder: void <init>(com.android.okhttp.Response,com.android.okhttp.Response$1)>(r0, null);

        return $r1;
    }

    public com.android.okhttp.Response priorResponse()
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response priorResponse>;

        return $r1;
    }

    public com.android.okhttp.Response networkResponse()
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response networkResponse>;

        return $r1;
    }

    public com.android.okhttp.Response cacheResponse()
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @this: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response cacheResponse>;

        return $r1;
    }

    public java.util.Set getVaryFields()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$ParsedHeaders $r1;
        java.util.Set $r2;

        r0 := @this: com.android.okhttp.Response;

        $r1 = specialinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r2 = staticinvoke <com.android.okhttp.Response$ParsedHeaders: java.util.Set access$900(com.android.okhttp.Response$ParsedHeaders)>($r1);

        return $r2;
    }

    public boolean hasVaryAll()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$ParsedHeaders $r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.android.okhttp.Response;

        $r1 = specialinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r2 = staticinvoke <com.android.okhttp.Response$ParsedHeaders: java.util.Set access$900(com.android.okhttp.Response$ParsedHeaders)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>("*");

        return $z0;
    }

    public boolean varyMatches(com.android.okhttp.Headers, com.android.okhttp.Request)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Headers r1;
        com.android.okhttp.Request r2;
        java.util.Iterator r3;
        java.lang.String r4;
        com.android.okhttp.Response$ParsedHeaders $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.util.List $r8, $r9;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: com.android.okhttp.Headers;

        r2 := @parameter1: com.android.okhttp.Request;

        $r5 = specialinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r6 = staticinvoke <com.android.okhttp.Response$ParsedHeaders: java.util.Set access$900(com.android.okhttp.Response$ParsedHeaders)>($r5);

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $r8 = virtualinvoke r1.<com.android.okhttp.Headers: java.util.List values(java.lang.String)>(r4);

        $r9 = virtualinvoke r2.<com.android.okhttp.Request: java.util.List headers(java.lang.String)>(r4);

        $z1 = staticinvoke <com.android.okhttp.internal.Util: boolean equal(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean validate(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0, r1;
        com.android.okhttp.Response$ParsedHeaders r2, $r3, $r7;
        int $i0;
        java.util.Date $r4, $r5, $r6, $r8;
        long $l1, $l2;
        byte $b3;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: com.android.okhttp.Response;

        $i0 = virtualinvoke r1.<com.android.okhttp.Response: int code()>();

        if $i0 != 304 goto label1;

        return 1;

     label1:
        r2 = specialinvoke r1.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r3 = specialinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r4 = $r3.<com.android.okhttp.Response$ParsedHeaders: java.util.Date lastModified>;

        if $r4 == null goto label2;

        $r5 = r2.<com.android.okhttp.Response$ParsedHeaders: java.util.Date lastModified>;

        if $r5 == null goto label2;

        $r6 = r2.<com.android.okhttp.Response$ParsedHeaders: java.util.Date lastModified>;

        $l1 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $r7 = specialinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders()>();

        $r8 = $r7.<com.android.okhttp.Response$ParsedHeaders: java.util.Date lastModified>;

        $l2 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private com.android.okhttp.Response$ParsedHeaders parsedHeaders()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$ParsedHeaders r1, $r2;
        com.android.okhttp.Headers $r3;

        r0 := @this: com.android.okhttp.Response;

        r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new com.android.okhttp.Response$ParsedHeaders;

        $r3 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        specialinvoke $r2.<com.android.okhttp.Response$ParsedHeaders: void <init>(com.android.okhttp.Headers,com.android.okhttp.Response$1)>($r3, null);

        r0.<com.android.okhttp.Response: com.android.okhttp.Response$ParsedHeaders parsedHeaders> = $r2;

     label2:
        return $r2;
    }

    public com.android.okhttp.CacheControl cacheControl()
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.CacheControl r1, $r3;
        com.android.okhttp.Headers $r2;

        r0 := @this: com.android.okhttp.Response;

        r1 = r0.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl>;

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r2 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        $r3 = staticinvoke <com.android.okhttp.CacheControl: com.android.okhttp.CacheControl parse(com.android.okhttp.Headers)>($r2);

        r0.<com.android.okhttp.Response: com.android.okhttp.CacheControl cacheControl> = $r3;

     label2:
        return $r3;
    }

    static com.android.okhttp.Request access$1100(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Request $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Request request>;

        return $r1;
    }

    static com.android.okhttp.internal.http.StatusLine access$1200(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.internal.http.StatusLine $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.internal.http.StatusLine statusLine>;

        return $r1;
    }

    static com.android.okhttp.Handshake access$1300(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Handshake $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake>;

        return $r1;
    }

    static com.android.okhttp.Headers access$1400(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Headers $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers>;

        return $r1;
    }

    static com.android.okhttp.Response$Body access$1500(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$Body $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response$Body body>;

        return $r1;
    }

    static com.android.okhttp.Response access$1600(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response networkResponse>;

        return $r1;
    }

    static com.android.okhttp.Response access$1700(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response cacheResponse>;

        return $r1;
    }

    static com.android.okhttp.Response access$1800(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0, $r1;

        r0 := @parameter0: com.android.okhttp.Response;

        $r1 = r0.<com.android.okhttp.Response: com.android.okhttp.Response priorResponse>;

        return $r1;
    }

    void <init>(com.android.okhttp.Response$Builder, com.android.okhttp.Response$1)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Response$Builder r1;
        com.android.okhttp.Response$1 r2;

        r0 := @this: com.android.okhttp.Response;

        r1 := @parameter0: com.android.okhttp.Response$Builder;

        r2 := @parameter1: com.android.okhttp.Response$1;

        specialinvoke r0.<com.android.okhttp.Response: void <init>(com.android.okhttp.Response$Builder)>(r1);

        return;
    }
}
