public final class com.android.okhttp.OkHttpClient extends java.lang.Object implements java.net.URLStreamHandlerFactory, java.lang.Cloneable
{
    private final com.android.okhttp.RouteDatabase routeDatabase;
    private com.android.okhttp.Dispatcher dispatcher;
    private java.net.Proxy proxy;
    private java.util.List protocols;
    private java.net.ProxySelector proxySelector;
    private java.net.CookieHandler cookieHandler;
    private com.android.okhttp.OkResponseCache responseCache;
    private javax.net.SocketFactory socketFactory;
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;
    private javax.net.ssl.HostnameVerifier hostnameVerifier;
    private com.android.okhttp.OkAuthenticator authenticator;
    private com.android.okhttp.ConnectionPool connectionPool;
    private com.android.okhttp.HostResolver hostResolver;
    private boolean followProtocolRedirects;
    private int connectTimeout;
    private int readTimeout;

    public void <init>()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.RouteDatabase $r1;
        com.android.okhttp.Dispatcher $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = 1;

        $r1 = new com.android.okhttp.RouteDatabase;

        specialinvoke $r1.<com.android.okhttp.RouteDatabase: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase> = $r1;

        $r2 = new com.android.okhttp.Dispatcher;

        specialinvoke $r2.<com.android.okhttp.Dispatcher: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher> = $r2;

        return;
    }

    public void setConnectTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.android.okhttp.OkHttpClient r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        byte $b2, $b3;
        int $i4;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.OkHttpClient;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r3;

     label2:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $b3 = l1 cmp 2147483647L;

        if $b3 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i4 = (int) l1;

        r0.<com.android.okhttp.OkHttpClient: int connectTimeout> = $i4;

        return;
    }

    public int getConnectTimeout()
    {
        com.android.okhttp.OkHttpClient r0;
        int $i0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $i0 = r0.<com.android.okhttp.OkHttpClient: int connectTimeout>;

        return $i0;
    }

    public void setReadTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.android.okhttp.OkHttpClient r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        byte $b2, $b3;
        int $i4;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.OkHttpClient;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r3;

     label2:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $b3 = l1 cmp 2147483647L;

        if $b3 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i4 = (int) l1;

        r0.<com.android.okhttp.OkHttpClient: int readTimeout> = $i4;

        return;
    }

    public int getReadTimeout()
    {
        com.android.okhttp.OkHttpClient r0;
        int $i0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $i0 = r0.<com.android.okhttp.OkHttpClient: int readTimeout>;

        return $i0;
    }

    public com.android.okhttp.OkHttpClient setProxy(java.net.Proxy)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.Proxy r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.Proxy;

        r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy> = r1;

        return r0;
    }

    public java.net.Proxy getProxy()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.Proxy $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setProxySelector(java.net.ProxySelector)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ProxySelector r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.ProxySelector;

        r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = r1;

        return r0;
    }

    public java.net.ProxySelector getProxySelector()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ProxySelector $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setCookieHandler(java.net.CookieHandler)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.CookieHandler r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.CookieHandler;

        r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = r1;

        return r0;
    }

    public java.net.CookieHandler getCookieHandler()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.CookieHandler $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setResponseCache(java.net.ResponseCache)
    {
        com.android.okhttp.OkHttpClient r0, $r3;
        java.net.ResponseCache r1;
        com.android.okhttp.OkResponseCache $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.ResponseCache;

        $r2 = specialinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)>(r1);

        $r3 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setOkResponseCache(com.android.okhttp.OkResponseCache)>($r2);

        return $r3;
    }

    public java.net.ResponseCache getResponseCache()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkResponseCache $r1, $r2;
        boolean $z0;
        com.android.okhttp.internal.http.ResponseCacheAdapter $r3;
        java.net.ResponseCache $r4;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache>;

        $z0 = $r1 instanceof com.android.okhttp.internal.http.ResponseCacheAdapter;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache>;

        $r3 = (com.android.okhttp.internal.http.ResponseCacheAdapter) $r2;

        $r4 = virtualinvoke $r3.<com.android.okhttp.internal.http.ResponseCacheAdapter: java.net.ResponseCache getDelegate()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public com.android.okhttp.OkHttpClient setOkResponseCache(com.android.okhttp.OkResponseCache)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkResponseCache r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.OkResponseCache;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache> = r1;

        return r0;
    }

    public com.android.okhttp.OkResponseCache getOkResponseCache()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkResponseCache $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setSocketFactory(javax.net.SocketFactory)
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.SocketFactory r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: javax.net.SocketFactory;

        r0.<com.android.okhttp.OkHttpClient: javax.net.SocketFactory socketFactory> = r1;

        return r0;
    }

    public javax.net.SocketFactory getSocketFactory()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.SocketFactory $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: javax.net.SocketFactory socketFactory>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.SSLSocketFactory r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = r1;

        return r0;
    }

    public javax.net.ssl.SSLSocketFactory getSslSocketFactory()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.HostnameVerifier r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = r1;

        return r0;
    }

    public javax.net.ssl.HostnameVerifier getHostnameVerifier()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.HostnameVerifier $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setAuthenticator(com.android.okhttp.OkAuthenticator)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkAuthenticator r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.OkAuthenticator;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator> = r1;

        return r0;
    }

    public com.android.okhttp.OkAuthenticator getAuthenticator()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkAuthenticator $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setConnectionPool(com.android.okhttp.ConnectionPool)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.ConnectionPool r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.ConnectionPool;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool> = r1;

        return r0;
    }

    public com.android.okhttp.ConnectionPool getConnectionPool()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.ConnectionPool $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setFollowProtocolRedirects(boolean)
    {
        com.android.okhttp.OkHttpClient r0;
        boolean z0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        z0 := @parameter0: boolean;

        r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = z0;

        return r0;
    }

    public boolean getFollowProtocolRedirects()
    {
        com.android.okhttp.OkHttpClient r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $z0 = r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects>;

        return $z0;
    }

    public com.android.okhttp.RouteDatabase getRoutesDatabase()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.RouteDatabase $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setDispatcher(com.android.okhttp.Dispatcher)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.Dispatcher r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.Dispatcher;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dispatcher == null");

        throw $r2;

     label1:
        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher> = r1;

        return r0;
    }

    public com.android.okhttp.Dispatcher getDispatcher()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.Dispatcher $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setTransports(java.util.List)
    {
        com.android.okhttp.OkHttpClient r0, $r5;
        java.util.List r1;
        java.util.ArrayList r2, $r4;
        int i0, i1, $i2;
        com.android.okhttp.Protocol r3;
        java.lang.Object $r6;
        java.lang.String $r7;
        com.android.okio.ByteString $r8;
        java.io.IOException $r9, r11;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        r2 = $r4;

        i0 = 0;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label6;

     label2:
        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <com.android.okio.ByteString: com.android.okio.ByteString encodeUtf8(java.lang.String)>($r7);

        r3 = staticinvoke <com.android.okhttp.Protocol: com.android.okhttp.Protocol find(com.android.okio.ByteString)>($r8);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r11);

        throw $r10;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        $r5 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setProtocols(java.util.List)>(r2);

        return $r5;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public com.android.okhttp.OkHttpClient setProtocols(java.util.List)
    {
        com.android.okhttp.OkHttpClient r0;
        java.util.List r1, $r3, r10;
        com.android.okhttp.Protocol $r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.util.List;

        r10 = staticinvoke <com.android.okhttp.internal.Util: java.util.List immutableList(java.util.List)>(r1);

        $r2 = <com.android.okhttp.Protocol: com.android.okhttp.Protocol HTTP_11>;

        $z0 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols doesn\'t contain http/1.1: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $z1 = interfaceinvoke r10.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocols must not contain null");

        throw $r4;

     label2:
        $r3 = staticinvoke <com.android.okhttp.internal.Util: java.util.List immutableList(java.util.List)>(r10);

        r0.<com.android.okhttp.OkHttpClient: java.util.List protocols> = $r3;

        return r0;
    }

    public java.util.List getTransports()
    {
        com.android.okhttp.OkHttpClient r0;
        java.util.ArrayList r1, $r2;
        int i0, i1, $i2;
        java.util.List $r3, $r4, $r5;
        java.lang.Object $r6;
        com.android.okhttp.Protocol $r7;
        com.android.okio.ByteString $r8;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.android.okhttp.OkHttpClient: java.util.List protocols>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i2);

        r1 = $r2;

        i0 = 0;

        $r4 = r0.<com.android.okhttp.OkHttpClient: java.util.List protocols>;

        i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label2;

        $r5 = r0.<com.android.okhttp.OkHttpClient: java.util.List protocols>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (com.android.okhttp.Protocol) $r6;

        $r8 = $r7.<com.android.okhttp.Protocol: com.android.okio.ByteString name>;

        $r9 = virtualinvoke $r8.<com.android.okio.ByteString: java.lang.String utf8()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.util.List getProtocols()
    {
        com.android.okhttp.OkHttpClient r0;
        java.util.List $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.util.List protocols>;

        return $r1;
    }

    public com.android.okhttp.OkHttpClient setHostResolver(com.android.okhttp.HostResolver)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.HostResolver r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.HostResolver;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.HostResolver hostResolver> = r1;

        return r0;
    }

    public com.android.okhttp.HostResolver getHostResolver()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.HostResolver $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.HostResolver hostResolver>;

        return $r1;
    }

    public com.android.okhttp.Response execute(com.android.okhttp.Request) throws java.io.IOException
    {
        com.android.okhttp.OkHttpClient r0, r2;
        com.android.okhttp.Request r1;
        com.android.okhttp.Job r3, $r5;
        com.android.okhttp.Response r4;
        com.android.okhttp.Dispatcher $r6;
        com.android.okhttp.internal.http.HttpEngine $r7;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient copyWithDefaults()>();

        $r5 = new com.android.okhttp.Job;

        $r6 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher>;

        specialinvoke $r5.<com.android.okhttp.Job: void <init>(com.android.okhttp.Dispatcher,com.android.okhttp.OkHttpClient,com.android.okhttp.Request,com.android.okhttp.Response$Receiver)>($r6, r2, r1, null);

        r3 = $r5;

        r4 = virtualinvoke r3.<com.android.okhttp.Job: com.android.okhttp.Response getResponse()>();

        $r7 = r3.<com.android.okhttp.Job: com.android.okhttp.internal.http.HttpEngine engine>;

        virtualinvoke $r7.<com.android.okhttp.internal.http.HttpEngine: void releaseConnection()>();

        return r4;
    }

    public void enqueue(com.android.okhttp.Request, com.android.okhttp.Response$Receiver)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.Request r1;
        com.android.okhttp.Response$Receiver r2;
        com.android.okhttp.Dispatcher $r3;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 := @parameter1: com.android.okhttp.Response$Receiver;

        $r3 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher>;

        virtualinvoke $r3.<com.android.okhttp.Dispatcher: void enqueue(com.android.okhttp.OkHttpClient,com.android.okhttp.Request,com.android.okhttp.Response$Receiver)>(r0, r1, r2);

        return;
    }

    public void cancel(java.lang.Object)
    {
        com.android.okhttp.OkHttpClient r0;
        java.lang.Object r1;
        com.android.okhttp.Dispatcher $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.Dispatcher dispatcher>;

        virtualinvoke $r2.<com.android.okhttp.Dispatcher: void cancel(java.lang.Object)>(r1);

        return;
    }

    public java.net.HttpURLConnection open(java.net.URL)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.URL r1;
        java.net.Proxy $r2;
        java.net.HttpURLConnection $r3;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.URL;

        $r2 = r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy>;

        $r3 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL,java.net.Proxy)>(r1, $r2);

        return $r3;
    }

    java.net.HttpURLConnection open(java.net.URL, java.net.Proxy)
    {
        com.android.okhttp.OkHttpClient r0, r4;
        java.net.URL r1;
        java.net.Proxy r2;
        java.lang.String r3, $r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        com.android.okhttp.internal.http.HttpsURLConnectionImpl $r10;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r11;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.net.Proxy;

        r3 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        r4 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient copyWithDefaults()>();

        r4.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy> = r2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        $r11 = new com.android.okhttp.internal.http.HttpURLConnectionImpl;

        specialinvoke $r11.<com.android.okhttp.internal.http.HttpURLConnectionImpl: void <init>(java.net.URL,com.android.okhttp.OkHttpClient)>(r1, r4);

        return $r11;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label2;

        $r10 = new com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        specialinvoke $r10.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: void <init>(java.net.URL,com.android.okhttp.OkHttpClient)>(r1, r4);

        return $r10;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected protocol: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    com.android.okhttp.OkHttpClient copyWithDefaults()
    {
        com.android.okhttp.OkHttpClient r0, r1;
        java.net.ProxySelector $r2, $r21;
        java.net.CookieHandler $r3, $r22;
        com.android.okhttp.OkResponseCache $r4, $r19;
        javax.net.SocketFactory $r5, $r17;
        javax.net.ssl.SSLSocketFactory $r6, $r18;
        javax.net.ssl.HostnameVerifier $r7;
        com.android.okhttp.OkAuthenticator $r8, $r16;
        com.android.okhttp.ConnectionPool $r9, $r14;
        java.util.List $r10, $r13;
        com.android.okhttp.HostResolver $r11, $r12;
        com.android.okhttp.internal.tls.OkHostnameVerifier $r15;
        java.net.ResponseCache $r20;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient clone()>();

        $r2 = r1.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        if $r2 != null goto label01;

        $r21 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

        r1.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = $r21;

     label01:
        $r3 = r1.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        if $r3 != null goto label02;

        $r22 = staticinvoke <java.net.CookieHandler: java.net.CookieHandler getDefault()>();

        r1.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = $r22;

     label02:
        $r4 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache>;

        if $r4 != null goto label03;

        $r20 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        $r19 = specialinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)>($r20);

        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkResponseCache responseCache> = $r19;

     label03:
        $r5 = r1.<com.android.okhttp.OkHttpClient: javax.net.SocketFactory socketFactory>;

        if $r5 != null goto label04;

        $r17 = staticinvoke <javax.net.SocketFactory: javax.net.SocketFactory getDefault()>();

        r1.<com.android.okhttp.OkHttpClient: javax.net.SocketFactory socketFactory> = $r17;

     label04:
        $r6 = r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r6 != null goto label05;

        $r18 = specialinvoke r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r18;

     label05:
        $r7 = r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        if $r7 != null goto label06;

        $r15 = <com.android.okhttp.internal.tls.OkHostnameVerifier: com.android.okhttp.internal.tls.OkHostnameVerifier INSTANCE>;

        r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r15;

     label06:
        $r8 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator>;

        if $r8 != null goto label07;

        $r16 = <com.android.okhttp.internal.http.HttpAuthenticator: com.android.okhttp.OkAuthenticator SYSTEM_DEFAULT>;

        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator> = $r16;

     label07:
        $r9 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool>;

        if $r9 != null goto label08;

        $r14 = staticinvoke <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool getDefault()>();

        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool> = $r14;

     label08:
        $r10 = r1.<com.android.okhttp.OkHttpClient: java.util.List protocols>;

        if $r10 != null goto label09;

        $r13 = <com.android.okhttp.Protocol: java.util.List HTTP2_SPDY3_AND_HTTP>;

        r1.<com.android.okhttp.OkHttpClient: java.util.List protocols> = $r13;

     label09:
        $r11 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.HostResolver hostResolver>;

        if $r11 != null goto label10;

        $r12 = <com.android.okhttp.HostResolver: com.android.okhttp.HostResolver DEFAULT>;

        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.HostResolver hostResolver> = $r12;

     label10:
        return r1;
    }

    private synchronized javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.SSLContext r1;
        javax.net.ssl.SSLSocketFactory $r2, $r3, $r4;
        java.security.GeneralSecurityException $r5;
        java.lang.AssertionError $r6;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r2 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r2 != null goto label4;

     label1:
        r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        virtualinvoke r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, null, null);

        $r4 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $r3 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return $r3;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    public com.android.okhttp.OkHttpClient clone()
    {
        com.android.okhttp.OkHttpClient r0, $r3;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r4;
        java.lang.AssertionError $r5;

        r0 := @this: com.android.okhttp.OkHttpClient;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (com.android.okhttp.OkHttpClient) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    private com.android.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ResponseCache r1;
        com.android.okhttp.OkResponseCache $r2;
        boolean $z0;
        com.android.okhttp.internal.http.ResponseCacheAdapter r3;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.ResponseCache;

        if r1 == null goto label1;

        $z0 = r1 instanceof com.android.okhttp.OkResponseCache;

        if $z0 == 0 goto label2;

     label1:
        $r2 = (com.android.okhttp.OkResponseCache) r1;

        goto label3;

     label2:
        r3 = new com.android.okhttp.internal.http.ResponseCacheAdapter;

        $r2 = r3;

        specialinvoke r3.<com.android.okhttp.internal.http.ResponseCacheAdapter: void <init>(java.net.ResponseCache)>(r1);

     label3:
        return $r2;
    }

    public java.net.URLStreamHandler createURLStreamHandler(java.lang.String)
    {
        com.android.okhttp.OkHttpClient r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.android.okhttp.OkHttpClient$1 $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r2 = new com.android.okhttp.OkHttpClient$1;

        specialinvoke $r2.<com.android.okhttp.OkHttpClient$1: void <init>(com.android.okhttp.OkHttpClient,java.lang.String)>(r0, r1);

        return $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.android.okhttp.OkHttpClient r0, $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient clone()>();

        return $r1;
    }
}
