public final class com.android.okhttp.internal.http.HttpTransport extends java.lang.Object implements com.android.okhttp.internal.http.Transport
{
    private final com.android.okhttp.internal.http.HttpEngine httpEngine;
    private final com.android.okhttp.internal.http.HttpConnection httpConnection;

    public void <init>(com.android.okhttp.internal.http.HttpEngine, com.android.okhttp.internal.http.HttpConnection)
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpEngine r1;
        com.android.okhttp.internal.http.HttpConnection r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.internal.http.HttpEngine;

        r2 := @parameter1: com.android.okhttp.internal.http.HttpConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine> = r1;

        r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection> = r2;

        return;
    }

    public com.android.okio.Sink createRequestBody(com.android.okhttp.Request) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.Request r1;
        long l0;
        com.android.okhttp.internal.http.HttpEngine $r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;
        byte $b1, $b2, $b3;
        java.lang.IllegalStateException $r5, $r12;
        com.android.okhttp.internal.http.HttpConnection $r6, $r8;
        com.android.okio.Sink $r7, $r9;
        com.android.okhttp.internal.http.RetryableSink $r10, $r11;
        int $i4;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.Request;

        l0 = staticinvoke <com.android.okhttp.internal.http.OkHeaders: long contentLength(com.android.okhttp.Request)>(r1);

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z0 = $r2.<com.android.okhttp.internal.http.HttpEngine: boolean bufferRequestBody>;

        if $z0 == 0 goto label3;

        $b3 = l0 cmp 2147483647L;

        if $b3 <= 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB.");

        throw $r12;

     label1:
        $b2 = l0 cmp -1L;

        if $b2 == 0 goto label2;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders(com.android.okhttp.Request)>(r1);

        $r10 = new com.android.okhttp.internal.http.RetryableSink;

        $i4 = (int) l0;

        specialinvoke $r10.<com.android.okhttp.internal.http.RetryableSink: void <init>(int)>($i4);

        return $r10;

     label2:
        $r11 = new com.android.okhttp.internal.http.RetryableSink;

        specialinvoke $r11.<com.android.okhttp.internal.http.RetryableSink: void <init>()>();

        return $r11;

     label3:
        $r3 = "chunked";

        $r4 = virtualinvoke r1.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders(com.android.okhttp.Request)>(r1);

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r9 = virtualinvoke $r8.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Sink newChunkedSink()>();

        return $r9;

     label4:
        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label5;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: void writeRequestHeaders(com.android.okhttp.Request)>(r1);

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r7 = virtualinvoke $r6.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Sink newFixedLengthSink(long)>(l0);

        return $r7;

     label5:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot stream a request body without chunked encoding or a known content length!");

        throw $r5;
    }

    public void flushRequest() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpConnection $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.HttpConnection: void flush()>();

        return;
    }

    public void writeRequestBody(com.android.okhttp.internal.http.RetryableSink) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.RetryableSink r1;
        com.android.okhttp.internal.http.HttpConnection $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.internal.http.RetryableSink;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.HttpConnection: void writeRequestBody(com.android.okhttp.internal.http.RetryableSink)>(r1);

        return;
    }

    public void writeRequestHeaders(com.android.okhttp.Request) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.Request r1;
        java.lang.String r2;
        com.android.okhttp.internal.http.HttpEngine $r3, $r4, $r9;
        com.android.okhttp.Connection $r5, $r10;
        com.android.okhttp.Route $r6;
        java.net.Proxy $r7;
        java.net.Proxy$Type $r8;
        int $i0;
        com.android.okhttp.internal.http.HttpConnection $r11;
        com.android.okhttp.Headers $r12;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: com.android.okhttp.Request;

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r3.<com.android.okhttp.internal.http.HttpEngine: void writingRequestHeaders()>();

        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r5 = virtualinvoke $r4.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Connection getConnection()>();

        $r6 = virtualinvoke $r5.<com.android.okhttp.Connection: com.android.okhttp.Route getRoute()>();

        $r7 = virtualinvoke $r6.<com.android.okhttp.Route: java.net.Proxy getProxy()>();

        $r8 = virtualinvoke $r7.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r10 = virtualinvoke $r9.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Connection getConnection()>();

        $i0 = virtualinvoke $r10.<com.android.okhttp.Connection: int getHttpMinorVersion()>();

        r2 = staticinvoke <com.android.okhttp.internal.http.RequestLine: java.lang.String get(com.android.okhttp.Request,java.net.Proxy$Type,int)>(r1, $r8, $i0);

        $r11 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r12 = virtualinvoke r1.<com.android.okhttp.Request: com.android.okhttp.Headers getHeaders()>();

        virtualinvoke $r11.<com.android.okhttp.internal.http.HttpConnection: void writeRequest(com.android.okhttp.Headers,java.lang.String)>($r12, r2);

        return;
    }

    public com.android.okhttp.Response$Builder readResponseHeaders() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpConnection $r1;
        com.android.okhttp.Response$Builder $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internal.http.HttpConnection: com.android.okhttp.Response$Builder readResponse()>();

        return $r2;
    }

    public void releaseConnectionOnIdle() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        boolean $z0;
        com.android.okhttp.internal.http.HttpConnection $r1, $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $z0 = virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport: boolean canReuseConnection()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.HttpConnection: void poolOnIdle()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.HttpConnection: void closeOnIdle()>();

     label2:
        return;
    }

    public boolean canReuseConnection()
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpEngine $r1, $r5;
        java.lang.String $r2, $r4, $r6, $r8;
        com.android.okhttp.Request $r3;
        boolean $z0, $z1, $z2;
        com.android.okhttp.Response $r7;
        com.android.okhttp.internal.http.HttpConnection $r9;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r2 = "close";

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r3 = virtualinvoke $r1.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Request getRequest()>();

        $r4 = virtualinvoke $r3.<com.android.okhttp.Request: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r6 = "close";

        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r7 = virtualinvoke $r5.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Response getResponse()>();

        $r8 = virtualinvoke $r7.<com.android.okhttp.Response: java.lang.String header(java.lang.String)>("Connection");

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $z2 = virtualinvoke $r9.<com.android.okhttp.internal.http.HttpConnection: boolean isClosed()>();

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public void emptyTransferStream() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        com.android.okhttp.internal.http.HttpConnection $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        virtualinvoke $r1.<com.android.okhttp.internal.http.HttpConnection: void emptyResponseBody()>();

        return;
    }

    public com.android.okio.Source getTransferStream(java.net.CacheRequest) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport r0;
        java.net.CacheRequest r1;
        long l0;
        com.android.okhttp.internal.http.HttpEngine $r2, $r3, $r7, $r12;
        boolean $z0, $z1;
        java.lang.String $r4, $r6;
        com.android.okhttp.Response $r5, $r8;
        byte $b1;
        com.android.okhttp.internal.http.HttpConnection $r9, $r10, $r15, $r17;
        com.android.okio.Source $r11, $r13, $r14, $r16;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport;

        r1 := @parameter0: java.net.CacheRequest;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z0 = virtualinvoke $r2.<com.android.okhttp.internal.http.HttpEngine: boolean hasResponseBody()>();

        if $z0 != 0 goto label1;

        $r17 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r16 = virtualinvoke $r17.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Source newFixedLengthSource(java.net.CacheRequest,long)>(r1, 0L);

        return $r16;

     label1:
        $r4 = "chunked";

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r5 = virtualinvoke $r3.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Response getResponse()>();

        $r6 = virtualinvoke $r5.<com.android.okhttp.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        $r15 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r12 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r14 = virtualinvoke $r15.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Source newChunkedSource(java.net.CacheRequest,com.android.okhttp.internal.http.HttpEngine)>(r1, $r12);

        return $r14;

     label2:
        $r7 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r8 = virtualinvoke $r7.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.Response getResponse()>();

        l0 = staticinvoke <com.android.okhttp.internal.http.OkHeaders: long contentLength(com.android.okhttp.Response)>($r8);

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label3;

        $r10 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r13 = virtualinvoke $r10.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Source newFixedLengthSource(java.net.CacheRequest,long)>(r1, l0);

        return $r13;

     label3:
        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpConnection httpConnection>;

        $r11 = virtualinvoke $r9.<com.android.okhttp.internal.http.HttpConnection: com.android.okio.Source newUnknownLengthSource(java.net.CacheRequest)>(r1);

        return $r11;
    }
}
