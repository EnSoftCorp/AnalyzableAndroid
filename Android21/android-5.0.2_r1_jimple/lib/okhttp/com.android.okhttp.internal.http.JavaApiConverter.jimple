public final class com.android.okhttp.internal.http.JavaApiConverter extends java.lang.Object
{

    private void <init>()
    {
        com.android.okhttp.internal.http.JavaApiConverter r0;

        r0 := @this: com.android.okhttp.internal.http.JavaApiConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.okhttp.Response createOkResponse(java.net.URI, java.net.URLConnection) throws java.io.IOException
    {
        java.net.URI r0;
        java.net.URLConnection r1;
        java.net.HttpURLConnection r2;
        com.android.okhttp.Response$Builder r3, $r11;
        com.android.okhttp.Request r4;
        java.lang.String r5, $r12, $r17;
        com.android.okhttp.Headers r6;
        com.android.okhttp.Response$Body r7;
        javax.net.ssl.HttpsURLConnection r8;
        java.security.cert.Certificate[] r9, r20;
        com.android.okhttp.Handshake r10;
        com.android.okhttp.ResponseSource $r13;
        java.io.InputStream $r14;
        com.android.okhttp.Response $r15;
        boolean $z0;
        java.util.List $r16, $r19;
        javax.net.ssl.SSLPeerUnverifiedException $r18;

        r0 := @parameter0: java.net.URI;

        r1 := @parameter1: java.net.URLConnection;

        r2 = (java.net.HttpURLConnection) r1;

        $r11 = new com.android.okhttp.Response$Builder;

        specialinvoke $r11.<com.android.okhttp.Response$Builder: void <init>()>();

        r3 = $r11;

        $r12 = virtualinvoke r2.<java.net.HttpURLConnection: java.lang.String getRequestMethod()>();

        r4 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Request createOkRequest(java.net.URI,java.lang.String,java.util.Map)>(r0, $r12, null);

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder request(com.android.okhttp.Request)>(r4);

        r5 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.String extractStatusLine(java.net.HttpURLConnection)>(r2);

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder statusLine(java.lang.String)>(r5);

        r6 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Headers extractOkResponseHeaders(java.net.HttpURLConnection)>(r2);

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder headers(com.android.okhttp.Headers)>(r6);

        $r13 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource NETWORK>;

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder setResponseSource(com.android.okhttp.ResponseSource)>($r13);

        $r14 = virtualinvoke r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r7 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Response$Body createOkBody(com.android.okhttp.Headers,java.io.InputStream)>(r6, $r14);

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder body(com.android.okhttp.Response$Body)>(r7);

        $z0 = r2 instanceof javax.net.ssl.HttpsURLConnection;

        if $z0 == 0 goto label5;

        r8 = (javax.net.ssl.HttpsURLConnection) r2;

     label1:
        r9 = virtualinvoke r8.<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getServerCertificates()>();

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        r9 = null;

     label4:
        r20 = virtualinvoke r8.<javax.net.ssl.HttpsURLConnection: java.security.cert.Certificate[] getLocalCertificates()>();

        $r17 = virtualinvoke r8.<javax.net.ssl.HttpsURLConnection: java.lang.String getCipherSuite()>();

        $r16 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.util.List nullSafeImmutableList(java.lang.Object[])>(r9);

        $r19 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.util.List nullSafeImmutableList(java.lang.Object[])>(r20);

        r10 = staticinvoke <com.android.okhttp.Handshake: com.android.okhttp.Handshake get(java.lang.String,java.util.List,java.util.List)>($r17, $r16, $r19);

        virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder handshake(com.android.okhttp.Handshake)>(r10);

     label5:
        $r15 = virtualinvoke r3.<com.android.okhttp.Response$Builder: com.android.okhttp.Response build()>();

        return $r15;

        catch javax.net.ssl.SSLPeerUnverifiedException from label1 to label2 with label3;
    }

    static com.android.okhttp.Response createOkResponse(com.android.okhttp.Request, java.net.CacheResponse) throws java.io.IOException
    {
        com.android.okhttp.Request r0;
        java.net.CacheResponse r1;
        com.android.okhttp.Response$Builder r2, $r9;
        com.android.okhttp.Headers r3;
        com.android.okhttp.Response$Body r4;
        java.net.SecureCacheResponse r5;
        java.util.List r6, r22;
        com.android.okhttp.Handshake r8;
        java.lang.String $r11, $r19;
        com.android.okhttp.ResponseSource $r14;
        java.io.InputStream $r15;
        com.android.okhttp.Response $r18;
        boolean $z0;
        javax.net.ssl.SSLPeerUnverifiedException $r21;

        r0 := @parameter0: com.android.okhttp.Request;

        r1 := @parameter1: java.net.CacheResponse;

        $r9 = new com.android.okhttp.Response$Builder;

        specialinvoke $r9.<com.android.okhttp.Response$Builder: void <init>()>();

        r2 = $r9;

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder request(com.android.okhttp.Request)>(r0);

        $r11 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.String extractStatusLine(java.net.CacheResponse)>(r1);

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder statusLine(java.lang.String)>($r11);

        r3 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Headers extractOkHeaders(java.net.CacheResponse)>(r1);

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder headers(com.android.okhttp.Headers)>(r3);

        $r14 = <com.android.okhttp.ResponseSource: com.android.okhttp.ResponseSource CACHE>;

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder setResponseSource(com.android.okhttp.ResponseSource)>($r14);

        $r15 = virtualinvoke r1.<java.net.CacheResponse: java.io.InputStream getBody()>();

        r4 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Response$Body createOkBody(com.android.okhttp.Headers,java.io.InputStream)>(r3, $r15);

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder body(com.android.okhttp.Response$Body)>(r4);

        $z0 = r1 instanceof java.net.SecureCacheResponse;

        if $z0 == 0 goto label6;

        r5 = (java.net.SecureCacheResponse) r1;

     label1:
        r6 = virtualinvoke r5.<java.net.SecureCacheResponse: java.util.List getServerCertificateChain()>();

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label4:
        r22 = virtualinvoke r5.<java.net.SecureCacheResponse: java.util.List getLocalCertificateChain()>();

        if r22 != null goto label5;

        r22 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label5:
        $r19 = virtualinvoke r5.<java.net.SecureCacheResponse: java.lang.String getCipherSuite()>();

        r8 = staticinvoke <com.android.okhttp.Handshake: com.android.okhttp.Handshake get(java.lang.String,java.util.List,java.util.List)>($r19, r6, r22);

        virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response$Builder handshake(com.android.okhttp.Handshake)>(r8);

     label6:
        $r18 = virtualinvoke r2.<com.android.okhttp.Response$Builder: com.android.okhttp.Response build()>();

        return $r18;

        catch javax.net.ssl.SSLPeerUnverifiedException from label1 to label2 with label3;
    }

    public static com.android.okhttp.Request createOkRequest(java.net.URI, java.lang.String, java.util.Map)
    {
        java.net.URI r0;
        java.lang.String r1, $r6;
        java.util.Map r2;
        com.android.okhttp.Request$Builder r3, $r5, $r7;
        com.android.okhttp.Headers r4;
        com.android.okhttp.Request $r8;

        r0 := @parameter0: java.net.URI;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Map;

        $r5 = new com.android.okhttp.Request$Builder;

        specialinvoke $r5.<com.android.okhttp.Request$Builder: void <init>()>();

        $r6 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder url(java.lang.String)>($r6);

        r3 = virtualinvoke $r7.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder method(java.lang.String,com.android.okhttp.Request$Body)>(r1, null);

        if r2 == null goto label1;

        r4 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Headers extractOkHeaders(java.util.Map)>(r2);

        virtualinvoke r3.<com.android.okhttp.Request$Builder: com.android.okhttp.Request$Builder headers(com.android.okhttp.Headers)>(r4);

     label1:
        $r8 = virtualinvoke r3.<com.android.okhttp.Request$Builder: com.android.okhttp.Request build()>();

        return $r8;
    }

    public static java.net.CacheResponse createJavaCacheResponse(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Headers r1;
        com.android.okhttp.Response$Body r2;
        com.android.okhttp.Handshake r3;
        com.android.okhttp.Request $r4;
        boolean $z0;
        com.android.okhttp.internal.http.JavaApiConverter$2 $r5;
        com.android.okhttp.internal.http.JavaApiConverter$1 $r6;

        r0 := @parameter0: com.android.okhttp.Response;

        r1 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Headers headers()>();

        r2 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Response$Body body()>();

        $r4 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $z0 = virtualinvoke $r4.<com.android.okhttp.Request: boolean isHttps()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Handshake handshake()>();

        $r6 = new com.android.okhttp.internal.http.JavaApiConverter$1;

        specialinvoke $r6.<com.android.okhttp.internal.http.JavaApiConverter$1: void <init>(com.android.okhttp.Handshake,com.android.okhttp.Headers,com.android.okhttp.Response,com.android.okhttp.Response$Body)>(r3, r1, r0, r2);

        return $r6;

     label1:
        $r5 = new com.android.okhttp.internal.http.JavaApiConverter$2;

        specialinvoke $r5.<com.android.okhttp.internal.http.JavaApiConverter$2: void <init>(com.android.okhttp.Headers,com.android.okhttp.Response,com.android.okhttp.Response$Body)>(r1, r0, r2);

        return $r5;
    }

    static java.net.HttpURLConnection createJavaUrlConnection(com.android.okhttp.Response)
    {
        com.android.okhttp.Response r0;
        com.android.okhttp.Request r1;
        boolean $z0;
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection $r2, $r4;
        com.android.okhttp.internal.http.JavaApiConverter$CacheHttpsURLConnection $r3;

        r0 := @parameter0: com.android.okhttp.Response;

        r1 = virtualinvoke r0.<com.android.okhttp.Response: com.android.okhttp.Request request()>();

        $z0 = virtualinvoke r1.<com.android.okhttp.Request: boolean isHttps()>();

        if $z0 == 0 goto label1;

        $r3 = new com.android.okhttp.internal.http.JavaApiConverter$CacheHttpsURLConnection;

        $r4 = new com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        specialinvoke $r4.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: void <init>(com.android.okhttp.Response)>(r0);

        specialinvoke $r3.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpsURLConnection: void <init>(com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection)>($r4);

        return $r3;

     label1:
        $r2 = new com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection;

        specialinvoke $r2.<com.android.okhttp.internal.http.JavaApiConverter$CacheHttpURLConnection: void <init>(com.android.okhttp.Response)>(r0);

        return $r2;
    }

    static java.util.Map extractJavaHeaders(com.android.okhttp.Request)
    {
        com.android.okhttp.Request r0;
        com.android.okhttp.Headers $r1;
        java.util.Map $r2;

        r0 := @parameter0: com.android.okhttp.Request;

        $r1 = virtualinvoke r0.<com.android.okhttp.Request: com.android.okhttp.Headers headers()>();

        $r2 = staticinvoke <com.android.okhttp.internal.http.OkHeaders: java.util.Map toMultimap(com.android.okhttp.Headers,java.lang.String)>($r1, null);

        return $r2;
    }

    private static com.android.okhttp.Headers extractOkHeaders(java.net.CacheResponse) throws java.io.IOException
    {
        java.net.CacheResponse r0;
        java.util.Map r1;
        com.android.okhttp.Headers $r2;

        r0 := @parameter0: java.net.CacheResponse;

        r1 = virtualinvoke r0.<java.net.CacheResponse: java.util.Map getHeaders()>();

        $r2 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Headers extractOkHeaders(java.util.Map)>(r1);

        return $r2;
    }

    private static com.android.okhttp.Headers extractOkResponseHeaders(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r0;
        java.util.Map r1;
        com.android.okhttp.Headers $r2;

        r0 := @parameter0: java.net.HttpURLConnection;

        r1 = virtualinvoke r0.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r2 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: com.android.okhttp.Headers extractOkHeaders(java.util.Map)>(r1);

        return $r2;
    }

    static com.android.okhttp.Headers extractOkHeaders(java.util.Map)
    {
        java.util.Map r0;
        com.android.okhttp.Headers$Builder r1, $r7;
        java.util.Iterator r2, r5;
        java.util.Map$Entry r3;
        java.lang.String r4, r6;
        java.util.Set $r8;
        boolean $z0, $z1;
        com.android.okhttp.Headers $r9;
        java.lang.Object $r10, $r11, $r12, $r15;
        java.util.List $r13;

        r0 := @parameter0: java.util.Map;

        $r7 = new com.android.okhttp.Headers$Builder;

        specialinvoke $r7.<com.android.okhttp.Headers$Builder: void <init>()>();

        r1 = $r7;

        $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.String) $r11;

        if r4 != null goto label2;

        goto label1;

     label2:
        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.util.List) $r12;

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r15;

        virtualinvoke r1.<com.android.okhttp.Headers$Builder: com.android.okhttp.Headers$Builder add(java.lang.String,java.lang.String)>(r4, r6);

        goto label3;

     label4:
        goto label1;

     label5:
        $r9 = virtualinvoke r1.<com.android.okhttp.Headers$Builder: com.android.okhttp.Headers build()>();

        return $r9;
    }

    private static java.lang.String extractStatusLine(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1;

        r0 := @parameter0: java.net.HttpURLConnection;

        $r1 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>(null);

        return $r1;
    }

    private static java.lang.String extractStatusLine(java.net.CacheResponse) throws java.io.IOException
    {
        java.net.CacheResponse r0;
        java.util.Map r1;
        java.lang.String $r2;

        r0 := @parameter0: java.net.CacheResponse;

        r1 = virtualinvoke r0.<java.net.CacheResponse: java.util.Map getHeaders()>();

        $r2 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.String extractStatusLine(java.util.Map)>(r1);

        return $r2;
    }

    static java.lang.String extractStatusLine(java.util.Map)
    {
        java.util.Map r0;
        java.util.List r1;
        java.lang.Object $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);

        r1 = (java.util.List) $r2;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private static com.android.okhttp.Response$Body createOkBody(com.android.okhttp.Headers, java.io.InputStream)
    {
        com.android.okhttp.Headers r0;
        java.io.InputStream r1;
        com.android.okhttp.internal.http.JavaApiConverter$3 $r2;

        r0 := @parameter0: com.android.okhttp.Headers;

        r1 := @parameter1: java.io.InputStream;

        $r2 = new com.android.okhttp.internal.http.JavaApiConverter$3;

        specialinvoke $r2.<com.android.okhttp.internal.http.JavaApiConverter$3: void <init>(com.android.okhttp.Headers,java.io.InputStream)>(r0, r1);

        return $r2;
    }

    private static java.lang.RuntimeException throwRequestModificationException()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ResponseCache cannot modify the request.");

        throw $r0;
    }

    private static java.lang.RuntimeException throwRequestHeaderAccessException()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ResponseCache cannot access request headers");

        throw $r0;
    }

    private static java.lang.RuntimeException throwRequestSslAccessException()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ResponseCache cannot access SSL internals");

        throw $r0;
    }

    private static java.lang.RuntimeException throwResponseBodyAccessException()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ResponseCache cannot access the response body.");

        throw $r0;
    }

    private static java.util.List nullSafeImmutableList(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label1:
        $r1 = staticinvoke <com.android.okhttp.internal.Util: java.util.List immutableList(java.lang.Object[])>(r0);

     label2:
        return $r1;
    }

    static java.lang.RuntimeException access$000()
    {
        java.lang.RuntimeException $r0;

        $r0 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException throwRequestModificationException()>();

        return $r0;
    }

    static java.lang.RuntimeException access$100()
    {
        java.lang.RuntimeException $r0;

        $r0 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException throwRequestHeaderAccessException()>();

        return $r0;
    }

    static java.lang.RuntimeException access$200()
    {
        java.lang.RuntimeException $r0;

        $r0 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException throwResponseBodyAccessException()>();

        return $r0;
    }

    static java.lang.RuntimeException access$400()
    {
        java.lang.RuntimeException $r0;

        $r0 = staticinvoke <com.android.okhttp.internal.http.JavaApiConverter: java.lang.RuntimeException throwRequestSslAccessException()>();

        return $r0;
    }
}
