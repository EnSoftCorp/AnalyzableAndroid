public final class com.android.okhttp.internal.tls.OkHostnameVerifier extends java.lang.Object implements javax.net.ssl.HostnameVerifier
{
    public static final com.android.okhttp.internal.tls.OkHostnameVerifier INSTANCE;
    private static final java.util.regex.Pattern VERIFY_AS_IP_ADDRESS;
    private static final int ALT_DNS_NAME;
    private static final int ALT_IPA_NAME;

    private void <init>()
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.lang.String r1;
        javax.net.ssl.SSLSession r2;
        java.security.cert.Certificate[] r3;
        java.security.cert.Certificate $r4;
        java.security.cert.X509Certificate $r5;
        boolean $z0;
        javax.net.ssl.SSLException $r6;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        r3 = interfaceinvoke r2.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r4 = r3[0];

        $r5 = (java.security.cert.X509Certificate) $r4;

        $z0 = virtualinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>(r1, $r5);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
    }

    public boolean verify(java.lang.String, java.security.cert.X509Certificate)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.lang.String r1;
        java.security.cert.X509Certificate r2;
        boolean $z0, $z1;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $z0 = staticinvoke <com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verifyAsIpAddress(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)>(r1, r2);

        goto label2;

     label1:
        $z1 = specialinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.security.cert.X509Certificate)>(r1, r2);

     label2:
        return $z1;
    }

    static boolean verifyAsIpAddress(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.okhttp.internal.tls.OkHostnameVerifier: java.util.regex.Pattern VERIFY_AS_IP_ADDRESS>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private boolean verifyIpAddress(java.lang.String, java.security.cert.X509Certificate)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.lang.String r1, r4;
        java.security.cert.X509Certificate r2;
        java.util.Iterator r3;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $r5 = specialinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>(r2, 7);

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean verifyHostName(java.lang.String, java.security.cert.X509Certificate)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.lang.String r1, r4, r9, r11;
        java.security.cert.X509Certificate r2;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r3;
        java.util.Locale $r5;
        java.util.List $r6;
        com.android.okhttp.internal.tls.DistinguishedNameParser $r7;
        java.lang.Object $r8;
        javax.security.auth.x500.X500Principal r10;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $r5 = <java.util.Locale: java.util.Locale US>;

        r9 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        z0 = 0;

        $r6 = specialinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int)>(r2, 2);

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        z0 = 1;

        $z3 = virtualinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>(r9, r4);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        if z0 != 0 goto label4;

        r10 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r7 = new com.android.okhttp.internal.tls.DistinguishedNameParser;

        specialinvoke $r7.<com.android.okhttp.internal.tls.DistinguishedNameParser: void <init>(javax.security.auth.x500.X500Principal)>(r10);

        r11 = virtualinvoke $r7.<com.android.okhttp.internal.tls.DistinguishedNameParser: java.lang.String findMostSpecific(java.lang.String)>("cn");

        if r11 == null goto label4;

        $z2 = virtualinvoke r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: boolean verifyHostName(java.lang.String,java.lang.String)>(r9, r11);

        return $z2;

     label4:
        return 0;
    }

    private java.util.List getSubjectAltNames(java.security.cert.X509Certificate, int)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.security.cert.X509Certificate r1;
        int i0, $i1, $i2;
        java.util.ArrayList r2, $r9;
        java.util.Collection r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r10, $r11;
        java.util.List r6, $r13, $r14;
        java.lang.Integer r7;
        java.lang.String r8;
        boolean $z0;
        java.security.cert.CertificateParsingException $r12;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.security.cert.X509Certificate;

        i0 := @parameter1: int;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

     label1:
        r3 = virtualinvoke r1.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

        if r3 != null goto label3;

        $r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r13;

     label3:
        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.List) r5;

        if r6 == null goto label4;

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 >= 2 goto label5;

        goto label4;

     label5:
        $r10 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (java.lang.Integer) $r10;

        if r7 != null goto label6;

        goto label4;

     label6:
        $i2 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i2 != i0 goto label7;

        $r11 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(1);

        r8 = (java.lang.String) $r11;

        if r8 == null goto label7;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r8);

     label7:
        goto label4;

     label8:
        return r2;

     label9:
        $r12 := @caughtexception;

        $r14 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r14;

        catch java.security.cert.CertificateParsingException from label1 to label2 with label9;
        catch java.security.cert.CertificateParsingException from label3 to label8 with label9;
    }

    public boolean verifyHostName(java.lang.String, java.lang.String)
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier r0;
        java.lang.String r1, r2, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Locale $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.android.okhttp.internal.tls.OkHostnameVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 == 0 goto label1;

        if r2 == null goto label1;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i5 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = <java.util.Locale: java.util.Locale US>;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z0 != 0 goto label3;

        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        return $z6;

     label3:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z1 == 0 goto label4;

        $i11 = virtualinvoke r4.<java.lang.String: int length()>();

        $i12 = $i11 - 2;

        $z5 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r4, 2, $i12);

        if $z5 == 0 goto label4;

        return 1;

     label4:
        i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(42);

        i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(46);

        if i0 <= i1 goto label5;

        return 0;

     label5:
        $z2 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r4, 0, i0);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        $i7 = virtualinvoke r4.<java.lang.String: int length()>();

        $i6 = i0 + 1;

        i2 = $i7 - $i6;

        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = $i9 - i2;

        $i8 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(46, i0);

        if $i8 >= i3 goto label7;

        $z4 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".clients.google.com");

        if $z4 != 0 goto label7;

        return 0;

     label7:
        $i10 = i0 + 1;

        $z3 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i3, r4, $i10, i2);

        if $z3 != 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    static void <clinit>()
    {
        com.android.okhttp.internal.tls.OkHostnameVerifier $r0;
        java.util.regex.Pattern $r1;

        <com.android.okhttp.internal.tls.OkHostnameVerifier: int ALT_IPA_NAME> = 7;

        <com.android.okhttp.internal.tls.OkHostnameVerifier: int ALT_DNS_NAME> = 2;

        $r0 = new com.android.okhttp.internal.tls.OkHostnameVerifier;

        specialinvoke $r0.<com.android.okhttp.internal.tls.OkHostnameVerifier: void <init>()>();

        <com.android.okhttp.internal.tls.OkHostnameVerifier: com.android.okhttp.internal.tls.OkHostnameVerifier INSTANCE> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)");

        <com.android.okhttp.internal.tls.OkHostnameVerifier: java.util.regex.Pattern VERIFY_AS_IP_ADDRESS> = $r1;

        return;
    }
}
