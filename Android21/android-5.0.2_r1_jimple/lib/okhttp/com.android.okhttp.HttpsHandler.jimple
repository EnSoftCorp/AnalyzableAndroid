public final class com.android.okhttp.HttpsHandler extends com.android.okhttp.HttpHandler
{
    private static final java.util.List ENABLED_PROTOCOLS;
    private final com.android.okhttp.ConfigAwareConnectionPool configAwareConnectionPool;

    public void <init>()
    {
        com.android.okhttp.HttpsHandler r0;
        com.android.okhttp.ConfigAwareConnectionPool $r1;

        r0 := @this: com.android.okhttp.HttpsHandler;

        specialinvoke r0.<com.android.okhttp.HttpHandler: void <init>()>();

        $r1 = staticinvoke <com.android.okhttp.ConfigAwareConnectionPool: com.android.okhttp.ConfigAwareConnectionPool getInstance()>();

        r0.<com.android.okhttp.HttpsHandler: com.android.okhttp.ConfigAwareConnectionPool configAwareConnectionPool> = $r1;

        return;
    }

    protected int getDefaultPort()
    {
        com.android.okhttp.HttpsHandler r0;

        r0 := @this: com.android.okhttp.HttpsHandler;

        return 443;
    }

    protected com.android.okhttp.OkHttpClient newOkHttpClient(java.net.Proxy)
    {
        com.android.okhttp.HttpsHandler r0;
        java.net.Proxy r1;
        com.android.okhttp.OkHttpClient r2;
        com.android.okhttp.ConfigAwareConnectionPool $r3;
        com.android.okhttp.ConnectionPool $r4;

        r0 := @this: com.android.okhttp.HttpsHandler;

        r1 := @parameter0: java.net.Proxy;

        r2 = staticinvoke <com.android.okhttp.HttpsHandler: com.android.okhttp.OkHttpClient createHttpsOkHttpClient(java.net.Proxy)>(r1);

        $r3 = r0.<com.android.okhttp.HttpsHandler: com.android.okhttp.ConfigAwareConnectionPool configAwareConnectionPool>;

        $r4 = virtualinvoke $r3.<com.android.okhttp.ConfigAwareConnectionPool: com.android.okhttp.ConnectionPool get()>();

        virtualinvoke r2.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setConnectionPool(com.android.okhttp.ConnectionPool)>($r4);

        return r2;
    }

    public static com.android.okhttp.OkHttpClient createHttpsOkHttpClient(java.net.Proxy)
    {
        java.net.Proxy r0;
        com.android.okhttp.OkHttpClient r1;
        javax.net.ssl.HostnameVerifier r2;
        java.util.List $r3;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r5;

        r0 := @parameter0: java.net.Proxy;

        r1 = staticinvoke <com.android.okhttp.HttpHandler: com.android.okhttp.OkHttpClient createHttpOkHttpClient(java.net.Proxy)>(r0);

        $r3 = <com.android.okhttp.HttpsHandler: java.util.List ENABLED_PROTOCOLS>;

        virtualinvoke r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setProtocols(java.util.List)>($r3);

        r2 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>();

        $z0 = r2 instanceof javax.net.ssl.DefaultHostnameVerifier;

        if $z0 != 0 goto label1;

        virtualinvoke r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)>(r2);

     label1:
        $r5 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        virtualinvoke r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r5);

        return r1;
    }

    static void <clinit>()
    {
        com.android.okhttp.Protocol[] $r0;
        com.android.okhttp.Protocol $r1;
        java.util.List $r2;

        $r0 = newarray (com.android.okhttp.Protocol)[1];

        $r1 = <com.android.okhttp.Protocol: com.android.okhttp.Protocol HTTP_11>;

        $r0[0] = $r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <com.android.okhttp.HttpsHandler: java.util.List ENABLED_PROTOCOLS> = $r2;

        return;
    }
}
