class com.android.okhttp.Job$RealResponseBody extends com.android.okhttp.Response$Body
{
    private final com.android.okhttp.Response response;
    private final com.android.okio.Source source;
    private java.io.InputStream in;

    void <init>(com.android.okhttp.Response, com.android.okio.Source)
    {
        com.android.okhttp.Job$RealResponseBody r0;
        com.android.okhttp.Response r1;
        com.android.okio.Source r2;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        r1 := @parameter0: com.android.okhttp.Response;

        r2 := @parameter1: com.android.okio.Source;

        specialinvoke r0.<com.android.okhttp.Response$Body: void <init>()>();

        r0.<com.android.okhttp.Job$RealResponseBody: com.android.okhttp.Response response> = r1;

        r0.<com.android.okhttp.Job$RealResponseBody: com.android.okio.Source source> = r2;

        return;
    }

    public boolean ready() throws java.io.IOException
    {
        com.android.okhttp.Job$RealResponseBody r0;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        return 1;
    }

    public com.android.okhttp.MediaType contentType()
    {
        com.android.okhttp.Job$RealResponseBody r0;
        java.lang.String r1;
        com.android.okhttp.Response $r2;
        com.android.okhttp.MediaType $r3;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        $r2 = r0.<com.android.okhttp.Job$RealResponseBody: com.android.okhttp.Response response>;

        r1 = virtualinvoke $r2.<com.android.okhttp.Response: java.lang.String header(java.lang.String)>("Content-Type");

        if r1 == null goto label1;

        $r3 = staticinvoke <com.android.okhttp.MediaType: com.android.okhttp.MediaType parse(java.lang.String)>(r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public long contentLength()
    {
        com.android.okhttp.Job$RealResponseBody r0;
        com.android.okhttp.Response $r1;
        long $l0;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        $r1 = r0.<com.android.okhttp.Job$RealResponseBody: com.android.okhttp.Response response>;

        $l0 = staticinvoke <com.android.okhttp.internal.http.OkHeaders: long contentLength(com.android.okhttp.Response)>($r1);

        return $l0;
    }

    public com.android.okio.Source source()
    {
        com.android.okhttp.Job$RealResponseBody r0;
        com.android.okio.Source $r1;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        $r1 = r0.<com.android.okhttp.Job$RealResponseBody: com.android.okio.Source source>;

        return $r1;
    }

    public java.io.InputStream byteStream()
    {
        com.android.okhttp.Job$RealResponseBody r0;
        java.io.InputStream r1, $r4;
        com.android.okio.Source $r2;
        com.android.okio.BufferedSource $r3;

        r0 := @this: com.android.okhttp.Job$RealResponseBody;

        r1 = r0.<com.android.okhttp.Job$RealResponseBody: java.io.InputStream in>;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r2 = r0.<com.android.okhttp.Job$RealResponseBody: com.android.okio.Source source>;

        $r3 = staticinvoke <com.android.okio.Okio: com.android.okio.BufferedSource buffer(com.android.okio.Source)>($r2);

        $r4 = interfaceinvoke $r3.<com.android.okio.BufferedSource: java.io.InputStream inputStream()>();

        r0.<com.android.okhttp.Job$RealResponseBody: java.io.InputStream in> = $r4;

     label2:
        return $r4;
    }
}
