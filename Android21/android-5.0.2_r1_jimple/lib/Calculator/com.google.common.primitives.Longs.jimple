public final class com.google.common.primitives.Longs extends java.lang.Object
{
    public static final int BYTES;
    public static final long MAX_POWER_OF_TWO;

    private void <init>()
    {
        com.google.common.primitives.Longs r0;

        r0 := @this: com.google.common.primitives.Longs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(long)
    {
        long l0, $l1, $l2;
        int $i3;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public static int compare(long, long)
    {
        long l0, l1;
        byte $b2, $b3, $b4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        $b3 = l0 cmp l1;

        if $b3 <= 0 goto label2;

        $b4 = 1;

        goto label3;

     label2:
        $b4 = 0;

     label3:
        return $b4;
    }

    public static boolean contains(long[], long)
    {
        long[] r0, r1;
        long l0, l3;
        int i1, i2;
        byte $b4;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        l3 = r1[i2];

        $b4 = l3 cmp l0;

        if $b4 != 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(long[], long)
    {
        long[] r0;
        long l0;
        int $i1, $i2;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.google.common.primitives.Longs: int indexOf(long[],long,int,int)>(r0, l0, 0, $i1);

        return $i2;
    }

    private static int indexOf(long[], long, int, int)
    {
        long[] r0;
        long l0, $l4;
        int i1, i2, i3;
        byte $b5;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i1;

     label1:
        if i3 >= i2 goto label3;

        $l4 = r0[i3];

        $b5 = $l4 cmp l0;

        if $b5 != 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(long[], long[])
    {
        long[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        long $l9, $l10;
        byte $b11;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i2 = lengthof r1;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i4 = lengthof r0;

        $i3 = lengthof r1;

        $i5 = $i4 - $i3;

        $i6 = $i5 + 1;

        if i0 >= $i6 goto label7;

        i1 = 0;

     label3:
        $i7 = lengthof r1;

        if i1 >= $i7 goto label5;

        $i8 = i0 + i1;

        $l10 = r0[$i8];

        $l9 = r1[i1];

        $b11 = $l10 cmp $l9;

        if $b11 == 0 goto label4;

        goto label6;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return i0;

     label6:
        i0 = i0 + 1;

        goto label2;

     label7:
        return -1;
    }

    public static int lastIndexOf(long[], long)
    {
        long[] r0;
        long l0;
        int $i1, $i2;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.google.common.primitives.Longs: int lastIndexOf(long[],long,int,int)>(r0, l0, 0, $i1);

        return $i2;
    }

    private static int lastIndexOf(long[], long, int, int)
    {
        long[] r0;
        long l0, $l4;
        int i1, i2, i3;
        byte $b5;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i2 - 1;

     label1:
        if i3 < i1 goto label3;

        $l4 = r0[i3];

        $b5 = $l4 cmp l0;

        if $b5 != 0 goto label2;

        return i3;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        return -1;
    }

    public static transient long min(long[])
    {
        long[] r0;
        long l0, $l4;
        int i1, $i2, $i3;
        byte $b5;
        boolean $z0;

        r0 := @parameter0: long[];

        $i2 = lengthof r0;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        l0 = r0[0];

        i1 = 1;

     label3:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label5;

        $l4 = r0[i1];

        $b5 = $l4 cmp l0;

        if $b5 >= 0 goto label4;

        l0 = r0[i1];

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return l0;
    }

    public static transient long max(long[])
    {
        long[] r0;
        long l0, $l4;
        int i1, $i2, $i3;
        byte $b5;
        boolean $z0;

        r0 := @parameter0: long[];

        $i2 = lengthof r0;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        l0 = r0[0];

        i1 = 1;

     label3:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label5;

        $l4 = r0[i1];

        $b5 = $l4 cmp l0;

        if $b5 <= 0 goto label4;

        l0 = r0[i1];

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return l0;
    }

    public static transient long[] concat(long[][])
    {
        long[][] r0, r1, r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        long[] r2, r3, r4;

        r0 := @parameter0: long[][];

        i0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        $i6 = lengthof r2;

        i0 = i0 + $i6;

        i2 = i2 + 1;

        goto label1;

     label2:
        r4 = newarray (long)[i0];

        i7 = 0;

        r5 = r0;

        i8 = lengthof r5;

        i3 = 0;

     label3:
        if i3 >= i8 goto label4;

        r3 = r5[i3];

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, i7, $i4);

        $i5 = lengthof r3;

        i7 = i7 + $i5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r4;
    }

    public static byte[] toByteArray(long)
    {
        long l0, $l1, $l4, $l7, $l10, $l13, $l17, $l18;
        byte[] $r0;
        int $i2, $i5, $i8, $i11, $i15, $i16, $i21, $i23;
        byte $b3, $b6, $b9, $b12, $b14, $b19, $b20, $b22;

        l0 := @parameter0: long;

        $r0 = newarray (byte)[8];

        $l1 = l0 >> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r0[0] = $b3;

        $l4 = l0 >> 48;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $r0[1] = $b6;

        $l7 = l0 >> 40;

        $i8 = (int) $l7;

        $b9 = (byte) $i8;

        $r0[2] = $b9;

        $l10 = l0 >> 32;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $r0[3] = $b12;

        $l13 = l0 >> 24;

        $i15 = (int) $l13;

        $b14 = (byte) $i15;

        $r0[4] = $b14;

        $l17 = l0 >> 16;

        $i16 = (int) $l17;

        $b19 = (byte) $i16;

        $r0[5] = $b19;

        $l18 = l0 >> 8;

        $i21 = (int) $l18;

        $b20 = (byte) $i21;

        $r0[6] = $b20;

        $i23 = (int) l0;

        $b22 = (byte) $i23;

        $r0[7] = $b22;

        return $r0;
    }

    public static long fromByteArray(byte[])
    {
        byte[] r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        boolean $z0;
        java.lang.Integer $r2, $r3;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        long $l10;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $i1 = lengthof r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[1] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "array too small: %s < %s", $r1);

        $b8 = r0[0];

        $b9 = r0[1];

        $b7 = r0[2];

        $b6 = r0[3];

        $b5 = r0[4];

        $b4 = r0[5];

        $b3 = r0[6];

        $b2 = r0[7];

        $l10 = staticinvoke <com.google.common.primitives.Longs: long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)>($b8, $b9, $b7, $b6, $b5, $b4, $b3, $b2);

        return $l10;
    }

    public static long fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte b0, b1, b2, b3, b4, b5, b6, b7;
        long $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32, $l33, $l34, $l35, $l36, $l37;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        b2 := @parameter2: byte;

        b3 := @parameter3: byte;

        b4 := @parameter4: byte;

        b5 := @parameter5: byte;

        b6 := @parameter6: byte;

        b7 := @parameter7: byte;

        $l8 = (long) b0;

        $l9 = $l8 & 255L;

        $l13 = $l9 << 56;

        $l10 = (long) b1;

        $l11 = $l10 & 255L;

        $l12 = $l11 << 48;

        $l16 = $l13 | $l12;

        $l14 = (long) b2;

        $l15 = $l14 & 255L;

        $l17 = $l15 << 40;

        $l20 = $l16 | $l17;

        $l19 = (long) b3;

        $l18 = $l19 & 255L;

        $l21 = $l18 << 32;

        $l24 = $l20 | $l21;

        $l23 = (long) b4;

        $l22 = $l23 & 255L;

        $l25 = $l22 << 24;

        $l28 = $l24 | $l25;

        $l27 = (long) b5;

        $l26 = $l27 & 255L;

        $l29 = $l26 << 16;

        $l35 = $l28 | $l29;

        $l31 = (long) b6;

        $l30 = $l31 & 255L;

        $l34 = $l30 << 8;

        $l36 = $l35 | $l34;

        $l32 = (long) b7;

        $l33 = $l32 & 255L;

        $l37 = $l36 | $l33;

        return $l37;
    }

    public static long[] ensureCapacity(long[], int, int)
    {
        long[] r0, $r5;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r1, $r3;
        boolean $z0, $z1;
        java.lang.Integer $r2, $r4;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r1);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[0] = $r4;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r3);

        $i2 = lengthof r0;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.google.common.primitives.Longs: long[] copyOf(long[],int)>(r0, $i3);

        goto label6;

     label5:
        $r5 = r0;

     label6:
        return $r5;
    }

    private static long[] copyOf(long[], int)
    {
        long[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        r1 = newarray (long)[i0];

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;
    }

    public static transient java.lang.String join(java.lang.String, long[])
    {
        java.lang.String r0, $r6;
        long[] r1;
        java.lang.StringBuilder r2, $r4, $r7;
        int i0, $i1, $i2, $i3, $i5;
        long $l4, $l6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: long[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r4 = new java.lang.StringBuilder;

        $i2 = lengthof r1;

        $i3 = $i2 * 10;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i3);

        r2 = $r4;

        $l4 = r1[0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        i0 = 1;

     label2:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label3;

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $l6 = r1[i0];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Longs$LexicographicalComparator $r0;

        $r0 = <com.google.common.primitives.Longs$LexicographicalComparator: com.google.common.primitives.Longs$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static long[] toArray(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        int i0, i1;
        long[] r2, $r7;
        boolean $z0;
        java.lang.Object $r3, $r4;
        java.lang.Long $r5;
        long $l2;
        com.google.common.primitives.Longs$LongArrayAsList $r6;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.google.common.primitives.Longs$LongArrayAsList;

        if $z0 == 0 goto label1;

        $r6 = (com.google.common.primitives.Longs$LongArrayAsList) r0;

        $r7 = virtualinvoke $r6.<com.google.common.primitives.Longs$LongArrayAsList: long[] toLongArray()>();

        return $r7;

     label1:
        r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r1;

        r2 = newarray (long)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.lang.Long) $r4;

        $l2 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        r2[i1] = $l2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(long[])
    {
        long[] r0;
        int $i0;
        com.google.common.primitives.Longs$LongArrayAsList $r1;
        java.util.List $r2;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.google.common.primitives.Longs$LongArrayAsList;

        specialinvoke $r1.<com.google.common.primitives.Longs$LongArrayAsList: void <init>(long[])>(r0);

        return $r1;
    }

    static int access$000(long[], long, int, int)
    {
        long[] r0;
        long l0;
        int i1, i2, $i3;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.google.common.primitives.Longs: int indexOf(long[],long,int,int)>(r0, l0, i1, i2);

        return $i3;
    }

    static int access$100(long[], long, int, int)
    {
        long[] r0;
        long l0;
        int i1, i2, $i3;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.google.common.primitives.Longs: int lastIndexOf(long[],long,int,int)>(r0, l0, i1, i2);

        return $i3;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Longs: long MAX_POWER_OF_TWO> = 4611686018427387904L;

        <com.google.common.primitives.Longs: int BYTES> = 8;

        return;
    }
}
