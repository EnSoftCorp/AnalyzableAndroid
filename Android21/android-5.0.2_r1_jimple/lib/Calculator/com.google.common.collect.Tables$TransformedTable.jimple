class com.google.common.collect.Tables$TransformedTable extends java.lang.Object implements com.google.common.collect.Table
{
    final com.google.common.collect.Table fromTable;
    final com.google.common.base.Function function;
    com.google.common.collect.Tables$TransformedTable$CellSet cellSet;
    java.util.Collection values;
    java.util.Map rowMap;
    java.util.Map columnMap;

    void <init>(com.google.common.collect.Table, com.google.common.base.Function)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table r1, $r4;
        com.google.common.base.Function r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: com.google.common.collect.Table;

        r2 := @parameter1: com.google.common.base.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (com.google.common.collect.Table) $r3;

        r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable> = $r4;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (com.google.common.base.Function) $r5;

        r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function> = $r6;

        return;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1, r2;
        com.google.common.collect.Table $r3;
        boolean $z0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $z0 = interfaceinvoke $r3.<com.google.common.collect.Table: boolean contains(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        com.google.common.collect.Table $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $z0 = interfaceinvoke $r2.<com.google.common.collect.Table: boolean containsRow(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        com.google.common.collect.Table $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $z0 = interfaceinvoke $r2.<com.google.common.collect.Table: boolean containsColumn(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Collection values()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1, r2, $r5, $r6;
        boolean $z0;
        com.google.common.collect.Table $r3;
        com.google.common.base.Function $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: boolean contains(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function>;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r5 = interfaceinvoke $r3.<com.google.common.collect.Table: java.lang.Object get(java.lang.Object,java.lang.Object)>(r1, r2);

        $r6 = interfaceinvoke $r4.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $z0 = interfaceinvoke $r1.<com.google.common.collect.Table: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table $r1;
        int $i0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $i0 = interfaceinvoke $r1.<com.google.common.collect.Table: int size()>();

        return $i0;
    }

    public void clear()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table $r1;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        interfaceinvoke $r1.<com.google.common.collect.Table: void clear()>();

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1, r2, r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void putAll(com.google.common.collect.Table)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: com.google.common.collect.Table;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1, r2, $r5, $r6;
        boolean $z0;
        com.google.common.collect.Table $r3;
        com.google.common.base.Function $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: boolean contains(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function>;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r5 = interfaceinvoke $r3.<com.google.common.collect.Table: java.lang.Object remove(java.lang.Object,java.lang.Object)>(r1, r2);

        $r6 = interfaceinvoke $r4.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public java.util.Map row(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        com.google.common.collect.Table $r2;
        java.util.Map $r3, $r5;
        com.google.common.base.Function $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Table: java.util.Map row(java.lang.Object)>(r1);

        $r4 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function>;

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>($r3, $r4);

        return $r5;
    }

    public java.util.Map column(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        com.google.common.collect.Table $r2;
        java.util.Map $r3, $r5;
        com.google.common.base.Function $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r3 = interfaceinvoke $r2.<com.google.common.collect.Table: java.util.Map column(java.lang.Object)>(r1);

        $r4 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function>;

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>($r3, $r4);

        return $r5;
    }

    com.google.common.base.Function cellFunction()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Tables$TransformedTable$1 $r1;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = new com.google.common.collect.Tables$TransformedTable$1;

        specialinvoke $r1.<com.google.common.collect.Tables$TransformedTable$1: void <init>(com.google.common.collect.Tables$TransformedTable)>(r0);

        return $r1;
    }

    public java.util.Set cellSet()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Tables$TransformedTable$CellSet $r1, $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Tables$TransformedTable$CellSet cellSet>;

        if $r1 != null goto label1;

        $r2 = new com.google.common.collect.Tables$TransformedTable$CellSet;

        specialinvoke $r2.<com.google.common.collect.Tables$TransformedTable$CellSet: void <init>(com.google.common.collect.Tables$TransformedTable)>(r0);

        r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Tables$TransformedTable$CellSet cellSet> = $r2;

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Tables$TransformedTable$CellSet cellSet>;

     label2:
        return $r2;
    }

    public java.util.Set rowKeySet()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table $r1;
        java.util.Set $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Table: java.util.Set rowKeySet()>();

        return $r2;
    }

    public java.util.Set columnKeySet()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Table $r1;
        java.util.Set $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Table: java.util.Set columnKeySet()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.util.Collection $r1, $r2, $r4;
        com.google.common.collect.Table $r3;
        com.google.common.base.Function $r5;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Collection values>;

        if $r1 != null goto label1;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Table: java.util.Collection values()>();

        $r5 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.base.Function function>;

        $r2 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection transform(java.util.Collection,com.google.common.base.Function)>($r4, $r5);

        r0.<com.google.common.collect.Tables$TransformedTable: java.util.Collection values> = $r2;

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Collection values>;

     label2:
        return $r2;
    }

    java.util.Map createRowMap()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Tables$TransformedTable$2 r1, $r2;
        com.google.common.collect.Table $r3;
        java.util.Map $r4, $r5;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r2 = new com.google.common.collect.Tables$TransformedTable$2;

        specialinvoke $r2.<com.google.common.collect.Tables$TransformedTable$2: void <init>(com.google.common.collect.Tables$TransformedTable)>(r0);

        r1 = $r2;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Table: java.util.Map rowMap()>();

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>($r4, r1);

        return $r5;
    }

    public java.util.Map rowMap()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map rowMap>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map createRowMap()>();

        r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map rowMap> = $r2;

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map rowMap>;

     label2:
        return $r2;
    }

    java.util.Map createColumnMap()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        com.google.common.collect.Tables$TransformedTable$3 r1, $r2;
        com.google.common.collect.Table $r3;
        java.util.Map $r4, $r5;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r2 = new com.google.common.collect.Tables$TransformedTable$3;

        specialinvoke $r2.<com.google.common.collect.Tables$TransformedTable$3: void <init>(com.google.common.collect.Tables$TransformedTable)>(r0);

        r1 = $r2;

        $r3 = r0.<com.google.common.collect.Tables$TransformedTable: com.google.common.collect.Table fromTable>;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Table: java.util.Map columnMap()>();

        $r5 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>($r4, r1);

        return $r5;
    }

    public java.util.Map columnMap()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map columnMap>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map createColumnMap()>();

        r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map columnMap> = $r2;

        goto label2;

     label1:
        $r2 = r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map columnMap>;

     label2:
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.lang.Object r1;
        com.google.common.collect.Table r2;
        boolean $z0, $z1;
        java.util.Set $r3, $r4;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.google.common.collect.Table;

        if $z0 == 0 goto label2;

        r2 = (com.google.common.collect.Table) r1;

        $r3 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Set cellSet()>();

        $r4 = interfaceinvoke r2.<com.google.common.collect.Table: java.util.Set cellSet()>();

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Set cellSet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.google.common.collect.Tables$TransformedTable r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: com.google.common.collect.Tables$TransformedTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.Tables$TransformedTable: java.util.Map rowMap()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
