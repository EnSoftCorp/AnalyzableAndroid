class com.google.common.collect.RegularImmutableMultiset extends com.google.common.collect.ImmutableMultiset
{
    private final transient com.google.common.collect.ImmutableMap map;
    private final transient int size;

    void <init>(com.google.common.collect.ImmutableMap, int)
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableMap r1;
        int i0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        r1 := @parameter0: com.google.common.collect.ImmutableMap;

        i0 := @parameter1: int;

        specialinvoke r0.<com.google.common.collect.ImmutableMultiset: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map> = r1;

        r0.<com.google.common.collect.RegularImmutableMultiset: int size> = i0;

        return;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableMap $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r1 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $z0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: boolean isPartialView()>();

        return $z0;
    }

    public int count(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        java.lang.Object r1, $r4;
        java.lang.Integer r2;
        com.google.common.collect.ImmutableMap $r3;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $i0 = r0.<com.google.common.collect.RegularImmutableMultiset: int size>;

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableMap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public com.google.common.collect.ImmutableSet elementSet()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableSet $r2;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r1 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    com.google.common.collect.UnmodifiableIterator entryIterator()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.UnmodifiableIterator r1;
        com.google.common.collect.ImmutableMap $r2;
        com.google.common.collect.ImmutableSet $r3;
        com.google.common.collect.RegularImmutableMultiset$1 $r4;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r2 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet entrySet()>();

        r1 = virtualinvoke $r3.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r4 = new com.google.common.collect.RegularImmutableMultiset$1;

        specialinvoke $r4.<com.google.common.collect.RegularImmutableMultiset$1: void <init>(com.google.common.collect.RegularImmutableMultiset,java.util.Iterator)>(r0, r1);

        return $r4;
    }

    public int hashCode()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableMap $r1;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r1 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: int hashCode()>();

        return $i0;
    }

    int distinctElements()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableMap $r1;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r1 = r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableMap map>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: int size()>();

        return $i0;
    }

    public volatile java.util.Set elementSet()
    {
        com.google.common.collect.RegularImmutableMultiset r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableMultiset;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableMultiset: com.google.common.collect.ImmutableSet elementSet()>();

        return $r1;
    }
}
