public final class com.google.common.io.ByteStreams extends java.lang.Object
{
    private static final int BUF_SIZE;

    private void <init>()
    {
        com.google.common.io.ByteStreams r0;

        r0 := @this: com.google.common.io.ByteStreams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.io.InputSupplier newInputStreamSupplier(byte[])
    {
        byte[] r0;
        int $i0;
        com.google.common.io.InputSupplier $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.InputSupplier newInputStreamSupplier(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static com.google.common.io.InputSupplier newInputStreamSupplier(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        com.google.common.io.ByteStreams$1 $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new com.google.common.io.ByteStreams$1;

        specialinvoke $r1.<com.google.common.io.ByteStreams$1: void <init>(byte[],int,int)>(r0, i0, i1);

        return $r1;
    }

    public static void write(byte[], com.google.common.io.OutputSupplier) throws java.io.IOException
    {
        byte[] r0;
        com.google.common.io.OutputSupplier r1;
        boolean z0, z1;
        java.io.OutputStream r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object $r5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: com.google.common.io.OutputSupplier;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z0 = 1;

        $r5 = interfaceinvoke r1.<com.google.common.io.OutputSupplier: java.lang.Object getOutput()>();

        r2 = (java.io.OutputStream) $r5;

     label1:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r0);

        z1 = 0;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z1);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z0);

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long copy(com.google.common.io.InputSupplier, com.google.common.io.OutputSupplier) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        com.google.common.io.OutputSupplier r1;
        int i0, i3;
        java.io.InputStream r2;
        java.io.OutputStream r3;
        long l1, l2;
        java.lang.Throwable r4, r5, $r8, $r9;
        java.lang.Object $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: com.google.common.io.OutputSupplier;

        i0 = 0;

        $r6 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.io.InputStream) $r6;

     label01:
        $r7 = interfaceinvoke r1.<com.google.common.io.OutputSupplier: java.lang.Object getOutput()>();

        r3 = (java.io.OutputStream) $r7;

     label02:
        l1 = staticinvoke <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r2, r3);

        i0 = i0 + 1;

        l2 = l1;

     label03:
        if i0 >= 1 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, $z1);

        i3 = i0 + 1;

     label06:
        if i3 >= 2 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, $z0);

        return l2;

     label09:
        $r8 := @caughtexception;

        r4 = $r8;

     label10:
        if i0 >= 1 goto label11;

        $z2 = 1;

        goto label12;

     label11:
        $z2 = 0;

     label12:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, $z2);

        i0 = i0 + 1;

        throw r4;

     label13:
        $r9 := @caughtexception;

        r5 = $r9;

     label14:
        if i0 >= 2 goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, $z3);

        throw r5;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label06 with label13;
        catch java.lang.Throwable from label09 to label14 with label13;
    }

    public static long copy(com.google.common.io.InputSupplier, java.io.OutputStream) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        java.io.OutputStream r1;
        boolean z0;
        java.io.InputStream r2;
        long l0, l1;
        java.lang.Throwable r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: java.io.OutputStream;

        z0 = 1;

        $r4 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r2 = (java.io.InputStream) $r4;

     label1:
        l0 = staticinvoke <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r2, r1);

        z0 = 0;

        l1 = l0;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z0);

        return l1;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z0);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long copy(java.io.InputStream, com.google.common.io.OutputSupplier) throws java.io.IOException
    {
        java.io.InputStream r0;
        com.google.common.io.OutputSupplier r1;
        boolean z0;
        java.io.OutputStream r2;
        long l0, l1;
        java.lang.Throwable r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.google.common.io.OutputSupplier;

        z0 = 1;

        $r4 = interfaceinvoke r1.<com.google.common.io.OutputSupplier: java.lang.Object getOutput()>();

        r2 = (java.io.OutputStream) $r4;

     label1:
        l0 = staticinvoke <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r0, r2);

        z0 = 0;

        l1 = l0;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z0);

        return l1;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r2, z0);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        long l0, $l2;
        int i1;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[4096];

        l0 = 0L;

     label1:
        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i1 != -1 goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i1);

        $l2 = (long) i1;

        l0 = l0 + $l2;

        goto label1;

     label3:
        return l0;
    }

    public static long copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.ByteBuffer r2;
        long l0, $l3;
        int $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;

        r1 := @parameter1: java.nio.channels.WritableByteChannel;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4096);

        l0 = 0L;

     label1:
        $i1 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r2);

        if $i1 == -1 goto label4;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label2:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r2);

        $l3 = (long) $i2;

        l0 = l0 + $l3;

        goto label2;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label1;

     label4:
        return l0;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream r1, $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

        staticinvoke <com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] toByteArray(com.google.common.io.InputSupplier) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        boolean z0;
        java.io.InputStream r1;
        byte[] r2, r3;
        java.lang.Throwable r4, $r6;
        java.lang.Object $r5;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        z0 = 1;

        $r5 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r1 = (java.io.InputStream) $r5;

     label1:
        r2 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>(r1);

        z0 = 0;

        r3 = r2;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, z0);

        return r3;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, z0);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static com.google.common.io.ByteArrayDataInput newDataInput(byte[])
    {
        byte[] r0;
        com.google.common.io.ByteStreams$ByteArrayDataInputStream $r1;

        r0 := @parameter0: byte[];

        $r1 = new com.google.common.io.ByteStreams$ByteArrayDataInputStream;

        specialinvoke $r1.<com.google.common.io.ByteStreams$ByteArrayDataInputStream: void <init>(byte[])>(r0);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataInput newDataInput(byte[], int)
    {
        byte[] r0;
        int i0, $i1;
        com.google.common.io.ByteStreams$ByteArrayDataInputStream $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>(i0, $i1);

        $r1 = new com.google.common.io.ByteStreams$ByteArrayDataInputStream;

        specialinvoke $r1.<com.google.common.io.ByteStreams$ByteArrayDataInputStream: void <init>(byte[],int)>(r0, i0);

        return $r1;
    }

    public static com.google.common.io.ByteArrayDataOutput newDataOutput()
    {
        com.google.common.io.ByteStreams$ByteArrayDataOutputStream $r0;

        $r0 = new com.google.common.io.ByteStreams$ByteArrayDataOutputStream;

        specialinvoke $r0.<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void <init>()>();

        return $r0;
    }

    public static com.google.common.io.ByteArrayDataOutput newDataOutput(int)
    {
        int i0;
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Integer $r1;
        com.google.common.io.ByteStreams$ByteArrayDataOutputStream $r2;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid size: %s", $r0);

        $r2 = new com.google.common.io.ByteStreams$ByteArrayDataOutputStream;

        specialinvoke $r2.<com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void <init>(int)>(i0);

        return $r2;
    }

    public static long length(com.google.common.io.InputSupplier) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        long l0, l1, l2;
        boolean z0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object $r3;
        byte $b3;
        int $i4;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        l0 = 0L;

        z0 = 1;

        $r3 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r1 = (java.io.InputStream) $r3;

     label1:
        l1 = virtualinvoke r1.<java.io.InputStream: long skip(long)>(2147483647L);

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label4;

        $i4 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i4 != -1 goto label3;

        z0 = 0;

        l2 = l0;

     label2:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, z0);

        return l2;

     label3:
        l0 = l0 + 1L;

        goto label5;

     label4:
        l0 = l0 + l1;

     label5:
        goto label1;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r1, z0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label7 with label6;
    }

    public static boolean equal(com.google.common.io.InputSupplier, com.google.common.io.InputSupplier) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0, r1;
        byte[] r2, r3;
        boolean z0, z1, $z2, z3;
        java.io.InputStream r4, r5;
        int i0, i1;
        java.lang.Throwable r6, r7, $r10, $r11;
        java.lang.Object $r8, $r9;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: com.google.common.io.InputSupplier;

        r2 = newarray (byte)[4096];

        r3 = newarray (byte)[4096];

        z0 = 1;

        $r8 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r4 = (java.io.InputStream) $r8;

     label01:
        $r9 = interfaceinvoke r1.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r5 = (java.io.InputStream) $r9;

     label02:
        i0 = staticinvoke <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>(r4, r2, 0, 4096);

        i1 = staticinvoke <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>(r5, r3, 0, 4096);

        if i0 != i1 goto label03;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, r3);

        if $z2 != 0 goto label06;

     label03:
        z0 = 0;

        z1 = 0;

     label04:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r5, z0);

     label05:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r4, z0);

        return z1;

     label06:
        if i0 == 4096 goto label09;

        z0 = 0;

        z3 = 1;

     label07:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r5, z0);

     label08:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r4, z0);

        return z3;

     label09:
        goto label02;

     label10:
        $r11 := @caughtexception;

        r6 = $r11;

     label11:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r5, z0);

        throw r6;

     label12:
        $r10 := @caughtexception;

        r7 = $r10;

     label13:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r4, z0);

        throw r7;

        catch java.lang.Throwable from label02 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label13 with label12;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <com.google.common.io.ByteStreams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.EOFException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1);

        if $i2 == i1 goto label1;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public static void skipFully(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1;
        byte $b2, $b3;
        int $i4;
        java.io.EOFException $r1;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label5;

        l1 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l0);

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label3;

        $i4 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i4 != -1 goto label2;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label2:
        l0 = l0 - 1L;

        goto label4;

     label3:
        l0 = l0 - l1;

     label4:
        goto label1;

     label5:
        return;
    }

    public static java.lang.Object readBytes(com.google.common.io.InputSupplier, com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        com.google.common.io.ByteProcessor r1;
        byte[] r2;
        boolean z0, $z1;
        java.io.InputStream r3;
        int i0;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r7;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: com.google.common.io.ByteProcessor;

        r2 = newarray (byte)[4096];

        z0 = 1;

        $r6 = interfaceinvoke r0.<com.google.common.io.InputSupplier: java.lang.Object getInput()>();

        r3 = (java.io.InputStream) $r6;

     label1:
        i0 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r2);

        if i0 != -1 goto label2;

        z0 = 0;

        goto label3;

     label2:
        $z1 = interfaceinvoke r1.<com.google.common.io.ByteProcessor: boolean processBytes(byte[],int,int)>(r2, 0, i0);

        if $z1 != 0 goto label1;

     label3:
        r4 = interfaceinvoke r1.<com.google.common.io.ByteProcessor: java.lang.Object getResult()>();

     label4:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, z0);

        return r4;

     label5:
        $r7 := @caughtexception;

        r5 = $r7;

     label6:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r3, z0);

        throw r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static long getChecksum(com.google.common.io.InputSupplier, java.util.zip.Checksum) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        java.util.zip.Checksum r1;
        com.google.common.io.ByteStreams$2 $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l0;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: java.util.zip.Checksum;

        $r2 = new com.google.common.io.ByteStreams$2;

        specialinvoke $r2.<com.google.common.io.ByteStreams$2: void <init>(java.util.zip.Checksum)>(r1);

        $r3 = staticinvoke <com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)>(r0, $r2);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static byte[] getDigest(com.google.common.io.InputSupplier, java.security.MessageDigest) throws java.io.IOException
    {
        com.google.common.io.InputSupplier r0;
        java.security.MessageDigest r1;
        com.google.common.io.ByteStreams$3 $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        r1 := @parameter1: java.security.MessageDigest;

        $r2 = new com.google.common.io.ByteStreams$3;

        specialinvoke $r2.<com.google.common.io.ByteStreams$3: void <init>(java.security.MessageDigest)>(r1);

        $r3 = staticinvoke <com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)>(r0, $r2);

        $r4 = (byte[]) $r3;

        return $r4;
    }

    public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 >= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("len is negative");

        throw $r2;

     label1:
        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $i5 = i0 + i2;

        $i4 = i1 - i2;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i5, $i4);

        if i3 != -1 goto label3;

        goto label4;

     label3:
        i2 = i2 + i3;

        goto label2;

     label4:
        return i2;
    }

    public static com.google.common.io.InputSupplier slice(com.google.common.io.InputSupplier, long, long)
    {
        com.google.common.io.InputSupplier r0;
        long l0, l1;
        byte $b2, $b3;
        com.google.common.io.ByteStreams$4 $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.google.common.io.InputSupplier;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "offset is negative");

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "length is negative");

        $r2 = new com.google.common.io.ByteStreams$4;

        specialinvoke $r2.<com.google.common.io.ByteStreams$4: void <init>(com.google.common.io.InputSupplier,long,long)>(r0, l0, l1);

        return $r2;
    }

    public static com.google.common.io.InputSupplier join(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.io.ByteStreams$5 $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.io.ByteStreams$5;

        specialinvoke $r1.<com.google.common.io.ByteStreams$5: void <init>(java.lang.Iterable)>(r0);

        return $r1;
    }

    public static transient com.google.common.io.InputSupplier join(com.google.common.io.InputSupplier[])
    {
        com.google.common.io.InputSupplier[] r0;
        java.util.List $r1;
        com.google.common.io.InputSupplier $r2;

        r0 := @parameter0: com.google.common.io.InputSupplier[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.InputSupplier join(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.google.common.io.ByteStreams: int BUF_SIZE> = 4096;

        return;
    }
}
