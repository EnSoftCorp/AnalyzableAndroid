class org.javia.arity.Compiler extends java.lang.Object
{
    private final org.javia.arity.SyntaxException exception;
    private final org.javia.arity.Lexer lexer;
    private final org.javia.arity.RPN rpn;
    private final org.javia.arity.DeclarationParser declParser;
    private final org.javia.arity.OptCodeGen codeGen;
    private final org.javia.arity.SimpleCodeGen simpleCodeGen;
    private final org.javia.arity.Declaration decl;

    void <init>()
    {
        org.javia.arity.Compiler r0;
        org.javia.arity.SyntaxException $r1, $r3, $r5, $r7, $r9, $r11;
        org.javia.arity.Lexer $r2;
        org.javia.arity.RPN $r4;
        org.javia.arity.DeclarationParser $r6;
        org.javia.arity.OptCodeGen $r8;
        org.javia.arity.SimpleCodeGen $r10;
        org.javia.arity.Declaration $r12;

        r0 := @this: org.javia.arity.Compiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.javia.arity.SyntaxException;

        specialinvoke $r1.<org.javia.arity.SyntaxException: void <init>()>();

        r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception> = $r1;

        $r2 = new org.javia.arity.Lexer;

        $r3 = r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception>;

        specialinvoke $r2.<org.javia.arity.Lexer: void <init>(org.javia.arity.SyntaxException)>($r3);

        r0.<org.javia.arity.Compiler: org.javia.arity.Lexer lexer> = $r2;

        $r4 = new org.javia.arity.RPN;

        $r5 = r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception>;

        specialinvoke $r4.<org.javia.arity.RPN: void <init>(org.javia.arity.SyntaxException)>($r5);

        r0.<org.javia.arity.Compiler: org.javia.arity.RPN rpn> = $r4;

        $r6 = new org.javia.arity.DeclarationParser;

        $r7 = r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception>;

        specialinvoke $r6.<org.javia.arity.DeclarationParser: void <init>(org.javia.arity.SyntaxException)>($r7);

        r0.<org.javia.arity.Compiler: org.javia.arity.DeclarationParser declParser> = $r6;

        $r8 = new org.javia.arity.OptCodeGen;

        $r9 = r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception>;

        specialinvoke $r8.<org.javia.arity.OptCodeGen: void <init>(org.javia.arity.SyntaxException)>($r9);

        r0.<org.javia.arity.Compiler: org.javia.arity.OptCodeGen codeGen> = $r8;

        $r10 = new org.javia.arity.SimpleCodeGen;

        $r11 = r0.<org.javia.arity.Compiler: org.javia.arity.SyntaxException exception>;

        specialinvoke $r10.<org.javia.arity.SimpleCodeGen: void <init>(org.javia.arity.SyntaxException)>($r11);

        r0.<org.javia.arity.Compiler: org.javia.arity.SimpleCodeGen simpleCodeGen> = $r10;

        $r12 = new org.javia.arity.Declaration;

        specialinvoke $r12.<org.javia.arity.Declaration: void <init>()>();

        r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl> = $r12;

        return;
    }

    org.javia.arity.Function compileSimple(org.javia.arity.Symbols, java.lang.String) throws org.javia.arity.SyntaxException
    {
        org.javia.arity.Compiler r0;
        org.javia.arity.Symbols r1;
        java.lang.String r2;
        org.javia.arity.SimpleCodeGen $r3, $r5, $r8;
        org.javia.arity.RPN $r4, $r6;
        org.javia.arity.Lexer $r7;
        org.javia.arity.CompiledFunction $r9;

        r0 := @this: org.javia.arity.Compiler;

        r1 := @parameter0: org.javia.arity.Symbols;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.javia.arity.Compiler: org.javia.arity.RPN rpn>;

        $r3 = r0.<org.javia.arity.Compiler: org.javia.arity.SimpleCodeGen simpleCodeGen>;

        $r5 = virtualinvoke $r3.<org.javia.arity.SimpleCodeGen: org.javia.arity.SimpleCodeGen setSymbols(org.javia.arity.Symbols)>(r1);

        virtualinvoke $r4.<org.javia.arity.RPN: void setConsumer(org.javia.arity.TokenConsumer)>($r5);

        $r7 = r0.<org.javia.arity.Compiler: org.javia.arity.Lexer lexer>;

        $r6 = r0.<org.javia.arity.Compiler: org.javia.arity.RPN rpn>;

        virtualinvoke $r7.<org.javia.arity.Lexer: void scan(java.lang.String,org.javia.arity.TokenConsumer)>(r2, $r6);

        $r8 = r0.<org.javia.arity.Compiler: org.javia.arity.SimpleCodeGen simpleCodeGen>;

        $r9 = virtualinvoke $r8.<org.javia.arity.SimpleCodeGen: org.javia.arity.CompiledFunction getFun()>();

        return $r9;
    }

    org.javia.arity.Function compile(org.javia.arity.Symbols, java.lang.String) throws org.javia.arity.SyntaxException
    {
        org.javia.arity.Compiler r0;
        org.javia.arity.Symbols r1;
        java.lang.String r2, $r18, $r25;
        org.javia.arity.Function r3, $r24;
        org.javia.arity.SyntaxException r4, $r28, $r29;
        java.lang.Throwable r5, $r26;
        org.javia.arity.DeclarationParser $r6;
        org.javia.arity.Lexer $r7, $r17;
        org.javia.arity.Declaration $r8, $r9, $r10, $r16, $r20, $r22;
        int $i0, i1;
        java.lang.String[] $r11;
        org.javia.arity.OptCodeGen $r12, $r19, $r21;
        org.javia.arity.RPN $r13, $r15;
        org.javia.arity.SimpleCodeGen $r14;
        org.javia.arity.Constant $r23;
        org.javia.arity.Complex $r27;

        r0 := @this: org.javia.arity.Compiler;

        r1 := @parameter0: org.javia.arity.Symbols;

        r2 := @parameter1: java.lang.String;

        r3 = null;

        $r8 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $r7 = r0.<org.javia.arity.Compiler: org.javia.arity.Lexer lexer>;

        $r6 = r0.<org.javia.arity.Compiler: org.javia.arity.DeclarationParser declParser>;

        virtualinvoke $r8.<org.javia.arity.Declaration: void parse(java.lang.String,org.javia.arity.Lexer,org.javia.arity.DeclarationParser)>(r2, $r7, $r6);

        $r9 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $i0 = $r9.<org.javia.arity.Declaration: int arity>;

        if $i0 != -2 goto label04;

     label01:
        $r23 = new org.javia.arity.Constant;

        $r22 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $r25 = $r22.<org.javia.arity.Declaration: java.lang.String expression>;

        $r24 = virtualinvoke r0.<org.javia.arity.Compiler: org.javia.arity.Function compileSimple(org.javia.arity.Symbols,java.lang.String)>(r1, $r25);

        $r27 = virtualinvoke $r24.<org.javia.arity.Function: org.javia.arity.Complex evalComplex()>();

        specialinvoke $r23.<org.javia.arity.Constant: void <init>(org.javia.arity.Complex)>($r27);

        r3 = $r23;

     label02:
        goto label04;

     label03:
        $r29 := @caughtexception;

        r4 = $r29;

        $r28 = <org.javia.arity.SimpleCodeGen: org.javia.arity.SyntaxException HAS_ARGUMENTS>;

        if r4 == $r28 goto label04;

        throw r4;

     label04:
        if r3 != null goto label11;

        virtualinvoke r1.<org.javia.arity.Symbols: void pushFrame()>();

        $r10 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $r11 = $r10.<org.javia.arity.Declaration: java.lang.String[] args>;

        virtualinvoke r1.<org.javia.arity.Symbols: void addArguments(java.lang.String[])>($r11);

     label05:
        $r13 = r0.<org.javia.arity.Compiler: org.javia.arity.RPN rpn>;

        $r12 = r0.<org.javia.arity.Compiler: org.javia.arity.OptCodeGen codeGen>;

        $r14 = virtualinvoke $r12.<org.javia.arity.OptCodeGen: org.javia.arity.SimpleCodeGen setSymbols(org.javia.arity.Symbols)>(r1);

        virtualinvoke $r13.<org.javia.arity.RPN: void setConsumer(org.javia.arity.TokenConsumer)>($r14);

        $r17 = r0.<org.javia.arity.Compiler: org.javia.arity.Lexer lexer>;

        $r16 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $r18 = $r16.<org.javia.arity.Declaration: java.lang.String expression>;

        $r15 = r0.<org.javia.arity.Compiler: org.javia.arity.RPN rpn>;

        virtualinvoke $r17.<org.javia.arity.Lexer: void scan(java.lang.String,org.javia.arity.TokenConsumer)>($r18, $r15);

     label06:
        virtualinvoke r1.<org.javia.arity.Symbols: void popFrame()>();

        goto label09;

     label07:
        $r26 := @caughtexception;

        r5 = $r26;

     label08:
        virtualinvoke r1.<org.javia.arity.Symbols: void popFrame()>();

        throw r5;

     label09:
        $r20 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        i1 = $r20.<org.javia.arity.Declaration: int arity>;

        if i1 != -2 goto label10;

        $r21 = r0.<org.javia.arity.Compiler: org.javia.arity.OptCodeGen codeGen>;

        i1 = $r21.<org.javia.arity.OptCodeGen: int intrinsicArity>;

     label10:
        $r19 = r0.<org.javia.arity.Compiler: org.javia.arity.OptCodeGen codeGen>;

        r3 = virtualinvoke $r19.<org.javia.arity.OptCodeGen: org.javia.arity.CompiledFunction getFun(int)>(i1);

     label11:
        r3.<org.javia.arity.Function: java.lang.String comment> = r2;

        return r3;

        catch org.javia.arity.SyntaxException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    org.javia.arity.FunctionAndName compileWithName(org.javia.arity.Symbols, java.lang.String) throws org.javia.arity.SyntaxException
    {
        org.javia.arity.Compiler r0;
        org.javia.arity.Symbols r1;
        java.lang.String r2, $r6;
        org.javia.arity.FunctionAndName $r3;
        org.javia.arity.Function $r4;
        org.javia.arity.Declaration $r5;

        r0 := @this: org.javia.arity.Compiler;

        r1 := @parameter0: org.javia.arity.Symbols;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.javia.arity.FunctionAndName;

        $r4 = virtualinvoke r0.<org.javia.arity.Compiler: org.javia.arity.Function compile(org.javia.arity.Symbols,java.lang.String)>(r1, r2);

        $r5 = r0.<org.javia.arity.Compiler: org.javia.arity.Declaration decl>;

        $r6 = $r5.<org.javia.arity.Declaration: java.lang.String name>;

        specialinvoke $r3.<org.javia.arity.FunctionAndName: void <init>(org.javia.arity.Function,java.lang.String)>($r4, $r6);

        return $r3;
    }
}
