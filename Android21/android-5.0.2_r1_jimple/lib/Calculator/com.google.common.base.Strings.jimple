public final class com.google.common.base.Strings extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.base.Strings r0;

        r0 := @this: com.google.common.base.Strings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String nullToEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.lang.String emptyToNull(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static boolean isNullOrEmpty(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String padStart(java.lang.String, int, char)
    {
        java.lang.String r0, $r5;
        int i0, i2, $i3;
        char c1;
        java.lang.StringBuilder r1, $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 < i0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i0);

        r1 = $r3;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        if i2 >= i0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String padEnd(java.lang.String, int, char)
    {
        java.lang.String r0, $r5;
        int i0, i2, $i3;
        char c1;
        java.lang.StringBuilder r1, $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 < i0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i0);

        r1 = $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        if i2 >= i0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String repeat(java.lang.String, int)
    {
        java.lang.String r0, $r4, $r8, $r10, $r12;
        int i0, i1, i3, i4, $i9, $i10;
        long l2, $l5, $l6, $l7;
        char[] r1;
        byte $b8;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object[] $r9;
        boolean $z0;
        java.lang.Integer $r11;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 > 1 goto label5;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r9 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r11;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "invalid count: %s", $r9);

        if i0 != 0 goto label3;

        $r12 = "";

        goto label4;

     label3:
        $r12 = r0;

     label4:
        return $r12;

     label5:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $l6 = (long) i1;

        $l5 = (long) i0;

        l2 = $l6 * $l5;

        i3 = (int) l2;

        $l7 = (long) i3;

        $b8 = $l7 cmp l2;

        if $b8 == 0 goto label6;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required array size too large: ");

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label6:
        r1 = newarray (char)[i3];

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, i1, r1, 0);

        i4 = i1;

     label7:
        $i9 = i3 - i4;

        if i4 >= $i9 goto label8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, i4, i4);

        i4 = i4 << 1;

        goto label7;

     label8:
        $i10 = i3 - i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, i4, $i10);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1);

        return $r4;
    }

    public static java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1, $r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.lang.String $r5;
        char $c6, $c7;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        $c7 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c6 != $c7 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i4 = i1 - 1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>(r0, $i4);

        if $z0 != 0 goto label3;

        $i5 = i1 - 1;

        $z1 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>(r1, $i5);

        if $z1 == 0 goto label4;

     label3:
        i1 = i1 + -1;

     label4:
        $r4 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i1);

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i20;
        boolean $z0, $z1;
        java.lang.String $r4;
        char $c15, $c19;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i14 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i13 = $i14 - i1;

        $i16 = $i13 - 1;

        $c15 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i16);

        $i18 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i17 = $i18 - i1;

        $i20 = $i17 - 1;

        $c19 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i20);

        if $c15 != $c19 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - i1;

        $i6 = $i5 - 1;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>(r0, $i6);

        if $z0 != 0 goto label3;

        $i11 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i10 = $i11 - i1;

        $i12 = $i10 - 1;

        $z1 = staticinvoke <com.google.common.base.Strings: boolean validSurrogatePairAt(java.lang.CharSequence,int)>(r1, $i12);

        if $z1 == 0 goto label4;

     label3:
        i1 = i1 + -1;

     label4:
        $i7 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i8 = $i7 - i1;

        $i9 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r5 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i8, $i9);

        $r4 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>();

        return $r4;
    }

    static boolean validSurrogatePairAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, $i1, $i2, $i4;
        char $c3, $c5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 2;

        if i0 > $i2 goto label1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c3);

        if $z0 == 0 goto label1;

        $i4 = i0 + 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
