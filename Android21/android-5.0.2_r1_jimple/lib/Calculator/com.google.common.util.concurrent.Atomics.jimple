public final class com.google.common.util.concurrent.Atomics extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.concurrent.Atomics r0;

        r0 := @this: com.google.common.util.concurrent.Atomics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.atomic.AtomicReference newReference()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        return $r0;
    }

    public static java.util.concurrent.atomic.AtomicReference newReference(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(int)
    {
        int i0;
        java.util.concurrent.atomic.AtomicReferenceArray $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(java.lang.Object[])>(r0);

        return $r1;
    }
}
