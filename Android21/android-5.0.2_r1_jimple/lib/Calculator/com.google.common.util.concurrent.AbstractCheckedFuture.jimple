public abstract class com.google.common.util.concurrent.AbstractCheckedFuture extends com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture implements com.google.common.util.concurrent.CheckedFuture
{

    protected void <init>(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.AbstractCheckedFuture r0;
        com.google.common.util.concurrent.ListenableFuture r1;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>(r1);

        return;
    }

    protected abstract java.lang.Exception mapException(java.lang.Exception);

    public java.lang.Object checkedGet() throws java.lang.Exception
    {
        com.google.common.util.concurrent.AbstractCheckedFuture r0;
        java.lang.InterruptedException r1, $r7;
        java.lang.Object $r2;
        java.util.concurrent.CancellationException $r3, r10;
        java.lang.Exception $r4, $r6, $r9;
        java.util.concurrent.ExecutionException $r5, r11;
        java.lang.Thread $r8;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Object get()>();

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        $r9 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r1);

        throw $r9;

     label4:
        $r3 := @caughtexception;

        r10 = $r3;

        $r4 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r10);

        throw $r4;

     label5:
        $r5 := @caughtexception;

        r11 = $r5;

        $r6 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r11);

        throw $r6;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
    }

    public java.lang.Object checkedGet(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.lang.Exception
    {
        com.google.common.util.concurrent.AbstractCheckedFuture r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.InterruptedException r2, $r8;
        java.lang.Object $r3;
        java.util.concurrent.CancellationException $r4, r11;
        java.lang.Exception $r5, $r7, $r10;
        java.util.concurrent.ExecutionException $r6, r12;
        java.lang.Thread $r9;

        r0 := @this: com.google.common.util.concurrent.AbstractCheckedFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        $r10 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r2);

        throw $r10;

     label4:
        $r4 := @caughtexception;

        r11 = $r4;

        $r5 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r11);

        throw $r5;

     label5:
        $r6 := @caughtexception;

        r12 = $r6;

        $r7 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractCheckedFuture: java.lang.Exception mapException(java.lang.Exception)>(r12);

        throw $r7;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
    }
}
