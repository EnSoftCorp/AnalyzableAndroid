class org.javia.arity.Lexer extends java.lang.Object
{
    static final int ADD;
    static final int SUB;
    static final int MUL;
    static final int DIV;
    static final int MOD;
    static final int UMIN;
    static final int POWER;
    static final int FACT;
    static final int NUMBER;
    static final int CONST;
    static final int CALL;
    static final int COMMA;
    static final int LPAREN;
    static final int RPAREN;
    static final int END;
    static final int SQRT;
    static final int PERCENT;
    static final org.javia.arity.Token TOK_ADD;
    static final org.javia.arity.Token TOK_SUB;
    static final org.javia.arity.Token TOK_MUL;
    static final org.javia.arity.Token TOK_DIV;
    static final org.javia.arity.Token TOK_MOD;
    static final org.javia.arity.Token TOK_UMIN;
    static final org.javia.arity.Token TOK_POWER;
    static final org.javia.arity.Token TOK_FACT;
    static final org.javia.arity.Token TOK_PERCENT;
    static final org.javia.arity.Token TOK_SQRT;
    static final org.javia.arity.Token TOK_LPAREN;
    static final org.javia.arity.Token TOK_RPAREN;
    static final org.javia.arity.Token TOK_COMMA;
    static final org.javia.arity.Token TOK_END;
    static final org.javia.arity.Token TOK_NUMBER;
    static final org.javia.arity.Token TOK_CONST;
    private static final char UNICODE_MINUS;
    private static final char UNICODE_MUL;
    private static final char UNICODE_DIV;
    private static final char UNICODE_SQRT;
    private static final java.lang.String WHITESPACE;
    private static final char END_MARKER;
    private char[] input;
    private int pos;
    private org.javia.arity.SyntaxException exception;

    void <init>(org.javia.arity.SyntaxException)
    {
        org.javia.arity.Lexer r0;
        org.javia.arity.SyntaxException r1;
        char[] $r2;

        r0 := @this: org.javia.arity.Lexer;

        r1 := @parameter0: org.javia.arity.SyntaxException;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (char)[32];

        r0.<org.javia.arity.Lexer: char[] input> = $r2;

        r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception> = r1;

        return;
    }

    void scan(java.lang.String, org.javia.arity.TokenConsumer) throws org.javia.arity.SyntaxException
    {
        org.javia.arity.Lexer r0;
        java.lang.String r1;
        org.javia.arity.TokenConsumer r2;
        org.javia.arity.Token r3, $r5;
        int i0, $i1, $i2;
        org.javia.arity.SyntaxException $r4, $r6, $r7;

        r0 := @this: org.javia.arity.Lexer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.javia.arity.TokenConsumer;

        $r4 = r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception>;

        $r4.<org.javia.arity.SyntaxException: java.lang.String expression> = r1;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(36);

        if $i1 == -1 goto label1;

        $r6 = r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception>;

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(36);

        $r7 = virtualinvoke $r6.<org.javia.arity.SyntaxException: org.javia.arity.SyntaxException set(java.lang.String,int)>("Invalid character \'$\'", $i2);

        throw $r7;

     label1:
        specialinvoke r0.<org.javia.arity.Lexer: void init(java.lang.String)>(r1);

        virtualinvoke r2.<org.javia.arity.TokenConsumer: void start()>();

     label2:
        i0 = r0.<org.javia.arity.Lexer: int pos>;

        r3 = virtualinvoke r0.<org.javia.arity.Lexer: org.javia.arity.Token nextToken()>();

        r3.<org.javia.arity.Token: int position> = i0;

        virtualinvoke r2.<org.javia.arity.TokenConsumer: void push(org.javia.arity.Token)>(r3);

        $r5 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_END>;

        if r3 != $r5 goto label2;

        return;
    }

    private void init(java.lang.String)
    {
        org.javia.arity.Lexer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        char[] $r2, $r3, $r4, $r5;

        r0 := @this: org.javia.arity.Lexer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = r0.<org.javia.arity.Lexer: char[] input>;

        $i2 = lengthof $r2;

        $i1 = i0 + 1;

        if $i2 >= $i1 goto label1;

        $i3 = i0 + 1;

        $r5 = newarray (char)[$i3];

        r0.<org.javia.arity.Lexer: char[] input> = $r5;

     label1:
        $r3 = r0.<org.javia.arity.Lexer: char[] input>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r3, 0);

        $r4 = r0.<org.javia.arity.Lexer: char[] input>;

        $r4[i0] = 36;

        r0.<org.javia.arity.Lexer: int pos> = 0;

        return;
    }

    org.javia.arity.Token nextToken() throws org.javia.arity.SyntaxException
    {
        org.javia.arity.Lexer r0;
        char c0, c3, $c6, $c18, $c21, $c27, c37, c38;
        int i1, i2, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i33, $i34, $i35, i36;
        byte b4, $b32;
        java.lang.String r1, $r4, $r25, $r34, $r38, $r69, $r71, $r74, r76, r78;
        char[] $r3, $r5, $r33, $r36, $r42, $r43, $r44, $r45, $r46, $r47, $r51, $r52, $r53, $r57, $r75;
        org.javia.arity.Token $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r32, $r35, $r37, $r39, $r40, $r41, $r48, $r49, $r50, $r54, $r55, $r56;
        org.javia.arity.SyntaxException $r21, $r26, $r61, $r65, $r66, $r70;
        java.lang.StringBuilder $r22, $r24, $r27, $r28, $r29, $r30, $r31, $r58, $r59, $r60, $r63, $r64, $r68, $r72, $r73;
        boolean $z0;
        double $d0, d1;
        java.lang.NumberFormatException $r62, $r67;

        r0 := @this: org.javia.arity.Lexer;

     label01:
        $r4 = " \n\r\t";

        $r3 = r0.<org.javia.arity.Lexer: char[] input>;

        $i5 = r0.<org.javia.arity.Lexer: int pos>;

        $c6 = $r3[$i5];

        $i7 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>($c6);

        if $i7 == -1 goto label02;

        $i33 = r0.<org.javia.arity.Lexer: int pos>;

        $i31 = $i33 + 1;

        r0.<org.javia.arity.Lexer: int pos> = $i31;

        goto label01;

     label02:
        $r5 = r0.<org.javia.arity.Lexer: char[] input>;

        $i8 = r0.<org.javia.arity.Lexer: int pos>;

        c0 = $r5[$i8];

        $i9 = r0.<org.javia.arity.Lexer: int pos>;

        $i10 = $i9 + 1;

        r0.<org.javia.arity.Lexer: int pos> = $i10;

        i1 = $i9;

        tableswitch(c0)
        {
            case 33: goto label03;
            case 34: goto label14;
            case 35: goto label06;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label14;
            case 39: goto label14;
            case 40: goto label07;
            case 41: goto label08;
            case 42: goto label09;
            case 43: goto label10;
            case 44: goto label11;
            case 45: goto label12;
            case 46: goto label14;
            case 47: goto label13;
            default: goto label14;
        };

     label03:
        $r6 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_FACT>;

        return $r6;

     label04:
        $r16 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_END>;

        return $r16;

     label05:
        $r13 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_PERCENT>;

        return $r13;

     label06:
        $r15 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_MOD>;

        return $r15;

     label07:
        $r14 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_LPAREN>;

        return $r14;

     label08:
        $r11 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_RPAREN>;

        return $r11;

     label09:
        $r12 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_MUL>;

        return $r12;

     label10:
        $r9 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_ADD>;

        return $r9;

     label11:
        $r10 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_COMMA>;

        return $r10;

     label12:
        $r7 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_SUB>;

        return $r7;

     label13:
        $r8 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_DIV>;

        return $r8;

     label14:
        i2 = r0.<org.javia.arity.Lexer: int pos>;

        if 48 > c0 goto label15;

        if c0 <= 57 goto label16;

     label15:
        if c0 != 46 goto label40;

     label16:
        if c0 != 48 goto label28;

        $r53 = r0.<org.javia.arity.Lexer: char[] input>;

        $c27 = $r53[i2];

        c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c27);

        if c3 != 120 goto label17;

        $b32 = 16;

        goto label20;

     label17:
        if c3 != 98 goto label18;

        $b32 = 2;

        goto label20;

     label18:
        if c3 != 111 goto label19;

        $b32 = 8;

        goto label20;

     label19:
        $b32 = 0;

     label20:
        b4 = $b32;

        if b4 <= 0 goto label28;

        i36 = i2 + 1;

     label21:
        $r52 = r0.<org.javia.arity.Lexer: char[] input>;

        $i24 = i36;

        i36 = i36 + 1;

        c37 = $r52[$i24];

        if 97 > c37 goto label22;

        if c37 <= 122 goto label21;

     label22:
        if 65 > c37 goto label23;

        if c37 <= 90 goto label21;

     label23:
        if 48 > c37 goto label24;

        if c37 <= 57 goto label21;

     label24:
        $r57 = r0.<org.javia.arity.Lexer: char[] input>;

        $i29 = i1 + 2;

        $i26 = i36 - 3;

        $i25 = $i26 - i1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r57, $i29, $i25);

        $i30 = i36 - 1;

        r0.<org.javia.arity.Lexer: int pos> = $i30;

     label25:
        $r55 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_NUMBER>;

        $i28 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, b4);

        $d0 = (double) $i28;

        $r56 = virtualinvoke $r55.<org.javia.arity.Token: org.javia.arity.Token setValue(double)>($d0);

     label26:
        return $r56;

     label27:
        $r67 := @caughtexception;

        $r65 = r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception>;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid number \'");

        $r75 = r0.<org.javia.arity.Lexer: char[] input>;

        $i34 = i36 - 1;

        $i35 = $i34 - i1;

        $r74 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r75, i1, $i35);

        $r73 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r70 = virtualinvoke $r65.<org.javia.arity.SyntaxException: org.javia.arity.SyntaxException set(java.lang.String,int)>($r71, i1);

        throw $r70;

     label28:
        if 48 > c0 goto label29;

        if c0 <= 57 goto label30;

     label29:
        if c0 == 46 goto label30;

        if c0 == 69 goto label30;

        if c0 != 101 goto label34;

     label30:
        if c0 == 69 goto label31;

        if c0 != 101 goto label33;

     label31:
        $r42 = r0.<org.javia.arity.Lexer: char[] input>;

        $c21 = $r42[i2];

        if $c21 == 45 goto label32;

        $r45 = r0.<org.javia.arity.Lexer: char[] input>;

        $c18 = $r45[i2];

        if $c18 != 8722 goto label33;

     label32:
        $r46 = r0.<org.javia.arity.Lexer: char[] input>;

        $r46[i2] = 45;

        i2 = i2 + 1;

     label33:
        $r47 = r0.<org.javia.arity.Lexer: char[] input>;

        $i22 = i2;

        i2 = i2 + 1;

        c0 = $r47[$i22];

        goto label28;

     label34:
        $i19 = i2 - 1;

        r0.<org.javia.arity.Lexer: int pos> = $i19;

        $r51 = r0.<org.javia.arity.Lexer: char[] input>;

        $i20 = i2 - 1;

        $i23 = $i20 - i1;

        r76 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r51, i1, $i23);

     label35:
        $z0 = virtualinvoke r76.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z0 == 0 goto label37;

        $r50 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_NUMBER>;

        $r54 = virtualinvoke $r50.<org.javia.arity.Token: org.javia.arity.Token setValue(double)>(0.0);

     label36:
        return $r54;

     label37:
        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r76);

        $r48 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_NUMBER>;

        $r49 = virtualinvoke $r48.<org.javia.arity.Token: org.javia.arity.Token setValue(double)>(d1);

     label38:
        return $r49;

     label39:
        $r62 := @caughtexception;

        $r61 = r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid number \'");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r68 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = virtualinvoke $r61.<org.javia.arity.SyntaxException: org.javia.arity.SyntaxException set(java.lang.String,int)>($r69, i1);

        throw $r66;

     label40:
        if 97 > c0 goto label41;

        if c0 <= 122 goto label42;

     label41:
        if 65 > c0 goto label50;

        if c0 > 90 goto label50;

     label42:
        $r33 = r0.<org.javia.arity.Lexer: char[] input>;

        $i11 = i2;

        i2 = i2 + 1;

        c38 = $r33[$i11];

        if 97 > c38 goto label43;

        if c38 <= 122 goto label42;

     label43:
        if 65 > c38 goto label44;

        if c38 <= 90 goto label42;

     label44:
        if 48 > c38 goto label45;

        if c38 <= 57 goto label42;

     label45:
        if c38 != 39 goto label46;

        $r43 = r0.<org.javia.arity.Lexer: char[] input>;

        $i17 = i2;

        i2 = i2 + 1;

        c38 = $r43[$i17];

     label46:
        $r36 = r0.<org.javia.arity.Lexer: char[] input>;

        $i13 = i2 - 1;

        $i12 = $i13 - i1;

        r78 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r36, i1, $i12);

     label47:
        $r38 = " \n\r\t";

        $i15 = virtualinvoke $r38.<java.lang.String: int indexOf(int)>(c38);

        if $i15 == -1 goto label48;

        $r44 = r0.<org.javia.arity.Lexer: char[] input>;

        $i16 = i2;

        i2 = i2 + 1;

        c38 = $r44[$i16];

        goto label47;

     label48:
        if c38 != 40 goto label49;

        r0.<org.javia.arity.Lexer: int pos> = i2;

        $r40 = new org.javia.arity.Token;

        specialinvoke $r40.<org.javia.arity.Token: void <init>(int,int,int,int)>(11, 0, 1, 0);

        $r39 = virtualinvoke $r40.<org.javia.arity.Token: org.javia.arity.Token setAlpha(java.lang.String)>(r78);

        return $r39;

     label49:
        $i14 = i2 - 1;

        r0.<org.javia.arity.Lexer: int pos> = $i14;

        $r37 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_CONST>;

        $r41 = virtualinvoke $r37.<org.javia.arity.Token: org.javia.arity.Token setAlpha(java.lang.String)>(r78);

        return $r41;

     label50:
        if c0 < 913 goto label51;

        if c0 <= 937 goto label53;

     label51:
        if c0 < 945 goto label52;

        if c0 <= 969 goto label53;

     label52:
        if c0 != 8734 goto label54;

     label53:
        $r32 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_CONST>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = virtualinvoke $r32.<org.javia.arity.Token: org.javia.arity.Token setAlpha(java.lang.String)>($r34);

        return $r35;

     label54:
        lookupswitch(c0)
        {
            case 94: goto label55;
            case 215: goto label56;
            case 247: goto label57;
            case 8722: goto label58;
            case 8730: goto label59;
            default: goto label60;
        };

     label55:
        $r23 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_POWER>;

        return $r23;

     label56:
        $r19 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_MUL>;

        return $r19;

     label57:
        $r20 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_DIV>;

        return $r20;

     label58:
        $r17 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_SUB>;

        return $r17;

     label59:
        $r18 = <org.javia.arity.Lexer: org.javia.arity.Token TOK_SQRT>;

        return $r18;

     label60:
        $r21 = r0.<org.javia.arity.Lexer: org.javia.arity.SyntaxException exception>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid character \'");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r21.<org.javia.arity.SyntaxException: org.javia.arity.SyntaxException set(java.lang.String,int)>($r25, i1);

        throw $r26;

        catch java.lang.NumberFormatException from label25 to label26 with label27;
        catch java.lang.NumberFormatException from label35 to label36 with label39;
        catch java.lang.NumberFormatException from label37 to label38 with label39;
    }

    static void <clinit>()
    {
        org.javia.arity.Token $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        <org.javia.arity.Lexer: char END_MARKER> = 36;

        <org.javia.arity.Lexer: java.lang.String WHITESPACE> = " \n\r\t";

        <org.javia.arity.Lexer: char UNICODE_SQRT> = 8730;

        <org.javia.arity.Lexer: char UNICODE_DIV> = 247;

        <org.javia.arity.Lexer: char UNICODE_MUL> = 215;

        <org.javia.arity.Lexer: char UNICODE_MINUS> = 8722;

        <org.javia.arity.Lexer: int PERCENT> = 17;

        <org.javia.arity.Lexer: int SQRT> = 16;

        <org.javia.arity.Lexer: int END> = 15;

        <org.javia.arity.Lexer: int RPAREN> = 14;

        <org.javia.arity.Lexer: int LPAREN> = 13;

        <org.javia.arity.Lexer: int COMMA> = 12;

        <org.javia.arity.Lexer: int CALL> = 11;

        <org.javia.arity.Lexer: int CONST> = 10;

        <org.javia.arity.Lexer: int NUMBER> = 9;

        <org.javia.arity.Lexer: int FACT> = 8;

        <org.javia.arity.Lexer: int POWER> = 7;

        <org.javia.arity.Lexer: int UMIN> = 6;

        <org.javia.arity.Lexer: int MOD> = 5;

        <org.javia.arity.Lexer: int DIV> = 4;

        <org.javia.arity.Lexer: int MUL> = 3;

        <org.javia.arity.Lexer: int SUB> = 2;

        <org.javia.arity.Lexer: int ADD> = 1;

        $r0 = new org.javia.arity.Token;

        specialinvoke $r0.<org.javia.arity.Token: void <init>(int,int,int,int)>(1, 4, 2, 3);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_ADD> = $r0;

        $r1 = new org.javia.arity.Token;

        specialinvoke $r1.<org.javia.arity.Token: void <init>(int,int,int,int)>(2, 4, 2, 4);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_SUB> = $r1;

        $r2 = new org.javia.arity.Token;

        specialinvoke $r2.<org.javia.arity.Token: void <init>(int,int,int,int)>(3, 5, 2, 5);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_MUL> = $r2;

        $r3 = new org.javia.arity.Token;

        specialinvoke $r3.<org.javia.arity.Token: void <init>(int,int,int,int)>(4, 5, 2, 6);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_DIV> = $r3;

        $r4 = new org.javia.arity.Token;

        specialinvoke $r4.<org.javia.arity.Token: void <init>(int,int,int,int)>(5, 5, 2, 7);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_MOD> = $r4;

        $r5 = new org.javia.arity.Token;

        specialinvoke $r5.<org.javia.arity.Token: void <init>(int,int,int,int)>(6, 6, 1, 9);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_UMIN> = $r5;

        $r6 = new org.javia.arity.Token;

        specialinvoke $r6.<org.javia.arity.Token: void <init>(int,int,int,int)>(7, 7, 3, 10);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_POWER> = $r6;

        $r7 = new org.javia.arity.Token;

        specialinvoke $r7.<org.javia.arity.Token: void <init>(int,int,int,int)>(8, 8, 4, 11);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_FACT> = $r7;

        $r8 = new org.javia.arity.Token;

        specialinvoke $r8.<org.javia.arity.Token: void <init>(int,int,int,int)>(17, 9, 4, 12);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_PERCENT> = $r8;

        $r9 = new org.javia.arity.Token;

        specialinvoke $r9.<org.javia.arity.Token: void <init>(int,int,int,int)>(16, 10, 1, 13);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_SQRT> = $r9;

        $r10 = new org.javia.arity.Token;

        specialinvoke $r10.<org.javia.arity.Token: void <init>(int,int,int,int)>(13, 1, 1, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_LPAREN> = $r10;

        $r11 = new org.javia.arity.Token;

        specialinvoke $r11.<org.javia.arity.Token: void <init>(int,int,int,int)>(14, 3, 0, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_RPAREN> = $r11;

        $r12 = new org.javia.arity.Token;

        specialinvoke $r12.<org.javia.arity.Token: void <init>(int,int,int,int)>(12, 2, 0, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_COMMA> = $r12;

        $r13 = new org.javia.arity.Token;

        specialinvoke $r13.<org.javia.arity.Token: void <init>(int,int,int,int)>(15, 0, 0, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_END> = $r13;

        $r14 = new org.javia.arity.Token;

        specialinvoke $r14.<org.javia.arity.Token: void <init>(int,int,int,int)>(9, 20, 0, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_NUMBER> = $r14;

        $r15 = new org.javia.arity.Token;

        specialinvoke $r15.<org.javia.arity.Token: void <init>(int,int,int,int)>(10, 20, 0, 0);

        <org.javia.arity.Lexer: org.javia.arity.Token TOK_CONST> = $r15;

        return;
    }
}
