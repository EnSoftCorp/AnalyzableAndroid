final class com.android.dreams.basic.ColorsGLRenderer$Square extends java.lang.Object
{
    private final java.lang.String vertexShaderCode;
    private final java.lang.String fragmentShaderCode;
    private final java.nio.FloatBuffer vertexBuffer;
    private final java.nio.FloatBuffer colorBuffer;
    private final int mProgram;
    private int mPositionHandle;
    private int mColorHandle;
    private java.nio.ShortBuffer drawListBuffer;
    final int COORDS_PER_VERTEX;
    float[] squareCoords;
    private short[] drawOrder;
    private final float[] HUES;
    private final int vertexCount;
    private final int vertexStride;
    private float[] cornerFrequencies;
    private int cornerRotation;
    final int COLOR_PLANES_PER_VERTEX;
    private final int colorStride;
    final float[] _tmphsv;

    public void <init>()
    {
        com.android.dreams.basic.ColorsGLRenderer$Square r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.nio.ByteBuffer r1, r36, r37;
        float[] $r2, $r4, $r5, $r6, $r7, $r8, $r11, $r35;
        short[] $r3, $r20, $r22;
        double $d0, $d1, $d2, $d3, $d4;
        java.nio.ByteOrder $r10, $r19, $r23;
        java.nio.FloatBuffer $r12, $r14, $r16, $r18, $r34;
        java.nio.ShortBuffer $r21, $r25, $r27;
        java.lang.StringBuilder $r29, $r30, $r32, $r33;
        java.lang.String $r31;
        float $f0, $f1;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer$Square;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.lang.String vertexShaderCode> = "attribute vec4 a_position;attribute vec4 a_color;varying vec4 v_color;void main() {  gl_Position = a_position;  v_color = a_color;}";

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.lang.String fragmentShaderCode> = "precision mediump float;varying vec4 v_color;void main() {  gl_FragColor = v_color;}";

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int COORDS_PER_VERTEX> = 3;

        $r2 = newarray (float)[12];

        $r2[0] = -1.0F;

        $r2[1] = 1.0F;

        $r2[2] = 0.0F;

        $r2[3] = -1.0F;

        $r2[4] = -1.0F;

        $r2[5] = 0.0F;

        $r2[6] = 1.0F;

        $r2[7] = -1.0F;

        $r2[8] = 0.0F;

        $r2[9] = 1.0F;

        $r2[10] = 1.0F;

        $r2[11] = 0.0F;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] squareCoords> = $r2;

        $r3 = newarray (short)[6];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 0;

        $r3[4] = 2;

        $r3[5] = 3;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: short[] drawOrder> = $r3;

        $r4 = newarray (float)[4];

        $r4[0] = 60.0F;

        $r4[1] = 120.0F;

        $r4[2] = 343.0F;

        $r4[3] = 200.0F;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] HUES> = $r4;

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] squareCoords>;

        $i1 = lengthof $r5;

        $i2 = $i1 / 3;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount> = $i2;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexStride> = 12;

        $i3 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        $r6 = newarray (float)[$i3];

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] cornerFrequencies> = $r6;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int COLOR_PLANES_PER_VERTEX> = 4;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int colorStride> = 16;

        $r7 = newarray (float)[3];

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] _tmphsv> = $r7;

        i0 = 0;

     label1:
        $i4 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        if i0 >= $i4 goto label2;

        $r35 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] cornerFrequencies>;

        $d3 = staticinvoke <java.lang.Math: double random()>();

        $d4 = $d3 * 5.0;

        $f0 = (float) $d4;

        $f1 = 1.0F + $f0;

        $r35[i0] = $f1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $i5 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        $d1 = (double) $i5;

        $d2 = $d0 * $d1;

        $i6 = (int) $d2;

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int cornerRotation> = $i6;

        $r8 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] squareCoords>;

        $i7 = lengthof $r8;

        $i8 = $i7 * 4;

        r36 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i8);

        $r10 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r36.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r10);

        $r12 = virtualinvoke r36.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer vertexBuffer> = $r12;

        $r14 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer vertexBuffer>;

        $r11 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] squareCoords>;

        virtualinvoke $r14.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>($r11);

        $r16 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer vertexBuffer>;

        virtualinvoke $r16.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $i10 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        $i9 = $i10 * 16;

        r37 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i9);

        $r19 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r37.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r19);

        $r18 = virtualinvoke r37.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer> = $r18;

        $r20 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: short[] drawOrder>;

        $i12 = lengthof $r20;

        $i11 = $i12 * 2;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i11);

        $r23 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r23);

        $r21 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.ShortBuffer drawListBuffer> = $r21;

        $r27 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.ShortBuffer drawListBuffer>;

        $r22 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: short[] drawOrder>;

        virtualinvoke $r27.<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>($r22);

        $r25 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.ShortBuffer drawListBuffer>;

        virtualinvoke $r25.<java.nio.ShortBuffer: java.nio.Buffer position(int)>(0);

        $i14 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: int access$000(java.lang.String,java.lang.String)>("attribute vec4 a_position;attribute vec4 a_color;varying vec4 v_color;void main() {  gl_Position = a_position;  v_color = a_color;}", "precision mediump float;varying vec4 v_color;void main() {  gl_FragColor = v_color;}");

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mProgram> = $i14;

        $i13 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>($i13);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glUseProgram(");

        $i15 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mProgram>;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void access$100(java.lang.String)>($r31);

        $i18 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mProgram>;

        $i17 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i18, "a_position");

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mPositionHandle> = $i17;

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void access$100(java.lang.String)>("glGetAttribLocation(a_position)");

        $i16 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mPositionHandle>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i16);

        $i22 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mPositionHandle>;

        $r34 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer vertexBuffer>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>($i22, 3, 5126, 0, 12, $r34);

        $i21 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mProgram>;

        $i20 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i21, "a_color");

        r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mColorHandle> = $i20;

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void access$100(java.lang.String)>("glGetAttribLocation(a_color)");

        $i19 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mColorHandle>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i19);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void access$100(java.lang.String)>("glEnableVertexAttribArray");

        return;
    }

    public void draw()
    {
        com.android.dreams.basic.ColorsGLRenderer$Square r0;
        long l0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.nio.FloatBuffer $r1, $r3, $r5, $r13, $r14, $r17, $r19;
        double $d0, $d1, $d2, $d3, $d4;
        float[] $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer$Square;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        virtualinvoke $r1.<java.nio.FloatBuffer: java.nio.Buffer clear()>();

        $f2 = (float) l0;

        f0 = $f2 / 4000.0F;

        i1 = 0;

     label1:
        $i3 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        if i1 >= $i3 goto label2;

        $d0 = (double) f0;

        $d1 = 6.283185307179586 * $d0;

        $r6 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] cornerFrequencies>;

        $f3 = $r6[i1];

        $d2 = (double) $f3;

        $d4 = $d1 / $d2;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d4);

        f1 = (float) $d3;

        $r9 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] _tmphsv>;

        $r7 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] HUES>;

        $i7 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int cornerRotation>;

        $i9 = i1 + $i7;

        $i6 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        $i8 = $i9 % $i6;

        $f4 = $r7[$i8];

        $r9[0] = $f4;

        $r8 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] _tmphsv>;

        $r8[1] = 1.0F;

        $r10 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] _tmphsv>;

        $f5 = f1 * 0.25F;

        $f6 = $f5 + 0.75F;

        $r10[2] = $f6;

        $r11 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: float[] _tmphsv>;

        i2 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>($r11);

        $r13 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        $i11 = i2 & 16711680;

        $i10 = $i11 >> 16;

        $f7 = (float) $i10;

        $f8 = $f7 / 255.0F;

        virtualinvoke $r13.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($f8);

        $r14 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        $i12 = i2 & 65280;

        $i13 = $i12 >> 8;

        $f10 = (float) $i13;

        $f9 = $f10 / 255.0F;

        virtualinvoke $r14.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($f9);

        $r19 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        $i14 = i2 & 255;

        $f12 = (float) $i14;

        $f11 = $f12 / 255.0F;

        virtualinvoke $r19.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>($f11);

        $r17 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        virtualinvoke $r17.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>(1.0F);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        virtualinvoke $r3.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        $i4 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int mColorHandle>;

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: java.nio.FloatBuffer colorBuffer>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>($i4, 4, 5126, 0, 16, $r5);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void access$100(java.lang.String)>("glVertexAttribPointer");

        $i5 = r0.<com.android.dreams.basic.ColorsGLRenderer$Square: int vertexCount>;

        staticinvoke <android.opengl.GLES20: void glDrawArrays(int,int,int)>(6, 0, $i5);

        return;
    }
}
