final class com.android.dreams.basic.ColorsGLRenderer extends java.lang.Object implements android.view.Choreographer$FrameCallback
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    private final android.graphics.SurfaceTexture mSurface;
    private int mWidth;
    private int mHeight;
    private final android.view.Choreographer mChoreographer;
    private com.android.dreams.basic.ColorsGLRenderer$Square mSquare;
    private long mLastFrameTime;
    private int mFrameNum;
    private javax.microedition.khronos.egl.EGL10 mEgl;
    private javax.microedition.khronos.egl.EGLDisplay mEglDisplay;
    private javax.microedition.khronos.egl.EGLContext mEglContext;
    private javax.microedition.khronos.egl.EGLSurface mEglSurface;

    private static transient void LOG(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        return;
    }

    public void <init>(android.graphics.SurfaceTexture, int, int)
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        android.graphics.SurfaceTexture r1;
        int i0, i1;
        android.view.Choreographer $r2;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mFrameNum> = 0;

        r0.<com.android.dreams.basic.ColorsGLRenderer: android.graphics.SurfaceTexture mSurface> = r1;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mWidth> = i0;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mHeight> = i1;

        $r2 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer: android.view.Choreographer mChoreographer> = $r2;

        return;
    }

    public void start()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        com.android.dreams.basic.ColorsGLRenderer$Square $r1;
        android.view.Choreographer $r2;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        specialinvoke r0.<com.android.dreams.basic.ColorsGLRenderer: void initGL()>();

        $r1 = new com.android.dreams.basic.ColorsGLRenderer$Square;

        specialinvoke $r1.<com.android.dreams.basic.ColorsGLRenderer$Square: void <init>()>();

        r0.<com.android.dreams.basic.ColorsGLRenderer: com.android.dreams.basic.ColorsGLRenderer$Square mSquare> = $r1;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mFrameNum> = 0;

        $r2 = r0.<com.android.dreams.basic.ColorsGLRenderer: android.view.Choreographer mChoreographer>;

        virtualinvoke $r2.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>(r0);

        return;
    }

    public void stop()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        android.view.Choreographer $r1;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer: android.view.Choreographer mChoreographer>;

        virtualinvoke $r1.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>(r0);

        r0.<com.android.dreams.basic.ColorsGLRenderer: com.android.dreams.basic.ColorsGLRenderer$Square mSquare> = null;

        specialinvoke r0.<com.android.dreams.basic.ColorsGLRenderer: void finishGL()>();

        return;
    }

    public void setSize(int, int)
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        int i0, i1;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mWidth> = i0;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mHeight> = i1;

        return;
    }

    public void doFrame(long)
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        long l0;
        int $i1, $i2, $i3, $i4, $i5;
        com.android.dreams.basic.ColorsGLRenderer$Square $r1;
        javax.microedition.khronos.egl.EGLSurface $r2;
        javax.microedition.khronos.egl.EGLDisplay $r3;
        javax.microedition.khronos.egl.EGL10 $r4;
        boolean $z0;
        android.view.Choreographer $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        l0 := @parameter0: long;

        $i1 = r0.<com.android.dreams.basic.ColorsGLRenderer: int mFrameNum>;

        $i2 = $i1 + 1;

        r0.<com.android.dreams.basic.ColorsGLRenderer: int mFrameNum> = $i2;

        $i3 = r0.<com.android.dreams.basic.ColorsGLRenderer: int mFrameNum>;

        if $i3 != 1 goto label1;

        staticinvoke <android.opengl.GLES20: void glClearColor(float,float,float,float)>(1.0F, 0.0F, 0.0F, 1.0F);

     label1:
        specialinvoke r0.<com.android.dreams.basic.ColorsGLRenderer: void checkCurrent()>();

        $i5 = r0.<com.android.dreams.basic.ColorsGLRenderer: int mWidth>;

        $i4 = r0.<com.android.dreams.basic.ColorsGLRenderer: int mHeight>;

        staticinvoke <android.opengl.GLES20: void glViewport(int,int,int,int)>(0, 0, $i5, $i4);

        staticinvoke <android.opengl.GLES20: void glClear(int)>(16384);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer: com.android.dreams.basic.ColorsGLRenderer$Square mSquare>;

        virtualinvoke $r1.<com.android.dreams.basic.ColorsGLRenderer$Square: void draw()>();

        $r4 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r3 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r2 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $z0 = interfaceinvoke $r4.<javax.microedition.khronos.egl.EGL10: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>($r3, $r2);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot swap buffers");

        throw $r6;

     label2:
        specialinvoke r0.<com.android.dreams.basic.ColorsGLRenderer: void checkEglError()>();

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>(r0);

        return;
    }

    private void checkCurrent()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        javax.microedition.khronos.egl.EGL10 $r1, $r8, $r12, $r15;
        javax.microedition.khronos.egl.EGLContext $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        javax.microedition.khronos.egl.EGLSurface $r5, $r6, $r17, $r18;
        javax.microedition.khronos.egl.EGLDisplay $r7;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        int $i0;
        java.lang.String $r14, $r16;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        $r2 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r3 = interfaceinvoke $r1.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r18 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r15 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r17 = interfaceinvoke $r15.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>(12377);

        $z2 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z2 != 0 goto label2;

     label1:
        $r8 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r7 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r6 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r4 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $z1 = interfaceinvoke $r8.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r7, $r6, $r5, $r4);

        if $z1 != 0 goto label2;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglMakeCurrent failed ");

        $r12 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $i0 = interfaceinvoke $r12.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r14 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label2:
        return;
    }

    private void initGL()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        int[] r1;
        javax.microedition.khronos.egl.EGLConfig r2;
        int i0, $i2, $i3, $i4;
        javax.microedition.khronos.egl.EGL $r3;
        javax.microedition.khronos.egl.EGL10 $r4, $r6, $r11, $r14, $r18, $r19, $r32, $r40, $r46, $r53;
        java.lang.Object $r5;
        javax.microedition.khronos.egl.EGLDisplay $r7, $r8, $r9, $r10, $r12, $r15, $r31;
        boolean $z0, $z1;
        javax.microedition.khronos.egl.EGLContext $r13, $r29;
        android.graphics.SurfaceTexture $r16;
        javax.microedition.khronos.egl.EGLSurface $r17, $r20, $r28, $r30, $r33, $r34;
        java.lang.RuntimeException $r21, $r37, $r42, $r43, $r49;
        java.lang.StringBuilder $r22, $r23, $r24, $r35, $r36, $r39, $r41, $r47, $r48, $r51, $r54, $r55;
        java.lang.String $r25, $r26, $r27, $r38, $r44, $r45, $r50, $r52, $r56;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        $r3 = staticinvoke <javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>();

        $r4 = (javax.microedition.khronos.egl.EGL10) $r3;

        r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl> = $r4;

        $r6 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r5 = <javax.microedition.khronos.egl.EGL10: java.lang.Object EGL_DEFAULT_DISPLAY>;

        $r7 = interfaceinvoke $r6.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>($r5);

        r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay> = $r7;

        $r9 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r8 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay EGL_NO_DISPLAY>;

        if $r9 != $r8 goto label1;

        $r49 = new java.lang.RuntimeException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglGetDisplay failed ");

        $r53 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $i4 = interfaceinvoke $r53.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r52 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i4);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.RuntimeException: void <init>(java.lang.String)>($r56);

        throw $r49;

     label1:
        r1 = newarray (int)[2];

        $r11 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r10 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $z0 = interfaceinvoke $r11.<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>($r10, r1);

        if $z0 != 0 goto label2;

        $r42 = new java.lang.RuntimeException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglInitialize failed ");

        $r46 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $i3 = interfaceinvoke $r46.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r45 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i3);

        $r51 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.RuntimeException: void <init>(java.lang.String)>($r50);

        throw $r42;

     label2:
        r2 = specialinvoke r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLConfig chooseEglConfig()>();

        if r2 != null goto label3;

        $r43 = new java.lang.RuntimeException;

        specialinvoke $r43.<java.lang.RuntimeException: void <init>(java.lang.String)>("eglConfig not initialized");

        throw $r43;

     label3:
        $r14 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r12 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r13 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)>($r14, $r12, r2);

        r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext mEglContext> = $r13;

        $r18 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r15 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r16 = r0.<com.android.dreams.basic.ColorsGLRenderer: android.graphics.SurfaceTexture mSurface>;

        $r17 = interfaceinvoke $r18.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>($r15, r2, $r16, null);

        r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface> = $r17;

        $r20 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        if $r20 == null goto label4;

        $r28 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r30 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        if $r28 != $r30 goto label6;

     label4:
        $r19 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        i0 = interfaceinvoke $r19.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        if i0 != 12299 goto label5;

        $r26 = <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r26, "createWindowSurface returned EGL_BAD_NATIVE_WINDOW.");

        return;

     label5:
        $r21 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createWindowSurface failed ");

        $r25 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>(i0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label6:
        $r32 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r31 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r34 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r33 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r29 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $z1 = interfaceinvoke $r32.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r31, $r34, $r33, $r29);

        if $z1 != 0 goto label7;

        $r37 = new java.lang.RuntimeException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglMakeCurrent failed ");

        $r40 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $i2 = interfaceinvoke $r40.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r38 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i2);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String)>($r44);

        throw $r37;

     label7:
        return;
    }

    private void finishGL()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        javax.microedition.khronos.egl.EGLContext $r1;
        javax.microedition.khronos.egl.EGLDisplay $r2, $r5;
        javax.microedition.khronos.egl.EGL10 $r3, $r6;
        javax.microedition.khronos.egl.EGLSurface $r4;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        $r3 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r2 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        interfaceinvoke $r3.<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>($r2, $r1);

        $r6 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $r4 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        interfaceinvoke $r6.<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>($r5, $r4);

        return;
    }

    private static javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig)
    {
        javax.microedition.khronos.egl.EGL10 r0;
        javax.microedition.khronos.egl.EGLDisplay r1;
        javax.microedition.khronos.egl.EGLConfig r2;
        int[] r3, $r4;
        javax.microedition.khronos.egl.EGLContext $r5, $r6;

        r0 := @parameter0: javax.microedition.khronos.egl.EGL10;

        r1 := @parameter1: javax.microedition.khronos.egl.EGLDisplay;

        r2 := @parameter2: javax.microedition.khronos.egl.EGLConfig;

        $r4 = newarray (int)[3];

        $r4[0] = 12440;

        $r4[1] = 2;

        $r4[2] = 12344;

        r3 = $r4;

        $r5 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        $r6 = interfaceinvoke r0.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>(r1, r2, $r5, r3);

        return $r6;
    }

    private javax.microedition.khronos.egl.EGLConfig chooseEglConfig()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        int[] r1, r3;
        javax.microedition.khronos.egl.EGLConfig[] r2;
        javax.microedition.khronos.egl.EGLDisplay $r4;
        javax.microedition.khronos.egl.EGL10 $r5, $r10;
        boolean $z0;
        int $i0, $i1;
        javax.microedition.khronos.egl.EGLConfig $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r13;
        java.lang.String $r11, $r12;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        r1 = newarray (int)[1];

        r2 = newarray (javax.microedition.khronos.egl.EGLConfig)[1];

        r3 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: int[] getConfig()>();

        $r5 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $r4 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGLDisplay mEglDisplay>;

        $z0 = interfaceinvoke $r5.<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>($r4, r3, r2, 1, r1);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglChooseConfig failed ");

        $r10 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        $i1 = interfaceinvoke $r10.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r11 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i1);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $i0 = r1[0];

        if $i0 <= 0 goto label2;

        $r6 = r2[0];

        return $r6;

     label2:
        return null;
    }

    private static int[] getConfig()
    {
        int[] $r0;

        $r0 = newarray (int)[15];

        $r0[0] = 12352;

        $r0[1] = 4;

        $r0[2] = 12324;

        $r0[3] = 8;

        $r0[4] = 12323;

        $r0[5] = 8;

        $r0[6] = 12322;

        $r0[7] = 8;

        $r0[8] = 12321;

        $r0[9] = 0;

        $r0[10] = 12325;

        $r0[11] = 0;

        $r0[12] = 12326;

        $r0[13] = 0;

        $r0[14] = 12344;

        return $r0;
    }

    private static int buildProgram(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r3, $r5, $r8;
        int i0, i1, i2, $i3;
        int[] r2;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: int buildShader(java.lang.String,int)>(r0, 35633);

        if i0 != 0 goto label1;

        return 0;

     label1:
        i1 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: int buildShader(java.lang.String,int)>(r1, 35632);

        if i1 != 0 goto label2;

        return 0;

     label2:
        i2 = staticinvoke <android.opengl.GLES20: int glCreateProgram()>();

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>(i2, i0);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>(i2, i1);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        staticinvoke <android.opengl.GLES20: void glLinkProgram(int)>(i2);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        r2 = newarray (int)[1];

        staticinvoke <android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>(i2, 35714, r2, 0);

        $i3 = r2[0];

        if $i3 == 1 goto label3;

        r3 = staticinvoke <android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)>(i2);

        $r5 = <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while linking program:\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, $r8);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i0);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i1);

        staticinvoke <android.opengl.GLES20: void glDeleteProgram(int)>(i2);

        return 0;

     label3:
        return i2;
    }

    private static int buildShader(java.lang.String, int)
    {
        java.lang.String r0, r2, $r4, $r7;
        int i0, i1, $i2;
        int[] r1;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.opengl.GLES20: int glCreateShader(int)>(i0);

        staticinvoke <android.opengl.GLES20: void glShaderSource(int,java.lang.String)>(i1, r0);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        staticinvoke <android.opengl.GLES20: void glCompileShader(int)>(i1);

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError()>();

        r1 = newarray (int)[1];

        staticinvoke <android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>(i1, 35713, r1, 0);

        $i2 = r1[0];

        if $i2 == 1 goto label1;

        r2 = staticinvoke <android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>(i1);

        $r4 = <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while compiling shader:\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r7);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i1);

        return 0;

     label1:
        return i1;
    }

    private void checkEglError()
    {
        com.android.dreams.basic.ColorsGLRenderer r0;
        int i0;
        javax.microedition.khronos.egl.EGL10 $r1;
        java.lang.StringBuilder $r2, $r4, $r6;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: com.android.dreams.basic.ColorsGLRenderer;

        $r1 = r0.<com.android.dreams.basic.ColorsGLRenderer: javax.microedition.khronos.egl.EGL10 mEgl>;

        i0 = interfaceinvoke $r1.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        if i0 == 12288 goto label1;

        $r3 = <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EGL error = 0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, $r7);

     label1:
        return;
    }

    private static void checkGlError()
    {
        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError(java.lang.String)>("");

        return;
    }

    private static void checkGlError(java.lang.String)
    {
        java.lang.String r0, $r2, $r6, $r8;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.opengl.GLES20: int glGetError()>();

        if i0 == 0 goto label1;

        $r2 = <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GL error: (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") = 0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, $r8);

     label1:
        return;
    }

    static int access$000(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <com.android.dreams.basic.ColorsGLRenderer: int buildProgram(java.lang.String,java.lang.String)>(r0, r1);

        return $i0;
    }

    static void access$100(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.dreams.basic.ColorsGLRenderer: void checkGlError(java.lang.String)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.dreams.basic.ColorsGLRenderer: boolean DEBUG> = 0;

        $r0 = class "com/android/dreams/basic/ColorsGLRenderer";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.dreams.basic.ColorsGLRenderer: java.lang.String TAG> = $r1;

        return;
    }
}
