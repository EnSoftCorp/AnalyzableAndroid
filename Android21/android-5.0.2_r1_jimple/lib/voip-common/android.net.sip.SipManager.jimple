public class android.net.sip.SipManager extends java.lang.Object
{
    public static final int INCOMING_CALL_RESULT_CODE;
    public static final java.lang.String EXTRA_CALL_ID;
    public static final java.lang.String EXTRA_OFFER_SD;
    public static final java.lang.String ACTION_SIP_SERVICE_UP;
    public static final java.lang.String ACTION_SIP_INCOMING_CALL;
    public static final java.lang.String ACTION_SIP_ADD_PHONE;
    public static final java.lang.String ACTION_SIP_REMOVE_PHONE;
    public static final java.lang.String ACTION_SIP_CALL_OPTION_CHANGED;
    public static final java.lang.String EXTRA_LOCAL_URI;
    private static final java.lang.String TAG;
    private android.net.sip.ISipService mSipService;
    private android.content.Context mContext;

    public static android.net.sip.SipManager newInstance(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0;
        android.net.sip.SipManager $r1;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new android.net.sip.SipManager;

        specialinvoke $r1.<android.net.sip.SipManager: void <init>(android.content.Context)>(r0);

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public static boolean isApiSupported(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.sip");

        return $z0;
    }

    public static boolean isVoipSupported(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.sip.voip");

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isSipWifiOnly(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17956934);

        return $z0;
    }

    private void <init>(android.content.Context)
    {
        android.net.sip.SipManager r0;
        android.content.Context r1;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.sip.SipManager: android.content.Context mContext> = r1;

        specialinvoke r0.<android.net.sip.SipManager: void createSipService()>();

        return;
    }

    private void createSipService()
    {
        android.net.sip.SipManager r0;
        android.os.IBinder r1;
        android.net.sip.ISipService $r2;

        r0 := @this: android.net.sip.SipManager;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("sip");

        $r2 = staticinvoke <android.net.sip.ISipService$Stub: android.net.sip.ISipService asInterface(android.os.IBinder)>(r1);

        r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService> = $r2;

        return;
    }

    public void open(android.net.sip.SipProfile) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1;
        android.os.RemoteException r2, $r4;
        android.net.sip.ISipService $r3;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

     label1:
        $r3 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        interfaceinvoke $r3.<android.net.sip.ISipService: void open(android.net.sip.SipProfile)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("open()", r2);

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void open(android.net.sip.SipProfile, android.app.PendingIntent, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1;
        android.app.PendingIntent r2;
        android.net.sip.SipRegistrationListener r3;
        android.os.RemoteException r4, $r9;
        android.net.sip.ISipService $r5;
        java.lang.String $r6;
        android.net.sip.ISipSessionListener $r7;
        java.lang.NullPointerException $r8;
        android.net.sip.SipException $r10;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: android.net.sip.SipRegistrationListener;

        if r2 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("incomingCallPendingIntent cannot be null");

        throw $r8;

     label1:
        $r5 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r6 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r7 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r3, $r6);

        interfaceinvoke $r5.<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>(r1, r2, $r7);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = new android.net.sip.SipException;

        specialinvoke $r10.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("open()", r4);

        throw $r10;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRegistrationListener(java.lang.String, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1;
        android.net.sip.SipRegistrationListener r2;
        android.os.RemoteException r3, $r6;
        android.net.sip.ISipService $r4;
        android.net.sip.ISipSessionListener $r5;
        android.net.sip.SipException $r7;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.sip.SipRegistrationListener;

     label1:
        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r5 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r2, r1);

        interfaceinvoke $r4.<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>(r1, $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("setRegistrationListener()", r3);

        throw $r7;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void close(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.net.sip.ISipService $r3;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        interfaceinvoke $r3.<android.net.sip.ISipService: void close(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("close()", r2);

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isOpened(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.net.sip.ISipService $r3;
        boolean $z0;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $z0 = interfaceinvoke $r3.<android.net.sip.ISipService: boolean isOpened(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("isOpened()", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRegistered(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.net.sip.ISipService $r3;
        boolean $z0;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $z0 = interfaceinvoke $r3.<android.net.sip.ISipService: boolean isRegistered(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("isRegistered()", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile, android.net.sip.SipProfile, android.net.sip.SipAudioCall$Listener, int) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1, r2;
        android.net.sip.SipAudioCall$Listener r3;
        int i0;
        android.net.sip.SipAudioCall r4, $r7;
        android.net.sip.SipSession r5;
        android.content.Context $r6, $r8;
        boolean $z0;
        android.net.sip.SipException $r9;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.SipProfile;

        r3 := @parameter2: android.net.sip.SipAudioCall$Listener;

        i0 := @parameter3: int;

        $r6 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r6);

        if $z0 != 0 goto label1;

        $r9 = new android.net.sip.SipException;

        specialinvoke $r9.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r9;

     label1:
        $r7 = new android.net.sip.SipAudioCall;

        $r8 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        specialinvoke $r7.<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>($r8, r1);

        r4 = $r7;

        virtualinvoke r4.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(r3);

        r5 = virtualinvoke r0.<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>(r1, null);

        virtualinvoke r4.<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)>(r2, r5, i0);

        return r4;
    }

    public android.net.sip.SipAudioCall makeAudioCall(java.lang.String, java.lang.String, android.net.sip.SipAudioCall$Listener, int) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1, r2;
        android.net.sip.SipAudioCall$Listener r3;
        int i0;
        java.text.ParseException r4, $r12;
        android.content.Context $r5;
        boolean $z0;
        android.net.sip.SipProfile$Builder $r6, $r8;
        android.net.sip.SipProfile $r7, $r9;
        android.net.sip.SipAudioCall $r10;
        android.net.sip.SipException $r11, $r13;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.sip.SipAudioCall$Listener;

        i0 := @parameter3: int;

        $r5 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r5);

        if $z0 != 0 goto label1;

        $r11 = new android.net.sip.SipException;

        specialinvoke $r11.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r11;

     label1:
        $r6 = new android.net.sip.SipProfile$Builder;

        specialinvoke $r6.<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()>();

        $r8 = new android.net.sip.SipProfile$Builder;

        specialinvoke $r8.<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()>();

        $r10 = virtualinvoke r0.<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>($r7, $r9, r3, i0);

     label2:
        return $r10;

     label3:
        $r12 := @caughtexception;

        r4 = $r12;

        $r13 = new android.net.sip.SipException;

        specialinvoke $r13.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("build SipProfile", r4);

        throw $r13;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public android.net.sip.SipAudioCall takeAudioCall(android.content.Intent, android.net.sip.SipAudioCall$Listener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Intent r1;
        android.net.sip.SipAudioCall$Listener r2;
        java.lang.String r3, r4;
        android.net.sip.ISipSession r5;
        android.net.sip.SipAudioCall r6, $r8;
        android.net.sip.ISipService $r7;
        android.content.Context $r9;
        android.net.sip.SipProfile $r10;
        android.net.sip.SipSession $r11;
        android.net.sip.SipException $r12, $r13, $r14, $r16, $r17;
        java.lang.Throwable $r15, r18;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.net.sip.SipAudioCall$Listener;

        if r1 != null goto label1;

        $r16 = new android.net.sip.SipException;

        specialinvoke $r16.<android.net.sip.SipException: void <init>(java.lang.String)>("Cannot retrieve session with null intent");

        throw $r16;

     label1:
        r3 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r1);

        if r3 != null goto label2;

        $r13 = new android.net.sip.SipException;

        specialinvoke $r13.<android.net.sip.SipException: void <init>(java.lang.String)>("Call ID missing in incoming call intent");

        throw $r13;

     label2:
        r4 = staticinvoke <android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>(r1);

        if r4 != null goto label3;

        $r14 = new android.net.sip.SipException;

        specialinvoke $r14.<android.net.sip.SipException: void <init>(java.lang.String)>("Session description missing in incoming call intent");

        throw $r14;

     label3:
        $r7 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        r5 = interfaceinvoke $r7.<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String)>(r3);

        if r5 != null goto label4;

        $r12 = new android.net.sip.SipException;

        specialinvoke $r12.<android.net.sip.SipException: void <init>(java.lang.String)>("No pending session for the call");

        throw $r12;

     label4:
        $r8 = new android.net.sip.SipAudioCall;

        $r9 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r10 = interfaceinvoke r5.<android.net.sip.ISipSession: android.net.sip.SipProfile getLocalProfile()>();

        specialinvoke $r8.<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>($r9, $r10);

        r6 = $r8;

        $r11 = new android.net.sip.SipSession;

        specialinvoke $r11.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession)>(r5);

        virtualinvoke r6.<android.net.sip.SipAudioCall: void attachCall(android.net.sip.SipSession,java.lang.String)>($r11, r4);

        virtualinvoke r6.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(r2);

     label5:
        return r6;

     label6:
        $r15 := @caughtexception;

        r18 = $r15;

        $r17 = new android.net.sip.SipException;

        specialinvoke $r17.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("takeAudioCall()", r18);

        throw $r17;

        catch java.lang.Throwable from label3 to label5 with label6;
    }

    public static boolean isIncomingCallIntent(android.content.Intent)
    {
        android.content.Intent r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: android.content.Intent;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r0);

        r2 = staticinvoke <android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>(r0);

        if r1 == null goto label2;

        if r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String getCallId(android.content.Intent)
    {
        android.content.Intent r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Intent;

        $r1 = virtualinvoke r0.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android:sipCallID");

        return $r1;
    }

    public static java.lang.String getOfferSessionDescription(android.content.Intent)
    {
        android.content.Intent r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Intent;

        $r1 = virtualinvoke r0.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android:sipOfferSD");

        return $r1;
    }

    public static android.content.Intent createIncomingCallBroadcast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.content.Intent r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:sipCallID", r0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:sipOfferSD", r1);

        return r2;
    }

    public void register(android.net.sip.SipProfile, int, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1;
        int i0;
        android.net.sip.SipRegistrationListener r2;
        android.net.sip.ISipSession r3;
        android.net.sip.ISipService $r4;
        java.lang.String $r5;
        android.net.sip.ISipSessionListener $r6;
        android.net.sip.SipException $r7, $r9;
        android.os.RemoteException $r8, r10;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.sip.SipRegistrationListener;

     label1:
        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r5 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r6 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r2, $r5);

        r3 = interfaceinvoke $r4.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>(r1, $r6);

        if r3 != null goto label2;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String)>("SipService.createSession() returns null");

        throw $r7;

     label2:
        interfaceinvoke r3.<android.net.sip.ISipSession: void register(int)>(i0);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new android.net.sip.SipException;

        specialinvoke $r9.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("register()", r10);

        throw $r9;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void unregister(android.net.sip.SipProfile, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1;
        android.net.sip.SipRegistrationListener r2;
        android.net.sip.ISipSession r3;
        android.net.sip.ISipService $r4;
        java.lang.String $r5;
        android.net.sip.ISipSessionListener $r6;
        android.net.sip.SipException $r7, $r9;
        android.os.RemoteException $r8, r10;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.SipRegistrationListener;

     label1:
        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r5 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r6 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r2, $r5);

        r3 = interfaceinvoke $r4.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>(r1, $r6);

        if r3 != null goto label2;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String)>("SipService.createSession() returns null");

        throw $r7;

     label2:
        interfaceinvoke r3.<android.net.sip.ISipSession: void unregister()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new android.net.sip.SipException;

        specialinvoke $r9.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("unregister()", r10);

        throw $r9;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public android.net.sip.SipSession getSessionFor(android.content.Intent) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Intent r1;
        java.lang.String r2;
        android.net.sip.ISipSession r3;
        android.net.sip.ISipService $r4;
        android.net.sip.SipSession $r5;
        android.os.RemoteException $r6, r8;
        android.net.sip.SipException $r7;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.content.Intent;

     label1:
        r2 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r1);

        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        r3 = interfaceinvoke $r4.<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String)>(r2);

        if r3 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r5 = new android.net.sip.SipSession;

        specialinvoke $r5.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession)>(r3);

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("getSessionFor()", r8);

        throw $r7;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    private static android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener, java.lang.String)
    {
        android.net.sip.SipRegistrationListener r0;
        java.lang.String r1;
        android.net.sip.SipManager$ListenerRelay $r2;

        r0 := @parameter0: android.net.sip.SipRegistrationListener;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = new android.net.sip.SipManager$ListenerRelay;

        specialinvoke $r2.<android.net.sip.SipManager$ListenerRelay: void <init>(android.net.sip.SipRegistrationListener,java.lang.String)>(r0, r1);

     label2:
        return $r2;
    }

    public android.net.sip.SipSession createSipSession(android.net.sip.SipProfile, android.net.sip.SipSession$Listener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1;
        android.net.sip.SipSession$Listener r2;
        android.net.sip.ISipSession r3;
        android.net.sip.ISipService $r4;
        android.net.sip.SipSession $r5;
        android.net.sip.SipException $r6, $r8;
        android.os.RemoteException $r7, r9;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.SipSession$Listener;

     label1:
        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        r3 = interfaceinvoke $r4.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>(r1, null);

        if r3 != null goto label2;

        $r6 = new android.net.sip.SipException;

        specialinvoke $r6.<android.net.sip.SipException: void <init>(java.lang.String)>("Failed to create SipSession; network unavailable?");

        throw $r6;

     label2:
        $r5 = new android.net.sip.SipSession;

        specialinvoke $r5.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession,android.net.sip.SipSession$Listener)>(r3, r2);

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new android.net.sip.SipException;

        specialinvoke $r8.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("createSipSession()", r9);

        throw $r8;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public android.net.sip.SipProfile[] getListOfProfiles()
    {
        android.net.sip.SipManager r0;
        android.net.sip.ISipService $r2;
        android.net.sip.SipProfile[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.sip.SipManager;

     label1:
        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r3 = interfaceinvoke $r2.<android.net.sip.ISipService: android.net.sip.SipProfile[] getListOfProfiles()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (android.net.sip.SipProfile)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.net.sip.SipManager: java.lang.String TAG> = "SipManager";

        <android.net.sip.SipManager: java.lang.String EXTRA_LOCAL_URI> = "android:localSipUri";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_CALL_OPTION_CHANGED> = "com.android.phone.SIP_CALL_OPTION_CHANGED";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_REMOVE_PHONE> = "com.android.phone.SIP_REMOVE_PHONE";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_ADD_PHONE> = "com.android.phone.SIP_ADD_PHONE";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_INCOMING_CALL> = "com.android.phone.SIP_INCOMING_CALL";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_SERVICE_UP> = "android.net.sip.SIP_SERVICE_UP";

        <android.net.sip.SipManager: java.lang.String EXTRA_OFFER_SD> = "android:sipOfferSD";

        <android.net.sip.SipManager: java.lang.String EXTRA_CALL_ID> = "android:sipCallID";

        <android.net.sip.SipManager: int INCOMING_CALL_RESULT_CODE> = 101;

        return;
    }
}
