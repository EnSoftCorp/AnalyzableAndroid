public class com.android.bluetooth.hfpclient.HeadsetClientService extends com.android.bluetooth.btservice.ProfileService
{
    private static final boolean DBG;
    private static final java.lang.String TAG;
    private com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine;
    private static com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService;
    private final android.content.BroadcastReceiver mBroadcastReceiver;

    public void <init>()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientService$1 $r1;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        specialinvoke r0.<com.android.bluetooth.btservice.ProfileService: void <init>()>();

        $r1 = new com.android.bluetooth.hfpclient.HeadsetClientService$1;

        specialinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientService$1: void <init>(com.android.bluetooth.hfpclient.HeadsetClientService)>(r0);

        r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.BroadcastReceiver mBroadcastReceiver> = $r1;

        return;
    }

    protected java.lang.String getName()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        return "HeadsetClientService";
    }

    public com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder $r1;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        $r1 = new com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder;

        specialinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: void <init>(com.android.bluetooth.hfpclient.HeadsetClientService)>(r0);

        return $r1;
    }

    protected boolean start()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.content.IntentFilter r1, $r4;
        java.lang.Exception r2, $r7;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3;
        android.content.BroadcastReceiver $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        $r3 = staticinvoke <com.android.bluetooth.hfpclient.HeadsetClientStateMachine: com.android.bluetooth.hfpclient.HeadsetClientStateMachine make(com.android.bluetooth.hfpclient.HeadsetClientService)>(r0);

        r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine> = $r3;

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("android.media.VOLUME_CHANGED_ACTION");

        r1 = $r4;

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.bluetooth.device.action.CONNECTION_ACCESS_REPLY");

     label1:
        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r5, r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HeadsetClientService", "Unable to register broadcat receiver", r2);

     label4:
        staticinvoke <com.android.bluetooth.hfpclient.HeadsetClientService: void setHeadsetClientService(com.android.bluetooth.hfpclient.HeadsetClientService)>(r0);

        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected boolean stop()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        java.lang.Exception r1, $r4;
        android.content.BroadcastReceiver $r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

     label1:
        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void unregisterReceiver(android.content.BroadcastReceiver)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HeadsetClientService", "Unable to unregister broadcast receiver", r1);

     label4:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void doQuit()>();

        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected boolean cleanup()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r1, $r2;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        $r1 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void cleanup()>();

     label1:
        staticinvoke <com.android.bluetooth.hfpclient.HeadsetClientService: void clearHeadsetClientService()>();

        return 1;
    }

    public static synchronized com.android.bluetooth.hfpclient.HeadsetClientService getHeadsetClientService()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService $r0, $r1, $r2;
        boolean $z0;

        $r0 = <com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService>;

        if $r0 == null goto label1;

        $r1 = <com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService>;

        $z0 = virtualinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientService: boolean isAvailable()>();

        if $z0 == 0 goto label1;

        $r2 = <com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService>;

        return $r2;

     label1:
        return null;
    }

    private static synchronized void setHeadsetClientService(com.android.bluetooth.hfpclient.HeadsetClientService)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        boolean $z0;

        r0 := @parameter0: com.android.bluetooth.hfpclient.HeadsetClientService;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: boolean isAvailable()>();

        if $z0 == 0 goto label1;

        <com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService> = r0;

     label1:
        return;
    }

    private static synchronized void clearHeadsetClientService()
    {
        <com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientService sHeadsetClientService> = null;

        return;
    }

    public boolean connect(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, $i1;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH ADMIN permission");

        $i1 = virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: int getPriority(android.bluetooth.BluetoothDevice)>(r1);

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label2;

        if i0 != 1 goto label3;

     label2:
        return 0;

     label3:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int,java.lang.Object)>(1, r1);

        return 1;
    }

    boolean disconnect(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH ADMIN permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int,java.lang.Object)>(2, r1);

        return 1;
    }

    public java.util.List getConnectedDevices()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r1;
        java.util.List $r2;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r1 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $r2 = virtualinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: java.util.List getConnectedDevices()>();

        return $r2;
    }

    private java.util.List getDevicesMatchingConnectionStates(int[])
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        int[] r1;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2;
        java.util.List $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: int[];

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $r3 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>(r1);

        return $r3;
    }

    int getConnectionState(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2;
        int $i0;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        return $i0;
    }

    public boolean setPriority(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.content.ContentResolver $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH_ADMIN permission");

        $r2 = virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.ContentResolver getContentResolver()>();

        $r3 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>();

        $r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)>($r3);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, $r4, i0);

        return 1;
    }

    public int getPriority(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.content.ContentResolver $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH_ADMIN permission");

        $r2 = virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: android.content.ContentResolver getContentResolver()>();

        $r3 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>();

        $r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)>($r3);

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, $r4, -1);

        return i0;
    }

    boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int)>(5);

        return 1;
    }

    boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int)>(6);

        return 1;
    }

    boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        return 0;
    }

    boolean rejectIncomingConnect(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        return 0;
    }

    int getAudioState(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2;
        int $i0;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)>(r1);

        return $i0;
    }

    boolean connectAudio()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH_ADMIN permission");

        $r1 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $z0 = virtualinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $z1 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: boolean isAudioOn()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int)>(3);

        return 1;
    }

    boolean disconnectAudio()
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH_ADMIN", "Need BLUETOOTH_ADMIN permission");

        $r1 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $z0 = virtualinvoke $r1.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: boolean isAudioOn()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(int)>(4);

        return 1;
    }

    boolean holdCall(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(14);

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean acceptCall(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i1 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i1 == 2 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(12);

        r2.<android.os.Message: int arg1> = i0;

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean rejectCall(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(13);

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean terminateCall(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i1 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i1 == 2 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(15);

        r2.<android.os.Message: int arg1> = i0;

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean enterPrivateMode(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i1 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i1 == 2 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(16);

        r2.<android.os.Message: int arg1> = i0;

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean redial(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(9);

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean dial(android.bluetooth.BluetoothDevice, java.lang.String)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        java.lang.String r2;
        int i0;
        android.os.Message r3;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r4, $r5, $r6;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r3 = virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(10);

        r3.<android.os.Message: java.lang.Object obj> = r2;

        $r6 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r6.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r3);

        return 1;
    }

    boolean dialMemory(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i1 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i1 == 2 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(11);

        r2.<android.os.Message: int arg1> = i0;

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    public boolean sendDTMF(android.bluetooth.BluetoothDevice, byte)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        byte b0;
        int i1;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        b0 := @parameter1: byte;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i1 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i1 == 2 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(17);

        r2.<android.os.Message: int arg1> = b0;

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    public boolean getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(19);

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    public java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;
        java.util.List $r4;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $r4 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: java.util.List getCurrentCalls()>();

        return $r4;
    }

    public boolean explicitCallTransfer(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        android.os.Message r2;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        r2 = virtualinvoke $r4.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Message obtainMessage(int)>(18);

        $r5 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        virtualinvoke $r5.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: void sendMessage(android.os.Message)>(r2);

        return 1;
    }

    public android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;
        android.os.Bundle $r4;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $r4 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Bundle getCurrentAgEvents()>();

        return $r4;
    }

    public android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r2, $r3;
        android.os.Bundle $r4;

        r0 := @this: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        i0 = virtualinvoke $r2.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        if i0 == 2 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        $r4 = virtualinvoke $r3.<com.android.bluetooth.hfpclient.HeadsetClientStateMachine: android.os.Bundle getCurrentAgFeatures()>();

        return $r4;
    }

    static com.android.bluetooth.hfpclient.HeadsetClientStateMachine access$000(com.android.bluetooth.hfpclient.HeadsetClientService)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        com.android.bluetooth.hfpclient.HeadsetClientStateMachine $r1;

        r0 := @parameter0: com.android.bluetooth.hfpclient.HeadsetClientService;

        $r1 = r0.<com.android.bluetooth.hfpclient.HeadsetClientService: com.android.bluetooth.hfpclient.HeadsetClientStateMachine mStateMachine>;

        return $r1;
    }

    static boolean access$100(com.android.bluetooth.hfpclient.HeadsetClientService)
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        boolean $z0;

        r0 := @parameter0: com.android.bluetooth.hfpclient.HeadsetClientService;

        $z0 = virtualinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: boolean isAvailable()>();

        return $z0;
    }

    static java.util.List access$200(com.android.bluetooth.hfpclient.HeadsetClientService, int[])
    {
        com.android.bluetooth.hfpclient.HeadsetClientService r0;
        int[] r1;
        java.util.List $r2;

        r0 := @parameter0: com.android.bluetooth.hfpclient.HeadsetClientService;

        r1 := @parameter1: int[];

        $r2 = specialinvoke r0.<com.android.bluetooth.hfpclient.HeadsetClientService: java.util.List getDevicesMatchingConnectionStates(int[])>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.android.bluetooth.hfpclient.HeadsetClientService: java.lang.String TAG> = "HeadsetClientService";

        <com.android.bluetooth.hfpclient.HeadsetClientService: boolean DBG> = 0;

        return;
    }
}
