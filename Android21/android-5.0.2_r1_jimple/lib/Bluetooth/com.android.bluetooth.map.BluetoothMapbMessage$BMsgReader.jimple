class com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader extends java.lang.Object
{
    java.io.InputStream mInStream;

    public void <init>(java.io.InputStream)
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        java.io.InputStream r1;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.io.InputStream mInStream> = r1;

        return;
    }

    private byte[] getLineAsBytes()
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        int i0, $i1, $i2, $i3, $i4;
        java.io.ByteArrayOutputStream r1, $r3;
        java.io.IOException r2, $r7;
        java.io.InputStream $r4, $r6;
        byte[] $r5;
        java.lang.String $r8;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r3;

     label1:
        $r4 = r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.io.InputStream mInStream>;

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        i0 = $i1;

        if $i1 == -1 goto label5;

        if i0 != 13 goto label3;

        $r6 = r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.io.InputStream mInStream>;

        $i3 = virtualinvoke $r6.<java.io.InputStream: int read()>();

        i0 = $i3;

        if $i3 == -1 goto label2;

        if i0 != 10 goto label2;

        $i4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: int size()>();

        if $i4 != 0 goto label5;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(13);

        goto label4;

     label3:
        if i0 != 10 goto label4;

        $i2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: int size()>();

        if $i2 != 0 goto label4;

        goto label1;

     label4:
        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        goto label1;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <com.android.bluetooth.map.BluetoothMapbMessage: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>($r8, r2);

        return null;

     label7:
        $r5 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r5;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public java.lang.String getLine()
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        byte[] r1;
        int $i0;
        java.lang.String $r2, $r4;
        java.io.UnsupportedEncodingException $r3, r5;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

     label1:
        r1 = specialinvoke r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: byte[] getLineAsBytes()>();

        $i0 = lengthof r1;

        if $i0 != 0 goto label3;

     label2:
        return null;

     label3:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8");

     label4:
        return $r2;

     label5:
        $r3 := @caughtexception;

        r5 = $r3;

        $r4 = <com.android.bluetooth.map.BluetoothMapbMessage: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>($r4, r5);

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public java.lang.String getLineEnforce()
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        r1 = virtualinvoke r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.lang.String getLine()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bmessage too short");

        throw $r2;

     label1:
        return r1;
    }

    public void expect(java.lang.String) throws java.lang.IllegalArgumentException
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        java.lang.String r1, r2, $r4, $r5, $r13;
        java.lang.IllegalArgumentException $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.lang.String getLine()>();

        if r2 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Line or substring is null");

        throw $r3;

     label2:
        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r5);

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" in: \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label3:
        return;
    }

    public void expect(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        java.lang.String r1, r2, r3, $r4, $r5, $r6, $r7, $r16, $r23;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r8, $r15;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.lang.String getLine()>();

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r5);

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \"");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" in: \"");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r15;

     label1:
        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>($r7);

        if $z1 != 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" in: \"");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label2:
        return;
    }

    public byte[] getDataBytes(int)
    {
        com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader r0;
        int i0, i1, i2, $i3, $i4, $i5;
        byte[] r1;
        java.io.InputStream $r2;
        java.io.IOException $r3, r5;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader;

        i0 := @parameter0: int;

        r1 = newarray (byte)[i0];

     label1:
        i2 = 0;

     label2:
        $r2 = r0.<com.android.bluetooth.map.BluetoothMapbMessage$BMsgReader: java.io.InputStream mInStream>;

        $i3 = i0 - i2;

        $i4 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, $i3);

        i1 = $i4;

        $i5 = i0 - i2;

        if $i4 == $i5 goto label5;

        if i1 != -1 goto label4;

     label3:
        return null;

     label4:
        i2 = i2 + i1;

        goto label2;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        r5 = $r3;

        $r4 = <com.android.bluetooth.map.BluetoothMapbMessage: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>($r4, r5);

        return null;

     label7:
        return r1;

        catch java.io.IOException from label1 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
}
