public class com.android.bluetooth.hdp.HealthService extends com.android.bluetooth.btservice.ProfileService
{
    private static final boolean DBG;
    private static final boolean VDBG;
    private static final java.lang.String TAG;
    private java.util.List mHealthChannels;
    private java.util.Map mApps;
    private java.util.Map mHealthDevices;
    private boolean mNativeAvailable;
    private com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler;
    private static final int MESSAGE_REGISTER_APPLICATION;
    private static final int MESSAGE_UNREGISTER_APPLICATION;
    private static final int MESSAGE_CONNECT_CHANNEL;
    private static final int MESSAGE_DISCONNECT_CHANNEL;
    private static final int MESSAGE_APP_REGISTRATION_CALLBACK;
    private static final int MESSAGE_CHANNEL_STATE_CALLBACK;
    private static final int APP_REG_STATE_REG_SUCCESS;
    private static final int APP_REG_STATE_REG_FAILED;
    private static final int APP_REG_STATE_DEREG_SUCCESS;
    private static final int APP_REG_STATE_DEREG_FAILED;
    private static final int CONN_STATE_CONNECTING;
    private static final int CONN_STATE_CONNECTED;
    private static final int CONN_STATE_DISCONNECTING;
    private static final int CONN_STATE_DISCONNECTED;
    private static final int CONN_STATE_DESTROYED;
    private static final int MDEP_ROLE_SOURCE;
    private static final int MDEP_ROLE_SINK;
    private static final int CHANNEL_TYPE_RELIABLE;
    private static final int CHANNEL_TYPE_STREAMING;
    private static final int CHANNEL_TYPE_ANY;

    public void <init>()
    {
        com.android.bluetooth.hdp.HealthService r0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        specialinvoke r0.<com.android.bluetooth.btservice.ProfileService: void <init>()>();

        return;
    }

    protected java.lang.String getName()
    {
        com.android.bluetooth.hdp.HealthService r0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        return "HealthService";
    }

    protected com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()
    {
        com.android.bluetooth.hdp.HealthService r0;
        com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder $r1;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        $r1 = new com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder;

        specialinvoke $r1.<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: void <init>(com.android.bluetooth.hdp.HealthService)>(r0);

        return $r1;
    }

    protected boolean start()
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.os.HandlerThread r1, $r9;
        android.os.Looper r2;
        java.util.ArrayList $r3;
        java.util.List $r4;
        java.util.HashMap $r5, $r7;
        java.util.Map $r6, $r8;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r10;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r3);

        r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r5);

        r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r7);

        r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices> = $r8;

        $r9 = new android.os.HandlerThread;

        specialinvoke $r9.<android.os.HandlerThread: void <init>(java.lang.String)>("BluetoothHdpHandler");

        r1 = $r9;

        virtualinvoke r1.<android.os.HandlerThread: void start()>();

        r2 = virtualinvoke r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r10 = new com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler;

        specialinvoke $r10.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: void <init>(com.android.bluetooth.hdp.HealthService,android.os.Looper,com.android.bluetooth.hdp.HealthService$1)>(r0, r2, null);

        r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler> = $r10;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void initializeNative()>();

        r0.<com.android.bluetooth.hdp.HealthService: boolean mNativeAvailable> = 1;

        return 1;
    }

    protected boolean stop()
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.os.Looper r1;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r2, $r3, $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        $r2 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r3.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r1 = virtualinvoke $r4.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Looper getLooper()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.Looper: void quit()>();

     label1:
        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void cleanupApps()>();

        return 1;
    }

    private void cleanupApps()
    {
        com.android.bluetooth.hdp.HealthService r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        com.android.bluetooth.hdp.HealthService$AppInfo r3;
        java.util.Map $r4, $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = (com.android.bluetooth.hdp.HealthService$AppInfo) $r8;

        if r3 == null goto label2;

        staticinvoke <com.android.bluetooth.hdp.HealthService$AppInfo: void access$100(com.android.bluetooth.hdp.HealthService$AppInfo)>(r3);

     label2:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    protected boolean cleanup()
    {
        com.android.bluetooth.hdp.HealthService r0;
        boolean $z0;
        java.util.List $r1, $r6;
        java.util.Map $r2, $r3, $r4, $r5;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler> = null;

        $z0 = r0.<com.android.bluetooth.hdp.HealthService: boolean mNativeAvailable>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void cleanupNative()>();

        r0.<com.android.bluetooth.hdp.HealthService: boolean mNativeAvailable> = 0;

     label1:
        $r1 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        if $r1 == null goto label2;

        $r6 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

     label2:
        $r2 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        if $r2 == null goto label3;

        $r5 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

     label3:
        $r3 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        if $r3 == null goto label4;

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

     label4:
        return 1;
    }

    boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.IBluetoothHealthCallback)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        android.bluetooth.IBluetoothHealthCallback r2;
        android.os.Message r3;
        java.util.Map $r4, $r7;
        java.lang.Object $r5;
        com.android.bluetooth.hdp.HealthService$AppInfo $r6;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r9, $r10;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothHealthAppConfiguration;

        r2 := @parameter1: android.bluetooth.IBluetoothHealthCallback;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r5 == null goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HealthService", "Config has already been registered");

        return 0;

     label1:
        $r7 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r6 = new com.android.bluetooth.hdp.HealthService$AppInfo;

        specialinvoke $r6.<com.android.bluetooth.hdp.HealthService$AppInfo: void <init>(android.bluetooth.IBluetoothHealthCallback,com.android.bluetooth.hdp.HealthService$1)>(r2, null);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r9 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r3 = virtualinvoke $r9.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        $r10 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r10.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r3);

        return 1;
    }

    boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        android.os.Message r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r5, $r6;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothHealthAppConfiguration;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r3 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 != null goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HealthService", "unregisterAppConfiguration: no app found");

        return 0;

     label1:
        $r5 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r2 = virtualinvoke $r5.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        $r6 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r6.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r2);

        return 1;
    }

    boolean connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        android.bluetooth.BluetoothHealthAppConfiguration r2;
        boolean $z0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $z0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>(r1, r2, 12);

        return $z0;
    }

    boolean connectChannelToSink(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        android.bluetooth.BluetoothHealthAppConfiguration r2;
        int i0;
        boolean $z0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        i0 := @parameter2: int;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $z0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>(r1, r2, i0);

        return $z0;
    }

    boolean disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        android.bluetooth.BluetoothHealthAppConfiguration r2;
        int i0;
        com.android.bluetooth.hdp.HealthService$HealthChannel r3;
        android.os.Message r4;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r5, $r6;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        i0 := @parameter2: int;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        r3 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthChannel findChannelById(int)>(i0);

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HealthService", "disconnectChannel: no channel found");

        return 0;

     label1:
        $r5 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r4 = virtualinvoke $r5.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r3);

        $r6 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r6.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r4);

        return 1;
    }

    android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1, $r14;
        android.bluetooth.BluetoothHealthAppConfiguration r2, $r16;
        com.android.bluetooth.hdp.HealthService$HealthChannel r3, r5;
        java.util.Iterator r4;
        java.util.List $r6;
        boolean $z0, $z1, $z2;
        android.os.ParcelFileDescriptor $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Object $r15;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        r3 = null;

        $r6 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.bluetooth.hdp.HealthService$HealthChannel) $r15;

        $r14 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: android.bluetooth.BluetoothDevice access$1200(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r5);

        $z1 = virtualinvoke $r14.<android.bluetooth.BluetoothDevice: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r16 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: android.bluetooth.BluetoothHealthAppConfiguration access$1300(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r5);

        $z2 = virtualinvoke $r16.<android.bluetooth.BluetoothHealthAppConfiguration: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        r3 = r5;

     label2:
        goto label1;

     label3:
        if r3 != null goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No channel found for device: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" config: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r13);

        return null;

     label4:
        $r7 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: android.os.ParcelFileDescriptor access$1600(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r3);

        return $r7;
    }

    int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        int $i0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $i0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int getConnectionState(android.bluetooth.BluetoothDevice)>(r1);

        return $i0;
    }

    java.util.List getConnectedHealthDevices()
    {
        com.android.bluetooth.hdp.HealthService r0;
        java.util.List r1;
        int[] $r2;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        $r2 = newarray (int)[1];

        $r2[0] = 2;

        r1 = virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])>($r2);

        return r1;
    }

    java.util.List getHealthDevicesMatchingConnectionStates(int[])
    {
        com.android.bluetooth.hdp.HealthService r0;
        int[] r1;
        java.util.List r2;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: int[];

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BLUETOOTH", "Need BLUETOOTH permission");

        r2 = virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])>(r1);

        return r2;
    }

    private void onAppRegistrationState(int, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, i1;
        android.os.Message r1;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r2, $r3;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int)>(11);

        r1.<android.os.Message: int arg1> = i0;

        r1.<android.os.Message: int arg2> = i1;

        $r3 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r3.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void onChannelStateChanged(int, byte[], int, int, int, java.io.FileDescriptor)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, i1, i2, i3;
        byte[] r1;
        java.io.FileDescriptor r2;
        android.os.Message r3;
        com.android.bluetooth.hdp.HealthService$ChannelStateEvent r4, $r6;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r5, $r7;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: java.io.FileDescriptor;

        $r5 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r3 = virtualinvoke $r5.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int)>(12);

        $r6 = new com.android.bluetooth.hdp.HealthService$ChannelStateEvent;

        specialinvoke $r6.<com.android.bluetooth.hdp.HealthService$ChannelStateEvent: void <init>(com.android.bluetooth.hdp.HealthService,int,byte[],int,int,int,java.io.FileDescriptor,com.android.bluetooth.hdp.HealthService$1)>(r0, i0, r1, i1, i2, i3, r2, null);

        r4 = $r6;

        r3.<android.os.Message: java.lang.Object obj> = r4;

        $r7 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r7.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r3);

        return;
    }

    private java.lang.String getStringChannelType(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        if i0 != 10 goto label1;

        return "Reliable";

     label1:
        if i0 != 11 goto label2;

        return "Streaming";

     label2:
        return "Any";
    }

    private void callStatusCallback(android.bluetooth.BluetoothHealthAppConfiguration, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        int i0;
        android.bluetooth.IBluetoothHealthCallback r2;
        android.os.RemoteException r3, $r7;
        java.util.Map $r4;
        java.lang.Object $r5;
        com.android.bluetooth.hdp.HealthService$AppInfo $r6;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothHealthAppConfiguration;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (com.android.bluetooth.hdp.HealthService$AppInfo) $r5;

        r2 = staticinvoke <com.android.bluetooth.hdp.HealthService$AppInfo: android.bluetooth.IBluetoothHealthCallback access$900(com.android.bluetooth.hdp.HealthService$AppInfo)>($r6);

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", "Callback object null");

     label1:
        interfaceinvoke r2.<android.bluetooth.IBluetoothHealthCallback: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>(r1, i0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote Exception:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r11);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.bluetooth.BluetoothHealthAppConfiguration findAppConfigByAppId(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i2;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        java.lang.Object $r10, $r12, $r13;
        com.android.bluetooth.hdp.HealthService$AppInfo $r11;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        r1 = null;

        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.bluetooth.hdp.HealthService$AppInfo) $r12;

        $i2 = staticinvoke <com.android.bluetooth.hdp.HealthService$AppInfo: int access$1000(com.android.bluetooth.hdp.HealthService$AppInfo)>($r11);

        if i0 != $i2 goto label2;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r1 = (android.bluetooth.BluetoothHealthAppConfiguration) $r13;

        goto label3;

     label2:
        goto label1;

     label3:
        if r1 != null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No appConfig found for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r9);

     label4:
        return r1;
    }

    private int convertHalRegStatus(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected App Registration state: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r4);

        return 1;
    }

    private int convertHalChannelState(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        return 2;

     label2:
        return 1;

     label3:
        return 3;

     label4:
        return 0;

     label5:
        return 0;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected channel state: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r4);

        return 0;
    }

    private boolean connectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        android.bluetooth.BluetoothHealthAppConfiguration r2;
        int i0;
        com.android.bluetooth.hdp.HealthService$HealthChannel r3, $r7;
        android.os.Message r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler $r8, $r9;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        i0 := @parameter2: int;

        $r5 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r6 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", "connectChannel fail to get a app id from config");

        return 0;

     label1:
        $r7 = new com.android.bluetooth.hdp.HealthService$HealthChannel;

        specialinvoke $r7.<com.android.bluetooth.hdp.HealthService$HealthChannel: void <init>(com.android.bluetooth.hdp.HealthService,android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int,com.android.bluetooth.hdp.HealthService$1)>(r0, r1, r2, i0, null);

        r3 = $r7;

        $r8 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        r4 = virtualinvoke $r8.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: android.os.Message obtainMessage(int)>(3);

        r4.<android.os.Message: java.lang.Object obj> = r3;

        $r9 = r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler mHandler>;

        virtualinvoke $r9.<com.android.bluetooth.hdp.HealthService$HealthServiceMessageHandler: boolean sendMessage(android.os.Message)>(r4);

        return 1;
    }

    private void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        android.bluetooth.BluetoothDevice r2;
        int i0, i1, i2;
        android.os.ParcelFileDescriptor r3, r4;
        java.io.IOException r5, $r28;
        android.os.RemoteException r6, $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r18, $r19, $r20, $r23, $r25, $r26, $r27, $r29, $r30;
        java.lang.String $r13, $r21, $r24, $r31;
        java.lang.Object $r15;
        java.util.Map $r16;
        com.android.bluetooth.hdp.HealthService$AppInfo $r17;
        android.bluetooth.IBluetoothHealthCallback r32;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothHealthAppConfiguration;

        r2 := @parameter1: android.bluetooth.BluetoothDevice;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.ParcelFileDescriptor;

        i2 := @parameter5: int;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice,int)>(r2, i0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Health Device Callback: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" State Change: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void log(java.lang.String)>($r13);

        r4 = null;

        if r3 == null goto label4;

     label1:
        r4 = virtualinvoke r3.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        r5 = $r28;

        r4 = null;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while duping: ");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r31);

     label4:
        $r16 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        $r15 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r17 = (com.android.bluetooth.hdp.HealthService$AppInfo) $r15;

        r32 = staticinvoke <com.android.bluetooth.hdp.HealthService$AppInfo: android.bluetooth.IBluetoothHealthCallback access$900(com.android.bluetooth.hdp.HealthService$AppInfo)>($r17);

        if r32 != null goto label5;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No callback found for config: ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r21);

        return;

     label5:
        interfaceinvoke r32.<android.bluetooth.IBluetoothHealthCallback: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>(r1, r2, i1, i0, r4, i2);

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;

        r6 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote Exception:");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r24);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1, i2;
        boolean z0, $z1, $z2, $z3;
        java.util.List r2, r14, r15;
        java.util.Map $r3, $r5, $r11;
        java.lang.Object $r4, $r6;
        java.lang.Integer $r7, $r13;
        int[] $r8, $r9, $r10;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 != null goto label1;

        $r11 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

     label1:
        $r5 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.Integer) $r6;

        i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        i2 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int convertState(int)>(i0);

        if i1 != i2 goto label2;

        return;

     label2:
        z0 = 0;

        tableswitch(i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label3:
        z0 = 1;

        goto label8;

     label4:
        if i2 != 2 goto label5;

        z0 = 1;

        goto label8;

     label5:
        $r10 = newarray (int)[2];

        $r10[0] = 1;

        $r10[1] = 3;

        r2 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: java.util.List findChannelByStates(android.bluetooth.BluetoothDevice,int[])>(r1, $r10);

        $z3 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label8;

        z0 = 1;

        goto label8;

     label6:
        $r9 = newarray (int)[2];

        $r9[0] = 1;

        $r9[1] = 2;

        r14 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: java.util.List findChannelByStates(android.bluetooth.BluetoothDevice,int[])>(r1, $r9);

        $z2 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label8;

        z0 = 1;

        goto label8;

     label7:
        $r8 = newarray (int)[2];

        $r8[0] = 1;

        $r8[1] = 3;

        r15 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: java.util.List findChannelByStates(android.bluetooth.BluetoothDevice,int[])>(r1, $r8);

        $z1 = interfaceinvoke r15.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label8;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)>(r1, i2, i1);

     label8:
        if z0 == 0 goto label9;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)>(r1, i2, i1);

     label9:
        return;
    }

    private void updateAndSendIntent(android.bluetooth.BluetoothDevice, int, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        java.util.Map $r2, $r5;
        java.lang.Integer $r3;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 0 goto label1;

        $r5 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r2 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)>(r1, 3, i0, i1);

        return;
    }

    private int convertState(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label3;
            default: goto label5;
        };

     label1:
        return 2;

     label2:
        return 1;

     label3:
        return 3;

     label4:
        return 0;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatch in Channel and Health Device State: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r4);

        return 0;
    }

    private int convertRoleToHal(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return 0;

     label1:
        if i0 != 2 goto label2;

        return 1;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unkonw role: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r4);

        return 1;
    }

    private int convertChannelTypeToHal(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        if i0 != 10 goto label1;

        return 0;

     label1:
        if i0 != 11 goto label2;

        return 1;

     label2:
        if i0 != 12 goto label3;

        return 2;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unkonw channel type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r4);

        return 2;
    }

    private com.android.bluetooth.hdp.HealthService$HealthChannel findChannelById(int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i2;
        java.util.Iterator r1;
        com.android.bluetooth.hdp.HealthService$HealthChannel r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.bluetooth.hdp.HealthService$HealthChannel) $r8;

        $i2 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: int access$1400(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r2);

        if $i2 != i0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No channel found by id: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HealthService", $r7);

        return null;
    }

    private java.util.List findChannelByStates(android.bluetooth.BluetoothDevice, int[])
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1, $r10;
        int[] r2, r6;
        java.util.ArrayList r3, $r7;
        java.util.Iterator r4;
        com.android.bluetooth.hdp.HealthService$HealthChannel r5;
        int i0, i1, i2, $i3;
        java.util.List $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        r2 := @parameter1: int[];

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        $r8 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.bluetooth.hdp.HealthService$HealthChannel) $r9;

        $r10 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: android.bluetooth.BluetoothDevice access$1200(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r5);

        $z1 = virtualinvoke $r10.<android.bluetooth.BluetoothDevice: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        r6 = r2;

        i0 = lengthof r6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        i2 = r6[i1];

        $i3 = staticinvoke <com.android.bluetooth.hdp.HealthService$HealthChannel: int access$2600(com.android.bluetooth.hdp.HealthService$HealthChannel)>(r5);

        if $i3 != i2 goto label3;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return r3;
    }

    private int getConnectionState(android.bluetooth.BluetoothDevice)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothDevice r1;
        java.util.Map $r2, $r4;
        java.lang.Object $r3, $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        $r2 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    java.util.List lookupHealthDevicesMatchingStates(int[])
    {
        com.android.bluetooth.hdp.HealthService r0;
        int[] r1, r5;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        android.bluetooth.BluetoothDevice r4;
        int i0, i1, i2, i3;
        java.util.Map $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter0: int[];

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mHealthDevices>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.bluetooth.BluetoothDevice) $r9;

        i0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int getConnectionState(android.bluetooth.BluetoothDevice)>(r4);

        r5 = r1;

        i1 = lengthof r5;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        i3 = r5[i2];

        if i3 != i0 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return r2;
    }

    private static native void classInitNative();

    private native void initializeNative();

    private native void cleanupNative();

    private native int registerHealthAppNative(int, int, java.lang.String, int);

    private native boolean unregisterHealthAppNative(int);

    private native int connectChannelNative(byte[], int);

    private native boolean disconnectChannelNative(int);

    static void access$200(com.android.bluetooth.hdp.HealthService, java.lang.String)
    {
        com.android.bluetooth.hdp.HealthService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: void log(java.lang.String)>(r1);

        return;
    }

    static java.util.Map access$300(com.android.bluetooth.hdp.HealthService)
    {
        com.android.bluetooth.hdp.HealthService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        $r1 = r0.<com.android.bluetooth.hdp.HealthService: java.util.Map mApps>;

        return $r1;
    }

    static int access$400(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int convertRoleToHal(int)>(i0);

        return $i1;
    }

    static int access$500(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int convertChannelTypeToHal(int)>(i0);

        return $i1;
    }

    static int access$600(com.android.bluetooth.hdp.HealthService, int, int, java.lang.String, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        $i3 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int registerHealthAppNative(int,int,java.lang.String,int)>(i0, i1, r1, i2);

        return $i3;
    }

    static void access$700(com.android.bluetooth.hdp.HealthService, android.bluetooth.BluetoothHealthAppConfiguration, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        int i0;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void callStatusCallback(android.bluetooth.BluetoothHealthAppConfiguration,int)>(r1, i0);

        return;
    }

    static boolean access$1100(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: boolean unregisterHealthAppNative(int)>(i0);

        return $z0;
    }

    static int access$1500(com.android.bluetooth.hdp.HealthService, byte[], int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        byte[] r1;
        int i0, $i1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int connectChannelNative(byte[],int)>(r1, i0);

        return $i1;
    }

    static void access$1700(com.android.bluetooth.hdp.HealthService, android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        android.bluetooth.BluetoothHealthAppConfiguration r1;
        android.bluetooth.BluetoothDevice r2;
        int i0, i1, i2;
        android.os.ParcelFileDescriptor r3;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter1: android.bluetooth.BluetoothHealthAppConfiguration;

        r2 := @parameter2: android.bluetooth.BluetoothDevice;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r3 := @parameter5: android.os.ParcelFileDescriptor;

        i2 := @parameter6: int;

        specialinvoke r0.<com.android.bluetooth.hdp.HealthService: void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>(r1, r2, i0, i1, r3, i2);

        return;
    }

    static boolean access$1800(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: boolean disconnectChannelNative(int)>(i0);

        return $z0;
    }

    static android.bluetooth.BluetoothHealthAppConfiguration access$1900(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        android.bluetooth.BluetoothHealthAppConfiguration $r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: android.bluetooth.BluetoothHealthAppConfiguration findAppConfigByAppId(int)>(i0);

        return $r1;
    }

    static int access$2000(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int convertHalRegStatus(int)>(i0);

        return $i1;
    }

    static com.android.bluetooth.hdp.HealthService$HealthChannel access$2100(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0;
        com.android.bluetooth.hdp.HealthService$HealthChannel $r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.hdp.HealthService$HealthChannel findChannelById(int)>(i0);

        return $r1;
    }

    static int access$2200(com.android.bluetooth.hdp.HealthService, int)
    {
        com.android.bluetooth.hdp.HealthService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.bluetooth.hdp.HealthService: int convertHalChannelState(int)>(i0);

        return $i1;
    }

    static android.bluetooth.BluetoothDevice access$2300(com.android.bluetooth.hdp.HealthService, byte[])
    {
        com.android.bluetooth.hdp.HealthService r0;
        byte[] r1;
        android.bluetooth.BluetoothDevice $r2;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: android.bluetooth.BluetoothDevice getDevice(byte[])>(r1);

        return $r2;
    }

    static java.util.List access$2500(com.android.bluetooth.hdp.HealthService)
    {
        com.android.bluetooth.hdp.HealthService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        $r1 = r0.<com.android.bluetooth.hdp.HealthService: java.util.List mHealthChannels>;

        return $r1;
    }

    static boolean access$2700(com.android.bluetooth.hdp.HealthService)
    {
        com.android.bluetooth.hdp.HealthService r0;
        boolean $z0;

        r0 := @parameter0: com.android.bluetooth.hdp.HealthService;

        $z0 = virtualinvoke r0.<com.android.bluetooth.hdp.HealthService: boolean isAvailable()>();

        return $z0;
    }

    static void <clinit>()
    {
        <com.android.bluetooth.hdp.HealthService: int CHANNEL_TYPE_ANY> = 2;

        <com.android.bluetooth.hdp.HealthService: int CHANNEL_TYPE_STREAMING> = 1;

        <com.android.bluetooth.hdp.HealthService: int CHANNEL_TYPE_RELIABLE> = 0;

        <com.android.bluetooth.hdp.HealthService: int MDEP_ROLE_SINK> = 1;

        <com.android.bluetooth.hdp.HealthService: int MDEP_ROLE_SOURCE> = 0;

        <com.android.bluetooth.hdp.HealthService: int CONN_STATE_DESTROYED> = 4;

        <com.android.bluetooth.hdp.HealthService: int CONN_STATE_DISCONNECTED> = 3;

        <com.android.bluetooth.hdp.HealthService: int CONN_STATE_DISCONNECTING> = 2;

        <com.android.bluetooth.hdp.HealthService: int CONN_STATE_CONNECTED> = 1;

        <com.android.bluetooth.hdp.HealthService: int CONN_STATE_CONNECTING> = 0;

        <com.android.bluetooth.hdp.HealthService: int APP_REG_STATE_DEREG_FAILED> = 3;

        <com.android.bluetooth.hdp.HealthService: int APP_REG_STATE_DEREG_SUCCESS> = 2;

        <com.android.bluetooth.hdp.HealthService: int APP_REG_STATE_REG_FAILED> = 1;

        <com.android.bluetooth.hdp.HealthService: int APP_REG_STATE_REG_SUCCESS> = 0;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_CHANNEL_STATE_CALLBACK> = 12;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_APP_REGISTRATION_CALLBACK> = 11;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_DISCONNECT_CHANNEL> = 4;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_CONNECT_CHANNEL> = 3;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_UNREGISTER_APPLICATION> = 2;

        <com.android.bluetooth.hdp.HealthService: int MESSAGE_REGISTER_APPLICATION> = 1;

        <com.android.bluetooth.hdp.HealthService: java.lang.String TAG> = "HealthService";

        <com.android.bluetooth.hdp.HealthService: boolean VDBG> = 0;

        <com.android.bluetooth.hdp.HealthService: boolean DBG> = 1;

        staticinvoke <com.android.bluetooth.hdp.HealthService: void classInitNative()>();

        return;
    }
}
