final class com.android.printspooler.ui.PrintActivity$PageShredder extends java.lang.Object implements android.content.ServiceConnection
{
    private static final java.lang.String TEMP_FILE_PREFIX;
    private static final java.lang.String TEMP_FILE_EXTENSION;
    private final android.content.Context mContext;
    private final com.android.printspooler.model.MutexFileProvider mFileProvider;
    private final android.print.PrintJobInfo mPrintJob;
    private final android.print.PageRange[] mPagesToShred;
    private final java.lang.Runnable mCallback;

    public void <init>(android.content.Context, android.print.PrintJobInfo, com.android.printspooler.model.MutexFileProvider, java.lang.Runnable)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        android.content.Context r1;
        android.print.PrintJobInfo r2, $r5;
        com.android.printspooler.model.MutexFileProvider r3;
        java.lang.Runnable r4;
        android.print.PageRange[] $r6;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.print.PrintJobInfo;

        r3 := @parameter2: com.android.printspooler.model.MutexFileProvider;

        r4 := @parameter3: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.content.Context mContext> = r1;

        r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob> = r2;

        r0.<com.android.printspooler.ui.PrintActivity$PageShredder: com.android.printspooler.model.MutexFileProvider mFileProvider> = r3;

        r0.<com.android.printspooler.ui.PrintActivity$PageShredder: java.lang.Runnable mCallback> = r4;

        $r5 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob>;

        $r6 = staticinvoke <com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PageRange[] computePagesToShred(android.print.PrintJobInfo)>($r5);

        r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PageRange[] mPagesToShred> = $r6;

        return;
    }

    public void shred()
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        android.content.Intent r1, $r3;
        android.print.PageRange[] $r2;
        int $i0;
        android.content.Context $r4, $r6;
        java.lang.Runnable $r7;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        $r2 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PageRange[] mPagesToShred>;

        $i0 = lengthof $r2;

        if $i0 > 0 goto label1;

        $r7 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: java.lang.Runnable mCallback>;

        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

        return;

     label1:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("com.android.printspooler.renderer.ACTION_GET_EDITOR");

        r1 = $r3;

        $r4 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.content.Context mContext>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>($r4, class "com/android/printspooler/renderer/PdfManipulationService");

        $r6 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r1, r0, 1);

        return;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        android.content.ComponentName r1;
        android.os.IBinder r2;
        com.android.printspooler.renderer.IPdfEditor r3;
        com.android.printspooler.ui.PrintActivity$PageShredder$1 $r4;
        java.lang.Void[] $r5;
        java.util.concurrent.Executor $r6;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.IBinder;

        r3 = staticinvoke <com.android.printspooler.renderer.IPdfEditor$Stub: com.android.printspooler.renderer.IPdfEditor asInterface(android.os.IBinder)>(r2);

        $r4 = new com.android.printspooler.ui.PrintActivity$PageShredder$1;

        specialinvoke $r4.<com.android.printspooler.ui.PrintActivity$PageShredder$1: void <init>(com.android.printspooler.ui.PrintActivity$PageShredder,com.android.printspooler.renderer.IPdfEditor)>(r0, r3);

        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r5 = newarray (java.lang.Void)[0];

        virtualinvoke $r4.<com.android.printspooler.ui.PrintActivity$PageShredder$1: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r6, $r5);

        return;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        android.content.ComponentName r1;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        r1 := @parameter0: android.content.ComponentName;

        return;
    }

    private void shredPages(com.android.printspooler.renderer.IPdfEditor)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        com.android.printspooler.renderer.IPdfEditor r1;
        java.io.File r2, r7, $r12;
        android.os.ParcelFileDescriptor r3, r4;
        java.io.FileInputStream r5, $r13;
        java.io.FileOutputStream r6, $r14;
        java.lang.Throwable r8, $r17;
        com.android.printspooler.model.MutexFileProvider $r9, $r15, $r16, $r19;
        android.print.PageRange[] $r10;
        android.content.Context $r11;
        java.lang.Exception $r18, r20;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        r1 := @parameter0: com.android.printspooler.renderer.IPdfEditor;

        r2 = null;

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

     label01:
        $r9 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: com.android.printspooler.model.MutexFileProvider mFileProvider>;

        r7 = virtualinvoke $r9.<com.android.printspooler.model.MutexFileProvider: java.io.File acquireFile(com.android.printspooler.model.MutexFileProvider$OnReleaseRequestCallback)>(null);

        r3 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r7, 805306368);

        interfaceinvoke r1.<com.android.printspooler.renderer.IPdfEditor: int openDocument(android.os.ParcelFileDescriptor)>(r3);

        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

        $r10 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PageRange[] mPagesToShred>;

        interfaceinvoke r1.<com.android.printspooler.renderer.IPdfEditor: void removePages(android.print.PageRange[])>($r10);

        $r11 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.io.File getCacheDir()>();

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("print_job", ".pdf", $r12);

        r4 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r2, 805306368);

        interfaceinvoke r1.<com.android.printspooler.renderer.IPdfEditor: void write(android.os.ParcelFileDescriptor)>(r4);

        virtualinvoke r4.<android.os.ParcelFileDescriptor: void close()>();

        interfaceinvoke r1.<com.android.printspooler.renderer.IPdfEditor: void closeDocument()>();

        virtualinvoke r7.<java.io.File: boolean delete()>();

        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        r5 = $r13;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>(r7);

        r6 = $r14;

        staticinvoke <libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)>(r5, r6);

     label02:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r6);

        if r2 == null goto label03;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label03:
        $r15 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: com.android.printspooler.model.MutexFileProvider mFileProvider>;

        virtualinvoke $r15.<com.android.printspooler.model.MutexFileProvider: void releaseFile()>();

        goto label10;

     label04:
        $r18 := @caughtexception;

        r20 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PrintActivity", "Error dropping pages", r20);

     label05:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r6);

        if r2 == null goto label06;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label06:
        $r19 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: com.android.printspooler.model.MutexFileProvider mFileProvider>;

        virtualinvoke $r19.<com.android.printspooler.model.MutexFileProvider: void releaseFile()>();

        goto label10;

     label07:
        $r17 := @caughtexception;

        r8 = $r17;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r6);

        if r2 == null goto label09;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label09:
        $r16 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: com.android.printspooler.model.MutexFileProvider mFileProvider>;

        virtualinvoke $r16.<com.android.printspooler.model.MutexFileProvider: void releaseFile()>();

        throw r8;

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label04;
        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private void updatePrintJob()
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        int i0, $i1;
        android.print.PrintDocumentInfo r1, r2;
        android.print.PrintJobInfo $r3, $r7, $r8, $r13;
        android.print.PageRange[] $r4, $r5;
        android.print.PageRange $r6;
        android.print.PrintDocumentInfo$Builder $r9, $r11, $r12;
        java.lang.String $r10;

        r0 := @this: com.android.printspooler.ui.PrintActivity$PageShredder;

        $r3 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob>;

        $r4 = virtualinvoke $r3.<android.print.PrintJobInfo: android.print.PageRange[] getPages()>();

        i0 = staticinvoke <com.android.printspooler.util.PageRangeUtils: int getNormalizedPageCount(android.print.PageRange[],int)>($r4, 0);

        $r7 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob>;

        $r5 = newarray (android.print.PageRange)[1];

        $r6 = <android.print.PageRange: android.print.PageRange ALL_PAGES>;

        $r5[0] = $r6;

        virtualinvoke $r7.<android.print.PrintJobInfo: void setPages(android.print.PageRange[])>($r5);

        $r8 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob>;

        r1 = virtualinvoke $r8.<android.print.PrintJobInfo: android.print.PrintDocumentInfo getDocumentInfo()>();

        $r9 = new android.print.PrintDocumentInfo$Builder;

        $r10 = virtualinvoke r1.<android.print.PrintDocumentInfo: java.lang.String getName()>();

        specialinvoke $r9.<android.print.PrintDocumentInfo$Builder: void <init>(java.lang.String)>($r10);

        $i1 = virtualinvoke r1.<android.print.PrintDocumentInfo: int getContentType()>();

        $r11 = virtualinvoke $r9.<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setContentType(int)>($i1);

        $r12 = virtualinvoke $r11.<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>(i0);

        r2 = virtualinvoke $r12.<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()>();

        $r13 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.print.PrintJobInfo mPrintJob>;

        virtualinvoke $r13.<android.print.PrintJobInfo: void setDocumentInfo(android.print.PrintDocumentInfo)>(r2);

        return;
    }

    private static android.print.PageRange[] computePagesToShred(android.print.PrintJobInfo)
    {
        android.print.PrintJobInfo r0;
        java.util.ArrayList r1, $r6;
        android.print.PageRange r2, r4, r5, $r8, $r11, $r12, $r13, r14, r15;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        android.print.PageRange[] r3, r16;
        android.print.PrintDocumentInfo $r7, $r10;

        r0 := @parameter0: android.print.PrintJobInfo;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        r2 = null;

        $r7 = virtualinvoke r0.<android.print.PrintJobInfo: android.print.PrintDocumentInfo getDocumentInfo()>();

        i0 = virtualinvoke $r7.<android.print.PrintDocumentInfo: int getPageCount()>();

        r3 = virtualinvoke r0.<android.print.PrintJobInfo: android.print.PageRange[] getPages()>();

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        $r8 = r3[i2];

        r4 = staticinvoke <com.android.printspooler.util.PageRangeUtils: android.print.PageRange asAbsoluteRange(android.print.PageRange,int)>($r8, i0);

        if r2 != null goto label3;

        $i10 = virtualinvoke r4.<android.print.PageRange: int getStart()>();

        i3 = $i10 - 1;

        if 0 > i3 goto label2;

        $r13 = new android.print.PageRange;

        specialinvoke $r13.<android.print.PageRange: void <init>(int,int)>(0, i3);

        r5 = $r13;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label4;

     label3:
        $i5 = virtualinvoke r2.<android.print.PageRange: int getEnd()>();

        i11 = $i5 + 1;

        $i7 = virtualinvoke r4.<android.print.PageRange: int getStart()>();

        i12 = $i7 - 1;

        if i11 > i12 goto label4;

        $r12 = new android.print.PageRange;

        specialinvoke $r12.<android.print.PageRange: void <init>(int,int)>(i11, i12);

        r14 = $r12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r14);

     label4:
        $i6 = i1 - 1;

        if i2 != $i6 goto label5;

        $i8 = virtualinvoke r4.<android.print.PageRange: int getEnd()>();

        i13 = $i8 + 1;

        $r10 = virtualinvoke r0.<android.print.PrintJobInfo: android.print.PrintDocumentInfo getDocumentInfo()>();

        $i9 = virtualinvoke $r10.<android.print.PrintDocumentInfo: int getPageCount()>();

        i14 = $i9 - 1;

        if i13 > i14 goto label5;

        $r11 = new android.print.PageRange;

        specialinvoke $r11.<android.print.PageRange: void <init>(int,int)>(i13, i14);

        r15 = $r11;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r15);

     label5:
        r2 = r4;

        i2 = i2 + 1;

        goto label1;

     label6:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        r16 = newarray (android.print.PageRange)[$i4];

        interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r16);

        return r16;
    }

    static void access$4700(com.android.printspooler.ui.PrintActivity$PageShredder, com.android.printspooler.renderer.IPdfEditor)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        com.android.printspooler.renderer.IPdfEditor r1;

        r0 := @parameter0: com.android.printspooler.ui.PrintActivity$PageShredder;

        r1 := @parameter1: com.android.printspooler.renderer.IPdfEditor;

        specialinvoke r0.<com.android.printspooler.ui.PrintActivity$PageShredder: void shredPages(com.android.printspooler.renderer.IPdfEditor)>(r1);

        return;
    }

    static void access$4800(com.android.printspooler.ui.PrintActivity$PageShredder)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;

        r0 := @parameter0: com.android.printspooler.ui.PrintActivity$PageShredder;

        specialinvoke r0.<com.android.printspooler.ui.PrintActivity$PageShredder: void updatePrintJob()>();

        return;
    }

    static android.content.Context access$4900(com.android.printspooler.ui.PrintActivity$PageShredder)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.printspooler.ui.PrintActivity$PageShredder;

        $r1 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: android.content.Context mContext>;

        return $r1;
    }

    static java.lang.Runnable access$5000(com.android.printspooler.ui.PrintActivity$PageShredder)
    {
        com.android.printspooler.ui.PrintActivity$PageShredder r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.printspooler.ui.PrintActivity$PageShredder;

        $r1 = r0.<com.android.printspooler.ui.PrintActivity$PageShredder: java.lang.Runnable mCallback>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.printspooler.ui.PrintActivity$PageShredder: java.lang.String TEMP_FILE_EXTENSION> = ".pdf";

        <com.android.printspooler.ui.PrintActivity$PageShredder: java.lang.String TEMP_FILE_PREFIX> = "print_job";

        return;
    }
}
