public final class com.android.printspooler.model.PageContentRepository extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final boolean DEBUG;
    private static final int INVALID_PAGE_INDEX;
    private static final int STATE_CLOSED;
    private static final int STATE_OPENED;
    private static final int STATE_DESTROYED;
    private static final int BYTES_PER_PIXEL;
    private static final int BYTES_PER_MEGABYTE;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer;
    private com.android.printspooler.model.PageContentRepository$RenderSpec mLastRenderSpec;
    private int mScheduledPreloadFirstShownPage;
    private int mScheduledPreloadLastShownPage;
    private int mState;

    public void <init>(android.content.Context, com.android.printspooler.model.PageContentRepository$OnMalformedPdfFileListener)
    {
        com.android.printspooler.model.PageContentRepository r0;
        android.content.Context r1;
        com.android.printspooler.model.PageContentRepository$OnMalformedPdfFileListener r2;
        dalvik.system.CloseGuard $r3, $r5;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r4;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.printspooler.model.PageContentRepository$OnMalformedPdfFileListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.printspooler.model.PageContentRepository: dalvik.system.CloseGuard mCloseGuard> = $r3;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadFirstShownPage> = -1;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadLastShownPage> = -1;

        $r4 = new com.android.printspooler.model.PageContentRepository$AsyncRenderer;

        specialinvoke $r4.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void <init>(android.content.Context,com.android.printspooler.model.PageContentRepository$OnMalformedPdfFileListener)>(r1, r2);

        r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer> = $r4;

        r0.<com.android.printspooler.model.PageContentRepository: int mState> = 0;

        $r5 = r0.<com.android.printspooler.model.PageContentRepository: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("destroy");

        return;
    }

    public void open(android.os.ParcelFileDescriptor, java.lang.Runnable)
    {
        com.android.printspooler.model.PageContentRepository r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.Runnable r2;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r3;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfNotClosed()>();

        r0.<com.android.printspooler.model.PageContentRepository: int mState> = 1;

        $r3 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        virtualinvoke $r3.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void open(android.os.ParcelFileDescriptor,java.lang.Runnable)>(r1, r2);

        return;
    }

    public void close(java.lang.Runnable)
    {
        com.android.printspooler.model.PageContentRepository r0;
        java.lang.Runnable r1;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r2;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfNotOpened()>();

        r0.<com.android.printspooler.model.PageContentRepository: int mState> = 0;

        $r2 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        virtualinvoke $r2.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void close(java.lang.Runnable)>(r1);

        return;
    }

    public void destroy(java.lang.Runnable)
    {
        com.android.printspooler.model.PageContentRepository r0;
        java.lang.Runnable r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfNotClosed()>();

        r0.<com.android.printspooler.model.PageContentRepository: int mState> = 2;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void doDestroy(java.lang.Runnable)>(r1);

        return;
    }

    public void startPreload(int, int)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int i0, i1, $i2;
        com.android.printspooler.model.PageContentRepository$RenderSpec $r1, $r2;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r3;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$RenderSpec mLastRenderSpec>;

        if $r1 != null goto label1;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadFirstShownPage> = i0;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadLastShownPage> = i1;

        goto label2;

     label1:
        $i2 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        if $i2 != 1 goto label2;

        $r3 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        $r2 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$RenderSpec mLastRenderSpec>;

        virtualinvoke $r3.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void startPreload(int,int,com.android.printspooler.model.PageContentRepository$RenderSpec)>(i0, i1, $r2);

     label2:
        return;
    }

    public void stopPreload()
    {
        com.android.printspooler.model.PageContentRepository r0;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        $r1 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        virtualinvoke $r1.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void stopPreload()>();

        return;
    }

    public int getFilePageCount()
    {
        com.android.printspooler.model.PageContentRepository r0;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r1;
        int $i0;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        $r1 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        $i0 = virtualinvoke $r1.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: int getPageCount()>();

        return $i0;
    }

    public com.android.printspooler.model.PageContentRepository$PageContentProvider acquirePageContentProvider(int, android.view.View)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int i0;
        android.view.View r1;
        com.android.printspooler.model.PageContentRepository$PageContentProvider $r2;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfDestroyed()>();

        $r2 = new com.android.printspooler.model.PageContentRepository$PageContentProvider;

        specialinvoke $r2.<com.android.printspooler.model.PageContentRepository$PageContentProvider: void <init>(com.android.printspooler.model.PageContentRepository,int,android.view.View)>(r0, i0, r1);

        return $r2;
    }

    public void releasePageContentProvider(com.android.printspooler.model.PageContentRepository$PageContentProvider)
    {
        com.android.printspooler.model.PageContentRepository r0;
        com.android.printspooler.model.PageContentRepository$PageContentProvider r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: com.android.printspooler.model.PageContentRepository$PageContentProvider;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfDestroyed()>();

        virtualinvoke r1.<com.android.printspooler.model.PageContentRepository$PageContentProvider: void cancelLoad()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.printspooler.model.PageContentRepository r0;
        java.lang.Throwable r1, $r3;
        int $i0;
        dalvik.system.CloseGuard $r2;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

     label1:
        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        if $i0 == 2 goto label2;

        $r2 = r0.<com.android.printspooler.model.PageContentRepository: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void doDestroy(java.lang.Runnable)>(null);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void doDestroy(java.lang.Runnable)
    {
        com.android.printspooler.model.PageContentRepository r0;
        java.lang.Runnable r1;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r2;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter0: java.lang.Runnable;

        r0.<com.android.printspooler.model.PageContentRepository: int mState> = 2;

        $r2 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        virtualinvoke $r2.<com.android.printspooler.model.PageContentRepository$AsyncRenderer: void destroy(java.lang.Runnable)>(r1);

        return;
    }

    private void throwIfNotOpened()
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not opened");

        throw $r1;

     label1:
        return;
    }

    private void throwIfNotClosed()
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        if $i0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not closed");

        throw $r1;

     label1:
        return;
    }

    private void throwIfDestroyed()
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        if $i0 != 2 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Destroyed");

        throw $r1;

     label1:
        return;
    }

    static void access$000(com.android.printspooler.model.PageContentRepository)
    {
        com.android.printspooler.model.PageContentRepository r0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        specialinvoke r0.<com.android.printspooler.model.PageContentRepository: void throwIfDestroyed()>();

        return;
    }

    static com.android.printspooler.model.PageContentRepository$RenderSpec access$102(com.android.printspooler.model.PageContentRepository, com.android.printspooler.model.PageContentRepository$RenderSpec)
    {
        com.android.printspooler.model.PageContentRepository r0;
        com.android.printspooler.model.PageContentRepository$RenderSpec r1;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        r1 := @parameter1: com.android.printspooler.model.PageContentRepository$RenderSpec;

        r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$RenderSpec mLastRenderSpec> = r1;

        return r1;
    }

    static int access$200(com.android.printspooler.model.PageContentRepository)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadFirstShownPage>;

        return $i0;
    }

    static int access$300(com.android.printspooler.model.PageContentRepository)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadLastShownPage>;

        return $i0;
    }

    static int access$202(com.android.printspooler.model.PageContentRepository, int)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        i0 := @parameter1: int;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadFirstShownPage> = i0;

        return i0;
    }

    static int access$302(com.android.printspooler.model.PageContentRepository, int)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        i0 := @parameter1: int;

        r0.<com.android.printspooler.model.PageContentRepository: int mScheduledPreloadLastShownPage> = i0;

        return i0;
    }

    static int access$400(com.android.printspooler.model.PageContentRepository)
    {
        com.android.printspooler.model.PageContentRepository r0;
        int $i0;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        $i0 = r0.<com.android.printspooler.model.PageContentRepository: int mState>;

        return $i0;
    }

    static com.android.printspooler.model.PageContentRepository$AsyncRenderer access$500(com.android.printspooler.model.PageContentRepository)
    {
        com.android.printspooler.model.PageContentRepository r0;
        com.android.printspooler.model.PageContentRepository$AsyncRenderer $r1;

        r0 := @parameter0: com.android.printspooler.model.PageContentRepository;

        $r1 = r0.<com.android.printspooler.model.PageContentRepository: com.android.printspooler.model.PageContentRepository$AsyncRenderer mRenderer>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.printspooler.model.PageContentRepository: int BYTES_PER_MEGABYTE> = 1048576;

        <com.android.printspooler.model.PageContentRepository: int BYTES_PER_PIXEL> = 4;

        <com.android.printspooler.model.PageContentRepository: int STATE_DESTROYED> = 2;

        <com.android.printspooler.model.PageContentRepository: int STATE_OPENED> = 1;

        <com.android.printspooler.model.PageContentRepository: int STATE_CLOSED> = 0;

        <com.android.printspooler.model.PageContentRepository: int INVALID_PAGE_INDEX> = -1;

        <com.android.printspooler.model.PageContentRepository: boolean DEBUG> = 0;

        <com.android.printspooler.model.PageContentRepository: java.lang.String LOG_TAG> = "PageContentRepository";

        return;
    }
}
