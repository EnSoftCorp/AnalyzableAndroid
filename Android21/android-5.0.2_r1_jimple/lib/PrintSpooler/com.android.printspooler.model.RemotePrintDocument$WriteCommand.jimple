final class com.android.printspooler.model.RemotePrintDocument$WriteCommand extends com.android.printspooler.model.RemotePrintDocument$AsyncCommand
{
    private final int mPageCount;
    private final android.print.PageRange[] mPages;
    private final com.android.printspooler.model.MutexFileProvider mFileProvider;
    private final android.print.IWriteResultCallback mRemoteResultCallback;
    private final com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;

    public void <init>(android.content.Context, android.os.Looper, android.print.IPrintDocumentAdapter, com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo, int, android.print.PageRange[], com.android.printspooler.model.MutexFileProvider, com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.content.Context r1;
        android.os.Looper r2;
        android.print.IPrintDocumentAdapter r3;
        com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo r4;
        int i0, $i1;
        android.print.PageRange[] r5, $r12;
        com.android.printspooler.model.MutexFileProvider r6;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback r7;
        com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteHandler $r8;
        com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteResultCallback $r9;
        android.os.Handler $r10;
        java.lang.Object[] $r11;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.print.IPrintDocumentAdapter;

        r4 := @parameter3: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo;

        i0 := @parameter4: int;

        r5 := @parameter5: android.print.PageRange[];

        r6 := @parameter6: com.android.printspooler.model.MutexFileProvider;

        r7 := @parameter7: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback;

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: void <init>(android.print.IPrintDocumentAdapter,com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo,com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback)>(r3, r4, r7);

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.content.Context mContext> = r1;

        $r8 = new com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteHandler;

        specialinvoke $r8.<com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteHandler: void <init>(com.android.printspooler.model.RemotePrintDocument$WriteCommand,android.os.Looper)>(r0, r2);

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.Handler mHandler> = $r8;

        $r9 = new com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteResultCallback;

        $r10 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.Handler mHandler>;

        specialinvoke $r9.<com.android.printspooler.model.RemotePrintDocument$WriteCommand$WriteResultCallback: void <init>(android.os.Handler)>($r10);

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.print.IWriteResultCallback mRemoteResultCallback> = $r9;

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mPageCount> = i0;

        $i1 = lengthof r5;

        $r11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r5, $i1);

        $r12 = (android.print.PageRange[]) $r11;

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.print.PageRange[] mPages> = $r12;

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.MutexFileProvider mFileProvider> = r6;

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback> = r7;

        return;
    }

    public void run()
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        com.android.printspooler.model.RemotePrintDocument$WriteCommand$1 $r1;
        java.lang.Void[] $r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void running()>();

        $r1 = new com.android.printspooler.model.RemotePrintDocument$WriteCommand$1;

        specialinvoke $r1.<com.android.printspooler.model.RemotePrintDocument$WriteCommand$1: void <init>(com.android.printspooler.model.RemotePrintDocument$WriteCommand)>(r0);

        $r3 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r2 = (java.lang.Void[]) null;

        virtualinvoke $r1.<com.android.printspooler.model.RemotePrintDocument$WriteCommand$1: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r3, $r2);

        return;
    }

    private void handleOnWriteStarted(android.os.ICancellationSignal, int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.os.ICancellationSignal r1;
        int i0, $i1;
        android.os.RemoteException r2, $r3;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter0: android.os.ICancellationSignal;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mSequence>;

        if i0 == $i1 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: boolean isCanceling()>();

        if $z0 == 0 goto label5;

     label2:
        interfaceinvoke r1.<android.os.ICancellationSignal: void cancel()>();

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RemotePrintDocument", "Error cancelling", r2);

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void handleOnWriteFailed(java.lang.CharSequence,int)>(null, i0);

        goto label6;

     label5:
        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.ICancellationSignal mCancellation> = r1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleOnWriteFinished(android.print.PageRange[], int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.print.PageRange[] r1, r2, r3, $r4;
        int i0, $i1, $i2;
        com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo $r5, $r6, $r10, $r11;
        android.content.Context $r7;
        java.lang.String $r8;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback $r9;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter0: android.print.PageRange[];

        i0 := @parameter1: int;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mSequence>;

        if i0 == $i1 goto label1;

        return;

     label1:
        r2 = staticinvoke <com.android.printspooler.util.PageRangeUtils: android.print.PageRange[] normalize(android.print.PageRange[])>(r1);

        $r4 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.print.PageRange[] mPages>;

        $i2 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mPageCount>;

        r3 = staticinvoke <com.android.printspooler.util.PageRangeUtils: android.print.PageRange[] computePrintedPages(android.print.PageRange[],android.print.PageRange[],int)>($r4, r2, $i2);

        if r3 == null goto label2;

        $r10 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument>;

        $r10.<com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo: android.print.PageRange[] writtenPages> = r2;

        $r11 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument>;

        $r11.<com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo: android.print.PageRange[] printedPages> = r3;

        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void completed()>();

        goto label3;

     label2:
        $r5 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument>;

        $r5.<com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo: android.print.PageRange[] writtenPages> = null;

        $r6 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument>;

        $r6.<com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo: android.print.PageRange[] printedPages> = null;

        $r7 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getString(int)>(2131296316);

        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void failed(java.lang.CharSequence)>($r8);

     label3:
        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.ICancellationSignal mCancellation> = null;

        $r9 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback>;

        interfaceinvoke $r9.<com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback: void onDone()>();

        return;
    }

    private void handleOnWriteFailed(java.lang.CharSequence, int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback $r2;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mSequence>;

        if i0 == $i1 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void failed(java.lang.CharSequence)>(r1);

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.ICancellationSignal mCancellation> = null;

        $r2 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback>;

        interfaceinvoke $r2.<com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback: void onDone()>();

        return;
    }

    private void handleOnWriteCanceled(int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        int i0, $i1;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: int mSequence>;

        if i0 == $i1 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void canceled()>();

        r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.os.ICancellationSignal mCancellation> = null;

        $r1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback>;

        interfaceinvoke $r1.<com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback: void onDone()>();

        return;
    }

    static com.android.printspooler.model.MutexFileProvider access$1800(com.android.printspooler.model.RemotePrintDocument$WriteCommand)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        com.android.printspooler.model.MutexFileProvider $r1;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        $r1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: com.android.printspooler.model.MutexFileProvider mFileProvider>;

        return $r1;
    }

    static android.print.PageRange[] access$1900(com.android.printspooler.model.RemotePrintDocument$WriteCommand)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.print.PageRange[] $r1;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        $r1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.print.PageRange[] mPages>;

        return $r1;
    }

    static android.print.IWriteResultCallback access$2000(com.android.printspooler.model.RemotePrintDocument$WriteCommand)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.print.IWriteResultCallback $r1;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        $r1 = r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: android.print.IWriteResultCallback mRemoteResultCallback>;

        return $r1;
    }

    static void access$2100(com.android.printspooler.model.RemotePrintDocument$WriteCommand, android.os.ICancellationSignal, int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.os.ICancellationSignal r1;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter1: android.os.ICancellationSignal;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void handleOnWriteStarted(android.os.ICancellationSignal,int)>(r1, i0);

        return;
    }

    static void access$2200(com.android.printspooler.model.RemotePrintDocument$WriteCommand, android.print.PageRange[], int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        android.print.PageRange[] r1;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter1: android.print.PageRange[];

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void handleOnWriteFinished(android.print.PageRange[],int)>(r1, i0);

        return;
    }

    static void access$2300(com.android.printspooler.model.RemotePrintDocument$WriteCommand, java.lang.CharSequence, int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        java.lang.CharSequence r1;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void handleOnWriteFailed(java.lang.CharSequence,int)>(r1, i0);

        return;
    }

    static void access$2400(com.android.printspooler.model.RemotePrintDocument$WriteCommand, int)
    {
        com.android.printspooler.model.RemotePrintDocument$WriteCommand r0;
        int i0;

        r0 := @parameter0: com.android.printspooler.model.RemotePrintDocument$WriteCommand;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.printspooler.model.RemotePrintDocument$WriteCommand: void handleOnWriteCanceled(int)>(i0);

        return;
    }
}
