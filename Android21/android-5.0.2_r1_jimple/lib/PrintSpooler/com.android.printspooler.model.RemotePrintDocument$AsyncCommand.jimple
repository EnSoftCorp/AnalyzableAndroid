abstract class com.android.printspooler.model.RemotePrintDocument$AsyncCommand extends java.lang.Object implements java.lang.Runnable
{
    private static final int STATE_PENDING;
    private static final int STATE_RUNNING;
    private static final int STATE_COMPLETED;
    private static final int STATE_CANCELED;
    private static final int STATE_CANCELING;
    private static final int STATE_FAILED;
    private static int sSequenceCounter;
    protected final int mSequence;
    protected final android.print.IPrintDocumentAdapter mAdapter;
    protected final com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument;
    protected final com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback;
    protected android.os.ICancellationSignal mCancellation;
    private java.lang.CharSequence mError;
    private int mState;

    public void <init>(android.print.IPrintDocumentAdapter, com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo, com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback)
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        android.print.IPrintDocumentAdapter r1;
        com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo r2;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback r3;
        int $i0, $i1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        r1 := @parameter0: android.print.IPrintDocumentAdapter;

        r2 := @parameter1: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo;

        r3 := @parameter2: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int sSequenceCounter>;

        $i1 = $i0 + 1;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int sSequenceCounter> = $i1;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mSequence> = $i0;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 0;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: android.print.IPrintDocumentAdapter mAdapter> = r1;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: com.android.printspooler.model.RemotePrintDocument$RemotePrintDocumentInfo mDocument> = r2;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback> = r3;

        return;
    }

    protected final boolean isCanceling()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isCanceled()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void cancel()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        android.os.RemoteException r1, $r5;
        boolean $z0;
        com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback $r2;
        android.os.ICancellationSignal $r3, $r4;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $z0 = virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: boolean isRunning()>();

        if $z0 == 0 goto label4;

        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: void canceling()>();

        $r3 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: android.os.ICancellationSignal mCancellation>;

        if $r3 == null goto label5;

     label1:
        $r4 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: android.os.ICancellationSignal mCancellation>;

        interfaceinvoke $r4.<android.os.ICancellationSignal: void cancel()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("RemotePrintDocument", "Error while canceling", r1);

        goto label5;

     label4:
        virtualinvoke r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: void canceled()>();

        $r2 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback mDoneCallback>;

        interfaceinvoke $r2.<com.android.printspooler.model.RemotePrintDocument$CommandDoneCallback: void onDone()>();

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected final void canceling()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 == 0 goto label1;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i1 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Command not pending or running.");

        throw $r1;

     label1:
        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 4;

        return;
    }

    protected final void canceled()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 == 4 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not canceling.");

        throw $r1;

     label1:
        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 3;

        return;
    }

    public final boolean isPending()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void running()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not pending.");

        throw $r1;

     label1:
        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 1;

        return;
    }

    public final boolean isRunning()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void completed()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i1 == 4 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not running.");

        throw $r1;

     label1:
        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 2;

        return;
    }

    public final boolean isCompleted()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void failed(java.lang.CharSequence)
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        java.lang.CharSequence r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not running.");

        throw $r2;

     label1:
        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState> = 5;

        r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: java.lang.CharSequence mError> = r1;

        return;
    }

    public final boolean isFailed()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $i0 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int mState>;

        if $i0 != 5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.CharSequence getError()
    {
        com.android.printspooler.model.RemotePrintDocument$AsyncCommand r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.android.printspooler.model.RemotePrintDocument$AsyncCommand;

        $r1 = r0.<com.android.printspooler.model.RemotePrintDocument$AsyncCommand: java.lang.CharSequence mError>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_FAILED> = 5;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_CANCELING> = 4;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_CANCELED> = 3;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_COMPLETED> = 2;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_RUNNING> = 1;

        <com.android.printspooler.model.RemotePrintDocument$AsyncCommand: int STATE_PENDING> = 0;

        return;
    }
}
