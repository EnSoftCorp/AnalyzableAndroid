final class com.google.common.collect.RegularImmutableTable$SparseImmutableTable extends com.google.common.collect.RegularImmutableTable
{
    private final com.google.common.collect.ImmutableMap rowMap;
    private final com.google.common.collect.ImmutableMap columnMap;

    private static final java.util.Map makeIndexBuilder(com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.ImmutableSet r0;
        java.util.LinkedHashMap r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0;
        com.google.common.collect.ImmutableMap$Builder $r4;

        r0 := @parameter0: com.google.common.collect.ImmutableSet;

        r1 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        r2 = virtualinvoke r0.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

        goto label1;

     label2:
        return r1;
    }

    private static final com.google.common.collect.ImmutableMap buildIndex(java.util.Map)
    {
        java.util.Map r0, $r2;
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable$1 $r1;
        com.google.common.collect.ImmutableMap $r3;

        r0 := @parameter0: java.util.Map;

        $r1 = new com.google.common.collect.RegularImmutableTable$SparseImmutableTable$1;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable$1: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.Map transformValues(java.util.Map,com.google.common.base.Function)>(r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r2);

        return $r3;
    }

    void <init>(com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableSet r1, r2, r3;
        java.util.Map r4, r5;
        java.util.Iterator r6;
        com.google.common.collect.Table$Cell r7;
        java.lang.Object r8, r9, r10, $r12, $r14, $r18;
        boolean $z0;
        com.google.common.collect.ImmutableMap $r11, $r13;
        com.google.common.collect.ImmutableMap$Builder $r16, $r17;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: com.google.common.collect.ImmutableSet;

        r2 := @parameter1: com.google.common.collect.ImmutableSet;

        r3 := @parameter2: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<com.google.common.collect.RegularImmutableTable: void <init>(com.google.common.collect.ImmutableSet,com.google.common.collect.RegularImmutableTable$1)>(r1, null);

        r4 = staticinvoke <com.google.common.collect.RegularImmutableTable$SparseImmutableTable: java.util.Map makeIndexBuilder(com.google.common.collect.ImmutableSet)>(r2);

        r5 = staticinvoke <com.google.common.collect.RegularImmutableTable$SparseImmutableTable: java.util.Map makeIndexBuilder(com.google.common.collect.ImmutableSet)>(r3);

        r6 = virtualinvoke r1.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.common.collect.Table$Cell) $r12;

        r8 = interfaceinvoke r7.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        r9 = interfaceinvoke r7.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        r10 = interfaceinvoke r7.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r16 = (com.google.common.collect.ImmutableMap$Builder) $r14;

        virtualinvoke $r16.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(r9, r10);

        $r18 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r17 = (com.google.common.collect.ImmutableMap$Builder) $r18;

        virtualinvoke $r17.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(r8, r10);

        goto label1;

     label2:
        $r11 = staticinvoke <com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap buildIndex(java.util.Map)>(r4);

        r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap> = $r11;

        $r13 = staticinvoke <com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap buildIndex(java.util.Map)>(r5);

        r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap> = $r13;

        return;
    }

    public com.google.common.collect.ImmutableMap column(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1, $r4, $r7;
        com.google.common.collect.ImmutableMap $r3, $r5, $r6, $r8;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (com.google.common.collect.ImmutableMap) $r4;

        $r6 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        $r7 = staticinvoke <com.google.common.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r8 = (com.google.common.collect.ImmutableMap) $r7;

        return $r8;
    }

    public com.google.common.collect.ImmutableSet columnKeySet()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableSet $r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableMap columnMap()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        return $r1;
    }

    public com.google.common.collect.ImmutableMap row(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1, $r4, $r7;
        com.google.common.collect.ImmutableMap $r3, $r5, $r6, $r8;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (com.google.common.collect.ImmutableMap) $r4;

        $r6 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

        $r7 = staticinvoke <com.google.common.base.Objects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r8 = (com.google.common.collect.ImmutableMap) $r7;

        return $r8;
    }

    public com.google.common.collect.ImmutableSet rowKeySet()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableSet $r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public com.google.common.collect.ImmutableMap rowMap()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        return $r1;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1, r2, $r5;
        java.util.Map r3;
        com.google.common.collect.ImmutableMap $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Map) $r5;

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableMap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableMap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1, r2, $r5, $r6;
        java.util.Map r3;
        com.google.common.collect.ImmutableMap $r4;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap>;

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Map) $r5;

        if r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

     label2:
        return $r6;
    }

    public volatile java.util.Map columnMap()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap columnMap()>();

        return $r1;
    }

    public volatile java.util.Map rowMap()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap rowMap()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableCollection $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public volatile java.util.Set columnKeySet()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableSet columnKeySet()>();

        return $r1;
    }

    public volatile java.util.Set rowKeySet()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableSet rowKeySet()>();

        return $r1;
    }

    public volatile java.util.Set cellSet()
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r1 = specialinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        return $r1;
    }

    public volatile java.util.Map column(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableMap $r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap column(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Map row(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableMap $r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: com.google.common.collect.ImmutableMap row(java.lang.Object)>(r1);

        return $r2;
    }
}
