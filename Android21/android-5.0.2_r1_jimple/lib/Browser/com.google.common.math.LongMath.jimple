public final class com.google.common.math.LongMath extends java.lang.Object
{
    static final long MAX_POWER_OF_SQRT2_UNSIGNED;
    static final long[] POWERS_OF_10;
    static final long[] HALF_POWERS_OF_10;
    static final long FLOOR_SQRT_MAX_LONG;
    static final long[] FACTORIALS;
    static final int[] BIGGEST_BINOMIALS;
    static final int[] BIGGEST_SIMPLE_BINOMIALS;

    public static boolean isPowerOfTwo(long)
    {
        long l0, $l2, $l3;
        byte $b1, $b4;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $l2 = l0 - 1L;

        $l3 = l0 & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z2 & $z1;

        return $z0;
    }

    public static int log2(long, java.math.RoundingMode)
    {
        long l0, l2, $l11;
        java.math.RoundingMode r0;
        int i1, i3, $i5, $i6, $i7, $i8, $i9, $i12, $i13;
        int[] $r1;
        boolean $z0;
        byte $b10;
        java.lang.AssertionError $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", l0);

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i5 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i6 = $r1[$i5];

        tableswitch($i6)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label7;
        };

     label1:
        $z0 = staticinvoke <com.google.common.math.LongMath: boolean isPowerOfTwo(long)>(l0);

        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label2:
        $i7 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $i8 = 63 - $i7;

        return $i8;

     label3:
        $l11 = l0 - 1L;

        $i13 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l11);

        $i12 = 64 - $i13;

        return $i12;

     label4:
        i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        l2 = -5402926248376769404L >>> i1;

        i3 = 63 - i1;

        $b10 = l0 cmp l2;

        if $b10 > 0 goto label5;

        $i9 = i3;

        goto label6;

     label5:
        $i9 = i3 + 1;

     label6:
        return $i9;

     label7:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r2;
    }

    public static int log10(long, java.math.RoundingMode)
    {
        long l0, l2, $l8;
        java.math.RoundingMode r0;
        int i1, $i4, $i5, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        long[] $r1, $r3;
        int[] $r2;
        byte $b6, $b7, $b9;
        java.lang.AssertionError $r4;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", l0);

        $z0 = staticinvoke <com.google.common.math.LongMath: boolean fitsInInt(long)>(l0);

        if $z0 == 0 goto label01;

        $i13 = (int) l0;

        $i12 = staticinvoke <com.google.common.math.IntMath: int log10(int,java.math.RoundingMode)>($i13, r0);

        return $i12;

     label01:
        i1 = staticinvoke <com.google.common.math.LongMath: int log10Floor(long)>(l0);

        $r1 = <com.google.common.math.LongMath: long[] POWERS_OF_10>;

        l2 = $r1[i1];

        $r2 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r2[$i4];

        tableswitch($i5)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            default: goto label12;
        };

     label02:
        $b6 = l0 cmp l2;

        if $b6 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label05:
        return i1;

     label06:
        $b9 = l0 cmp l2;

        if $b9 != 0 goto label07;

        $i11 = i1;

        goto label08;

     label07:
        $i11 = i1 + 1;

     label08:
        return $i11;

     label09:
        $r3 = <com.google.common.math.LongMath: long[] HALF_POWERS_OF_10>;

        $l8 = $r3[i1];

        $b7 = l0 cmp $l8;

        if $b7 > 0 goto label10;

        $i10 = i1;

        goto label11;

     label10:
        $i10 = i1 + 1;

     label11:
        return $i10;

     label12:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;
    }

    static int log10Floor(long)
    {
        long l0, $l5;
        int i1, $i2, $i3, $i4, $i7;
        long[] $r0, $r1, $r2;
        byte $b6;

        l0 := @parameter0: long;

        i1 = 1;

     label1:
        $r0 = <com.google.common.math.LongMath: long[] POWERS_OF_10>;

        $i2 = lengthof $r0;

        if i1 >= $i2 goto label3;

        $r2 = <com.google.common.math.LongMath: long[] POWERS_OF_10>;

        $l5 = $r2[i1];

        $b6 = l0 cmp $l5;

        if $b6 >= 0 goto label2;

        $i7 = i1 - 1;

        return $i7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = <com.google.common.math.LongMath: long[] POWERS_OF_10>;

        $i3 = lengthof $r1;

        $i4 = $i3 - 1;

        return $i4;
    }

    public static long pow(long, int)
    {
        long l0, l2, $l5, $l7, $l10, $l11, $l13, $l14, $l16;
        int i1, $i6, $i9, $i12, $i15;
        byte $b4, $b8;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i1);

        $b4 = -2L cmp l0;

        if $b4 > 0 goto label15;

        $b8 = l0 cmp 2L;

        if $b8 > 0 goto label15;

        $i9 = (int) l0;

        tableswitch($i9)
        {
            case -2: goto label11;
            case -1: goto label05;
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label08;
            default: goto label15;
        };

     label01:
        if i1 != 0 goto label02;

        $l10 = 1L;

        goto label03;

     label02:
        $l10 = 0L;

     label03:
        return $l10;

     label04:
        return 1L;

     label05:
        $i12 = i1 & 1;

        if $i12 != 0 goto label06;

        $l13 = 1L;

        goto label07;

     label06:
        $l13 = -1L;

     label07:
        return $l13;

     label08:
        if i1 >= 64 goto label09;

        $l11 = 1L << i1;

        goto label10;

     label09:
        $l11 = 0L;

     label10:
        return $l11;

     label11:
        if i1 >= 64 goto label14;

        $i15 = i1 & 1;

        if $i15 != 0 goto label12;

        $l16 = 1L << i1;

        goto label13;

     label12:
        $l14 = 1L << i1;

        $l16 = neg $l14;

     label13:
        return $l16;

     label14:
        return 0L;

     label15:
        l2 = 1L;

     label16:
        lookupswitch(i1)
        {
            case 0: goto label17;
            case 1: goto label18;
            default: goto label19;
        };

     label17:
        return l2;

     label18:
        $l5 = l2 * l0;

        return $l5;

     label19:
        $i6 = i1 & 1;

        if $i6 != 0 goto label20;

        $l7 = 1L;

        goto label21;

     label20:
        $l7 = l0;

     label21:
        l2 = l2 * $l7;

        l0 = l0 * l0;

        i1 = i1 >> 1;

        goto label16;
    }

    public static long sqrt(long, java.math.RoundingMode)
    {
        long l0, l1, l2, $l6, $l9, $l11, $l12, $l13, $l16;
        java.math.RoundingMode r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r1;
        int $i4, $i5, $i15, $i17;
        byte $b7, $b8, $b10, $b14;
        java.lang.AssertionError $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("x", l0);

        $z0 = staticinvoke <com.google.common.math.LongMath: boolean fitsInInt(long)>(l0);

        if $z0 == 0 goto label01;

        $i15 = (int) l0;

        $i17 = staticinvoke <com.google.common.math.IntMath: int sqrt(int,java.math.RoundingMode)>($i15, r0);

        $l16 = (long) $i17;

        return $l16;

     label01:
        l1 = staticinvoke <com.google.common.math.LongMath: long sqrtFloor(long)>(l0);

        $r1 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r1[$i4];

        tableswitch($i5)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            default: goto label16;
        };

     label02:
        $l6 = l1 * l1;

        $b7 = $l6 cmp l0;

        if $b7 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label05:
        return l1;

     label06:
        $l12 = l1 * l1;

        $b14 = $l12 cmp l0;

        if $b14 != 0 goto label07;

        $l13 = l1;

        goto label08;

     label07:
        $l13 = l1 + 1L;

     label08:
        return $l13;

     label09:
        $l9 = l1 * l1;

        l2 = $l9 + l1;

        $b8 = l2 cmp l0;

        if $b8 < 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        $b10 = l2 cmp 0L;

        if $b10 >= 0 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        $z2 = $z4 | $z3;

        if $z2 == 0 goto label14;

        $l11 = l1;

        goto label15;

     label14:
        $l11 = l1 + 1L;

     label15:
        return $l11;

     label16:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    private static long sqrtFloor(long)
    {
        long l0, l1, l2, $l3, $l4, $l6, $l7, l9;
        double $d0, $d1;
        byte $b5, $b8;

        l0 := @parameter0: long;

        $d0 = (double) l0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        l1 = (long) $d1;

        $l3 = l0 / l1;

        $l4 = l1 + $l3;

        l2 = $l4 >> 1;

        $b5 = l2 cmp l1;

        if $b5 != 0 goto label1;

        return l1;

     label1:
        l9 = l2;

        $l6 = l0 / l9;

        $l7 = l9 + $l6;

        l2 = $l7 >> 1;

        $b8 = l2 cmp l9;

        if $b8 < 0 goto label1;

        return l9;
    }

    public static long divide(long, long, java.math.RoundingMode)
    {
        long l0, l1, l2, l3, l5, l6, $l8, $l9, $l10, $l14, $l16, $l17, $l19, $l21;
        java.math.RoundingMode r0, $r3, $r4;
        int i4, $i11, $i12, $i13;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b7, $b15, $b18, $b20, $b22;
        int[] $r2;
        java.lang.AssertionError $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        l2 = l0 / l1;

        $l8 = l1 * l2;

        l3 = l0 - $l8;

        $b7 = l3 cmp 0L;

        if $b7 != 0 goto label01;

        return l2;

     label01:
        $l10 = l0 ^ l1;

        $l9 = $l10 >> 63;

        $i11 = (int) $l9;

        i4 = 1 | $i11;

        $r2 = <com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i13 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i12 = $r2[$i13];

        tableswitch($i12)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label10;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label13;
            case 7: goto label13;
            case 8: goto label13;
            default: goto label23;
        };

     label02:
        $b15 = l3 cmp 0L;

        if $b15 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label05:
        z0 = 0;

        goto label24;

     label06:
        z0 = 1;

        goto label24;

     label07:
        if i4 <= 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        z0 = $z5;

        goto label24;

     label10:
        if i4 >= 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        z0 = $z6;

        goto label24;

     label13:
        l5 = staticinvoke <java.lang.Math: long abs(long)>(l3);

        $l17 = staticinvoke <java.lang.Math: long abs(long)>(l1);

        $l19 = $l17 - l5;

        l6 = l5 - $l19;

        $b18 = l6 cmp 0L;

        if $b18 != 0 goto label20;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if r0 != $r3 goto label14;

        $z8 = 1;

        goto label15;

     label14:
        $z8 = 0;

     label15:
        $r4 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if r0 != $r4 goto label16;

        $z7 = 1;

        goto label17;

     label16:
        $z7 = 0;

     label17:
        $l21 = l2 & 1L;

        $b22 = $l21 cmp 0L;

        if $b22 == 0 goto label18;

        $z4 = 1;

        goto label19;

     label18:
        $z4 = 0;

     label19:
        $z3 = $z7 & $z4;

        z0 = $z8 | $z3;

        goto label24;

     label20:
        $b20 = l6 cmp 0L;

        if $b20 <= 0 goto label21;

        $z2 = 1;

        goto label22;

     label21:
        $z2 = 0;

     label22:
        z0 = $z2;

        goto label24;

     label23:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label24:
        if z0 == 0 goto label25;

        $l14 = (long) i4;

        $l16 = l2 + $l14;

        goto label26;

     label25:
        $l16 = l2;

     label26:
        return $l16;
    }

    public static int mod(long, int)
    {
        long l0, $l2, $l3;
        int i1, $i4;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = (long) i1;

        $l3 = staticinvoke <com.google.common.math.LongMath: long mod(long,long)>(l0, $l2);

        $i4 = (int) $l3;

        return $i4;
    }

    public static long mod(long, long)
    {
        long l0, l1, l2, $l5;
        byte $b3, $b4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Modulus ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be > 0");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        l2 = l0 % l1;

        $b4 = l2 cmp 0L;

        if $b4 < 0 goto label2;

        $l5 = l2;

        goto label3;

     label2:
        $l5 = l2 + l1;

     label3:
        return $l5;
    }

    public static long gcd(long, long)
    {
        long l0, l1, l4, $l10, $l14, l15, l16, l17;
        int i2, i3, $i11, $i12;
        byte $b7, $b8, $b9, $b13;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("a", l0);

        staticinvoke <com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("b", l1);

        $b7 = l0 cmp 0L;

        if $b7 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z2 | $z1;

        if $z0 == 0 goto label5;

        $l14 = l0 | l1;

        return $l14;

     label5:
        i2 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l0);

        l15 = l0 >> i2;

        i3 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l1);

        l16 = l1 >> i3;

     label6:
        $b9 = l15 cmp l16;

        if $b9 == 0 goto label8;

        $b13 = l15 cmp l16;

        if $b13 >= 0 goto label7;

        l4 = l16;

        l16 = l15;

        l15 = l4;

     label7:
        l17 = l15 - l16;

        $i12 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l17);

        l15 = l17 >> $i12;

        goto label6;

     label8:
        $i11 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i3);

        $l10 = l15 << $i11;

        return $l10;
    }

    public static long checkedAdd(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 + l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $l5 = l0 ^ l2;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z2 | $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return l2;
    }

    public static long checkedSubtract(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 - l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $l5 = l0 ^ l2;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z2 | $z1;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        return l2;
    }

    public static long checkedMultiply(long, long)
    {
        long l0, l1, l3, $l5, $l9, $l14, $l17;
        int i2, $i4, $i6, $i7, $i8, $i10, $i11;
        byte $b12, $b13, $b15, $b16;
        boolean $z0, $z1, $z2, $z3, $z4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $i4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $l5 = l0 ^ -1L;

        $i6 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l5);

        $i7 = $i4 + $i6;

        $i8 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l1);

        $i10 = $i7 + $i8;

        $l9 = l1 ^ -1L;

        $i11 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l9);

        i2 = $i10 + $i11;

        if i2 <= 65 goto label01;

        $l17 = l0 * l1;

        return $l17;

     label01:
        if i2 < 64 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z4);

        $b12 = l0 cmp 0L;

        if $b12 < 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $b13 = l1 cmp -9223372036854775808L;

        if $b13 == 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        $z0 = $z2 | $z3;

        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        l3 = l0 * l1;

        $b15 = l0 cmp 0L;

        if $b15 == 0 goto label08;

        $l14 = l3 / l0;

        $b16 = $l14 cmp l1;

        if $b16 != 0 goto label09;

     label08:
        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z1);

        return l3;
    }

    public static long checkedPow(long, int)
    {
        long l0, l2, $l6, $l10, $l11, $l12, $l14;
        int i1, $i7, $i9, $i13, $i15;
        byte $b4, $b5, $b8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i1);

        $b4 = l0 cmp -2L;

        if $b4 < 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        $b5 = l0 cmp 2L;

        if $b5 > 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        $z0 = $z5 & $z3;

        if $z0 == 0 goto label20;

        $i9 = (int) l0;

        tableswitch($i9)
        {
            case -2: goto label15;
            case -1: goto label09;
            case 0: goto label05;
            case 1: goto label08;
            case 2: goto label12;
            default: goto label20;
        };

     label05:
        if i1 != 0 goto label06;

        $l10 = 1L;

        goto label07;

     label06:
        $l10 = 0L;

     label07:
        return $l10;

     label08:
        return 1L;

     label09:
        $i13 = i1 & 1;

        if $i13 != 0 goto label10;

        $l12 = 1L;

        goto label11;

     label10:
        $l12 = -1L;

     label11:
        return $l12;

     label12:
        if i1 >= 63 goto label13;

        $z2 = 1;

        goto label14;

     label13:
        $z2 = 0;

     label14:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z2);

        $l11 = 1L << i1;

        return $l11;

     label15:
        if i1 >= 64 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z4);

        $i15 = i1 & 1;

        if $i15 != 0 goto label18;

        $l14 = 1L << i1;

        goto label19;

     label18:
        $l14 = -1L << i1;

     label19:
        return $l14;

     label20:
        l2 = 1L;

     label21:
        lookupswitch(i1)
        {
            case 0: goto label22;
            case 1: goto label23;
            default: goto label24;
        };

     label22:
        return l2;

     label23:
        $l6 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>(l2, l0);

        return $l6;

     label24:
        $i7 = i1 & 1;

        if $i7 == 0 goto label25;

        l2 = staticinvoke <com.google.common.math.LongMath: long checkedMultiply(long,long)>(l2, l0);

     label25:
        i1 = i1 >> 1;

        if i1 <= 0 goto label21;

        $b8 = l0 cmp 3037000499L;

        if $b8 > 0 goto label26;

        $z1 = 1;

        goto label27;

     label26:
        $z1 = 0;

     label27:
        staticinvoke <com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z1);

        l0 = l0 * l0;

        goto label21;
    }

    public static long factorial(int)
    {
        int i0, $i2;
        long[] $r0, $r1;
        long $l3;

        i0 := @parameter0: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        $r0 = <com.google.common.math.LongMath: long[] FACTORIALS>;

        $i2 = lengthof $r0;

        if i0 >= $i2 goto label1;

        $r1 = <com.google.common.math.LongMath: long[] FACTORIALS>;

        $l3 = $r1[i0];

        goto label2;

     label1:
        $l3 = 9223372036854775807L;

     label2:
        return $l3;
    }

    public static long binomial(int, int)
    {
        int i0, i1, i3, i4, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, i21;
        long l2, $l13, $l14, $l18, $l19, l20, l22;
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Integer $r1, $r2;
        int[] $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        staticinvoke <com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", i1);

        if i1 > i0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[1] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "k (%s) > n (%s)", $r0);

        $i7 = i0 >> 1;

        if i1 <= $i7 goto label03;

        i1 = i0 - i1;

     label03:
        $r3 = <com.google.common.math.LongMath: int[] BIGGEST_BINOMIALS>;

        $i8 = lengthof $r3;

        if i1 >= $i8 goto label04;

        $r4 = <com.google.common.math.LongMath: int[] BIGGEST_BINOMIALS>;

        $i9 = $r4[i1];

        if i0 <= $i9 goto label05;

     label04:
        return 9223372036854775807L;

     label05:
        l2 = 1L;

        $r5 = <com.google.common.math.LongMath: int[] BIGGEST_SIMPLE_BINOMIALS>;

        $i10 = lengthof $r5;

        if i1 >= $i10 goto label08;

        $r6 = <com.google.common.math.LongMath: int[] BIGGEST_SIMPLE_BINOMIALS>;

        $i16 = $r6[i1];

        if i0 > $i16 goto label08;

        i3 = 0;

     label06:
        if i3 >= i1 goto label07;

        $i15 = i0 - i3;

        $l18 = (long) $i15;

        l20 = l2 * $l18;

        $i17 = i3 + 1;

        $l19 = (long) $i17;

        l2 = l20 / $l19;

        i3 = i3 + 1;

        goto label06;

     label07:
        goto label10;

     label08:
        i21 = 1;

     label09:
        if i21 > i1 goto label10;

        i4 = staticinvoke <com.google.common.math.IntMath: int gcd(int,int)>(i0, i21);

        $i11 = i21 / i4;

        $l13 = (long) $i11;

        l22 = l2 / $l13;

        $i12 = i0 / i4;

        $l14 = (long) $i12;

        l2 = l22 * $l14;

        i21 = i21 + 1;

        i0 = i0 + -1;

        goto label09;

     label10:
        return l2;
    }

    static boolean fitsInInt(long)
    {
        long l0, $l2;
        int $i1;
        byte $b3;
        boolean $z0;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        $l2 = (long) $i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>()
    {
        com.google.common.math.LongMath r0;

        r0 := @this: com.google.common.math.LongMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        long[] $r0, $r1, $r2;
        int[] $r3, $r4;

        <com.google.common.math.LongMath: long FLOOR_SQRT_MAX_LONG> = 3037000499L;

        <com.google.common.math.LongMath: long MAX_POWER_OF_SQRT2_UNSIGNED> = -5402926248376769404L;

        $r0 = newarray (long)[19];

        $r0[0] = 1L;

        $r0[1] = 10L;

        $r0[2] = 100L;

        $r0[3] = 1000L;

        $r0[4] = 10000L;

        $r0[5] = 100000L;

        $r0[6] = 1000000L;

        $r0[7] = 10000000L;

        $r0[8] = 100000000L;

        $r0[9] = 1000000000L;

        $r0[10] = 10000000000L;

        $r0[11] = 100000000000L;

        $r0[12] = 1000000000000L;

        $r0[13] = 10000000000000L;

        $r0[14] = 100000000000000L;

        $r0[15] = 1000000000000000L;

        $r0[16] = 10000000000000000L;

        $r0[17] = 100000000000000000L;

        $r0[18] = 1000000000000000000L;

        <com.google.common.math.LongMath: long[] POWERS_OF_10> = $r0;

        $r1 = newarray (long)[19];

        $r1[0] = 3L;

        $r1[1] = 31L;

        $r1[2] = 316L;

        $r1[3] = 3162L;

        $r1[4] = 31622L;

        $r1[5] = 316227L;

        $r1[6] = 3162277L;

        $r1[7] = 31622776L;

        $r1[8] = 316227766L;

        $r1[9] = 3162277660L;

        $r1[10] = 31622776601L;

        $r1[11] = 316227766016L;

        $r1[12] = 3162277660168L;

        $r1[13] = 31622776601683L;

        $r1[14] = 316227766016837L;

        $r1[15] = 3162277660168379L;

        $r1[16] = 31622776601683793L;

        $r1[17] = 316227766016837933L;

        $r1[18] = 3162277660168379331L;

        <com.google.common.math.LongMath: long[] HALF_POWERS_OF_10> = $r1;

        $r2 = newarray (long)[21];

        $r2[0] = 1L;

        $r2[1] = 1L;

        $r2[2] = 2L;

        $r2[3] = 6L;

        $r2[4] = 24L;

        $r2[5] = 120L;

        $r2[6] = 720L;

        $r2[7] = 5040L;

        $r2[8] = 40320L;

        $r2[9] = 362880L;

        $r2[10] = 3628800L;

        $r2[11] = 39916800L;

        $r2[12] = 479001600L;

        $r2[13] = 6227020800L;

        $r2[14] = 87178291200L;

        $r2[15] = 1307674368000L;

        $r2[16] = 20922789888000L;

        $r2[17] = 355687428096000L;

        $r2[18] = 6402373705728000L;

        $r2[19] = 121645100408832000L;

        $r2[20] = 2432902008176640000L;

        <com.google.common.math.LongMath: long[] FACTORIALS> = $r2;

        $r3 = newarray (int)[34];

        $r3[0] = 2147483647;

        $r3[1] = 2147483647;

        $r3[2] = 2147483647;

        $r3[3] = 3810779;

        $r3[4] = 121977;

        $r3[5] = 16175;

        $r3[6] = 4337;

        $r3[7] = 1733;

        $r3[8] = 887;

        $r3[9] = 534;

        $r3[10] = 361;

        $r3[11] = 265;

        $r3[12] = 206;

        $r3[13] = 169;

        $r3[14] = 143;

        $r3[15] = 125;

        $r3[16] = 111;

        $r3[17] = 101;

        $r3[18] = 94;

        $r3[19] = 88;

        $r3[20] = 83;

        $r3[21] = 79;

        $r3[22] = 76;

        $r3[23] = 74;

        $r3[24] = 72;

        $r3[25] = 70;

        $r3[26] = 69;

        $r3[27] = 68;

        $r3[28] = 67;

        $r3[29] = 67;

        $r3[30] = 66;

        $r3[31] = 66;

        $r3[32] = 66;

        $r3[33] = 66;

        <com.google.common.math.LongMath: int[] BIGGEST_BINOMIALS> = $r3;

        $r4 = newarray (int)[31];

        $r4[0] = 2147483647;

        $r4[1] = 2147483647;

        $r4[2] = 2147483647;

        $r4[3] = 2642246;

        $r4[4] = 86251;

        $r4[5] = 11724;

        $r4[6] = 3218;

        $r4[7] = 1313;

        $r4[8] = 684;

        $r4[9] = 419;

        $r4[10] = 287;

        $r4[11] = 214;

        $r4[12] = 169;

        $r4[13] = 139;

        $r4[14] = 119;

        $r4[15] = 105;

        $r4[16] = 95;

        $r4[17] = 87;

        $r4[18] = 81;

        $r4[19] = 76;

        $r4[20] = 73;

        $r4[21] = 70;

        $r4[22] = 68;

        $r4[23] = 66;

        $r4[24] = 64;

        $r4[25] = 63;

        $r4[26] = 62;

        $r4[27] = 62;

        $r4[28] = 61;

        $r4[29] = 61;

        $r4[30] = 61;

        <com.google.common.math.LongMath: int[] BIGGEST_SIMPLE_BINOMIALS> = $r4;

        return;
    }
}
