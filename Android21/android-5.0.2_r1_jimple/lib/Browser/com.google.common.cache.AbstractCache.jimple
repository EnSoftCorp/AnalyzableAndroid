public abstract class com.google.common.cache.AbstractCache extends java.lang.Object implements com.google.common.cache.Cache
{

    protected void <init>()
    {
        com.google.common.cache.AbstractCache r0;

        r0 := @this: com.google.common.cache.AbstractCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object get(java.lang.Object, java.util.concurrent.Callable) throws java.util.concurrent.ExecutionException
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Object r1;
        java.util.concurrent.Callable r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.concurrent.Callable;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Iterable r1;
        java.util.LinkedHashMap r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r6;
        boolean $z0, $z1;
        com.google.common.collect.ImmutableMap $r5;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Iterable;

        r2 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

        $r6 = virtualinvoke r0.<com.google.common.cache.AbstractCache: java.lang.Object getIfPresent(java.lang.Object)>(r4);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r6);

     label2:
        goto label1;

     label3:
        $r5 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r2);

        return $r5;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void cleanUp()
    {
        com.google.common.cache.AbstractCache r0;

        r0 := @this: com.google.common.cache.AbstractCache;

        return;
    }

    public long size()
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.cache.AbstractCache;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void invalidate(java.lang.Object)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void invalidateAll(java.lang.Iterable)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.google.common.cache.AbstractCache: void invalidate(java.lang.Object)>(r3);

        goto label1;

     label2:
        return;
    }

    public void invalidateAll()
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.cache.AbstractCache;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.google.common.cache.CacheStats stats()
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.cache.AbstractCache;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.concurrent.ConcurrentMap asMap()
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.common.cache.AbstractCache;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object getUnchecked(java.lang.Object)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ExecutionException r2, $r4;
        com.google.common.util.concurrent.UncheckedExecutionException $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = virtualinvoke r0.<com.google.common.cache.AbstractCache: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new com.google.common.util.concurrent.UncheckedExecutionException;

        $r6 = virtualinvoke r2.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r5.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public java.lang.Object apply(java.lang.Object)
    {
        com.google.common.cache.AbstractCache r0;
        java.lang.Object r1, $r2;

        r0 := @this: com.google.common.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.cache.AbstractCache: java.lang.Object getUnchecked(java.lang.Object)>(r1);

        return $r2;
    }
}
