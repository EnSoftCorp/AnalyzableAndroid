public class com.android.browser.WebViewTimersControl extends java.lang.Object
{
    private static final boolean LOGD_ENABLED;
    private static final java.lang.String LOGTAG;
    private static com.android.browser.WebViewTimersControl sInstance;
    private boolean mBrowserActive;
    private boolean mPrerenderActive;

    public static com.android.browser.WebViewTimersControl getInstance()
    {
        android.os.Looper $r0, $r1;
        com.android.browser.WebViewTimersControl $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 == $r1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WebViewTimersControl.get() called on wrong thread");

        throw $r5;

     label1:
        $r2 = <com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl sInstance>;

        if $r2 != null goto label2;

        $r4 = new com.android.browser.WebViewTimersControl;

        specialinvoke $r4.<com.android.browser.WebViewTimersControl: void <init>()>();

        <com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl sInstance> = $r4;

     label2:
        $r3 = <com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl sInstance>;

        return $r3;
    }

    private void <init>()
    {
        com.android.browser.WebViewTimersControl r0;

        r0 := @this: com.android.browser.WebViewTimersControl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void resumeTimers(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resuming webview timers, view=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", $r5);

        if r1 == null goto label1;

        virtualinvoke r1.<android.webkit.WebView: void resumeTimers()>();

     label1:
        return;
    }

    private void maybePauseTimers(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        $z0 = r0.<com.android.browser.WebViewTimersControl: boolean mBrowserActive>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.browser.WebViewTimersControl: boolean mPrerenderActive>;

        if $z1 != 0 goto label1;

        if r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pausing webview timers, view=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", $r5);

        virtualinvoke r1.<android.webkit.WebView: void pauseTimers()>();

     label1:
        return;
    }

    public void onBrowserActivityResume(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", "onBrowserActivityResume");

        r0.<com.android.browser.WebViewTimersControl: boolean mBrowserActive> = 1;

        specialinvoke r0.<com.android.browser.WebViewTimersControl: void resumeTimers(android.webkit.WebView)>(r1);

        return;
    }

    public void onBrowserActivityPause(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", "onBrowserActivityPause");

        r0.<com.android.browser.WebViewTimersControl: boolean mBrowserActive> = 0;

        specialinvoke r0.<com.android.browser.WebViewTimersControl: void maybePauseTimers(android.webkit.WebView)>(r1);

        return;
    }

    public void onPrerenderStart(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", "onPrerenderStart");

        r0.<com.android.browser.WebViewTimersControl: boolean mPrerenderActive> = 1;

        specialinvoke r0.<com.android.browser.WebViewTimersControl: void resumeTimers(android.webkit.WebView)>(r1);

        return;
    }

    public void onPrerenderDone(android.webkit.WebView)
    {
        com.android.browser.WebViewTimersControl r0;
        android.webkit.WebView r1;

        r0 := @this: com.android.browser.WebViewTimersControl;

        r1 := @parameter0: android.webkit.WebView;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewTimersControl", "onPrerenderDone");

        r0.<com.android.browser.WebViewTimersControl: boolean mPrerenderActive> = 0;

        specialinvoke r0.<com.android.browser.WebViewTimersControl: void maybePauseTimers(android.webkit.WebView)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.browser.WebViewTimersControl: java.lang.String LOGTAG> = "WebViewTimersControl";

        <com.android.browser.WebViewTimersControl: boolean LOGD_ENABLED> = 1;

        return;
    }
}
