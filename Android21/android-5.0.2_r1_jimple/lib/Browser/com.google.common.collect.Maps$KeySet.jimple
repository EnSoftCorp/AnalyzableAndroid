abstract class com.google.common.collect.Maps$KeySet extends java.util.AbstractSet
{

    void <init>()
    {
        com.google.common.collect.Maps$KeySet r0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    abstract java.util.Map map();

    public java.util.Iterator iterator()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3, $r5;
        com.google.common.collect.Maps$KeySet$1 $r4;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = new com.google.common.collect.Maps$KeySet$1;

        specialinvoke $r4.<com.google.common.collect.Maps$KeySet$1: void <init>(com.google.common.collect.Maps$KeySet)>(r0);

        $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function)>($r3, $r4);

        return $r5;
    }

    public int size()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.Maps$KeySet r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.Maps$KeySet r0;
        java.lang.Object r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Collection r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Collection) $r2;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean removeAll(java.util.Collection)>($r3);

        return $z0;
    }

    public void clear()
    {
        com.google.common.collect.Maps$KeySet r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$KeySet;

        $r1 = virtualinvoke r0.<com.google.common.collect.Maps$KeySet: java.util.Map map()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
}
