public class com.android.packageinstaller.InstallFlowAnalytics extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String TAG;
    static final byte RESULT_NOT_YET_AVAILABLE;
    static final byte RESULT_SUCCESS;
    static final byte RESULT_FAILED_UNSUPPORTED_SCHEME;
    static final byte RESULT_FAILED_TO_GET_PACKAGE_INFO;
    static final byte RESULT_FAILED_PACKAGE_MISSING;
    static final byte RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING;
    static final byte RESULT_CANCELLED_BY_USER;
    static final byte RESULT_PACKAGE_MANAGER_INSTALL_FAILED;
    private static final int FLAG_INSTALLS_FROM_UNKNOWN_SOURCES_PERMITTED;
    private static final int FLAG_INSTALL_REQUEST_FROM_UNKNOWN_SOURCE;
    private static final int FLAG_VERIFY_APPS_ENABLED;
    private static final int FLAG_APP_VERIFIER_INSTALLED;
    private static final int FLAG_FILE_URI;
    private static final int FLAG_REPLACE;
    private static final int FLAG_SYSTEM_APP;
    private static final int FLAG_PACKAGE_INFO_OBTAINED;
    private static final int FLAG_INSTALL_BUTTON_CLICKED;
    private static final int FLAG_NEW_PERMISSIONS_FOUND;
    private static final int FLAG_PERMISSIONS_DISPLAYED;
    private static final int FLAG_NEW_PERMISSIONS_DISPLAYED;
    private static final int FLAG_ALL_PERMISSIONS_DISPLAYED;
    private int mFlags;
    private byte mResult;
    private int mPackageManagerInstallResult;
    private long mStartTimestampMillis;
    private long mPackageInfoObtainedTimestampMillis;
    private long mInstallButtonClickTimestampMillis;
    private long mEndTimestampMillis;
    private java.lang.String mPackageUri;
    private boolean mLogged;
    private android.content.Context mContext;
    public static final android.os.Parcelable$Creator CREATOR;

    public void <init>()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult> = -1;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        android.os.Parcel r1;
        int $i0, $i2;
        byte $b1;
        long $l3, $l4, $l5, $l6;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult> = -1;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags> = $i0;

        $b1 = virtualinvoke r1.<android.os.Parcel: byte readByte()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult> = $b1;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: int mPackageManagerInstallResult> = $i2;

        $l3 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis> = $l3;

        $l4 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mPackageInfoObtainedTimestampMillis> = $l4;

        $l5 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mInstallButtonClickTimestampMillis> = $l5;

        $l6 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mEndTimestampMillis> = $l6;

        $r2 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: java.lang.String mPackageUri> = $r2;

        $z0 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: boolean readBoolean(android.os.Parcel)>(r1);

        r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean mLogged> = $z0;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        android.os.Parcel r1;
        int i0, $i1, $i3;
        byte $b2;
        long $l4, $l5, $l6, $l7;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $b2 = r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult>;

        virtualinvoke r1.<android.os.Parcel: void writeByte(byte)>($b2);

        $i3 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mPackageManagerInstallResult>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $l4 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l4);

        $l5 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mPackageInfoObtainedTimestampMillis>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l5);

        $l6 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mInstallButtonClickTimestampMillis>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l6);

        $l7 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mEndTimestampMillis>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l7);

        $r2 = r0.<com.android.packageinstaller.InstallFlowAnalytics: java.lang.String mPackageUri>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        $z0 = r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean mLogged>;

        staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: void writeBoolean(android.os.Parcel,boolean)>(r1, $z0);

        return;
    }

    private static void writeBoolean(android.os.Parcel, boolean)
    {
        android.os.Parcel r0;
        boolean z0, $z1;
        byte $b0;

        r0 := @parameter0: android.os.Parcel;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = (byte) $z1;

        virtualinvoke r0.<android.os.Parcel: void writeByte(byte)>($b0);

        return;
    }

    private static boolean readBoolean(android.os.Parcel)
    {
        android.os.Parcel r0;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: android.os.Parcel;

        $b0 = virtualinvoke r0.<android.os.Parcel: byte readByte()>();

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int describeContents()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        return 0;
    }

    void setContext(android.content.Context)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        android.content.Context r1;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        r1 := @parameter0: android.content.Context;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: android.content.Context mContext> = r1;

        return;
    }

    void setInstallsFromUnknownSourcesPermitted(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(1, z0);

        return;
    }

    private boolean isInstallsFromUnknownSourcesPermitted()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(1);

        return $z0;
    }

    void setInstallRequestFromUnknownSource(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(2, z0);

        return;
    }

    private boolean isInstallRequestFromUnknownSource()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(2);

        return $z0;
    }

    void setVerifyAppsEnabled(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(4, z0);

        return;
    }

    private boolean isVerifyAppsEnabled()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(4);

        return $z0;
    }

    void setAppVerifierInstalled(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(8, z0);

        return;
    }

    private boolean isAppVerifierInstalled()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(8);

        return $z0;
    }

    void setFileUri(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(16, z0);

        return;
    }

    void setPackageUri(java.lang.String)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        java.lang.String r1;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: java.lang.String mPackageUri> = r1;

        return;
    }

    private boolean isFileUri()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(16);

        return $z0;
    }

    void setReplace(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(32, z0);

        return;
    }

    private boolean isReplace()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(32);

        return $z0;
    }

    void setSystemApp(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(64, z0);

        return;
    }

    private boolean isSystemApp()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(64);

        return $z0;
    }

    void setNewPermissionsFound(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(512, z0);

        return;
    }

    private boolean isNewPermissionsFound()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(512);

        return $z0;
    }

    void setPermissionsDisplayed(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(1024, z0);

        return;
    }

    private boolean isPermissionsDisplayed()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(1024);

        return $z0;
    }

    void setNewPermissionsDisplayed(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(2048, z0);

        return;
    }

    private boolean isNewPermissionsDisplayed()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(2048);

        return $z0;
    }

    void setAllPermissionsDisplayed(boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(4096, z0);

        return;
    }

    private boolean isAllPermissionsDisplayed()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(4096);

        return $z0;
    }

    void setStartTimestampMillis(long)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        long l0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        l0 := @parameter0: long;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis> = l0;

        return;
    }

    void setPackageInfoObtained()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        long $l0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(128, 1);

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mPackageInfoObtainedTimestampMillis> = $l0;

        return;
    }

    private boolean isPackageInfoObtained()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(128);

        return $z0;
    }

    void setInstallButtonClicked()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        long $l0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlagState(int,boolean)>(256, 1);

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mInstallButtonClickTimestampMillis> = $l0;

        return;
    }

    private boolean isInstallButtonClicked()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFlagSet(int)>(256);

        return $z0;
    }

    void setFlowFinishedWithPackageManagerResult(int)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        int i0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        i0 := @parameter0: int;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: int mPackageManagerInstallResult> = i0;

        if i0 != 1 goto label1;

        virtualinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlowFinished(byte)>(0);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void setFlowFinished(byte)>(6);

     label2:
        return;
    }

    void setFlowFinished(byte)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        byte b0;
        boolean $z0;
        long $l1;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        b0 := @parameter0: byte;

        $z0 = r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean mLogged>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult> = b0;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.packageinstaller.InstallFlowAnalytics: long mEndTimestampMillis> = $l1;

        specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: void writeToEventLog()>();

        return;
    }

    private void writeToEventLog()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        byte b0, $b5, $b6, $b20;
        int i1, i2, i3, i4, $i8, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i35, $i36, $i37, $i38, $i42, $i46;
        short $s7, $s9;
        long $l14, $l15, $l16, $l21, $l22, $l23, $l25, $l26, $l27, $l28, $l29, $l31, $l32, $l33, $l34, $l39, $l40, $l41, $l43, $l44, $l45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r51, $r52, $r53, $r55, $r56, $r57, $r61;
        java.lang.String $r41, $r48, $r50, $r54, $r60;
        java.util.concurrent.Executor $r58;
        com.android.packageinstaller.InstallFlowAnalytics$2 $r59;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        b0 = 0;

        $b5 = r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult>;

        if $b5 != 6 goto label01;

        $i37 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mPackageManagerInstallResult>;

        $i46 = neg $i37;

        $l45 = (long) $i46;

        b0 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: byte clipUnsignedValueToUnsignedByte(long)>($l45);

     label01:
        $b6 = r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult>;

        $s9 = $b6 & 255;

        $s7 = b0 & 255;

        $i8 = $s7 << 8;

        $i13 = $s9 | $i8;

        $i10 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i11 = $i10 & 65535;

        $i12 = $i11 << 16;

        i1 = $i13 | $i12;

        $l16 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mEndTimestampMillis>;

        $l14 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l15 = $l16 - $l14;

        i2 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: int clipUnsignedLongToUnsignedInt(long)>($l15);

        $z0 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isPackageInfoObtained()>();

        if $z0 == 0 goto label02;

        $l40 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mPackageInfoObtainedTimestampMillis>;

        $l41 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l39 = $l40 - $l41;

        $i38 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: int clipUnsignedLongToUnsignedInt(long)>($l39);

        goto label03;

     label02:
        $i38 = 0;

     label03:
        i3 = $i38;

        $z1 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isInstallButtonClicked()>();

        if $z1 == 0 goto label04;

        $l44 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mInstallButtonClickTimestampMillis>;

        $l34 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l43 = $l44 - $l34;

        $i42 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: int clipUnsignedLongToUnsignedInt(long)>($l43);

        goto label05;

     label04:
        $i42 = 0;

     label05:
        i4 = $i42;

        $i17 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i18 = $i17 & 16;

        if $i18 == 0 goto label06;

        $i36 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i35 = $i36 & 4;

        if $i35 == 0 goto label06;

        $z18 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isUserConsentToVerifyAppsGranted()>();

        if $z18 == 0 goto label06;

        $r58 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r59 = new com.android.packageinstaller.InstallFlowAnalytics$2;

        specialinvoke $r59.<com.android.packageinstaller.InstallFlowAnalytics$2: void <init>(com.android.packageinstaller.InstallFlowAnalytics,int,int,int,int)>(r0, i1, i2, i3, i4);

        interfaceinvoke $r58.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r59);

        goto label07;

     label06:
        staticinvoke <com.android.packageinstaller.EventLogTags: void writeInstallPackageAttempt(int,int,int,int,java.lang.String)>(i1, i2, i3, i4, "");

     label07:
        r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean mLogged> = 1;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("InstallFlowAnalytics", 2);

        if $z2 == 0 goto label12;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Analytics:\n\tinstallsFromUnknownSourcesPermitted: ");

        $z3 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isInstallsFromUnknownSourcesPermitted()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tinstallRequestFromUnknownSource: ");

        $z4 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isInstallRequestFromUnknownSource()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tverifyAppsEnabled: ");

        $z5 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isVerifyAppsEnabled()>();

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tappVerifierInstalled: ");

        $z7 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isAppVerifierInstalled()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tfileUri: ");

        $z6 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isFileUri()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\treplace: ");

        $z8 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isReplace()>();

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tsystemApp: ");

        $z9 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isSystemApp()>();

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tpackageInfoObtained: ");

        $z11 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isPackageInfoObtained()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tinstallButtonClicked: ");

        $z10 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isInstallButtonClicked()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tpermissionsDisplayed: ");

        $z12 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isPermissionsDisplayed()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tnewPermissionsDisplayed: ");

        $z13 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isNewPermissionsDisplayed()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tallPermissionsDisplayed: ");

        $z15 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isAllPermissionsDisplayed()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tnewPermissionsFound: ");

        $z14 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isNewPermissionsFound()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tresult: ");

        $b20 = r0.<com.android.packageinstaller.InstallFlowAnalytics: byte mResult>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b20);

        $r28 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tpackageManagerInstallResult: ");

        $i19 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mPackageManagerInstallResult>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\ttotalDuration: ");

        $l22 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mEndTimestampMillis>;

        $l21 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l23 = $l22 - $l21;

        $r37 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l23);

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\ttimeTillPackageInfoObtained: ");

        $z16 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isPackageInfoObtained()>();

        if $z16 == 0 goto label08;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $l33 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mPackageInfoObtainedTimestampMillis>;

        $l32 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l31 = $l33 - $l32;

        $r53 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l31);

        $r61 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label08:
        $r60 = "n/a";

     label09:
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r40 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\ttimeTillInstallButtonClick: ");

        $z17 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: boolean isInstallButtonClicked()>();

        if $z17 == 0 goto label10;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $l27 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mInstallButtonClickTimestampMillis>;

        $l29 = r0.<com.android.packageinstaller.InstallFlowAnalytics: long mStartTimestampMillis>;

        $l28 = $l27 - $l29;

        $r56 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l28);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r54 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        $r54 = "n/a";

     label11:
        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("InstallFlowAnalytics", $r41);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote to Event Log: 0x");

        $l26 = (long) i1;

        $l25 = $l26 & 4294967295L;

        $r48 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l25, 16);

        $r47 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r44 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r50 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("InstallFlowAnalytics", $r50);

     label12:
        return;
    }

    private static final byte clipUnsignedValueToUnsignedByte(long)
    {
        long l0;
        byte $b1, $b2, $b4;
        int $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return 0;

     label1:
        $b2 = l0 cmp 255L;

        if $b2 <= 0 goto label2;

        return -1;

     label2:
        $i3 = (int) l0;

        $b4 = (byte) $i3;

        return $b4;
    }

    private static final int clipUnsignedLongToUnsignedInt(long)
    {
        long l0;
        byte $b1, $b2;
        int $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return 0;

     label1:
        $b2 = l0 cmp 4294967295L;

        if $b2 <= 0 goto label2;

        return -1;

     label2:
        $i3 = (int) l0;

        return $i3;
    }

    private void setFlagState(int, boolean)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i4 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i5 = $i4 | i0;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags> = $i5;

        goto label2;

     label1:
        $i2 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i1 = i0 ^ -1;

        $i3 = $i2 & $i1;

        r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags> = $i3;

     label2:
        return;
    }

    private boolean isFlagSet(int)
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.packageinstaller.InstallFlowAnalytics: int mFlags>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isUserConsentToVerifyAppsGranted()
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $r1 = r0.<com.android.packageinstaller.InstallFlowAnalytics: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "package_verifier_user_consent", 0);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private byte[] getPackageContentsDigest() throws java.io.IOException
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        java.io.File r1, $r2;
        java.lang.String $r3, $r5;
        android.net.Uri $r4;
        byte[] $r6;

        r0 := @this: com.android.packageinstaller.InstallFlowAnalytics;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.packageinstaller.InstallFlowAnalytics: java.lang.String mPackageUri>;

        $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<android.net.Uri: java.lang.String getPath()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r5);

        r1 = $r2;

        $r6 = staticinvoke <com.android.packageinstaller.InstallFlowAnalytics: byte[] getSha256ContentsDigest(java.io.File)>(r1);

        return $r6;
    }

    private static byte[] getSha256ContentsDigest(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.security.MessageDigest r1;
        java.security.NoSuchAlgorithmException r2, $r8;
        java.io.BufferedInputStream r3, $r5;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r10;
        java.io.FileInputStream $r6;
        byte[] $r7, r11;
        java.lang.RuntimeException $r9;

        r0 := @parameter0: java.io.File;

     label01:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("SHA-256 not available", r2);

        throw $r9;

     label04:
        r11 = newarray (byte)[8192];

        r3 = null;

     label05:
        $r5 = new java.io.BufferedInputStream;

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        $i1 = lengthof r11;

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r6, $i1);

        r3 = $r5;

     label06:
        $i2 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r11);

        i0 = $i2;

        if $i2 == -1 goto label07;

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[],int,int)>(r11, 0, i0);

        goto label06;

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label10;

     label08:
        $r10 := @caughtexception;

        r4 = $r10;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r4;

     label10:
        $r7 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        return $r7;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static byte[] access$000(com.android.packageinstaller.InstallFlowAnalytics) throws java.io.IOException
    {
        com.android.packageinstaller.InstallFlowAnalytics r0;
        byte[] $r1;

        r0 := @parameter0: com.android.packageinstaller.InstallFlowAnalytics;

        $r1 = specialinvoke r0.<com.android.packageinstaller.InstallFlowAnalytics: byte[] getPackageContentsDigest()>();

        return $r1;
    }

    static void <clinit>()
    {
        com.android.packageinstaller.InstallFlowAnalytics$1 $r0;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_ALL_PERMISSIONS_DISPLAYED> = 4096;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_NEW_PERMISSIONS_DISPLAYED> = 2048;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_PERMISSIONS_DISPLAYED> = 1024;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_NEW_PERMISSIONS_FOUND> = 512;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_INSTALL_BUTTON_CLICKED> = 256;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_PACKAGE_INFO_OBTAINED> = 128;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_SYSTEM_APP> = 64;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_REPLACE> = 32;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_FILE_URI> = 16;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_APP_VERIFIER_INSTALLED> = 8;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_VERIFY_APPS_ENABLED> = 4;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_INSTALL_REQUEST_FROM_UNKNOWN_SOURCE> = 2;

        <com.android.packageinstaller.InstallFlowAnalytics: int FLAG_INSTALLS_FROM_UNKNOWN_SOURCES_PERMITTED> = 1;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_PACKAGE_MANAGER_INSTALL_FAILED> = 6;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_CANCELLED_BY_USER> = 5;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING> = 4;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_FAILED_PACKAGE_MISSING> = 3;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_FAILED_TO_GET_PACKAGE_INFO> = 2;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_FAILED_UNSUPPORTED_SCHEME> = 1;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_SUCCESS> = 0;

        <com.android.packageinstaller.InstallFlowAnalytics: byte RESULT_NOT_YET_AVAILABLE> = -1;

        <com.android.packageinstaller.InstallFlowAnalytics: java.lang.String TAG> = "InstallFlowAnalytics";

        $r0 = new com.android.packageinstaller.InstallFlowAnalytics$1;

        specialinvoke $r0.<com.android.packageinstaller.InstallFlowAnalytics$1: void <init>()>();

        <com.android.packageinstaller.InstallFlowAnalytics: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
}
