public class com.android.soundrecorder.Recorder extends java.lang.Object implements android.media.MediaPlayer$OnCompletionListener, android.media.MediaPlayer$OnErrorListener
{
    static final java.lang.String SAMPLE_PREFIX;
    static final java.lang.String SAMPLE_PATH_KEY;
    static final java.lang.String SAMPLE_LENGTH_KEY;
    public static final int IDLE_STATE;
    public static final int RECORDING_STATE;
    public static final int PLAYING_STATE;
    int mState;
    public static final int NO_ERROR;
    public static final int SDCARD_ACCESS_ERROR;
    public static final int INTERNAL_ERROR;
    public static final int IN_CALL_RECORD_ERROR;
    com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener;
    long mSampleStart;
    int mSampleLength;
    java.io.File mSampleFile;
    android.media.MediaRecorder mRecorder;
    android.media.MediaPlayer mPlayer;

    public void <init>()
    {
        com.android.soundrecorder.Recorder r0;

        r0 := @this: com.android.soundrecorder.Recorder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.soundrecorder.Recorder: int mState> = 0;

        r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener> = null;

        r0.<com.android.soundrecorder.Recorder: long mSampleStart> = 0L;

        r0.<com.android.soundrecorder.Recorder: int mSampleLength> = 0;

        r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile> = null;

        r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder> = null;

        r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer> = null;

        return;
    }

    public void saveState(android.os.Bundle)
    {
        com.android.soundrecorder.Recorder r0;
        android.os.Bundle r1;
        java.io.File $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: com.android.soundrecorder.Recorder;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("sample_path", $r3);

        $i0 = r0.<com.android.soundrecorder.Recorder: int mSampleLength>;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("sample_length", $i0);

        return;
    }

    public int getMaxAmplitude()
    {
        com.android.soundrecorder.Recorder r0;
        int $i0, $i1;
        android.media.MediaRecorder $r1;

        r0 := @this: com.android.soundrecorder.Recorder;

        $i0 = r0.<com.android.soundrecorder.Recorder: int mState>;

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        $i1 = virtualinvoke $r1.<android.media.MediaRecorder: int getMaxAmplitude()>();

        return $i1;
    }

    public void restoreState(android.os.Bundle)
    {
        com.android.soundrecorder.Recorder r0;
        android.os.Bundle r1;
        java.lang.String r2, $r7, $r8;
        int i0, $i1;
        java.io.File r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: com.android.soundrecorder.Recorder;

        r1 := @parameter0: android.os.Bundle;

        r2 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("sample_path");

        if r2 != null goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("sample_length", -1);

        if i0 != -1 goto label2;

        return;

     label2:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r2);

        r3 = $r4;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        return;

     label3:
        $r5 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        if $r5 == null goto label4;

        $r6 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r8);

        if $i1 != 0 goto label4;

        return;

     label4:
        virtualinvoke r0.<com.android.soundrecorder.Recorder: void delete()>();

        r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile> = r3;

        r0.<com.android.soundrecorder.Recorder: int mSampleLength> = i0;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void signalStateChanged(int)>(0);

        return;
    }

    public void setOnStateChangedListener(com.android.soundrecorder.Recorder$OnStateChangedListener)
    {
        com.android.soundrecorder.Recorder r0;
        com.android.soundrecorder.Recorder$OnStateChangedListener r1;

        r0 := @this: com.android.soundrecorder.Recorder;

        r1 := @parameter0: com.android.soundrecorder.Recorder$OnStateChangedListener;

        r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener> = r1;

        return;
    }

    public int state()
    {
        com.android.soundrecorder.Recorder r0;
        int $i0;

        r0 := @this: com.android.soundrecorder.Recorder;

        $i0 = r0.<com.android.soundrecorder.Recorder: int mState>;

        return $i0;
    }

    public int progress()
    {
        com.android.soundrecorder.Recorder r0;
        int $i0, $i5, $i6;
        long $l1, $l2, $l3, $l4;

        r0 := @this: com.android.soundrecorder.Recorder;

        $i0 = r0.<com.android.soundrecorder.Recorder: int mState>;

        if $i0 == 1 goto label1;

        $i6 = r0.<com.android.soundrecorder.Recorder: int mState>;

        if $i6 != 2 goto label2;

     label1:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = r0.<com.android.soundrecorder.Recorder: long mSampleStart>;

        $l3 = $l1 - $l2;

        $l4 = $l3 / 1000L;

        $i5 = (int) $l4;

        return $i5;

     label2:
        return 0;
    }

    public int sampleLength()
    {
        com.android.soundrecorder.Recorder r0;
        int $i0;

        r0 := @this: com.android.soundrecorder.Recorder;

        $i0 = r0.<com.android.soundrecorder.Recorder: int mSampleLength>;

        return $i0;
    }

    public java.io.File sampleFile()
    {
        com.android.soundrecorder.Recorder r0;
        java.io.File $r1;

        r0 := @this: com.android.soundrecorder.Recorder;

        $r1 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        return $r1;
    }

    public void delete()
    {
        com.android.soundrecorder.Recorder r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.soundrecorder.Recorder;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        $r1 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

     label1:
        r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile> = null;

        r0.<com.android.soundrecorder.Recorder: int mSampleLength> = 0;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void signalStateChanged(int)>(0);

        return;
    }

    public void clear()
    {
        com.android.soundrecorder.Recorder r0;

        r0 := @this: com.android.soundrecorder.Recorder;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        r0.<com.android.soundrecorder.Recorder: int mSampleLength> = 0;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void signalStateChanged(int)>(0);

        return;
    }

    public void startRecording(int, java.lang.String, android.content.Context)
    {
        com.android.soundrecorder.Recorder r0;
        int i0, $i2, $i3;
        java.lang.String r1, $r12;
        android.content.Context r2;
        java.io.File r3, $r5, $r10, $r15, $r16;
        boolean z0, $z1, $z2;
        android.media.MediaRecorder $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r19, $r20, $r22, $r24;
        long $l1;
        java.lang.Object $r17;
        java.lang.RuntimeException $r18;
        java.io.IOException $r21, $r23;
        android.media.AudioManager r27;

        r0 := @this: com.android.soundrecorder.Recorder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.Context;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        $r5 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        if $r5 != null goto label04;

        r3 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        $z1 = virtualinvoke r3.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label01;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>("/sdcard/sdcard");

        r3 = $r15;

     label01:
        $r16 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("recording", r1, r3);

        r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile> = $r16;

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(1);

        return;

     label04:
        $r6 = new android.media.MediaRecorder;

        specialinvoke $r6.<android.media.MediaRecorder: void <init>()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder> = $r6;

        $r7 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r7.<android.media.MediaRecorder: void setAudioSource(int)>(1);

        $r8 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r8.<android.media.MediaRecorder: void setOutputFormat(int)>(i0);

        $r9 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r9.<android.media.MediaRecorder: void setAudioEncoder(int)>(1);

        $r11 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        $r10 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        $r12 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r11.<android.media.MediaRecorder: void setOutputFile(java.lang.String)>($r12);

     label05:
        $r13 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r13.<android.media.MediaRecorder: void prepare()>();

     label06:
        goto label08;

     label07:
        $r23 := @caughtexception;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(2);

        $r22 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r22.<android.media.MediaRecorder: void reset()>();

        $r24 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r24.<android.media.MediaRecorder: void release()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder> = null;

        return;

     label08:
        $r14 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r14.<android.media.MediaRecorder: void start()>();

     label09:
        goto label16;

     label10:
        $r18 := @caughtexception;

        $r17 = virtualinvoke r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r27 = (android.media.AudioManager) $r17;

        $i2 = virtualinvoke r27.<android.media.AudioManager: int getMode()>();

        if $i2 == 2 goto label11;

        $i3 = virtualinvoke r27.<android.media.AudioManager: int getMode()>();

        if $i3 != 3 goto label12;

     label11:
        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        z0 = $z2;

        if z0 == 0 goto label14;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(3);

        goto label15;

     label14:
        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(2);

     label15:
        $r19 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r19.<android.media.MediaRecorder: void reset()>();

        $r20 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r20.<android.media.MediaRecorder: void release()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder> = null;

        return;

     label16:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.soundrecorder.Recorder: long mSampleStart> = $l1;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setState(int)>(1);

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.RuntimeException from label08 to label09 with label10;
    }

    public void stopRecording()
    {
        com.android.soundrecorder.Recorder r0;
        android.media.MediaRecorder $r1, $r2, $r3;
        long $l0, $l1, $l2, $l3;
        int $i4;

        r0 := @this: com.android.soundrecorder.Recorder;

        $r1 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r2.<android.media.MediaRecorder: void stop()>();

        $r3 = r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder>;

        virtualinvoke $r3.<android.media.MediaRecorder: void release()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaRecorder mRecorder> = null;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<com.android.soundrecorder.Recorder: long mSampleStart>;

        $l2 = $l0 - $l1;

        $l3 = $l2 / 1000L;

        $i4 = (int) $l3;

        r0.<com.android.soundrecorder.Recorder: int mSampleLength> = $i4;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setState(int)>(0);

        return;
    }

    public void startPlayback()
    {
        com.android.soundrecorder.Recorder r0;
        android.media.MediaPlayer $r2, $r4, $r6, $r7, $r8, $r9;
        java.io.File $r3;
        java.lang.String $r5;
        long $l0;
        java.io.IOException $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.soundrecorder.Recorder;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        $r2 = new android.media.MediaPlayer;

        specialinvoke $r2.<android.media.MediaPlayer: void <init>()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer> = $r2;

     label1:
        $r4 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        $r3 = r0.<com.android.soundrecorder.Recorder: java.io.File mSampleFile>;

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r4.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r5);

        $r6 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r6.<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>(r0);

        $r7 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r7.<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>(r0);

        $r8 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r8.<android.media.MediaPlayer: void prepare()>();

        $r9 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r9.<android.media.MediaPlayer: void start()>();

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(2);

        r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer> = null;

        return;

     label4:
        $r10 := @caughtexception;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(1);

        r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer> = null;

        return;

     label5:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.soundrecorder.Recorder: long mSampleStart> = $l0;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setState(int)>(2);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public void stopPlayback()
    {
        com.android.soundrecorder.Recorder r0;
        android.media.MediaPlayer $r1, $r2, $r3;

        r0 := @this: com.android.soundrecorder.Recorder;

        $r1 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r2.<android.media.MediaPlayer: void stop()>();

        $r3 = r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer>;

        virtualinvoke $r3.<android.media.MediaPlayer: void release()>();

        r0.<com.android.soundrecorder.Recorder: android.media.MediaPlayer mPlayer> = null;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setState(int)>(0);

        return;
    }

    public void stop()
    {
        com.android.soundrecorder.Recorder r0;

        r0 := @this: com.android.soundrecorder.Recorder;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stopRecording()>();

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stopPlayback()>();

        return;
    }

    public boolean onError(android.media.MediaPlayer, int, int)
    {
        com.android.soundrecorder.Recorder r0;
        android.media.MediaPlayer r1;
        int i0, i1;

        r0 := @this: com.android.soundrecorder.Recorder;

        r1 := @parameter0: android.media.MediaPlayer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        specialinvoke r0.<com.android.soundrecorder.Recorder: void setError(int)>(1);

        return 1;
    }

    public void onCompletion(android.media.MediaPlayer)
    {
        com.android.soundrecorder.Recorder r0;
        android.media.MediaPlayer r1;

        r0 := @this: com.android.soundrecorder.Recorder;

        r1 := @parameter0: android.media.MediaPlayer;

        virtualinvoke r0.<com.android.soundrecorder.Recorder: void stop()>();

        return;
    }

    private void setState(int)
    {
        com.android.soundrecorder.Recorder r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.soundrecorder.Recorder;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.soundrecorder.Recorder: int mState>;

        if i0 != $i1 goto label1;

        return;

     label1:
        r0.<com.android.soundrecorder.Recorder: int mState> = i0;

        $i2 = r0.<com.android.soundrecorder.Recorder: int mState>;

        specialinvoke r0.<com.android.soundrecorder.Recorder: void signalStateChanged(int)>($i2);

        return;
    }

    private void signalStateChanged(int)
    {
        com.android.soundrecorder.Recorder r0;
        int i0;
        com.android.soundrecorder.Recorder$OnStateChangedListener $r1, $r2;

        r0 := @this: com.android.soundrecorder.Recorder;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener>;

        interfaceinvoke $r2.<com.android.soundrecorder.Recorder$OnStateChangedListener: void onStateChanged(int)>(i0);

     label1:
        return;
    }

    private void setError(int)
    {
        com.android.soundrecorder.Recorder r0;
        int i0;
        com.android.soundrecorder.Recorder$OnStateChangedListener $r1, $r2;

        r0 := @this: com.android.soundrecorder.Recorder;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.soundrecorder.Recorder: com.android.soundrecorder.Recorder$OnStateChangedListener mOnStateChangedListener>;

        interfaceinvoke $r2.<com.android.soundrecorder.Recorder$OnStateChangedListener: void onError(int)>(i0);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.soundrecorder.Recorder: int IN_CALL_RECORD_ERROR> = 3;

        <com.android.soundrecorder.Recorder: int INTERNAL_ERROR> = 2;

        <com.android.soundrecorder.Recorder: int SDCARD_ACCESS_ERROR> = 1;

        <com.android.soundrecorder.Recorder: int NO_ERROR> = 0;

        <com.android.soundrecorder.Recorder: int PLAYING_STATE> = 2;

        <com.android.soundrecorder.Recorder: int RECORDING_STATE> = 1;

        <com.android.soundrecorder.Recorder: int IDLE_STATE> = 0;

        <com.android.soundrecorder.Recorder: java.lang.String SAMPLE_LENGTH_KEY> = "sample_length";

        <com.android.soundrecorder.Recorder: java.lang.String SAMPLE_PATH_KEY> = "sample_path";

        <com.android.soundrecorder.Recorder: java.lang.String SAMPLE_PREFIX> = "recording";

        return;
    }
}
