class com.android.soundrecorder.RemainingTimeCalculator extends java.lang.Object
{
    public static final int UNKNOWN_LIMIT;
    public static final int FILE_SIZE_LIMIT;
    public static final int DISK_SPACE_LIMIT;
    private int mCurrentLowerLimit;
    private java.io.File mSDCardDirectory;
    private java.io.File mRecordingFile;
    private long mMaxBytes;
    private int mBytesPerSecond;
    private long mBlocksChangedTime;
    private long mLastBlocks;
    private long mFileSizeChangedTime;
    private long mLastFileSize;

    public void <init>()
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        java.io.File $r1;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.soundrecorder.RemainingTimeCalculator: int mCurrentLowerLimit> = 0;

        $r1 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mSDCardDirectory> = $r1;

        return;
    }

    public void setFileSizeLimit(java.io.File, long)
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        java.io.File r1;
        long l0;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        r1 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mRecordingFile> = r1;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mMaxBytes> = l0;

        return;
    }

    public void reset()
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: int mCurrentLowerLimit> = 0;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mBlocksChangedTime> = -1L;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mFileSizeChangedTime> = -1L;

        return;
    }

    public long timeRemaining()
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        android.os.StatFs r1, $r2;
        long l0, l1, l2, l3, l4, l5, $l9, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l19, $l21, $l22, $l23, $l24, $l25, $l27, $l29, $l31, l33, l34, l35;
        java.io.File $r3, $r5, $r6, $r7, $r9;
        int $i6, $i7, $i10, $i18;
        java.lang.String $r4, $r8;
        byte $b8, $b20, $b26, $b28, $b30, $b32;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        $r2 = new android.os.StatFs;

        $r3 = r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mSDCardDirectory>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r2.<android.os.StatFs: void <init>(java.lang.String)>($r4);

        r1 = $r2;

        $i6 = virtualinvoke r1.<android.os.StatFs: int getAvailableBlocks()>();

        l0 = (long) $i6;

        $i7 = virtualinvoke r1.<android.os.StatFs: int getBlockSize()>();

        l1 = (long) $i7;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l9 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mBlocksChangedTime>;

        $b8 = $l9 cmp -1L;

        if $b8 == 0 goto label1;

        $l31 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mLastBlocks>;

        $b30 = l0 cmp $l31;

        if $b30 == 0 goto label2;

     label1:
        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mBlocksChangedTime> = l2;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mLastBlocks> = l0;

     label2:
        $l11 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mLastBlocks>;

        $l12 = $l11 * l1;

        $i10 = r0.<com.android.soundrecorder.RemainingTimeCalculator: int mBytesPerSecond>;

        $l13 = (long) $i10;

        l3 = $l12 / $l13;

        $l15 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mBlocksChangedTime>;

        $l14 = l2 - $l15;

        $l16 = $l14 / 1000L;

        l33 = l3 - $l16;

        $r5 = r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mRecordingFile>;

        if $r5 != null goto label3;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: int mCurrentLowerLimit> = 2;

        return l33;

     label3:
        $r7 = new java.io.File;

        $r6 = r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mRecordingFile>;

        $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mRecordingFile> = $r7;

        $r9 = r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mRecordingFile>;

        l4 = virtualinvoke $r9.<java.io.File: long length()>();

        $l17 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mFileSizeChangedTime>;

        $b20 = $l17 cmp -1L;

        if $b20 == 0 goto label4;

        $l27 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mLastFileSize>;

        $b32 = l4 cmp $l27;

        if $b32 == 0 goto label5;

     label4:
        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mFileSizeChangedTime> = l2;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: long mLastFileSize> = l4;

     label5:
        $l21 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mMaxBytes>;

        $l24 = $l21 - l4;

        $i18 = r0.<com.android.soundrecorder.RemainingTimeCalculator: int mBytesPerSecond>;

        $l19 = (long) $i18;

        l5 = $l24 / $l19;

        $l25 = r0.<com.android.soundrecorder.RemainingTimeCalculator: long mFileSizeChangedTime>;

        $l22 = l2 - $l25;

        $l23 = $l22 / 1000L;

        l34 = l5 - $l23;

        l35 = l34 - 1L;

        $b28 = l33 cmp l35;

        if $b28 >= 0 goto label6;

        $b26 = 2;

        goto label7;

     label6:
        $b26 = 1;

     label7:
        r0.<com.android.soundrecorder.RemainingTimeCalculator: int mCurrentLowerLimit> = $b26;

        $l29 = staticinvoke <java.lang.Math: long min(long,long)>(l33, l35);

        return $l29;
    }

    public int currentLowerLimit()
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        int $i0;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        $i0 = r0.<com.android.soundrecorder.RemainingTimeCalculator: int mCurrentLowerLimit>;

        return $i0;
    }

    public boolean diskSpaceAvailable()
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        android.os.StatFs r1, $r2;
        java.io.File $r3;
        java.lang.String $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        $r2 = new android.os.StatFs;

        $r3 = r0.<com.android.soundrecorder.RemainingTimeCalculator: java.io.File mSDCardDirectory>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r2.<android.os.StatFs: void <init>(java.lang.String)>($r4);

        r1 = $r2;

        $i0 = virtualinvoke r1.<android.os.StatFs: int getAvailableBlocks()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setBitRate(int)
    {
        com.android.soundrecorder.RemainingTimeCalculator r0;
        int i0, $i1;

        r0 := @this: com.android.soundrecorder.RemainingTimeCalculator;

        i0 := @parameter0: int;

        $i1 = i0 / 8;

        r0.<com.android.soundrecorder.RemainingTimeCalculator: int mBytesPerSecond> = $i1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.soundrecorder.RemainingTimeCalculator: int DISK_SPACE_LIMIT> = 2;

        <com.android.soundrecorder.RemainingTimeCalculator: int FILE_SIZE_LIMIT> = 1;

        <com.android.soundrecorder.RemainingTimeCalculator: int UNKNOWN_LIMIT> = 0;

        return;
    }
}
