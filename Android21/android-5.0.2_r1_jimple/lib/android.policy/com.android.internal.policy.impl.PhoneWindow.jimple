public class com.android.internal.policy.impl.PhoneWindow extends android.view.Window implements com.android.internal.view.menu.MenuBuilder$Callback
{
    private static final java.lang.String TAG;
    private static final boolean SWEEP_OPEN_MENU;
    private static final int DEFAULT_BACKGROUND_FADE_DURATION_MS;
    private static final int CUSTOM_TITLE_COMPATIBLE_FEATURES;
    private static final android.transition.Transition USE_DEFAULT_TRANSITION;
    final com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback mContextMenuCallback;
    final android.util.TypedValue mMinWidthMajor;
    final android.util.TypedValue mMinWidthMinor;
    android.util.TypedValue mFixedWidthMajor;
    android.util.TypedValue mFixedWidthMinor;
    android.util.TypedValue mFixedHeightMajor;
    android.util.TypedValue mFixedHeightMinor;
    android.util.TypedValue mOutsetBottom;
    private com.android.internal.policy.impl.PhoneWindow$DecorView mDecor;
    private android.view.ViewGroup mContentParent;
    private android.view.ViewGroup mContentRoot;
    android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback;
    android.view.InputQueue$Callback mTakeInputQueueCallback;
    private boolean mIsFloating;
    private android.view.LayoutInflater mLayoutInflater;
    private android.widget.TextView mTitleView;
    private com.android.internal.widget.DecorContentParent mDecorContentParent;
    private com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback;
    private com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback;
    private android.transition.TransitionManager mTransitionManager;
    private android.transition.Scene mContentScene;
    static final int FLAG_RESOURCE_SET_ICON;
    static final int FLAG_RESOURCE_SET_LOGO;
    static final int FLAG_RESOURCE_SET_ICON_FALLBACK;
    int mResourcesSetFlags;
    int mIconRes;
    int mLogoRes;
    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel;
    private int mPanelChordingKey;
    private android.widget.ImageView mLeftIconView;
    private android.widget.ImageView mRightIconView;
    private android.widget.ProgressBar mCircularProgressBar;
    private android.widget.ProgressBar mHorizontalProgressBar;
    private int mBackgroundResource;
    private int mBackgroundFallbackResource;
    private android.graphics.drawable.Drawable mBackgroundDrawable;
    private float mElevation;
    private boolean mClipToOutline;
    private int mFrameResource;
    private int mTextColor;
    private int mStatusBarColor;
    private int mNavigationBarColor;
    private boolean mForcedStatusBarColor;
    private boolean mForcedNavigationBarColor;
    private java.lang.CharSequence mTitle;
    private int mTitleColor;
    private boolean mAlwaysReadCloseOnTouchAttr;
    private com.android.internal.view.menu.ContextMenuBuilder mContextMenu;
    private com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper;
    private boolean mClosingActionMenu;
    private int mVolumeControlStreamType;
    private android.media.session.MediaController mMediaController;
    private android.media.AudioManager mAudioManager;
    private android.app.KeyguardManager mKeyguardManager;
    private int mUiOptions;
    private boolean mInvalidatePanelMenuPosted;
    private int mInvalidatePanelMenuFeatures;
    private final java.lang.Runnable mInvalidatePanelMenuRunnable;
    private android.transition.Transition mEnterTransition;
    private android.transition.Transition mReturnTransition;
    private android.transition.Transition mExitTransition;
    private android.transition.Transition mReenterTransition;
    private android.transition.Transition mSharedElementEnterTransition;
    private android.transition.Transition mSharedElementReturnTransition;
    private android.transition.Transition mSharedElementExitTransition;
    private android.transition.Transition mSharedElementReenterTransition;
    private java.lang.Boolean mAllowReturnTransitionOverlap;
    private java.lang.Boolean mAllowEnterTransitionOverlap;
    private long mBackgroundFadeDurationMillis;
    private java.lang.Boolean mSharedElementsUseOverlay;
    private android.graphics.Rect mTempRect;
    static final com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher;
    private static final java.lang.String FOCUSED_ID_TAG;
    private static final java.lang.String VIEWS_TAG;
    private static final java.lang.String PANELS_TAG;
    private static final java.lang.String ACTION_BAR_TAG;

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.Context r1;
        com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback $r2;
        android.util.TypedValue $r3, $r4;
        com.android.internal.policy.impl.PhoneWindow$1 $r5;
        android.transition.Transition $r6, $r7, $r8, $r9;
        android.view.LayoutInflater $r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.Window: void <init>(android.content.Context)>(r1);

        $r2 = new com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,int)>(r0, 6);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback mContextMenuCallback> = $r2;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMajor> = $r3;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMinor> = $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mStatusBarColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mNavigationBarColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedStatusBarColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedNavigationBarColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = -2147483648;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = 0;

        $r5 = new com.android.internal.policy.impl.PhoneWindow$1;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$1: void <init>(com.android.internal.policy.impl.PhoneWindow)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable> = $r5;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mEnterTransition> = null;

        $r6 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition> = $r6;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mExitTransition> = null;

        $r7 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition> = $r7;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = null;

        $r8 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = $r8;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = null;

        $r9 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = $r9;

        r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis> = -1L;

        $r10 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>(r1);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater> = $r10;

        return;
    }

    public final void setContainer(android.view.Window)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Window r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Window;

        specialinvoke r0.<android.view.Window: void setContainer(android.view.Window)>(r1);

        return;
    }

    public boolean requestFeature(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.ViewGroup $r1;
        boolean $z0, $z1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        android.util.AndroidRuntimeException $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 == null goto label1;

        $r7 = new android.util.AndroidRuntimeException;

        specialinvoke $r7.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("requestFeature() must be called before adding content");

        throw $r7;

     label1:
        i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i3 = 1 << i0;

        i2 = i1 | $i3;

        $i4 = i2 & 128;

        if $i4 == 0 goto label2;

        $i9 = i2 & -13506;

        if $i9 == 0 goto label2;

        $r8 = new android.util.AndroidRuntimeException;

        specialinvoke $r8.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        throw $r8;

     label2:
        $i5 = i1 & 2;

        if $i5 == 0 goto label3;

        if i0 != 8 goto label3;

        return 0;

     label3:
        $i6 = i1 & 256;

        if $i6 == 0 goto label4;

        if i0 != 1 goto label4;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

     label4:
        $i7 = i1 & 256;

        if $i7 == 0 goto label5;

        if i0 != 11 goto label5;

        $r6 = new android.util.AndroidRuntimeException;

        specialinvoke $r6.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine swipe dismissal and the action bar.");

        throw $r6;

     label5:
        $i8 = i1 & 2048;

        if $i8 == 0 goto label6;

        if i0 != 8 goto label6;

        $r4 = new android.util.AndroidRuntimeException;

        specialinvoke $r4.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine swipe dismissal and the action bar.");

        throw $r4;

     label6:
        if i0 != 5 goto label7;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        if $z1 == 0 goto label7;

        $r5 = new android.util.AndroidRuntimeException;

        specialinvoke $r5.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot use indeterminate progress on a watch.");

        throw $r5;

     label7:
        $z0 = specialinvoke r0.<android.view.Window: boolean requestFeature(int)>(i0);

        return $z0;
    }

    public void setUiOptions(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = i0;

        return;
    }

    public void setUiOptions(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions>;

        $i2 = i1 ^ -1;

        $i5 = $i3 & $i2;

        $i4 = i0 & i1;

        $i6 = $i5 | $i4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions> = $i6;

        return;
    }

    public android.transition.TransitionManager getTransitionManager()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.TransitionManager $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        return $r1;
    }

    public void setTransitionManager(android.transition.TransitionManager)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.TransitionManager r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.TransitionManager;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager> = r1;

        return;
    }

    public android.transition.Scene getContentScene()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Scene $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Scene mContentScene>;

        return $r1;
    }

    public void setContentView(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.transition.Scene r1;
        android.view.ViewGroup $r2, $r3, $r6, $r8;
        boolean $z0, $z1, $z2;
        android.view.LayoutInflater $r4;
        android.content.Context $r7;
        android.view.Window$Callback r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 != 0 goto label2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r8.<android.view.ViewGroup: void removeAllViews()>();

     label2:
        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(12);

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        r1 = staticinvoke <android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>($r6, i0, $r7);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void transitionTo(android.transition.Scene)>(r1);

        goto label4;

     label3:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, $r3);

     label4:
        r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r9 == null goto label5;

        $z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z2 != 0 goto label5;

        interfaceinvoke r9.<android.view.Window$Callback: void onContentChanged()>();

     label5:
        return;
    }

    public void setContentView(android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        $r2 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, $r2);

        return;
    }

    public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.transition.Scene r3, $r6;
        android.view.ViewGroup $r4, $r5, $r7, $r8;
        boolean $z0, $z1, $z2;
        android.view.Window$Callback r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 != 0 goto label2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r8.<android.view.ViewGroup: void removeAllViews()>();

     label2:
        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(12);

        if $z1 == 0 goto label3;

        virtualinvoke r1.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        $r6 = new android.transition.Scene;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        specialinvoke $r6.<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>($r7, r1);

        r3 = $r6;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void transitionTo(android.transition.Scene)>(r3);

        goto label4;

     label3:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

     label4:
        r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r9 == null goto label5;

        $z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z2 != 0 goto label5;

        interfaceinvoke r9.<android.view.Window$Callback: void onContentChanged()>();

     label5:
        return;
    }

    public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.view.Window$Callback r3;
        android.view.ViewGroup $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("PhoneWindow", "addContentView does not support content transitions");

     label2:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label3;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label3;

        interfaceinvoke r3.<android.view.Window$Callback: void onContentChanged()>();

     label3:
        return;
    }

    private void transitionTo(android.transition.Scene)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Scene r1, $r2;
        android.transition.TransitionManager $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Scene;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Scene mContentScene>;

        if $r2 != null goto label1;

        virtualinvoke r1.<android.transition.Scene: void enter()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        virtualinvoke $r3.<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>(r1);

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Scene mContentScene> = r1;

        return;
    }

    public android.view.View getCurrentFocus()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.View findFocus()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void takeSurface(android.view.SurfaceHolder$Callback2)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.SurfaceHolder$Callback2 r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.SurfaceHolder$Callback2;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback> = r1;

        return;
    }

    public void takeInputQueue(android.view.InputQueue$Callback)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.InputQueue$Callback r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.InputQueue$Callback;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.InputQueue$Callback mTakeInputQueueCallback> = r1;

        return;
    }

    public boolean isFloating()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        return $z0;
    }

    public android.view.LayoutInflater getLayoutInflater()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.LayoutInflater $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        return $r1;
    }

    public void setTitle(java.lang.CharSequence)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.CharSequence r1;
        android.widget.TextView $r2, $r5;
        com.android.internal.widget.DecorContentParent $r3, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r5.<android.widget.TextView: void setText(java.lang.CharSequence)>(r1);

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r4.<com.android.internal.widget.DecorContentParent: void setWindowTitle(java.lang.CharSequence)>(r1);

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = r1;

        return;
    }

    public void setTitleColor(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.widget.TextView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r2.<android.widget.TextView: void setTextColor(int)>(i0);

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = i0;

        return;
    }

    public final boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, $r5, $r35, $r37;
        android.view.KeyEvent r2;
        android.view.Window$Callback r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.view.KeyCharacterMap r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View $r6, $r17, $r36;
        com.android.internal.view.menu.MenuBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r18, $r19, $r20, $r23, $r27, $r30;
        com.android.internal.widget.DecorContentParent $r10, $r11, $r21, $r25, $r28, $r31, $r33, $r34;
        com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback $r12, $r24, $r26, $r29, $r32;
        android.os.Bundle $r16, $r22;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter1: android.view.KeyEvent;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z1 == 0 goto label01;

        return 0;

     label01:
        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z2 == 0 goto label02;

        return 1;

     label02:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r5 == null goto label03;

        $r35 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r35 == r1 goto label03;

        $r37 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r37, 0);

     label03:
        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label04;

        $i6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r36 = interfaceinvoke r3.<android.view.Window$Callback: android.view.View onCreatePanelView(int)>($i6);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = $r36;

     label04:
        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i0 == 0 goto label05;

        $i5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i5 != 8 goto label06;

     label05:
        $z9 = 1;

        goto label07;

     label06:
        $z9 = 0;

     label07:
        z0 = $z9;

        if z0 == 0 goto label08;

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r34 == null goto label08;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r33.<com.android.internal.widget.DecorContentParent: void setMenuPrepared()>();

     label08:
        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r6 != null goto label25;

        $r7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r7 == null goto label09;

        $z8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z8 == 0 goto label17;

     label09:
        $r8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r8 != null goto label11;

        $z7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z7 == 0 goto label10;

        $r30 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r30 != null goto label11;

     label10:
        return 0;

     label11:
        if z0 == 0 goto label13;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r28 == null goto label13;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        if $r29 != null goto label12;

        $r32 = new com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback;

        specialinvoke $r32.<com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,com.android.internal.policy.impl.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback> = $r32;

     label12:
        $r31 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r27 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke $r31.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>($r27, $r26);

     label13:
        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r9.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        if r3 == null goto label14;

        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z3 = interfaceinvoke r3.<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>($i1, $r13);

        if $z3 != 0 goto label16;

     label14:
        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>(null);

        if z0 == 0 goto label15;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r10 == null goto label15;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke $r11.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, $r12);

     label15:
        return 0;

     label16:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 0;

     label17:
        $r14 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r14.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r16 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        if $r16 == null goto label18;

        $r23 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r22 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        virtualinvoke $r23.<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>($r22);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = null;

     label18:
        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r17 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r15 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z4 = interfaceinvoke r3.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i2, $r17, $r15);

        if $z4 != 0 goto label20;

        if z0 == 0 goto label19;

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r21 == null goto label19;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke $r25.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, $r24);

     label19:
        $r20 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r20.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

        return 0;

     label20:
        if r2 == null goto label21;

        $i4 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        goto label22;

     label21:
        $i4 = -1;

     label22:
        r4 = staticinvoke <android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>($i4);

        $i3 = virtualinvoke r4.<android.view.KeyCharacterMap: int getKeyboardType()>();

        if $i3 == 1 goto label23;

        $z6 = 1;

        goto label24;

     label23:
        $z6 = 0;

     label24:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode> = $z6;

        $r19 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode>;

        virtualinvoke $r19.<com.android.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>($z5);

        $r18 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r18.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

     label25:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = r1;

        return 1;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.res.Configuration r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        android.os.Bundle r3, $r6;
        com.android.internal.widget.DecorContentParent $r4;
        com.android.internal.view.menu.MenuBuilder $r5;
        boolean $z0;
        com.android.internal.view.menu.IconMenuPresenter $r7, $r9, $r12, $r14;
        com.android.internal.view.menu.ListMenuPresenter $r8, $r10, $r11, $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.content.res.Configuration;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r4 != null goto label6;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r2 == null goto label6;

        $r5 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r5 == null goto label6;

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label5;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r3 = $r6;

        $r7 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r7 == null goto label1;

        $r14 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r14.<com.android.internal.view.menu.IconMenuPresenter: void saveHierarchyState(android.os.Bundle)>(r3);

     label1:
        $r8 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r8 == null goto label2;

        $r13 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r13.<com.android.internal.view.menu.ListMenuPresenter: void saveHierarchyState(android.os.Bundle)>(r3);

     label2:
        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r2);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(0);

        $r9 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r9 == null goto label3;

        $r12 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r12.<com.android.internal.view.menu.IconMenuPresenter: void restoreHierarchyState(android.os.Bundle)>(r3);

     label3:
        $r10 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r10 == null goto label4;

        $r11 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r11.<com.android.internal.view.menu.ListMenuPresenter: void restoreHierarchyState(android.os.Bundle)>(r3);

     label4:
        goto label6;

     label5:
        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r2);

     label6:
        return;
    }

    private static void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void clearMenuPresenters()>();

        return;
    }

    public final void openPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        com.android.internal.widget.DecorContentParent $r3, $r4, $r7;
        boolean $z0, $z1;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        if i0 != 0 goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z0 = interfaceinvoke $r4.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $z1 = virtualinvoke $r6.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

        goto label2;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, r1);

     label2:
        return;
    }

    private void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.KeyEvent r2;
        android.content.Context r3, $r11;
        android.content.res.Configuration r4;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.view.ViewParent r5;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r6, $r7, $r9, $r13, $r17, $r20, $r23, $r24, $r26;
        android.view.View $r8, $r12, $r14, $r15, $r19, $r21, $r27, $r28;
        android.graphics.drawable.Drawable $r10;
        android.view.WindowManager$LayoutParams $r16, r36;
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r18;
        android.view.ViewGroup $r22;
        android.view.ViewGroup$LayoutParams $r25, r34, r35;
        com.android.internal.view.menu.MenuBuilder $r29;
        android.content.pm.ApplicationInfo $r30;
        android.content.res.Resources $r31;
        android.view.Window$Callback r32;
        android.view.WindowManager r33;
        byte b15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter1: android.view.KeyEvent;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z3 == 0 goto label02;

     label01:
        return;

     label02:
        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 != 0 goto label07;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r31 = virtualinvoke r3.<android.content.Context: android.content.res.Resources getResources()>();

        r4 = virtualinvoke $r31.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i13 = r4.<android.content.res.Configuration: int screenLayout>;

        $i14 = $i13 & 15;

        if $i14 != 4 goto label03;

        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        z0 = $z17;

        $r30 = virtualinvoke r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i12 = $r30.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i12 < 11 goto label05;

        $z16 = 1;

        goto label06;

     label05:
        $z16 = 0;

     label06:
        z1 = $z16;

        if z0 == 0 goto label07;

        if z1 == 0 goto label07;

        return;

     label07:
        r32 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r32 == null goto label08;

        $i11 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r29 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z15 = interfaceinvoke r32.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>($i11, $r29);

        if $z15 != 0 goto label08;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

        return;

     label08:
        r33 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r33 != null goto label09;

        return;

     label09:
        $z4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r2);

        if $z4 != 0 goto label10;

        return;

     label10:
        b15 = -2;

        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r6 == null goto label11;

        $z13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z13 == 0 goto label22;

     label11:
        $r7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r7 != null goto label13;

        $z14 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z14 == 0 goto label12;

        $r26 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r26 != null goto label14;

     label12:
        return;

     label13:
        $z5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z5 == 0 goto label14;

        $r24 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i9 = virtualinvoke $r24.<com.android.internal.policy.impl.PhoneWindow$DecorView: int getChildCount()>();

        if $i9 <= 0 goto label14;

        $r23 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        virtualinvoke $r23.<com.android.internal.policy.impl.PhoneWindow$DecorView: void removeAllViews()>();

     label14:
        $z7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(r1);

        if $z7 == 0 goto label15;

        $z6 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean hasPanelItems()>();

        if $z6 != 0 goto label16;

     label15:
        return;

     label16:
        $r8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r34 = virtualinvoke $r8.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r34 != null goto label17;

        $r25 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r25.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

        r34 = $r25;

     label17:
        $i2 = r34.<android.view.ViewGroup$LayoutParams: int width>;

        if $i2 != -1 goto label18;

        i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int fullBackground>;

        b15 = -1;

        goto label19;

     label18:
        i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int background>;

     label19:
        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r11 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r10 = virtualinvoke $r11.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        virtualinvoke $r9.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r10);

        $r12 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r5 = virtualinvoke $r12.<android.view.View: android.view.ViewParent getParent()>();

        if r5 == null goto label20;

        $z11 = r5 instanceof android.view.ViewGroup;

        if $z11 == 0 goto label20;

        $r22 = (android.view.ViewGroup) r5;

        $r21 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r22.<android.view.ViewGroup: void removeView(android.view.View)>($r21);

     label20:
        $r13 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r14 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r13.<com.android.internal.policy.impl.PhoneWindow$DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r14, r34);

        $r15 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $z8 = virtualinvoke $r15.<android.view.View: boolean hasFocus()>();

        if $z8 != 0 goto label21;

        $r19 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r19.<android.view.View: boolean requestFocus()>();

     label21:
        goto label24;

     label22:
        $z12 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z12 != 0 goto label23;

        b15 = -1;

        goto label24;

     label23:
        $r28 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r28 == null goto label24;

        $r27 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r35 = virtualinvoke $r27.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r35 == null goto label24;

        $i10 = r35.<android.view.ViewGroup$LayoutParams: int width>;

        if $i10 != -1 goto label24;

        b15 = -1;

     label24:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        $r16 = new android.view.WindowManager$LayoutParams;

        $i7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int x>;

        $i4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int y>;

        $r17 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i3 = $r17.<com.android.internal.policy.impl.PhoneWindow$DecorView: int mDefaultOpacity>;

        specialinvoke $r16.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>(b15, -2, $i7, $i4, 1003, 8519680, $i3);

        r36 = $r16;

        $z9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z9 == 0 goto label25;

        $i8 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getOptionsPanelGravity()>();

        r36.<android.view.WindowManager$LayoutParams: int gravity> = $i8;

        $r18 = <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r18.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void addWindow(com.android.internal.policy.impl.PhoneWindow)>(r0);

        goto label26;

     label25:
        $i5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity>;

        r36.<android.view.WindowManager$LayoutParams: int gravity> = $i5;

     label26:
        $i6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations>;

        r36.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i6;

        $r20 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        interfaceinvoke r33.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r20, r36);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 1;

        return;
    }

    public final void closePanel(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        com.android.internal.widget.DecorContentParent $r2, $r3, $r6;
        boolean $z0, $z1;
        android.content.Context $r4;
        android.view.ViewConfiguration $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z0 = interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $z1 = virtualinvoke $r5.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r6.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        goto label3;

     label1:
        if i0 != 6 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        goto label3;

     label2:
        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

     label3:
        return;
    }

    public final void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.WindowManager r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r5;
        int $i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r6;
        com.android.internal.widget.DecorContentParent $r7, $r8;
        com.android.internal.view.menu.MenuBuilder $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 != 0 goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r7 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z4 = interfaceinvoke $r8.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z4 == 0 goto label1;

        $r9 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void checkCloseActionMenu(android.view.Menu)>($r9);

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r2 == null goto label3;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z2 == 0 goto label3;

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r4 == null goto label2;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        interfaceinvoke r2.<android.view.ViewManager: void removeView(android.view.View)>($r5);

        $z3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z3 == 0 goto label2;

        $r6 = <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void removeWindow(com.android.internal.policy.impl.PhoneWindow)>(r0);

     label2:
        if z0 == 0 goto label3;

        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>($i0, r1, null);

     label3:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = null;

        $z1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z1 == 0 goto label4;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = 0;

     label4:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r3 != r1 goto label5;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = null;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

     label5:
        return;
    }

    void checkCloseActionMenu(android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Menu r1;
        android.view.Window$Callback r2;
        boolean $z0, $z1;
        com.android.internal.widget.DecorContentParent $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu> = 1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: void dismissPopups()>();

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label2;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label2;

        interfaceinvoke r2.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, r1);

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClosingActionMenu> = 0;

        return;
    }

    public final void togglePanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

     label2:
        return;
    }

    public void invalidatePanelMenu(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r3;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i1 = 1 << i0;

        $i3 = $i2 | $i1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures> = $i3;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$DecorView: void postOnAnimation(java.lang.Runnable)>($r2);

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted> = 1;

     label1:
        return;
    }

    void doPendingInvalidatePanelMenu()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean $z0;
        java.lang.Runnable $r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean removeCallbacks(java.lang.Runnable)>($r1);

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    void doInvalidatePanelMenu(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, r9;
        com.android.internal.view.menu.MenuBuilder $r2, $r5, $r6, $r7;
        com.android.internal.widget.DecorContentParent $r3;
        android.os.Bundle $r4, r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $r2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r2 == null goto label2;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r8 = $r4;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>(r8);

        $i1 = virtualinvoke r8.<android.os.Bundle: int size()>();

        if $i1 <= 0 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = r8;

     label1:
        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r6.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r7 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void clear()>();

     label2:
        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 1;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        if i0 == 8 goto label3;

        if i0 != 0 goto label4;

     label3:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r3 == null goto label4;

        r9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r9 == null goto label4;

        r9.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r9, null);

     label4:
        return;
    }

    public final boolean onKeyDownPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = i1;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        return $z1;

     label1:
        return 0;
    }

    public final void onKeyUpPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        android.view.KeyEvent r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r14;
        android.content.Context $r4, $r9;
        java.lang.Object $r5;
        com.android.internal.widget.DecorContentParent $r6, $r7, $r10, $r11, $r12;
        android.view.ViewConfiguration $r8;
        android.view.ActionMode $r13;
        android.media.AudioManager r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        if $i1 == 0 goto label10;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

        $z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z2 != 0 goto label01;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label02;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r13 = staticinvoke <com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ActionMode access$300(com.android.internal.policy.impl.PhoneWindow$DecorView)>($r14);

        if $r13 == null goto label02;

     label01:
        return;

     label02:
        z0 = 0;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        if i0 != 0 goto label04;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r6 == null goto label04;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z7 = interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z7 == 0 goto label04;

        $r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r8 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r9);

        $z8 = virtualinvoke $r8.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z8 != 0 goto label04;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z9 = interfaceinvoke $r10.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z9 != 0 goto label03;

        $z10 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z10 != 0 goto label08;

        $z11 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        if $z11 == 0 goto label08;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        z0 = interfaceinvoke $r12.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

        goto label08;

     label03:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        z0 = interfaceinvoke $r11.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        goto label08;

     label04:
        $z3 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z3 != 0 goto label05;

        $z4 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled>;

        if $z4 == 0 goto label06;

     label05:
        z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

        goto label08;

     label06:
        $z5 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z5 == 0 goto label08;

        z1 = 1;

        $z6 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z6 == 0 goto label07;

        r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

     label07:
        if z1 == 0 goto label08;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50001, 0);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        z0 = 1;

     label08:
        if z0 == 0 goto label10;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r15 = (android.media.AudioManager) $r5;

        if r15 == null goto label09;

        virtualinvoke r15.<android.media.AudioManager: void playSoundEffect(int)>(0);

        goto label10;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Couldn\'t get audio manager");

     label10:
        return;
    }

    public final void closeAllPanels()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.WindowManager r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r1 != null goto label1;

        return;

     label1:
        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 == null goto label2;

        $i2 = lengthof r2;

        goto label3;

     label2:
        $i2 = 0;

     label3:
        i0 = $i2;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        if r3 == null goto label5;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r3, 1);

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        return;
    }

    private synchronized void closeContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r2.<com.android.internal.view.menu.ContextMenuBuilder: void close()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

     label1:
        return;
    }

    private synchronized void dismissContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuDialogHelper $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = null;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        virtualinvoke $r2.<com.android.internal.view.menu.MenuDialogHelper: void dismiss()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = null;

     label1:
        return;
    }

    public boolean performPanelShortcut(int, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        i2 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r2, i1, r1, i2);

        return $z0;
    }

    private boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        int i0, i1, $i2;
        android.view.KeyEvent r2;
        boolean z0, $z1, $z2, $z3;
        com.android.internal.view.menu.MenuBuilder $r3, $r5;
        com.android.internal.widget.DecorContentParent $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.KeyEvent;

        i1 := @parameter3: int;

        $z1 = virtualinvoke r2.<android.view.KeyEvent: boolean isSystem()>();

        if $z1 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        z0 = 0;

        $z2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r2);

        if $z3 == 0 goto label4;

     label3:
        $r3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label4;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z0 = virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>(i0, r2, i1);

     label4:
        if z0 == 0 goto label5;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 1;

        $i2 = i1 & 1;

        if $i2 != 0 goto label5;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r4 != null goto label5;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

     label5:
        return z0;
    }

    public boolean performPanelIdentifierAction(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        boolean z0, $z1;
        android.view.KeyEvent $r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r4;
        com.android.internal.widget.DecorContentParent $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $r2 = new android.view.KeyEvent;

        specialinvoke $r2.<android.view.KeyEvent: void <init>(int,int)>(0, 82);

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, $r2);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 != null goto label2;

        return 0;

     label2:
        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z0 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>(i1, i2);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r5 != null goto label3;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

     label3:
        return z0;
    }

    public com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.Menu r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r3;
        com.android.internal.view.menu.MenuBuilder $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 == null goto label1;

        $i2 = lengthof r2;

        goto label2;

     label1:
        $i2 = 0;

     label2:
        i0 = $i2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        if r3 == null goto label4;

        $r4 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 != r1 goto label4;

        return r3;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }

    public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuBuilder r1, $r5;
        android.view.MenuItem r2;
        android.view.Window$Callback r3;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r4;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        r2 := @parameter1: android.view.MenuItem;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r1.<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>();

        r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>($r5);

        if r4 == null goto label1;

        $i0 = r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $z1 = interfaceinvoke r3.<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, r2);

        return $z1;

     label1:
        return 0;
    }

    public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuBuilder r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return;
    }

    private void reopenMenu(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z14, $z15, z16;
        android.view.Window$Callback r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2, r19, r20;
        com.android.internal.widget.DecorContentParent $r3, $r4, $r7, $r12, $r15, $r18;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;
        com.android.internal.view.menu.MenuBuilder $r8, $r9, $r11, $r17;
        android.view.View $r10;
        int $i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r13;
        java.lang.Runnable $r14, $r16;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r3 == null goto label07;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z3 = interfaceinvoke $r4.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z3 == 0 goto label07;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $z4 = virtualinvoke $r6.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z4 == 0 goto label01;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z15 = interfaceinvoke $r18.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowPending()>();

        if $z15 == 0 goto label07;

     label01:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z5 = interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z5 == 0 goto label02;

        if z0 != 0 goto label05;

     label02:
        if r1 == null goto label06;

        $z7 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z7 != 0 goto label06;

        $z6 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z6 == 0 goto label03;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i0 = $i1 & 1;

        if $i0 == 0 goto label03;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r13.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean removeCallbacks(java.lang.Runnable)>($r14);

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        interfaceinvoke $r16.<java.lang.Runnable: void run()>();

     label03:
        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r8 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r8 == null goto label04;

        $z8 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z8 != 0 goto label04;

        $r10 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r9 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z9 = interfaceinvoke r1.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>(0, $r10, $r9);

        if $z9 == 0 goto label04;

        $r11 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r1.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>(8, $r11);

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r12.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

     label04:
        goto label06;

     label05:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r15.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        if r1 == null goto label06;

        $z14 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z14 != 0 goto label06;

        r19 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r17 = r19.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r1.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, $r17);

     label06:
        return;

     label07:
        r20 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        if z0 == 0 goto label09;

        $z1 = r20.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z1 != 0 goto label08;

        $z2 = 1;

        goto label10;

     label08:
        $z2 = 0;

        goto label10;

     label09:
        $z2 = r20.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

     label10:
        z16 = $z2;

        r20.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>(r20, 0);

        r20.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = z16;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r20, null);

        return;
    }

    protected boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.content.Context r2;
        android.util.TypedValue r3, $r8;
        android.content.res.Resources$Theme r4, r5, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.DecorContentParent $r6;
        com.android.internal.view.menu.MenuBuilder $r7, r13;
        android.view.ContextThemeWrapper $r10;
        android.content.res.Resources $r11, $r12;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i0 == 0 goto label1;

        $i5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        if $i5 != 8 goto label6;

     label1:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r6 == null goto label6;

        $r8 = new android.util.TypedValue;

        specialinvoke $r8.<android.util.TypedValue: void <init>()>();

        r3 = $r8;

        r4 = virtualinvoke r2.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843825, r3, 1);

        r5 = null;

        $i1 = r3.<android.util.TypedValue: int resourceId>;

        if $i1 == 0 goto label2;

        $r12 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        virtualinvoke r5.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r4);

        $i4 = r3.<android.util.TypedValue: int resourceId>;

        virtualinvoke r5.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i4, 1);

        virtualinvoke r5.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843671, r3, 1);

        goto label3;

     label2:
        virtualinvoke r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843671, r3, 1);

     label3:
        $i2 = r3.<android.util.TypedValue: int resourceId>;

        if $i2 == 0 goto label5;

        if r5 != null goto label4;

        $r11 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r11.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        virtualinvoke r5.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r4);

     label4:
        $i3 = r3.<android.util.TypedValue: int resourceId>;

        virtualinvoke r5.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i3, 1);

     label5:
        if r5 == null goto label6;

        $r10 = new android.view.ContextThemeWrapper;

        specialinvoke $r10.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>(r2, 0);

        r2 = $r10;

        $r9 = virtualinvoke r2.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r9.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r5);

     label6:
        $r7 = new com.android.internal.view.menu.MenuBuilder;

        specialinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>(r2);

        r13 = $r7;

        virtualinvoke r13.<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>(r0);

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>(r13);

        return 1;
    }

    protected boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.content.res.TypedArray r2;
        float f0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r8;
        android.content.Context $r4, $r5, $r6;
        int $i0, $i1;
        int[] $r7;
        byte $b2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r3 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i0 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>(r0, $r4, $i0);

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView> = $r3;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity> = 81;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setStyle(android.content.Context)>($r5);

        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r7 = <com.android.internal.R$styleable: int[] Window>;

        $i1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int listPresenterTheme>;

        r2 = virtualinvoke $r6.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r7, 0, $i1);

        f0 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(40, 0.0F);

        $b2 = f0 cmpl 0.0F;

        if $b2 == 0 goto label1;

        $r8 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        virtualinvoke $r8.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setElevation(float)>(f0);

     label1:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return 1;
    }

    private int getOptionsPanelGravity()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.RemoteException r1, $r3;
        android.view.IWindowManager $r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

     label1:
        $r2 = <com.android.internal.policy.impl.PhoneWindow$WindowManagerHolder: android.view.IWindowManager sWindowManager>;

        $i0 = interfaceinvoke $r2.<android.view.IWindowManager: int getPreferredOptionsPanelGravity()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PhoneWindow", "Couldn\'t getOptionsPanelGravity; using default", r1);

        return 81;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void onOptionsPanelRotationChanged()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.WindowManager$LayoutParams r2, $r8;
        android.view.WindowManager r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r5, $r6;
        int $i0;
        android.view.ViewGroup$LayoutParams $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r1 != null goto label1;

        return;

     label1:
        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r4 == null goto label2;

        $r6 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r7 = virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r8 = (android.view.WindowManager$LayoutParams) $r7;

        goto label3;

     label2:
        $r8 = null;

     label3:
        r2 = $r8;

        if r2 == null goto label4;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getOptionsPanelGravity()>();

        r2.<android.view.WindowManager$LayoutParams: int gravity> = $i0;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r3 == null goto label4;

        $r5 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        interfaceinvoke r3.<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>($r5, r2);

     label4:
        return;
    }

    protected boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        com.android.internal.view.menu.MenuView r2, $r8;
        int i0;
        android.view.View $r3, $r9, $r10, $r14;
        com.android.internal.view.menu.MenuBuilder $r4;
        com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback $r5, $r7, $r12, $r13;
        boolean $z0;
        android.content.Context $r6, $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r3 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r3 == null goto label1;

        $r14 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r14;

        return 1;

     label1:
        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        if $r5 != null goto label3;

        $r13 = new com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback;

        specialinvoke $r13.<com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,com.android.internal.policy.impl.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback> = $r13;

     label3:
        $z0 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        $r8 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getListMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r11, $r12);

        goto label5;

     label4:
        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        $r8 = virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getIconMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r6, $r7);

     label5:
        r2 = $r8;

        $r9 = (android.view.View) r2;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r9;

        $r10 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        if $r10 == null goto label7;

        i0 = interfaceinvoke r2.<com.android.internal.view.menu.MenuView: int getWindowAnimations()>();

        if i0 == 0 goto label6;

        r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations> = i0;

     label6:
        return 1;

     label7:
        return 0;
    }

    public boolean performContextMenuIdentifierAction(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        com.android.internal.view.menu.ContextMenuBuilder $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        $z0 = virtualinvoke $r2.<com.android.internal.view.menu.ContextMenuBuilder: boolean performIdentifierAction(int,int)>(i0, i1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.graphics.drawable.Drawable r1, $r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if r1 != $r2 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i2 == 0 goto label5;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = r1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label2;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r1);

     label2:
        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource>;

        if $i0 == 0 goto label5;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if r1 == null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource>;

     label4:
        virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setBackgroundFallback(int)>($i1);

     label5:
        return;
    }

    public final void setFeatureDrawableResource(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;
        android.content.Context $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == 0 goto label2;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = i1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r3;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        goto label3;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

     label3:
        return;
    }

    public final void setFeatureDrawableUri(int, android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.net.Uri r1, $r3, $r5;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;
        android.graphics.drawable.Drawable $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.Uri;

        if r1 == null goto label3;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        if $r3 == null goto label1;

        $r5 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        $z0 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = r1;

        $r4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable loadImageURI(android.net.Uri)>(r1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

     label4:
        return;
    }

    public final void setFeatureDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public void setFeatureDrawableAlpha(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha> = i1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        return;
    }

    protected final void setFeatureDefaultDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public final void setFeatureInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    protected final void updateDrawable(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 0);

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, z0);

     label1:
        return;
    }

    protected void onDrawableChanged(int, android.graphics.drawable.Drawable, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        android.graphics.drawable.Drawable r1;
        android.widget.ImageView r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        i1 := @parameter2: int;

        if i0 != 3 goto label1;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getLeftIconView()>();

        goto label3;

     label1:
        if i0 != 4 goto label2;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getRightIconView()>();

        goto label3;

     label2:
        return;

     label3:
        if r1 == null goto label4;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i1);

        virtualinvoke r2.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r1);

        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(0);

        goto label5;

     label4:
        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(8);

     label5:
        return;
    }

    protected void onIntChanged(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;
        android.widget.FrameLayout r1;
        android.view.View $r2;
        android.view.LayoutInflater $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 2 goto label1;

        if i0 != 5 goto label2;

     label1:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateProgressBars(int)>(i1);

        goto label3;

     label2:
        if i0 != 7 goto label3;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908341);

        r1 = (android.widget.FrameLayout) $r2;

        if r1 == null goto label3;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i1, r1);

     label3:
        return;
    }

    private void updateProgressBars(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, $i5, $i7, $i10, $i11, $i14, $i15;
        android.widget.ProgressBar r1, r2;
        byte b3, $b18;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(1);

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getHorizontalProgressBar(boolean)>(1);

        i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        if i0 != -1 goto label07;

        $i15 = i1 & 4;

        if $i15 == 0 goto label05;

        if r2 == null goto label04;

        i2 = virtualinvoke r2.<android.widget.ProgressBar: int getProgress()>();

        $z0 = virtualinvoke r2.<android.widget.ProgressBar: boolean isIndeterminate()>();

        if $z0 != 0 goto label01;

        if i2 >= 10000 goto label02;

     label01:
        $b18 = 0;

        goto label03;

     label02:
        $b18 = 4;

     label03:
        b3 = $b18;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(b3);

        goto label05;

     label04:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label05:
        $i14 = i1 & 32;

        if $i14 == 0 goto label22;

        if r1 == null goto label06;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

        goto label22;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Circular progress bar not located in current window decor");

        goto label22;

     label07:
        if i0 != -2 goto label11;

        $i11 = i1 & 4;

        if $i11 == 0 goto label09;

        if r2 == null goto label08;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(8);

        goto label09;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label09:
        $i10 = i1 & 32;

        if $i10 == 0 goto label22;

        if r1 == null goto label10;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(8);

        goto label22;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Circular progress bar not located in current window decor");

        goto label22;

     label11:
        if i0 != -3 goto label13;

        if r2 == null goto label12;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

        goto label22;

     label12:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

        goto label22;

     label13:
        if i0 != -4 goto label15;

        if r2 == null goto label14;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(0);

        goto label22;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

        goto label22;

     label15:
        if 0 > i0 goto label19;

        if i0 > 10000 goto label19;

        if r2 == null goto label16;

        $i7 = i0 - 0;

        virtualinvoke r2.<android.widget.ProgressBar: void setProgress(int)>($i7);

        goto label17;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label17:
        if i0 >= 10000 goto label18;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        goto label22;

     label18:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void hideProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        goto label22;

     label19:
        if 20000 > i0 goto label22;

        if i0 > 30000 goto label22;

        if r2 == null goto label20;

        $i5 = i0 - 20000;

        virtualinvoke r2.<android.widget.ProgressBar: void setSecondaryProgress(int)>($i5);

        goto label21;

     label20:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label21:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

     label22:
        return;
    }

    private void showProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        if r2 == null goto label1;

        $i4 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i4 != 4 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        if r1 == null goto label2;

        $i3 = virtualinvoke r1.<android.widget.ProgressBar: int getProgress()>();

        if $i3 >= 10000 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label2:
        return;
    }

    private void hideProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        android.view.animation.Animation r3;
        android.content.Context $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        r3 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r4, 17432577);

        virtualinvoke r3.<android.view.animation.Animation: void setDuration(long)>(1000L);

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        if r2 == null goto label1;

        $i4 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i4 != 0 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        if r1 == null goto label2;

        $i3 = virtualinvoke r1.<android.widget.ProgressBar: int getVisibility()>();

        if $i3 != 0 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label2:
        return;
    }

    public void setIcon(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4;
        com.android.internal.widget.DecorContentParent $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes> = i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 | 1;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i2;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i4 = $i3 & -5;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i4;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: void setIcon(int)>(i0);

     label1:
        return;
    }

    public void setDefaultIcon(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.internal.widget.DecorContentParent $r1, $r2, $r3, $r7;
        boolean $z0;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        android.graphics.drawable.Drawable $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r1 == null goto label4;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z0 = interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z0 == 0 goto label2;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i7 = $i8 & 4;

        if $i7 == 0 goto label4;

     label2:
        if i0 == 0 goto label3;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: void setIcon(int)>(i0);

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i6 = $i5 & -5;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i6;

        goto label4;

     label3:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: void setIcon(android.graphics.drawable.Drawable)>($r6);

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i4 = $i3 | 4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i4;

     label4:
        return;
    }

    public void setLogo(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.DecorContentParent $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes> = i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 | 2;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i2;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: void setLogo(int)>(i0);

     label1:
        return;
    }

    public void setDefaultLogo(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.DecorContentParent $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z0 = interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: boolean hasLogo()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: void setLogo(int)>(i0);

     label2:
        return;
    }

    public void setLocalFocus(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0, z1;
        android.view.ViewRootImpl $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r1.<android.view.ViewRootImpl: void windowFocusChanged(boolean,boolean)>(z0, z1);

        return;
    }

    public void injectInputEvent(android.view.InputEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.InputEvent r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.InputEvent;

        $r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent)>(r1);

        return;
    }

    private android.view.ViewRootImpl getViewRootImpl()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.ViewRootImpl r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2, $r4;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        r1 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("view not added");

        throw $r3;
    }

    public void takeKeyEvents(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setFocusable(boolean)>(z0);

        return;
    }

    public boolean superDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchGenericMotionEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    protected boolean onKeyDown(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i3, $i4, $i5, $i7;
        android.view.KeyEvent r1;
        android.view.KeyEvent$DispatcherState r2, $r12;
        byte b2, $b6;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3, $r11;
        android.media.AudioManager $r4;
        android.media.session.MediaController $r5, $r6, $r7, $r10;
        boolean $z1;
        android.content.Context $r8;
        android.media.session.MediaSessionLegacyHelper $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label01;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r12 = virtualinvoke $r11.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        goto label02;

     label01:
        $r12 = null;

     label02:
        r2 = $r12;

        lookupswitch(i1)
        {
            case 4: goto label14;
            case 24: goto label03;
            case 25: goto label03;
            case 79: goto label09;
            case 82: goto label11;
            case 85: goto label09;
            case 86: goto label09;
            case 87: goto label09;
            case 88: goto label09;
            case 89: goto label09;
            case 90: goto label09;
            case 91: goto label09;
            case 126: goto label09;
            case 127: goto label09;
            case 130: goto label09;
            case 164: goto label08;
            default: goto label18;
        };

     label03:
        if i1 != 24 goto label04;

        $b6 = 1;

        goto label05;

     label04:
        $b6 = -1;

     label05:
        b2 = $b6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r7 == null goto label06;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        virtualinvoke $r10.<android.media.session.MediaController: void adjustVolume(int,int)>(b2, 1);

        goto label07;

     label06:
        $r8 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r9 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r8);

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r9.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>($i5, b2, 17);

     label07:
        return 1;

     label08:
        $r4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager getAudioManager()>();

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r4.<android.media.AudioManager: void handleKeyDown(android.view.KeyEvent,int)>(r1, $i3);

        return 1;

     label09:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r5 == null goto label10;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        $z1 = virtualinvoke $r6.<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label10;

        return 1;

     label10:
        return 0;

     label11:
        if i0 >= 0 goto label12;

        $i4 = 0;

        goto label13;

     label12:
        $i4 = i0;

     label13:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean onKeyDownPanel(int,android.view.KeyEvent)>($i4, r1);

        return 1;

     label14:
        $i7 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i7 <= 0 goto label15;

        goto label18;

     label15:
        if i0 >= 0 goto label16;

        goto label18;

     label16:
        if r2 == null goto label17;

        virtualinvoke r2.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r1, r0);

     label17:
        return 1;

     label18:
        return 0;
    }

    private android.app.KeyguardManager getKeyguardManager()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.app.KeyguardManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        $r5 = (android.app.KeyguardManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        return $r2;
    }

    android.media.AudioManager getAudioManager()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.media.AudioManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager mAudioManager>;

        return $r2;
    }

    protected boolean onKeyUp(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4;
        android.view.KeyEvent r1;
        android.view.KeyEvent$DispatcherState r2, $r14;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r3;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r4, $r13;
        android.media.AudioManager $r5;
        android.app.KeyguardManager $r6;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        android.media.session.MediaController $r7, $r8, $r10, $r12;
        android.content.Context $r9;
        android.media.session.MediaSessionLegacyHelper $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r4 == null goto label01;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r14 = virtualinvoke $r13.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        goto label02;

     label01:
        $r14 = null;

     label02:
        r2 = $r14;

        if r2 == null goto label03;

        virtualinvoke r2.<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>(r1);

     label03:
        lookupswitch(i1)
        {
            case 4: goto label13;
            case 24: goto label04;
            case 25: goto label04;
            case 79: goto label08;
            case 82: goto label10;
            case 84: goto label16;
            case 85: goto label08;
            case 86: goto label08;
            case 87: goto label08;
            case 88: goto label08;
            case 89: goto label08;
            case 90: goto label08;
            case 91: goto label08;
            case 126: goto label08;
            case 127: goto label08;
            case 130: goto label08;
            case 164: goto label07;
            default: goto label19;
        };

     label04:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r10 == null goto label05;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        virtualinvoke $r12.<android.media.session.MediaController: void adjustVolume(int,int)>(0, 20);

        goto label06;

     label05:
        $r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r11 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r9);

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r11.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>($i4, 0, 20);

     label06:
        return 1;

     label07:
        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.media.AudioManager getAudioManager()>();

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r5.<android.media.AudioManager: void handleKeyUp(android.view.KeyEvent,int)>(r1, $i2);

        return 1;

     label08:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r7 == null goto label09;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        $z4 = virtualinvoke $r8.<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>(r1);

        if $z4 == 0 goto label09;

        return 1;

     label09:
        return 0;

     label10:
        if i0 >= 0 goto label11;

        $i3 = 0;

        goto label12;

     label11:
        $i3 = i0;

     label12:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)>($i3, r1);

        return 1;

     label13:
        if i0 >= 0 goto label14;

        goto label19;

     label14:
        $z5 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z5 == 0 goto label19;

        $z6 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z6 != 0 goto label19;

        if i0 != 0 goto label15;

        r3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r3 == null goto label15;

        $z7 = r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z7 == 0 goto label15;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return 1;

     label15:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(int)>(i0);

        return 1;

     label16:
        $r6 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r6.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 == 0 goto label17;

        goto label19;

     label17:
        $z1 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z1 == 0 goto label18;

        $z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z2 != 0 goto label18;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean launchDefaultSearch()>();

     label18:
        return 1;

     label19:
        return 0;
    }

    protected void onActive()
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        return;
    }

    public final android.view.View getDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        return $r2;
    }

    public final android.view.View peekDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        return $r1;
    }

    public android.os.Bundle saveHierarchyState()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.Bundle r1, $r6;
        android.util.SparseArray r2, r4, r5, $r8, $r11, $r13;
        android.view.View r3;
        android.view.ViewGroup $r7, $r9, $r10;
        int $i0, $i1, $i2;
        com.android.internal.widget.DecorContentParent $r12, $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r7 != null goto label1;

        return r1;

     label1:
        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r2 = $r8;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r9.<android.view.ViewGroup: void saveHierarchyState(android.util.SparseArray)>(r2);

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:views", r2);

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        r3 = virtualinvoke $r10.<android.view.ViewGroup: android.view.View findFocus()>();

        if r3 == null goto label2;

        $i1 = virtualinvoke r3.<android.view.View: int getId()>();

        if $i1 == -1 goto label2;

        $i2 = virtualinvoke r3.<android.view.View: int getId()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android:focusedViewId", $i2);

     label2:
        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r4 = $r11;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void savePanelState(android.util.SparseArray)>(r4);

        $i0 = virtualinvoke r4.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label3;

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:Panels", r4);

     label3:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r12 == null goto label4;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r5 = $r13;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r14.<com.android.internal.widget.DecorContentParent: void saveToolbarHierarchyState(android.util.SparseArray)>(r5);

        virtualinvoke r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:ActionBar", r5);

     label4:
        return r1;
    }

    public void restoreHierarchyState(android.os.Bundle)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.os.Bundle r1;
        android.util.SparseArray r2, r4, r15;
        int i0;
        android.view.View r3;
        android.view.ViewGroup $r5, $r8, $r14;
        com.android.internal.widget.DecorContentParent $r6, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;
        java.lang.String $r12;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.os.Bundle;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r5 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:views");

        if r2 == null goto label2;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r14.<android.view.ViewGroup: void restoreHierarchyState(android.util.SparseArray)>(r2);

     label2:
        i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:focusedViewId", -1);

        if i0 == -1 goto label4;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        r3 = virtualinvoke $r8.<android.view.ViewGroup: android.view.View findViewById(int)>(i0);

        if r3 == null goto label3;

        virtualinvoke r3.<android.view.View: boolean requestFocus()>();

        goto label4;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previously focused view reported id ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during save, but can\'t be found during restore.");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r12);

     label4:
        r15 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:Panels");

        if r15 == null goto label5;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void restorePanelState(android.util.SparseArray)>(r15);

     label5:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r6 == null goto label7;

        r4 = virtualinvoke r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:ActionBar");

        if r4 == null goto label6;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void doPendingInvalidatePanelMenu()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: void restoreToolbarHierarchyState(android.util.SparseArray)>(r4);

        goto label7;

     label6:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Missing saved instance states for action bar views! State will not be restored.");

     label7:
        return;
    }

    private void savePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.util.SparseArray r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r3, $r4;
        android.os.Parcelable $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 != null goto label1;

        return;

     label1:
        $i1 = lengthof r2;

        i0 = $i1 - 1;

     label2:
        if i0 < 0 goto label4;

        $r3 = r2[i0];

        if $r3 == null goto label3;

        $r4 = r2[i0];

        $r5 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Parcelable onSaveInstanceState()>();

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

     label3:
        i0 = i0 + -1;

        goto label2;

     label4:
        return;
    }

    private void restorePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.util.SparseArray r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        int i0, i1, $i2;
        java.lang.Object $r3;
        android.os.Parcelable $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        $i2 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        i1 = $i2 - 1;

     label1:
        if i1 < 0 goto label4;

        i0 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i1);

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r2 != null goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (android.os.Parcelable) $r3;

        virtualinvoke r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void onRestoreInstanceState(android.os.Parcelable)>($r4);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void invalidatePanelMenu(int)>(i0);

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return;
    }

    private void openPanelsAfterRestore()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        int i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if r1 != null goto label1;

        return;

     label1:
        $i1 = lengthof r1;

        i0 = $i1 - 1;

     label2:
        if i0 < 0 goto label4;

        r2 = r1[i0];

        if r2 == null goto label3;

        virtualinvoke r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void applyFrozenState()>();

        $z0 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label3;

        $z1 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean wasLastOpen>;

        if $z1 == 0 goto label3;

        $z2 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean wasLastExpanded>;

        r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = $z2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, null);

     label3:
        i0 = i0 + -1;

        goto label2;

     label4:
        return;
    }

    protected com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>(r0, $r2, -1);

        return $r1;
    }

    protected void setFeatureFromAttrs(int, android.content.res.TypedArray, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.content.res.TypedArray r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.TypedArray;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        if r2 == null goto label1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(i0);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDefaultDrawable(int,android.graphics.drawable.Drawable)>(i0, r2);

     label1:
        $i4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i5 = 1 << i0;

        $i6 = $i4 & $i5;

        if $i6 == 0 goto label2;

        i3 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(i2, -1);

        if i3 < 0 goto label2;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawableAlpha(int,int)>(i0, i3);

     label2:
        return;
    }

    protected android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView r1, $r22, $r23, $r24, $r28, $r29, $r30;
        android.content.res.TypedArray r2;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, i65;
        android.view.WindowManager r3;
        android.view.Display r4;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z40, $z42, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z54, $z56, $z61;
        android.view.WindowManager$LayoutParams r5;
        android.util.TypedValue r6, $r12, $r13, $r36, $r40, $r44, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, r63, r64;
        android.widget.ProgressBar r7;
        android.view.ViewGroup r8, $r21;
        android.graphics.drawable.Drawable r9, $r41, r66;
        android.content.Context $r10, $r15, $r31, $r32, $r34, $r39, $r43, $r46, r62;
        android.content.pm.ApplicationInfo $r11, $r17, $r45;
        java.lang.Object $r14;
        android.content.res.Resources $r16;
        android.view.Window $r18, $r26;
        android.view.LayoutInflater $r19;
        android.view.ViewGroup$LayoutParams $r20;
        android.view.View $r25, r65;
        java.lang.CharSequence $r27, $r33;
        float $f0, $f1, $f2;
        android.content.res.Resources$Theme $r35, $r38, $r42;
        java.lang.RuntimeException $r37;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$DecorView;

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z6 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating> = $z6;

        $i4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i3 = $i4 ^ -1;

        i0 = 65792 & $i3;

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z8 == 0 goto label01;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setLayout(int,int)>(-2, -2);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(0, i0);

        goto label02;

     label01:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(65792, i0);

     label02:
        $z7 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        if $z7 == 0 goto label03;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(1);

        goto label04;

     label03:
        $z10 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(15, 0);

        if $z10 == 0 goto label04;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(8);

     label04:
        $z9 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(17, 0);

        if $z9 == 0 goto label05;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(9);

     label05:
        $z12 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(16, 0);

        if $z12 == 0 goto label06;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(10);

     label06:
        $z11 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(25, 0);

        if $z11 == 0 goto label07;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(11);

     label07:
        $z14 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, 0);

        if $z14 == 0 goto label08;

        $i62 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i59 = $i62 ^ -1;

        $i60 = 1024 & $i59;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(1024, $i60);

     label08:
        $z13 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(23, 0);

        if $z13 == 0 goto label09;

        $i63 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i64 = $i63 ^ -1;

        $i61 = 67108864 & $i64;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(67108864, $i61);

     label09:
        $z16 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(24, 0);

        if $z16 == 0 goto label10;

        $i50 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i52 = $i50 ^ -1;

        $i51 = 134217728 & $i52;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(134217728, $i51);

     label10:
        $z17 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(22, 0);

        if $z17 == 0 goto label11;

        $i54 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i53 = $i54 ^ -1;

        $i55 = 33554432 & $i53;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(33554432, $i55);

     label11:
        $z15 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        if $z15 == 0 goto label12;

        $i58 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i57 = $i58 ^ -1;

        $i56 = 1048576 & $i57;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(1048576, $i56);

     label12:
        $r10 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i6 = $r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i6 < 11 goto label13;

        $z61 = 1;

        goto label14;

     label13:
        $z61 = 0;

     label14:
        $z18 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(18, $z61);

        if $z18 == 0 goto label15;

        $i49 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i47 = $i49 ^ -1;

        $i48 = 8388608 & $i47;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(8388608, $i48);

     label15:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(19, $r13);

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mMinWidthMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(20, $r12);

        $z23 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(48);

        if $z23 == 0 goto label17;

        $r60 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        if $r60 != null goto label16;

        $r54 = new android.util.TypedValue;

        specialinvoke $r54.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor> = $r54;

     label16:
        $r55 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(48, $r55);

     label17:
        $z24 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(50);

        if $z24 == 0 goto label19;

        $r57 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        if $r57 != null goto label18;

        $r59 = new android.util.TypedValue;

        specialinvoke $r59.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor> = $r59;

     label18:
        $r61 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(50, $r61);

     label19:
        $z21 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(51);

        if $z21 == 0 goto label21;

        $r48 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        if $r48 != null goto label20;

        $r56 = new android.util.TypedValue;

        specialinvoke $r56.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor> = $r56;

     label20:
        $r58 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(51, $r58);

     label21:
        $z22 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(49);

        if $z22 == 0 goto label23;

        $r47 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        if $r47 != null goto label22;

        $r49 = new android.util.TypedValue;

        specialinvoke $r49.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor> = $r49;

     label22:
        $r50 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(49, $r50);

     label23:
        $z26 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(26, 0);

        if $z26 == 0 goto label24;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(12);

     label24:
        $z25 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(47, 0);

        if $z25 == 0 goto label25;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(13);

     label25:
        $r15 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r14 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r3 = (android.view.WindowManager) $r14;

        if r3 == null goto label30;

        r4 = interfaceinvoke r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i44 = virtualinvoke r4.<android.view.Display: int getDisplayId()>();

        if $i44 == 0 goto label26;

        $i46 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i45 = $i46 & 1024;

        if $i45 == 0 goto label27;

     label26:
        $z54 = 1;

        goto label28;

     label27:
        $z54 = 0;

     label28:
        z0 = $z54;

        if z0 == 0 goto label30;

        $z56 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(52);

        if $z56 == 0 goto label30;

        $r52 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mOutsetBottom>;

        if $r52 != null goto label29;

        $r53 = new android.util.TypedValue;

        specialinvoke $r53.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mOutsetBottom> = $r53;

     label29:
        $r51 = r0.<com.android.internal.policy.impl.PhoneWindow: android.util.TypedValue mOutsetBottom>;

        virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(52, $r51);

     label30:
        r62 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r17 = virtualinvoke r62.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i65 = $r17.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i65 >= 11 goto label31;

        $z49 = 1;

        goto label32;

     label31:
        $z49 = 0;

     label32:
        z1 = $z49;

        if i65 >= 14 goto label33;

        $z48 = 1;

        goto label34;

     label33:
        $z48 = 0;

     label34:
        z2 = $z48;

        if i65 >= 21 goto label35;

        $z47 = 1;

        goto label36;

     label35:
        $z47 = 0;

     label36:
        z3 = $z47;

        $r16 = virtualinvoke r62.<android.content.Context: android.content.res.Resources getResources()>();

        z4 = virtualinvoke $r16.<android.content.res.Resources: boolean getBoolean(int)>(17956874);

        $z30 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(8);

        if $z30 == 0 goto label37;

        $z45 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(1);

        if $z45 == 0 goto label38;

     label37:
        $z46 = 1;

        goto label39;

     label38:
        $z46 = 0;

     label39:
        z5 = $z46;

        if z1 != 0 goto label40;

        if z2 == 0 goto label41;

        if z4 == 0 goto label41;

        if z5 == 0 goto label41;

     label40:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void addFlags(int)>(1073741824);

        goto label42;

     label41:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void clearFlags(int)>(1073741824);

     label42:
        $z29 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z29 != 0 goto label43;

        $z50 = staticinvoke <android.app.ActivityManager: boolean isHighEndGfx()>();

        if $z50 == 0 goto label43;

        if z3 != 0 goto label43;

        $z51 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(36, 0);

        if $z51 == 0 goto label43;

        $i43 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i38 = $i43 ^ -1;

        $i39 = -2147483648 & $i38;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setFlags(int,int)>(-2147483648, $i39);

     label43:
        $z28 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedStatusBarColor>;

        if $z28 != 0 goto label44;

        $i42 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(37, -16777216);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mStatusBarColor> = $i42;

     label44:
        $z27 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedNavigationBarColor>;

        if $z27 != 0 goto label45;

        $i41 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(38, -16777216);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mNavigationBarColor> = $i41;

     label45:
        $z33 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr>;

        if $z33 != 0 goto label46;

        $r46 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r45 = virtualinvoke $r46.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i40 = $r45.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i40 < 11 goto label47;

     label46:
        $z32 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(21, 0);

        if $z32 == 0 goto label47;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setCloseOnTouchOutsideIfNotSet(boolean)>(1);

     label47:
        r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $z31 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasSoftInputMode()>();

        if $z31 != 0 goto label48;

        $i29 = r5.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i28 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(13, $i29);

        r5.<android.view.WindowManager$LayoutParams: int softInputMode> = $i28;

     label48:
        $z34 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        $z35 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(11, $z34);

        if $z35 == 0 goto label50;

        $i37 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getForcedWindowFlags()>();

        $i36 = $i37 & 2;

        if $i36 != 0 goto label49;

        $i27 = r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i26 = $i27 | 2;

        r5.<android.view.WindowManager$LayoutParams: int flags> = $i26;

     label49:
        $z44 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean haveDimAmount()>();

        if $z44 != 0 goto label50;

        $f2 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.5F);

        r5.<android.view.WindowManager$LayoutParams: float dimAmount> = $f2;

     label50:
        $i10 = r5.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        if $i10 != 0 goto label51;

        $i34 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r5.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i34;

     label51:
        $r18 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r18 != null goto label55;

        $r41 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if $r41 != null goto label54;

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i31 != 0 goto label52;

        $i35 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = $i35;

     label52:
        $i30 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        if $i30 != 0 goto label53;

        $i32 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = $i32;

     label53:
        $i33 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(28, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource> = $i33;

     label54:
        $f1 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(40, 0.0F);

        r0.<com.android.internal.policy.impl.PhoneWindow: float mElevation> = $f1;

        $z42 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(41, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClipToOutline> = $z42;

        $i25 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(7, 0);

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = $i25;

     label55:
        i2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i7 = i2 & 2048;

        if $i7 == 0 goto label56;

        i1 = 17367225;

        goto label68;

     label56:
        $i8 = i2 & 24;

        if $i8 == 0 goto label59;

        $z38 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z38 == 0 goto label57;

        $r44 = new android.util.TypedValue;

        specialinvoke $r44.<android.util.TypedValue: void <init>()>();

        r6 = $r44;

        $r43 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r42 = virtualinvoke $r43.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r42.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16844037, r6, 1);

        i1 = r6.<android.util.TypedValue: int resourceId>;

        goto label58;

     label57:
        i1 = 17367227;

     label58:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

        goto label68;

     label59:
        $i9 = i2 & 36;

        if $i9 == 0 goto label60;

        $i24 = i2 & 256;

        if $i24 != 0 goto label60;

        i1 = 17367222;

        goto label68;

     label60:
        $i11 = i2 & 128;

        if $i11 == 0 goto label63;

        $z40 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z40 == 0 goto label61;

        $r40 = new android.util.TypedValue;

        specialinvoke $r40.<android.util.TypedValue: void <init>()>();

        r63 = $r40;

        $r39 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r38 = virtualinvoke $r39.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r38.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16844038, r63, 1);

        i1 = r63.<android.util.TypedValue: int resourceId>;

        goto label62;

     label61:
        i1 = 17367221;

     label62:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void removeFeature(int)>(8);

        goto label68;

     label63:
        $i12 = i2 & 2;

        if $i12 != 0 goto label66;

        $z37 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z37 == 0 goto label64;

        $r36 = new android.util.TypedValue;

        specialinvoke $r36.<android.util.TypedValue: void <init>()>();

        r64 = $r36;

        $r34 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r35 = virtualinvoke $r34.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r35.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16844039, r64, 1);

        i1 = r64.<android.util.TypedValue: int resourceId>;

        goto label68;

     label64:
        $i23 = i2 & 256;

        if $i23 == 0 goto label65;

        i1 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(29, 17367220);

        goto label68;

     label65:
        i1 = 17367226;

        goto label68;

     label66:
        $i13 = i2 & 1024;

        if $i13 == 0 goto label67;

        i1 = 17367224;

        goto label68;

     label67:
        i1 = 17367223;

     label68:
        $r22 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r22.<com.android.internal.policy.impl.PhoneWindow$DecorView: void startChanging()>();

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        r65 = virtualinvoke $r19.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i1, null);

        $r20 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r20.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r65, $r20);

        $r21 = (android.view.ViewGroup) r65;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentRoot> = $r21;

        $r25 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908290);

        r8 = (android.view.ViewGroup) $r25;

        if r8 != null goto label69;

        $r37 = new java.lang.RuntimeException;

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String)>("Window couldn\'t find content container view");

        throw $r37;

     label69:
        $i16 = i2 & 32;

        if $i16 == 0 goto label70;

        r7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(0);

        if r7 == null goto label70;

        virtualinvoke r7.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

     label70:
        $i17 = i2 & 2048;

        if $i17 == 0 goto label71;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void registerSwipeCallbacks()>();

     label71:
        $r26 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r26 != null goto label78;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i14 == 0 goto label72;

        $r31 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        r66 = virtualinvoke $r31.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i20);

        goto label73;

     label72:
        r66 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

     label73:
        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r24.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r66);

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        if $i15 == 0 goto label74;

        $r32 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        r9 = virtualinvoke $r32.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i21);

        goto label75;

     label74:
        r9 = null;

     label75:
        $r29 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r29.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowFrame(android.graphics.drawable.Drawable)>(r9);

        $r30 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $f0 = r0.<com.android.internal.policy.impl.PhoneWindow: float mElevation>;

        virtualinvoke $r30.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setElevation(float)>($f0);

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z36 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mClipToOutline>;

        virtualinvoke $r28.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setClipToOutline(boolean)>($z36);

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        if $r27 == null goto label76;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setTitle(java.lang.CharSequence)>($r33);

     label76:
        $i19 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        if $i19 != 0 goto label77;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor>;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = $i22;

     label77:
        $i18 = r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setTitleColor(int)>($i18);

     label78:
        $r23 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r23.<com.android.internal.policy.impl.PhoneWindow$DecorView: void finishChanging()>();

        return r8;
    }

    public void alwaysReadCloseOnTouchAttr()
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 1;

        return;
    }

    private void installDecor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.widget.DecorContentParent r1, $r57, $r61, $r63, $r64, $r66, $r67, $r68, $r69, $r73, $r76, $r78;
        int i0, i1, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2, $r4, $r6, $r7, $r12, $r52, $r53, $r74, $r75, $r79, $r81;
        android.view.ViewGroup $r3, $r5, $r49, $r55, $r60;
        android.view.View $r8, $r9, r83;
        android.widget.TextView $r10, $r11, $r51, $r54, $r59;
        android.graphics.drawable.Drawable $r13, $r70;
        android.transition.TransitionManager $r14, $r47, $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.transition.Transition $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r35, $r36;
        java.lang.Boolean $r33, $r34, $r37, $r40, $r41, $r44;
        android.content.res.TypedArray $r38, $r39, $r42, $r43, $r45;
        long $l2, $l5;
        byte $b3;
        android.content.Context $r46, $r71;
        java.lang.CharSequence $r50, $r62, $r77;
        android.widget.FrameLayout $r56;
        android.view.Window$Callback $r58;
        com.android.internal.view.menu.MenuBuilder $r65;
        android.content.pm.PackageManager $r72;
        java.lang.Runnable $r80;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r82;
        android.transition.TransitionInflater r84;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r2 != null goto label01;

        $r75 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor> = $r75;

        $r74 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r74.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setDescendantFocusability(int)>(262144);

        $r81 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r81.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setIsRootNamespace(boolean)>(1);

        $z9 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z9 != 0 goto label01;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        if $i27 == 0 goto label01;

        $r79 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r80 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r79.<com.android.internal.policy.impl.PhoneWindow$DecorView: void postOnAnimation(java.lang.Runnable)>($r80);

     label01:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label25;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)>($r4);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent> = $r5;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: void makeOptionalFitsSystemWindows()>();

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r8 = virtualinvoke $r7.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.View findViewById(int)>(16909171);

        r1 = (com.android.internal.widget.DecorContentParent) $r8;

        if r1 == null goto label13;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent> = r1;

        $r57 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r58 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        interfaceinvoke $r57.<com.android.internal.widget.DecorContentParent: void setWindowCallback(android.view.Window$Callback)>($r58);

        $r63 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r62 = interfaceinvoke $r63.<com.android.internal.widget.DecorContentParent: java.lang.CharSequence getTitle()>();

        if $r62 != null goto label02;

        $r76 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r77 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        interfaceinvoke $r76.<com.android.internal.widget.DecorContentParent: void setWindowTitle(java.lang.CharSequence)>($r77);

     label02:
        i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        i1 = 0;

     label03:
        if i1 >= 13 goto label05;

        $i26 = 1 << i1;

        $i25 = i0 & $i26;

        if $i25 == 0 goto label04;

        $r78 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r78.<com.android.internal.widget.DecorContentParent: void initFeature(int)>(i1);

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r61 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindow: int mUiOptions>;

        interfaceinvoke $r61.<com.android.internal.widget.DecorContentParent: void setUiOptions(int)>($i14);

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i13 = $i11 & 1;

        if $i13 != 0 goto label06;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        if $i21 == 0 goto label07;

        $r69 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z8 = interfaceinvoke $r69.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z8 != 0 goto label07;

     label06:
        $r66 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        interfaceinvoke $r66.<com.android.internal.widget.DecorContentParent: void setIcon(int)>($i12);

        goto label08;

     label07:
        $i19 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i20 = $i19 & 1;

        if $i20 != 0 goto label08;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindow: int mIconRes>;

        if $i18 != 0 goto label08;

        $r67 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z7 = interfaceinvoke $r67.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z7 != 0 goto label08;

        $r73 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r71 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r72 = virtualinvoke $r71.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r70 = virtualinvoke $r72.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        interfaceinvoke $r73.<com.android.internal.widget.DecorContentParent: void setIcon(android.graphics.drawable.Drawable)>($r70);

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i23 = $i24 | 4;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags> = $i23;

     label08:
        $i15 = r0.<com.android.internal.policy.impl.PhoneWindow: int mResourcesSetFlags>;

        $i17 = $i15 & 2;

        if $i17 != 0 goto label09;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes>;

        if $i22 == 0 goto label10;

        $r68 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z6 = interfaceinvoke $r68.<com.android.internal.widget.DecorContentParent: boolean hasLogo()>();

        if $z6 != 0 goto label10;

     label09:
        $r64 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindow: int mLogoRes>;

        interfaceinvoke $r64.<com.android.internal.widget.DecorContentParent: void setLogo(int)>($i16);

     label10:
        r82 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        $z5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z5 != 0 goto label12;

        if r82 == null goto label11;

        $r65 = r82.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r65 != null goto label12;

     label11:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void invalidatePanelMenu(int)>(8);

     label12:
        goto label18;

     label13:
        $r9 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908310);

        $r10 = (android.widget.TextView) $r9;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView> = $r10;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r11 == null goto label18;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        $r53 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $i10 = virtualinvoke $r53.<com.android.internal.policy.impl.PhoneWindow$DecorView: int getLayoutDirection()>();

        virtualinvoke $r54.<android.widget.TextView: void setLayoutDirection(int)>($i10);

        $i8 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i9 = $i8 & 2;

        if $i9 == 0 goto label17;

        r83 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908341);

        if r83 == null goto label14;

        virtualinvoke r83.<android.view.View: void setVisibility(int)>(8);

        goto label15;

     label14:
        $r59 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r59.<android.widget.TextView: void setVisibility(int)>(8);

     label15:
        $r60 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $z4 = $r60 instanceof android.widget.FrameLayout;

        if $z4 == 0 goto label16;

        $r55 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r56 = (android.widget.FrameLayout) $r55;

        virtualinvoke $r56.<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)>(null);

     label16:
        goto label18;

     label17:
        $r51 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r51.<android.widget.TextView: void setText(java.lang.CharSequence)>($r50);

     label18:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r13 = virtualinvoke $r12.<com.android.internal.policy.impl.PhoneWindow$DecorView: android.graphics.drawable.Drawable getBackground()>();

        if $r13 != null goto label19;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource>;

        if $i7 == 0 goto label19;

        $r52 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundFallbackResource>;

        virtualinvoke $r52.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setBackgroundFallback(int)>($i6);

     label19:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean hasFeature(int)>(13);

        if $z0 == 0 goto label25;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        if $r14 != null goto label21;

        $r43 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        i28 = virtualinvoke $r43.<android.content.res.TypedArray: int getResourceId(int,int)>(27, 0);

        if i28 == 0 goto label20;

        $r46 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        r84 = staticinvoke <android.transition.TransitionInflater: android.transition.TransitionInflater 'from'(android.content.Context)>($r46);

        $r49 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r48 = virtualinvoke r84.<android.transition.TransitionInflater: android.transition.TransitionManager inflateTransitionManager(int,android.view.ViewGroup)>(i28, $r49);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager> = $r48;

        goto label21;

     label20:
        $r47 = new android.transition.TransitionManager;

        specialinvoke $r47.<android.transition.TransitionManager: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.TransitionManager mTransitionManager> = $r47;

     label21:
        $r16 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mEnterTransition>;

        $r15 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r16, null, 30);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mEnterTransition> = $r15;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition>;

        $r18 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r20 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r17, $r18, 42);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition> = $r20;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mExitTransition>;

        $r22 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r19, null, 31);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mExitTransition> = $r22;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition>;

        $r21 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r23 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r24, $r21, 43);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition> = $r23;

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementEnterTransition>;

        $r25 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r26, null, 32);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = $r25;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition>;

        $r28 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r31 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r27, $r28, 44);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = $r31;

        $r32 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementExitTransition>;

        $r29 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r32, null, 33);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = $r29;

        $r35 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition>;

        $r30 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r36 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r35, $r30, 45);

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = $r36;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap>;

        if $r33 != null goto label22;

        $r45 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z3 = virtualinvoke $r45.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(35, 1);

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap> = $r44;

     label22:
        $r34 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap>;

        if $r34 != null goto label23;

        $r42 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z2 = virtualinvoke $r42.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(34, 1);

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap> = $r41;

     label23:
        $l2 = r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis>;

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label24;

        $r39 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $i4 = virtualinvoke $r39.<android.content.res.TypedArray: int getInteger(int,int)>(39, 300);

        $l5 = (long) $i4;

        r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis> = $l5;

     label24:
        $r37 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay>;

        if $r37 != null goto label25;

        $r38 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z1 = virtualinvoke $r38.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(46, 1);

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay> = $r40;

     label25:
        return;
    }

    private android.transition.Transition getTransition(android.transition.Transition, android.transition.Transition, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1, r2, r3;
        int i0, i1, $i2;
        android.transition.TransitionInflater r4;
        android.content.res.TypedArray $r5;
        android.content.Context $r6;
        boolean $z0;
        android.transition.TransitionSet $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r2 := @parameter1: android.transition.Transition;

        i0 := @parameter2: int;

        if r1 == r2 goto label1;

        return r1;

     label1:
        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        i1 = virtualinvoke $r5.<android.content.res.TypedArray: int getResourceId(int,int)>(i0, -1);

        r3 = r2;

        if i1 == -1 goto label2;

        if i1 == 17760256 goto label2;

        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        r4 = staticinvoke <android.transition.TransitionInflater: android.transition.TransitionInflater 'from'(android.content.Context)>($r6);

        r3 = virtualinvoke r4.<android.transition.TransitionInflater: android.transition.Transition inflateTransition(int)>(i1);

        $z0 = r3 instanceof android.transition.TransitionSet;

        if $z0 == 0 goto label2;

        $r7 = (android.transition.TransitionSet) r3;

        $i2 = virtualinvoke $r7.<android.transition.TransitionSet: int getTransitionCount()>();

        if $i2 != 0 goto label2;

        r3 = null;

     label2:
        return r3;
    }

    private android.graphics.drawable.Drawable loadImageURI(android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.net.Uri r1;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        java.io.InputStream $r5;
        android.graphics.drawable.Drawable $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.net.Uri;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke $r4.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r1);

        $r6 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>($r5, null);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open content: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r11);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] r1, r2, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r4, r6;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label1;

        return null;

     label1:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r5;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables>;

        r1 = $r3;

        if $r3 == null goto label3;

        $i6 = lengthof r1;

        if $i6 > i0 goto label5;

     label3:
        $i4 = i0 + 1;

        r2 = newarray (com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState)[$i4];

        if r1 == null goto label4;

        $i5 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

     label4:
        r1 = r2;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables> = r2;

     label5:
        r6 = r1[i0];

        if r6 != null goto label6;

        $r4 = new com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: void <init>(int)>(i0);

        r6 = $r4;

        r1[i0] = $r4;

     label6:
        return r6;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>(i0, z0, null);

        return $r1;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1, $r5, r7;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] r2, r3, $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label1;

        return null;

     label1:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r6;

     label2:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        r2 = $r4;

        if $r4 == null goto label3;

        $i6 = lengthof r2;

        if $i6 > i0 goto label5;

     label3:
        $i4 = i0 + 1;

        r3 = newarray (com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)[$i4];

        if r2 == null goto label4;

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i5);

     label4:
        r2 = r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels> = r3;

     label5:
        r7 = r2[i0];

        if r7 != null goto label8;

        if r1 == null goto label6;

        $r5 = r1;

        goto label7;

     label6:
        $r5 = new com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void <init>(int)>(i0);

     label7:
        r7 = $r5;

        r2[i0] = $r5;

     label8:
        return r7;
    }

    public final void setChildDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

        return;
    }

    public final void setChildInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    public boolean isShortcutKey(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r3 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label1;

        $r4 = r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z0 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean isShortcutKey(int,android.view.KeyEvent)>(i0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void updateDrawable(int, com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState r1;
        boolean z0, $z1;
        android.graphics.drawable.Drawable r2, $r4;
        android.view.ViewGroup $r3;
        android.view.Window $r5, $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label1;

        return;

     label1:
        i1 = 1 << i0;

        $i2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i3 = $i2 & i1;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label2;

        return;

     label2:
        r2 = null;

        if r1 == null goto label4;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child>;

        if r2 != null goto label3;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

     label3:
        if r2 != null goto label4;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

     label4:
        $i4 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i5 = $i4 & i1;

        if $i5 != 0 goto label6;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r5 == null goto label8;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isActive()>();

        if $z1 != 0 goto label5;

        if z0 == 0 goto label8;

     label5:
        $r6 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r6.<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>(i0, r2);

        goto label8;

     label6:
        if r1 == null goto label8;

        $r4 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur>;

        if $r4 != r2 goto label7;

        $i9 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha>;

        $i8 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i9 == $i8 goto label8;

     label7:
        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur> = r2;

        $i6 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha> = $i6;

        $i7 = r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onDrawableChanged(int,android.graphics.drawable.Drawable,int)>(i0, r2, $i7);

     label8:
        return;
    }

    private void updateInt(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0;
        android.view.ViewGroup $r1;
        android.view.Window $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label1;

        return;

     label1:
        i2 = 1 << i0;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getFeatures()>();

        $i4 = $i3 & i2;

        if $i4 != 0 goto label2;

        if z0 != 0 goto label2;

        return;

     label2:
        $i5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        $i6 = $i5 & i2;

        if $i6 != 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r3.<android.view.Window: void setChildInt(int,int)>(i0, i1);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void onIntChanged(int,int)>(i0, i1);

     label4:
        return;
    }

    private android.widget.ImageView getLeftIconView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ImageView $r1, $r4, $r5;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        if $r1 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        return $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908338);

        $r4 = (android.widget.ImageView) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView> = $r4;

        return $r4;
    }

    protected void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.WindowManager$LayoutParams r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        specialinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.WindowInsets access$2500(com.android.internal.policy.impl.PhoneWindow$DecorView,android.view.WindowInsets)>($r3, null);

     label1:
        return;
    }

    private android.widget.ProgressBar getCircularProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        android.widget.ProgressBar $r1, $r4, $r5, $r6, $r7, $r8;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if $r1 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r8;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909169);

        $r4 = (android.widget.ProgressBar) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar> = $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if $r5 == null goto label3;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        virtualinvoke $r7.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r6;
    }

    private android.widget.ProgressBar getHorizontalProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        android.widget.ProgressBar $r1, $r4, $r5, $r6, $r7, $r8;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if $r1 == null goto label1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r8;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16909170);

        $r4 = (android.widget.ProgressBar) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar> = $r4;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if $r5 == null goto label3;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        virtualinvoke $r7.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r6;
    }

    private android.widget.ImageView getRightIconView()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.widget.ImageView $r1, $r4, $r5;
        android.view.ViewGroup $r2;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        if $r1 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        return $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908340);

        $r4 = (android.widget.ImageView) $r3;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView> = $r4;

        return $r4;
    }

    private void registerSwipeCallbacks()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.widget.SwipeDismissLayout r1;
        android.view.View $r2;
        com.android.internal.policy.impl.PhoneWindow$2 $r3;
        com.android.internal.policy.impl.PhoneWindow$3 $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.View findViewById(int)>(16908290);

        r1 = (com.android.internal.widget.SwipeDismissLayout) $r2;

        $r3 = new com.android.internal.policy.impl.PhoneWindow$2;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$2: void <init>(com.android.internal.policy.impl.PhoneWindow)>(r0);

        virtualinvoke r1.<com.android.internal.widget.SwipeDismissLayout: void setOnDismissedListener(com.android.internal.widget.SwipeDismissLayout$OnDismissedListener)>($r3);

        $r4 = new com.android.internal.policy.impl.PhoneWindow$3;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$3: void <init>(com.android.internal.policy.impl.PhoneWindow)>(r0);

        virtualinvoke r1.<com.android.internal.widget.SwipeDismissLayout: void setOnSwipeProgressChangedListener(com.android.internal.widget.SwipeDismissLayout$OnSwipeProgressChangedListener)>($r4);

        return;
    }

    private void callOnPanelClosed(int, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.Menu r2;
        android.view.Window$Callback r3;
        boolean $z0, $z1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter2: android.view.Menu;

        r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 != null goto label1;

        return;

     label1:
        if r2 != null goto label3;

        if r1 != null goto label2;

        if i0 < 0 goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        r1 = $r5[i0];

     label2:
        if r1 == null goto label3;

        r2 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

     label3:
        if r1 == null goto label4;

        $z1 = r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 != 0 goto label4;

        return;

     label4:
        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label5;

        interfaceinvoke r3.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(i0, r2);

     label5:
        return;
    }

    private boolean launchDefaultSearch()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0, $z1, $z2;
        android.view.Window$Callback r1;
        android.content.Context $r2, $r5;
        android.content.res.Resources $r3;
        android.content.res.Configuration $r4;
        int $i0, $i1, $i2;
        java.lang.Object $r6;
        android.app.SearchManager $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r1 == null goto label1;

        $z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean isDestroyed()>();

        if $z2 == 0 goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void sendCloseSystemWindows(java.lang.String)>("search");

        z0 = interfaceinvoke r1.<android.view.Window$Callback: boolean onSearchRequested()>();

     label3:
        if z0 != 0 goto label4;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r4.<android.content.res.Configuration: int uiMode>;

        $i1 = $i0 & 15;

        if $i1 != 4 goto label4;

        $r5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r7 = (android.app.SearchManager) $r6;

        $i2 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z1 = virtualinvoke $r7.<android.app.SearchManager: boolean launchAssistAction(int,java.lang.String,int)>(0, null, $i2);

        return $z1;

     label4:
        return z0;
    }

    public void setVolumeControlStream(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = i0;

        return;
    }

    public int getVolumeControlStream()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        return $i0;
    }

    public void setMediaController(android.media.session.MediaController)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.media.session.MediaController r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.media.session.MediaController;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController> = r1;

        return;
    }

    public android.media.session.MediaController getMediaController()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.media.session.MediaController $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.media.session.MediaController mMediaController>;

        return $r1;
    }

    private boolean isTranslucent()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.res.TypedArray r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $i0 = virtualinvoke r1.<android.content.res.TypedArray: int getResourceId(int,int)>(5, 0);

        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        return $z0;
    }

    public void setEnterTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mEnterTransition> = r1;

        return;
    }

    public void setReturnTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition> = r1;

        return;
    }

    public void setExitTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mExitTransition> = r1;

        return;
    }

    public void setReenterTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition> = r1;

        return;
    }

    public void setSharedElementEnterTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = r1;

        return;
    }

    public void setSharedElementReturnTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = r1;

        return;
    }

    public void setSharedElementExitTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = r1;

        return;
    }

    public void setSharedElementReenterTransition(android.transition.Transition)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = r1;

        return;
    }

    public android.transition.Transition getEnterTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mEnterTransition>;

        return $r1;
    }

    public android.transition.Transition getReturnTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition>;

        $r1 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getEnterTransition()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReturnTransition>;

     label2:
        return $r3;
    }

    public android.transition.Transition getExitTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mExitTransition>;

        return $r1;
    }

    public android.transition.Transition getReenterTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition>;

        $r1 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getExitTransition()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mReenterTransition>;

     label2:
        return $r3;
    }

    public android.transition.Transition getSharedElementEnterTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementEnterTransition>;

        return $r1;
    }

    public android.transition.Transition getSharedElementReturnTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition>;

        $r1 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getSharedElementEnterTransition()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReturnTransition>;

     label2:
        return $r3;
    }

    public android.transition.Transition getSharedElementExitTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementExitTransition>;

        return $r1;
    }

    public android.transition.Transition getSharedElementReenterTransition()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.transition.Transition $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition>;

        $r1 = <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition getSharedElementExitTransition()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindow: android.transition.Transition mSharedElementReenterTransition>;

     label2:
        return $r3;
    }

    public void setAllowEnterTransitionOverlap(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap> = $r1;

        return;
    }

    public boolean getAllowEnterTransitionOverlap()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public void setAllowReturnTransitionOverlap(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap> = $r1;

        return;
    }

    public boolean getAllowReturnTransitionOverlap()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    public long getTransitionBackgroundFadeDuration()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $l0 = r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis>;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $l2 = 300L;

        goto label2;

     label1:
        $l2 = r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis>;

     label2:
        return $l2;
    }

    public void setTransitionBackgroundFadeDuration(long)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative durations are not allowed");

        throw $r1;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindow: long mBackgroundFadeDurationMillis> = l0;

        return;
    }

    public void setSharedElementsUseOverlay(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay> = $r1;

        return;
    }

    public boolean getSharedElementsUseOverlay()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    public int getStatusBarColor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mStatusBarColor>;

        return $i0;
    }

    public void setStatusBarColor(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mStatusBarColor> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedStatusBarColor> = 1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.WindowInsets access$2500(com.android.internal.policy.impl.PhoneWindow$DecorView,android.view.WindowInsets)>($r2, null);

     label1:
        return;
    }

    public int getNavigationBarColor()
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mNavigationBarColor>;

        return $i0;
    }

    public void setNavigationBarColor(int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mNavigationBarColor> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mForcedNavigationBarColor> = 1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindow$DecorView: android.view.WindowInsets access$2500(com.android.internal.policy.impl.PhoneWindow$DecorView,android.view.WindowInsets)>($r2, null);

     label1:
        return;
    }

    static int access$000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        return $i0;
    }

    static boolean access$102(com.android.internal.policy.impl.PhoneWindow, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindow: boolean mInvalidatePanelMenuPosted> = z0;

        return z0;
    }

    static int access$002(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        r0.<com.android.internal.policy.impl.PhoneWindow: int mInvalidatePanelMenuFeatures> = i0;

        return i0;
    }

    static void access$500(com.android.internal.policy.impl.PhoneWindow, int, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        android.view.Menu r2;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r2 := @parameter3: android.view.Menu;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>(i0, r1, r2);

        return;
    }

    static android.view.ViewGroup access$600(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.ViewGroup $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentRoot>;

        return $r1;
    }

    static android.view.ViewGroup access$700(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.view.ViewGroup $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        return $r1;
    }

    static int access$800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        return $i0;
    }

    static com.android.internal.policy.impl.PhoneWindow$PanelFeatureState access$900(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        return $r1;
    }

    static boolean access$1000(com.android.internal.policy.impl.PhoneWindow, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;
        int i0, i1;
        android.view.KeyEvent r2;
        boolean $z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        i0 := @parameter2: int;

        r2 := @parameter3: android.view.KeyEvent;

        i1 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>(r1, i0, r2, i1);

        return $z0;
    }

    static com.android.internal.policy.impl.PhoneWindow$PanelFeatureState access$1100(com.android.internal.policy.impl.PhoneWindow, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, z0);

        return $r1;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        return $r1;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1202(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.ContextMenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.view.menu.ContextMenuBuilder;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = r1;

        return r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1300(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuDialogHelper $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        return $r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1302(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.MenuDialogHelper)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.view.menu.MenuDialogHelper r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: com.android.internal.view.menu.MenuDialogHelper;

        r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = r1;

        return r1;
    }

    static boolean access$1600(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        return $z0;
    }

    static int access$1700(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mStatusBarColor>;

        return $i0;
    }

    static int access$1800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindow: int mNavigationBarColor>;

        return $i0;
    }

    static android.graphics.Rect access$1900(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.Rect mTempRect>;

        return $r1;
    }

    static android.graphics.Rect access$1902(com.android.internal.policy.impl.PhoneWindow, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 := @parameter1: android.graphics.Rect;

        r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.Rect mTempRect> = r1;

        return r1;
    }

    static int access$2000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: int getLocalFeatures()>();

        return $i0;
    }

    static void access$2100(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        int i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void setDefaultWindowFormat(int)>(i0);

        return;
    }

    static void access$2200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void openPanelsAfterRestore()>();

        return;
    }

    static com.android.internal.widget.DecorContentParent access$2300(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;
        com.android.internal.widget.DecorContentParent $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        return $r1;
    }

    static void access$2800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

        return;
    }

    static void <clinit>()
    {
        android.transition.TransitionSet $r0;
        com.android.internal.policy.impl.PhoneWindow$RotationWatcher $r1;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String ACTION_BAR_TAG> = "android:ActionBar";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String PANELS_TAG> = "android:Panels";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String VIEWS_TAG> = "android:views";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String FOCUSED_ID_TAG> = "android:focusedViewId";

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_ICON_FALLBACK> = 4;

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_LOGO> = 2;

        <com.android.internal.policy.impl.PhoneWindow: int FLAG_RESOURCE_SET_ICON> = 1;

        <com.android.internal.policy.impl.PhoneWindow: int CUSTOM_TITLE_COMPATIBLE_FEATURES> = 13505;

        <com.android.internal.policy.impl.PhoneWindow: int DEFAULT_BACKGROUND_FADE_DURATION_MS> = 300;

        <com.android.internal.policy.impl.PhoneWindow: boolean SWEEP_OPEN_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String TAG> = "PhoneWindow";

        $r0 = new android.transition.TransitionSet;

        specialinvoke $r0.<android.transition.TransitionSet: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION> = $r0;

        $r1 = new com.android.internal.policy.impl.PhoneWindow$RotationWatcher;

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$RotationWatcher sRotationWatcher> = $r1;

        return;
    }
}
