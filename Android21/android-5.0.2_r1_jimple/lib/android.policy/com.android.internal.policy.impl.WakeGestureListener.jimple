public abstract class com.android.internal.policy.impl.WakeGestureListener extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.hardware.SensorManager mSensorManager;
    private final android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private boolean mTriggerRequested;
    private android.hardware.Sensor mSensor;
    private final android.hardware.TriggerEventListener mListener;
    private final java.lang.Runnable mWakeUpRunnable;

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        android.content.Context r1;
        android.os.Handler r2;
        java.lang.Object $r3, $r6;
        com.android.internal.policy.impl.WakeGestureListener$1 $r4;
        com.android.internal.policy.impl.WakeGestureListener$2 $r5;
        android.hardware.SensorManager $r7, $r8;
        android.hardware.Sensor $r9;

        r0 := @this: com.android.internal.policy.impl.WakeGestureListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock> = $r3;

        $r4 = new com.android.internal.policy.impl.WakeGestureListener$1;

        specialinvoke $r4.<com.android.internal.policy.impl.WakeGestureListener$1: void <init>(com.android.internal.policy.impl.WakeGestureListener)>(r0);

        r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.TriggerEventListener mListener> = $r4;

        $r5 = new com.android.internal.policy.impl.WakeGestureListener$2;

        specialinvoke $r5.<com.android.internal.policy.impl.WakeGestureListener$2: void <init>(com.android.internal.policy.impl.WakeGestureListener)>(r0);

        r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Runnable mWakeUpRunnable> = $r5;

        $r6 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r7 = (android.hardware.SensorManager) $r6;

        r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.SensorManager mSensorManager> = $r7;

        r0.<com.android.internal.policy.impl.WakeGestureListener: android.os.Handler mHandler> = r2;

        $r8 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.SensorManager mSensorManager>;

        $r9 = virtualinvoke $r8.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(23);

        r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor> = $r9;

        return;
    }

    public abstract void onWakeUp();

    public boolean isSupported()
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.hardware.Sensor $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.WakeGestureListener;

        $r3 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void requestWakeUpTrigger()
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        android.hardware.Sensor $r4, $r5;
        boolean $z0;
        android.hardware.TriggerEventListener $r6;
        android.hardware.SensorManager $r7;

        r0 := @this: com.android.internal.policy.impl.WakeGestureListener;

        $r3 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r4 == null goto label2;

        $z0 = r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested>;

        if $z0 != 0 goto label2;

        r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested> = 1;

        $r7 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.TriggerEventListener mListener>;

        $r5 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r6, $r5);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void cancelWakeUpTrigger()
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        android.hardware.Sensor $r4, $r5;
        boolean $z0;
        android.hardware.TriggerEventListener $r6;
        android.hardware.SensorManager $r7;

        r0 := @this: com.android.internal.policy.impl.WakeGestureListener;

        $r3 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r4 == null goto label2;

        $z0 = r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested>;

        if $z0 == 0 goto label2;

        r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested> = 0;

        $r7 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.TriggerEventListener mListener>;

        $r5 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r6, $r5);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r9, $r16, $r22, r25;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r24;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r23;
        boolean $z0;
        android.hardware.Sensor $r20;

        r0 := @this: com.android.internal.policy.impl.WakeGestureListener;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WakeGestureListener");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r25 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTriggerRequested=");

        $z0 = r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSensor=");

        $r20 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.hardware.Sensor mSensor>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r24 := @caughtexception;

        r4 = $r24;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.lang.Object access$000(com.android.internal.policy.impl.WakeGestureListener)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.policy.impl.WakeGestureListener;

        $r1 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$102(com.android.internal.policy.impl.WakeGestureListener, boolean)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.policy.impl.WakeGestureListener;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.policy.impl.WakeGestureListener: boolean mTriggerRequested> = z0;

        return z0;
    }

    static java.lang.Runnable access$200(com.android.internal.policy.impl.WakeGestureListener)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.internal.policy.impl.WakeGestureListener;

        $r1 = r0.<com.android.internal.policy.impl.WakeGestureListener: java.lang.Runnable mWakeUpRunnable>;

        return $r1;
    }

    static android.os.Handler access$300(com.android.internal.policy.impl.WakeGestureListener)
    {
        com.android.internal.policy.impl.WakeGestureListener r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.internal.policy.impl.WakeGestureListener;

        $r1 = r0.<com.android.internal.policy.impl.WakeGestureListener: android.os.Handler mHandler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.WakeGestureListener: java.lang.String TAG> = "WakeGestureListener";

        return;
    }
}
