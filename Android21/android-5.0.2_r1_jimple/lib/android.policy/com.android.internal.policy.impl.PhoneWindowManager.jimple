public class com.android.internal.policy.impl.PhoneWindowManager extends java.lang.Object implements android.view.WindowManagerPolicy
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    static final boolean localLOGV;
    static final boolean DEBUG_LAYOUT;
    static final boolean DEBUG_INPUT;
    static final boolean DEBUG_STARTING_WINDOW;
    static final boolean DEBUG_WAKEUP;
    static final boolean SHOW_STARTING_ANIMATIONS;
    static final boolean SHOW_PROCESSES_ON_ALT_MENU;
    static final boolean ENABLE_CAR_DOCK_HOME_CAPTURE;
    static final boolean ENABLE_DESK_DOCK_HOME_CAPTURE;
    static final int SHORT_PRESS_POWER_NOTHING;
    static final int SHORT_PRESS_POWER_GO_TO_SLEEP;
    static final int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP;
    static final int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP_AND_GO_HOME;
    static final int LONG_PRESS_POWER_NOTHING;
    static final int LONG_PRESS_POWER_GLOBAL_ACTIONS;
    static final int LONG_PRESS_POWER_SHUT_OFF;
    static final int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM;
    static final int LONG_PRESS_HOME_NOTHING;
    static final int LONG_PRESS_HOME_RECENT_SYSTEM_UI;
    static final int LONG_PRESS_HOME_ASSIST;
    static final int DOUBLE_TAP_HOME_NOTHING;
    static final int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI;
    static final int APPLICATION_MEDIA_SUBLAYER;
    static final int APPLICATION_MEDIA_OVERLAY_SUBLAYER;
    static final int APPLICATION_PANEL_SUBLAYER;
    static final int APPLICATION_SUB_PANEL_SUBLAYER;
    public static final java.lang.String SYSTEM_DIALOG_REASON_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_ASSIST;
    static final int SYSTEM_UI_CHANGING_LAYOUT;
    private static final android.media.AudioAttributes VIBRATION_ATTRIBUTES;
    private android.view.WindowManagerPolicy$WindowState mKeyguardScrim;
    private boolean mKeyguardHidden;
    private boolean mKeyguardDrawnOnce;
    static android.util.SparseArray sApplicationLaunchKeyCategories;
    static final int WAITING_FOR_DRAWN_TIMEOUT;
    private final java.lang.Object mLock;
    android.content.Context mContext;
    android.view.IWindowManager mWindowManager;
    android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs;
    android.view.WindowManagerInternal mWindowManagerInternal;
    android.os.PowerManager mPowerManager;
    android.service.dreams.DreamManagerInternal mDreamManagerInternal;
    com.android.internal.statusbar.IStatusBarService mStatusBarService;
    boolean mPreloadedRecentApps;
    final java.lang.Object mServiceAquireLock;
    android.os.Vibrator mVibrator;
    android.app.SearchManager mSearchManager;
    android.view.accessibility.AccessibilityManager mAccessibilityManager;
    long[] mLongPressVibePattern;
    long[] mVirtualKeyVibePattern;
    long[] mKeyboardTapVibePattern;
    long[] mClockTickVibePattern;
    long[] mCalendarDateVibePattern;
    long[] mSafeModeDisabledVibePattern;
    long[] mSafeModeEnabledVibePattern;
    boolean mEnableShiftMenuBugReports;
    boolean mSafeMode;
    android.view.WindowManagerPolicy$WindowState mStatusBar;
    int mStatusBarHeight;
    android.view.WindowManagerPolicy$WindowState mNavigationBar;
    boolean mHasNavigationBar;
    boolean mCanHideNavigationBar;
    boolean mNavigationBarCanMove;
    boolean mNavigationBarOnBottom;
    int[] mNavigationBarHeightForRotation;
    int[] mNavigationBarWidthForRotation;
    boolean mBootMessageNeedsHiding;
    com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate;
    final java.lang.Runnable mWindowManagerDrawCallback;
    final com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener mKeyguardDelegateCallback;
    com.android.internal.policy.impl.GlobalActions mGlobalActions;
    volatile boolean mPowerKeyHandled;
    boolean mPendingPowerKeyUpCanceled;
    android.os.Handler mHandler;
    android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow;
    android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow;
    boolean mRecentsVisible;
    int mRecentAppsHeldModifiers;
    boolean mLanguageSwitchKeyPressed;
    int mLidState;
    int mCameraLensCoverState;
    boolean mHaveBuiltInKeyboard;
    boolean mSystemReady;
    boolean mSystemBooted;
    boolean mHdmiPlugged;
    android.app.IUiModeManager mUiModeManager;
    int mUiMode;
    int mDockMode;
    int mLidOpenRotation;
    int mCarDockRotation;
    int mDeskDockRotation;
    int mUndockedHdmiRotation;
    int mDemoHdmiRotation;
    boolean mDemoHdmiRotationLock;
    boolean mWakeGestureEnabledSetting;
    com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener;
    private boolean mForceDefaultOrientation;
    int mUserRotationMode;
    int mUserRotation;
    boolean mAccelerometerDefault;
    boolean mSupportAutoRotation;
    int mAllowAllRotations;
    boolean mCarDockEnablesAccelerometer;
    boolean mDeskDockEnablesAccelerometer;
    int mLidKeyboardAccessibility;
    int mLidNavigationAccessibility;
    boolean mLidControlsSleep;
    int mShortPressOnPowerBehavior;
    int mLongPressOnPowerBehavior;
    boolean mAwake;
    boolean mScreenOnEarly;
    boolean mScreenOnFully;
    android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener;
    boolean mKeyguardDrawComplete;
    boolean mWindowManagerDrawComplete;
    boolean mOrientationSensorEnabled;
    int mCurrentAppOrientation;
    boolean mHasSoftInput;
    boolean mTranslucentDecorEnabled;
    int mPointerLocationMode;
    android.view.WindowManagerPolicy$WindowState mFocusedWindow;
    android.view.IApplicationToken mFocusedApp;
    com.android.internal.widget.PointerLocationView mPointerLocationView;
    int mOverscanScreenLeft;
    int mOverscanScreenTop;
    int mOverscanScreenWidth;
    int mOverscanScreenHeight;
    int mUnrestrictedScreenLeft;
    int mUnrestrictedScreenTop;
    int mUnrestrictedScreenWidth;
    int mUnrestrictedScreenHeight;
    int mRestrictedOverscanScreenLeft;
    int mRestrictedOverscanScreenTop;
    int mRestrictedOverscanScreenWidth;
    int mRestrictedOverscanScreenHeight;
    int mRestrictedScreenLeft;
    int mRestrictedScreenTop;
    int mRestrictedScreenWidth;
    int mRestrictedScreenHeight;
    int mSystemLeft;
    int mSystemTop;
    int mSystemRight;
    int mSystemBottom;
    int mStableLeft;
    int mStableTop;
    int mStableRight;
    int mStableBottom;
    int mStableFullscreenLeft;
    int mStableFullscreenTop;
    int mStableFullscreenRight;
    int mStableFullscreenBottom;
    int mCurLeft;
    int mCurTop;
    int mCurRight;
    int mCurBottom;
    int mContentLeft;
    int mContentTop;
    int mContentRight;
    int mContentBottom;
    int mVoiceContentLeft;
    int mVoiceContentTop;
    int mVoiceContentRight;
    int mVoiceContentBottom;
    int mDockLeft;
    int mDockTop;
    int mDockRight;
    int mDockBottom;
    int mDockLayer;
    int mStatusBarLayer;
    int mLastSystemUiFlags;
    int mResettingSystemUiFlags;
    int mForceClearedSystemUiFlags;
    boolean mLastFocusNeedsMenu;
    android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow;
    static final android.graphics.Rect mTmpParentFrame;
    static final android.graphics.Rect mTmpDisplayFrame;
    static final android.graphics.Rect mTmpOverscanFrame;
    static final android.graphics.Rect mTmpContentFrame;
    static final android.graphics.Rect mTmpVisibleFrame;
    static final android.graphics.Rect mTmpDecorFrame;
    static final android.graphics.Rect mTmpStableFrame;
    static final android.graphics.Rect mTmpNavigationFrame;
    android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState;
    java.util.HashSet mAppsToBeHidden;
    java.util.HashSet mAppsThatDismissKeyguard;
    boolean mTopIsFullscreen;
    boolean mForceStatusBar;
    boolean mForceStatusBarFromKeyguard;
    boolean mHideLockScreen;
    boolean mForcingShowNavBar;
    int mForcingShowNavBarLayer;
    private static final int DISMISS_KEYGUARD_NONE;
    private static final int DISMISS_KEYGUARD_START;
    private static final int DISMISS_KEYGUARD_CONTINUE;
    int mDismissKeyguard;
    private android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard;
    private android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked;
    boolean mShowingLockscreen;
    boolean mShowingDream;
    boolean mDreamingLockscreen;
    boolean mHomePressed;
    boolean mHomeConsumed;
    boolean mHomeDoubleTapPending;
    android.content.Intent mHomeIntent;
    android.content.Intent mCarDockIntent;
    android.content.Intent mDeskDockIntent;
    boolean mSearchKeyShortcutPending;
    boolean mConsumeSearchKeyUp;
    boolean mAssistKeyLongPressed;
    boolean mPendingMetaAction;
    boolean mAllowLockscreenWhenOn;
    int mLockScreenTimeout;
    boolean mLockScreenTimerActive;
    int mEndcallBehavior;
    int mIncallPowerBehavior;
    android.view.Display mDisplay;
    int mLandscapeRotation;
    int mSeascapeRotation;
    int mPortraitRotation;
    int mUpsideDownRotation;
    int mOverscanLeft;
    int mOverscanTop;
    int mOverscanRight;
    int mOverscanBottom;
    private int mLongPressOnHomeBehavior;
    private int mDoubleTapOnHomeBehavior;
    private static final long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
    private static final float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER;
    private boolean mScreenshotChordEnabled;
    private boolean mVolumeDownKeyTriggered;
    private long mVolumeDownKeyTime;
    private boolean mVolumeDownKeyConsumedByScreenshotChord;
    private boolean mVolumeUpKeyTriggered;
    private boolean mPowerKeyTriggered;
    private long mPowerKeyTime;
    private static final int BRIGHTNESS_STEPS;
    com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver;
    com.android.internal.policy.impl.ShortcutManager mShortcutManager;
    android.os.PowerManager$WakeLock mBroadcastWakeLock;
    boolean mHavePendingMediaKeyRepeatWithWakeLock;
    private int mCurrentUserId;
    private com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager;
    private final android.util.SparseArray mFallbackActions;
    private final com.android.internal.policy.impl.LogDecelerateInterpolator mLogDecelerateInterpolator;
    private static final int MSG_ENABLE_POINTER_LOCATION;
    private static final int MSG_DISABLE_POINTER_LOCATION;
    private static final int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK;
    private static final int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK;
    private static final int MSG_KEYGUARD_DRAWN_COMPLETE;
    private static final int MSG_KEYGUARD_DRAWN_TIMEOUT;
    private static final int MSG_WINDOW_MANAGER_DRAWN_COMPLETE;
    private static final int MSG_DISPATCH_SHOW_RECENTS;
    private static final int MSG_DISPATCH_SHOW_GLOBAL_ACTIONS;
    private static final int MSG_HIDE_BOOT_MESSAGE;
    private static final int MSG_LAUNCH_VOICE_ASSIST_WITH_WAKE_LOCK;
    private android.os.UEventObserver mHDMIObserver;
    com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener;
    private final com.android.internal.policy.impl.BarController mStatusBarController;
    private final com.android.internal.policy.impl.BarController mNavigationBarController;
    private com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation;
    private com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures;
    private final java.lang.Runnable mPowerLongPress;
    private final java.lang.Runnable mScreenshotRunnable;
    private final java.lang.Runnable mHomeDoubleTapTimeoutRunnable;
    static final boolean PRINT_ANIM;
    private static final int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK;
    private final java.lang.Runnable mClearHideNavigationFlag;
    final android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory;
    final java.lang.Object mScreenshotLock;
    android.content.ServiceConnection mScreenshotConnection;
    final java.lang.Runnable mScreenshotTimeout;
    android.content.BroadcastReceiver mDockReceiver;
    android.content.BroadcastReceiver mDreamReceiver;
    android.content.BroadcastReceiver mMultiuserReceiver;
    private final java.lang.Runnable mRequestTransientNav;
    android.app.ProgressDialog mBootMsgDialog;
    com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout;

    public void <init>()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object $r1, $r2, $r18;
        int[] $r3, $r4;
        com.android.internal.policy.impl.PhoneWindowManager$1 $r5;
        com.android.internal.policy.impl.PhoneWindowManager$2 $r6;
        java.util.HashSet $r7, $r8;
        android.util.SparseArray $r9;
        com.android.internal.policy.impl.LogDecelerateInterpolator $r10;
        com.android.internal.policy.impl.PhoneWindowManager$3 $r11;
        com.android.internal.policy.impl.BarController $r12, $r13;
        com.android.internal.policy.impl.PhoneWindowManager$4 $r14;
        com.android.internal.policy.impl.PhoneWindowManager$5 $r15;
        com.android.internal.policy.impl.PhoneWindowManager$9 $r16;
        com.android.internal.policy.impl.PhoneWindowManager$6 $r17;
        com.android.internal.policy.impl.PhoneWindowManager$10 $r19;
        com.android.internal.policy.impl.PhoneWindowManager$15 $r20;
        com.android.internal.policy.impl.PhoneWindowManager$13 $r21;
        com.android.internal.policy.impl.PhoneWindowManager$17 $r22;
        com.android.internal.policy.impl.PhoneWindowManager$16 $r23;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout $r24;
        com.android.internal.policy.impl.PhoneWindowManager$18 $r25;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mServiceAquireLock> = $r2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCanHideNavigationBar> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom> = 1;

        $r3 = newarray (int)[4];

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation> = $r3;

        $r4 = newarray (int)[4];

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation> = $r4;

        $r5 = new com.android.internal.policy.impl.PhoneWindowManager$1;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindowManager$1: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mWindowManagerDrawCallback> = $r5;

        $r6 = new com.android.internal.policy.impl.PhoneWindowManager$2;

        specialinvoke $r6.<com.android.internal.policy.impl.PhoneWindowManager$2: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener mKeyguardDelegateCallback> = $r6;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mShortPressOnPowerBehavior> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = -1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = null;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsThatDismissKeyguard> = $r8;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom> = 0;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions> = $r9;

        $r10 = new com.android.internal.policy.impl.LogDecelerateInterpolator;

        specialinvoke $r10.<com.android.internal.policy.impl.LogDecelerateInterpolator: void <init>(int,int)>(100, 0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.LogDecelerateInterpolator mLogDecelerateInterpolator> = $r10;

        $r11 = new com.android.internal.policy.impl.PhoneWindowManager$3;

        specialinvoke $r11.<com.android.internal.policy.impl.PhoneWindowManager$3: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.UEventObserver mHDMIObserver> = $r11;

        $r12 = new com.android.internal.policy.impl.BarController;

        specialinvoke $r12.<com.android.internal.policy.impl.BarController: void <init>(java.lang.String,int,int,int,int,int)>("StatusBar", 67108864, 268435456, 1073741824, 1, 67108864);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController> = $r12;

        $r13 = new com.android.internal.policy.impl.BarController;

        specialinvoke $r13.<com.android.internal.policy.impl.BarController: void <init>(java.lang.String,int,int,int,int,int)>("NavigationBar", 134217728, 536870912, -2147483648, 2, 134217728);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController> = $r13;

        $r14 = new com.android.internal.policy.impl.PhoneWindowManager$4;

        specialinvoke $r14.<com.android.internal.policy.impl.PhoneWindowManager$4: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress> = $r14;

        $r15 = new com.android.internal.policy.impl.PhoneWindowManager$5;

        specialinvoke $r15.<com.android.internal.policy.impl.PhoneWindowManager$5: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable> = $r15;

        $r17 = new com.android.internal.policy.impl.PhoneWindowManager$6;

        specialinvoke $r17.<com.android.internal.policy.impl.PhoneWindowManager$6: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable> = $r17;

        $r16 = new com.android.internal.policy.impl.PhoneWindowManager$9;

        specialinvoke $r16.<com.android.internal.policy.impl.PhoneWindowManager$9: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mClearHideNavigationFlag> = $r16;

        $r19 = new com.android.internal.policy.impl.PhoneWindowManager$10;

        specialinvoke $r19.<com.android.internal.policy.impl.PhoneWindowManager$10: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory> = $r19;

        $r18 = new java.lang.Object;

        specialinvoke $r18.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mScreenshotLock> = $r18;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection> = null;

        $r21 = new com.android.internal.policy.impl.PhoneWindowManager$13;

        specialinvoke $r21.<com.android.internal.policy.impl.PhoneWindowManager$13: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotTimeout> = $r21;

        $r20 = new com.android.internal.policy.impl.PhoneWindowManager$15;

        specialinvoke $r20.<com.android.internal.policy.impl.PhoneWindowManager$15: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver> = $r20;

        $r23 = new com.android.internal.policy.impl.PhoneWindowManager$16;

        specialinvoke $r23.<com.android.internal.policy.impl.PhoneWindowManager$16: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver> = $r23;

        $r22 = new com.android.internal.policy.impl.PhoneWindowManager$17;

        specialinvoke $r22.<com.android.internal.policy.impl.PhoneWindowManager$17: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver> = $r22;

        $r25 = new com.android.internal.policy.impl.PhoneWindowManager$18;

        specialinvoke $r25.<com.android.internal.policy.impl.PhoneWindowManager$18: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mRequestTransientNav> = $r25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog> = null;

        $r24 = new com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout;

        specialinvoke $r24.<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout> = $r24;

        return;
    }

    com.android.internal.statusbar.IStatusBarService getStatusBarService()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        com.android.internal.statusbar.IStatusBarService $r4, $r5, $r7;
        android.os.IBinder $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mServiceAquireLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        if $r4 != null goto label2;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("statusbar");

        $r7 = staticinvoke <com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)>($r6);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = $r7;

     label2:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean needSensorRunningLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSupportAutoRotation>;

        if $z0 == 0 goto label2;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i5 == 4 goto label1;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i6 == 10 goto label1;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i7 == 7 goto label1;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i8 != 6 goto label2;

     label1:
        return 1;

     label2:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z1 == 0 goto label3;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i4 == 2 goto label4;

     label3:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z2 == 0 goto label5;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i1 == 1 goto label4;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i2 == 3 goto label4;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i3 != 4 goto label5;

     label4:
        return 1;

     label5:
        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i0 != 1 goto label6;

        return 0;

     label6:
        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSupportAutoRotation>;

        return $z3;
    }

    void updateOrientationListenerLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r1, $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $z1 = virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: boolean canDetectOrientation()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        z0 = 1;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z2 == 0 goto label2;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z4 == 0 goto label2;

        $z5 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean needSensorRunningLp()>();

        if $z5 == 0 goto label2;

        z0 = 0;

        $z6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        if $z6 != 0 goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void enable()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 1;

     label2:
        if z0 == 0 goto label3;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        if $z3 == 0 goto label3;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void disable()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

     label3:
        return;
    }

    private void interceptPowerKeyDown(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.content.Context $r1;
        android.os.Handler $r2;
        java.lang.Runnable $r3;
        android.view.ViewConfiguration $r4;
        long $l0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled> = z0;

        if z0 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r1);

        $l0 = virtualinvoke $r4.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l0);

     label1:
        return;
    }

    private boolean interceptPowerKeyUp(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1, $z2;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z1 != 0 goto label3;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    private void cancelPendingPowerKeyAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mPowerLongPress>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

     label1:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z1 == 0 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled> = 1;

     label2:
        return;
    }

    private void interceptScreenshotChord()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l1, $l2, $l4, $l5, $l7;
        boolean $z0, $z1, $z2, $z3;
        byte $b3, $b6;
        android.os.Handler $r1;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z3 != 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime>;

        $l2 = $l1 + 150L;

        $b3 = l0 cmp $l2;

        if $b3 > 0 goto label1;

        $l4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mPowerKeyTime>;

        $l5 = $l4 + 150L;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        $l7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: long getScreenshotChordLongPressDelay()>();

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, $l7);

     label1:
        return;
    }

    private long getScreenshotChordLongPressDelay()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1;
        boolean $z0;
        android.content.Context $r2, $r4;
        android.view.ViewConfiguration $r3, $r5;
        long $l0, $l1, $l2;
        float $f0, $f1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $l1 = virtualinvoke $r5.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        $f0 = (float) $l1;

        $f1 = 2.5F * $f0;

        $l2 = (long) $f1;

        return $l2;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $l0 = virtualinvoke $r3.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        return $l0;
    }

    private void cancelPendingScreenshotChordAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    private void powerShortPress(long)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0;
        int $i1, $i2, $i3;
        android.os.PowerManager $r1, $r2, $r3;
        android.content.Context $r4;
        android.content.res.Resources $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        if $i1 >= 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r5.<android.content.res.Resources: int getInteger(int)>(17694780);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mShortPressOnPowerBehavior> = $i3;

     label1:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        tableswitch($i2)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        goto label6;

     label3:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r3.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, 4, 0);

        goto label6;

     label4:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r2.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, 4, 1);

        goto label6;

     label5:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r1.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, 4, 1);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()>();

     label6:
        return;
    }

    public void showGlobalActions()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.Handler $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(10);

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessage(int)>(10);

        return;
    }

    void showGlobalActionsInternal()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1;
        com.android.internal.policy.impl.GlobalActions $r1, $r2, $r4;
        android.os.PowerManager $r3;
        long $l0;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r5;
        android.content.Context $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("globalactions");

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        if $r1 != null goto label1;

        $r4 = new com.android.internal.policy.impl.GlobalActions;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        specialinvoke $r4.<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)>($r6, $r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions> = $r4;

     label1:
        z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isDeviceProvisioned()>();

        virtualinvoke $r2.<com.android.internal.policy.impl.GlobalActions: void showDialog(boolean,boolean)>(z0, $z1);

        if z0 == 0 goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 0);

     label2:
        return;
    }

    boolean isDeviceProvisioned()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "device_provisioned", 0);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isUserSetupComplete()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "user_setup_complete", 0, -2);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void handleLongPressOnHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i0 == 0 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i1 != 1 goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

        goto label2;

     label1:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i2 != 2 goto label2;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction()>();

     label2:
        return;
    }

    private void handleDoubleTapOnHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i0 != 1 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

     label1:
        return;
    }

    public void init(android.content.Context, android.view.IWindowManager, android.view.WindowManagerPolicy$WindowManagerFuncs)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context r1, $r13, $r17, $r47, $r48, $r50, $r52, $r54, $r56, $r57, $r74, $r82, $r83, $r88, $r92, $r93, $r98, $r101, $r104, $r107;
        android.view.IWindowManager r2;
        android.view.WindowManagerPolicy$WindowManagerFuncs r3, $r76;
        android.content.Intent r5, $r25, $r27, $r29, $r31, $r32, $r33, $r34, $r37, $r40;
        java.lang.Object $r6, $r8, $r38, $r64, $r75;
        android.view.WindowManagerInternal $r7;
        android.service.dreams.DreamManagerInternal $r9;
        com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler $r10;
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener $r11;
        android.os.Handler $r12, $r15, $r20, $r21;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r14, $r16;
        com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.internal.policy.impl.ShortcutManager $r22, $r24;
        android.content.res.Resources $r23, $r46, $r49, $r51, $r53, $r55, $r58, $r63, $r84, $r85, $r89, $r94, $r95, $r97, $r100, $r103;
        android.os.PowerManager $r39, $r44, $r106;
        java.lang.String $r42, $r43, $r60, $r61, $r62, $r71;
        android.os.PowerManager$WakeLock $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.content.IntentFilter $r59, $r69, $r72, r109, r110, r111;
        android.view.accessibility.AccessibilityManager $r65;
        android.content.BroadcastReceiver $r67, $r68, $r70;
        com.android.internal.policy.impl.SystemGesturesPointerEventListener $r73, $r77;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r79;
        com.android.internal.policy.impl.PhoneWindowManager$7 $r80;
        long[] $r81, $r86, $r90, $r91, $r96, $r99, $r102;
        android.os.Vibrator $r87;
        android.os.RemoteException $r105;
        com.android.internal.policy.impl.GlobalKeyManager $r108;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.IWindowManager;

        r3 := @parameter2: android.view.WindowManagerPolicy$WindowManagerFuncs;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext> = r1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager> = r2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs> = r3;

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/view/WindowManagerInternal");

        $r7 = (android.view.WindowManagerInternal) $r6;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerInternal mWindowManagerInternal> = $r7;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/service/dreams/DreamManagerInternal");

        $r9 = (android.service.dreams.DreamManagerInternal) $r8;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal> = $r9;

        $r10 = new com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler;

        specialinvoke $r10.<com.android.internal.policy.impl.PhoneWindowManager$PolicyHandler: void <init>(com.android.internal.policy.impl.PhoneWindowManager,com.android.internal.policy.impl.PhoneWindowManager$1)>(r0, null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler> = $r10;

        $r11 = new com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r11.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.content.Context,android.os.Handler)>(r0, $r13, $r12);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener> = $r11;

        $r14 = new com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r14.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.content.Context,android.os.Handler)>(r0, $r17, $r15);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener> = $r14;

     label1:
        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $i0 = interfaceinvoke r2.<android.view.IWindowManager: int getRotation()>();

        virtualinvoke $r16.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void setCurrentRotation(int)>($i0);

     label2:
        goto label4;

     label3:
        $r105 := @caughtexception;

     label4:
        $r18 = new com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver;

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r18.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.os.Handler)>(r0, $r20);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver> = $r18;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver mSettingsObserver>;

        virtualinvoke $r19.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()>();

        $r22 = new com.android.internal.policy.impl.ShortcutManager;

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r22.<com.android.internal.policy.impl.ShortcutManager: void <init>(android.content.Context,android.os.Handler)>(r1, $r21);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager> = $r22;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        virtualinvoke $r24.<com.android.internal.policy.impl.ShortcutManager: void observe()>();

        $r23 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r23.<android.content.res.Resources: int getInteger(int)>(17694778);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode> = $i1;

        $r25 = new android.content.Intent;

        specialinvoke $r25.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent> = $r25;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r27.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r29.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r32 = new android.content.Intent;

        specialinvoke $r32.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent> = $r32;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        virtualinvoke $r33.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.CAR_DOCK");

        $r31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        virtualinvoke $r31.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r37 = new android.content.Intent;

        specialinvoke $r37.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent> = $r37;

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

        virtualinvoke $r34.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DESK_DOCK");

        $r40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

        virtualinvoke $r40.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r38 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r39 = (android.os.PowerManager) $r38;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager> = $r39;

        $r44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $r45 = virtualinvoke $r44.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "PhoneWindowManager.mBroadcastWakeLock");

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock> = $r45;

        $r42 = "1";

        $r43 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z1 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = $z1;

        $r47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r46 = virtualinvoke $r47.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r46.<android.content.res.Resources: boolean getBoolean(int)>(17956901);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSupportAutoRotation> = $z0;

        $i5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694770);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation> = $i5;

        $i4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694775);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation> = $i4;

        $i3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694773);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation> = $i3;

        $i2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int readRotation(int)>(17694777);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation> = $i2;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r49 = virtualinvoke $r50.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r49.<android.content.res.Resources: boolean getBoolean(int)>(17956906);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer> = $z2;

        $r48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r53 = virtualinvoke $r48.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r53.<android.content.res.Resources: boolean getBoolean(int)>(17956905);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer> = $z3;

        $r52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r51 = virtualinvoke $r52.<android.content.Context: android.content.res.Resources getResources()>();

        $i6 = virtualinvoke $r51.<android.content.res.Resources: int getInteger(int)>(17694771);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility> = $i6;

        $r57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r58 = virtualinvoke $r57.<android.content.Context: android.content.res.Resources getResources()>();

        $i7 = virtualinvoke $r58.<android.content.res.Resources: int getInteger(int)>(17694772);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility> = $i7;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r55 = virtualinvoke $r54.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke $r55.<android.content.res.Resources: boolean getBoolean(int)>(17956904);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep> = $z4;

        $r56 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r63 = virtualinvoke $r56.<android.content.Context: android.content.res.Resources getResources()>();

        $z5 = virtualinvoke $r63.<android.content.res.Resources: boolean getBoolean(int)>(17956915);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled> = $z5;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        $r64 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r65 = (android.view.accessibility.AccessibilityManager) $r64;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager> = $r65;

        $r59 = new android.content.IntentFilter;

        specialinvoke $r59.<android.content.IntentFilter: void <init>()>();

        r109 = $r59;

        $r60 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_CAR_MODE>;

        virtualinvoke r109.<android.content.IntentFilter: void addAction(java.lang.String)>($r60);

        $r61 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_CAR_MODE>;

        virtualinvoke r109.<android.content.IntentFilter: void addAction(java.lang.String)>($r61);

        $r62 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_DESK_MODE>;

        virtualinvoke r109.<android.content.IntentFilter: void addAction(java.lang.String)>($r62);

        $r71 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_DESK_MODE>;

        virtualinvoke r109.<android.content.IntentFilter: void addAction(java.lang.String)>($r71);

        virtualinvoke r109.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r70 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver>;

        r5 = virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r70, r109);

        if r5 == null goto label5;

        $i8 = virtualinvoke r5.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.DOCK_STATE", 0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode> = $i8;

     label5:
        $r72 = new android.content.IntentFilter;

        specialinvoke $r72.<android.content.IntentFilter: void <init>()>();

        r110 = $r72;

        virtualinvoke r110.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke r110.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r67 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r67, r110);

        $r69 = new android.content.IntentFilter;

        specialinvoke $r69.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        r111 = $r69;

        $r68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r68, r111);

        $r77 = new com.android.internal.policy.impl.SystemGesturesPointerEventListener;

        $r80 = new com.android.internal.policy.impl.PhoneWindowManager$7;

        specialinvoke $r80.<com.android.internal.policy.impl.PhoneWindowManager$7: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        specialinvoke $r77.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: void <init>(android.content.Context,com.android.internal.policy.impl.SystemGesturesPointerEventListener$Callbacks)>(r1, $r80);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures> = $r77;

        $r79 = new com.android.internal.policy.impl.ImmersiveModeConfirmation;

        $r74 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r79.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void <init>(android.content.Context)>($r74);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation> = $r79;

        $r76 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r73 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        interfaceinvoke $r76.<android.view.WindowManagerPolicy$WindowManagerFuncs: void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>($r73);

        $r75 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r87 = (android.os.Vibrator) $r75;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator> = $r87;

        $r88 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r85 = virtualinvoke $r88.<android.content.Context: android.content.res.Resources getResources()>();

        $r86 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r85, 17235994);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mLongPressVibePattern> = $r86;

        $r83 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r84 = virtualinvoke $r83.<android.content.Context: android.content.res.Resources getResources()>();

        $r81 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r84, 17235995);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mVirtualKeyVibePattern> = $r81;

        $r82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r95 = virtualinvoke $r82.<android.content.Context: android.content.res.Resources getResources()>();

        $r96 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r95, 17235996);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mKeyboardTapVibePattern> = $r96;

        $r93 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r94 = virtualinvoke $r93.<android.content.Context: android.content.res.Resources getResources()>();

        $r91 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r94, 17235997);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mClockTickVibePattern> = $r91;

        $r92 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r89 = virtualinvoke $r92.<android.content.Context: android.content.res.Resources getResources()>();

        $r90 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r89, 17235998);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mCalendarDateVibePattern> = $r90;

        $r104 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r103 = virtualinvoke $r104.<android.content.Context: android.content.res.Resources getResources()>();

        $r102 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r103, 17235999);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeDisabledVibePattern> = $r102;

        $r101 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r100 = virtualinvoke $r101.<android.content.Context: android.content.res.Resources getResources()>();

        $r99 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r100, 17236000);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeEnabledVibePattern> = $r99;

        $r98 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r97 = virtualinvoke $r98.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r97.<android.content.res.Resources: boolean getBoolean(int)>(17956900);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled> = $z7;

        $r108 = new com.android.internal.policy.impl.GlobalKeyManager;

        $r107 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r108.<com.android.internal.policy.impl.GlobalKeyManager: void <init>(android.content.Context)>($r107);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager> = $r108;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void initializeHdmiState()>();

        $r106 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $z6 = virtualinvoke $r106.<android.os.PowerManager: boolean isInteractive()>();

        if $z6 != 0 goto label6;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void goingToSleep(int)>(2);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void readConfigurationDependentBehaviors()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694793);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior> = $i0;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i1 < 0 goto label1;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i5 <= 2 goto label2;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior> = 0;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r4.<android.content.res.Resources: int getInteger(int)>(17694794);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = $i2;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i3 < 0 goto label3;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i4 <= 1 goto label4;

     label3:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = 0;

     label4:
        return;
    }

    public void setInitialDisplaySize(android.view.Display, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.Display r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        android.content.res.Resources r2;
        java.lang.String r3, $r14, $r15, $r16, $r17, $r18, $r19;
        android.content.Context $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int[] $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.Display;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        if $r4 == null goto label01;

        $i7 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i7 == 0 goto label02;

     label01:
        return;

     label02:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.Display mDisplay> = r1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        if i0 <= i1 goto label04;

        i3 = i1;

        i4 = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 2;

        $z10 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17956903);

        if $z10 == 0 goto label03;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 3;

        goto label06;

     label03:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 1;

        goto label06;

     label04:
        i3 = i0;

        i4 = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation> = 2;

        $z0 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17956903);

        if $z0 == 0 goto label05;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 1;

        goto label06;

     label05:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation> = 3;

     label06:
        $i8 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104912);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight> = $i8;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        $i10 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104913);

        $r7[$i11] = $i10;

        $r6[$i9] = $i10;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        $i14 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104914);

        $r9[$i13] = $i14;

        $r8[$i12] = $i14;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        $i18 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104915);

        $r13[$i17] = $i18;

        $r12[$i19] = $i18;

        $r11[$i16] = $i18;

        $r10[$i15] = $i18;

        $i20 = i3 * 160;

        i5 = $i20 / i2;

        $i21 = i4 * 160;

        i6 = $i21 / i2;

        if i5 >= 600 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove> = $z7;

        $z1 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17956943);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = $z1;

        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("qemu.hw.mainkeys");

        $r15 = "1";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label09;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 0;

        goto label10;

     label09:
        $r14 = "0";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label10;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar> = 1;

     label10:
        $r16 = "portrait";

        $r17 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.demo.hdmirotation");

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z4 == 0 goto label11;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation> = $i23;

        goto label12;

     label11:
        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation> = $i22;

     label12:
        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.hdmirotationlock", 0);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock> = $z6;

        if i6 < 960 goto label13;

        if i5 < 720 goto label13;

        $z5 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17956969);

        if $z5 == 0 goto label13;

        $r19 = "true";

        $r18 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("config.override_forced_orient");

        $z9 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z9 != 0 goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation> = $z8;

        return;
    }

    private boolean canHideNavigationBar()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1, $z2;
        android.view.accessibility.AccessibilityManager $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z1 = virtualinvoke $r1.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isDefaultOrientationForced()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation>;

        return $z0;
    }

    public void setDisplayOverscan(android.view.Display, int, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.Display r1;
        int i0, i1, i2, i3, $i4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.Display;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i4 != 0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight> = i2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom> = i3;

     label1:
        return;
    }

    public void updateSettings()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.ContentResolver r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z8;
        java.lang.Object r2, $r5;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte b1, $b13, $b14;
        java.lang.Throwable r3, $r10;
        android.content.Context $r4, $r7;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r6, $r8;
        android.os.Handler $r9;
        java.lang.String r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $i3 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "end_button_behavior", 2, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior> = $i3;

        $i4 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "incall_power_button_behavior", 1, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior> = $i4;

        $i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "wake_gesture_enabled", 0, -2);

        if $i5 == 0 goto label02;

        $z8 = 1;

        goto label03;

     label02:
        $z8 = 0;

     label03:
        z1 = $z8;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        if $z3 == z1 goto label04;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWakeGestureEnabledSetting> = z1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateWakeGestureListenerLp()>();

     label04:
        i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_rotation", 0, -2);

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

        if $i7 == i0 goto label05;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation> = i0;

        z0 = 1;

     label05:
        $i6 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 0, -2);

        if $i6 == 0 goto label06;

        $b14 = 0;

        goto label07;

     label06:
        $b14 = 1;

     label07:
        b1 = $b14;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i8 == b1 goto label08;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode> = b1;

        z0 = 1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

     label08:
        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady>;

        if $z4 == 0 goto label11;

        i2 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "pointer_location", 0, -2);

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode>;

        if $i12 == i2 goto label11;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPointerLocationMode> = i2;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        if i2 == 0 goto label09;

        $b13 = 1;

        goto label10;

     label09:
        $b13 = 2;

     label10:
        virtualinvoke $r9.<android.os.Handler: boolean sendEmptyMessage(int)>($b13);

     label11:
        $i9 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_off_timeout", 0, -2);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout> = $i9;

        r11 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r1, "default_input_method", -2);

        if r11 == null goto label12;

        $i11 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i11 <= 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        z2 = $z6;

        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        if $z5 == z2 goto label14;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput> = z2;

        z0 = 1;

     label14:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        if $r6 == null goto label15;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentUserId>;

        virtualinvoke $r8.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void loadSetting(int)>($i10);

     label15:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PolicyControl: void reloadFromSetting(android.content.Context)>($r7);

        exitmonitor r2;

     label16:
        goto label19;

     label17:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label18:
        throw r3;

     label19:
        if z0 == 0 goto label20;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

     label20:
        return;

        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private void updateWakeGestureListenerLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean shouldEnableWakeGestureLp()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: void requestWakeUpTrigger()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: void cancelWakeUpTrigger()>();

     label2:
        return;
    }

    private boolean shouldEnableWakeGestureLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener $r1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        if $z2 == 0 goto label1;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i0 == 0 goto label2;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        $z3 = virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: boolean isSupported()>();

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private void enablePointerLocation()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1, $r7;
        android.view.WindowManager r2;
        com.android.internal.widget.PointerLocationView $r3, $r4, $r6, $r10, $r11;
        android.content.Context $r5, $r8;
        boolean $z0;
        java.lang.Object $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r12;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        if $r3 != null goto label2;

        $r4 = new com.android.internal.widget.PointerLocationView;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r4.<com.android.internal.widget.PointerLocationView: void <init>(android.content.Context)>($r5);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView> = $r4;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        virtualinvoke $r6.<com.android.internal.widget.PointerLocationView: void setPrintCoords(boolean)>(0);

        $r7 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r7.<android.view.WindowManager$LayoutParams: void <init>(int,int)>(-1, -1);

        r1 = $r7;

        r1.<android.view.WindowManager$LayoutParams: int type> = 2015;

        r1.<android.view.WindowManager$LayoutParams: int flags> = 1304;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isHighEndGfx()>();

        if $z0 == 0 goto label1;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i3 | 16777216;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i2;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i4 = $i5 | 2;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i4;

     label1:
        r1.<android.view.WindowManager$LayoutParams: int format> = -3;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>("PointerLocation");

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r2 = (android.view.WindowManager) $r9;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i1 = $i0 | 2;

        r1.<android.view.WindowManager$LayoutParams: int inputFeatures> = $i1;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke r2.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r10, r1);

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke $r12.<android.view.WindowManagerPolicy$WindowManagerFuncs: void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>($r11);

     label2:
        return;
    }

    private void disablePointerLocation()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager r1;
        com.android.internal.widget.PointerLocationView $r2, $r3, $r7;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r4;
        android.content.Context $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowManagerFuncs: void unregisterPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>($r3);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r1 = (android.view.WindowManager) $r6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView>;

        interfaceinvoke r1.<android.view.WindowManager: void removeView(android.view.View)>($r7);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.widget.PointerLocationView mPointerLocationView> = null;

     label1:
        return;
    }

    private int readRotation(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.content.res.Resources$NotFoundException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        i1 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(i0);

        lookupswitch(i1)
        {
            case 0: goto label2;
            case 90: goto label3;
            case 180: goto label4;
            case 270: goto label5;
            default: goto label6;
        };

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return 2;

     label5:
        return 3;

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return -1;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label7;
    }

    public int checkAddPermission(android.view.WindowManager$LayoutParams, int[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int[] r2;
        int i0, $i1;
        java.lang.String r3;
        android.content.Context $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 := @parameter1: int[];

        i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        r2[0] = -1;

        if i0 < 2000 goto label1;

        if i0 <= 2999 goto label2;

     label1:
        return 0;

     label2:
        r3 = null;

        tableswitch(i0)
        {
            case 2002: goto label5;
            case 2003: goto label5;
            case 2004: goto label6;
            case 2005: goto label3;
            case 2006: goto label5;
            case 2007: goto label5;
            case 2008: goto label6;
            case 2009: goto label6;
            case 2010: goto label5;
            case 2011: goto label4;
            case 2012: goto label6;
            case 2013: goto label4;
            case 2014: goto label6;
            case 2015: goto label6;
            case 2016: goto label6;
            case 2017: goto label6;
            case 2018: goto label6;
            case 2019: goto label6;
            case 2020: goto label6;
            case 2021: goto label6;
            case 2022: goto label6;
            case 2023: goto label4;
            case 2024: goto label6;
            case 2025: goto label6;
            case 2026: goto label6;
            case 2027: goto label6;
            case 2028: goto label6;
            case 2029: goto label6;
            case 2030: goto label4;
            case 2031: goto label4;
            default: goto label6;
        };

     label3:
        r2[0] = 45;

        goto label7;

     label4:
        goto label7;

     label5:
        r3 = "android.permission.SYSTEM_ALERT_WINDOW";

        r2[0] = 24;

        goto label7;

     label6:
        r3 = "android.permission.INTERNAL_SYSTEM_WINDOW";

     label7:
        if r3 == null goto label8;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r3);

        if $i1 == 0 goto label8;

        return -8;

     label8:
        return 0;
    }

    public boolean checkShowToOwnerOnly(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 3: goto label2;
            case 2000: goto label2;
            case 2001: goto label2;
            case 2002: goto label2;
            case 2007: goto label2;
            case 2008: goto label2;
            case 2009: goto label2;
            case 2014: goto label2;
            case 2017: goto label2;
            case 2018: goto label2;
            case 2019: goto label2;
            case 2020: goto label2;
            case 2021: goto label2;
            case 2022: goto label2;
            case 2024: goto label2;
            case 2025: goto label2;
            case 2026: goto label2;
            case 2027: goto label2;
            case 2028: goto label2;
            case 2029: goto label2;
            case 2030: goto label2;
            default: goto label1;
        };

     label1:
        $i2 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 0 goto label2;

        return 1;

     label2:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if $i1 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2000: goto label2;
            case 2006: goto label1;
            case 2015: goto label1;
            default: goto label3;
        };

     label1:
        $i1 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 | 24;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i2;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = $i3 & -262145;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

        goto label3;

     label2:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardHidden>;

        if $z1 == 0 goto label3;

        $i13 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i12 = $i13 & -1048577;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i12;

        $i15 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i14 = $i15 & -1025;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i14;

     label3:
        $i5 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 == 2000 goto label4;

        $i10 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i11 = $i10 & -1025;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i11;

     label4:
        $z0 = staticinvoke <android.app.ActivityManager: boolean isHighEndGfx()>();

        if $z0 == 0 goto label5;

        $i6 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = $i6 & -2147483648;

        if $i7 == 0 goto label5;

        $i8 = r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        $i9 = $i8 | 1536;

        r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i9;

     label5:
        return;
    }

    void readLidState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: int getLidState()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = $i0;

        return;
    }

    private void readCameraLensCoverState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r1;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: int getCameraLensCoverState()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState> = $i0;

        return;
    }

    private boolean isHidden(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label7;
        };

     label1:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i2 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i1 != 1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;

     label7:
        return 0;
    }

    public void adjustConfigurationLw(android.content.res.Configuration, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.res.Configuration r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 & 1;

        if $i2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHaveBuiltInKeyboard> = $z3;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        $i3 = r1.<android.content.res.Configuration: int keyboard>;

        if $i3 == 1 goto label3;

        if i0 != 1 goto label4;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility>;

        $z2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isHidden(int)>($i6);

        if $z2 == 0 goto label4;

     label3:
        r1.<android.content.res.Configuration: int hardKeyboardHidden> = 2;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        if $z0 != 0 goto label4;

        r1.<android.content.res.Configuration: int keyboardHidden> = 2;

     label4:
        $i4 = r1.<android.content.res.Configuration: int navigation>;

        if $i4 == 1 goto label5;

        if i1 != 1 goto label6;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility>;

        $z1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isHidden(int)>($i5);

        if $z1 == 0 goto label6;

     label5:
        r1.<android.content.res.Configuration: int navigationHidden> = 2;

     label6:
        return;
    }

    public int windowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 < 1 goto label01;

        if i0 > 99 goto label01;

        return 2;

     label01:
        tableswitch(i0)
        {
            case 2000: goto label17;
            case 2001: goto label06;
            case 2002: goto label05;
            case 2003: goto label12;
            case 2004: goto label32;
            case 2005: goto label09;
            case 2006: goto label21;
            case 2007: goto label10;
            case 2008: goto label08;
            case 2009: goto label19;
            case 2010: goto label24;
            case 2011: goto label13;
            case 2012: goto label14;
            case 2013: goto label04;
            case 2014: goto label18;
            case 2015: goto label28;
            case 2016: goto label27;
            case 2017: goto label16;
            case 2018: goto label30;
            case 2019: goto label22;
            case 2020: goto label20;
            case 2021: goto label29;
            case 2022: goto label31;
            case 2023: goto label11;
            case 2024: goto label23;
            case 2025: goto label02;
            case 2026: goto label26;
            case 2027: goto label25;
            case 2028: goto label08;
            case 2029: goto label15;
            case 2030: goto label03;
            case 2031: goto label07;
            default: goto label32;
        };

     label02:
        return 1;

     label03:
        return 2;

     label04:
        return 2;

     label05:
        return 3;

     label06:
        return 4;

     label07:
        return 5;

     label08:
        return 6;

     label09:
        return 7;

     label10:
        return 8;

     label11:
        return 9;

     label12:
        return 10;

     label13:
        return 11;

     label14:
        return 12;

     label15:
        return 13;

     label16:
        return 14;

     label17:
        return 15;

     label18:
        return 16;

     label19:
        return 17;

     label20:
        return 18;

     label21:
        return 19;

     label22:
        return 20;

     label23:
        return 21;

     label24:
        return 22;

     label25:
        return 23;

     label26:
        return 24;

     label27:
        return 25;

     label28:
        return 26;

     label29:
        return 27;

     label30:
        return 28;

     label31:
        return 29;

     label32:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown window type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 2;
    }

    public int subWindowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1000: goto label1;
            case 1001: goto label2;
            case 1002: goto label4;
            case 1003: goto label1;
            case 1004: goto label3;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return -2;

     label3:
        return -1;

     label4:
        return 2;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown sub-window type: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 0;
    }

    public int getMaxWallpaperLayer()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int windowTypeToLayerLw(int)>(2000);

        return $i0;
    }

    public int getAboveUniverseLayer()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int windowTypeToLayerLw(int)>(2010);

        return $i0;
    }

    public int getNonDecorDisplayWidth(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3, $i4;
        boolean $z0, $z1;
        int[] $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z1 == 0 goto label1;

        if i0 <= i1 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i3 = $r1[i2];

        $i4 = i0 - $i3;

        return $i4;

     label1:
        return i0;
    }

    public int getNonDecorDisplayHeight(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3, $i4;
        boolean $z0, $z1;
        int[] $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z1 == 0 goto label1;

        if i0 >= i1 goto label2;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i3 = $r1[i2];

        $i4 = i1 - $i3;

        return $i4;

     label2:
        return i1;
    }

    public int getConfigDisplayWidth(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayWidth(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    public int getConfigDisplayHeight(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayHeight(int,int,int)>(i0, i1, i2);

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i5 = $i3 - $i4;

        return $i5;
    }

    public boolean isForceHiding(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 & 1024;

        if $i1 != 0 goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)>(r1);

        if $z0 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecureIncludingHidden()>();

        if $z2 != 0 goto label2;

     label1:
        $i2 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2029 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2000 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.WindowManager$LayoutParams r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = r2.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2000: goto label1;
            case 2013: goto label1;
            case 2019: goto label1;
            case 2023: goto label1;
            case 2025: goto label1;
            case 2029: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public android.view.WindowManagerPolicy$WindowState getWinShowWhenLockedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        return $r1;
    }

    public android.view.View addStartingWindow(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        java.lang.String r2, $r15, $r25, $r36, $r38;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        android.content.res.CompatibilityInfo r3;
        java.lang.CharSequence r4, $r12;
        android.view.WindowManager r5;
        android.view.View r6, $r22, r42;
        android.content.Context r7;
        android.content.res.TypedArray r8, $r13;
        android.view.WindowManager$LayoutParams r9;
        java.lang.Throwable r10, $r34;
        boolean $z0, $z1, $z2, $z3;
        android.view.ViewParent $r11, $r19, $r20, $r21, $r31, $r33, $r39;
        java.lang.StringBuilder $r14, $r17, $r18, $r23, $r26, $r27, $r29, $r30, $r35, $r37;
        java.lang.Object $r16;
        java.lang.RuntimeException $r24, r44;
        android.view.WindowManager$BadTokenException $r28, r43;
        android.content.pm.PackageManager$NameNotFoundException $r32;
        android.view.Window r40;
        android.content.res.Resources r41;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.res.CompatibilityInfo;

        r4 := @parameter4: java.lang.CharSequence;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        if r2 != null goto label01;

        return null;

     label01:
        r5 = null;

        r6 = null;

     label02:
        r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i5 = virtualinvoke r7.<android.content.Context: int getThemeResId()>();

        if i0 != $i5 goto label03;

        if i1 == 0 goto label06;

     label03:
        r7 = virtualinvoke r7.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r2, 0);

        virtualinvoke r7.<android.content.Context: void setTheme(int)>(i0);

     label04:
        goto label06;

     label05:
        $r32 := @caughtexception;

     label06:
        r40 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>(r7);

        r8 = virtualinvoke r40.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $z0 = virtualinvoke r8.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(12, 0);

        if $z0 != 0 goto label07;

        $z1 = virtualinvoke r8.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        if $z1 == 0 goto label09;

     label07:
        if r6 == null goto label08;

        $r11 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r11 != null goto label08;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label08:
        return null;

     label09:
        r41 = virtualinvoke r7.<android.content.Context: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke r41.<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>(i1, r4);

        virtualinvoke r40.<android.view.Window: void setTitle(java.lang.CharSequence)>($r12);

        virtualinvoke r40.<android.view.Window: void setType(int)>(3);

        $i6 = i4 | 16;

        $i8 = $i6 | 8;

        $i9 = $i8 | 131072;

        $i7 = i4 | 16;

        $i10 = $i7 | 8;

        $i11 = $i10 | 131072;

        virtualinvoke r40.<android.view.Window: void setFlags(int,int)>($i9, $i11);

        virtualinvoke r40.<android.view.Window: void setDefaultIcon(int)>(i2);

        virtualinvoke r40.<android.view.Window: void setDefaultLogo(int)>(i3);

        virtualinvoke r40.<android.view.Window: void setLayout(int,int)>(-1, -1);

        r9 = virtualinvoke r40.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r9.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = r1;

        r9.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = r2;

        $r13 = virtualinvoke r40.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $i14 = virtualinvoke $r13.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r9.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i14;

        $i12 = r9.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i13 = $i12 | 1;

        r9.<android.view.WindowManager$LayoutParams: int privateFlags> = $i13;

        $i15 = r9.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i16 = $i15 | 16;

        r9.<android.view.WindowManager$LayoutParams: int privateFlags> = $i16;

        $z2 = virtualinvoke r3.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        if $z2 != 0 goto label10;

        $i18 = r9.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i17 = $i18 | 128;

        r9.<android.view.WindowManager$LayoutParams: int privateFlags> = $i17;

     label10:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r15);

        $r16 = virtualinvoke r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r5 = (android.view.WindowManager) $r16;

        r6 = virtualinvoke r40.<android.view.Window: android.view.View getDecorView()>();

        $z3 = virtualinvoke r40.<android.view.Window: boolean isFloating()>();

        if $z3 == 0 goto label13;

     label11:
        if r6 == null goto label12;

        $r21 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r21 != null goto label12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label12:
        return null;

     label13:
        interfaceinvoke r5.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r6, r9);

        $r20 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r20 == null goto label14;

        $r22 = r6;

        goto label15;

     label14:
        $r22 = null;

     label15:
        r42 = $r22;

     label16:
        if r6 == null goto label17;

        $r19 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r19 != null goto label17;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label17:
        return r42;

     label18:
        $r28 := @caughtexception;

        r43 = $r28;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already running, starting window not displayed. ");

        $r36 = virtualinvoke r43.<android.view.WindowManager$BadTokenException: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r38);

     label19:
        if r6 == null goto label25;

        $r33 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r33 != null goto label25;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

        goto label25;

     label20:
        $r24 := @caughtexception;

        r44 = $r24;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed creating starting window");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r25, r44);

     label21:
        if r6 == null goto label25;

        $r31 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r31 != null goto label25;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

        goto label25;

     label22:
        $r34 := @caughtexception;

        r10 = $r34;

     label23:
        if r6 == null goto label24;

        $r39 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        if $r39 != null goto label24;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r5.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r6);

     label24:
        throw r10;

     label25:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label05;
        catch android.view.WindowManager$BadTokenException from label02 to label07 with label18;
        catch android.view.WindowManager$BadTokenException from label09 to label11 with label18;
        catch android.view.WindowManager$BadTokenException from label13 to label16 with label18;
        catch java.lang.RuntimeException from label02 to label07 with label20;
        catch java.lang.RuntimeException from label09 to label11 with label20;
        catch java.lang.RuntimeException from label13 to label16 with label20;
        catch java.lang.Throwable from label02 to label07 with label22;
        catch java.lang.Throwable from label09 to label11 with label22;
        catch java.lang.Throwable from label13 to label16 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public void removeStartingWindow(android.os.IBinder, android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.IBinder r1;
        android.view.View r2;
        android.view.WindowManager r3;
        android.content.Context $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.View;

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r3 = (android.view.WindowManager) $r5;

        interfaceinvoke r3.<android.view.WindowManager: void removeView(android.view.View)>(r2);

     label1:
        return;
    }

    public int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r3, $r6, $r8, $r12, $r14;
        android.view.WindowManager$LayoutParams r2;
        int $i0;
        android.content.Context $r4, $r5, $r9, $r10, $r11;
        com.android.internal.policy.impl.BarController $r7, $r13;
        boolean $z0, $z1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = r2.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2000: goto label01;
            case 2014: goto label06;
            case 2017: goto label07;
            case 2019: goto label03;
            case 2024: goto label05;
            case 2029: goto label08;
            default: goto label10;
        };

     label01:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r12 == null goto label02;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z1 = interfaceinvoke $r14.<android.view.WindowManagerPolicy$WindowState: boolean isAlive()>();

        if $z1 == 0 goto label02;

        return -7;

     label02:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = r1;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r13.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(r1);

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r15.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void hideScrim()>();

        goto label10;

     label03:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r6 == null goto label04;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z0 = interfaceinvoke $r8.<android.view.WindowManagerPolicy$WindowState: boolean isAlive()>();

        if $z0 == 0 goto label04;

        return -7;

     label04:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = r1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r7.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(r1);

        goto label10;

     label05:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label10;

     label06:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label10;

     label07:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "PhoneWindowManager");

        goto label10;

     label08:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim>;

        if $r3 == null goto label09;

        return -7;

     label09:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim> = r1;

     label10:
        return 0;
    }

    public void removeWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r3, $r4;
        com.android.internal.policy.impl.BarController $r5, $r6;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r2 != r1 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r6.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(null);

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void showScrim()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim>;

        if $r3 != r1 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", "Removing keyguard scrim");

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguardScrim> = null;

     label2:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r4 != r1 goto label3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar> = null;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r5.<com.android.internal.policy.impl.BarController: void setWindow(android.view.WindowManagerPolicy$WindowState)>(null);

     label3:
        return;
    }

    public int selectAnimationLw(android.view.WindowManagerPolicy$WindowState, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.WindowManager$LayoutParams $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r1 != $r2 goto label11;

        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i2 = $r5.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i2 & 1024;

        if $i3 == 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z0 = $z4;

        if i0 == 2 goto label03;

        if i0 != 4 goto label06;

     label03:
        if z0 == 0 goto label04;

        $i4 = -1;

        goto label05;

     label04:
        $i4 = 17432605;

     label05:
        return $i4;

     label06:
        if i0 == 1 goto label07;

        if i0 != 3 goto label10;

     label07:
        if z0 == 0 goto label08;

        $i5 = -1;

        goto label09;

     label08:
        $i5 = 17432604;

     label09:
        return $i5;

     label10:
        goto label19;

     label11:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if r1 != $r3 goto label19;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom>;

        if $z3 == 0 goto label15;

        if i0 == 2 goto label12;

        if i0 != 4 goto label13;

     label12:
        return 17432599;

     label13:
        if i0 == 1 goto label14;

        if i0 != 3 goto label19;

     label14:
        return 17432598;

     label15:
        if i0 == 2 goto label16;

        if i0 != 4 goto label17;

     label16:
        return 17432603;

     label17:
        if i0 == 1 goto label18;

        if i0 != 3 goto label19;

     label18:
        return 17432602;

     label19:
        if i0 != 5 goto label20;

        $z2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean hasAppShownWindows()>();

        if $z2 == 0 goto label21;

        return 17432593;

     label20:
        $r4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2023 goto label21;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        if $z1 == 0 goto label21;

        if i0 != 1 goto label21;

        return -1;

     label21:
        return 0;
    }

    public void selectRotationAnimationLw(int[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int[] r1;
        android.view.WindowManagerPolicy$WindowState $r2, $r3;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r4;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: int[];

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r2 == null goto label4;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z0 == 0 goto label4;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $r4 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int rotationAnimation>;

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        r1[0] = 17432645;

        r1[1] = 17432643;

        goto label5;

     label2:
        r1[0] = 17432644;

        r1[1] = 17432643;

        goto label5;

     label3:
        r1[1] = 0;

        r1[0] = 0;

        goto label5;

     label4:
        r1[1] = 0;

        r1[0] = 0;

     label5:
        return;
    }

    public boolean validateRotationAnimationLw(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, $i2, $i3;
        boolean z0, $z1;
        int[] r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        lookupswitch(i0)
        {
            case 17432644: goto label1;
            case 17432645: goto label1;
            default: goto label5;
        };

     label1:
        if z0 == 0 goto label2;

        return 0;

     label2:
        r1 = newarray (int)[2];

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void selectRotationAnimationLw(int[])>(r1);

        $i2 = r1[0];

        if i0 != $i2 goto label3;

        $i3 = r1[1];

        if i1 != $i3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        return 1;
    }

    public android.view.animation.Animation createForceHideEnterAnimation(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1;
        android.view.animation.Animation r1, $r7, $r13, $r17, $r18, r19;
        android.view.animation.AnimationSet r2, r20;
        android.content.Context $r3, $r8, $r16;
        java.util.List $r4, $r9, $r12;
        java.lang.Object $r5, $r10, $r15;
        com.android.internal.policy.impl.LogDecelerateInterpolator $r6, $r11, $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z1 == 0 goto label1;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r18 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r16, 17432620);

        return $r18;

     label1:
        if z0 == 0 goto label2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r8, 17432621);

        r2 = (android.view.animation.AnimationSet) r1;

        $r9 = virtualinvoke r2.<android.view.animation.AnimationSet: java.util.List getAnimations()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (android.view.animation.Animation) $r10;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.LogDecelerateInterpolator mLogDecelerateInterpolator>;

        virtualinvoke $r13.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r11);

        $r12 = virtualinvoke r2.<android.view.animation.AnimationSet: java.util.List getAnimations()>();

        $r15 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (android.view.animation.Animation) $r15;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.LogDecelerateInterpolator mLogDecelerateInterpolator>;

        virtualinvoke $r17.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r14);

        return r2;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r19 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r3, 17432619);

        r20 = (android.view.animation.AnimationSet) r19;

        $r4 = virtualinvoke r20.<android.view.animation.AnimationSet: java.util.List getAnimations()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (android.view.animation.Animation) $r5;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.LogDecelerateInterpolator mLogDecelerateInterpolator>;

        virtualinvoke $r7.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r6);

        return r20;
    }

    public android.view.animation.Animation createForceHideWallpaperExitAnimation(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.content.Context $r1;
        android.view.animation.Animation $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r1, 17432624);

        return $r2;
    }

    private static void awakenDreams()
    {
        android.service.dreams.IDreamManager r0;
        android.os.RemoteException $r2;

        r0 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.IDreamManager getDreamManager()>();

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<android.service.dreams.IDreamManager: void awaken()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static android.service.dreams.IDreamManager getDreamManager()
    {
        android.os.IBinder $r0;
        android.service.dreams.IDreamManager $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("dreams");

        $r1 = staticinvoke <android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    android.telecom.TelecomManager getTelecommService()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        return $r3;
    }

    static android.media.IAudioService getAudioService()
    {
        android.media.IAudioService r0;
        android.os.IBinder $r1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("audio");

        r0 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Unable to find IAudioService interface.");

     label1:
        return r0;
    }

    boolean keyguardOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean inKeyguardRestrictedKeyInputMode()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2;
        int i0, i1, i2, i3, i4, i6, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i47, i51, i53, i54, i55, i56, i57, i58, i59;
        boolean z0, z1, z2, $z3, $z4, $z6, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z25, $z26, $z27, $z28;
        long l5, l7, $l38, $l42, $l44;
        android.content.ContentResolver $r3, $r7, $r10, $r16;
        android.content.Context $r4, $r9, $r11, $r12, $r14, $r18, $r22, $r26, $r35, $r41, $r45;
        android.os.PowerManager $r5, $r6, $r8;
        android.os.UserHandle $r13, $r21, $r27, $r34, $r40, $r46;
        android.content.Intent $r15, $r39, $r42, $r47, r81, r82, r84, r87, r90;
        byte $b17, $b25, $b43, b52, b60;
        com.android.internal.policy.impl.GlobalKeyManager $r17;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r19;
        android.util.SparseArray $r23;
        java.lang.Object $r24;
        com.android.internal.policy.impl.ShortcutManager $r28, $r32;
        java.lang.StringBuilder $r29, $r31, $r37, $r61, $r62, $r64, $r65, $r68, $r70, $r71, $r74, $r75, $r76, $r77;
        java.lang.String $r30, $r38, $r63, $r67, $r69, $r73, $r78, r89;
        java.lang.Runnable $r33, $r50, $r53, $r54;
        android.os.Handler $r44, $r49, $r52, $r55;
        int[] $r48, $r56;
        android.service.dreams.DreamManagerInternal $r51, $r58, $r59;
        android.view.WindowManager$LayoutParams $r57, r80;
        android.content.ActivityNotFoundException $r60, $r66, $r72, r85, r88, r91;
        android.telecom.TelecomManager r79;
        android.view.KeyCharacterMap r83, r86;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardOn()>();

        i1 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        i2 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        i3 = virtualinvoke r2.<android.view.KeyEvent: int getMetaState()>();

        i4 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        $i11 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i11 != 0 goto label01;

        $z23 = 1;

        goto label02;

     label01:
        $z23 = 0;

     label02:
        z1 = $z23;

        z2 = virtualinvoke r2.<android.view.KeyEvent: boolean isCanceled()>();

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z4 == 0 goto label05;

        $i47 = i4 & 1024;

        if $i47 != 0 goto label05;

        $z27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z27 == 0 goto label03;

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z22 != 0 goto label03;

        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime>;

        l7 = $l42 + 150L;

        $b43 = l5 cmp l7;

        if $b43 >= 0 goto label03;

        $l44 = l7 - l5;

        return $l44;

     label03:
        if i1 != 25 goto label05;

        $z28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord>;

        if $z28 == 0 goto label05;

        if z1 != 0 goto label04;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 0;

     label04:
        return -1L;

     label05:
        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingMetaAction>;

        if $z3 == 0 goto label06;

        $z26 = staticinvoke <android.view.KeyEvent: boolean isMetaKey(int)>(i1);

        if $z26 != 0 goto label06;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingMetaAction> = 0;

     label06:
        if i1 != 3 goto label24;

        if z1 != 0 goto label12;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPreloadRecentApps()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 0;

        $z21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed>;

        if $z21 == 0 goto label07;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeConsumed> = 0;

        return -1L;

     label07:
        if z2 == 0 goto label08;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring HOME; event canceled.");

        return -1L;

     label08:
        r79 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        if r79 == null goto label09;

        $z25 = virtualinvoke r79.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z25 == 0 goto label09;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring HOME; there\'s a ringing incoming call.");

        return -1L;

     label09:
        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i41 == 0 goto label10;

        $r52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        virtualinvoke $r52.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r53);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending> = 1;

        $r55 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        $i39 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        $l38 = (long) $i39;

        virtualinvoke $r55.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r54, $l38);

        return -1L;

     label10:
        $r59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal>;

        if $r59 == null goto label11;

        $r58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal>;

        $z20 = virtualinvoke $r58.<android.service.dreams.DreamManagerInternal: boolean isDreaming()>();

        if $z20 == 0 goto label11;

        $r51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal>;

        virtualinvoke $r51.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

        return -1L;

     label11:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()>();

        return -1L;

     label12:
        if r1 == null goto label13;

        $r57 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        goto label14;

     label13:
        $r57 = null;

     label14:
        r80 = $r57;

        if r80 == null goto label19;

        i6 = r80.<android.view.WindowManager$LayoutParams: int type>;

        if i6 == 2029 goto label15;

        if i6 == 2009 goto label15;

        $i35 = r80.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i34 = $i35 & 1024;

        if $i34 == 0 goto label16;

     label15:
        return 0L;

     label16:
        $r48 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        i51 = lengthof $r48;

        i8 = 0;

     label17:
        if i8 >= i51 goto label19;

        $r56 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        $i40 = $r56[i8];

        if i6 != $i40 goto label18;

        return -1L;

     label18:
        i8 = i8 + 1;

        goto label17;

     label19:
        if i2 != 0 goto label22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 1;

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending>;

        if $z19 == 0 goto label20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomeDoubleTapPending> = 0;

        $r49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeDoubleTapTimeoutRunnable>;

        virtualinvoke $r49.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r50);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleDoubleTapOnHome()>();

        goto label23;

     label20:
        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        if $i37 == 1 goto label21;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        if $i36 != 1 goto label23;

     label21:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void preloadRecentApps()>();

        goto label23;

     label22:
        $i32 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        $i31 = $i32 & 128;

        if $i31 == 0 goto label23;

        if z0 != 0 goto label23;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()>();

     label23:
        return -1L;

     label24:
        if i1 != 82 goto label26;

        if z1 == 0 goto label25;

        if i2 != 0 goto label25;

        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports>;

        if $z17 == 0 goto label25;

        $i33 = i3 & 1;

        if $i33 != 1 goto label25;

        $r47 = new android.content.Intent;

        specialinvoke $r47.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BUG_REPORT");

        r81 = $r47;

        $r45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r46 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r45.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r81, $r46, null, null, null, 0, null, null);

        return -1L;

     label25:
        goto label51;

     label26:
        if i1 != 84 goto label29;

        if z1 == 0 goto label27;

        if i2 != 0 goto label28;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        goto label28;

     label27:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp>;

        if $z18 == 0 goto label28;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        return -1L;

     label28:
        return 0L;

     label29:
        if i1 != 187 goto label32;

        if z0 != 0 goto label31;

        if z1 == 0 goto label30;

        if i2 != 0 goto label30;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void preloadRecentApps()>();

        goto label31;

     label30:
        if z1 != 0 goto label31;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void toggleRecentApps()>();

     label31:
        return -1L;

     label32:
        if i1 != 219 goto label37;

        if z1 == 0 goto label34;

        if i2 != 0 goto label33;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 0;

        goto label36;

     label33:
        if i2 != 1 goto label36;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 1;

        if z0 != 0 goto label36;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()>();

        goto label36;

     label34:
        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed>;

        if $z15 == 0 goto label35;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAssistKeyLongPressed> = 0;

        goto label36;

     label35:
        if z0 != 0 goto label36;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction()>();

     label36:
        return -1L;

     label37:
        if i1 != 231 goto label40;

        if z1 != 0 goto label51;

        if z0 != 0 goto label38;

        $r39 = new android.content.Intent;

        specialinvoke $r39.<android.content.Intent: void <init>(java.lang.String)>("android.speech.action.WEB_SEARCH");

        r82 = $r39;

        goto label39;

     label38:
        $r42 = new android.content.Intent;

        specialinvoke $r42.<android.content.Intent: void <init>(java.lang.String)>("android.speech.action.VOICE_SEARCH_HANDS_FREE");

        r82 = $r42;

        virtualinvoke r82.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.speech.extras.EXTRA_SECURE", 1);

     label39:
        $r41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r40 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r41.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r82, $r40);

        goto label51;

     label40:
        if i1 != 120 goto label42;

        if z1 == 0 goto label41;

        if i2 != 0 goto label41;

        $r44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotRunnable>;

        virtualinvoke $r44.<android.os.Handler: boolean post(java.lang.Runnable)>($r33);

     label41:
        return -1L;

     label42:
        if i1 == 221 goto label43;

        if i1 != 220 goto label48;

     label43:
        if z1 == 0 goto label47;

        if i1 != 221 goto label44;

        $b17 = 1;

        goto label45;

     label44:
        $b17 = -1;

     label45:
        b52 = $b17;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i53 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "screen_brightness_mode", 0, -3);

        if i53 == 0 goto label46;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r16, "screen_brightness_mode", 0, -3);

     label46:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        i54 = virtualinvoke $r5.<android.os.PowerManager: int getMinimumScreenBrightnessSetting()>();

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        i55 = virtualinvoke $r6.<android.os.PowerManager: int getMaximumScreenBrightnessSetting()>();

        $i14 = i55 - i54;

        $i12 = $i14 + 10;

        $i13 = $i12 - 1;

        $i15 = $i13 / 10;

        i9 = $i15 * b52;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $i16 = virtualinvoke $r8.<android.os.PowerManager: int getDefaultScreenBrightnessSetting()>();

        i10 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r7, "screen_brightness", $i16, -3);

        i56 = i10 + i9;

        i57 = staticinvoke <java.lang.Math: int min(int,int)>(i55, i56);

        i58 = staticinvoke <java.lang.Math: int max(int,int)>(i54, i57);

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r10, "screen_brightness", i58, -3);

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r15 = new android.content.Intent;

        specialinvoke $r15.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SHOW_BRIGHTNESS_DIALOG");

        $r13 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r14.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r15, $r13);

     label47:
        return -1L;

     label48:
        $z6 = staticinvoke <android.view.KeyEvent: boolean isMetaKey(int)>(i1);

        if $z6 == 0 goto label51;

        if z1 == 0 goto label49;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingMetaAction> = 1;

        goto label50;

     label49:
        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingMetaAction>;

        if $z14 == 0 goto label50;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction(java.lang.String)>("android.intent.extra.ASSIST_INPUT_HINT_KEYBOARD");

     label50:
        return -1L;

     label51:
        $z9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending>;

        if $z9 == 0 goto label57;

        r83 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z13 = virtualinvoke r83.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i1);

        if $z13 == 0 goto label57;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        if z1 == 0 goto label56;

        if i2 != 0 goto label56;

        if z0 != 0 goto label56;

        $r32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        r84 = virtualinvoke $r32.<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r83, i1, i3);

        if r84 == null goto label55;

        virtualinvoke r84.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label52:
        $r35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r34 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r35.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r84, $r34);

     label53:
        goto label56;

     label54:
        $r72 := @caughtexception;

        r85 = $r72;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: SEARCH+");

        $r63 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r62 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r67 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r67, r85);

        goto label56;

     label55:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping unregistered shortcut key combination: SEARCH+");

        $r30 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r38);

     label56:
        return -1L;

     label57:
        if z1 == 0 goto label62;

        if i2 != 0 goto label62;

        if z0 != 0 goto label62;

        $i28 = i3 & 65536;

        if $i28 == 0 goto label62;

        r86 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z12 = virtualinvoke r86.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i1);

        if $z12 == 0 goto label62;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        $i29 = i3 & -458753;

        r87 = virtualinvoke $r28.<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r86, i1, $i29);

        if r87 == null goto label62;

        virtualinvoke r87.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label58:
        $r26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r27 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r26.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r87, $r27);

     label59:
        goto label61;

     label60:
        $r60 := @caughtexception;

        r88 = $r60;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: META+");

        $r69 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i1);

        $r68 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r73 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r73, r88);

     label61:
        return -1L;

     label62:
        if z1 == 0 goto label67;

        if i2 != 0 goto label67;

        if z0 != 0 goto label67;

        $r23 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        $r24 = virtualinvoke $r23.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r89 = (java.lang.String) $r24;

        if r89 == null goto label67;

        r90 = staticinvoke <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>("android.intent.action.MAIN", r89);

        virtualinvoke r90.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label63:
        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r21 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r22.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r90, $r21);

     label64:
        goto label66;

     label65:
        $r66 := @caughtexception;

        r91 = $r66;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping application launch key because the activity to which it is registered was not found: keyCode=");

        $r74 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", category=");

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r78, r91);

     label66:
        return -1L;

     label67:
        if z1 == 0 goto label69;

        if i2 != 0 goto label69;

        if i1 != 61 goto label69;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsHeldModifiers>;

        if $i22 != 0 goto label70;

        if z0 != 0 goto label70;

        $i23 = virtualinvoke r2.<android.view.KeyEvent: int getModifiers()>();

        i59 = $i23 & -194;

        $z11 = staticinvoke <android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>(i59, 2);

        if $z11 == 0 goto label68;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsHeldModifiers> = i59;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void showRecentApps(boolean)>(1);

        return -1L;

     label68:
        goto label70;

     label69:
        if z1 != 0 goto label70;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsHeldModifiers>;

        if $i27 == 0 goto label70;

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsHeldModifiers>;

        $i21 = i3 & $i20;

        if $i21 != 0 goto label70;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRecentAppsHeldModifiers> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void hideRecentApps(boolean,boolean)>(1, 0);

     label70:
        if z1 == 0 goto label74;

        if i2 != 0 goto label74;

        if i1 == 204 goto label71;

        if i1 != 62 goto label74;

        $i26 = i3 & 28672;

        if $i26 == 0 goto label74;

     label71:
        $i18 = i3 & 193;

        if $i18 == 0 goto label72;

        $b25 = -1;

        goto label73;

     label72:
        $b25 = 1;

     label73:
        b60 = $b25;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i24 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        interfaceinvoke $r19.<android.view.WindowManagerPolicy$WindowManagerFuncs: void switchKeyboardLayout(int,int)>($i24, b60);

        return -1L;

     label74:
        $z8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLanguageSwitchKeyPressed>;

        if $z8 == 0 goto label76;

        if z1 != 0 goto label76;

        if i1 == 204 goto label75;

        if i1 != 62 goto label76;

     label75:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLanguageSwitchKeyPressed> = 0;

        return -1L;

     label76:
        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager>;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $z10 = virtualinvoke $r17.<com.android.internal.policy.impl.GlobalKeyManager: boolean handleGlobalKey(android.content.Context,int,android.view.KeyEvent)>($r18, i1, r2);

        if $z10 == 0 goto label77;

        return -1L;

     label77:
        $i19 = i3 & 65536;

        if $i19 == 0 goto label78;

        return -1L;

     label78:
        return 0L;

        catch android.content.ActivityNotFoundException from label52 to label53 with label54;
        catch android.content.ActivityNotFoundException from label58 to label59 with label60;
        catch android.content.ActivityNotFoundException from label63 to label64 with label65;
    }

    public android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2, r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        android.view.KeyCharacterMap r4;
        boolean z0, $z1, $z2;
        android.view.KeyCharacterMap$FallbackAction r5;
        android.util.SparseArray $r6, $r8, $r9;
        java.lang.Object $r7;
        long $l8, $l9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        r3 = null;

        $i4 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        $i5 = $i4 & 1024;

        if $i5 != 0 goto label7;

        r4 = virtualinvoke r2.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        i1 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        i2 = virtualinvoke r2.<android.view.KeyEvent: int getMetaState()>();

        $i6 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i6 != 0 goto label1;

        $i18 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        if $i18 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        r5 = virtualinvoke r4.<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)>(i1, i2);

        goto label4;

     label3:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (android.view.KeyCharacterMap$FallbackAction) $r7;

     label4:
        if r5 == null goto label7;

        $i7 = virtualinvoke r2.<android.view.KeyEvent: int getFlags()>();

        i3 = $i7 | 1024;

        $l9 = virtualinvoke r2.<android.view.KeyEvent: long getDownTime()>();

        $l8 = virtualinvoke r2.<android.view.KeyEvent: long getEventTime()>();

        $i11 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        $i10 = r5.<android.view.KeyCharacterMap$FallbackAction: int keyCode>;

        $i13 = virtualinvoke r2.<android.view.KeyEvent: int getRepeatCount()>();

        $i12 = r5.<android.view.KeyCharacterMap$FallbackAction: int metaState>;

        $i15 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        $i14 = virtualinvoke r2.<android.view.KeyEvent: int getScanCode()>();

        $i16 = virtualinvoke r2.<android.view.KeyEvent: int getSource()>();

        r3 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(long,long,int,int,int,int,int,int,int,int,java.lang.String)>($l9, $l8, $i11, $i10, $i13, $i12, $i15, $i14, i3, $i16, null);

        $z1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r1, r3, i0);

        if $z1 != 0 goto label5;

        virtualinvoke r3.<android.view.KeyEvent: void recycle()>();

        r3 = null;

     label5:
        if z0 == 0 goto label6;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r5);

        goto label7;

     label6:
        $i17 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i17 != 1 goto label7;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r8.<android.util.SparseArray: void remove(int)>(i1);

        virtualinvoke r5.<android.view.KeyCharacterMap$FallbackAction: void recycle()>();

     label7:
        return r3;
    }

    private boolean interceptFallback(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        android.view.KeyEvent r2;
        int i0, i1, $i3;
        long l2;
        byte $b4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>(r2, i0);

        $i3 = i1 & 1;

        if $i3 == 0 goto label1;

        l2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r1, r2, i0);

        $b4 = l2 cmp 0L;

        if $b4 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void launchAssistLongPressAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, $r3;
        android.app.SearchManager r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;
        android.content.ActivityNotFoundException $r7, r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SEARCH_LONG_PRESS");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label1:
        r2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager getSearchManager()>();

        if r2 == null goto label2;

        virtualinvoke r2.<android.app.SearchManager: void stopSearch()>();

     label2:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r6.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "No activity to handle assist long press action.", r8);

     label5:
        return;

        catch android.content.ActivityNotFoundException from label1 to label3 with label4;
    }

    private void launchAssistAction()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistAction(java.lang.String)>(null);

        return;
    }

    private void launchAssistAction(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.String r1;
        android.content.Intent r2;
        android.content.ActivityNotFoundException r3, $r12;
        android.content.Context $r4, $r6, $r10;
        java.lang.Object $r5;
        android.app.SearchManager $r7;
        android.os.UserHandle $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r7 = (android.app.SearchManager) $r5;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r2 = virtualinvoke $r7.<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context,boolean,int)>($r6, 1, -2);

        if r2 == null goto label5;

        if r1 == null goto label1;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>(r1, 1);

     label1:
        virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(872415232);

     label2:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r9 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r10.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r2, $r9);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "No activity to handle assist action.", r3);

     label5:
        return;

        catch android.content.ActivityNotFoundException from label2 to label3 with label4;
    }

    private android.app.SearchManager getSearchManager()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.app.SearchManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r5 = (android.app.SearchManager) $r4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        return $r2;
    }

    private void preloadRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.statusbar.IStatusBarService r1;
        android.os.RemoteException $r2, r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 1;

     label1:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.statusbar.IStatusBarService: void preloadRecentApps()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when preloading recent apps", r3);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void cancelPreloadRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.statusbar.IStatusBarService r1;
        boolean $z0;
        android.os.RemoteException $r2, r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps>;

        if $z0 == 0 goto label4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.statusbar.IStatusBarService: void cancelPreloadRecentApps()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when cancelling recent apps preload", r3);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void toggleRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.statusbar.IStatusBarService r1;
        android.os.RemoteException $r2, r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.statusbar.IStatusBarService: void toggleRecentApps()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when toggling recent apps", r3);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void showRecentApps()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.Handler $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(9);

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessage(int)>(9);

        return;
    }

    private void showRecentApps(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        com.android.internal.statusbar.IStatusBarService r1;
        android.os.RemoteException $r2, r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.statusbar.IStatusBarService: void showRecentApps(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when showing recent apps", r3);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void hideRecentApps(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1;
        com.android.internal.statusbar.IStatusBarService r1;
        android.os.RemoteException $r2, r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

     label1:
        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.statusbar.IStatusBarService: void hideRecentApps(boolean,boolean)>(z0, z1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when closing recent apps", r3);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void launchHomeFromHotKey()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r4, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        android.app.IActivityManager $r3;
        com.android.internal.policy.impl.PhoneWindowManager$8 $r5;
        android.os.RemoteException $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z3 = virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotOccluded()>();

        if $z3 == 0 goto label1;

        goto label7;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z2 = virtualinvoke $r4.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        if $z2 == 0 goto label2;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r5 = new com.android.internal.policy.impl.PhoneWindowManager$8;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindowManager$8: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r6.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>($r5);

        goto label7;

     label2:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void stopAppSwitches()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mRecentsVisible>;

        if $z1 == 0 goto label6;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void awakenDreams()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("homekey");

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void hideRecentApps(boolean,boolean)>(0, 1);

        goto label7;

     label6:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("homekey");

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void startDockOrHome()>();

     label7:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int adjustSystemUiVisibilityLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.android.internal.policy.impl.BarController $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r1.<com.android.internal.policy.impl.BarController: void adjustSystemUiVisibilityLw(int,int)>($i1, i0);

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r2.<com.android.internal.policy.impl.BarController: void adjustSystemUiVisibilityLw(int,int)>($i2, i0);

        $i3 = i0 & 16384;

        if $i3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mRecentsVisible> = $z0;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i5 = $i4 & i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = $i5;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i7 = $i6 ^ -1;

        $i10 = i0 & $i7;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $i9 = $i8 ^ -1;

        $i11 = $i10 & $i9;

        return $i11;
    }

    public void getContentInsetHintLw(android.view.WindowManager$LayoutParams, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 := @parameter1: android.graphics.Rect;

        i0 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getWindowFlags(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(null, r1);

        i1 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getSystemUiVisibility(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(null, r1);

        $i5 = r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i2 = i1 | $i5;

        $i6 = i0 & 65792;

        if $i6 != 65792 goto label9;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z0 == 0 goto label1;

        $i38 = i2 & 512;

        if $i38 == 0 goto label1;

        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        i3 = $i44 + $i39;

        $i42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        i4 = $i42 + $i43;

        goto label2;

     label1:
        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        i3 = $i8 + $i7;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        i4 = $i11 + $i9;

     label2:
        $i10 = i2 & 256;

        if $i10 == 0 goto label4;

        $i29 = i0 & 1024;

        if $i29 == 0 goto label3;

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        $i35 = i3 - $i36;

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        $i34 = i4 - $i37;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i41, $i40, $i35, $i34);

        goto label8;

     label3:
        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        $i33 = i3 - $i26;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        $i32 = i4 - $i27;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i31, $i30, $i33, $i32);

        goto label8;

     label4:
        $i13 = i0 & 1024;

        if $i13 != 0 goto label5;

        $i12 = i0 & 33554432;

        if $i12 == 0 goto label6;

     label5:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        goto label8;

     label6:
        $i15 = i2 & 1028;

        if $i15 != 0 goto label7;

        $i28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $i25 = i3 - $i20;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i22 = i4 - $i23;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i28, $i24, $i25, $i22);

        goto label8;

     label7:
        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $i19 = i3 - $i14;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i16 = i4 - $i17;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i21, $i18, $i19, $i16);

     label8:
        return;

     label9:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        return;
    }

    public void beginLayoutLw(boolean, int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z22, $z23, $z25, $z27, $z28, $z31, $z32, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, z43, z44, z45, z46;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, i89;
        android.graphics.Rect r1, r2, r3, r4, r5, $r21, $r22, $r23, $r24, $r25, $r26, $r32, $r33, $r36, $r38, $r41, $r43, $r44, $r51;
        com.android.internal.policy.impl.SystemGesturesPointerEventListener $r6, $r7;
        android.view.WindowManagerPolicy$WindowState $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r27, $r29, $r31, $r39;
        android.view.WindowManagerPolicy$FakeWindow $r9, $r49, $r50, $r52;
        com.android.internal.policy.impl.BarController $r14, $r17, $r19, $r20, $r28, $r30, $r34, $r37, $r40, $r42, $r45, $r46;
        int[] $r18, $r35;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r47;
        android.os.Handler $r48;
        android.os.Looper $r53;
        android.view.InputEventReceiver$Factory $r54;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if z0 == 0 goto label05;

        tableswitch(i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            default: goto label04;
        };

     label01:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        goto label06;

     label02:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        goto label06;

     label03:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        goto label06;

     label04:
        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        goto label06;

     label05:
        i3 = 0;

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label06:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight> = i0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft> = i3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop> = i4;

        $i12 = i0 - i3;

        $i11 = $i12 - i5;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth> = $i11;

        $i14 = i1 - i4;

        $i13 = $i14 - i6;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight> = $i13;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft> = $i16;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop> = $i15;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $r7.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: int screenWidth> = $i18;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth> = $i18;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.SystemGesturesPointerEventListener mSystemGestures>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $r6.<com.android.internal.policy.impl.SystemGesturesPointerEventListener: int screenHeight> = $i17;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight> = $i17;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = $i21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft> = $i21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft> = $i21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft> = $i21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = $i21;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft> = $i21;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = $i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop> = $i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop> = $i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop> = $i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = $i22;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = $i22;

        $i19 = i0 - i5;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = $i19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight> = $i19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight> = $i19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight> = $i19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = $i19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight> = $i19;

        $i20 = i1 - i6;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom> = $i20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = 268435456;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = -1;

        r1 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        r2 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        r3 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame>;

        r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame>;

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r4.<android.graphics.Rect: int left> = $i25;

        r3.<android.graphics.Rect: int left> = $i25;

        r2.<android.graphics.Rect: int left> = $i25;

        r1.<android.graphics.Rect: int left> = $i25;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r4.<android.graphics.Rect: int top> = $i26;

        r3.<android.graphics.Rect: int top> = $i26;

        r2.<android.graphics.Rect: int top> = $i26;

        r1.<android.graphics.Rect: int top> = $i26;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r4.<android.graphics.Rect: int right> = $i23;

        r3.<android.graphics.Rect: int right> = $i23;

        r2.<android.graphics.Rect: int right> = $i23;

        r1.<android.graphics.Rect: int right> = $i23;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r4.<android.graphics.Rect: int bottom> = $i24;

        r3.<android.graphics.Rect: int bottom> = $i24;

        r2.<android.graphics.Rect: int bottom> = $i24;

        r1.<android.graphics.Rect: int bottom> = $i24;

        virtualinvoke r5.<android.graphics.Rect: void setEmpty()>();

        if z0 == 0 goto label49;

        i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i29 = i7 & 2;

        if $i29 != 0 goto label07;

        $z35 = 1;

        goto label08;

     label07:
        $z35 = 0;

     label08:
        z1 = $z35;

        $i30 = i7 & -2147450880;

        if $i30 == 0 goto label09;

        $z34 = 1;

        goto label10;

     label09:
        $z34 = 0;

     label10:
        z3 = $z34;

        $i27 = i7 & 2048;

        if $i27 == 0 goto label11;

        $z37 = 1;

        goto label12;

     label11:
        $z37 = 0;

     label12:
        z2 = $z37;

        $i28 = i7 & 4096;

        if $i28 == 0 goto label13;

        $z36 = 1;

        goto label14;

     label13:
        $z36 = 0;

     label14:
        z5 = $z36;

        if z2 != 0 goto label15;

        if z5 == 0 goto label16;

     label15:
        $z40 = 1;

        goto label17;

     label16:
        $z40 = 0;

     label17:
        z4 = $z40;

        if z5 != 0 goto label18;

        $z39 = 1;

        goto label19;

     label18:
        $z39 = 0;

     label19:
        z43 = z3 & $z39;

        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isStatusBarKeyguard()>();

        if $z10 == 0 goto label20;

        $z41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z41 != 0 goto label20;

        $z42 = 1;

        goto label21;

     label20:
        $z42 = 0;

     label21:
        z7 = $z42;

        if z7 != 0 goto label22;

        $z38 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        z43 = z43 & $z38;

     label22:
        if z1 != 0 goto label23;

        if z4 == 0 goto label24;

     label23:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        if $r9 == null goto label25;

        $r50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        interfaceinvoke $r50.<android.view.WindowManagerPolicy$FakeWindow: void dismiss()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = null;

        goto label25;

     label24:
        $r49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow>;

        if $r49 != null goto label25;

        $r47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r53 = virtualinvoke $r48.<android.os.Handler: android.os.Looper getLooper()>();

        $r54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.InputEventReceiver$Factory mHideNavInputEventReceiverFactory>;

        $r52 = interfaceinvoke $r47.<android.view.WindowManagerPolicy$WindowManagerFuncs: android.view.WindowManagerPolicy$FakeWindow addFakeWindow(android.os.Looper,android.view.InputEventReceiver$Factory,java.lang.String,int,int,int,boolean,boolean,boolean)>($r53, $r54, "hidden nav", 2022, 0, 0, 0, 0, 1);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$FakeWindow mHideNavFakeWindow> = $r52;

     label25:
        $z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z9 != 0 goto label26;

        $z31 = 1;

        goto label27;

     label26:
        $z31 = 0;

     label27:
        z44 = z1 | $z31;

        z6 = 0;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r8 == null goto label40;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        z8 = virtualinvoke $r19.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarCanMove>;

        if $z19 == 0 goto label28;

        if i0 >= i1 goto label29;

     label28:
        $z32 = 1;

        goto label30;

     label29:
        $z32 = 0;

     label30:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom> = $z32;

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mNavigationBarOnBottom>;

        if $z18 == 0 goto label35;

        $i79 = i1 - i6;

        $r35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarHeightForRotation>;

        $i78 = $r35[i2];

        i8 = $i79 - $i78;

        $r43 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i80 = i1 - i6;

        virtualinvoke $r43.<android.graphics.Rect: void set(int,int,int,int)>(0, i8, i0, $i80);

        $r44 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i81 = $r44.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom> = $i81;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom> = $i81;

        if z8 == 0 goto label31;

        $r46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r46.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        goto label33;

     label31:
        if z44 == 0 goto label32;

        $r42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r42.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        $r51 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i84 = $r51.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom> = $i84;

        $i82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $i83 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i88 = $i82 - $i83;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight> = $i88;

        $i86 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $i87 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        $i85 = $i86 - $i87;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight> = $i85;

        goto label33;

     label32:
        $r45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r45.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

     label33:
        if z44 == 0 goto label34;

        if z43 != 0 goto label34;

        if z4 != 0 goto label34;

        $r39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z27 = interfaceinvoke $r39.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z27 != 0 goto label34;

        $r40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z28 = virtualinvoke $r40.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z28 != 0 goto label34;

        $r41 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i77 = $r41.<android.graphics.Rect: int top>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom> = $i77;

     label34:
        goto label39;

     label35:
        $i61 = i0 - i5;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int[] mNavigationBarWidthForRotation>;

        $i60 = $r18[i2];

        i89 = $i61 - $i60;

        $r22 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i65 = i0 - i5;

        virtualinvoke $r22.<android.graphics.Rect: void set(int,int,int,int)>(i89, 0, $i65, i1);

        $r21 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i64 = $r21.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight> = $i64;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight> = $i64;

        if z8 == 0 goto label36;

        $r34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r34.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        goto label38;

     label36:
        if z44 == 0 goto label37;

        $r37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r37.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        $r38 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i76 = $r38.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight> = $i76;

        $i70 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $i75 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i69 = $i70 - $i75;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth> = $i69;

        $i71 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $i72 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        $i73 = $i71 - $i72;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth> = $i73;

        goto label38;

     label37:
        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r20.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

     label38:
        if z44 == 0 goto label39;

        if z43 != 0 goto label39;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z22 = interfaceinvoke $r29.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z22 != 0 goto label39;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z25 = virtualinvoke $r28.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z25 != 0 goto label39;

        $r36 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $i74 = $r36.<android.graphics.Rect: int left>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight> = $i74;

     label39:
        $i62 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = $i62;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop> = $i62;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = $i62;

        $i63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = $i63;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom> = $i63;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = $i63;

        $i68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = $i68;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft> = $i68;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = $i68;

        $i67 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = $i67;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight> = $i67;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = $i67;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $i66 = interfaceinvoke $r27.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = $i66;

        $r31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $r32 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r33 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r23 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r24 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r25 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        $r26 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame>;

        interfaceinvoke $r31.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r32, $r33, $r23, $r24, $r25, r5, $r26);

        $r30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z23 = virtualinvoke $r30.<com.android.internal.policy.impl.BarController: boolean checkHiddenLw()>();

        if $z23 == 0 goto label40;

        z6 = 1;

     label40:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r10 == null goto label48;

        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r3.<android.graphics.Rect: int left> = $i32;

        r2.<android.graphics.Rect: int left> = $i32;

        r1.<android.graphics.Rect: int left> = $i32;

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r3.<android.graphics.Rect: int top> = $i31;

        r2.<android.graphics.Rect: int top> = $i31;

        r1.<android.graphics.Rect: int top> = $i31;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i35 = $i36 + $i37;

        r3.<android.graphics.Rect: int right> = $i35;

        r2.<android.graphics.Rect: int right> = $i35;

        r1.<android.graphics.Rect: int right> = $i35;

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i40 = $i41 + $i34;

        r3.<android.graphics.Rect: int bottom> = $i40;

        r2.<android.graphics.Rect: int bottom> = $i40;

        r1.<android.graphics.Rect: int bottom> = $i40;

        $i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r4.<android.graphics.Rect: int left> = $i39;

        $i38 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r4.<android.graphics.Rect: int top> = $i38;

        $i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r4.<android.graphics.Rect: int right> = $i45;

        $i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r4.<android.graphics.Rect: int bottom> = $i46;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $i47 = interfaceinvoke $r12.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer> = $i47;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        interfaceinvoke $r11.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, r2, r4, r4, r4, r5, r4);

        $i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i44 = $i43 + $i42;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop> = $i44;

        $i48 = i7 & 67108864;

        if $i48 == 0 goto label41;

        $z20 = 1;

        goto label42;

     label41:
        $z20 = 0;

     label42:
        z45 = $z20;

        $i49 = i7 & 1073774592;

        if $i49 == 0 goto label43;

        $z16 = 1;

        goto label44;

     label43:
        $z16 = 0;

     label44:
        z46 = $z16;

        if z7 != 0 goto label45;

        $z17 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        z46 = z46 & $z17;

     label45:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z13 = interfaceinvoke $r15.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z13 == 0 goto label46;

        if z45 != 0 goto label46;

        $i57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i56 = $i57 + $i52;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = $i56;

        $i59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = $i59;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop> = $i59;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = $i59;

        $i58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = $i58;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom> = $i58;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = $i58;

        $i55 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = $i55;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft> = $i55;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = $i55;

        $i54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = $i54;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight> = $i54;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = $i54;

     label46:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z11 = interfaceinvoke $r13.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z11 == 0 goto label47;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z14 = interfaceinvoke $r16.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z14 != 0 goto label47;

        if z45 != 0 goto label47;

        if z46 != 0 goto label47;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z15 = virtualinvoke $r17.<com.android.internal.policy.impl.BarController: boolean wasRecentlyTranslucent()>();

        if $z15 != 0 goto label47;

        $i50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarHeight>;

        $i53 = $i50 + $i51;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop> = $i53;

     label47:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z12 = virtualinvoke $r14.<com.android.internal.policy.impl.BarController: boolean checkHiddenLw()>();

        if $z12 == 0 goto label48;

        z6 = 1;

     label48:
        if z6 == 0 goto label49;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

     label49:
        return;
    }

    public int getSystemDecorLayerLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $i1 = interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        return $i1;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $i0 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        return $i0;

     label2:
        return 0;
    }

    public void getContentRectLw(android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState, int, int, android.view.WindowManagerPolicy$WindowState, boolean, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        boolean z0, $z1;
        android.graphics.Rect r3, r4, r5, r6, r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.view.WindowManagerPolicy$WindowState;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.graphics.Rect;

        r6 := @parameter8: android.graphics.Rect;

        r7 := @parameter9: android.graphics.Rect;

        $i2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i2 <= $i3 goto label01;

        $i29 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i29 >= $i35 goto label01;

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = $i34;

        r6.<android.graphics.Rect: int left> = $i34;

        r5.<android.graphics.Rect: int left> = $i34;

        r4.<android.graphics.Rect: int left> = $i34;

        $i33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = $i33;

        r6.<android.graphics.Rect: int top> = $i33;

        r5.<android.graphics.Rect: int top> = $i33;

        r4.<android.graphics.Rect: int top> = $i33;

        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = $i32;

        r6.<android.graphics.Rect: int right> = $i32;

        r5.<android.graphics.Rect: int right> = $i32;

        r4.<android.graphics.Rect: int right> = $i32;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = $i36;

        r6.<android.graphics.Rect: int bottom> = $i36;

        r5.<android.graphics.Rect: int bottom> = $i36;

        r4.<android.graphics.Rect: int bottom> = $i36;

        goto label15;

     label01:
        if i1 == 16 goto label02;

        $r13 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getOverscanFrameLw()>();

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r13);

        goto label10;

     label02:
        $r8 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r8);

        $z1 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: boolean isVoiceInteraction()>();

        if $z1 == 0 goto label06;

        $i18 = r6.<android.graphics.Rect: int left>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        if $i18 >= $i17 goto label03;

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        r6.<android.graphics.Rect: int left> = $i31;

     label03:
        $i24 = r6.<android.graphics.Rect: int top>;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        if $i24 >= $i23 goto label04;

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        r6.<android.graphics.Rect: int top> = $i30;

     label04:
        $i22 = r6.<android.graphics.Rect: int right>;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        if $i22 <= $i21 goto label05;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        r6.<android.graphics.Rect: int right> = $i26;

     label05:
        $i28 = r6.<android.graphics.Rect: int bottom>;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        if $i28 <= $i27 goto label10;

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        r6.<android.graphics.Rect: int bottom> = $i25;

        goto label10;

     label06:
        $i4 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i4 >= $i5 goto label10;

        $i7 = r6.<android.graphics.Rect: int left>;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        if $i7 >= $i8 goto label07;

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r6.<android.graphics.Rect: int left> = $i20;

     label07:
        $i9 = r6.<android.graphics.Rect: int top>;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        if $i9 >= $i10 goto label08;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r6.<android.graphics.Rect: int top> = $i19;

     label08:
        $i11 = r6.<android.graphics.Rect: int right>;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        if $i11 <= $i12 goto label09;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r6.<android.graphics.Rect: int right> = $i15;

     label09:
        $i13 = r6.<android.graphics.Rect: int bottom>;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i13 <= $i14 goto label10;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r6.<android.graphics.Rect: int bottom> = $i16;

     label10:
        if z0 == 0 goto label11;

        $r11 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getDisplayFrameLw()>();

        goto label12;

     label11:
        $r11 = r6;

     label12:
        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

        if z0 == 0 goto label13;

        $r12 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getOverscanFrameLw()>();

        goto label14;

     label13:
        $r12 = r6;

     label14:
        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r12);

        $r9 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        virtualinvoke r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

     label15:
        $i6 = i0 & 256;

        if $i6 != 0 goto label16;

        $r10 = interfaceinvoke r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getFrameLw()>();

        goto label17;

     label16:
        $r10 = r4;

     label17:
        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r10);

        return;
    }

    private void applyStableConstraints(int, int, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        android.graphics.Rect r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $i2 = i0 & 256;

        if $i2 == 0 goto label8;

        $i3 = i1 & 1024;

        if $i3 == 0 goto label4;

        $i16 = r1.<android.graphics.Rect: int left>;

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        if $i16 >= $i17 goto label1;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        r1.<android.graphics.Rect: int left> = $i26;

     label1:
        $i18 = r1.<android.graphics.Rect: int top>;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        if $i18 >= $i19 goto label2;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        r1.<android.graphics.Rect: int top> = $i27;

     label2:
        $i20 = r1.<android.graphics.Rect: int right>;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        if $i20 <= $i21 goto label3;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        r1.<android.graphics.Rect: int right> = $i24;

     label3:
        $i22 = r1.<android.graphics.Rect: int bottom>;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        if $i22 <= $i23 goto label8;

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        r1.<android.graphics.Rect: int bottom> = $i25;

        goto label8;

     label4:
        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        if $i5 >= $i4 goto label5;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r1.<android.graphics.Rect: int left> = $i14;

     label5:
        $i7 = r1.<android.graphics.Rect: int top>;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        if $i7 >= $i6 goto label6;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r1.<android.graphics.Rect: int top> = $i15;

     label6:
        $i9 = r1.<android.graphics.Rect: int right>;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        if $i9 <= $i8 goto label7;

        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r1.<android.graphics.Rect: int right> = $i13;

     label7:
        $i11 = r1.<android.graphics.Rect: int bottom>;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        if $i11 <= $i10 goto label8;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r1.<android.graphics.Rect: int bottom> = $i12;

     label8:
        return;
    }

    public void layoutWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        android.view.WindowManager$LayoutParams r3;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294;
        android.graphics.Rect r4, r5, r6, r7, r8, r9, r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r1 != $r12 goto label01;

        $i278 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i277 = $i278 & 1024;

        if $i277 == 0 goto label02;

     label01:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if r1 != $r11 goto label03;

     label02:
        return;

     label03:
        z0 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isDefaultDisplay()>();

        if z0 == 0 goto label04;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        if r1 != $r16 goto label04;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        if $r15 == null goto label04;

        $z21 = 1;

        goto label05;

     label04:
        $z21 = 0;

     label05:
        z1 = $z21;

        if z1 == 0 goto label06;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)>($r17);

     label06:
        i0 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getWindowFlags(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r1, r3);

        i1 = r3.<android.view.WindowManager$LayoutParams: int softInputMode>;

        i2 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getSystemUiVisibility(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r1, null);

        r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame>;

        r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame>;

        r8 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        r9 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame>;

        r10 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpStableFrame>;

        virtualinvoke r9.<android.graphics.Rect: void setEmpty()>();

        if z0 == 0 goto label07;

        $z20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        if $z20 == 0 goto label07;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r19 == null goto label07;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        $z19 = interfaceinvoke $r18.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z19 == 0 goto label07;

        $z18 = 1;

        goto label08;

     label07:
        $z18 = 0;

     label08:
        z2 = $z18;

        i3 = i1 & 240;

        if z0 == 0 goto label09;

        $i288 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        $i287 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        $i290 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        $i289 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        virtualinvoke r10.<android.graphics.Rect: void set(int,int,int,int)>($i288, $i287, $i290, $i289);

        goto label10;

     label09:
        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        virtualinvoke r10.<android.graphics.Rect: void set(int,int,int,int)>($i8, $i5, $i6, $i4);

     label10:
        if z0 != 0 goto label12;

        if r2 == null goto label11;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r2, 1, r4, r5, r6, r7, r8);

        goto label71;

     label11:
        $i281 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i281;

        r6.<android.graphics.Rect: int left> = $i281;

        r5.<android.graphics.Rect: int left> = $i281;

        r4.<android.graphics.Rect: int left> = $i281;

        $i282 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = $i282;

        r6.<android.graphics.Rect: int top> = $i282;

        r5.<android.graphics.Rect: int top> = $i282;

        r4.<android.graphics.Rect: int top> = $i282;

        $i280 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i279 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i293 = $i280 + $i279;

        r7.<android.graphics.Rect: int right> = $i293;

        r6.<android.graphics.Rect: int right> = $i293;

        r5.<android.graphics.Rect: int right> = $i293;

        r4.<android.graphics.Rect: int right> = $i293;

        $i291 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i294 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i292 = $i291 + $i294;

        r7.<android.graphics.Rect: int bottom> = $i292;

        r6.<android.graphics.Rect: int bottom> = $i292;

        r5.<android.graphics.Rect: int bottom> = $i292;

        r4.<android.graphics.Rect: int bottom> = $i292;

        goto label71;

     label12:
        $i7 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i7 != 2011 goto label13;

        $i262 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r8.<android.graphics.Rect: int left> = $i262;

        r7.<android.graphics.Rect: int left> = $i262;

        r6.<android.graphics.Rect: int left> = $i262;

        r5.<android.graphics.Rect: int left> = $i262;

        r4.<android.graphics.Rect: int left> = $i262;

        $i261 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r8.<android.graphics.Rect: int top> = $i261;

        r7.<android.graphics.Rect: int top> = $i261;

        r6.<android.graphics.Rect: int top> = $i261;

        r5.<android.graphics.Rect: int top> = $i261;

        r4.<android.graphics.Rect: int top> = $i261;

        $i264 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r8.<android.graphics.Rect: int right> = $i264;

        r7.<android.graphics.Rect: int right> = $i264;

        r6.<android.graphics.Rect: int right> = $i264;

        r5.<android.graphics.Rect: int right> = $i264;

        r4.<android.graphics.Rect: int right> = $i264;

        $i285 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i263 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i286 = $i285 + $i263;

        r6.<android.graphics.Rect: int bottom> = $i286;

        r5.<android.graphics.Rect: int bottom> = $i286;

        r4.<android.graphics.Rect: int bottom> = $i286;

        $i283 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r8.<android.graphics.Rect: int bottom> = $i283;

        r7.<android.graphics.Rect: int bottom> = $i283;

        r3.<android.view.WindowManager$LayoutParams: int gravity> = 80;

        $i284 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = $i284;

        goto label71;

     label13:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r1 != $r13 goto label14;

        $i274 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i275 = $i274 & 1024;

        if $i275 == 0 goto label14;

        $i276 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i276;

        r5.<android.graphics.Rect: int left> = $i276;

        r4.<android.graphics.Rect: int left> = $i276;

        $i250 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i250;

        r5.<android.graphics.Rect: int top> = $i250;

        r4.<android.graphics.Rect: int top> = $i250;

        $i252 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i249 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i251 = $i252 + $i249;

        r6.<android.graphics.Rect: int right> = $i251;

        r5.<android.graphics.Rect: int right> = $i251;

        r4.<android.graphics.Rect: int right> = $i251;

        $i253 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i254 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i256 = $i253 + $i254;

        r6.<android.graphics.Rect: int bottom> = $i256;

        r5.<android.graphics.Rect: int bottom> = $i256;

        r4.<android.graphics.Rect: int bottom> = $i256;

        $i255 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r8.<android.graphics.Rect: int left> = $i255;

        r7.<android.graphics.Rect: int left> = $i255;

        $i258 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r8.<android.graphics.Rect: int top> = $i258;

        r7.<android.graphics.Rect: int top> = $i258;

        $i257 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r8.<android.graphics.Rect: int right> = $i257;

        r7.<android.graphics.Rect: int right> = $i257;

        $i260 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r8.<android.graphics.Rect: int bottom> = $i260;

        $i259 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i259;

        goto label71;

     label14:
        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft>;

        r9.<android.graphics.Rect: int left> = $i11;

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop>;

        r9.<android.graphics.Rect: int top> = $i9;

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight>;

        r9.<android.graphics.Rect: int right> = $i10;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom>;

        r9.<android.graphics.Rect: int bottom> = $i14;

        $i15 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i12 = $i15 & 512;

        if $i12 == 0 goto label15;

        $z17 = 1;

        goto label16;

     label15:
        $z17 = 0;

     label16:
        z4 = $z17;

        $i13 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i13 < 1 goto label17;

        $i273 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i273 > 99 goto label17;

        $z16 = 1;

        goto label18;

     label17:
        $z16 = 0;

     label18:
        z3 = $z16;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if r1 != $r14 goto label19;

        $z14 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z14 != 0 goto label19;

        $z15 = 1;

        goto label20;

     label19:
        $z15 = 0;

     label20:
        z5 = $z15;

        if z3 == 0 goto label22;

        if z4 != 0 goto label22;

        if z5 != 0 goto label22;

        $i230 = i2 & 4;

        if $i230 != 0 goto label21;

        $i269 = i0 & 1024;

        if $i269 != 0 goto label21;

        $i270 = i0 & 67108864;

        if $i270 != 0 goto label21;

        $i271 = i0 & -2147483648;

        if $i271 != 0 goto label21;

        $i272 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r9.<android.graphics.Rect: int top> = $i272;

     label21:
        $i229 = i0 & 134217728;

        if $i229 != 0 goto label22;

        $i265 = i2 & 2;

        if $i265 != 0 goto label22;

        $i266 = i0 & -2147483648;

        if $i266 != 0 goto label22;

        $i267 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r9.<android.graphics.Rect: int bottom> = $i267;

        $i268 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r9.<android.graphics.Rect: int right> = $i268;

     label22:
        $i18 = i0 & 65792;

        if $i18 != 65792 goto label40;

        if r2 == null goto label23;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r2, 1, r4, r5, r6, r7, r8);

        goto label71;

     label23:
        $i167 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i167 == 2014 goto label24;

        $i190 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i190 != 2017 goto label31;

     label24:
        if z2 == 0 goto label25;

        $i166 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        goto label26;

     label25:
        $i166 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

     label26:
        r6.<android.graphics.Rect: int left> = $i166;

        r5.<android.graphics.Rect: int left> = $i166;

        r4.<android.graphics.Rect: int left> = $i166;

        $i169 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i169;

        r5.<android.graphics.Rect: int top> = $i169;

        r4.<android.graphics.Rect: int top> = $i169;

        if z2 == 0 goto label27;

        $i191 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i192 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i162 = $i191 + $i192;

        goto label28;

     label27:
        $i163 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i168 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i162 = $i163 + $i168;

     label28:
        r6.<android.graphics.Rect: int right> = $i162;

        r5.<android.graphics.Rect: int right> = $i162;

        r4.<android.graphics.Rect: int right> = $i162;

        if z2 == 0 goto label29;

        $i193 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i194 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i159 = $i193 + $i194;

        goto label30;

     label29:
        $i164 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i165 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i159 = $i164 + $i165;

     label30:
        r6.<android.graphics.Rect: int bottom> = $i159;

        r5.<android.graphics.Rect: int bottom> = $i159;

        r4.<android.graphics.Rect: int bottom> = $i159;

        goto label34;

     label31:
        $i189 = i0 & 33554432;

        if $i189 == 0 goto label32;

        $i224 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i224 < 1 goto label32;

        $i223 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i223 > 1999 goto label32;

        $i222 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i222;

        r5.<android.graphics.Rect: int left> = $i222;

        r4.<android.graphics.Rect: int left> = $i222;

        $i221 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r6.<android.graphics.Rect: int top> = $i221;

        r5.<android.graphics.Rect: int top> = $i221;

        r4.<android.graphics.Rect: int top> = $i221;

        $i227 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i228 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i226 = $i227 + $i228;

        r6.<android.graphics.Rect: int right> = $i226;

        r5.<android.graphics.Rect: int right> = $i226;

        r4.<android.graphics.Rect: int right> = $i226;

        $i232 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i225 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i231 = $i232 + $i225;

        r6.<android.graphics.Rect: int bottom> = $i231;

        r5.<android.graphics.Rect: int bottom> = $i231;

        r4.<android.graphics.Rect: int bottom> = $i231;

        goto label34;

     label32:
        $z13 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z13 == 0 goto label33;

        $i236 = i2 & 512;

        if $i236 == 0 goto label33;

        $i233 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i233 < 1 goto label33;

        $i234 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i234 > 1999 goto label33;

        $i239 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r5.<android.graphics.Rect: int left> = $i239;

        r4.<android.graphics.Rect: int left> = $i239;

        $i240 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r5.<android.graphics.Rect: int top> = $i240;

        r4.<android.graphics.Rect: int top> = $i240;

        $i238 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i237 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i243 = $i238 + $i237;

        r5.<android.graphics.Rect: int right> = $i243;

        r4.<android.graphics.Rect: int right> = $i243;

        $i241 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i244 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i242 = $i241 + $i244;

        r5.<android.graphics.Rect: int bottom> = $i242;

        r4.<android.graphics.Rect: int bottom> = $i242;

        $i247 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i247;

        $i248 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i248;

        $i246 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i245 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i220 = $i246 + $i245;

        r6.<android.graphics.Rect: int right> = $i220;

        $i218 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i219 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i217 = $i218 + $i219;

        r6.<android.graphics.Rect: int bottom> = $i217;

        goto label34;

     label33:
        $i216 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        r5.<android.graphics.Rect: int left> = $i216;

        r4.<android.graphics.Rect: int left> = $i216;

        $i214 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        r5.<android.graphics.Rect: int top> = $i214;

        r4.<android.graphics.Rect: int top> = $i214;

        $i212 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        $i215 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth>;

        $i213 = $i212 + $i215;

        r5.<android.graphics.Rect: int right> = $i213;

        r4.<android.graphics.Rect: int right> = $i213;

        $i211 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        $i210 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight>;

        $i208 = $i211 + $i210;

        r5.<android.graphics.Rect: int bottom> = $i208;

        r4.<android.graphics.Rect: int bottom> = $i208;

        $i209 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i209;

        $i206 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i206;

        $i204 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i207 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i205 = $i204 + $i207;

        r6.<android.graphics.Rect: int right> = $i205;

        $i203 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i202 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i235 = $i203 + $i202;

        r6.<android.graphics.Rect: int bottom> = $i235;

     label34:
        $i158 = i0 & 1024;

        if $i158 != 0 goto label37;

        $z12 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVoiceInteraction()>();

        if $z12 == 0 goto label35;

        $i198 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        r7.<android.graphics.Rect: int left> = $i198;

        $i197 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        r7.<android.graphics.Rect: int top> = $i197;

        $i196 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        r7.<android.graphics.Rect: int right> = $i196;

        $i195 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i195;

        goto label38;

     label35:
        if i3 == 16 goto label36;

        $i177 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = $i177;

        $i201 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = $i201;

        $i200 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = $i200;

        $i199 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = $i199;

        goto label38;

     label36:
        $i180 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r7.<android.graphics.Rect: int left> = $i180;

        $i174 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r7.<android.graphics.Rect: int top> = $i174;

        $i175 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r7.<android.graphics.Rect: int right> = $i175;

        $i176 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i176;

        goto label38;

     label37:
        $i161 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i161;

        $i160 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i160;

        $i186 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i185 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i187 = $i186 + $i185;

        r7.<android.graphics.Rect: int right> = $i187;

        $i181 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i188 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i182 = $i181 + $i188;

        r7.<android.graphics.Rect: int bottom> = $i182;

     label38:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyStableConstraints(int,int,android.graphics.Rect)>(i2, i0, r7);

        if i3 == 48 goto label39;

        $i183 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i183;

        $i184 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i184;

        $i178 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i178;

        $i179 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i179;

        goto label71;

     label39:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

        goto label71;

     label40:
        $i16 = i0 & 256;

        if $i16 != 0 goto label41;

        $i117 = i2 & 1536;

        if $i117 == 0 goto label62;

     label41:
        $i17 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i17 == 2014 goto label42;

        $i42 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i42 != 2017 goto label49;

     label42:
        if z2 == 0 goto label43;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        goto label44;

     label43:
        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

     label44:
        r7.<android.graphics.Rect: int left> = $i21;

        r6.<android.graphics.Rect: int left> = $i21;

        r5.<android.graphics.Rect: int left> = $i21;

        r4.<android.graphics.Rect: int left> = $i21;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i22;

        r6.<android.graphics.Rect: int top> = $i22;

        r5.<android.graphics.Rect: int top> = $i22;

        r4.<android.graphics.Rect: int top> = $i22;

        if z2 == 0 goto label45;

        $i47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i26 = $i47 + $i46;

        goto label46;

     label45:
        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i26 = $i20 + $i19;

     label46:
        r7.<android.graphics.Rect: int right> = $i26;

        r6.<android.graphics.Rect: int right> = $i26;

        r5.<android.graphics.Rect: int right> = $i26;

        r4.<android.graphics.Rect: int right> = $i26;

        if z2 == 0 goto label47;

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i23 = $i37 + $i36;

        goto label48;

     label47:
        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i23 = $i24 + $i25;

     label48:
        r7.<android.graphics.Rect: int bottom> = $i23;

        r6.<android.graphics.Rect: int bottom> = $i23;

        r5.<android.graphics.Rect: int bottom> = $i23;

        r4.<android.graphics.Rect: int bottom> = $i23;

        goto label60;

     label49:
        $i43 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i43 == 2019 goto label50;

        $i51 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i51 != 2024 goto label51;

     label50:
        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r6.<android.graphics.Rect: int left> = $i44;

        r5.<android.graphics.Rect: int left> = $i44;

        r4.<android.graphics.Rect: int left> = $i44;

        $i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r6.<android.graphics.Rect: int top> = $i45;

        r5.<android.graphics.Rect: int top> = $i45;

        r4.<android.graphics.Rect: int top> = $i45;

        $i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i55 = $i52 + $i53;

        r6.<android.graphics.Rect: int right> = $i55;

        r5.<android.graphics.Rect: int right> = $i55;

        r4.<android.graphics.Rect: int right> = $i55;

        $i49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i48 = $i49 + $i54;

        r6.<android.graphics.Rect: int bottom> = $i48;

        r5.<android.graphics.Rect: int bottom> = $i48;

        r4.<android.graphics.Rect: int bottom> = $i48;

        goto label60;

     label51:
        $i50 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i50 == 2015 goto label52;

        $i116 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i116 != 2021 goto label53;

     label52:
        $i61 = i0 & 1024;

        if $i61 == 0 goto label53;

        $i124 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i124;

        r6.<android.graphics.Rect: int left> = $i124;

        r5.<android.graphics.Rect: int left> = $i124;

        r4.<android.graphics.Rect: int left> = $i124;

        $i125 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = $i125;

        r6.<android.graphics.Rect: int top> = $i125;

        r5.<android.graphics.Rect: int top> = $i125;

        r4.<android.graphics.Rect: int top> = $i125;

        $i111 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i126 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i112 = $i111 + $i126;

        r7.<android.graphics.Rect: int right> = $i112;

        r6.<android.graphics.Rect: int right> = $i112;

        r5.<android.graphics.Rect: int right> = $i112;

        r4.<android.graphics.Rect: int right> = $i112;

        $i114 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i113 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i115 = $i114 + $i113;

        r7.<android.graphics.Rect: int bottom> = $i115;

        r6.<android.graphics.Rect: int bottom> = $i115;

        r5.<android.graphics.Rect: int bottom> = $i115;

        r4.<android.graphics.Rect: int bottom> = $i115;

        goto label60;

     label53:
        $i60 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i60 == 2021 goto label54;

        $i67 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i67 != 2025 goto label55;

     label54:
        $i63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i63;

        r6.<android.graphics.Rect: int left> = $i63;

        r5.<android.graphics.Rect: int left> = $i63;

        r4.<android.graphics.Rect: int left> = $i63;

        $i62 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = $i62;

        r6.<android.graphics.Rect: int top> = $i62;

        r5.<android.graphics.Rect: int top> = $i62;

        r4.<android.graphics.Rect: int top> = $i62;

        $i56 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i59 = $i56 + $i57;

        r7.<android.graphics.Rect: int right> = $i59;

        r6.<android.graphics.Rect: int right> = $i59;

        r5.<android.graphics.Rect: int right> = $i59;

        r4.<android.graphics.Rect: int right> = $i59;

        $i69 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i70 = $i69 + $i58;

        r7.<android.graphics.Rect: int bottom> = $i70;

        r6.<android.graphics.Rect: int bottom> = $i70;

        r5.<android.graphics.Rect: int bottom> = $i70;

        r4.<android.graphics.Rect: int bottom> = $i70;

        goto label60;

     label55:
        $i68 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i68 != 2013 goto label56;

        $i107 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r5.<android.graphics.Rect: int left> = $i107;

        r4.<android.graphics.Rect: int left> = $i107;

        $i110 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r5.<android.graphics.Rect: int top> = $i110;

        r4.<android.graphics.Rect: int top> = $i110;

        $i96 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i109 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i95 = $i96 + $i109;

        r5.<android.graphics.Rect: int right> = $i95;

        r4.<android.graphics.Rect: int right> = $i95;

        $i97 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i98 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i100 = $i97 + $i98;

        r5.<android.graphics.Rect: int bottom> = $i100;

        r4.<android.graphics.Rect: int bottom> = $i100;

        $i99 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i99;

        r6.<android.graphics.Rect: int left> = $i99;

        $i102 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i102;

        r6.<android.graphics.Rect: int top> = $i102;

        $i119 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i101 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i120 = $i119 + $i101;

        r7.<android.graphics.Rect: int right> = $i120;

        r6.<android.graphics.Rect: int right> = $i120;

        $i122 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i121 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i123 = $i122 + $i121;

        r7.<android.graphics.Rect: int bottom> = $i123;

        r6.<android.graphics.Rect: int bottom> = $i123;

        goto label60;

     label56:
        $i66 = i0 & 33554432;

        if $i66 == 0 goto label57;

        $i91 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i91 < 1 goto label57;

        $i90 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i90 > 1999 goto label57;

        $i89 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i89;

        r6.<android.graphics.Rect: int left> = $i89;

        r5.<android.graphics.Rect: int left> = $i89;

        r4.<android.graphics.Rect: int left> = $i89;

        $i88 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        r7.<android.graphics.Rect: int top> = $i88;

        r6.<android.graphics.Rect: int top> = $i88;

        r5.<android.graphics.Rect: int top> = $i88;

        r4.<android.graphics.Rect: int top> = $i88;

        $i104 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        $i87 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        $i103 = $i104 + $i87;

        r7.<android.graphics.Rect: int right> = $i103;

        r6.<android.graphics.Rect: int right> = $i103;

        r5.<android.graphics.Rect: int right> = $i103;

        r4.<android.graphics.Rect: int right> = $i103;

        $i105 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        $i106 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        $i108 = $i105 + $i106;

        r7.<android.graphics.Rect: int bottom> = $i108;

        r6.<android.graphics.Rect: int bottom> = $i108;

        r5.<android.graphics.Rect: int bottom> = $i108;

        r4.<android.graphics.Rect: int bottom> = $i108;

        goto label60;

     label57:
        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z10 == 0 goto label59;

        $i71 = i2 & 512;

        if $i71 == 0 goto label59;

        $i72 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i72 == 2000 goto label58;

        $i94 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i94 == 2005 goto label58;

        $i93 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i93 < 1 goto label59;

        $i92 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i92 > 1999 goto label59;

     label58:
        $i86 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i86;

        r6.<android.graphics.Rect: int left> = $i86;

        r5.<android.graphics.Rect: int left> = $i86;

        r4.<android.graphics.Rect: int left> = $i86;

        $i85 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i85;

        r6.<android.graphics.Rect: int top> = $i85;

        r5.<android.graphics.Rect: int top> = $i85;

        r4.<android.graphics.Rect: int top> = $i85;

        $i83 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        $i84 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        $i82 = $i83 + $i84;

        r7.<android.graphics.Rect: int right> = $i82;

        r6.<android.graphics.Rect: int right> = $i82;

        r5.<android.graphics.Rect: int right> = $i82;

        r4.<android.graphics.Rect: int right> = $i82;

        $i80 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        $i81 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        $i79 = $i80 + $i81;

        r7.<android.graphics.Rect: int bottom> = $i79;

        r6.<android.graphics.Rect: int bottom> = $i79;

        r5.<android.graphics.Rect: int bottom> = $i79;

        r4.<android.graphics.Rect: int bottom> = $i79;

        goto label60;

     label59:
        $i64 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i64;

        r6.<android.graphics.Rect: int left> = $i64;

        r5.<android.graphics.Rect: int left> = $i64;

        r4.<android.graphics.Rect: int left> = $i64;

        $i65 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i65;

        r6.<android.graphics.Rect: int top> = $i65;

        r5.<android.graphics.Rect: int top> = $i65;

        r4.<android.graphics.Rect: int top> = $i65;

        $i78 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i77 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i75 = $i78 + $i77;

        r7.<android.graphics.Rect: int right> = $i75;

        r6.<android.graphics.Rect: int right> = $i75;

        r5.<android.graphics.Rect: int right> = $i75;

        r4.<android.graphics.Rect: int right> = $i75;

        $i73 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i76 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i74 = $i73 + $i76;

        r7.<android.graphics.Rect: int bottom> = $i74;

        r6.<android.graphics.Rect: int bottom> = $i74;

        r5.<android.graphics.Rect: int bottom> = $i74;

        r4.<android.graphics.Rect: int bottom> = $i74;

     label60:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyStableConstraints(int,int,android.graphics.Rect)>(i2, i0, r7);

        if i3 == 48 goto label61;

        $i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i39;

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i40;

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i41;

        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i35;

        goto label71;

     label61:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

        goto label71;

     label62:
        if r2 == null goto label63;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, i0, i3, r2, 0, r4, r5, r6, r7, r8);

        goto label71;

     label63:
        $i118 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i118 != 2014 goto label64;

        $i148 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        r7.<android.graphics.Rect: int left> = $i148;

        r6.<android.graphics.Rect: int left> = $i148;

        r5.<android.graphics.Rect: int left> = $i148;

        r4.<android.graphics.Rect: int left> = $i148;

        $i149 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        r7.<android.graphics.Rect: int top> = $i149;

        r6.<android.graphics.Rect: int top> = $i149;

        r5.<android.graphics.Rect: int top> = $i149;

        r4.<android.graphics.Rect: int top> = $i149;

        $i147 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        $i146 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        $i171 = $i147 + $i146;

        r7.<android.graphics.Rect: int right> = $i171;

        r6.<android.graphics.Rect: int right> = $i171;

        r5.<android.graphics.Rect: int right> = $i171;

        r4.<android.graphics.Rect: int right> = $i171;

        $i173 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        $i170 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        $i172 = $i173 + $i170;

        r7.<android.graphics.Rect: int bottom> = $i172;

        r6.<android.graphics.Rect: int bottom> = $i172;

        r5.<android.graphics.Rect: int bottom> = $i172;

        r4.<android.graphics.Rect: int bottom> = $i172;

        goto label71;

     label64:
        $i137 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i137 == 2005 goto label65;

        $i140 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i140 == 2003 goto label65;

        $i139 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i139 != 2020 goto label66;

     label65:
        $i136 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        r7.<android.graphics.Rect: int left> = $i136;

        r6.<android.graphics.Rect: int left> = $i136;

        r5.<android.graphics.Rect: int left> = $i136;

        r4.<android.graphics.Rect: int left> = $i136;

        $i135 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        r7.<android.graphics.Rect: int top> = $i135;

        r6.<android.graphics.Rect: int top> = $i135;

        r5.<android.graphics.Rect: int top> = $i135;

        r4.<android.graphics.Rect: int top> = $i135;

        $i134 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        r7.<android.graphics.Rect: int right> = $i134;

        r6.<android.graphics.Rect: int right> = $i134;

        r5.<android.graphics.Rect: int right> = $i134;

        r4.<android.graphics.Rect: int right> = $i134;

        $i141 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        r7.<android.graphics.Rect: int bottom> = $i141;

        r6.<android.graphics.Rect: int bottom> = $i141;

        r5.<android.graphics.Rect: int bottom> = $i141;

        r4.<android.graphics.Rect: int bottom> = $i141;

        goto label71;

     label66:
        $i138 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r4.<android.graphics.Rect: int left> = $i138;

        $i129 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r4.<android.graphics.Rect: int top> = $i129;

        $i128 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r4.<android.graphics.Rect: int right> = $i128;

        $i127 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r4.<android.graphics.Rect: int bottom> = $i127;

        $z11 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVoiceInteraction()>();

        if $z11 == 0 goto label67;

        $i144 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        r7.<android.graphics.Rect: int left> = $i144;

        r6.<android.graphics.Rect: int left> = $i144;

        r5.<android.graphics.Rect: int left> = $i144;

        $i145 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        r7.<android.graphics.Rect: int top> = $i145;

        r6.<android.graphics.Rect: int top> = $i145;

        r5.<android.graphics.Rect: int top> = $i145;

        $i142 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        r7.<android.graphics.Rect: int right> = $i142;

        r6.<android.graphics.Rect: int right> = $i142;

        r5.<android.graphics.Rect: int right> = $i142;

        $i143 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i143;

        r6.<android.graphics.Rect: int bottom> = $i143;

        r5.<android.graphics.Rect: int bottom> = $i143;

        goto label69;

     label67:
        if i3 == 16 goto label68;

        $i156 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        r7.<android.graphics.Rect: int left> = $i156;

        r6.<android.graphics.Rect: int left> = $i156;

        r5.<android.graphics.Rect: int left> = $i156;

        $i157 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        r7.<android.graphics.Rect: int top> = $i157;

        r6.<android.graphics.Rect: int top> = $i157;

        r5.<android.graphics.Rect: int top> = $i157;

        $i154 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        r7.<android.graphics.Rect: int right> = $i154;

        r6.<android.graphics.Rect: int right> = $i154;

        r5.<android.graphics.Rect: int right> = $i154;

        $i155 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        r7.<android.graphics.Rect: int bottom> = $i155;

        r6.<android.graphics.Rect: int bottom> = $i155;

        r5.<android.graphics.Rect: int bottom> = $i155;

        goto label69;

     label68:
        $i133 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        r7.<android.graphics.Rect: int left> = $i133;

        r6.<android.graphics.Rect: int left> = $i133;

        r5.<android.graphics.Rect: int left> = $i133;

        $i132 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        r7.<android.graphics.Rect: int top> = $i132;

        r6.<android.graphics.Rect: int top> = $i132;

        r5.<android.graphics.Rect: int top> = $i132;

        $i131 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        r7.<android.graphics.Rect: int right> = $i131;

        r6.<android.graphics.Rect: int right> = $i131;

        r5.<android.graphics.Rect: int right> = $i131;

        $i130 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        r7.<android.graphics.Rect: int bottom> = $i130;

        r6.<android.graphics.Rect: int bottom> = $i130;

        r5.<android.graphics.Rect: int bottom> = $i130;

     label69:
        if i3 == 48 goto label70;

        $i152 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        r8.<android.graphics.Rect: int left> = $i152;

        $i153 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        r8.<android.graphics.Rect: int top> = $i153;

        $i150 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        r8.<android.graphics.Rect: int right> = $i150;

        $i151 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        r8.<android.graphics.Rect: int bottom> = $i151;

        goto label71;

     label70:
        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r7);

     label71:
        $i29 = i0 & 512;

        if $i29 == 0 goto label72;

        $i30 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i30 == 2010 goto label72;

        r5.<android.graphics.Rect: int top> = -10000;

        r5.<android.graphics.Rect: int left> = -10000;

        r5.<android.graphics.Rect: int bottom> = 10000;

        r5.<android.graphics.Rect: int right> = 10000;

        $i32 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i32 == 2013 goto label72;

        r8.<android.graphics.Rect: int top> = -10000;

        r8.<android.graphics.Rect: int left> = -10000;

        r7.<android.graphics.Rect: int top> = -10000;

        r7.<android.graphics.Rect: int left> = -10000;

        r6.<android.graphics.Rect: int top> = -10000;

        r6.<android.graphics.Rect: int left> = -10000;

        r8.<android.graphics.Rect: int bottom> = 10000;

        r8.<android.graphics.Rect: int right> = 10000;

        r7.<android.graphics.Rect: int bottom> = 10000;

        r7.<android.graphics.Rect: int right> = 10000;

        r6.<android.graphics.Rect: int bottom> = 10000;

        r6.<android.graphics.Rect: int right> = 10000;

     label72:
        interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r4, r5, r6, r7, r8, r9, r10);

        $i28 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i28 != 2011 goto label73;

        $z8 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleOrBehindKeyguardLw()>();

        if $z8 == 0 goto label73;

        $z7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean getGivenInsetsPendingLw()>();

        if $z7 != 0 goto label73;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(null, null);

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)>(r1);

     label73:
        $i27 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i27 != 2031 goto label74;

        $z6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleOrBehindKeyguardLw()>();

        if $z6 == 0 goto label74;

        $z9 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean getGivenInsetsPendingLw()>();

        if $z9 != 0 goto label74;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void offsetVoiceInputWindowLw(android.view.WindowManagerPolicy$WindowState)>(r1);

     label74:
        return;
    }

    private void offsetInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        android.graphics.Rect $r2, $r3, $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        i0 = $r2.<android.graphics.Rect: int top>;

        $r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i1 = $r3.<android.graphics.Rect: int top>;

        i6 = i0 + $i1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i2 <= i6 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = i6;

     label1:
        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        if $i3 <= i6 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom> = i6;

     label2:
        $r4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        i7 = $r4.<android.graphics.Rect: int top>;

        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenVisibleInsetsLw()>();

        $i4 = $r5.<android.graphics.Rect: int top>;

        i8 = i7 + $i4;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        if $i5 <= i8 goto label3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = i8;

     label3:
        return;
    }

    private void offsetVoiceInputWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        android.view.WindowManager$LayoutParams $r2;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        i0 = $r2.<android.view.WindowManager$LayoutParams: int gravity>;

        $i2 = i0 & 6;

        lookupswitch($i2)
        {
            case 2: goto label1;
            case 4: goto label3;
            default: goto label4;
        };

     label1:
        $r9 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i13 = $r9.<android.graphics.Rect: int right>;

        $r10 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i14 = $r10.<android.graphics.Rect: int right>;

        i1 = $i13 - $i14;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        if $i15 >= i1 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft> = i1;

     label2:
        goto label4;

     label3:
        $r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i3 = $r3.<android.graphics.Rect: int left>;

        $r4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i4 = $r4.<android.graphics.Rect: int left>;

        i16 = $i3 - $i4;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        if $i5 >= i16 goto label4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight> = i16;

     label4:
        $i6 = i0 & 96;

        lookupswitch($i6)
        {
            case 32: goto label5;
            case 64: goto label7;
            default: goto label8;
        };

     label5:
        $r7 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i10 = $r7.<android.graphics.Rect: int bottom>;

        $r8 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i12 = $r8.<android.graphics.Rect: int bottom>;

        i17 = $i10 - $i12;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        if $i11 >= i17 goto label6;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop> = i17;

     label6:
        goto label8;

     label7:
        $r5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i7 = $r5.<android.graphics.Rect: int top>;

        $r6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i8 = $r6.<android.graphics.Rect: int top>;

        i18 = $i7 - $i8;

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        if $i9 >= i18 goto label8;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom> = i18;

     label8:
        return;
    }

    public void finishLayoutLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        return;
    }

    public void beginPostLayoutPolicyLw(int, int)
    {
        java.util.HashSet $r0, $r2;
        com.android.internal.policy.impl.PhoneWindowManager r1;
        int i0, i1;

        r1 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = null;

        $r2 = r1.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r2.<java.util.HashSet: void clear()>();

        $r0 = r1.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsThatDismissKeyguard>;

        virtualinvoke $r0.<java.util.HashSet: void clear()>();

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer> = -1;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream> = 0;

        r1.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked> = null;

        return;
    }

    public void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r4, $r5, $r7, $r9, $r13;
        android.view.WindowManager$LayoutParams r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        boolean z0, z1, z2, z3, $z4, $z5, $z8, $z9, $z10, $z11, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        android.view.IApplicationToken r3, $r8, $r10;
        java.util.HashSet $r6, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        byte $b15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        i0 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getWindowFlags(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r1, r2);

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r4 != null goto label01;

        $z24 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z24 == 0 goto label01;

        $i18 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i18 != 2011 goto label01;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar> = 1;

        $i19 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer> = $i19;

     label01:
        $i1 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2000 goto label02;

        $i22 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i17 = $i22 & 1024;

        if $i17 == 0 goto label02;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 1;

     label02:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r5 != null goto label26;

        $z4 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleOrBehindKeyguardLw()>();

        if $z4 == 0 goto label26;

        $z5 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isGoneForLayoutLw()>();

        if $z5 != 0 goto label26;

        $i2 = i0 & 2048;

        if $i2 == 0 goto label04;

        $i20 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i21 = $i20 & 1024;

        if $i21 == 0 goto label03;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 1;

        goto label04;

     label03:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 1;

     label04:
        $i4 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i4 & 1024;

        if $i3 == 0 goto label05;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen> = 1;

     label05:
        $i6 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i6 < 1 goto label06;

        $i16 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i16 >= 2000 goto label06;

        $z25 = 1;

        goto label07;

     label06:
        $z25 = 0;

     label07:
        z0 = $z25;

        $i5 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 2023 goto label09;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        if $z23 == 0 goto label08;

        $z22 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z22 == 0 goto label09;

        $z21 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean hasDrawnLw()>();

        if $z21 == 0 goto label09;

     label08:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream> = 1;

        z0 = 1;

     label09:
        $i8 = i0 & 524288;

        if $i8 == 0 goto label10;

        $z17 = 1;

        goto label11;

     label10:
        $z17 = 0;

     label11:
        z1 = $z17;

        $i7 = i0 & 4194304;

        if $i7 == 0 goto label12;

        $z18 = 1;

        goto label13;

     label12:
        $z18 = 0;

     label13:
        z2 = $z18;

        z3 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()>();

        if z0 == 0 goto label26;

        r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        if z1 == 0 goto label14;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r16.<java.util.HashSet: boolean remove(java.lang.Object)>(r3);

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsThatDismissKeyguard>;

        virtualinvoke $r19.<java.util.HashSet: boolean remove(java.lang.Object)>(r3);

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        $z20 = virtualinvoke $r18.<java.util.HashSet: boolean isEmpty()>();

        if $z20 == 0 goto label18;

        $z19 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecureIncludingHidden()>();

        if $z19 == 0 goto label18;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked> = r1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 0;

        goto label18;

     label14:
        if z2 == 0 goto label17;

        if z3 == 0 goto label15;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r17.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        goto label16;

     label15:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r15.<java.util.HashSet: boolean remove(java.lang.Object)>(r3);

     label16:
        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsThatDismissKeyguard>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        goto label18;

     label17:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

     label18:
        $i9 = r2.<android.view.WindowManager$LayoutParams: int x>;

        if $i9 != 0 goto label25;

        $i11 = r2.<android.view.WindowManager$LayoutParams: int y>;

        if $i11 != 0 goto label25;

        $i12 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i12 != -1 goto label25;

        $i10 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i10 != -1 goto label25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = r1;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsThatDismissKeyguard>;

        $z9 = virtualinvoke $r11.<java.util.HashSet: boolean isEmpty()>();

        if $z9 != 0 goto label23;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i14 != 0 goto label23;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        if $r13 != r1 goto label19;

        $b15 = 2;

        goto label20;

     label19:
        $b15 = 1;

     label20:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard> = $b15;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard> = r1;

        $z10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        if $z10 == 0 goto label21;

        if z3 == 0 goto label21;

        $z11 = 1;

        goto label22;

     label21:
        $z11 = 0;

     label22:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = $z11;

        goto label24;

     label23:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.util.HashSet mAppsToBeHidden>;

        $z8 = virtualinvoke $r12.<java.util.HashSet: boolean isEmpty()>();

        if $z8 == 0 goto label24;

        if z1 == 0 goto label24;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard> = 0;

     label24:
        $i13 = i0 & 1;

        if $i13 == 0 goto label25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn> = 1;

     label25:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        if $r7 == null goto label26;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        $r8 = interfaceinvoke $r9.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        $r10 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        if $r8 == $r10 goto label26;

        interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(0);

     label26:
        return;
    }

    public int finishPostLayoutPolicyLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        byte b0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        android.view.WindowManager$LayoutParams r1, $r26, $r32;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18;
        android.view.WindowManagerPolicy$WindowState $r2, $r3, $r4, $r6, $r18, $r20, $r25, $r27, $r28, $r29, $r30, $r31;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r5, $r7, $r8, $r11, $r12, $r13;
        android.os.Handler $r9, $r15;
        com.android.internal.policy.impl.PhoneWindowManager$12 $r10;
        com.android.internal.policy.impl.PhoneWindowManager$11 $r14;
        com.android.internal.policy.impl.BarController $r16, $r17, $r19, $r21, $r22, $r23, $r24;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        if $r2 == null goto label01;

        $r30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r30 == $r27 goto label01;

        $r31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        $r32 = interfaceinvoke $r31.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i18 = $r32.<android.view.WindowManager$LayoutParams: int flags>;

        $i17 = $i18 | 1048576;

        $r32.<android.view.WindowManager$LayoutParams: int flags> = $i17;

        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        interfaceinvoke $r28.<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(0);

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinShowWhenLocked>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = $r29;

     label01:
        b0 = 0;

        z0 = 0;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r3 == null goto label02;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $r26 = interfaceinvoke $r25.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        goto label03;

     label02:
        $r26 = null;

     label03:
        r1 = $r26;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        if $z1 != 0 goto label04;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen> = $z23;

     label04:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r4 == null goto label15;

        $z12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar>;

        if $z12 != 0 goto label05;

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        if $z18 == 0 goto label09;

     label05:
        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z15 = virtualinvoke $r16.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        if $z15 == 0 goto label06;

        b0 = b0 | 1;

     label06:
        $z13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z13 == 0 goto label07;

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z17 = interfaceinvoke $r18.<android.view.WindowManagerPolicy$WindowState: boolean isAnimatingLw()>();

        if $z17 == 0 goto label07;

        $z19 = 1;

        goto label08;

     label07:
        $z19 = 0;

     label08:
        z0 = $z19;

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        if $z14 == 0 goto label15;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z16 = virtualinvoke $r17.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        if $z16 == 0 goto label15;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        virtualinvoke $r19.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(0, $i12, $i11);

        goto label15;

     label09:
        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r20 == null goto label15;

        i1 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getWindowFlags(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(null, r1);

        $i14 = i1 & 1024;

        if $i14 != 0 goto label10;

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $i16 = $i15 & 4;

        if $i16 == 0 goto label11;

     label10:
        $z25 = 1;

        goto label12;

     label11:
        $z25 = 0;

     label12:
        z0 = $z25;

        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z20 = virtualinvoke $r22.<com.android.internal.policy.impl.BarController: boolean isTransientShowing()>();

        if $z20 == 0 goto label13;

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z24 = virtualinvoke $r23.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        if $z24 == 0 goto label15;

        b0 = b0 | 1;

        goto label15;

     label13:
        if z0 == 0 goto label14;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z21 = virtualinvoke $r24.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(0);

        if $z21 == 0 goto label15;

        b0 = b0 | 1;

        goto label15;

     label14:
        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z22 = virtualinvoke $r21.<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)>(1);

        if $z22 == 0 goto label15;

        b0 = b0 | 1;

     label15:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        if $z2 == z0 goto label17;

        if z0 != 0 goto label16;

        b0 = b0 | 1;

     label16:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen> = z0;

     label17:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r5 == null goto label23;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r6 == null goto label23;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i4 == 0 goto label19;

        $z8 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isKeyguardSecure()>();

        if $z8 != 0 goto label19;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardHidden> = 1;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $i10 = virtualinvoke $r12.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: int setOccluded(boolean)>(1);

        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean processKeyguardSetHiddenResultLw(int)>($i10);

        if $z10 == 0 goto label18;

        b0 = b0 | 7;

     label18:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z9 = virtualinvoke $r13.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z9 == 0 goto label23;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r14 = new com.android.internal.policy.impl.PhoneWindowManager$11;

        specialinvoke $r14.<com.android.internal.policy.impl.PhoneWindowManager$11: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r14);

        goto label23;

     label19:
        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z3 == 0 goto label20;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardHidden> = 1;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $i9 = virtualinvoke $r11.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: int setOccluded(boolean)>(1);

        $z7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean processKeyguardSetHiddenResultLw(int)>($i9);

        if $z7 == 0 goto label23;

        b0 = b0 | 7;

        goto label23;

     label20:
        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i5 == 0 goto label22;

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        if $i7 != 1 goto label23;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardHidden> = 0;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $i8 = virtualinvoke $r8.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: int setOccluded(boolean)>(0);

        $z5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean processKeyguardSetHiddenResultLw(int)>($i8);

        if $z5 == 0 goto label21;

        b0 = b0 | 7;

     label21:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r10 = new com.android.internal.policy.impl.PhoneWindowManager$12;

        specialinvoke $r10.<com.android.internal.policy.impl.PhoneWindowManager$12: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        goto label23;

     label22:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardHidden> = 0;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $i6 = virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: int setOccluded(boolean)>(0);

        $z4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean processKeyguardSetHiddenResultLw(int)>($i6);

        if $z4 == 0 goto label23;

        b0 = b0 | 7;

     label23:
        $i2 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        $i3 = $i2 & -1073709050;

        if $i3 == 0 goto label24;

        b0 = b0 | 1;

     label24:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        return b0;
    }

    private boolean processKeyguardSetHiddenResultLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.WindowManagerPolicy$WindowState $r1, $r3, $r5, $r7;
        android.view.WindowManager$LayoutParams $r2, $r4, $r6, $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r6 = interfaceinvoke $r5.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i5 = $r6.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i6 = $i5 | 1024;

        $r6.<android.view.WindowManager$LayoutParams: int privateFlags> = $i6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r8 = interfaceinvoke $r7.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i8 = $r8.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = $i8 | 1048576;

        $r8.<android.view.WindowManager$LayoutParams: int flags> = $i7;

        return 1;

     label1:
        if i0 != 2 goto label2;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r2 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i2 = $i1 & -1025;

        $r2.<android.view.WindowManager$LayoutParams: int privateFlags> = $i2;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r4 = interfaceinvoke $r3.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = $i3 & -1048577;

        $r4.<android.view.WindowManager$LayoutParams: int flags> = $i4;

        return 1;

     label2:
        return 0;
    }

    private boolean isStatusBarKeyguard()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r3 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean allowAppAnimationsLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isStatusBarKeyguard()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int focusChangedLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;
        int $i0, $i1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow> = r2;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        $i1 = $i0 & -1073709050;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void notifyLidSwitchChanged(long, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l3, $l4;
        boolean z0, $z1;
        byte b1, $b5;
        int $i2;
        android.os.PowerManager $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $b5 = 1;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        b1 = $b5;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if b1 != $i2 goto label3;

        return;

     label3:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState> = b1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

        if z0 == 0 goto label4;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r2.<android.os.PowerManager: void wakeUp(long)>($l4);

        goto label5;

     label4:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        if $z1 != 0 goto label5;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void userActivity(long,boolean)>($l3, 0);

     label5:
        return;
    }

    public void notifyCameraLensCoverSwitchChanged(long, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l4;
        boolean z0, z1, $z2;
        byte b1, $b5;
        android.content.Intent r1, $r4, $r7;
        int $i2, $i3;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r3;
        android.os.PowerManager $r5;
        android.os.UserHandle $r6;
        android.content.Context $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $b5 = 1;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        b1 = $b5;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState>;

        if $i2 != b1 goto label3;

        return;

     label3:
        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState>;

        if $i3 != 1 goto label8;

        if b1 != 0 goto label8;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 != null goto label4;

        $z2 = 0;

        goto label5;

     label4:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z2 = virtualinvoke $r3.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

     label5:
        z1 = $z2;

        if z1 == 0 goto label6;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.STILL_IMAGE_CAMERA_SECURE");

        r1 = $r7;

        goto label7;

     label6:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.STILL_IMAGE_CAMERA");

        r1 = $r4;

     label7:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l4 = l0 / 1000000L;

        virtualinvoke $r5.<android.os.PowerManager: void wakeUp(long)>($l4);

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r8.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r6);

     label8:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState> = b1;

        return;
    }

    void setHdmiPlugged(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z1 == z0 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged> = z0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean,boolean)>(1, 1);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.HDMI_PLUGGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("state", z0);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label1:
        return;
    }

    void initializeHdmiState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.FileReader r2, $r8;
        char[] r3;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r10;
        java.io.File $r6;
        android.os.UEventObserver $r7;
        java.lang.String $r9, $r14, $r24;
        java.lang.StringBuilder $r11, $r13, $r15, $r19, $r20, $r21;
        java.io.IOException $r12, $r16, $r18, $r22, $r23, r26;
        java.lang.NumberFormatException $r17, r28;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 = 0;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("/sys/devices/virtual/switch/hdmi/state");

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label24;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.UEventObserver mHDMIObserver>;

        virtualinvoke $r7.<android.os.UEventObserver: void startObserving(java.lang.String)>("DEVPATH=/devices/virtual/switch/hdmi");

        r2 = null;

     label01:
        $r8 = new java.io.FileReader;

        specialinvoke $r8.<java.io.FileReader: void <init>(java.lang.String)>("/sys/class/switch/hdmi/state");

        r2 = $r8;

        r3 = newarray (char)[15];

        i0 = virtualinvoke r2.<java.io.FileReader: int read(char[])>(r3);

        if i0 <= 1 goto label04;

        $r9 = new java.lang.String;

        $i1 = i0 - 1;

        specialinvoke $r9.<java.lang.String: void <init>(char[],int,int)>(r3, 0, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        if 0 == $i2 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z0 = $z5;

     label04:
        if r2 == null goto label24;

     label05:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label06:
        goto label24;

     label07:
        $r18 := @caughtexception;

        goto label24;

     label08:
        $r12 := @caughtexception;

        r26 = $r12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r14);

     label09:
        if r2 == null goto label24;

     label10:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label11:
        goto label24;

     label12:
        $r22 := @caughtexception;

        goto label24;

     label13:
        $r17 := @caughtexception;

        r28 = $r17;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r24);

     label14:
        if r2 == null goto label24;

     label15:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label16:
        goto label24;

     label17:
        $r16 := @caughtexception;

        goto label24;

     label18:
        $r10 := @caughtexception;

        r4 = $r10;

     label19:
        if r2 == null goto label23;

     label20:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label21:
        goto label23;

     label22:
        $r23 := @caughtexception;

     label23:
        throw r4;

     label24:
        if z0 != 0 goto label25;

        $z4 = 1;

        goto label26;

     label25:
        $z4 = 0;

     label26:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged> = $z4;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z2 != 0 goto label27;

        $z3 = 1;

        goto label28;

     label27:
        $z3 = 0;

     label28:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)>($z3);

        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label01 to label04 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.NumberFormatException from label01 to label04 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label01 to label04 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private void takeScreenshot()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r6;
        android.content.ComponentName r2, $r8;
        android.content.Intent r3, $r9;
        com.android.internal.policy.impl.PhoneWindowManager$14 r4, $r11;
        java.lang.Throwable r5, $r16;
        android.content.ServiceConnection $r7;
        android.os.UserHandle $r12;
        android.content.Context $r13;
        boolean $z0;
        android.os.Handler $r14;
        java.lang.Runnable $r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mScreenshotLock>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection>;

        if $r7 == null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r8 = new android.content.ComponentName;

        specialinvoke $r8.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.screenshot.TakeScreenshotService");

        r2 = $r8;

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>()>();

        r3 = $r9;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r2);

        $r11 = new com.android.internal.policy.impl.PhoneWindowManager$14;

        specialinvoke $r11.<com.android.internal.policy.impl.PhoneWindowManager$14: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        r4 = $r11;

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r12 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $z0 = virtualinvoke $r13.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r3, r4, 1, $r12);

        if $z0 == 0 goto label4;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.ServiceConnection mScreenshotConnection> = r4;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mScreenshotTimeout>;

        virtualinvoke $r14.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r15, 10000L);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r1;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int interceptKeyBeforeQueueing(android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1, $r14;
        int i0, i1, $i3, $i4, $i5, $i6, $i14, $i16, $i17, $i18, $i19, $i23, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i35, $i37;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, z44;
        byte b2, $b7, $b9, $b11, $b20, $b24;
        android.telecom.TelecomManager r2, r26, r27, r29;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r3, $r4, $r25;
        com.android.internal.policy.impl.GlobalKeyManager $r5;
        long $l8, $l10, $l12, $l15, $l21, $l25, $l31, $l34;
        android.os.PowerManager $r6, $r8, $r11, $r23, $r24;
        android.os.PowerManager$WakeLock $r7, $r12;
        android.os.Handler $r9, $r15, $r20;
        android.content.Context $r10, $r17, $r22;
        android.media.session.MediaSessionLegacyHelper $r13, $r18, $r21;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r16;
        java.lang.Runnable $r19;
        android.os.Message r28, r30;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $z9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted>;

        if $z9 != 0 goto label01;

        return 0;

     label01:
        $i4 = i0 & 536870912;

        if $i4 == 0 goto label02;

        $z43 = 1;

        goto label03;

     label02:
        $z43 = 0;

     label03:
        z0 = $z43;

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i3 != 0 goto label04;

        $z37 = 1;

        goto label05;

     label04:
        $z37 = 0;

     label05:
        z1 = $z37;

        z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i5 = i0 & 16777216;

        if $i5 == 0 goto label06;

        $z38 = 1;

        goto label07;

     label06:
        $z38 = 0;

     label07:
        z3 = $z38;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 != null goto label08;

        $z10 = 0;

        goto label10;

     label08:
        if z0 == 0 goto label09;

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z10 = virtualinvoke $r25.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotOccluded()>();

        goto label10;

     label09:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z10 = virtualinvoke $r4.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

     label10:
        z4 = $z10;

        $i6 = i0 & 1;

        if $i6 != 0 goto label11;

        $z40 = virtualinvoke r1.<android.view.KeyEvent: boolean isWakeKey()>();

        if $z40 == 0 goto label12;

     label11:
        $z39 = 1;

        goto label13;

     label12:
        $z39 = 0;

     label13:
        z5 = $z39;

        if z0 != 0 goto label14;

        if z3 == 0 goto label15;

        if z5 != 0 goto label15;

     label14:
        b2 = 1;

        z5 = 0;

        goto label18;

     label15:
        if z0 != 0 goto label16;

        $z41 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean shouldDispatchInputWhenNonInteractive()>();

        if $z41 == 0 goto label16;

        b2 = 1;

        goto label18;

     label16:
        b2 = 0;

        if z5 == 0 goto label18;

        if z1 == 0 goto label17;

        $z42 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isWakeKeyWhenScreenOff(int)>(i1);

        if $z42 != 0 goto label18;

     label17:
        z5 = 0;

     label18:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager>;

        $z11 = virtualinvoke $r5.<com.android.internal.policy.impl.GlobalKeyManager: boolean shouldHandleGlobalKey(int,android.view.KeyEvent)>(i1, r1);

        if $z11 == 0 goto label20;

        if z5 == 0 goto label19;

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l34 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        virtualinvoke $r24.<android.os.PowerManager: void wakeUp(long)>($l34);

     label19:
        return b2;

     label20:
        if z1 == 0 goto label21;

        $i37 = i0 & 2;

        if $i37 == 0 goto label21;

        $i35 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i35 != 0 goto label21;

        $z35 = 1;

        goto label22;

     label21:
        $z35 = 0;

     label22:
        z6 = $z35;

        lookupswitch(i1)
        {
            case 5: goto label58;
            case 6: goto label31;
            case 24: goto label23;
            case 25: goto label23;
            case 26: goto label38;
            case 79: goto label56;
            case 85: goto label56;
            case 86: goto label56;
            case 87: goto label56;
            case 88: goto label56;
            case 89: goto label56;
            case 90: goto label56;
            case 91: goto label56;
            case 126: goto label56;
            case 127: goto label56;
            case 130: goto label56;
            case 164: goto label23;
            case 222: goto label56;
            case 223: goto label53;
            case 224: goto label55;
            case 231: goto label60;
            default: goto label63;
        };

     label23:
        if i1 != 25 goto label25;

        if z1 == 0 goto label24;

        if z0 == 0 goto label27;

        $z32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z32 != 0 goto label27;

        $i30 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i29 = $i30 & 1024;

        if $i29 != 0 goto label27;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered> = 1;

        $l25 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long mVolumeDownKeyTime> = $l25;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyConsumedByScreenshotChord> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptScreenshotChord()>();

        goto label27;

     label24:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        goto label27;

     label25:
        if i1 != 24 goto label27;

        if z1 == 0 goto label26;

        if z0 == 0 goto label27;

        $z28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z28 != 0 goto label27;

        $i23 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i28 = $i23 & 1024;

        if $i28 != 0 goto label27;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered> = 1;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        goto label27;

     label26:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

     label27:
        if z1 == 0 goto label63;

        r2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        if r2 == null goto label29;

        $z30 = virtualinvoke r2.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z30 == 0 goto label28;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: VOLUME key-down while ringing: Silence ringer!");

        virtualinvoke r2.<android.telecom.TelecomManager: void silenceRinger()>();

        b2 = b2 & -2;

        goto label63;

     label28:
        $z29 = virtualinvoke r2.<android.telecom.TelecomManager: boolean isInCall()>();

        if $z29 == 0 goto label29;

        $b24 = b2 & 1;

        if $b24 != 0 goto label29;

        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r21 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r22);

        virtualinvoke $r21.<android.media.session.MediaSessionLegacyHelper: void sendVolumeKeyEvent(android.view.KeyEvent,boolean)>(r1, 0);

        goto label63;

     label29:
        $b20 = b2 & 1;

        if $b20 != 0 goto label30;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r18 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r17);

        virtualinvoke $r18.<android.media.session.MediaSessionLegacyHelper: void sendVolumeKeyEvent(android.view.KeyEvent,boolean)>(r1, 1);

        goto label63;

     label30:
        goto label63;

     label31:
        b2 = b2 & -2;

        if z1 == 0 goto label36;

        r26 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        z7 = 0;

        if r26 == null goto label32;

        z7 = virtualinvoke r26.<android.telecom.TelecomManager: boolean endCall()>();

     label32:
        if z0 == 0 goto label33;

        if z7 == 0 goto label34;

     label33:
        $z33 = 1;

        goto label35;

     label34:
        $z33 = 0;

     label35:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptPowerKeyDown(boolean)>($z33);

        goto label63;

     label36:
        $z31 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptPowerKeyUp(boolean)>(z2);

        if $z31 == 0 goto label63;

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i26 = $i27 & 1;

        if $i26 == 0 goto label37;

        $z34 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean goHome()>();

        if $z34 == 0 goto label37;

        goto label63;

     label37:
        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i33 = $i32 & 2;

        if $i33 == 0 goto label63;

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l31 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        virtualinvoke $r23.<android.os.PowerManager: void goToSleep(long,int,int)>($l31, 4, 0);

        z5 = 0;

        goto label63;

     label38:
        b2 = b2 & -2;

        if z1 == 0 goto label46;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        $l15 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $z20 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>($i14);

        z44 = virtualinvoke $r16.<com.android.internal.policy.impl.ImmersiveModeConfirmation: boolean onPowerKeyDown(boolean,long,boolean)>(z0, $l15, $z20);

        if z44 == 0 goto label39;

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mRequestTransientNav>;

        virtualinvoke $r20.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

     label39:
        if z0 == 0 goto label40;

        $z24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered>;

        if $z24 != 0 goto label40;

        $i16 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i17 = $i16 & 1024;

        if $i17 != 0 goto label40;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered> = 1;

        $l21 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: long mPowerKeyTime> = $l21;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptScreenshotChord()>();

     label40:
        r27 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        z8 = 0;

        if r27 == null goto label42;

        $z25 = virtualinvoke r27.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z25 == 0 goto label41;

        virtualinvoke r27.<android.telecom.TelecomManager: void silenceRinger()>();

        goto label42;

     label41:
        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior>;

        $i19 = $i18 & 2;

        if $i19 == 0 goto label42;

        $z26 = virtualinvoke r27.<android.telecom.TelecomManager: boolean isInCall()>();

        if $z26 == 0 goto label42;

        if z0 == 0 goto label42;

        z8 = virtualinvoke r27.<android.telecom.TelecomManager: boolean endCall()>();

     label42:
        if z0 == 0 goto label43;

        if z8 != 0 goto label43;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeDownKeyTriggered>;

        if $z23 != 0 goto label43;

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mVolumeUpKeyTriggered>;

        if $z22 == 0 goto label44;

     label43:
        $z21 = 1;

        goto label45;

     label44:
        $z21 = 0;

     label45:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void interceptPowerKeyDown(boolean)>($z21);

        goto label63;

     label46:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyTriggered> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        if z2 != 0 goto label47;

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled>;

        if $z19 == 0 goto label48;

     label47:
        $z18 = 1;

        goto label49;

     label48:
        $z18 = 0;

     label49:
        $z17 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptPowerKeyUp(boolean)>($z18);

        if $z17 == 0 goto label52;

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z16 == 0 goto label50;

        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        if $z15 != 0 goto label50;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Suppressed redundant power key press while already in the process of turning the screen on.");

        goto label51;

     label50:
        $l12 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void powerShortPress(long)>($l12);

     label51:
        z5 = 0;

     label52:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPendingPowerKeyUpCanceled> = 0;

        goto label63;

     label53:
        b2 = b2 & -2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $z13 = virtualinvoke $r8.<android.os.PowerManager: boolean isInteractive()>();

        if $z13 != 0 goto label54;

        z6 = 0;

     label54:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l10 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        virtualinvoke $r11.<android.os.PowerManager: void goToSleep(long,int,int)>($l10, 4, 0);

        z5 = 0;

        goto label63;

     label55:
        b2 = b2 & -2;

        z5 = 1;

        goto label63;

     label56:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r13 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r10);

        $z14 = virtualinvoke $r13.<android.media.session.MediaSessionLegacyHelper: boolean isGlobalPriorityActive()>();

        if $z14 == 0 goto label57;

        b2 = b2 & -2;

     label57:
        $b11 = b2 & 1;

        if $b11 != 0 goto label63;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r12.<android.os.PowerManager$WakeLock: void acquire()>();

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r14 = new android.view.KeyEvent;

        specialinvoke $r14.<android.view.KeyEvent: void <init>(android.view.KeyEvent)>(r1);

        r28 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, $r14);

        virtualinvoke r28.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r28.<android.os.Message: void sendToTarget()>();

        goto label63;

     label58:
        if z1 == 0 goto label63;

        r29 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        if r29 == null goto label59;

        $z36 = virtualinvoke r29.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z36 == 0 goto label59;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: CALL key-down while ringing: Answer the call!");

        virtualinvoke r29.<android.telecom.TelecomManager: void acceptRingingCall()>();

        b2 = b2 & -2;

     label59:
        goto label63;

     label60:
        $b7 = b2 & 1;

        if $b7 != 0 goto label63;

        if z1 != 0 goto label63;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void acquire()>();

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        if z4 == 0 goto label61;

        $b9 = 1;

        goto label62;

     label61:
        $b9 = 0;

     label62:
        r30 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(12, $b9, 0);

        virtualinvoke r30.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r30.<android.os.Message: void sendToTarget()>();

     label63:
        if z6 == 0 goto label64;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 1, 0);

     label64:
        if z5 == 0 goto label65;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l8 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        virtualinvoke $r6.<android.os.PowerManager: void wakeUp(long)>($l8);

     label65:
        return b2;
    }

    private boolean isWakeKeyWhenScreenOff(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 24: goto label1;
            case 25: goto label1;
            case 27: goto label4;
            case 79: goto label4;
            case 85: goto label4;
            case 86: goto label4;
            case 87: goto label4;
            case 88: goto label4;
            case 89: goto label4;
            case 90: goto label4;
            case 91: goto label4;
            case 126: goto label4;
            case 127: goto label4;
            case 130: goto label4;
            case 164: goto label1;
            case 222: goto label4;
            default: goto label5;
        };

     label1:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;

     label5:
        return 1;
    }

    public int interceptMotionBeforeQueueingNonInteractive(long, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, $l3;
        int i1, $i2;
        boolean $z0;
        android.os.PowerManager $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = i1 & 1;

        if $i2 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l3 = l0 / 1000000L;

        virtualinvoke $r1.<android.os.PowerManager: void wakeUp(long)>($l3);

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean shouldDispatchInputWhenNonInteractive()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean shouldDispatchInputWhenNonInteractive()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1;
        android.view.Display $r1, $r2;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.Display mDisplay>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r2.<android.view.Display: int getState()>();

        if $i0 == 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        android.os.Message r2;
        boolean $z0;
        int $i0, $i1, $i2;
        android.os.PowerManager$WakeLock $r3, $r7;
        android.os.Handler $r4, $r5, $r6;
        long $l3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock>;

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>(r1);

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $i2 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatTimeout()>();

        $l3 = (long) $i2;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r2, $l3);

        goto label3;

     label2:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label3:
        return;
    }

    void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1, r2;
        long $l0;
        int $i1, $i2;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = $i1 | 128;

        r2 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>(r1, $l0, 1, $i2);

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>(r2);

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        boolean $z0;
        android.content.Context $r2;
        android.media.session.MediaSessionLegacyHelper $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r2);

        virtualinvoke $r3.<android.media.session.MediaSessionLegacyHelper: void sendMediaButtonEvent(android.view.KeyEvent,boolean)>(r1, 1);

     label1:
        return;
    }

    void launchVoiceAssistWithWakeLock(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r4;
        android.content.Context $r5;
        android.os.PowerManager$WakeLock $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.speech.action.VOICE_SEARCH_HANDS_FREE");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.speech.extras.EXTRA_SECURE", z0);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r5.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r4);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    private void requestTransientBars(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r3, $r12;
        java.lang.Object r2, $r6;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable r4, $r13;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r5;
        com.android.internal.policy.impl.BarController $r7, $r8, $r10, $r11;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $r6 = interfaceinvoke $r5.<android.view.WindowManagerPolicy$WindowManagerFuncs: java.lang.Object getWindowManagerLock()>();

        r2 = $r6;

        entermonitor $r6;

     label01:
        $z2 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z2 != 0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        z0 = virtualinvoke $r7.<com.android.internal.policy.impl.BarController: boolean checkShowTransientBarLw()>();

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        z1 = virtualinvoke $r8.<com.android.internal.policy.impl.BarController: boolean checkShowTransientBarLw()>();

        if z0 != 0 goto label04;

        if z1 == 0 goto label11;

     label04:
        if z0 == 0 goto label05;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        goto label06;

     label05:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

     label06:
        r3 = $r12;

        $z3 = z0 ^ z1;

        if $z3 == 0 goto label08;

        if r3 == r1 goto label08;

        exitmonitor r2;

     label07:
        return;

     label08:
        if z0 == 0 goto label09;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r10.<com.android.internal.policy.impl.BarController: void showTransient()>();

     label09:
        if z1 == 0 goto label10;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r11.<com.android.internal.policy.impl.BarController: void showTransient()>();

     label10:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        virtualinvoke $r9.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void confirmCurrentPrompt()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

     label11:
        exitmonitor r2;

     label12:
        goto label15;

     label13:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label14:
        throw r4;

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label07 with label13;
        catch java.lang.Throwable from label08 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void goingToSleep(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 0);

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete> = 0;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r4 == null goto label6;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onScreenTurnedOff(int)>(i0);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void wakingUp()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r10;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r4, $r5, $r7;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener $r6;
        android.os.Handler $r8, $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 1);

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete> = 0;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r4 == null goto label2;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(6);

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(6, 1000L);

     label2:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r5 == null goto label7;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener mKeyguardDelegateCallback>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onScreenTurnedOn(com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate$ShowListener)>($r6);

        goto label8;

     label7:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishKeyguardDrawn()>();

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void finishKeyguardDrawn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0, $z1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete>;

        if $z1 == 0 goto label4;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete> = 1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r4 == null goto label5;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(6);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn()>();

        return;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void screenTurnedOff()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener> = null;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.lang.Runnable $r5;
        android.view.WindowManagerInternal $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$ScreenOnListener;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly> = 1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete> = 0;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener> = r1;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerInternal mWindowManagerInternal>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mWindowManagerDrawCallback>;

        virtualinvoke $r6.<android.view.WindowManagerInternal: void waitForAllWindowsDrawn(java.lang.Runnable,long)>($r5, 1000L);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void finishWindowsDrawn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete>;

        if $z1 == 0 goto label4;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete> = 1;

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn()>();

        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void finishScreenTurningOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$ScreenOnListener r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        android.view.IWindowManager $r5;
        android.os.RemoteException $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        if $z1 != 0 goto label02;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        if $z2 == 0 goto label02;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete>;

        if $z3 == 0 goto label02;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z4 == 0 goto label04;

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete>;

        if $z8 != 0 goto label04;

     label02:
        exitmonitor r2;

     label03:
        return;

     label04:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener>;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$ScreenOnListener mScreenOnListener> = null;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully> = 1;

        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        if $z5 != 0 goto label05;

        $z6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z6 == 0 goto label05;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawnOnce> = 1;

        z0 = 1;

        $z7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mBootMessageNeedsHiding>;

        if $z7 == 0 goto label06;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mBootMessageNeedsHiding> = 0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void hideBootMessages()>();

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        if r1 == null goto label11;

        interfaceinvoke r1.<android.view.WindowManagerPolicy$ScreenOnListener: void onScreenOn()>();

     label11:
        if z0 == 0 goto label15;

     label12:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r5.<android.view.IWindowManager: void enableScreenIfNeeded()>();

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

     label15:
        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch android.os.RemoteException from label12 to label13 with label14;
    }

    private void handleHideBootMessage()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        android.app.ProgressDialog $r4, $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        if $z0 != 0 goto label3;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mBootMessageNeedsHiding> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog>;

        if $r4 == null goto label8;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog>;

        virtualinvoke $r5.<android.app.ProgressDialog: void dismiss()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog> = null;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isScreenOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        return $z0;
    }

    public void enableKeyguard(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setKeyguardEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$OnKeyguardExitResult r1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$OnKeyguardExitResult;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>(r1);

     label1:
        return;
    }

    private boolean keyguardIsShowingTq()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotOccluded()>();

        return $z0;
    }

    public boolean isKeyguardLocked()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardOn()>();

        return $z0;
    }

    public boolean isKeyguardSecure()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isSecure()>();

        return $z0;
    }

    private boolean isKeyguardSecureIncludingHidden()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z1 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean inKeyguardRestrictedKeyInputMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        return $z0;
    }

    public void dismissKeyguardLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindowManager$19 $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = new com.android.internal.policy.impl.PhoneWindowManager$19;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$19: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    public void notifyActivityDrawnForKeyguardLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1;
        com.android.internal.policy.impl.PhoneWindowManager$20 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = new com.android.internal.policy.impl.PhoneWindowManager$20;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$20: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    public boolean isKeyguardDrawnLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void startKeyguardExitAnimation(long, long)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        long l0, l1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void startKeyguardExitAnimation(long,long)>(l0, l1);

     label1:
        return;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    static void sendCloseSystemWindows(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean $z0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void closeSystemDialogs(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int rotationForOrientationLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r4;
        android.content.res.Resources $r5;
        android.content.Context $r6;
        byte $b20;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceDefaultOrientation>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        i2 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: int getProposedRotation()>();

        if i2 >= 0 goto label03;

        i2 = i1;

     label03:
        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i4 != 1 goto label04;

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

        if $i24 < 0 goto label04;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

        goto label27;

     label04:
        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i5 != 2 goto label08;

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z16 != 0 goto label05;

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

        if $i26 < 0 goto label08;

     label05:
        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        if $z17 == 0 goto label06;

        $i25 = i2;

        goto label07;

     label06:
        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

     label07:
        i3 = $i25;

        goto label27;

     label08:
        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i6 == 1 goto label09;

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i22 == 3 goto label09;

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i21 != 4 goto label13;

     label09:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z1 != 0 goto label10;

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

        if $i14 < 0 goto label13;

     label10:
        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        if $z2 == 0 goto label11;

        $i13 = i2;

        goto label12;

     label11:
        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

     label12:
        i3 = $i13;

        goto label27;

     label13:
        $z13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z13 == 0 goto label14;

        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock>;

        if $z15 == 0 goto label14;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation>;

        goto label27;

     label14:
        $z12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        if $z12 == 0 goto label15;

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i18 != 0 goto label15;

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

        if $i23 < 0 goto label15;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

        goto label27;

     label15:
        if i0 != 14 goto label16;

        i3 = i1;

        goto label27;

     label16:
        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSupportAutoRotation>;

        if $z11 != 0 goto label17;

        i3 = -1;

        goto label27;

     label17:
        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i15 != 0 goto label18;

        if i0 == 2 goto label19;

        if i0 == -1 goto label19;

        if i0 == 11 goto label19;

        if i0 == 12 goto label19;

        if i0 == 13 goto label19;

     label18:
        if i0 == 4 goto label19;

        if i0 == 10 goto label19;

        if i0 == 6 goto label19;

        if i0 != 7 goto label25;

     label19:
        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        if $i17 >= 0 goto label22;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $z14 = virtualinvoke $r5.<android.content.res.Resources: boolean getBoolean(int)>(17956902);

        if $z14 == 0 goto label20;

        $b20 = 1;

        goto label21;

     label20:
        $b20 = 0;

     label21:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations> = $b20;

     label22:
        if i2 != 2 goto label23;

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        if $i16 == 1 goto label23;

        if i0 == 10 goto label23;

        if i0 != 13 goto label24;

     label23:
        i3 = i2;

        goto label27;

     label24:
        i3 = i1;

        goto label27;

     label25:
        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        if $i19 != 1 goto label26;

        if i0 == 5 goto label26;

        i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

        goto label27;

     label26:
        i3 = -1;

     label27:
        tableswitch(i0)
        {
            case 0: goto label32;
            case 1: goto label28;
            case 2: goto label56;
            case 3: goto label56;
            case 4: goto label56;
            case 5: goto label56;
            case 6: goto label44;
            case 7: goto label50;
            case 8: goto label40;
            case 9: goto label36;
            case 10: goto label56;
            case 11: goto label44;
            case 12: goto label50;
            default: goto label56;
        };

     label28:
        $z3 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z3 == 0 goto label30;

        exitmonitor r1;

     label29:
        return i3;

     label30:
        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        exitmonitor r1;

     label31:
        return $i7;

     label32:
        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z10 == 0 goto label34;

        exitmonitor r1;

     label33:
        return i3;

     label34:
        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        exitmonitor r1;

     label35:
        return $i12;

     label36:
        $z4 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z4 == 0 goto label38;

        exitmonitor r1;

     label37:
        return i3;

     label38:
        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        exitmonitor r1;

     label39:
        return $i8;

     label40:
        $z5 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z5 == 0 goto label42;

        exitmonitor r1;

     label41:
        return i3;

     label42:
        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        exitmonitor r1;

     label43:
        return $i9;

     label44:
        $z8 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i3);

        if $z8 == 0 goto label46;

        exitmonitor r1;

     label45:
        return i3;

     label46:
        $z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i1);

        if $z9 == 0 goto label48;

        exitmonitor r1;

     label47:
        return i1;

     label48:
        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        exitmonitor r1;

     label49:
        return $i11;

     label50:
        $z7 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i3);

        if $z7 == 0 goto label52;

        exitmonitor r1;

     label51:
        return i3;

     label52:
        $z6 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i1);

        if $z6 == 0 goto label54;

        exitmonitor r1;

     label53:
        return i1;

     label54:
        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        exitmonitor r1;

     label55:
        return $i10;

     label56:
        if i3 < 0 goto label58;

        exitmonitor r1;

     label57:
        return i3;

     label58:
        exitmonitor r1;

     label59:
        return 0;

     label60:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label61:
        throw r2;

        catch java.lang.Throwable from label02 to label29 with label60;
        catch java.lang.Throwable from label30 to label31 with label60;
        catch java.lang.Throwable from label32 to label33 with label60;
        catch java.lang.Throwable from label34 to label35 with label60;
        catch java.lang.Throwable from label36 to label37 with label60;
        catch java.lang.Throwable from label38 to label39 with label60;
        catch java.lang.Throwable from label40 to label41 with label60;
        catch java.lang.Throwable from label42 to label43 with label60;
        catch java.lang.Throwable from label44 to label45 with label60;
        catch java.lang.Throwable from label46 to label47 with label60;
        catch java.lang.Throwable from label48 to label49 with label60;
        catch java.lang.Throwable from label50 to label51 with label60;
        catch java.lang.Throwable from label52 to label53 with label60;
        catch java.lang.Throwable from label54 to label55 with label60;
        catch java.lang.Throwable from label56 to label57 with label60;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label60 to label61 with label60;
    }

    public boolean rotationHasCompatibleMetricsLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label1;
            default: goto label3;
        };

     label1:
        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isAnyPortrait(int)>(i1);

        return $z0;

     label2:
        $z1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isLandscapeOrSeascape(int)>(i1);

        return $z1;

     label3:
        return 1;
    }

    public void setRotationLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void setCurrentRotation(int)>(i0);

        return;
    }

    private boolean isLandscapeOrSeascape(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        if i0 == $i1 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        if i0 != $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isAnyPortrait(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        if i0 == $i1 goto label1;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        if i0 != $i2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getUserRotationMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        byte $b1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "accelerometer_rotation", 0, -2);

        if $i0 == 0 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        return $b1;
    }

    public void setUserRotationMode(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, i1;
        android.content.ContentResolver r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if i0 != 1 goto label1;

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_rotation", i1, -2);

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 0, -2);

        goto label2;

     label1:
        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", 1, -2);

     label2:
        return;
    }

    public void setSafeMode(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        short $s0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode> = z0;

        if z0 == 0 goto label1;

        $s0 = 10001;

        goto label2;

     label1:
        $s0 = 10000;

     label2:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, $s0, 1);

        return;
    }

    static long[] getLongIntArray(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0, i1, $i2, $i3, $i4;
        int[] r1;
        long[] r2;
        long $l5;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<android.content.res.Resources: int[] getIntArray(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $i2 = lengthof r1;

        r2 = newarray (long)[$i2];

        i1 = 0;

     label2:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label3;

        $i4 = r1[i1];

        $l5 = (long) $i4;

        r2[i1] = $l5;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public void systemReady()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, $r9;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r3, $r5;
        android.content.Context $r4;
        com.android.internal.policy.impl.PhoneWindowManager$21 $r7;
        android.os.Handler $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = new com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r3.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils)>($r4, null);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate> = $r3;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onSystemReady()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readCameraLensCoverState()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateUiMode()>();

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady> = 1;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r7 = new com.android.internal.policy.impl.PhoneWindowManager$21;

        specialinvoke $r7.<com.android.internal.policy.impl.PhoneWindowManager$21: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>(r0);

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void systemBooted()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r8;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r3, $r6, $r7;
        android.content.Context $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 == null goto label1;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r6.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void bindService(android.content.Context)>($r5);

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r7.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void onBootCompleted()>();

     label1:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted> = 1;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void wakingUp()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>(null);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void showBootMessage(java.lang.CharSequence, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.CharSequence r1;
        boolean z0;
        com.android.internal.policy.impl.PhoneWindowManager$22 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = new com.android.internal.policy.impl.PhoneWindowManager$22;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$22: void <init>(com.android.internal.policy.impl.PhoneWindowManager,java.lang.CharSequence)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void hideBootMessages()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(11);

        return;
    }

    public void userActivity()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout r1, $r3, $r4, $r6;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        android.os.Handler $r5, $r7;
        int $i0;
        long $l1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, $l1);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void lockNow(android.os.Bundle)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.os.Bundle r1;
        android.content.Context $r2;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout $r3, $r5, $r7;
        android.os.Handler $r4, $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        if r1 == null goto label1;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r7.<com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout: void setLockOptions(android.os.Bundle)>(r1);

     label1:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    private void updateLockScreenTimeout()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout r1, $r3, $r4, $r6;
        boolean z0, $z1, $z2, $z4, $z5, $z6;
        java.lang.Throwable r2, $r10;
        android.os.Handler $r5, $r7;
        int $i0;
        long $l1;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r8, $r9;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn>;

        if $z1 == 0 goto label02;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        if $z4 == 0 goto label02;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r9 == null goto label02;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z6 = virtualinvoke $r8.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isSecure()>();

        if $z6 == 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z0 = $z5;

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z2 == z0 goto label06;

        if z0 == 0 goto label04;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, $l1);

        goto label05;

     label04:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

     label05:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive> = z0;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label09:
        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void enableScreenAfterBoot()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(boolean)>(1);

        return;
    }

    private void applyLidSwitchState()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        boolean $z0;
        android.os.PowerManager $r4;
        long $l1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        if $i0 != 0 goto label1;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r4.<android.os.PowerManager: void goToSleep(long,int,int)>($l1, 3, 1);

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateUiMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.app.IUiModeManager $r2, $r3, $r5;
        int $i0;
        android.os.IBinder $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.IUiModeManager mUiModeManager>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("uimode");

        $r5 = staticinvoke <android.app.IUiModeManager$Stub: android.app.IUiModeManager asInterface(android.os.IBinder)>($r4);

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.IUiModeManager mUiModeManager> = $r5;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.app.IUiModeManager mUiModeManager>;

        $i0 = interfaceinvoke $r3.<android.app.IUiModeManager: int getCurrentModeType()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode> = $i0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateRotation(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void updateRotation(boolean,boolean)>(z0, 0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateRotation(boolean, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0, z1;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void updateRotation(boolean,boolean)>(z0, z1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    android.content.Intent createHomeDockIntent()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, $r8, r12;
        android.content.pm.ActivityInfo r2;
        android.content.pm.ResolveInfo r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        android.os.Bundle $r6, $r7;
        boolean $z0;
        java.lang.String $r9, $r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 = null;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        if $i0 != 3 goto label1;

        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        goto label4;

     label1:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        if $i1 != 2 goto label2;

        goto label4;

     label2:
        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        if $i2 != 6 goto label4;

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i5 == 1 goto label3;

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i4 == 4 goto label3;

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        if $i6 != 3 goto label4;

     label3:
        r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

     label4:
        if r1 != null goto label5;

        return null;

     label5:
        r2 = null;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentUserId>;

        r3 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>(r1, 65664, $i3);

        if r3 == null goto label6;

        r2 = r3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

     label6:
        if r2 == null goto label7;

        $r6 = r2.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r6 == null goto label7;

        $r7 = r2.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $z0 = virtualinvoke $r7.<android.os.Bundle: boolean getBoolean(java.lang.String)>("android.dock_home");

        if $z0 == 0 goto label7;

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r12 = $r8;

        $r11 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r9 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r12.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r11, $r9);

        return r12;

     label7:
        return null;
    }

    void startDockOrHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, $r4;
        android.os.UserHandle $r3, $r6;
        android.content.Context $r5, $r7;
        android.content.ActivityNotFoundException $r8;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void awakenDreams()>();

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

        if r1 == null goto label4;

     label1:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r6 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r7.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r6);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r3 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r5.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r3);

        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    boolean goHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Intent r1, $r5, $r6;
        int i0, $i1, i3;
        android.app.IActivityManager $r2, $r3, $r9;
        android.content.Context $r4, $r10;
        android.content.ContentResolver $r7, $r11;
        java.lang.String $r8, $r12;
        android.os.RemoteException $r13;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

     label1:
        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.uts-test-mode", 0);

        if $i1 != 1 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowManager", "UTS-TEST-MODE");

        goto label4;

     label2:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void stopAppSwitches()>();

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows()>();

        r1 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

        if r1 == null goto label4;

        $r9 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r11);

        i0 = interfaceinvoke $r9.<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, null, r1, $r12, null, null, 0, 1, null, null, -2);

        if i0 != 1 goto label4;

     label3:
        return 0;

     label4:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = virtualinvoke $r6.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r7);

        i3 = interfaceinvoke $r3.<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, null, $r5, $r8, null, null, 0, 1, null, null, -2);

        if i3 != 1 goto label6;

     label5:
        return 0;

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

     label8:
        return 1;

        catch android.os.RemoteException from label1 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public void setCurrentOrientationLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if i0 == $i1 goto label2;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = i0;

        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void performAuditoryFeedbackForAccessibilityIfNeed()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.media.AudioManager r1;
        android.media.Ringtone r2;
        boolean $z0, $z1;
        android.content.Context $r3, $r6;
        java.lang.Object $r4;
        android.net.Uri $r5;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isGlobalAccessibilityGestureEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r1 = (android.media.AudioManager) $r4;

        $z1 = virtualinvoke r1.<android.media.AudioManager: boolean isSilentMode()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = <android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>;

        r2 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>($r6, $r5);

        virtualinvoke r2.<android.media.Ringtone: void setStreamType(int)>(3);

        virtualinvoke r2.<android.media.Ringtone: void play()>();

        return;
    }

    private boolean isGlobalAccessibilityGestureEnabled()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "enable_accessibility_global_gesture_enabled", 0);

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;
        int i0, i1, $i2, $i3;
        boolean z0, z1, $z2, $z3;
        java.lang.String r2;
        android.os.Vibrator $r3, $r9, $r10;
        android.content.Context $r4, $r6;
        android.content.ContentResolver $r5;
        android.media.AudioAttributes $r7, $r8;
        long $l4;
        long[] r11;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $z2 = virtualinvoke $r3.<android.os.Vibrator: boolean hasVibrator()>();

        if $z2 != 0 goto label01;

        return 0;

     label01:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r5, "haptic_feedback_enabled", 0, -2);

        if $i2 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        z1 = $z3;

        if z1 == 0 goto label04;

        if z0 != 0 goto label04;

        return 0;

     label04:
        lookupswitch(i0)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 10000: goto label10;
            case 10001: goto label11;
            default: goto label12;
        };

     label05:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mLongPressVibePattern>;

        goto label13;

     label06:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mVirtualKeyVibePattern>;

        goto label13;

     label07:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mKeyboardTapVibePattern>;

        goto label13;

     label08:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mClockTickVibePattern>;

        goto label13;

     label09:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mCalendarDateVibePattern>;

        goto label13;

     label10:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeDisabledVibePattern>;

        goto label13;

     label11:
        r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: long[] mSafeModeEnabledVibePattern>;

        goto label13;

     label12:
        return 0;

     label13:
        if r1 == null goto label14;

        i1 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getOwningUid()>();

        r2 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: java.lang.String getOwningPackage()>();

        goto label15;

     label14:
        i1 = staticinvoke <android.os.Process: int myUid()>();

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        r2 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

     label15:
        $i3 = lengthof r11;

        if $i3 != 1 goto label16;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $l4 = r11[0];

        $r8 = <com.android.internal.policy.impl.PhoneWindowManager: android.media.AudioAttributes VIBRATION_ATTRIBUTES>;

        virtualinvoke $r10.<android.os.Vibrator: void vibrate(int,java.lang.String,long,android.media.AudioAttributes)>(i1, r2, $l4, $r8);

        goto label17;

     label16:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.media.AudioAttributes VIBRATION_ATTRIBUTES>;

        virtualinvoke $r9.<android.os.Vibrator: void vibrate(int,java.lang.String,long[],int,android.media.AudioAttributes)>(i1, r2, r11, -1, $r7);

     label17:
        return 1;
    }

    public void keepScreenOnStartedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        return;
    }

    public void keepScreenOnStoppedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r1, $r2;
        boolean $z0;
        android.os.PowerManager $r3;
        long $l0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: boolean isShowingAndNotOccluded()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 0);

     label1:
        return;
    }

    private int updateSystemUiVisibilityLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, $r2, $r4, $r10;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, $z1, $z3, $z4;
        android.view.WindowManager$LayoutParams $r3;
        com.android.internal.policy.impl.PhoneWindowManager$23 $r5;
        android.view.IApplicationToken $r6, $r8, $r9;
        android.os.Handler $r7;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        if $r2 == null goto label1;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        goto label2;

     label1:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

     label2:
        r1 = $r10;

        if r1 != null goto label3;

        return 0;

     label3:
        $r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i4 = $i3 & 1024;

        if $i4 == 0 goto label4;

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z4 != 1 goto label4;

        return 0;

     label4:
        $i5 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getSystemUiVisibility(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r1, null);

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $i7 = $i6 ^ -1;

        $i10 = $i5 & $i7;

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $i9 = $i8 ^ -1;

        i0 = $i10 & $i9;

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        if $z1 == 0 goto label5;

        $i13 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer>;

        if $i13 >= $i15 goto label5;

        $i14 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int adjustClearableFlags(android.view.WindowManagerPolicy$WindowState,int)>(r1, 7);

        $i16 = $i14 ^ -1;

        i0 = i0 & $i16;

     label5:
        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        i1 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r1, $i11, i0);

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        i2 = i1 ^ $i12;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        z0 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: boolean getNeedsMenuLw(android.view.WindowManagerPolicy$WindowState)>($r4);

        if i2 != 0 goto label6;

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        if $z3 != z0 goto label6;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        $r9 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        if $r8 != $r9 goto label6;

        return 0;

     label6:
        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags> = i1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu> = z0;

        $r6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp> = $r6;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = new com.android.internal.policy.impl.PhoneWindowManager$23;

        specialinvoke $r5.<com.android.internal.policy.impl.PhoneWindowManager$23: void <init>(com.android.internal.policy.impl.PhoneWindowManager,int,boolean)>(r0, i1, z0);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return i2;
    }

    private int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2, $r7, $r8, $r10, $r15, $r16, $r17;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27;
        java.lang.String r3;
        com.android.internal.policy.impl.BarController $r4, $r5, $r9, $r11, $r12, $r13;
        android.view.WindowManager$LayoutParams $r6;
        com.android.internal.policy.impl.ImmersiveModeConfirmation $r14;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z10 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isStatusBarKeyguard()>();

        if $z10 == 0 goto label01;

        $z25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z25 != 0 goto label01;

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        goto label02;

     label01:
        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

     label02:
        r2 = $r17;

        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        i12 = virtualinvoke $r4.<com.android.internal.policy.impl.BarController: int applyTranslucentFlagLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r2, i1, i0);

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        i13 = virtualinvoke $r5.<com.android.internal.policy.impl.BarController: int applyTranslucentFlagLw(android.view.WindowManagerPolicy$WindowState,int,int)>(r2, i12, i0);

        $r6 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2000 goto label03;

        $z26 = 1;

        goto label04;

     label03:
        $z26 = 0;

     label04:
        z0 = $z26;

        if z0 == 0 goto label06;

        $z24 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isStatusBarKeyguard()>();

        if $z24 != 0 goto label06;

        i2 = 6150;

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        if $z23 == 0 goto label05;

        i2 = i2 | -1073741824;

     label05:
        $i10 = i2 ^ -1;

        $i11 = i13 & $i10;

        $i9 = i0 & i2;

        i13 = $i11 | $i9;

     label06:
        $z11 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean areTranslucentBarsAllowed()>();

        if $z11 != 0 goto label07;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if r2 == $r16 goto label07;

        i13 = i13 & 1073709055;

     label07:
        $i4 = i13 & 4096;

        if $i4 == 0 goto label08;

        $z21 = 1;

        goto label09;

     label08:
        $z21 = 0;

     label09:
        z27 = $z21;

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r7 == null goto label10;

        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $i7 = staticinvoke <com.android.internal.policy.impl.PolicyControl: int getWindowFlags(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>($r15, null);

        $i8 = $i7 & 1024;

        if $i8 == 0 goto label10;

        $z22 = 1;

        goto label11;

     label10:
        $z22 = 0;

     label11:
        z1 = $z22;

        $i5 = i13 & 4;

        if $i5 == 0 goto label12;

        $z19 = 1;

        goto label13;

     label12:
        $z19 = 0;

     label13:
        z2 = $z19;

        $i6 = i13 & 2;

        if $i6 == 0 goto label14;

        $z20 = 1;

        goto label15;

     label14:
        $z20 = 0;

     label15:
        z3 = $z20;

        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r8 == null goto label18;

        if z1 != 0 goto label17;

        if z2 == 0 goto label16;

        if z27 != 0 goto label17;

     label16:
        if z0 == 0 goto label18;

     label17:
        $z16 = 1;

        goto label19;

     label18:
        $z16 = 0;

     label19:
        z4 = $z16;

        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r10 == null goto label20;

        if z3 == 0 goto label20;

        if z27 == 0 goto label20;

        $z15 = 1;

        goto label21;

     label20:
        $z15 = 0;

     label21:
        z5 = $z15;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        $z13 = virtualinvoke $r9.<com.android.internal.policy.impl.BarController: boolean isTransientShowRequested()>();

        if $z13 == 0 goto label22;

        if z4 != 0 goto label22;

        if z2 == 0 goto label22;

        $z18 = 1;

        goto label23;

     label22:
        $z18 = 0;

     label23:
        z6 = $z18;

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        $z12 = virtualinvoke $r12.<com.android.internal.policy.impl.BarController: boolean isTransientShowRequested()>();

        if $z12 == 0 goto label24;

        if z5 != 0 goto label24;

        $z17 = 1;

        goto label25;

     label24:
        $z17 = 0;

     label25:
        z7 = $z17;

        if z6 != 0 goto label26;

        if z7 == 0 goto label27;

     label26:
        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void clearClearableFlagsLw()>();

     label27:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        i14 = virtualinvoke $r11.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(z4, i0, i13);

        z8 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>(i0);

        z9 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isImmersiveMode(int)>(i14);

        if r1 == null goto label28;

        if z8 == z9 goto label28;

        r3 = interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowState: java.lang.String getOwningPackage()>();

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ImmersiveModeConfirmation mImmersiveModeConfirmation>;

        $z14 = virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isUserSetupComplete()>();

        virtualinvoke $r14.<com.android.internal.policy.impl.ImmersiveModeConfirmation: void immersiveModeChanged(java.lang.String,boolean,boolean)>(r3, z9, $z14);

     label28:
        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        i15 = virtualinvoke $r13.<com.android.internal.policy.impl.BarController: int updateVisibilityLw(boolean,int,int)>(z5, i0, i14);

        return i15;
    }

    private void clearClearableFlagsLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i1, $i2;
        android.view.WindowManagerPolicy$WindowManagerFuncs $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        i0 = $i1 | 7;

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        if i0 == $i2 goto label1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags> = i0;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()>();

     label1:
        return;
    }

    private boolean isImmersiveMode(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0, $i2, $i3;
        android.view.WindowManagerPolicy$WindowState $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r1 == null goto label1;

        $i2 = i0 & 2;

        if $i2 == 0 goto label1;

        $i3 = i0 & 6144;

        if $i3 == 0 goto label1;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean canHideNavigationBar()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean areTranslucentBarsAllowed()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0, $z1, $z2;
        android.view.accessibility.AccessibilityManager $r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTranslucentDecorEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z1 = virtualinvoke $r1.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean hasNavigationBar()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasNavigationBar>;

        return $z0;
    }

    public void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1, r2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        r2 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow> = r1;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow> = r2;

        return;
    }

    public int getInputMethodWindowVisibleHeightLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void setCurrentUserLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate $r2, $r5;
        com.android.internal.statusbar.IStatusBarService $r3, $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentUserId> = i0;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r5.<com.android.internal.policy.impl.keyguard.KeyguardServiceDelegate: void setCurrentUser(int)>(i0);

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        if $r3 == null goto label5;

     label2:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        interfaceinvoke $r4.<com.android.internal.statusbar.IStatusBarService: void setCurrentUser(int)>(i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(null, null);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean canMagnifyWindow(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 2011: goto label1;
            case 2012: goto label1;
            case 2019: goto label1;
            case 2027: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean isTopLevelWindow(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 < 1000 goto label3;

        if i0 > 1999 goto label3;

        if i0 != 1003 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 1;
    }

    public void dump(java.lang.String, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.String r1, $r4, $r5, $r6;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86;
        android.view.IApplicationToken $r7, $r18;
        android.view.WindowManagerPolicy$WindowState $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r30;
        com.android.internal.policy.impl.BarController $r16, $r26;
        com.android.internal.policy.impl.GlobalKeyManager $r17;
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener $r25, $r29;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r27, $r28;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mSafeMode=");

        $z0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemReady=");

        $z1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemReady>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemBooted=");

        $z2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSystemBooted>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLidState=");

        $i0 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidState>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidOpenRotation=");

        $i1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidOpenRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mCameraLensCoverState=");

        $i2 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCameraLensCoverState>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHdmiPlugged=");

        $z3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHdmiPlugged>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z3);

        $i3 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        if $i3 != 0 goto label01;

        $i85 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        if $i85 != 0 goto label01;

        $i86 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        if $i86 == 0 goto label02;

     label01:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastSystemUiFlags=0x");

        $i4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLastSystemUiFlags>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mResettingSystemUiFlags=0x");

        $i5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mResettingSystemUiFlags>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mForceClearedSystemUiFlags=0x");

        $i6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForceClearedSystemUiFlags>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

     label02:
        $z5 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        if $z5 == 0 goto label03;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastFocusNeedsMenu=");

        $z31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLastFocusNeedsMenu>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z31);

     label03:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mWakeGestureEnabledSetting=");

        $z4 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mSupportAutoRotation=");

        $z6 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSupportAutoRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z6);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUiMode=");

        $i7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUiMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDockMode=");

        $i9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mCarDockRotation=");

        $i8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCarDockRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i8);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDeskDockRotation=");

        $i11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDeskDockRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUserRotationMode=");

        $i10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotationMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i10);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mUserRotation=");

        $i13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUserRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i13);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mAllowAllRotations=");

        $i12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAllowAllRotations>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i12);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCurrentAppOrientation=");

        $i14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCarDockEnablesAccelerometer=");

        $z7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mCarDockEnablesAccelerometer>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z7);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDeskDockEnablesAccelerometer=");

        $z8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDeskDockEnablesAccelerometer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z8);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLidKeyboardAccessibility=");

        $i15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidKeyboardAccessibility>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i15);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidNavigationAccessibility=");

        $i18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLidNavigationAccessibility>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i18);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLidControlsSleep=");

        $z9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidControlsSleep>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mShortPressOnPowerBehavior=");

        $i16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLongPressOnPowerBehavior=");

        $i17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mHasSoftInput=");

        $z12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z12);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mAwake=");

        $z13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAwake>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z13);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mScreenOnEarly=");

        $z10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnEarly>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z10);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mScreenOnFully=");

        $z11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOnFully>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mKeyguardDrawComplete=");

        $z15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mKeyguardDrawComplete>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z15);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mWindowManagerDrawComplete=");

        $z16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mWindowManagerDrawComplete>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z16);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mOrientationSensorEnabled=");

        $z14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mOverscanScreen=(");

        $i19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i19);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i23);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i20);

        $i21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        if $i21 != 0 goto label04;

        $i82 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        if $i82 != 0 goto label04;

        $i83 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        if $i83 != 0 goto label04;

        $i84 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        if $i84 == 0 goto label05;

     label04:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mOverscan left=");

        $i27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i27);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" top=");

        $i26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i26);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" right=");

        $i25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i25);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" bottom=");

        $i24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mOverscanBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i24);

     label05:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mRestrictedOverscanScreen=(");

        $i31 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i31);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i30);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i29);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedOverscanScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i28);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUnrestrictedScreen=(");

        $i35 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i35);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i34 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i34);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i33 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i33);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i32 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUnrestrictedScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i32);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mRestrictedScreen=(");

        $i39 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i39);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i38 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i38);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(") ");

        $i37 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenWidth>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i37);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i36 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mRestrictedScreenHeight>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i36);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStableFullscreen=(");

        $i44 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i44);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i45 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i45);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i46 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i46);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i47 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableFullscreenBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i47);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStable=(");

        $i40 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i40);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i41 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i41);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i42 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i42);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i43 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStableBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i43);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mSystem=(");

        $i52 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i52);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i53 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i53);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i54 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i54);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i55 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSystemBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i55);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mCur=(");

        $i48 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i48);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i49 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i49);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i50 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i50);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i51 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i51);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mContent=(");

        $i61 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i61);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i60 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i60);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i63 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i63);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i62 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i62);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mVoiceContent=(");

        $i57 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i57);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i56 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i56);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i59 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i59);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i58 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mVoiceContentBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i58);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDock=(");

        $i67 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i67);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i66 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i66);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(")-(");

        $i69 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i69);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i68 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i68);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDockLayer=");

        $i65 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i65);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mStatusBarLayer=");

        $i64 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mStatusBarLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i64);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mShowingLockscreen=");

        $z18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingLockscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z18);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mShowingDream=");

        $z17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShowingDream>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDreamingLockscreen=");

        $z19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDreamingLockscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z19);

        $r13 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        if $r13 == null goto label06;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastInputMethodWindow=");

        $r23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r23);

     label06:
        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        if $r11 == null goto label07;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastInputMethodTargetWindow=");

        $r24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mLastInputMethodTargetWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r24);

     label07:
        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r12 == null goto label08;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mStatusBar=");

        $r22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("isStatusBarKeyguard=");

        $z29 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isStatusBarKeyguard()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z29);

     label08:
        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        if $r9 == null goto label09;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mNavigationBar=");

        $r20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mNavigationBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

     label09:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        if $r10 == null goto label10;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mFocusedWindow=");

        $r21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mFocusedWindow>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

     label10:
        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        if $r7 == null goto label11;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mFocusedApp=");

        $r18 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IApplicationToken mFocusedApp>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r18);

     label11:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        if $r8 == null goto label12;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mWinDismissingKeyguard=");

        $r19 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r19);

     label12:
        $r15 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r15 == null goto label13;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mTopFullscreenOpaqueWindowState=");

        $r30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r30);

     label13:
        $z24 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        if $z24 == 0 goto label14;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForcingShowNavBar=");

        $z30 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForcingShowNavBar>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z30);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForcingShowNavBarLayer=");

        $i81 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mForcingShowNavBarLayer>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i81);

     label14:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mTopIsFullscreen=");

        $z22 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mTopIsFullscreen>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z22);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHideLockScreen=");

        $z23 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHideLockScreen>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z23);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mForceStatusBar=");

        $z20 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z20);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mForceStatusBarFromKeyguard=");

        $z21 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBarFromKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z21);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDismissKeyguard=");

        $i70 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDismissKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i70);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mWinDismissingKeyguard=");

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mWinDismissingKeyguard>;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.Object)>($r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHomePressed=");

        $z27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z27);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mAllowLockscreenWhenOn=");

        $z26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mAllowLockscreenWhenOn>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z26);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimeout=");

        $i75 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLockScreenTimeout>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i75);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimerActive=");

        $z25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLockScreenTimerActive>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z25);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mEndcallBehavior=");

        $i74 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i74);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mIncallPowerBehavior=");

        $i73 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mIncallPowerBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i73);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLongPressOnHomeBehavior=");

        $i72 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i72);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLandscapeRotation=");

        $i71 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mLandscapeRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i71);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mSeascapeRotation=");

        $i80 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mSeascapeRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i80);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mPortraitRotation=");

        $i79 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mPortraitRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i79);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mUpsideDownRotation=");

        $i78 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUpsideDownRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i78);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mDemoHdmiRotation=");

        $i77 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDemoHdmiRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i77);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mDemoHdmiRotationLock=");

        $z28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mDemoHdmiRotationLock>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z28);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUndockedHdmiRotation=");

        $i76 = r0.<com.android.internal.policy.impl.PhoneWindowManager: int mUndockedHdmiRotation>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i76);

        $r17 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalKeyManager mGlobalKeyManager>;

        virtualinvoke $r17.<com.android.internal.policy.impl.GlobalKeyManager: void dump(java.lang.String,java.io.PrintWriter)>(r1, r2);

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mStatusBarController>;

        virtualinvoke $r16.<com.android.internal.policy.impl.BarController: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

        $r26 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.BarController mNavigationBarController>;

        virtualinvoke $r26.<com.android.internal.policy.impl.BarController: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

        staticinvoke <com.android.internal.policy.impl.PolicyControl: void dump(java.lang.String,java.io.PrintWriter)>(r1, r2);

        $r25 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        if $r25 == null goto label15;

        $r29 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        virtualinvoke $r29.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

     label15:
        $r28 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        if $r28 == null goto label16;

        $r27 = r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r27.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void dump(java.io.PrintWriter,java.lang.String)>(r2, r1);

     label16:
        return;
    }

    static void access$000(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void enablePointerLocation()>();

        return;
    }

    static void access$100(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void disablePointerLocation()>();

        return;
    }

    static void access$200(com.android.internal.policy.impl.PhoneWindowManager, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void showRecentApps(boolean)>(z0);

        return;
    }

    static void access$300(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishKeyguardDrawn()>();

        return;
    }

    static void access$400(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void finishWindowsDrawn()>();

        return;
    }

    static void access$500(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void handleHideBootMessage()>();

        return;
    }

    static java.lang.Object access$600(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$700(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean shouldEnableWakeGestureLp()>();

        return $z0;
    }

    static void access$800(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()>();

        return;
    }

    static void access$900(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void takeScreenshot()>();

        return;
    }

    static void access$1100(com.android.internal.policy.impl.PhoneWindowManager, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        android.view.WindowManagerPolicy$WindowState r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r1 := @parameter1: android.view.WindowManagerPolicy$WindowState;

        specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: void requestTransientBars(android.view.WindowManagerPolicy$WindowState)>(r1);

        return;
    }

    static java.lang.Runnable access$1200(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mClearHideNavigationFlag>;

        return $r1;
    }

    static int access$1300(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = specialinvoke r0.<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()>();

        return $i0;
    }

    static void <clinit>()
    {
        android.media.AudioAttributes$Builder $r0, $r1, $r2;
        android.media.AudioAttributes $r3;
        android.util.SparseArray $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        android.graphics.Rect $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19;
        int[] $r18;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean PRINT_ANIM> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_LAUNCH_VOICE_ASSIST_WITH_WAKE_LOCK> = 12;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_HIDE_BOOT_MESSAGE> = 11;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_SHOW_GLOBAL_ACTIONS> = 10;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_SHOW_RECENTS> = 9;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_WINDOW_MANAGER_DRAWN_COMPLETE> = 7;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_KEYGUARD_DRAWN_TIMEOUT> = 6;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_KEYGUARD_DRAWN_COMPLETE> = 5;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK> = 4;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_DISABLE_POINTER_LOCATION> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int MSG_ENABLE_POINTER_LOCATION> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int BRIGHTNESS_STEPS> = 10;

        <com.android.internal.policy.impl.PhoneWindowManager: float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER> = 2.5F;

        <com.android.internal.policy.impl.PhoneWindowManager: long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS> = 150L;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_CONTINUE> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_START> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DISMISS_KEYGUARD_NONE> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int WAITING_FOR_DRAWN_TIMEOUT> = 1000;

        <com.android.internal.policy.impl.PhoneWindowManager: int SYSTEM_UI_CHANGING_LAYOUT> = -1073709050;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_ASSIST> = "assist";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY> = "homekey";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS> = "recentapps";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS> = "globalactions";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_KEY> = "reason";

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_SUB_PANEL_SUBLAYER> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_PANEL_SUBLAYER> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_MEDIA_OVERLAY_SUBLAYER> = -1;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_MEDIA_SUBLAYER> = -2;

        <com.android.internal.policy.impl.PhoneWindowManager: int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DOUBLE_TAP_HOME_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_ASSIST> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_RECENT_SYSTEM_UI> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_HOME_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_GLOBAL_ACTIONS> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int LONG_PRESS_POWER_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP_AND_GO_HOME> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int SHORT_PRESS_POWER_GO_TO_SLEEP> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int SHORT_PRESS_POWER_NOTHING> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean ENABLE_DESK_DOCK_HOME_CAPTURE> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean ENABLE_CAR_DOCK_HOME_CAPTURE> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_PROCESSES_ON_ALT_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_STARTING_ANIMATIONS> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_WAKEUP> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_STARTING_WINDOW> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_INPUT> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_LAYOUT> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean localLOGV> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String TAG> = "WindowManager";

        $r0 = new android.media.AudioAttributes$Builder;

        specialinvoke $r0.<android.media.AudioAttributes$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>(4);

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(13);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.media.AudioAttributes VIBRATION_ATTRIBUTES> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories> = $r4;

        $r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(64, "android.intent.category.APP_BROWSER");

        $r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>(65, "android.intent.category.APP_EMAIL");

        $r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r7.<android.util.SparseArray: void append(int,java.lang.Object)>(207, "android.intent.category.APP_CONTACTS");

        $r8 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(208, "android.intent.category.APP_CALENDAR");

        $r9 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r9.<android.util.SparseArray: void append(int,java.lang.Object)>(209, "android.intent.category.APP_MUSIC");

        $r10 = <com.android.internal.policy.impl.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r10.<android.util.SparseArray: void append(int,java.lang.Object)>(210, "android.intent.category.APP_CALCULATOR");

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame> = $r12;

        $r13 = new android.graphics.Rect;

        specialinvoke $r13.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpOverscanFrame> = $r13;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame> = $r14;

        $r15 = new android.graphics.Rect;

        specialinvoke $r15.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame> = $r15;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDecorFrame> = $r17;

        $r16 = new android.graphics.Rect;

        specialinvoke $r16.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpStableFrame> = $r16;

        $r19 = new android.graphics.Rect;

        specialinvoke $r19.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpNavigationFrame> = $r19;

        $r18 = newarray (int)[2];

        $r18[0] = 2003;

        $r18[1] = 2010;

        <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK> = $r18;

        return;
    }
}
