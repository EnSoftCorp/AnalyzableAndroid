class com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener extends com.android.internal.policy.impl.WakeGestureListener
{
    final com.android.internal.policy.impl.PhoneWindowManager this$0;

    void <init>(com.android.internal.policy.impl.PhoneWindowManager, android.content.Context, android.os.Handler)
    {
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener r0;
        com.android.internal.policy.impl.PhoneWindowManager r1;
        android.content.Context r2;
        android.os.Handler r3;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Handler;

        r0.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: com.android.internal.policy.impl.PhoneWindowManager this$0> = r1;

        specialinvoke r0.<com.android.internal.policy.impl.WakeGestureListener: void <init>(android.content.Context,android.os.Handler)>(r2, r3);

        return;
    }

    public void onWakeUp()
    {
        com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r9;
        com.android.internal.policy.impl.PhoneWindowManager $r3, $r5, $r6, $r7;
        boolean $z0;
        android.os.PowerManager $r8;
        long $l0;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener;

        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r4 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object access$600(com.android.internal.policy.impl.PhoneWindowManager)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $z0 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: boolean access$700(com.android.internal.policy.impl.PhoneWindowManager)>($r5);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 1, 0);

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager$MyWakeGestureListener: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r8 = $r7.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r8.<android.os.PowerManager: void wakeUp(long)>($l0);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
