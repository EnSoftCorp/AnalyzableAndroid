public abstract class com.android.internal.policy.impl.WindowOrientationListener extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean LOG;
    private static final boolean USE_GRAVITY_SENSOR;
    private android.os.Handler mHandler;
    private android.hardware.SensorManager mSensorManager;
    private boolean mEnabled;
    private int mRate;
    private android.hardware.Sensor mSensor;
    private com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener;
    private int mCurrentRotation;
    private final java.lang.Object mLock;

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<com.android.internal.policy.impl.WindowOrientationListener: void <init>(android.content.Context,android.os.Handler,int)>(r1, r2, 2);

        return;
    }

    private void <init>(android.content.Context, android.os.Handler, int)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        android.content.Context r1;
        android.os.Handler r2;
        int i0;
        java.lang.Object $r3, $r4;
        android.hardware.SensorManager $r5, $r6;
        android.hardware.Sensor $r7, $r8;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r9;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation> = -1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock> = $r3;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.os.Handler mHandler> = r2;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r5 = (android.hardware.SensorManager) $r4;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager> = $r5;

        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mRate> = i0;

        $r6 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r7 = virtualinvoke $r6.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor> = $r7;

        $r8 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r8 == null goto label1;

        $r9 = new com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl;

        specialinvoke $r9.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void <init>(com.android.internal.policy.impl.WindowOrientationListener)>(r0);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener> = $r9;

     label1:
        return;
    }

    public void enable()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r10;
        android.hardware.Sensor $r4, $r7;
        boolean $z0, $z1;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r5, $r8;
        android.os.Handler $r6;
        int $i0;
        android.hardware.SensorManager $r9;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r4 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Not enabled");

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 0 goto label5;

        $z1 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "WindowOrientationListener enabled");

     label4:
        $r5 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        staticinvoke <com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void access$000(com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl)>($r5);

        $r9 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r8 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        $r7 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mRate>;

        $r6 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r8, $r7, $i0, $r6);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled> = 1;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void disable()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        android.hardware.Sensor $r4;
        boolean $z0, $z1;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r5;
        android.hardware.SensorManager $r6;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r4 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Invalid disable");

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 1 goto label5;

        $z1 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "WindowOrientationListener disabled");

     label4:
        $r6 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r5 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        virtualinvoke $r6.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r5);

        r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled> = 0;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void setCurrentRotation(int)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation> = i0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getProposedRotation()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r4;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        if $z0 == 0 goto label3;

        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        $i0 = virtualinvoke $r4.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: int getProposedRotationLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean canDetectOrientation()
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.hardware.Sensor $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        $r3 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public abstract void onProposedRotationChanged(int);

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r9, $r16, $r21, $r27, $r34, r37;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r36;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r26, $r28, $r29, $r30, $r31, $r33;
        boolean $z0;
        int $i0, $i1;
        android.hardware.Sensor $r25;
        com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl $r32, $r35;

        r0 := @this: com.android.internal.policy.impl.WindowOrientationListener;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WindowOrientationListener");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r37 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mEnabled=");

        $z0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: boolean mEnabled>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentRotation=");

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSensor=");

        $r25 = r0.<com.android.internal.policy.impl.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRate=");

        $i1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mRate>;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        $r32 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        if $r32 == null goto label2;

        $r35 = r0.<com.android.internal.policy.impl.WindowOrientationListener: com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl mSensorEventListener>;

        virtualinvoke $r35.<com.android.internal.policy.impl.WindowOrientationListener$SensorEventListenerImpl: void dumpLocked(java.io.PrintWriter,java.lang.String)>(r1, r37);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r36 := @caughtexception;

        r4 = $r36;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static java.lang.Object access$100(com.android.internal.policy.impl.WindowOrientationListener)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener;

        $r1 = r0.<com.android.internal.policy.impl.WindowOrientationListener: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$200()
    {
        boolean $z0;

        $z0 = <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG>;

        return $z0;
    }

    static int access$300(com.android.internal.policy.impl.WindowOrientationListener)
    {
        com.android.internal.policy.impl.WindowOrientationListener r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.impl.WindowOrientationListener;

        $i0 = r0.<com.android.internal.policy.impl.WindowOrientationListener: int mCurrentRotation>;

        return $i0;
    }

    static void <clinit>()
    {
        boolean $z0;

        <com.android.internal.policy.impl.WindowOrientationListener: boolean USE_GRAVITY_SENSOR> = 0;

        <com.android.internal.policy.impl.WindowOrientationListener: java.lang.String TAG> = "WindowOrientationListener";

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.orientation.log", 0);

        <com.android.internal.policy.impl.WindowOrientationListener: boolean LOG> = $z0;

        return;
    }
}
