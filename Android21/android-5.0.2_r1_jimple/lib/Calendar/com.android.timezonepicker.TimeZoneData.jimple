public class com.android.timezonepicker.TimeZoneData extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final int OFFSET_ARRAY_OFFSET;
    private static final java.lang.String PALESTINE_COUNTRY_CODE;
    java.util.ArrayList mTimeZones;
    java.util.LinkedHashMap mTimeZonesByCountry;
    java.util.HashSet mTimeZoneNames;
    private long mTimeMillis;
    private java.util.HashMap mCountryCodeToNameMap;
    public java.lang.String mDefaultTimeZoneId;
    public static boolean is24HourFormat;
    private com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo;
    private java.lang.String mAlternateDefaultTimeZoneId;
    private java.lang.String mDefaultTimeZoneCountry;
    private java.util.HashMap mTimeZonesById;
    private boolean[] mHasTimeZonesInHrOffset;
    android.util.SparseArray mTimeZonesByOffsets;
    private android.content.Context mContext;
    private java.lang.String mPalestineDisplayName;
    private static java.util.Locale mBackupCountryLocale;
    private static java.lang.String[] mBackupCountryCodes;
    private static java.lang.String[] mBackupCountryNames;

    public void <init>(android.content.Context, java.lang.String, long)
    {
        com.android.timezonepicker.TimeZoneData r0;
        android.content.Context r1;
        java.lang.String r2, $r7, $r11;
        long l0, l1, $l4, $l5;
        java.util.HashSet $r3;
        java.util.HashMap $r4;
        boolean[] $r5;
        boolean $z0;
        byte $b2;
        android.content.res.Resources $r6;
        int $i3;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneData: java.util.HashSet mTimeZoneNames> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mCountryCodeToNameMap> = $r4;

        $r5 = newarray (boolean)[40];

        r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset> = $r5;

        r0.<com.android.timezonepicker.TimeZoneData: android.content.Context mContext> = r1;

        $z0 = staticinvoke <android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>(r1);

        <com.android.timezonepicker.TimeZoneInfo: boolean is24HourFormat> = $z0;

        <com.android.timezonepicker.TimeZoneData: boolean is24HourFormat> = $z0;

        r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mAlternateDefaultTimeZoneId> = r2;

        r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneId> = r2;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        r0.<com.android.timezonepicker.TimeZoneData: long mTimeMillis> = l1;

        goto label2;

     label1:
        r0.<com.android.timezonepicker.TimeZoneData: long mTimeMillis> = l0;

     label2:
        $r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = <com.android.timezonepicker.R$string: int palestine_display_name>;

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>($i3);

        r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mPalestineDisplayName> = $r7;

        virtualinvoke r0.<com.android.timezonepicker.TimeZoneData: void loadTzs(android.content.Context)>(r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time to load time zones (ms): ");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l4 - l1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TimeZoneData", $r11);

        return;
    }

    public void setTime(long)
    {
        com.android.timezonepicker.TimeZoneData r0;
        long l0;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        l0 := @parameter0: long;

        r0.<com.android.timezonepicker.TimeZoneData: long mTimeMillis> = l0;

        return;
    }

    public com.android.timezonepicker.TimeZoneInfo get(int)
    {
        com.android.timezonepicker.TimeZoneData r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.timezonepicker.TimeZoneInfo $r3;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.timezonepicker.TimeZoneInfo) $r2;

        return $r3;
    }

    public int size()
    {
        com.android.timezonepicker.TimeZoneData r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        $r1 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public int getDefaultTimeZoneIndex()
    {
        com.android.timezonepicker.TimeZoneData r0;
        com.android.timezonepicker.TimeZoneInfo $r1;
        java.util.ArrayList $r2;
        int $i0;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        $r2 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $r1 = r0.<com.android.timezonepicker.TimeZoneData: com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }

    public int findIndexByTimeZoneIdSlow(java.lang.String)
    {
        com.android.timezonepicker.TimeZoneData r0;
        java.lang.String r1, $r6;
        int i0;
        java.util.Iterator r2;
        com.android.timezonepicker.TimeZoneInfo r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: java.lang.String;

        i0 = 0;

        $r4 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.timezonepicker.TimeZoneInfo) $r5;

        $r6 = r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    void loadTzs(android.content.Context)
    {
        com.android.timezonepicker.TimeZoneData r0;
        android.content.Context r1, $r17;
        java.util.HashSet r2, $r27;
        java.lang.String[] r3, r4;
        int i0, i1, $i2, $i3, $i5, i7;
        java.lang.String r5, $r20, $r23, $r24, $r28, $r32, $r33, $r38, $r45;
        java.util.TimeZone r6, $r34, $r35;
        com.android.timezonepicker.TimeZoneInfo r7, $r40, r47, r51;
        java.util.ArrayList $r8, $r9, $r13, $r15, $r19, $r31, $r42, r52;
        java.util.LinkedHashMap $r10, $r21, $r29;
        android.util.SparseArray $r11;
        boolean[] $r12;
        java.util.HashMap $r14, $r37;
        boolean $z0, $z1, $z4, $z5, $z6, $z7;
        android.content.res.Resources $r16;
        long $l4;
        java.util.Date $r18, r48;
        java.lang.Object $r22, $r25, $r39;
        java.lang.Integer $r26;
        java.lang.StringBuilder $r41, $r43, $r44;
        java.util.Iterator r46, r50;
        java.util.Locale r49;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: android.content.Context;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones> = $r8;

        r2 = specialinvoke r0.<com.android.timezonepicker.TimeZoneData: java.util.HashSet loadTzsInZoneTab(android.content.Context)>(r1);

        r3 = staticinvoke <java.util.TimeZone: java.lang.String[] getAvailableIDs()>();

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label01:
        if i1 >= i0 goto label06;

        r5 = r4[i1];

        $z7 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r5);

        if $z7 == 0 goto label02;

        goto label05;

     label02:
        $z6 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("Etc/GMT");

        if $z6 != 0 goto label03;

        goto label05;

     label03:
        r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r5);

        if r6 != null goto label04;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timezone not found: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r45);

        goto label05;

     label04:
        $r40 = new com.android.timezonepicker.TimeZoneInfo;

        specialinvoke $r40.<com.android.timezonepicker.TimeZoneInfo: void <init>(java.util.TimeZone,java.lang.String)>(r6, null);

        r7 = $r40;

        $i5 = specialinvoke r0.<com.android.timezonepicker.TimeZoneData: int getIdenticalTimeZoneInTheCountry(com.android.timezonepicker.TimeZoneInfo)>(r7);

        if $i5 != -1 goto label05;

        $r42 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        virtualinvoke $r42.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        $r9 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r9);

        $r10 = new java.util.LinkedHashMap;

        specialinvoke $r10.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneData: java.util.LinkedHashMap mTimeZonesByCountry> = $r10;

        $r11 = new android.util.SparseArray;

        $r12 = r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset>;

        $i2 = lengthof $r12;

        specialinvoke $r11.<android.util.SparseArray: void <init>(int)>($i2);

        r0.<com.android.timezonepicker.TimeZoneData: android.util.SparseArray mTimeZonesByOffsets> = $r11;

        $r14 = new java.util.HashMap;

        $r13 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $i3 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i3);

        r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mTimeZonesById> = $r14;

        $r15 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        r46 = virtualinvoke $r15.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r39 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (com.android.timezonepicker.TimeZoneInfo) $r39;

        $r37 = r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mTimeZonesById>;

        $r38 = r47.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r47);

        goto label07;

     label08:
        $r17 = r0.<com.android.timezonepicker.TimeZoneData: android.content.Context mContext>;

        $r16 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke r0.<com.android.timezonepicker.TimeZoneData: void populateDisplayNameOverrides(android.content.res.Resources)>($r16);

        $r18 = new java.util.Date;

        $l4 = r0.<com.android.timezonepicker.TimeZoneData: long mTimeMillis>;

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l4);

        r48 = $r18;

        r49 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        i7 = 0;

        $r19 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        r50 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r22 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (com.android.timezonepicker.TimeZoneInfo) $r22;

        $r23 = r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        if $r23 != null goto label10;

        $r34 = r51.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r35 = r51.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $z5 = virtualinvoke $r35.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>(r48);

        $r33 = virtualinvoke $r34.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>($z5, 1, r49);

        r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName> = $r33;

     label10:
        $r21 = r0.<com.android.timezonepicker.TimeZoneData: java.util.LinkedHashMap mTimeZonesByCountry>;

        $r20 = r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $r25 = virtualinvoke $r21.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r20);

        r52 = (java.util.ArrayList) $r25;

        if r52 != null goto label11;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        r52 = $r31;

        $r29 = r0.<com.android.timezonepicker.TimeZoneData: java.util.LinkedHashMap mTimeZonesByCountry>;

        $r32 = r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        virtualinvoke $r29.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r52);

     label11:
        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        virtualinvoke r52.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        specialinvoke r0.<com.android.timezonepicker.TimeZoneData: void indexByOffsets(int,com.android.timezonepicker.TimeZoneInfo)>(i7, r51);

        $r24 = r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        $z4 = virtualinvoke $r24.<java.lang.String: boolean endsWith(java.lang.String)>(":00");

        if $z4 != 0 goto label12;

        $r27 = r0.<com.android.timezonepicker.TimeZoneData: java.util.HashSet mTimeZoneNames>;

        $r28 = r51.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        virtualinvoke $r27.<java.util.HashSet: boolean add(java.lang.Object)>($r28);

     label12:
        i7 = i7 + 1;

        goto label09;

     label13:
        return;
    }

    private void printTimeZones()
    {
        com.android.timezonepicker.TimeZoneData r0;
        com.android.timezonepicker.TimeZoneInfo r1, r3;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r2;
        java.lang.String r4, $r10, $r13, $r14, $r15, $r16;
        java.util.ArrayList $r5, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        int $i0, $i2;
        java.lang.Object $r11;
        java.util.TimeZone $r12;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 = null;

        z0 = 1;

        $r5 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.timezonepicker.TimeZoneInfo) $r11;

        $r12 = r3.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        r4 = virtualinvoke $r12.<java.util.TimeZone: java.lang.String getDisplayName()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("GMT");

        if $z2 == 0 goto label2;

        $r15 = r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("Etc/GMT");

        if $z3 != 0 goto label2;

        $r16 = virtualinvoke r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GMT", $r16);

     label2:
        if r1 == null goto label5;

        $i2 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: int compareTo(com.android.timezonepicker.TimeZoneInfo)>(r3);

        if $i2 != 0 goto label4;

        if z0 == 0 goto label3;

        $r14 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SAME", $r14);

        z0 = 0;

     label3:
        $r13 = virtualinvoke r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SAME", $r13);

        goto label5;

     label4:
        z0 = 1;

     label5:
        r1 = r3;

        goto label1;

     label6:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total number of tz\'s = ");

        $r8 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r10);

        return;
    }

    private void populateDisplayNameOverrides(android.content.res.Resources)
    {
        com.android.timezonepicker.TimeZoneData r0;
        android.content.res.Resources r1;
        java.lang.String[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10;
        com.android.timezonepicker.TimeZoneInfo r4;
        java.lang.String $r5, $r9, $r11, $r13, $r19;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r14, $r15, $r16, $r17, $r18;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: android.content.res.Resources;

        $i2 = <com.android.timezonepicker.R$array: int timezone_rename_ids>;

        r2 = virtualinvoke r1.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i2);

        $i3 = <com.android.timezonepicker.R$array: int timezone_rename_labels>;

        r3 = virtualinvoke r1.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i3);

        i0 = lengthof r2;

        $i5 = lengthof r2;

        $i4 = lengthof r3;

        if $i5 == $i4 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timezone_rename_ids len=");

        $i7 = lengthof r2;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timezone_rename_labels len=");

        $i8 = lengthof r3;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r19);

        $i10 = lengthof r2;

        $i9 = lengthof r3;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r6 = r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mTimeZonesById>;

        $r5 = r2[i1];

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r4 = (com.android.timezonepicker.TimeZoneInfo) $r7;

        if r4 == null goto label3;

        $r13 = r3[i1];

        r4.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName> = $r13;

        goto label4;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find timezone with label: ");

        $r9 = r3[i1];

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r11);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public boolean hasTimeZonesInHrOffset(int)
    {
        com.android.timezonepicker.TimeZoneData r0;
        int i0, i1, $i2;
        boolean[] $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        i0 := @parameter0: int;

        i1 = 20 + i0;

        $r1 = r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label1;

        if i1 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset>;

        $z0 = $r2[i1];

        return $z0;
    }

    private void indexByOffsets(int, com.android.timezonepicker.TimeZoneInfo)
    {
        com.android.timezonepicker.TimeZoneData r0;
        int i0, i1, i2, $i5;
        com.android.timezonepicker.TimeZoneInfo r1;
        java.util.ArrayList r2, $r7;
        long $l3, $l4;
        boolean[] $r3;
        android.util.SparseArray $r4, $r8;
        java.lang.Object $r5;
        java.lang.Integer $r6;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.timezonepicker.TimeZoneInfo;

        i1 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        $l3 = (long) i1;

        $l4 = $l3 / 3600000L;

        $i5 = (int) $l4;

        i2 = 20 + $i5;

        $r3 = r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset>;

        $r3[i2] = 1;

        $r4 = r0.<com.android.timezonepicker.TimeZoneData: android.util.SparseArray mTimeZonesByOffsets>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r2 = (java.util.ArrayList) $r5;

        if r2 != null goto label1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = r0.<com.android.timezonepicker.TimeZoneData: android.util.SparseArray mTimeZonesByOffsets>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r2);

     label1:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        return;
    }

    public java.util.ArrayList getTimeZonesByOffset(int)
    {
        com.android.timezonepicker.TimeZoneData r0;
        int i0, i1, $i2;
        boolean[] $r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        i0 := @parameter0: int;

        i1 = 20 + i0;

        $r1 = r0.<com.android.timezonepicker.TimeZoneData: boolean[] mHasTimeZonesInHrOffset>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label1;

        if i1 >= 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<com.android.timezonepicker.TimeZoneData: android.util.SparseArray mTimeZonesByOffsets>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r4 = (java.util.ArrayList) $r3;

        return $r4;
    }

    private java.util.HashSet loadTzsInZoneTab(android.content.Context)
    {
        com.android.timezonepicker.TimeZoneData r0;
        android.content.Context r1;
        java.util.HashSet r2, $r15;
        android.content.res.AssetManager r3;
        java.io.InputStream r4;
        java.io.BufferedReader r5, $r18, $r22, r64;
        java.lang.String r6, r8, r9, $r20, $r23, $r24, $r29, $r30, $r31, $r41, $r44, $r47, $r48, r63, r65, r67, r68, r70;
        java.lang.String[] r7, r66;
        java.util.TimeZone r10, r13, r69;
        java.lang.Throwable r11, r14, $r53, $r54;
        int i0, $i2, $i3, $i4, i8;
        java.io.InputStreamReader $r17, $r21;
        java.util.Locale $r19;
        boolean $z0, $z3, $z6, $z8, $z9;
        com.android.timezonepicker.TimeZoneInfo $r25, $r32, $r33, $r35, $r37, r71;
        java.util.HashMap $r26, $r39;
        java.lang.Object $r27;
        java.util.ArrayList $r28, $r34, $r36;
        java.lang.StringBuilder $r40, $r42, $r43, $r45, $r46, $r49;
        java.io.IOException $r50, $r51, $r52, $r55, $r56, $r57, $r58, $r59;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: android.content.Context;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r2 = $r15;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.AssetManager getAssets()>();

        r4 = null;

     label01:
        r4 = virtualinvoke r3.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>("backward");

        $r18 = new java.io.BufferedReader;

        $r17 = new java.io.InputStreamReader;

        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);

        specialinvoke $r18.<java.io.BufferedReader: void <init>(java.io.Reader)>($r17);

        r5 = $r18;

     label02:
        $r20 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

        r6 = $r20;

        if $r20 == null goto label05;

        $z8 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z8 != 0 goto label02;

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 <= 0 goto label02;

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\t+");

        r8 = r7[1];

        $i4 = lengthof r7;

        $i2 = $i4 - 1;

        r9 = r7[$i2];

        r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r8);

        if r10 != null goto label03;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timezone not found: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r47);

        goto label02;

     label03:
        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r9);

        $r44 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneId>;

        if $r44 == null goto label04;

        $r48 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneId>;

        $z9 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z9 == 0 goto label04;

        r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mAlternateDefaultTimeZoneId> = r8;

     label04:
        goto label02;

     label05:
        if r4 == null goto label06;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label06:
        goto label17;

     label07:
        $r51 := @caughtexception;

        goto label17;

     label08:
        $r50 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", "Failed to read \'backward\' file.");

     label09:
        if r4 == null goto label10;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label10:
        goto label17;

     label11:
        $r52 := @caughtexception;

        goto label17;

     label12:
        $r53 := @caughtexception;

        r11 = $r53;

     label13:
        if r4 == null goto label14;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r58 := @caughtexception;

     label16:
        throw r11;

     label17:
        $r19 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r63 = virtualinvoke $r19.<java.util.Locale: java.lang.String getLanguage()>();

        r4 = virtualinvoke r3.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>("zone.tab");

        $r22 = new java.io.BufferedReader;

        $r21 = new java.io.InputStreamReader;

        specialinvoke $r21.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);

        specialinvoke $r22.<java.io.BufferedReader: void <init>(java.io.Reader)>($r21);

        r64 = $r22;

     label18:
        $r23 = virtualinvoke r64.<java.io.BufferedReader: java.lang.String readLine()>();

        r65 = $r23;

        if $r23 == null goto label25;

        $z0 = virtualinvoke r65.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 != 0 goto label18;

        r66 = virtualinvoke r65.<java.lang.String: java.lang.String[] split(java.lang.String)>("\t");

        r67 = r66[2];

        r68 = r66[0];

        r69 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r67);

        if r69 != null goto label19;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timezone not found: ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", $r41);

        goto label18;

     label19:
        if r68 != null goto label20;

        $z6 = virtualinvoke r67.<java.lang.String: boolean startsWith(java.lang.String)>("Etc/GMT");

        if $z6 != 0 goto label20;

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r67);

        goto label18;

     label20:
        $r26 = r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mCountryCodeToNameMap>;

        $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r68);

        r70 = (java.lang.String) $r27;

        if r70 != null goto label21;

        r70 = specialinvoke r0.<com.android.timezonepicker.TimeZoneData: java.lang.String getCountryNames(java.lang.String,java.lang.String)>(r63, r68);

        $r39 = r0.<com.android.timezonepicker.TimeZoneData: java.util.HashMap mCountryCodeToNameMap>;

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r68, r70);

     label21:
        $r24 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneId>;

        if $r24 == null goto label23;

        $r30 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneCountry>;

        if $r30 != null goto label23;

        $r31 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mAlternateDefaultTimeZoneId>;

        $z3 = virtualinvoke r67.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z3 == 0 goto label23;

        r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneCountry> = r70;

        $r29 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mDefaultTimeZoneId>;

        r13 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r29);

        if r13 == null goto label23;

        $r33 = new com.android.timezonepicker.TimeZoneInfo;

        specialinvoke $r33.<com.android.timezonepicker.TimeZoneInfo: void <init>(java.util.TimeZone,java.lang.String)>(r13, r70);

        r0.<com.android.timezonepicker.TimeZoneData: com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo> = $r33;

        $r32 = r0.<com.android.timezonepicker.TimeZoneData: com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo>;

        i0 = specialinvoke r0.<com.android.timezonepicker.TimeZoneData: int getIdenticalTimeZoneInTheCountry(com.android.timezonepicker.TimeZoneInfo)>($r32);

        if i0 != -1 goto label22;

        $r34 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $r35 = r0.<com.android.timezonepicker.TimeZoneData: com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo>;

        virtualinvoke $r34.<java.util.ArrayList: boolean add(java.lang.Object)>($r35);

        goto label23;

     label22:
        $r36 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        $r37 = r0.<com.android.timezonepicker.TimeZoneData: com.android.timezonepicker.TimeZoneInfo mDefaultTimeZoneInfo>;

        virtualinvoke $r36.<java.util.ArrayList: void add(int,java.lang.Object)>(i0, $r37);

     label23:
        $r25 = new com.android.timezonepicker.TimeZoneInfo;

        specialinvoke $r25.<com.android.timezonepicker.TimeZoneInfo: void <init>(java.util.TimeZone,java.lang.String)>(r69, r70);

        r71 = $r25;

        i8 = specialinvoke r0.<com.android.timezonepicker.TimeZoneData: int getIdenticalTimeZoneInTheCountry(com.android.timezonepicker.TimeZoneInfo)>(r71);

        if i8 != -1 goto label24;

        $r28 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        virtualinvoke $r28.<java.util.ArrayList: boolean add(java.lang.Object)>(r71);

     label24:
        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r67);

        goto label18;

     label25:
        if r4 == null goto label26;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label26:
        goto label37;

     label27:
        $r59 := @caughtexception;

        goto label37;

     label28:
        $r55 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZoneData", "Failed to read \'zone.tab\'.");

     label29:
        if r4 == null goto label30;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label30:
        goto label37;

     label31:
        $r57 := @caughtexception;

        goto label37;

     label32:
        $r54 := @caughtexception;

        r14 = $r54;

     label33:
        if r4 == null goto label34;

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label34:
        goto label36;

     label35:
        $r56 := @caughtexception;

     label36:
        throw r14;

     label37:
        return r2;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label01 to label05 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label17 to label25 with label28;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.Throwable from label17 to label25 with label32;
        catch java.lang.Throwable from label28 to label29 with label32;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    private java.lang.String getCountryNames(java.lang.String, java.lang.String)
    {
        com.android.timezonepicker.TimeZoneData r0;
        java.lang.String r1, r2, r4, $r5, $r17, $r18;
        java.util.Locale r3, $r6, $r20;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r7, $r10, $r13, $r14, $r15, $r16, $r19;
        android.content.Context $r8, $r12;
        android.content.res.Resources $r9, $r11;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = "PS";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        r4 = r0.<com.android.timezonepicker.TimeZoneData: java.lang.String mPalestineDisplayName>;

        goto label2;

     label1:
        $r6 = new java.util.Locale;

        specialinvoke $r6.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r4 = virtualinvoke $r6.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r3);

     label2:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label3;

        return r4;

     label3:
        $r7 = <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryCodes>;

        if $r7 == null goto label4;

        $r20 = <com.android.timezonepicker.TimeZoneData: java.util.Locale mBackupCountryLocale>;

        $z3 = virtualinvoke r3.<java.util.Locale: boolean equals(java.lang.Object)>($r20);

        if $z3 != 0 goto label5;

     label4:
        <com.android.timezonepicker.TimeZoneData: java.util.Locale mBackupCountryLocale> = r3;

        $r8 = r0.<com.android.timezonepicker.TimeZoneData: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = <com.android.timezonepicker.R$array: int backup_country_codes>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i2);

        <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryCodes> = $r10;

        $r12 = r0.<com.android.timezonepicker.TimeZoneData: android.content.Context mContext>;

        $r11 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = <com.android.timezonepicker.R$array: int backup_country_names>;

        $r13 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i3);

        <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryNames> = $r13;

     label5:
        $r15 = <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryCodes>;

        $i4 = lengthof $r15;

        $r14 = <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryNames>;

        $i5 = lengthof $r14;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        $r16 = <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryCodes>;

        $r17 = $r16[i1];

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label7;

        $r19 = <com.android.timezonepicker.TimeZoneData: java.lang.String[] mBackupCountryNames>;

        $r18 = $r19[i1];

        return $r18;

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        return r2;
    }

    private int getIdenticalTimeZoneInTheCountry(com.android.timezonepicker.TimeZoneInfo)
    {
        com.android.timezonepicker.TimeZoneData r0;
        com.android.timezonepicker.TimeZoneInfo r1, r3;
        int i0;
        java.util.Iterator r2;
        java.util.ArrayList $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        java.lang.String $r6, $r7, $r8, $r9;

        r0 := @this: com.android.timezonepicker.TimeZoneData;

        r1 := @parameter0: com.android.timezonepicker.TimeZoneInfo;

        i0 = 0;

        $r4 = r0.<com.android.timezonepicker.TimeZoneData: java.util.ArrayList mTimeZones>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.timezonepicker.TimeZoneInfo) $r5;

        $z1 = virtualinvoke r3.<com.android.timezonepicker.TimeZoneInfo: boolean hasSameRules(com.android.timezonepicker.TimeZoneInfo)>(r1);

        if $z1 == 0 goto label3;

        $r6 = r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r6 != null goto label2;

        $r9 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r9 != null goto label3;

        return i0;

     label2:
        $r8 = r3.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $r7 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label3;

        return i0;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return -1;
    }

    public static void <clinit>()
    {
        <com.android.timezonepicker.TimeZoneData: java.lang.String PALESTINE_COUNTRY_CODE> = "PS";

        <com.android.timezonepicker.TimeZoneData: int OFFSET_ARRAY_OFFSET> = 20;

        <com.android.timezonepicker.TimeZoneData: boolean DEBUG> = 0;

        <com.android.timezonepicker.TimeZoneData: java.lang.String TAG> = "TimeZoneData";

        return;
    }
}
