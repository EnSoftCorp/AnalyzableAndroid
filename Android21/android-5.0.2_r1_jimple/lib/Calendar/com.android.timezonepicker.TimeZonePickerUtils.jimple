public class com.android.timezonepicker.TimeZonePickerUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final int GMT_TEXT_COLOR;
    public static final int DST_SYMBOL_COLOR;
    private static final android.text.Spannable$Factory mSpannableFactory;
    private java.util.Locale mDefaultLocale;
    private java.lang.String[] mOverrideIds;
    private java.lang.String[] mOverrideLabels;

    public void <init>(android.content.Context)
    {
        com.android.timezonepicker.TimeZonePickerUtils r0;
        android.content.Context r1;

        r0 := @this: com.android.timezonepicker.TimeZonePickerUtils;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<com.android.timezonepicker.TimeZonePickerUtils: void cacheOverrides(android.content.Context)>(r1);

        return;
    }

    public java.lang.CharSequence getGmtDisplayName(android.content.Context, java.lang.String, long, boolean)
    {
        com.android.timezonepicker.TimeZonePickerUtils r0;
        android.content.Context r1;
        java.lang.String r2;
        long l0;
        boolean z0, $z1;
        java.util.TimeZone r3;
        java.util.Locale r4, $r5;
        java.lang.CharSequence $r6;

        r0 := @this: com.android.timezonepicker.TimeZonePickerUtils;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        z0 := @parameter3: boolean;

        r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.util.Locale mDefaultLocale>;

        $z1 = virtualinvoke r4.<java.util.Locale: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

        r0.<com.android.timezonepicker.TimeZonePickerUtils: java.util.Locale mDefaultLocale> = r4;

        specialinvoke r0.<com.android.timezonepicker.TimeZonePickerUtils: void cacheOverrides(android.content.Context)>(r1);

     label2:
        $r6 = specialinvoke r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.CharSequence buildGmtDisplayName(java.util.TimeZone,long,boolean)>(r3, l0, z0);

        return $r6;
    }

    private java.lang.CharSequence buildGmtDisplayName(java.util.TimeZone, long, boolean)
    {
        com.android.timezonepicker.TimeZonePickerUtils r0;
        java.util.TimeZone r1;
        long l0;
        boolean z0, $z1, $z2, $z3;
        android.text.format.Time r2, $r7;
        java.lang.StringBuilder r3, $r8;
        java.lang.String r4, $r9;
        int i1, i2, i3, i4, i5, $i6;
        android.text.Spannable r5, r6;
        android.text.Spannable$Factory $r12;
        android.text.style.ForegroundColorSpan $r13, $r15;
        char $c7;

        r0 := @this: com.android.timezonepicker.TimeZonePickerUtils;

        r1 := @parameter0: java.util.TimeZone;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $r7 = new android.text.format.Time;

        $r9 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getID()>();

        specialinvoke $r7.<android.text.format.Time: void <init>(java.lang.String)>($r9);

        r2 = $r7;

        virtualinvoke r2.<android.text.format.Time: void set(long)>(l0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r3 = $r8;

        $i6 = r2.<android.text.format.Time: int isDst>;

        if $i6 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r4 = specialinvoke r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String getDisplayName(java.util.TimeZone,boolean)>(r1, $z3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        i1 = virtualinvoke r1.<java.util.TimeZone: int getOffset(long)>(l0);

        i2 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        staticinvoke <com.android.timezonepicker.TimeZonePickerUtils: void appendGmtOffset(java.lang.StringBuilder,int)>(r3, i1);

        i3 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        i4 = 0;

        i5 = 0;

        $z1 = virtualinvoke r1.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z1 == 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i4 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        $c7 = staticinvoke <com.android.timezonepicker.TimeZonePickerUtils: char getDstSymbol()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        i5 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

     label3:
        $r12 = <com.android.timezonepicker.TimeZonePickerUtils: android.text.Spannable$Factory mSpannableFactory>;

        r5 = virtualinvoke $r12.<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>(r3);

        if z0 == 0 goto label4;

        $r15 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r15.<android.text.style.ForegroundColorSpan: void <init>(int)>(-7829368);

        interfaceinvoke r5.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r15, i2, i3, 33);

     label4:
        $z2 = virtualinvoke r1.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z2 == 0 goto label5;

        $r13 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r13.<android.text.style.ForegroundColorSpan: void <init>(int)>(-4210753);

        interfaceinvoke r5.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r13, i4, i5, 33);

     label5:
        r6 = r5;

        return r6;
    }

    public static void appendGmtOffset(java.lang.StringBuilder, int)
    {
        java.lang.StringBuilder r0;
        int i0, i1, i2, $i5;
        long $l3, $l4;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        if i0 >= 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label2;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

     label2:
        i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $l3 = (long) i1;

        $l4 = $l3 / 3600000L;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $i5 = i1 / 60000;

        i2 = $i5 % 60;

        if i2 == 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        if i2 >= 10 goto label3;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label3:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

     label4:
        return;
    }

    public static char getDstSymbol()
    {
        int $i0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        return 9728;

     label1:
        return 42;
    }

    private java.lang.String getDisplayName(java.util.TimeZone, boolean)
    {
        com.android.timezonepicker.TimeZonePickerUtils r0;
        java.util.TimeZone r1;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r2, $r5, $r6, $r10, $r12, $r14, $r17, $r21;
        java.util.Locale $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r11, $r20, $r22;
        java.lang.StringBuilder $r13, $r15, $r16, $r18, $r19;

        r0 := @this: com.android.timezonepicker.TimeZonePickerUtils;

        r1 := @parameter0: java.util.TimeZone;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideIds>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideLabels>;

        if $r5 != null goto label2;

     label1:
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, 1, $r3);

        return $r4;

     label2:
        i0 = 0;

     label3:
        $r6 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideIds>;

        $i1 = lengthof $r6;

        if i0 >= $i1 goto label6;

        $r9 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getID()>();

        $r10 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideIds>;

        $r11 = $r10[i0];

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label5;

        $r12 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideLabels>;

        $i2 = lengthof $r12;

        if $i2 <= i0 goto label4;

        $r21 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideLabels>;

        $r22 = $r21[i0];

        return $r22;

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timezone_rename_ids len=");

        $r14 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideIds>;

        $i3 = lengthof $r14;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timezone_rename_labels len=");

        $r17 = r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideLabels>;

        $i4 = lengthof $r17;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TimeZonePickerUtils", $r20);

        goto label6;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r8 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, 1, $r7);

        return $r8;
    }

    private void cacheOverrides(android.content.Context)
    {
        com.android.timezonepicker.TimeZonePickerUtils r0;
        android.content.Context r1;
        android.content.res.Resources r2;
        int $i0, $i1;
        java.lang.String[] $r3, $r4;

        r0 := @this: com.android.timezonepicker.TimeZonePickerUtils;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = <com.android.timezonepicker.R$array: int timezone_rename_ids>;

        $r3 = virtualinvoke r2.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i0);

        r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideIds> = $r3;

        $i1 = <com.android.timezonepicker.R$array: int timezone_rename_labels>;

        $r4 = virtualinvoke r2.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i1);

        r0.<com.android.timezonepicker.TimeZonePickerUtils: java.lang.String[] mOverrideLabels> = $r4;

        return;
    }

    static void <clinit>()
    {
        android.text.Spannable$Factory $r0;

        <com.android.timezonepicker.TimeZonePickerUtils: int DST_SYMBOL_COLOR> = -4210753;

        <com.android.timezonepicker.TimeZonePickerUtils: int GMT_TEXT_COLOR> = -7829368;

        <com.android.timezonepicker.TimeZonePickerUtils: java.lang.String TAG> = "TimeZonePickerUtils";

        $r0 = staticinvoke <android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>();

        <com.android.timezonepicker.TimeZonePickerUtils: android.text.Spannable$Factory mSpannableFactory> = $r0;

        return;
    }
}
