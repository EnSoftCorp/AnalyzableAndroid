public class com.android.calendar.EventLoader extends java.lang.Object
{
    private android.content.Context mContext;
    private android.os.Handler mHandler;
    private java.util.concurrent.atomic.AtomicInteger mSequenceNumber;
    private java.util.concurrent.LinkedBlockingQueue mLoaderQueue;
    private com.android.calendar.EventLoader$LoaderThread mLoaderThread;
    private android.content.ContentResolver mResolver;

    public void <init>(android.content.Context)
    {
        com.android.calendar.EventLoader r0;
        android.content.Context r1;
        android.os.Handler $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.LinkedBlockingQueue $r4;
        android.content.ContentResolver $r5;

        r0 := @this: com.android.calendar.EventLoader;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        r0.<com.android.calendar.EventLoader: android.os.Handler mHandler> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.calendar.EventLoader: java.util.concurrent.atomic.AtomicInteger mSequenceNumber> = $r3;

        r0.<com.android.calendar.EventLoader: android.content.Context mContext> = r1;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<com.android.calendar.EventLoader: java.util.concurrent.LinkedBlockingQueue mLoaderQueue> = $r4;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.calendar.EventLoader: android.content.ContentResolver mResolver> = $r5;

        return;
    }

    public void startBackgroundThread()
    {
        com.android.calendar.EventLoader r0;
        com.android.calendar.EventLoader$LoaderThread $r1, $r3;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: com.android.calendar.EventLoader;

        $r1 = new com.android.calendar.EventLoader$LoaderThread;

        $r2 = r0.<com.android.calendar.EventLoader: java.util.concurrent.LinkedBlockingQueue mLoaderQueue>;

        specialinvoke $r1.<com.android.calendar.EventLoader$LoaderThread: void <init>(java.util.concurrent.LinkedBlockingQueue,com.android.calendar.EventLoader)>($r2, r0);

        r0.<com.android.calendar.EventLoader: com.android.calendar.EventLoader$LoaderThread mLoaderThread> = $r1;

        $r3 = r0.<com.android.calendar.EventLoader: com.android.calendar.EventLoader$LoaderThread mLoaderThread>;

        virtualinvoke $r3.<com.android.calendar.EventLoader$LoaderThread: void start()>();

        return;
    }

    public void stopBackgroundThread()
    {
        com.android.calendar.EventLoader r0;
        com.android.calendar.EventLoader$LoaderThread $r1;

        r0 := @this: com.android.calendar.EventLoader;

        $r1 = r0.<com.android.calendar.EventLoader: com.android.calendar.EventLoader$LoaderThread mLoaderThread>;

        virtualinvoke $r1.<com.android.calendar.EventLoader$LoaderThread: void shutdown()>();

        return;
    }

    public void loadEventsInBackground(int, java.util.ArrayList, int, java.lang.Runnable, java.lang.Runnable)
    {
        com.android.calendar.EventLoader r0;
        int i0, i1, i2;
        java.util.ArrayList r1;
        java.lang.Runnable r2, r3;
        com.android.calendar.EventLoader$LoadEventsRequest r4, $r7;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.util.concurrent.LinkedBlockingQueue $r8;
        java.lang.InterruptedException $r9;

        r0 := @this: com.android.calendar.EventLoader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.ArrayList;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Runnable;

        r3 := @parameter4: java.lang.Runnable;

        $r6 = r0.<com.android.calendar.EventLoader: java.util.concurrent.atomic.AtomicInteger mSequenceNumber>;

        i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r7 = new com.android.calendar.EventLoader$LoadEventsRequest;

        specialinvoke $r7.<com.android.calendar.EventLoader$LoadEventsRequest: void <init>(int,int,int,java.util.ArrayList,java.lang.Runnable,java.lang.Runnable)>(i2, i1, i0, r1, r2, r3);

        r4 = $r7;

     label1:
        $r8 = r0.<com.android.calendar.EventLoader: java.util.concurrent.LinkedBlockingQueue mLoaderQueue>;

        virtualinvoke $r8.<java.util.concurrent.LinkedBlockingQueue: void put(java.lang.Object)>(r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Cal", "loadEventsInBackground() interrupted!");

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void loadEventDaysInBackground(int, int, boolean[], java.lang.Runnable)
    {
        com.android.calendar.EventLoader r0;
        int i0, i1;
        boolean[] r1;
        java.lang.Runnable r2;
        com.android.calendar.EventLoader$LoadEventDaysRequest r3, $r5;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.lang.InterruptedException $r7;

        r0 := @this: com.android.calendar.EventLoader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: boolean[];

        r2 := @parameter3: java.lang.Runnable;

        $r5 = new com.android.calendar.EventLoader$LoadEventDaysRequest;

        specialinvoke $r5.<com.android.calendar.EventLoader$LoadEventDaysRequest: void <init>(int,int,boolean[],java.lang.Runnable)>(i0, i1, r1, r2);

        r3 = $r5;

     label1:
        $r6 = r0.<com.android.calendar.EventLoader: java.util.concurrent.LinkedBlockingQueue mLoaderQueue>;

        virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void put(java.lang.Object)>(r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Cal", "loadEventDaysInBackground() interrupted!");

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    static android.os.Handler access$000(com.android.calendar.EventLoader)
    {
        com.android.calendar.EventLoader r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.calendar.EventLoader;

        $r1 = r0.<com.android.calendar.EventLoader: android.os.Handler mHandler>;

        return $r1;
    }

    static android.content.ContentResolver access$100(com.android.calendar.EventLoader)
    {
        com.android.calendar.EventLoader r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.calendar.EventLoader;

        $r1 = r0.<com.android.calendar.EventLoader: android.content.ContentResolver mResolver>;

        return $r1;
    }

    static android.content.Context access$200(com.android.calendar.EventLoader)
    {
        com.android.calendar.EventLoader r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.calendar.EventLoader;

        $r1 = r0.<com.android.calendar.EventLoader: android.content.Context mContext>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$300(com.android.calendar.EventLoader)
    {
        com.android.calendar.EventLoader r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: com.android.calendar.EventLoader;

        $r1 = r0.<com.android.calendar.EventLoader: java.util.concurrent.atomic.AtomicInteger mSequenceNumber>;

        return $r1;
    }
}
