abstract class com.android.calendarcommon2.EventRecurrence$PartParser extends java.lang.Object
{

    void <init>()
    {
        com.android.calendarcommon2.EventRecurrence$PartParser r0;

        r0 := @this: com.android.calendarcommon2.EventRecurrence$PartParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int parsePart(java.lang.String, com.android.calendarcommon2.EventRecurrence);

    public static int parseIntRange(java.lang.String, int, int, boolean)
    {
        java.lang.String r0, $r5, $r11;
        int i0, i1, i2;
        boolean z0;
        char $c3;
        com.android.calendarcommon2.EventRecurrence$InvalidFormatException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r8, $r9, $r10;
        java.lang.NumberFormatException $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

     label1:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c3 != 43 goto label2;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        if i2 < i0 goto label3;

        if i2 > i1 goto label3;

        if i2 != 0 goto label4;

        if z0 != 0 goto label4;

     label3:
        $r1 = new com.android.calendarcommon2.EventRecurrence$InvalidFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Integer value out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.android.calendarcommon2.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label4:
        return i2;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.android.calendarcommon2.EventRecurrence$InvalidFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid integer value: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.calendarcommon2.EventRecurrence$InvalidFormatException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    public static int[] parseNumberList(java.lang.String, int, int, boolean)
    {
        java.lang.String r0, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean z0;
        int[] r1;
        java.lang.String[] r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(",");

        if $i4 >= 0 goto label1;

        r1 = newarray (int)[1];

        $i6 = staticinvoke <com.android.calendarcommon2.EventRecurrence$PartParser: int parseIntRange(java.lang.String,int,int,boolean)>(r0, i0, i1, z0);

        r1[0] = $i6;

        goto label3;

     label1:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i2 = lengthof r2;

        r1 = newarray (int)[i2];

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $r3 = r2[i3];

        $i5 = staticinvoke <com.android.calendarcommon2.EventRecurrence$PartParser: int parseIntRange(java.lang.String,int,int,boolean)>($r3, i0, i1, z0);

        r1[i3] = $i5;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r1;
    }
}
