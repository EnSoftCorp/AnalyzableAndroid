public class com.android.timezonepicker.TimeZoneInfo extends java.lang.Object implements java.lang.Comparable
{
    private static final int GMT_TEXT_COLOR;
    private static final int DST_SYMBOL_COLOR;
    private static final char SEPARATOR;
    private static final java.lang.String TAG;
    public static int NUM_OF_TRANSITIONS;
    public static long time;
    public static boolean is24HourFormat;
    private static final android.text.Spannable$Factory mSpannableFactory;
    java.util.TimeZone mTz;
    public java.lang.String mTzId;
    int mRawoffset;
    public int[] mTransitions;
    public java.lang.String mCountry;
    public int groupId;
    public java.lang.String mDisplayName;
    private android.text.format.Time recycledTime;
    private static java.lang.StringBuilder mSB;
    private static java.util.Formatter mFormatter;
    android.util.SparseArray mLocalTimeCache;
    long mLocalTimeCacheReferenceTime;
    private static long mGmtDisplayNameUpdateTime;
    private static android.util.SparseArray mGmtDisplayNameCache;

    public void <init>(java.util.TimeZone, java.lang.String)
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        java.util.TimeZone r1;
        java.lang.String r2, $r6;
        android.text.format.Time $r4;
        android.util.SparseArray $r5;
        int $i0;
        long $l1;
        int[] $r7;
        java.lang.NoSuchFieldException $r8;
        java.lang.IllegalAccessException $r9, r10;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.text.format.Time;

        specialinvoke $r4.<android.text.format.Time: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache> = $r5;

        r0.<com.android.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime> = 0L;

        r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz> = r1;

        $r6 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getID()>();

        r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId> = $r6;

        r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry> = r2;

        $i0 = virtualinvoke r1.<java.util.TimeZone: int getRawOffset()>();

        r0.<com.android.timezonepicker.TimeZoneInfo: int mRawoffset> = $i0;

     label1:
        $l1 = <com.android.timezonepicker.TimeZoneInfo: long time>;

        $r7 = staticinvoke <com.android.timezonepicker.TimeZoneInfo: int[] getTransitions(java.util.TimeZone,long)>(r1, $l1);

        r0.<com.android.timezonepicker.TimeZoneInfo: int[] mTransitions> = $r7;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        goto label5;

     label4:
        $r9 := @caughtexception;

        r10 = $r9;

        virtualinvoke r10.<java.lang.IllegalAccessException: void printStackTrace()>();

     label5:
        return;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public java.lang.String getLocalTime(long)
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        long l0, $l10;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14;
        java.lang.String r1, r2, $r5, $r10;
        android.text.format.Time $r3, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r17, $r18;
        java.util.TimeZone $r4;
        byte $b9;
        java.lang.Object $r14;
        android.util.SparseArray $r15, $r19, $r20;
        boolean $z0, $z1;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r5 = virtualinvoke $r4.<java.util.TimeZone: java.lang.String getID()>();

        $r3.<android.text.format.Time: java.lang.String timezone> = $r5;

        $r6 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r6.<android.text.format.Time: void set(long)>(l0);

        $r7 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i3 = $r7.<android.text.format.Time: int year>;

        $i5 = $i3 * 366;

        $r8 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i4 = $r8.<android.text.format.Time: int yearDay>;

        i1 = $i5 + $i4;

        $r9 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r10 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $r9.<android.text.format.Time: java.lang.String timezone> = $r10;

        $r12 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r12.<android.text.format.Time: void set(long)>(l0);

        r1 = null;

        $r11 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i6 = $r11.<android.text.format.Time: int hour>;

        $i7 = $i6 * 60;

        $r13 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i8 = $r13.<android.text.format.Time: int minute>;

        i2 = $i7 + $i8;

        $l10 = r0.<com.android.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime>;

        $b9 = $l10 cmp l0;

        if $b9 == 0 goto label1;

        r0.<com.android.timezonepicker.TimeZoneInfo: long mLocalTimeCacheReferenceTime> = l0;

        $r19 = r0.<com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        virtualinvoke $r19.<android.util.SparseArray: void clear()>();

        goto label2;

     label1:
        $r15 = r0.<com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        $r14 = virtualinvoke $r15.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r1 = (java.lang.String) $r14;

     label2:
        if r1 != null goto label6;

        r2 = "%I:%M %p";

        $r16 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i11 = $r16.<android.text.format.Time: int year>;

        $i13 = $i11 * 366;

        $r17 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i12 = $r17.<android.text.format.Time: int yearDay>;

        $i14 = $i13 + $i12;

        if i1 == $i14 goto label4;

        $z1 = <com.android.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z1 == 0 goto label3;

        r2 = "%b %d %H:%M";

        goto label5;

     label3:
        r2 = "%b %d %I:%M %p";

        goto label5;

     label4:
        $z0 = <com.android.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z0 == 0 goto label5;

        r2 = "%H:%M";

     label5:
        $r18 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        r1 = virtualinvoke $r18.<android.text.format.Time: java.lang.String format(java.lang.String)>(r2);

        $r20 = r0.<com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mLocalTimeCache>;

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r1);

     label6:
        return r1;
    }

    public int getLocalHr(long)
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        long l0;
        java.lang.String $r1;
        android.text.format.Time $r2, $r3, $r4;
        int $i1;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $r1 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        $r2.<android.text.format.Time: java.lang.String timezone> = $r1;

        $r3 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        virtualinvoke $r3.<android.text.format.Time: void set(long)>(l0);

        $r4 = r0.<com.android.timezonepicker.TimeZoneInfo: android.text.format.Time recycledTime>;

        $i1 = $r4.<android.text.format.Time: int hour>;

        return $i1;
    }

    public int getNowOffsetMillis()
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        java.util.TimeZone $r1;
        long $l0;
        int $i1;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        $r1 = r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = virtualinvoke $r1.<java.util.TimeZone: int getOffset(long)>($l0);

        return $i1;
    }

    public synchronized java.lang.CharSequence getGmtDisplayName(android.content.Context)
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        android.content.Context r1;
        long l0, l1, $l9, $l10, $l11, $l12, $l15, $l16;
        int i2, i3, i4, i5, i6, i7, i8, i17;
        boolean z0, $z1;
        java.lang.CharSequence r2;
        android.text.Spannable r3;
        java.util.TimeZone $r4, $r5;
        android.util.SparseArray $r6, $r19, $r27;
        byte $b13;
        java.lang.StringBuilder $r7, $r12, $r13, $r15, $r16, $r17, $r22, $r24, $r26, $r28;
        java.lang.Object $r8;
        java.lang.String $r9;
        java.util.Formatter $r11;
        android.text.style.ForegroundColorSpan $r18, $r23;
        android.text.Spannable$Factory $r20;
        char $c14;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        r1 := @parameter0: android.content.Context;

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l0 = $l9 / 60000L;

        l1 = l0 * 60000L;

        $r4 = r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        i2 = virtualinvoke $r4.<java.util.TimeZone: int getOffset(long)>(l1);

        $r5 = r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        z0 = virtualinvoke $r5.<java.util.TimeZone: boolean useDaylightTime()>();

        if z0 == 0 goto label1;

        $l15 = (long) i2;

        $l16 = $l15 + 129600000L;

        i3 = (int) $l16;

        goto label2;

     label1:
        $l10 = (long) i2;

        $l12 = $l10 - 129600000L;

        i3 = (int) $l12;

     label2:
        r2 = null;

        $l11 = <com.android.timezonepicker.TimeZoneInfo: long mGmtDisplayNameUpdateTime>;

        $b13 = $l11 cmp l0;

        if $b13 == 0 goto label3;

        <com.android.timezonepicker.TimeZoneInfo: long mGmtDisplayNameUpdateTime> = l0;

        $r27 = <com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        virtualinvoke $r27.<android.util.SparseArray: void clear()>();

        goto label4;

     label3:
        $r6 = <com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        $r8 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r2 = (java.lang.CharSequence) $r8;

     label4:
        if r2 != null goto label8;

        $r7 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r7.<java.lang.StringBuilder: void setLength(int)>(0);

        i4 = 524288;

        i17 = i4 | 1;

        $z1 = <com.android.timezonepicker.TimeZoneInfo: boolean is24HourFormat>;

        if $z1 == 0 goto label5;

        i17 = i17 | 128;

     label5:
        $r11 = <com.android.timezonepicker.TimeZoneInfo: java.util.Formatter mFormatter>;

        $r9 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        staticinvoke <android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>(r1, $r11, l1, l1, i17, $r9);

        $r13 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r12 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i5 = virtualinvoke $r12.<java.lang.StringBuilder: int length()>();

        $r16 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        staticinvoke <com.android.timezonepicker.TimeZonePickerUtils: void appendGmtOffset(java.lang.StringBuilder,int)>($r16, i2);

        $r17 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i6 = virtualinvoke $r17.<java.lang.StringBuilder: int length()>();

        i7 = 0;

        i8 = 0;

        if z0 == 0 goto label6;

        $r24 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r22 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i7 = virtualinvoke $r22.<java.lang.StringBuilder: int length()>();

        $r26 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $c14 = staticinvoke <com.android.timezonepicker.TimeZonePickerUtils: char getDstSymbol()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        $r28 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        i8 = virtualinvoke $r28.<java.lang.StringBuilder: int length()>();

     label6:
        $r20 = <com.android.timezonepicker.TimeZoneInfo: android.text.Spannable$Factory mSpannableFactory>;

        $r15 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        r3 = virtualinvoke $r20.<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>($r15);

        $r18 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r18.<android.text.style.ForegroundColorSpan: void <init>(int)>(-7829368);

        interfaceinvoke r3.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r18, i5, i6, 33);

        if z0 == 0 goto label7;

        $r23 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r23.<android.text.style.ForegroundColorSpan: void <init>(int)>(-4210753);

        interfaceinvoke r3.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r23, i7, i8, 33);

     label7:
        r2 = r3;

        $r19 = <com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache>;

        virtualinvoke $r19.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r2);

     label8:
        return r2;
    }

    private static int[] getTransitions(java.util.TimeZone, long) throws java.lang.IllegalAccessException, java.lang.NoSuchFieldException
    {
        java.util.TimeZone r0;
        long l0, $l6;
        java.lang.Class r1;
        java.lang.reflect.Field r2;
        int[] r3, r4, $r6;
        int i1, i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11;
        java.lang.Object $r5;
        byte $b9;

        r0 := @parameter0: java.util.TimeZone;

        l0 := @parameter1: long;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mTransitions");

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (int[]) $r5;

        r3 = (int[]) $r6;

        r4 = null;

        $i3 = lengthof r3;

        if $i3 == 0 goto label4;

        $i4 = <com.android.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS>;

        r4 = newarray (int)[$i4];

        i1 = 0;

        i2 = 0;

     label1:
        $i5 = lengthof r3;

        if i2 >= $i5 goto label4;

        $i7 = r3[i2];

        $l6 = (long) $i7;

        $b9 = $l6 cmp l0;

        if $b9 >= 0 goto label2;

        goto label3;

     label2:
        $i8 = i1;

        i1 = i1 + 1;

        $i11 = r3[i2];

        r4[$i8] = $i11;

        $i10 = <com.android.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS>;

        if i1 != $i10 goto label3;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r4;
    }

    public boolean hasSameRules(com.android.timezonepicker.TimeZoneInfo)
    {
        com.android.timezonepicker.TimeZoneInfo r0, r1;
        int $i0, $i1;
        int[] $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        r1 := @parameter0: com.android.timezonepicker.TimeZoneInfo;

        $i1 = r0.<com.android.timezonepicker.TimeZoneInfo: int mRawoffset>;

        $i0 = r1.<com.android.timezonepicker.TimeZoneInfo: int mRawoffset>;

        if $i1 != $i0 goto label1;

        $r3 = r0.<com.android.timezonepicker.TimeZoneInfo: int[] mTransitions>;

        $r2 = r1.<com.android.timezonepicker.TimeZoneInfo: int[] mTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r3, $r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        com.android.timezonepicker.TimeZoneInfo r0;
        java.lang.StringBuilder r1, $r4;
        java.lang.String r2, $r5, $r8, $r11, $r21, $r26, $r27, $r29, $r33, $r34, $r37;
        java.util.TimeZone r3;
        boolean $z0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        r2 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        r3 = r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r5 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mTzId>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r8 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(0, 1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r11 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(0, 0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $z0 = virtualinvoke r3.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 == 0 goto label1;

        $r34 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(1, 1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r37 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>(1, 0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i0 = virtualinvoke r3.<java.util.TimeZone: int getRawOffset()>();

        $f1 = (float) $i0;

        $f0 = $f1 / 3600000.0F;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i1 = virtualinvoke r3.<java.util.TimeZone: int getDSTSavings()>();

        $f2 = (float) $i1;

        $f3 = $f2 / 3600000.0F;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r21 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1357041600000L);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r27 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1363348800000L);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r26 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1372680000000L);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r29 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String getLocalTime(long)>(1383307200000L);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r33;
    }

    private static java.lang.String formatTime(java.text.DateFormat, int)
    {
        java.text.DateFormat r0;
        int i0;
        long l1, $l2;
        java.util.Date $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.text.DateFormat;

        i0 := @parameter1: int;

        $l2 = (long) i0;

        l1 = $l2 * 1000L;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l1);

        $r2 = virtualinvoke r0.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }

    public int compareTo(com.android.timezonepicker.TimeZoneInfo)
    {
        com.android.timezonepicker.TimeZoneInfo r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8;
        java.lang.String $r2, $r3, $r4, $r5, $r8, $r12, $r13, $r15, $r16, $r17, $r20, $r22, $r23, $r25, $r27;
        int[] $r6, $r7;
        boolean $z0;
        java.util.TimeZone $r9, $r11;
        java.util.Locale $r10, $r14;
        java.lang.StringBuilder $r18, $r19, $r21, $r24, $r26;
        byte $b6;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        r1 := @parameter0: com.android.timezonepicker.TimeZoneInfo;

        $i1 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        $i2 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        if $i1 == $i2 goto label3;

        $i7 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        $i8 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: int getNowOffsetMillis()>();

        if $i7 >= $i8 goto label1;

        $b6 = -1;

        goto label2;

     label1:
        $b6 = 1;

     label2:
        return $b6;

     label3:
        $r2 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r2 != null goto label4;

        $r25 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r25 == null goto label4;

        return 1;

     label4:
        $r3 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        if $r3 != null goto label5;

        return -1;

     label5:
        $r5 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        $r4 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mCountry>;

        i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if i0 == 0 goto label6;

        return i0;

     label6:
        $r7 = r0.<com.android.timezonepicker.TimeZoneInfo: int[] mTransitions>;

        $r6 = r1.<com.android.timezonepicker.TimeZoneInfo: int[] mTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r7, $r6);

        if $z0 == 0 goto label7;

        $r20 = <com.android.timezonepicker.TimeZoneInfo: java.lang.String TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not expected to be comparing tz with the same country, same offset, same dst, same transitions:\n");

        $r22 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r23 = virtualinvoke r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String toString()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r20, $r27);

     label7:
        $r8 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        if $r8 == null goto label8;

        $r15 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        if $r15 == null goto label8;

        $r16 = r0.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        $r17 = r1.<com.android.timezonepicker.TimeZoneInfo: java.lang.String mDisplayName>;

        $i4 = virtualinvoke $r16.<java.lang.String: int compareTo(java.lang.String)>($r17);

        return $i4;

     label8:
        $r9 = r0.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r10 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r12 = virtualinvoke $r9.<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>($r10);

        $r11 = r1.<com.android.timezonepicker.TimeZoneInfo: java.util.TimeZone mTz>;

        $r14 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r13 = virtualinvoke $r11.<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>($r14);

        $i3 = virtualinvoke $r12.<java.lang.String: int compareTo(java.lang.String)>($r13);

        return $i3;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.android.timezonepicker.TimeZoneInfo r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: com.android.timezonepicker.TimeZoneInfo;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.android.timezonepicker.TimeZoneInfo) r1;

        $i0 = virtualinvoke r0.<com.android.timezonepicker.TimeZoneInfo: int compareTo(com.android.timezonepicker.TimeZoneInfo)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        long $l0, $l1;
        android.text.Spannable$Factory $r0;
        java.lang.StringBuilder $r1, $r3;
        java.util.Formatter $r2;
        java.util.Locale $r4;
        android.util.SparseArray $r5;

        <com.android.timezonepicker.TimeZoneInfo: char SEPARATOR> = 44;

        <com.android.timezonepicker.TimeZoneInfo: int DST_SYMBOL_COLOR> = -4210753;

        <com.android.timezonepicker.TimeZoneInfo: int GMT_TEXT_COLOR> = -7829368;

        <com.android.timezonepicker.TimeZoneInfo: java.lang.String TAG> = null;

        <com.android.timezonepicker.TimeZoneInfo: int NUM_OF_TRANSITIONS> = 6;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 / 1000L;

        <com.android.timezonepicker.TimeZoneInfo: long time> = $l1;

        $r0 = staticinvoke <android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>();

        <com.android.timezonepicker.TimeZoneInfo: android.text.Spannable$Factory mSpannableFactory> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(50);

        <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB> = $r1;

        $r2 = new java.util.Formatter;

        $r3 = <com.android.timezonepicker.TimeZoneInfo: java.lang.StringBuilder mSB>;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r2.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>($r3, $r4);

        <com.android.timezonepicker.TimeZoneInfo: java.util.Formatter mFormatter> = $r2;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        <com.android.timezonepicker.TimeZoneInfo: android.util.SparseArray mGmtDisplayNameCache> = $r5;

        return;
    }
}
