abstract class com.google.common.hash.AbstractHasher extends java.lang.Object implements com.google.common.hash.Hasher
{

    void <init>()
    {
        com.google.common.hash.AbstractHasher r0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final com.google.common.hash.Hasher putBoolean(boolean)
    {
        com.google.common.hash.AbstractHasher r0;
        boolean z0;
        com.google.common.hash.Hasher $r1;
        byte $b0;

        r0 := @this: com.google.common.hash.AbstractHasher;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putByte(byte)>($b0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putDouble(double)
    {
        com.google.common.hash.AbstractHasher r0;
        double d0;
        long $l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putLong(long)>($l0);

        return $r1;
    }

    public final com.google.common.hash.Hasher putFloat(float)
    {
        com.google.common.hash.AbstractHasher r0;
        float f0;
        int $i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putInt(int)>($i0);

        return $r1;
    }

    public com.google.common.hash.Hasher putString(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractHasher r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset $r2;
        com.google.common.hash.Hasher $r3;

        r0 := @this: com.google.common.hash.AbstractHasher;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_16LE>;

        $r3 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>(r1, $r2);

        return $r3;
    }

    public com.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.AbstractHasher r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;
        java.io.UnsupportedEncodingException r3, $r8;
        java.lang.String $r4, $r5;
        byte[] $r6;
        com.google.common.hash.Hasher $r7;
        java.lang.AssertionError $r9;

        r0 := @this: com.google.common.hash.AbstractHasher;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.charset.Charset;

     label1:
        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>($r5);

        $r7 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBytes(byte[])>($r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r9;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public volatile com.google.common.hash.Sink putString(java.lang.CharSequence, java.nio.charset.Charset)
    {
        com.google.common.hash.AbstractHasher r0;
        java.lang.CharSequence r1;
        java.nio.charset.Charset r2;
        com.google.common.hash.Hasher $r3;

        r0 := @this: com.google.common.hash.AbstractHasher;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.charset.Charset;

        $r3 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset)>(r1, r2);

        return $r3;
    }

    public volatile com.google.common.hash.Sink putString(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractHasher r0;
        java.lang.CharSequence r1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractHasher;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putBoolean(boolean)
    {
        com.google.common.hash.AbstractHasher r0;
        boolean z0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putBoolean(boolean)>(z0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putDouble(double)
    {
        com.google.common.hash.AbstractHasher r0;
        double d0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putDouble(double)>(d0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putFloat(float)
    {
        com.google.common.hash.AbstractHasher r0;
        float f0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractHasher;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putFloat(float)>(f0);

        return $r1;
    }
}
