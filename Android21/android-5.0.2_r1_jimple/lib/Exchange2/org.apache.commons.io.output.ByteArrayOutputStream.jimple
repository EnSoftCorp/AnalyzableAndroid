public class org.apache.commons.io.output.ByteArrayOutputStream extends java.io.OutputStream
{
    private static final byte[] EMPTY_BYTE_ARRAY;
    private java.util.List buffers;
    private int currentBufferIndex;
    private int filledBufferSum;
    private byte[] currentBuffer;
    private int count;

    public void <init>()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(1024);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers> = $r1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative initial size: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i0);

        return;
    }

    private byte[] getBuffer(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (byte[]) $r2;

        return $r3;
    }

    private void needNewBuffer(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.util.List $r1, $r7;
        byte[] $r2, $r3, $r4, $r5, $r6, $r8, $r9;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        if $i2 >= $i4 goto label1;

        $i16 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r8 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i14 = lengthof $r8;

        $i15 = $i16 + $i14;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i15;

        $i18 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i17 = $i18 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i17;

        $i19 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r9 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>($i19);

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r9;

        goto label4;

     label1:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        if $r2 != null goto label2;

        i1 = i0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

        goto label3;

     label2:
        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i5 = lengthof $r3;

        $i8 = $i5 << 1;

        $i6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $i7 = i0 - $i6;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i7);

        $i11 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i9 = lengthof $r4;

        $i10 = $i11 + $i9;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = $i10;

     label3:
        $i13 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $i12 = $i13 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = $i12;

        $r6 = newarray (byte)[i1];

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r6;

        $r7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        return;
    }

    public void write(byte[], int, int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0, r2;
        byte[] r1, $r6, $r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Throwable r3, $r8;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label01;

        $i6 = lengthof r1;

        if i0 > $i6 goto label01;

        if i1 < 0 goto label01;

        $i8 = i0 + i1;

        $i7 = lengthof r1;

        if $i8 > $i7 goto label01;

        $i9 = i0 + i1;

        if $i9 >= 0 goto label02;

     label01:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label02:
        if i1 != 0 goto label03;

        return;

     label03:
        r2 = r0;

        entermonitor r0;

     label04:
        $i11 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        i2 = $i11 + i1;

        i3 = i1;

        $i12 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i10 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i4 = $i12 - $i10;

     label05:
        if i3 <= 0 goto label07;

        $r6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i13 = lengthof $r6;

        $i14 = $i13 - i4;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i14);

        $i15 = i0 + i1;

        $i16 = $i15 - i3;

        $r7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i16, $r7, i4, i5);

        i3 = i3 - i5;

        if i3 <= 0 goto label06;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(i2);

        i4 = 0;

     label06:
        goto label05;

     label07:
        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = i2;

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public synchronized void write(int)
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9;
        byte[] $r1, $r2;
        byte $b5;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i1 = $i3 - $i2;

        $r1 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i4 = lengthof $r1;

        if i1 != $i4 goto label1;

        $i8 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i9 = $i8 + 1;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i9);

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $b5 = (byte) i0;

        $r2[i1] = $b5;

        $i6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i7 = $i6 + 1;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i7;

        return;
    }

    public synchronized int write(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.InputStream r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 = 0;

        $i4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum>;

        i1 = $i4 - $i3;

        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r2 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i5 = lengthof $r2;

        $i6 = $i5 - i1;

        i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>($r3, i1, $i6);

     label1:
        if i2 == -1 goto label3;

        i0 = i0 + i2;

        i1 = i1 + i2;

        $i7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        $i8 = $i7 + i2;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = $i8;

        $r4 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i9 = lengthof $r4;

        if i1 != $i9 goto label2;

        $r7 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i12 = lengthof $r7;

        specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>($i12);

        i1 = 0;

     label2:
        $r6 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $r5 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer>;

        $i10 = lengthof $r5;

        $i11 = $i10 - i1;

        i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>($r6, i1, $i11);

        goto label1;

     label3:
        return i0;
    }

    public synchronized int size()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        return;
    }

    public synchronized void reset()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int $i0;
        byte[] $r1;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int filledBufferSum> = 0;

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex> = 0;

        $i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int currentBufferIndex>;

        $r1 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>($i0);

        r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] currentBuffer> = $r1;

        return;
    }

    public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.io.OutputStream r1;
        int i0, i1, i2, $i3, $i4;
        byte[] r2;
        java.util.List $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i3 goto label3;

        r2 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>(i1);

        $i4 = lengthof r2;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i0);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i2);

        i0 = i0 - i2;

        if i0 != 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public synchronized byte[] toByteArray()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        int i0, i1, i2, i3, $i4, $i5;
        byte[] r1, r2, $r4;
        java.util.List $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        i0 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;

        if i0 != 0 goto label1;

        $r4 = <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        return $r4;

     label1:
        r1 = newarray (byte)[i0];

        i1 = 0;

        i2 = 0;

     label2:
        $r3 = r0.<org.apache.commons.io.output.ByteArrayOutputStream: java.util.List buffers>;

        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i4 goto label4;

        r2 = specialinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] getBuffer(int)>(i2);

        $i5 = lengthof r2;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i1, i3);

        i1 = i1 + i3;

        i0 = i0 - i3;

        if i0 != 0 goto label3;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return r1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        org.apache.commons.io.output.ByteArrayOutputStream r0;
        java.lang.String r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, r1);

        return $r2;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <org.apache.commons.io.output.ByteArrayOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
}
