public class org.apache.commons.io.IOUtils extends java.lang.Object
{
    public static final char DIR_SEPARATOR_UNIX;
    public static final char DIR_SEPARATOR_WINDOWS;
    public static final char DIR_SEPARATOR;
    public static final java.lang.String LINE_SEPARATOR_UNIX;
    public static final java.lang.String LINE_SEPARATOR_WINDOWS;
    public static final java.lang.String LINE_SEPARATOR;
    private static final int DEFAULT_BUFFER_SIZE;

    public void <init>()
    {
        org.apache.commons.io.IOUtils r0;

        r0 := @this: org.apache.commons.io.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeQuietly(java.io.Reader)
    {
        java.io.Reader r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Reader;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.Reader: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Writer)
    {
        java.io.Writer r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Writer;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.InputStream;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.OutputStream;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1, $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        $r3 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] toByteArray(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        org.apache.commons.io.output.ByteArrayOutputStream r1, $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.Reader;

        $r2 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r0, r1);

        $r3 = virtualinvoke r1.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static byte[] toByteArray(java.io.Reader, java.lang.String) throws java.io.IOException
    {
        java.io.Reader r0;
        java.lang.String r1;
        org.apache.commons.io.output.ByteArrayOutputStream r2, $r3;
        byte[] $r4;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.lang.String;

        $r3 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r3.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        r2 = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream,java.lang.String)>(r0, r2, r1);

        $r4 = virtualinvoke r2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    public static byte[] toByteArray(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        byte[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        return $r1;
    }

    public static char[] toCharArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.CharArrayWriter r1, $r2;
        char[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r3;
    }

    public static char[] toCharArray(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String r1;
        java.io.CharArrayWriter r2, $r3;
        char[] $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.io.CharArrayWriter;

        specialinvoke $r3.<java.io.CharArrayWriter: void <init>()>();

        r2 = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r0, r2, r1);

        $r4 = virtualinvoke r2.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r4;
    }

    public static char[] toCharArray(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.CharArrayWriter r1, $r2;
        char[] $r3;

        r0 := @parameter0: java.io.Reader;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r3;
    }

    public static java.lang.String toString(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.StringWriter r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String r1, $r4;
        java.io.StringWriter r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        r2 = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer,java.lang.String)>(r0, r2, r1);

        $r4 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String toString(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.StringWriter r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.Reader;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r0, r1);

        $r3 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toString(byte[]) throws java.io.IOException
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>(r0);

        return $r1;
    }

    public static java.lang.String toString(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.lang.String r1, $r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r0);

        return $r3;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r1);

        return $r2;
    }

    public static java.util.List readLines(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.InputStreamReader r1, $r2;
        java.util.List $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0);

        r1 = $r2;

        $r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>(r1);

        return $r3;
    }

    public static java.util.List readLines(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String r1;
        java.io.InputStreamReader r2, $r3;
        java.util.List $r4, $r5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r0);

        return $r5;

     label1:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, r1);

        r2 = $r3;

        $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.Reader)>(r2);

        return $r4;
    }

    public static java.util.List readLines(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.BufferedReader r1, $r4;
        java.util.ArrayList r2, $r5;
        java.lang.String r3;

        r0 := @parameter0: java.io.Reader;

        $r4 = new java.io.BufferedReader;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>(r0);

        r1 = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label1:
        if r3 == null goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label1;

     label2:
        return r2;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.Reader)
    {
        java.io.Reader r0;
        org.apache.commons.io.LineIterator $r1;

        r0 := @parameter0: java.io.Reader;

        $r1 = new org.apache.commons.io.LineIterator;

        specialinvoke $r1.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.String r1;
        java.io.InputStreamReader $r2, $r4, r5;
        org.apache.commons.io.LineIterator $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0);

        r5 = $r4;

        goto label2;

     label1:
        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, r1);

        r5 = $r2;

     label2:
        $r3 = new org.apache.commons.io.LineIterator;

        specialinvoke $r3.<org.apache.commons.io.LineIterator: void <init>(java.io.Reader)>(r5);

        return $r3;
    }

    public static java.io.InputStream toInputStream(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        java.io.ByteArrayInputStream $r2;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        return $r2;
    }

    public static java.io.InputStream toInputStream(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1;
        byte[] r2, $r3;
        java.io.ByteArrayInputStream $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

     label2:
        r2 = $r3;

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        return $r4;
    }

    public static void write(byte[], java.io.OutputStream) throws java.io.IOException
    {
        byte[] r0;
        java.io.OutputStream r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer) throws java.io.IOException
    {
        byte[] r0;
        java.io.Writer r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        return;
    }

    public static void write(byte[], java.io.Writer, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.io.Writer r1;
        java.lang.String r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.Writer;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)>(r0, r1);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r2);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r3);

     label2:
        return;
    }

    public static void write(char[], java.io.Writer) throws java.io.IOException
    {
        char[] r0;
        java.io.Writer r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.Writer: void write(char[])>(r0);

     label1:
        return;
    }

    public static void write(char[], java.io.OutputStream) throws java.io.IOException
    {
        char[] r0;
        java.io.OutputStream r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r0);

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

     label1:
        return;
    }

    public static void write(char[], java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        char[] r0;
        java.io.OutputStream r1;
        java.lang.String r2, $r3;
        byte[] $r4;

        r0 := @parameter0: char[];

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)>(r0, r1);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r0);

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

     label2:
        return;
    }

    public static void write(java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.Writer r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.OutputStream r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

     label1:
        return;
    }

    public static void write(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r2;
        java.io.OutputStream r1;
        byte[] $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>(r0, r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

     label2:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.Writer) throws java.io.IOException
    {
        java.lang.StringBuffer r0;
        java.io.Writer r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.io.Writer;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.StringBuffer r0;
        java.io.OutputStream r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.io.OutputStream;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

     label1:
        return;
    }

    public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuffer r0;
        java.io.OutputStream r1;
        java.lang.String r2, $r3;
        byte[] $r4;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label2;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)>(r0, r1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

     label2:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.util.Collection r0;
        java.lang.String r1, $r6;
        java.io.OutputStream r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0;
        byte[] $r5, $r7;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.OutputStream;

        if r0 != null goto label1;

        return;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r4 == null goto label4;

        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r7);

     label4:
        $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r5);

        goto label3;

     label5:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.util.Collection r0;
        java.lang.String r1, r3, $r7;
        java.io.OutputStream r2;
        java.util.Iterator r4;
        java.lang.Object r5;
        boolean $z0;
        byte[] $r6, $r8;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.OutputStream;

        r3 := @parameter3: java.lang.String;

        if r3 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)>(r0, r1, r2);

        goto label6;

     label1:
        if r0 != null goto label2;

        return;

     label2:
        if r1 != null goto label3;

        r1 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label3:
        r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        if r5 == null goto label5;

        $r7 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>(r3);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r8);

     label5:
        $r6 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r3);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r6);

        goto label4;

     label6:
        return;
    }

    public static void writeLines(java.util.Collection, java.lang.String, java.io.Writer) throws java.io.IOException
    {
        java.util.Collection r0;
        java.lang.String r1, $r5;
        java.io.Writer r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.Writer;

        if r0 != null goto label1;

        return;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR>;

     label2:
        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r4 == null goto label4;

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r5);

     label4:
        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>(r1);

        goto label3;

     label5:
        return;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        long l0;
        byte $b1;
        int $i2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r0, r1);

        $b1 = l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        return -1;

     label1:
        $i2 = (int) l0;

        return $i2;
    }

    public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        long l0, $l2;
        int $i1, i3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[4096];

        l0 = 0L;

     label1:
        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        i3 = $i1;

        if -1 == $i1 goto label2;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i3);

        $l2 = (long) i3;

        l0 = l0 + $l2;

        goto label1;

     label2:
        return l0;
    }

    public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.Writer r1;
        java.io.InputStreamReader r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.Writer;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0);

        r2 = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r2, r1);

        return;
    }

    public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.Writer r1;
        java.lang.String r2;
        java.io.InputStreamReader r3, $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.Writer;

        r2 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.InputStream,java.io.Writer)>(r0, r1);

        goto label2;

     label1:
        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r0, r2);

        r3 = $r4;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r3, r1);

     label2:
        return;
    }

    public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.Writer r1;
        long l0;
        byte $b1;
        int $i2;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

        l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)>(r0, r1);

        $b1 = l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        return -1;

     label1:
        $i2 = (int) l0;

        return $i2;
    }

    public static long copyLarge(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.Writer r1;
        char[] r2;
        long l0, $l2;
        int $i1, i3;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Writer;

        r2 = newarray (char)[4096];

        l0 = 0L;

     label1:
        $i1 = virtualinvoke r0.<java.io.Reader: int read(char[])>(r2);

        i3 = $i1;

        if -1 == $i1 goto label2;

        virtualinvoke r1.<java.io.Writer: void write(char[],int,int)>(r2, 0, i3);

        $l2 = (long) i3;

        l0 = l0 + $l2;

        goto label1;

     label2:
        return l0;
    }

    public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.OutputStream r1;
        java.io.OutputStreamWriter r2, $r3;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.OutputStream;

        $r3 = new java.io.OutputStreamWriter;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        r2 = $r3;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r0, r2);

        virtualinvoke r2.<java.io.OutputStreamWriter: void flush()>();

        return;
    }

    public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.io.OutputStreamWriter r3, $r4;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        staticinvoke <org.apache.commons.io.IOUtils: void copy(java.io.Reader,java.io.OutputStream)>(r0, r1);

        goto label2;

     label1:
        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);

        r3 = $r4;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.Reader,java.io.Writer)>(r0, r3);

        virtualinvoke r3.<java.io.OutputStreamWriter: void flush()>();

     label2:
        return;
    }

    public static boolean contentEquals(java.io.InputStream, java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0, r1;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        java.io.BufferedInputStream $r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.InputStream;

        $z0 = r0 instanceof java.io.BufferedInputStream;

        if $z0 != 0 goto label1;

        $r3 = new java.io.BufferedInputStream;

        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r0);

        r0 = $r3;

     label1:
        $z1 = r1 instanceof java.io.BufferedInputStream;

        if $z1 != 0 goto label2;

        $r2 = new java.io.BufferedInputStream;

        specialinvoke $r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r2;

     label2:
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

     label3:
        if -1 == i0 goto label5;

        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i0 == i1 goto label4;

        return 0;

     label4:
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        goto label3;

     label5:
        i2 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i2 != -1 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public static boolean contentEquals(java.io.Reader, java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0, r1;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        java.io.BufferedReader $r2, $r3;

        r0 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.io.Reader;

        $z0 = r0 instanceof java.io.BufferedReader;

        if $z0 != 0 goto label1;

        $r3 = new java.io.BufferedReader;

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r0);

        r0 = $r3;

     label1:
        $z1 = r1 instanceof java.io.BufferedReader;

        if $z1 != 0 goto label2;

        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        r1 = $r2;

     label2:
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();

     label3:
        if -1 == i0 goto label5;

        i1 = virtualinvoke r1.<java.io.Reader: int read()>();

        if i0 == i1 goto label4;

        return 0;

     label4:
        i0 = virtualinvoke r0.<java.io.Reader: int read()>();

        goto label3;

     label5:
        i2 = virtualinvoke r1.<java.io.Reader: int read()>();

        if i2 != -1 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    static void <clinit>()
    {
        java.io.StringWriter r0, $r2;
        java.io.PrintWriter r1, $r3;
        char $c0;
        java.lang.String $r4;

        <org.apache.commons.io.IOUtils: int DEFAULT_BUFFER_SIZE> = 4096;

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_WINDOWS> = "\r\n";

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR_UNIX> = "\n";

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR_WINDOWS> = 92;

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR_UNIX> = 47;

        $c0 = <java.io.File: char separatorChar>;

        <org.apache.commons.io.IOUtils: char DIR_SEPARATOR> = $c0;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>(int)>(4);

        r0 = $r2;

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>(r0);

        r1 = $r3;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r4 = virtualinvoke r0.<java.io.StringWriter: java.lang.String toString()>();

        <org.apache.commons.io.IOUtils: java.lang.String LINE_SEPARATOR> = $r4;

        return;
    }
}
