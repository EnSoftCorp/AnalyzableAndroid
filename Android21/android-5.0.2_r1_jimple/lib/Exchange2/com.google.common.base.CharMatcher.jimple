public abstract class com.google.common.base.CharMatcher extends java.lang.Object implements com.google.common.base.Predicate
{
    private static final java.lang.String BREAKING_WHITESPACE_CHARS;
    private static final java.lang.String NON_BREAKING_WHITESPACE_CHARS;
    public static final com.google.common.base.CharMatcher WHITESPACE;
    public static final com.google.common.base.CharMatcher BREAKING_WHITESPACE;
    public static final com.google.common.base.CharMatcher ASCII;
    public static final com.google.common.base.CharMatcher DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_LETTER;
    public static final com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT;
    public static final com.google.common.base.CharMatcher JAVA_UPPER_CASE;
    public static final com.google.common.base.CharMatcher JAVA_LOWER_CASE;
    public static final com.google.common.base.CharMatcher JAVA_ISO_CONTROL;
    public static final com.google.common.base.CharMatcher INVISIBLE;
    public static final com.google.common.base.CharMatcher SINGLE_WIDTH;
    public static final com.google.common.base.CharMatcher ANY;
    public static final com.google.common.base.CharMatcher NONE;

    public static com.google.common.base.CharMatcher is(char)
    {
        char c0;
        com.google.common.base.CharMatcher$8 $r0;

        c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$8;

        specialinvoke $r0.<com.google.common.base.CharMatcher$8: void <init>(char)>(c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher isNot(char)
    {
        char c0;
        com.google.common.base.CharMatcher$9 $r0;

        c0 := @parameter0: char;

        $r0 = new com.google.common.base.CharMatcher$9;

        specialinvoke $r0.<com.google.common.base.CharMatcher$9: void <init>(char)>(c0);

        return $r0;
    }

    public static com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        char c0, c1, $c3;
        int $i2;
        com.google.common.base.CharMatcher $r1, $r3;
        com.google.common.base.CharMatcher$10 $r2;
        java.lang.String $r4;
        com.google.common.base.CharMatcher$11 $r5;
        char[] r6;

        r0 := @parameter0: java.lang.CharSequence;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        tableswitch($i2)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r1 = <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher NONE>;

        return $r1;

     label2:
        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        $r3 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>($c3);

        return $r3;

     label3:
        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(1);

        $r2 = new com.google.common.base.CharMatcher$10;

        specialinvoke $r2.<com.google.common.base.CharMatcher$10: void <init>(char,char)>(c0, c1);

        return $r2;

     label4:
        $r4 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        r6 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        staticinvoke <java.util.Arrays: void sort(char[])>(r6);

        $r5 = new com.google.common.base.CharMatcher$11;

        specialinvoke $r5.<com.google.common.base.CharMatcher$11: void <init>(char[])>(r6);

        return $r5;
    }

    public static com.google.common.base.CharMatcher noneOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        com.google.common.base.CharMatcher $r1, $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        return $r2;
    }

    public static com.google.common.base.CharMatcher inRange(char, char)
    {
        char c0, c1;
        com.google.common.base.CharMatcher$12 $r0;
        boolean $z0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        if c1 < c0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new com.google.common.base.CharMatcher$12;

        specialinvoke $r0.<com.google.common.base.CharMatcher$12: void <init>(char,char)>(c0, c1);

        return $r0;
    }

    public static com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate)
    {
        com.google.common.base.Predicate r0;
        boolean $z0;
        com.google.common.base.CharMatcher$13 $r2;
        com.google.common.base.CharMatcher $r3;

        r0 := @parameter0: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof com.google.common.base.CharMatcher;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.base.CharMatcher) r0;

        return $r3;

     label1:
        $r2 = new com.google.common.base.CharMatcher$13;

        specialinvoke $r2.<com.google.common.base.CharMatcher$13: void <init>(com.google.common.base.Predicate)>(r0);

        return $r2;
    }

    protected void <init>()
    {
        com.google.common.base.CharMatcher r0;

        r0 := @this: com.google.common.base.CharMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract boolean matches(char);

    public com.google.common.base.CharMatcher negate()
    {
        com.google.common.base.CharMatcher r0, r1;
        com.google.common.base.CharMatcher$14 $r2;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 = r0;

        $r2 = new com.google.common.base.CharMatcher$14;

        specialinvoke $r2.<com.google.common.base.CharMatcher$14: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)>(r0, r1);

        return $r2;
    }

    public com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher r0, r1, $r5;
        com.google.common.base.CharMatcher$And $r2;
        com.google.common.base.CharMatcher[] $r3;
        java.lang.Object $r4;
        java.util.List $r6;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: com.google.common.base.CharMatcher;

        $r2 = new com.google.common.base.CharMatcher$And;

        $r3 = newarray (com.google.common.base.CharMatcher)[2];

        $r3[0] = r0;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (com.google.common.base.CharMatcher) $r4;

        $r3[1] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<com.google.common.base.CharMatcher$And: void <init>(java.util.List)>($r6);

        return $r2;
    }

    public com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher r0, r1, $r5;
        com.google.common.base.CharMatcher$Or $r2;
        com.google.common.base.CharMatcher[] $r3;
        java.lang.Object $r4;
        java.util.List $r6;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: com.google.common.base.CharMatcher;

        $r2 = new com.google.common.base.CharMatcher$Or;

        $r3 = newarray (com.google.common.base.CharMatcher)[2];

        $r3[0] = r0;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (com.google.common.base.CharMatcher) $r4;

        $r3[1] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<com.google.common.base.CharMatcher$Or: void <init>(java.util.List)>($r6);

        return $r2;
    }

    public com.google.common.base.CharMatcher precomputed()
    {
        com.google.common.base.CharMatcher r0, $r1;

        r0 := @this: com.google.common.base.CharMatcher;

        $r1 = staticinvoke <com.google.common.base.Platform: com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher)>(r0);

        return $r1;
    }

    com.google.common.base.CharMatcher precomputedInternal()
    {
        com.google.common.base.CharMatcher r0;
        com.google.common.base.CharMatcher$LookupTable r1, $r2;
        com.google.common.base.CharMatcher$15 $r3;

        r0 := @this: com.google.common.base.CharMatcher;

        $r2 = new com.google.common.base.CharMatcher$LookupTable;

        specialinvoke $r2.<com.google.common.base.CharMatcher$LookupTable: void <init>(com.google.common.base.CharMatcher$1)>(null);

        r1 = $r2;

        virtualinvoke r0.<com.google.common.base.CharMatcher: void setBits(com.google.common.base.CharMatcher$LookupTable)>(r1);

        $r3 = new com.google.common.base.CharMatcher$15;

        specialinvoke $r3.<com.google.common.base.CharMatcher$15: void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher$LookupTable)>(r0, r1);

        return $r3;
    }

    void setBits(com.google.common.base.CharMatcher$LookupTable)
    {
        com.google.common.base.CharMatcher r0;
        com.google.common.base.CharMatcher$LookupTable r1;
        char c0, $c2;
        boolean $z0;
        int $i1;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: com.google.common.base.CharMatcher$LookupTable;

        c0 = 0;

     label1:
        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>(c0);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.google.common.base.CharMatcher$LookupTable: void set(char)>(c0);

     label2:
        $c2 = c0;

        $i1 = c0 + 1;

        c0 = (char) $i1;

        if $c2 != 65535 goto label1;

        goto label3;

     label3:
        return;
    }

    public boolean matchesAnyOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        boolean $z0, $z1;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matchesNoneOf(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean matchesAllOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return 1;
    }

    public boolean matchesNoneOf(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r1);

        if $i0 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexIn(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int indexIn(java.lang.CharSequence, int)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int i0, i1, i2;
        char $c4;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>(i0, i1);

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c4);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int lastIndexIn(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return -1;
    }

    public int countIn(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2;
        char $c3;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = 0;

        i1 = 0;

     label1:
        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 >= $i2 goto label3;

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }

    public java.lang.String removeFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        java.lang.String r2, $r4;
        int i0, i1, $i2, $i5, $i6;
        char[] r3;
        char $c3, $c4;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        i0 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r2);

        if i0 != -1 goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        i1 = 1;

     label2:
        i0 = i0 + 1;

     label3:
        $i2 = lengthof r3;

        if i0 != $i2 goto label4;

        goto label7;

     label4:
        $c3 = r3[i0];

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $i5 = i0 - i1;

        $c4 = r3[i0];

        r3[$i5] = $c4;

        i0 = i0 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r4 = new java.lang.String;

        $i6 = i0 - i1;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r3, 0, $i6);

        return $r4;
    }

    public java.lang.String retainFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0, $r2;
        java.lang.CharSequence r1;
        java.lang.String $r3;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        $r3 = virtualinvoke $r2.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>(r1);

        return $r3;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, char)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1;
        char c0, $c4;
        java.lang.String r2, $r4;
        int i1, i2, $i3;
        char[] r3;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r2);

        if i1 != -1 goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r3[i1] = c0;

        i2 = i1 + 1;

     label2:
        $i3 = lengthof r3;

        if i2 >= $i3 goto label4;

        $c4 = r3[i2];

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c4);

        if $z0 == 0 goto label3;

        r3[i2] = c0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r3);

        return $r4;
    }

    public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.String r3, $r8, $r10, $r11;
        java.lang.StringBuilder r4, $r5;
        char $c7;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.CharSequence;

        i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i0 != 0 goto label1;

        $r11 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String removeFrom(java.lang.CharSequence)>(r1);

        return $r11;

     label1:
        if i0 != 1 goto label2;

        $c7 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(0);

        $r10 = virtualinvoke r0.<com.google.common.base.CharMatcher: java.lang.String replaceFrom(java.lang.CharSequence,char)>(r1, $c7);

        return $r10;

     label2:
        r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r3);

        if i1 != -1 goto label3;

        return r3;

     label3:
        i2 = virtualinvoke r3.<java.lang.String: int length()>();

        $r5 = new java.lang.StringBuilder;

        $i4 = i2 * 3;

        $i5 = $i4 / 2;

        $i6 = $i5 + 16;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i6);

        r4 = $r5;

        i3 = 0;

     label4:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r3, i3, i1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r2);

        i3 = i1 + 1;

        i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>(r3, i3);

        if i1 != -1 goto label4;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r3, i3, i2);

        $r8 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String trimFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1, i2, $i3;
        java.lang.String $r3;
        char $c4, $c5;
        boolean $z0, $z1;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        $z1 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c5);

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = i0 - 1;

     label4:
        if i2 <= i1 goto label6;

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c4);

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        i2 = i2 + -1;

        goto label4;

     label6:
        $i3 = i2 + 1;

        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, $i3);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String trimLeadingFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1;
        java.lang.String $r3;
        char $c2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c2);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, i0);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String trimTrailingFrom(java.lang.CharSequence)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1, $i2;
        java.lang.String $r3;
        char $c3;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        $i2 = i1 + 1;

        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i2);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String collapseFrom(java.lang.CharSequence, char)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.CharSequence r1, $r4;
        char c0, c3;
        int i1, i2, $i4, $i5;
        java.lang.StringBuilder r2, $r3, $r5;
        boolean z0, $z1;
        java.lang.String $r6, $r9;
        java.lang.Character $r7;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 = virtualinvoke r0.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r1);

        if i1 != -1 goto label1;

        $r9 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r4);

        r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        z0 = 1;

        i2 = i1 + 1;

     label2:
        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 >= $i5 goto label5;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $z1 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r7);

        if $z1 == 0 goto label3;

        if z0 != 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        z0 = 1;

        goto label4;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        z0 = 0;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char)
    {
        com.google.common.base.CharMatcher r0, $r3;
        java.lang.CharSequence r1;
        char c0, c3;
        int i1, i2, $i4, $i5;
        java.lang.StringBuilder r2, $r4;
        boolean z0, $z1;
        java.lang.String $r5;
        java.lang.Character $r6;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $r3 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher negate()>();

        i1 = virtualinvoke $r3.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence)>(r1);

        if i1 != -1 goto label1;

        return "";

     label1:
        $r4 = new java.lang.StringBuilder;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i4);

        r2 = $r4;

        z0 = 0;

        i2 = i1;

     label2:
        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 >= $i5 goto label6;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $z1 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r6);

        if $z1 == 0 goto label3;

        z0 = 1;

        goto label5;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        z0 = 0;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public boolean apply(java.lang.Character)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.Character r1;
        char $c0;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.Character;

        $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean matches(char)>($c0);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        com.google.common.base.CharMatcher r0;
        java.lang.Object r1;
        java.lang.Character $r2;
        boolean $z0;

        r0 := @this: com.google.common.base.CharMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Character) r1;

        $z0 = virtualinvoke r0.<com.google.common.base.CharMatcher: boolean apply(java.lang.Character)>($r2);

        return $z0;
    }

    static void <clinit>()
    {
        com.google.common.base.CharMatcher r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r71, $r72, $r73, $r74, $r75;
        java.lang.String r1;
        char[] r2;
        int i0, i1, $i4;
        char c2, $c3;
        com.google.common.base.CharMatcher$2 $r15;
        com.google.common.base.CharMatcher$1 $r16;
        com.google.common.base.CharMatcher$4 $r17;
        com.google.common.base.CharMatcher$3 $r18;
        com.google.common.base.CharMatcher$5 $r20;
        com.google.common.base.CharMatcher$6 $r69;
        com.google.common.base.CharMatcher$7 $r70;

        <com.google.common.base.CharMatcher: java.lang.String NON_BREAKING_WHITESPACE_CHARS> = "\u00a0\u180e\u202f";

        <com.google.common.base.CharMatcher: java.lang.String BREAKING_WHITESPACE_CHARS> = "\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000";

        $r3 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000\u00a0\u180e\u202f");

        $r4 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8202);

        $r5 = virtualinvoke $r3.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r4);

        $r6 = virtualinvoke $r5.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher WHITESPACE> = $r6;

        $r7 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\t\n\u000b\f\r \u0085\u1680\u2028\u2029\u205f\u3000");

        $r8 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8198);

        $r9 = virtualinvoke $r7.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r8);

        $r10 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8200, 8202);

        $r11 = virtualinvoke $r9.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r10);

        $r12 = virtualinvoke $r11.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher BREAKING_WHITESPACE> = $r12;

        $r13 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 127);

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ASCII> = $r13;

        r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(48, 57);

        r1 = "\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10";

        r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        c2 = r2[i1];

        $i4 = c2 + 9;

        $c3 = (char) $i4;

        $r75 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(c2, $c3);

        r0 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r75);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r14 = virtualinvoke r0.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher DIGIT> = $r14;

        $r16 = new com.google.common.base.CharMatcher$1;

        specialinvoke $r16.<com.google.common.base.CharMatcher$1: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_DIGIT> = $r16;

        $r15 = new com.google.common.base.CharMatcher$2;

        specialinvoke $r15.<com.google.common.base.CharMatcher$2: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER> = $r15;

        $r18 = new com.google.common.base.CharMatcher$3;

        specialinvoke $r18.<com.google.common.base.CharMatcher$3: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LETTER_OR_DIGIT> = $r18;

        $r17 = new com.google.common.base.CharMatcher$4;

        specialinvoke $r17.<com.google.common.base.CharMatcher$4: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_UPPER_CASE> = $r17;

        $r20 = new com.google.common.base.CharMatcher$5;

        specialinvoke $r20.<com.google.common.base.CharMatcher$5: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_LOWER_CASE> = $r20;

        $r19 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 31);

        $r22 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(127, 159);

        $r21 = virtualinvoke $r19.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r22);

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher JAVA_ISO_CONTROL> = $r21;

        $r24 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 32);

        $r23 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(127, 160);

        $r26 = virtualinvoke $r24.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r23);

        $r25 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(173);

        $r29 = virtualinvoke $r26.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r25);

        $r30 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1536, 1539);

        $r27 = virtualinvoke $r29.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r30);

        $r28 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\u06dd\u070f\u1680\u17b4\u17b5\u180e");

        $r33 = virtualinvoke $r27.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r28);

        $r34 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8192, 8207);

        $r31 = virtualinvoke $r33.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r34);

        $r32 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8232, 8239);

        $r37 = virtualinvoke $r31.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r32);

        $r38 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8287, 8292);

        $r35 = virtualinvoke $r37.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r38);

        $r36 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8298, 8303);

        $r41 = virtualinvoke $r35.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r36);

        $r42 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(12288);

        $r39 = virtualinvoke $r41.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r42);

        $r40 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(55296, 63743);

        $r46 = virtualinvoke $r39.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r40);

        $r45 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher anyOf(java.lang.CharSequence)>("\ufeff\ufff9\ufffa\ufffb");

        $r44 = virtualinvoke $r46.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r45);

        $r43 = virtualinvoke $r44.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher INVISIBLE> = $r43;

        $r50 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(0, 1273);

        $r49 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1470);

        $r48 = virtualinvoke $r50.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r49);

        $r47 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1488, 1514);

        $r54 = virtualinvoke $r48.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r47);

        $r53 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1523);

        $r52 = virtualinvoke $r54.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r53);

        $r51 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>(1524);

        $r58 = virtualinvoke $r52.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r51);

        $r57 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1536, 1791);

        $r56 = virtualinvoke $r58.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r57);

        $r55 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(1872, 1919);

        $r63 = virtualinvoke $r56.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r55);

        $r64 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(3584, 3711);

        $r65 = virtualinvoke $r63.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r64);

        $r66 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(7680, 8367);

        $r59 = virtualinvoke $r65.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r66);

        $r60 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(8448, 8506);

        $r61 = virtualinvoke $r59.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r60);

        $r62 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(64336, 65023);

        $r71 = virtualinvoke $r61.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r62);

        $r72 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(65136, 65279);

        $r73 = virtualinvoke $r71.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r72);

        $r74 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher inRange(char,char)>(65377, 65500);

        $r67 = virtualinvoke $r73.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher)>($r74);

        $r68 = virtualinvoke $r67.<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher SINGLE_WIDTH> = $r68;

        $r69 = new com.google.common.base.CharMatcher$6;

        specialinvoke $r69.<com.google.common.base.CharMatcher$6: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher ANY> = $r69;

        $r70 = new com.google.common.base.CharMatcher$7;

        specialinvoke $r70.<com.google.common.base.CharMatcher$7: void <init>()>();

        <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher NONE> = $r70;

        return;
    }
}
