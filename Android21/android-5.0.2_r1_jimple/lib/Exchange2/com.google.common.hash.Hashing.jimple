public final class com.google.common.hash.Hashing extends java.lang.Object
{
    private static final com.google.common.hash.Murmur3_32HashFunction MURMUR3_32;
    private static final com.google.common.hash.Murmur3_128HashFunction MURMUR3_128;
    private static final com.google.common.hash.HashFunction MD5;
    private static final com.google.common.hash.HashFunction SHA_1;
    private static final com.google.common.hash.HashFunction SHA_256;
    private static final com.google.common.hash.HashFunction SHA_512;

    private void <init>()
    {
        com.google.common.hash.Hashing r0;

        r0 := @this: com.google.common.hash.Hashing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.hash.HashFunction goodFastHash(int)
    {
        int i0, i1, i2, i3, $i4, $i5;
        com.google.common.hash.HashFunction[] r0;
        com.google.common.hash.Hashing$ConcatenatedHashFunction $r1;
        com.google.common.hash.HashFunction $r2, $r3, $r4;

        i0 := @parameter0: int;

        i1 = staticinvoke <com.google.common.hash.Hashing: int checkPositiveAndMakeMultipleOf32(int)>(i0);

        if i1 != 32 goto label1;

        $r4 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_32()>();

        return $r4;

     label1:
        if i1 > 128 goto label2;

        $r3 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_128()>();

        return $r3;

     label2:
        $i4 = i1 + 127;

        i2 = $i4 / 128;

        r0 = newarray (com.google.common.hash.HashFunction)[i2];

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $i5 = i3 * 1500450271;

        $r2 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_128(int)>($i5);

        r0[i3] = $r2;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r1 = new com.google.common.hash.Hashing$ConcatenatedHashFunction;

        specialinvoke $r1.<com.google.common.hash.Hashing$ConcatenatedHashFunction: void <init>(com.google.common.hash.HashFunction[])>(r0);

        return $r1;
    }

    public static com.google.common.hash.HashFunction murmur3_32(int)
    {
        int i0;
        com.google.common.hash.Murmur3_32HashFunction $r0;

        i0 := @parameter0: int;

        $r0 = new com.google.common.hash.Murmur3_32HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_32HashFunction: void <init>(int)>(i0);

        return $r0;
    }

    public static com.google.common.hash.HashFunction murmur3_32()
    {
        com.google.common.hash.Murmur3_32HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.Murmur3_32HashFunction MURMUR3_32>;

        return $r0;
    }

    public static com.google.common.hash.HashFunction murmur3_128(int)
    {
        int i0;
        com.google.common.hash.Murmur3_128HashFunction $r0;

        i0 := @parameter0: int;

        $r0 = new com.google.common.hash.Murmur3_128HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_128HashFunction: void <init>(int)>(i0);

        return $r0;
    }

    public static com.google.common.hash.HashFunction murmur3_128()
    {
        com.google.common.hash.Murmur3_128HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.Murmur3_128HashFunction MURMUR3_128>;

        return $r0;
    }

    public static com.google.common.hash.HashFunction md5()
    {
        com.google.common.hash.HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.HashFunction MD5>;

        return $r0;
    }

    public static com.google.common.hash.HashFunction sha1()
    {
        com.google.common.hash.HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_1>;

        return $r0;
    }

    public static com.google.common.hash.HashFunction sha256()
    {
        com.google.common.hash.HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_256>;

        return $r0;
    }

    public static com.google.common.hash.HashFunction sha512()
    {
        com.google.common.hash.HashFunction $r0;

        $r0 = <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_512>;

        return $r0;
    }

    public static long padToLong(com.google.common.hash.HashCode)
    {
        com.google.common.hash.HashCode r0;
        int $i0, $i2;
        long $l1;

        r0 := @parameter0: com.google.common.hash.HashCode;

        $i0 = virtualinvoke r0.<com.google.common.hash.HashCode: int bits()>();

        if $i0 >= 64 goto label1;

        $i2 = virtualinvoke r0.<com.google.common.hash.HashCode: int asInt()>();

        $l1 = staticinvoke <com.google.common.primitives.UnsignedInts: long toLong(int)>($i2);

        goto label2;

     label1:
        $l1 = virtualinvoke r0.<com.google.common.hash.HashCode: long asLong()>();

     label2:
        return $l1;
    }

    public static int consistentHash(com.google.common.hash.HashCode, int)
    {
        com.google.common.hash.HashCode r0;
        int i0, $i2;
        long $l1;

        r0 := @parameter0: com.google.common.hash.HashCode;

        i0 := @parameter1: int;

        $l1 = staticinvoke <com.google.common.hash.Hashing: long padToLong(com.google.common.hash.HashCode)>(r0);

        $i2 = staticinvoke <com.google.common.hash.Hashing: int consistentHash(long,int)>($l1, i0);

        return $i2;
    }

    public static int consistentHash(long, int)
    {
        long l0, l2, $l5, $l6;
        int i1, i3, i4, $i7, $i8, $i9;
        double d0, $d1, $d2, $d3;
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Integer $r1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[0] = $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "buckets must be positive: %s", $r0);

        l2 = l0;

        i3 = 0;

     label3:
        $l5 = 2862933555777941757L * l2;

        l2 = $l5 + 1L;

        $l6 = l2 >>> 33;

        $i8 = (int) $l6;

        $i7 = $i8 + 1;

        $d1 = (double) $i7;

        d0 = 2.147483648E9 / $d1;

        $i9 = i3 + 1;

        $d3 = (double) $i9;

        $d2 = $d3 * d0;

        i4 = (int) $d2;

        if i4 < 0 goto label4;

        if i4 >= i1 goto label4;

        i3 = i4;

        goto label5;

     label4:
        return i3;

     label5:
        goto label3;
    }

    public static com.google.common.hash.HashCode combineOrdered(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r1, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i8, $i9;
        byte[] r2, r5;
        com.google.common.hash.HashCode r4, $r7, $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r8;
        byte $b6, $b7, $b10;

        r0 := @parameter0: java.lang.Iterable;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Must be at least 1 hash code to combine.");

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.common.hash.HashCode) $r6;

        i0 = virtualinvoke $r7.<com.google.common.hash.HashCode: int bits()>();

        $i2 = i0 / 8;

        r2 = newarray (byte)[$i2];

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.hash.HashCode) $r8;

        r5 = virtualinvoke r4.<com.google.common.hash.HashCode: byte[] asBytes()>();

        $i5 = lengthof r5;

        $i3 = lengthof r2;

        if $i5 != $i3 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "All hashcodes must have the same bit length.");

        i1 = 0;

     label4:
        $i4 = lengthof r5;

        if i1 >= $i4 goto label5;

        $b7 = r2[i1];

        $i9 = $b7 * 37;

        $b6 = r5[i1];

        $i8 = $i9 ^ $b6;

        $b10 = (byte) $i8;

        r2[i1] = $b10;

        i1 = i1 + 1;

        goto label4;

     label5:
        goto label1;

     label6:
        $r9 = staticinvoke <com.google.common.hash.HashCodes: com.google.common.hash.HashCode fromBytes(byte[])>(r2);

        return $r9;
    }

    public static com.google.common.hash.HashCode combineUnordered(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r1, r3;
        byte[] r2, r5;
        com.google.common.hash.HashCode r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r9;
        byte $b5, $b8, $b9;

        r0 := @parameter0: java.lang.Iterable;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Must be at least 1 hash code to combine.");

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.google.common.hash.HashCode) $r6;

        $i1 = virtualinvoke $r7.<com.google.common.hash.HashCode: int bits()>();

        $i2 = $i1 / 8;

        r2 = newarray (byte)[$i2];

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.hash.HashCode) $r9;

        r5 = virtualinvoke r4.<com.google.common.hash.HashCode: byte[] asBytes()>();

        $i3 = lengthof r5;

        $i4 = lengthof r2;

        if $i3 != $i4 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "All hashcodes must have the same bit length.");

        i0 = 0;

     label4:
        $i6 = lengthof r5;

        if i0 >= $i6 goto label5;

        $b8 = r2[i0];

        $b5 = r5[i0];

        $i7 = $b8 + $b5;

        $b9 = (byte) $i7;

        r2[i0] = $b9;

        i0 = i0 + 1;

        goto label4;

     label5:
        goto label1;

     label6:
        $r8 = staticinvoke <com.google.common.hash.HashCodes: com.google.common.hash.HashCode fromBytes(byte[])>(r2);

        return $r8;
    }

    static int checkPositiveAndMakeMultipleOf32(int)
    {
        int i0, $i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Number of bits must be positive");

        $i1 = i0 + 31;

        $i2 = $i1 & -32;

        return $i2;
    }

    static void <clinit>()
    {
        com.google.common.hash.Murmur3_32HashFunction $r0;
        com.google.common.hash.Murmur3_128HashFunction $r1;
        com.google.common.hash.MessageDigestHashFunction $r2, $r3, $r4, $r5;

        $r0 = new com.google.common.hash.Murmur3_32HashFunction;

        specialinvoke $r0.<com.google.common.hash.Murmur3_32HashFunction: void <init>(int)>(0);

        <com.google.common.hash.Hashing: com.google.common.hash.Murmur3_32HashFunction MURMUR3_32> = $r0;

        $r1 = new com.google.common.hash.Murmur3_128HashFunction;

        specialinvoke $r1.<com.google.common.hash.Murmur3_128HashFunction: void <init>(int)>(0);

        <com.google.common.hash.Hashing: com.google.common.hash.Murmur3_128HashFunction MURMUR3_128> = $r1;

        $r2 = new com.google.common.hash.MessageDigestHashFunction;

        specialinvoke $r2.<com.google.common.hash.MessageDigestHashFunction: void <init>(java.lang.String)>("MD5");

        <com.google.common.hash.Hashing: com.google.common.hash.HashFunction MD5> = $r2;

        $r3 = new com.google.common.hash.MessageDigestHashFunction;

        specialinvoke $r3.<com.google.common.hash.MessageDigestHashFunction: void <init>(java.lang.String)>("SHA-1");

        <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_1> = $r3;

        $r4 = new com.google.common.hash.MessageDigestHashFunction;

        specialinvoke $r4.<com.google.common.hash.MessageDigestHashFunction: void <init>(java.lang.String)>("SHA-256");

        <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_256> = $r4;

        $r5 = new com.google.common.hash.MessageDigestHashFunction;

        specialinvoke $r5.<com.google.common.hash.MessageDigestHashFunction: void <init>(java.lang.String)>("SHA-512");

        <com.google.common.hash.Hashing: com.google.common.hash.HashFunction SHA_512> = $r5;

        return;
    }
}
