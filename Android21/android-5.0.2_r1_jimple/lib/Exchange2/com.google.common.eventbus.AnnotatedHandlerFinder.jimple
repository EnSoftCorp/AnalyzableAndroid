class com.google.common.eventbus.AnnotatedHandlerFinder extends java.lang.Object implements com.google.common.eventbus.HandlerFindingStrategy
{

    void <init>()
    {
        com.google.common.eventbus.AnnotatedHandlerFinder r0;

        r0 := @this: com.google.common.eventbus.AnnotatedHandlerFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.collect.Multimap findAllHandlers(java.lang.Object)
    {
        com.google.common.eventbus.AnnotatedHandlerFinder r0;
        java.lang.Object r1;
        com.google.common.collect.HashMultimap r2;
        java.lang.Class r3, r8;
        java.lang.reflect.Method[] r4;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Method r5;
        com.google.common.eventbus.Subscribe r6;
        java.lang.Class[] r7;
        com.google.common.eventbus.EventHandler r9;
        java.lang.annotation.Annotation $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r19;

        r0 := @this: com.google.common.eventbus.AnnotatedHandlerFinder;

        r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r3 == null goto label6;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r5 = r4[i1];

        $r10 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "com/google/common/eventbus/Subscribe");

        r6 = (com.google.common.eventbus.Subscribe) $r10;

        if r6 == null goto label4;

        r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof r7;

        if $i2 == 1 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has @Subscribe annotation, but requires ");

        $i3 = lengthof r7;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arguments.  Event handler methods ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must require a single argument.");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label3:
        r8 = r7[0];

        r9 = staticinvoke <com.google.common.eventbus.AnnotatedHandlerFinder: com.google.common.eventbus.EventHandler makeHandler(java.lang.Object,java.lang.reflect.Method)>(r1, r5);

        interfaceinvoke r2.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>(r8, r9);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label6:
        return r2;
    }

    private static com.google.common.eventbus.EventHandler makeHandler(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object r0;
        java.lang.reflect.Method r1;
        com.google.common.eventbus.EventHandler r2, $r4;
        boolean $z0;
        com.google.common.eventbus.SynchronizedEventHandler $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        $z0 = staticinvoke <com.google.common.eventbus.AnnotatedHandlerFinder: boolean methodIsDeclaredThreadSafe(java.lang.reflect.Method)>(r1);

        if $z0 == 0 goto label1;

        $r4 = new com.google.common.eventbus.EventHandler;

        specialinvoke $r4.<com.google.common.eventbus.EventHandler: void <init>(java.lang.Object,java.lang.reflect.Method)>(r0, r1);

        r2 = $r4;

        goto label2;

     label1:
        $r3 = new com.google.common.eventbus.SynchronizedEventHandler;

        specialinvoke $r3.<com.google.common.eventbus.SynchronizedEventHandler: void <init>(java.lang.Object,java.lang.reflect.Method)>(r0, r1);

        r2 = $r3;

     label2:
        return r2;
    }

    private static boolean methodIsDeclaredThreadSafe(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.annotation.Annotation $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "com/google/common/eventbus/AllowConcurrentEvents");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
