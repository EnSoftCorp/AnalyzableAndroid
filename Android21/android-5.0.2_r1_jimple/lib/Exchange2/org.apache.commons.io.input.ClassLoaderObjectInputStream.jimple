public class org.apache.commons.io.input.ClassLoaderObjectInputStream extends java.io.ObjectInputStream
{
    private java.lang.ClassLoader classLoader;

    public void <init>(java.lang.ClassLoader, java.io.InputStream) throws java.io.IOException, java.io.StreamCorruptedException
    {
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.lang.ClassLoader r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader> = r1;

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.Class r2, $r5;
        java.lang.String $r3;
        java.lang.ClassLoader $r4;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r4 = r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r4);

        if r2 == null goto label1;

        return r2;

     label1:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r1);

        return $r5;
    }
}
