public class com.android.exchange.utility.WbxmlResponseLogger extends java.lang.Object implements org.apache.http.HttpResponseInterceptor
{
    private static final java.lang.String TAG;
    protected static final int MAX_LENGTH;

    public void <init>()
    {
        com.android.exchange.utility.WbxmlResponseLogger r0;

        r0 := @this: com.android.exchange.utility.WbxmlResponseLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static boolean shouldLogResponse(long)
    {
        long l0;
        byte $b1;
        boolean $z0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 1024L;

        if $b1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected static java.lang.String processContentEncoding(org.apache.http.Header)
    {
        org.apache.http.Header r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.apache.http.Header;

        if r0 == null goto label3;

        r1 = interfaceinvoke r0.<org.apache.http.Header: java.lang.String getValue()>();

        if r1 != null goto label1;

        $r2 = "UTF-8";

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;

     label3:
        return "UTF-8";
    }

    protected static byte[] getContentAsByteArray(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, $i2, $i3;
        byte[] r1, $r4;
        java.io.ByteArrayOutputStream r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r3;

     label1:
        $i2 = lengthof r1;

        $i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i2);

        i1 = $i3;

        if $i3 == -1 goto label2;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, i1);

        goto label1;

     label2:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void flush()>();

        $r4 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws java.io.IOException
    {
        com.android.exchange.utility.WbxmlResponseLogger r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpEntity r3, $r10, $r11, $r13;
        org.apache.http.Header r4;
        java.lang.String r5, r8;
        java.io.InputStream r6, r7;
        boolean $z0, $z1, $z2;
        org.apache.http.entity.BufferedHttpEntity $r9;
        long $l0;
        java.lang.Object[] $r12, $r14;
        java.util.zip.GZIPInputStream $r15;
        byte[] r16;

        r0 := @this: com.android.exchange.utility.WbxmlResponseLogger;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Exchange", 3);

        if $z0 == 0 goto label4;

        $r9 = new org.apache.http.entity.BufferedHttpEntity;

        $r10 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        specialinvoke $r9.<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)>($r10);

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r9);

        r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $l0 = interfaceinvoke r3.<org.apache.http.HttpEntity: long getContentLength()>();

        $z1 = staticinvoke <com.android.exchange.utility.WbxmlResponseLogger: boolean shouldLogResponse(long)>($l0);

        if $z1 != 0 goto label1;

        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Exchange", "wbxml response: [TOO MUCH DATA TO INCLUDE]", $r14);

        return;

     label1:
        r4 = interfaceinvoke r3.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        r5 = staticinvoke <com.android.exchange.utility.WbxmlResponseLogger: java.lang.String processContentEncoding(org.apache.http.Header)>(r4);

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("gzip");

        if $z2 == 0 goto label2;

        $r13 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        r7 = interfaceinvoke $r13.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        $r15 = new java.util.zip.GZIPInputStream;

        specialinvoke $r15.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r7);

        r6 = $r15;

        goto label3;

     label2:
        $r11 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        r6 = interfaceinvoke $r11.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

     label3:
        r16 = staticinvoke <com.android.exchange.utility.WbxmlResponseLogger: byte[] getContentAsByteArray(java.io.InputStream,int)>(r6, 1024);

        r8 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r16, 2);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r8;

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Exchange", "wbxml response: echo \'%s\' | base64 -d | wbxml", $r12);

     label4:
        return;
    }

    public static void <clinit>()
    {
        <com.android.exchange.utility.WbxmlResponseLogger: int MAX_LENGTH> = 1024;

        <com.android.exchange.utility.WbxmlResponseLogger: java.lang.String TAG> = "Exchange";

        return;
    }
}
