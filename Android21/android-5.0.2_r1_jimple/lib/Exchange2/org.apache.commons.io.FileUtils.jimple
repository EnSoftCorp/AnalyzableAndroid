public class org.apache.commons.io.FileUtils extends java.lang.Object
{
    public static final long ONE_KB;
    public static final long ONE_MB;
    public static final long ONE_GB;
    public static final java.io.File[] EMPTY_FILE_ARRAY;

    public void <init>()
    {
        org.apache.commons.io.FileUtils r0;

        r0 := @this: org.apache.commons.io.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.FileInputStream openInputStream(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1, $z2;
        java.io.FileNotFoundException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18;
        java.lang.String $r6, $r14, $r19;
        java.io.FileInputStream $r7;
        java.io.IOException $r8, $r13;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r13 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label1:
        $z2 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z2 != 0 goto label3;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be read");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label2:
        $r1 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label3:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        return $r7;
    }

    public static java.io.FileOutputStream openOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.FileOutputStream $r2;
        java.io.IOException $r3, $r9, $r14;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;
        java.lang.String $r8, $r15, $r20;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label1;

        $r14 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label1:
        $z4 = virtualinvoke r0.<java.io.File: boolean canWrite()>();

        if $z4 != 0 goto label3;

        $r9 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label2:
        r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label3;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label3:
        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        return $r2;
    }

    public static java.lang.String byteCountToDisplaySize(long)
    {
        long l0, $l1, $l3, $l5, $l7, $l8, $l9;
        java.lang.String r0, $r2, $r7, $r11, $r15;
        byte $b2, $b4, $b6;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r16;

        l0 := @parameter0: long;

        $l1 = l0 / 1073741824L;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $l9 = l0 / 1073741824L;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GB");

        r0 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label1:
        $l3 = l0 / 1048576L;

        $b4 = $l3 cmp 0L;

        if $b4 <= 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $l8 = l0 / 1048576L;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MB");

        r0 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label2:
        $l5 = l0 / 1024L;

        $b6 = $l5 cmp 0L;

        if $b6 <= 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $l7 = l0 / 1024L;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KB");

        r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return r0;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.FileOutputStream r1;
        boolean $z0, z1;
        long $l0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r1);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        z1 = virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l0);

        if z1 != 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set the last modification time for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection)
    {
        java.util.Collection r0;
        int $i0;
        java.io.File[] $r1, $r3;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.io.File)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.io.File[]) $r2;

        return $r3;
    }

    private static void innerListFiles(java.util.Collection, java.io.File, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.util.Collection r0;
        java.io.File r1, $r4, $r5, $r6;
        org.apache.commons.io.filefilter.IOFileFilter r2;
        java.io.File[] r3;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

        if r3 == null goto label4;

        i0 = 0;

     label1:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label4;

        $r4 = r3[i0];

        $z0 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r6 = r3[i0];

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r0, $r6, r2);

        goto label3;

     label2:
        $r5 = r3[i0];

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r5);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public static java.util.Collection listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, r3, r4, $r6, $r7, $r8, $r10;
        java.util.LinkedList r5, $r9;
        boolean $z0;
        java.lang.NullPointerException $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'directory\' is not a directory");

        throw $r12;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parameter \'fileFilter\' is null");

        throw $r11;

     label2:
        $r6 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r6);

        r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r1, $r7);

        if r2 != null goto label3;

        r4 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label4;

     label3:
        $r8 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r2, $r8);

     label4:
        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r5 = $r9;

        $r10 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r3, r4);

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>(r5, r0, $r10);

        return r5;
    }

    public static java.util.Iterator iterateFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1, r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }

    private static java.lang.String[] toSuffixes(java.lang.String[])
    {
        java.lang.String[] r0, r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @parameter0: java.lang.String[];

        $i1 = lengthof r0;

        r1 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = r0[i0];

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i0] = $r6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.Collection listFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File r0;
        java.lang.String[] r1, r3;
        boolean z0;
        org.apache.commons.io.filefilter.IOFileFilter r2, $r5;
        org.apache.commons.io.filefilter.SuffixFileFilter $r4;
        java.util.Collection $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        r2 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label2;

     label1:
        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>(r1);

        $r4 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r4.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>(r3);

        r2 = $r4;

     label2:
        if z0 == 0 goto label3;

        $r5 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label4;

     label3:
        $r5 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

     label4:
        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r2, $r5);

        return $r6;
    }

    public static java.util.Iterator iterateFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File r0;
        java.lang.String[] r1;
        boolean z0;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>(r0, r1, z0);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public static boolean contentEquals(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r6, $r7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.io.FileInputStream r2, r3, $r8, $r9;
        java.lang.Throwable r4, $r10;
        java.io.IOException $r5;
        long $l0, $l1;
        byte $b2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if z0 == $z2 goto label01;

        return 0;

     label01:
        if z0 != 0 goto label02;

        return 1;

     label02:
        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label03;

        $z4 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label04;

     label03:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r5;

     label04:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $l1 = virtualinvoke r1.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label05;

        return 0;

     label05:
        $r6 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r7 = virtualinvoke r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z5 = virtualinvoke $r6.<java.io.File: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label06;

        return 1;

     label06:
        r2 = null;

        r3 = null;

     label07:
        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r2 = $r9;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r3 = $r8;

        z1 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>(r2, r3);

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        return z1;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

     label10:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        throw r4;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.io.File toFile(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String r1, r2, $r3, $r4, $r6, $r10;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        char c1, $c2;
        boolean $z0;
        java.io.File $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;

        r0 := @parameter0: java.net.URL;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>();

        $c2 = <java.io.File: char separatorChar>;

        r1 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(47, $c2);

        i0 = 0;

     label3:
        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(37, i0);

        i0 = $i3;

        if $i3 < 0 goto label4;

        $i4 = i0 + 2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 >= $i5 goto label3;

        $i7 = i0 + 1;

        $i6 = i0 + 3;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r2, 16);

        c1 = (char) $i8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $i9 = i0 + 3;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label4:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1);

        return $r5;
    }

    public static java.io.File[] toFiles(java.net.URL[])
    {
        java.net.URL[] r0;
        java.io.File[] r1, $r3;
        int i0, $i1, $i2, $i3;
        java.net.URL r2;
        java.lang.String $r4, $r10;
        boolean $z0;
        java.io.File $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: java.net.URL[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        $r3 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        return $r3;

     label2:
        $i2 = lengthof r0;

        r1 = newarray (java.io.File)[$i2];

        i0 = 0;

     label3:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label6;

        r2 = r0[i0];

        if r2 == null goto label5;

        $r4 = virtualinvoke r2.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URL could not be converted to a File: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r5 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r2);

        r1[i0] = $r5;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.net.URL[] toURLs(java.io.File[]) throws java.io.IOException
    {
        java.io.File[] r0;
        java.net.URL[] r1;
        int i0, $i1, $i2;
        java.io.File $r2;
        java.net.URI $r3;
        java.net.URL $r4;

        r0 := @parameter0: java.io.File[];

        $i1 = lengthof r0;

        r1 = newarray (java.net.URL)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        r1[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean z0, $z1, $z2;
        java.lang.String $r3, $r9;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r10;

     label1:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, $r2, z0);

        return;
    }

    public static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r4, $r10, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r2, $r3, $r11, $r19, $r24, $r34, $r36;
        java.io.IOException $r5, $r13, $r18, $r25;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r38, $r39;
        java.io.FileNotFoundException $r35;
        java.lang.NullPointerException $r37, $r40;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r40 = new java.lang.NullPointerException;

        specialinvoke $r40.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r40;

     label1:
        if r1 != null goto label2;

        $r37 = new java.lang.NullPointerException;

        specialinvoke $r37.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r37;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r35 = new java.io.FileNotFoundException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        $r25 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r25;

     label4:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label5;

        $r18 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label5:
        $r4 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if $r4 == null goto label6;

        $r10 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $z6 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z6 != 0 goto label6;

        $r12 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        $z7 = virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        if $z7 != 0 goto label6;

        $r13 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label6:
        $z4 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label7;

        $z5 = virtualinvoke r1.<java.io.File: boolean canWrite()>();

        if $z5 != 0 goto label7;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is read-only");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label7:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r0, r1, z0);

        return;
    }

    private static void doCopyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z3;
        java.io.FileInputStream r2, $r6;
        java.io.FileOutputStream r3, $r7;
        java.lang.Throwable r4, r5, $r21, $r23;
        long $l1, $l2, $l4;
        byte $b3;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r20;
        java.io.IOException $r9, $r16;
        java.lang.String $r14, $r22;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label01;

        $r16 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label01:
        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r2 = $r6;

     label02:
        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r3 = $r7;

     label03:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, r3);

     label04:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        goto label07;

     label05:
        $r23 := @caughtexception;

        r4 = $r23;

     label06:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        throw r4;

     label07:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        goto label10;

     label08:
        $r21 := @caughtexception;

        r5 = $r21;

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r5;

     label10:
        $l1 = virtualinvoke r0.<java.io.File: long length()>();

        $l2 = virtualinvoke r1.<java.io.File: long length()>();

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label11;

        $r9 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy full contents from \'");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label11:
        if z0 == 0 goto label12;

        $l4 = virtualinvoke r0.<java.io.File: long lastModified()>();

        virtualinvoke r1.<java.io.File: boolean setLastModified(long)>($l4);

     label12:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static void copyDirectoryToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r9, $r17;
        java.lang.IllegalArgumentException $r4, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15;
        java.lang.NullPointerException $r10, $r16;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r16;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        if r1 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r10;

     label3:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, $r2, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>(r0, r1, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>(r0, r1, null, z0);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter) throws java.io.IOException
    {
        java.io.File r0, r1;
        java.io.FileFilter r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>(r0, r1, r2, 1);

        return;
    }

    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, r5, $r12, $r14;
        java.io.FileFilter r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList r3, $r11;
        java.io.File[] r4, $r10;
        int i0, $i1, $i2, $i3;
        java.lang.String $r6, $r7, $r8, $r9, $r13, $r15, $r21, $r31, $r33;
        java.io.IOException $r16, $r22;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r35, $r36;
        java.io.FileNotFoundException $r32;
        java.lang.NullPointerException $r34, $r37;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        $r37 = new java.lang.NullPointerException;

        specialinvoke $r37.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r37;

     label1:
        if r1 != null goto label2;

        $r34 = new java.lang.NullPointerException;

        specialinvoke $r34.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r34;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r32 = new java.io.FileNotFoundException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label4;

        $r22 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r22;

     label4:
        $r6 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r7 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label5;

        $r16 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label5:
        r3 = null;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r9 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z4 == 0 goto label9;

        if r2 != null goto label6;

        $r10 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        goto label7;

     label6:
        $r10 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

     label7:
        r4 = $r10;

        if r4 == null goto label9;

        $i1 = lengthof r4;

        if $i1 <= 0 goto label9;

        $r11 = new java.util.ArrayList;

        $i2 = lengthof r4;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i2);

        r3 = $r11;

        i0 = 0;

     label8:
        $i3 = lengthof r4;

        if i0 >= $i3 goto label9;

        $r12 = new java.io.File;

        $r14 = r4[i0];

        $r13 = virtualinvoke $r14.<java.io.File: java.lang.String getName()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r13);

        r5 = $r12;

        $r15 = virtualinvoke r5.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r15);

        i0 = i0 + 1;

        goto label8;

     label9:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>(r0, r1, r2, z0, r3);

        return;
    }

    private static void doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean, java.util.List) throws java.io.IOException
    {
        java.io.File r0, r1, r5, $r7, $r8, $r10, $r11, $r12, $r14;
        java.io.FileFilter r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        java.util.List r3;
        java.io.File[] r4, $r6;
        int i0, $i1;
        java.lang.String $r9, $r13, $r18, $r23, $r29, $r36;
        java.io.IOException $r15, $r20, $r28, $r34;
        java.lang.StringBuilder $r16, $r17, $r19, $r21, $r22, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r35, $r37;
        long $l2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.io.FileFilter;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.util.List;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z7 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z7 != 0 goto label03;

        $r34 = new java.io.IOException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>($r36);

        throw $r34;

     label01:
        $z2 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label02;

        $r28 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label02:
        if z0 == 0 goto label03;

        $l2 = virtualinvoke r0.<java.io.File: long lastModified()>();

        virtualinvoke r1.<java.io.File: boolean setLastModified(long)>($l2);

     label03:
        $z3 = virtualinvoke r1.<java.io.File: boolean canWrite()>();

        if $z3 != 0 goto label04;

        $r20 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label04:
        if r2 != null goto label05;

        $r6 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        goto label06;

     label05:
        $r6 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r2);

     label06:
        r4 = $r6;

        if r4 != null goto label07;

        $r15 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label07:
        i0 = 0;

     label08:
        $i1 = lengthof r4;

        if i0 >= $i1 goto label12;

        $r7 = new java.io.File;

        $r8 = r4[i0];

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r9);

        r5 = $r7;

        if r3 == null goto label09;

        $r14 = r4[i0];

        $r13 = virtualinvoke $r14.<java.io.File: java.lang.String getCanonicalPath()>();

        $z5 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r13);

        if $z5 != 0 goto label11;

     label09:
        $r10 = r4[i0];

        $z4 = virtualinvoke $r10.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label10;

        $r11 = r4[i0];

        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>($r11, r5, r2, z0, r3);

        goto label11;

     label10:
        $r12 = r4[i0];

        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r12, r5, z0);

     label11:
        i0 = i0 + 1;

        goto label08;

     label12:
        return;
    }

    public static void copyURLToFile(java.net.URL, java.io.File) throws java.io.IOException
    {
        java.net.URL r0;
        java.io.File r1;
        java.io.InputStream r2;
        java.io.FileOutputStream r3;
        java.lang.Throwable r4, r5, $r6, $r7;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: java.io.File;

        r2 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

     label1:
        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, r3);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        goto label6;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        throw r4;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        goto label9;

     label7:
        $r7 := @caughtexception;

        r5 = $r7;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static void deleteDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.io.IOException $r6;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0);

        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete directory ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label2:
        return;
    }

    public static boolean deleteQuietly(java.io.File)
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.Exception $r2, $r3;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

     label5:
        return $z1;

     label6:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static void cleanDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.lang.String r1, $r9, r19;
        java.io.IOException r2, r4, $r5, $r17;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        java.lang.IllegalArgumentException $r13, $r18;
        java.io.File[] r20;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r18;

     label01:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label02;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r19);

        throw $r13;

     label02:
        r20 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r20 != null goto label03;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label03:
        r2 = null;

        i0 = 0;

     label04:
        $i1 = lengthof r20;

        if i0 >= $i1 goto label09;

        r3 = r20[i0];

     label05:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>(r3);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        r4 = $r17;

        r2 = r4;

     label08:
        i0 = i0 + 1;

        goto label04;

     label09:
        if null == r2 goto label10;

        throw r2;

     label10:
        return;

        catch java.io.IOException from label05 to label06 with label07;
    }

    public static boolean waitFor(java.io.File, int)
    {
        java.io.File r0;
        int i0, i1, i2, $i3, $i4;
        boolean $z0;
        java.lang.InterruptedException $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 = 0;

        i2 = 0;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label6;

        $i3 = i2;

        i2 = i2 + 1;

        if $i3 < 10 goto label2;

        i2 = 0;

        $i4 = i1;

        i1 = i1 + 1;

        if $i4 <= i0 goto label2;

        return 0;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label3:
        goto label1;

     label4:
        $r2 := @caughtexception;

        goto label1;

     label5:
        $r3 := @caughtexception;

        goto label6;

     label6:
        return 1;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public static java.lang.String readFileToString(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r3;
        java.io.FileInputStream r2;
        java.lang.Throwable r4, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 = null;

     label1:
        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        r3 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>(r2, r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        return r3;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String readFileToString(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.lang.String)>(r0, null);

        return $r1;
    }

    public static byte[] readFileToByteArray(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.io.FileInputStream r1;
        byte[] r2;
        java.lang.Throwable r3, $r4;

        r0 := @parameter0: java.io.File;

        r1 = null;

     label1:
        r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        r2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1);

        return r2;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.io.FileInputStream r2;
        java.util.List r3;
        java.lang.Throwable r4, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 = null;

     label1:
        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        r3 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.lang.String)>(r2, r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        return r3;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.util.List readLines(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.util.List $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r0, null);

        return $r1;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.io.FileInputStream r2;
        java.io.IOException r3, $r5;
        org.apache.commons.io.LineIterator $r4;
        java.lang.RuntimeException $r6, r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 = null;

     label1:
        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>(r0);

        $r4 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>(r2, r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r3;

     label4:
        $r6 := @caughtexception;

        r7 = $r6;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r7;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public static org.apache.commons.io.LineIterator lineIterator(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.commons.io.LineIterator $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>(r0, null);

        return $r1;
    }

    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2;
        java.io.FileOutputStream r3;
        java.lang.Throwable r4, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = null;

     label1:
        r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0);

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)>(r1, r3, r2);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void writeStringToFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, null);

        return;
    }

    public static void writeByteArrayToFile(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;
        java.io.FileOutputStream r2;
        java.lang.Throwable r3, $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        r2 = null;

     label1:
        r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r2);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r2);

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;
        java.util.Collection r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, r1, r2, null);

        return;
    }

    public static void writeLines(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, null);

        return;
    }

    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r3;
        java.util.Collection r2;
        java.io.FileOutputStream r4;
        java.lang.Throwable r5, $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: java.lang.String;

        r4 = null;

     label1:
        r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>(r0);

        staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>(r2, r3, r4, r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void writeLines(java.io.File, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.util.Collection r1;
        java.lang.String r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)>(r0, null, r1, r2);

        return;
    }

    public static void forceDelete(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.io.IOException $r5;
        java.io.FileNotFoundException $r6;

        r0 := @parameter0: java.io.File;

        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0);

        goto label3;

     label1:
        z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label3;

        if z0 != 0 goto label2;

        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File does not exist: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete file: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        return;
    }

    public static void forceDeleteOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>(r0);

        goto label2;

     label1:
        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

     label2:
        return;
    }

    private static void deleteDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>(r0);

        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

        return;
    }

    private static void cleanDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.lang.String r1, $r9, r19;
        java.io.IOException r2, r4, $r5, $r17;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        java.lang.IllegalArgumentException $r13, $r18;
        java.io.File[] r20;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r18;

     label01:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label02;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r19);

        throw $r13;

     label02:
        r20 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r20 != null goto label03;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label03:
        r2 = null;

        i0 = 0;

     label04:
        $i1 = lengthof r20;

        if i0 >= $i1 goto label09;

        r3 = r20[i0];

     label05:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>(r3);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        r4 = $r17;

        r2 = r4;

     label08:
        i0 = i0 + 1;

        goto label04;

     label09:
        if null == r2 goto label10;

        throw r2;

     label10:
        return;

        catch java.io.IOException from label05 to label06 with label07;
    }

    public static void forceMkdir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r12;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        java.io.IOException $r5, $r11;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<java.io.File: boolean isFile()>();

        if $z2 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists and is ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a directory. Unable to create directory.");

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r11;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(r12);

        throw $r5;

     label2:
        return;
    }

    public static long sizeOfDirectory(java.io.File)
    {
        java.io.File r0, r3;
        java.lang.String r1, r12;
        java.io.File[] r2;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        long $l2, $l3, l4;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r7, $r11;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r11;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r12);

        throw $r7;

     label2:
        l4 = 0L;

        r2 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r2 != null goto label3;

        return 0L;

     label3:
        i0 = 0;

     label4:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label7;

        r3 = r2[i0];

        $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label5;

        $l3 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(r3);

        l4 = l4 + $l3;

        goto label6;

     label5:
        $l2 = virtualinvoke r3.<java.io.File: long length()>();

        l4 = l4 + $l2;

     label6:
        i0 = i0 + 1;

        goto label4;

     label7:
        return l4;
    }

    public static boolean isFileNewer(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        long $l0;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r8;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The reference file \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        $l0 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0);

        return $z1;
    }

    public static boolean isFileNewer(java.io.File, java.util.Date)
    {
        java.io.File r0;
        java.util.Date r1;
        long $l0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Date;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>(r0, $l0);

        return $z0;
    }

    public static boolean isFileNewer(java.io.File, long)
    {
        java.io.File r0;
        long l0, $l1;
        boolean $z0, $z1;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static boolean isFileOlder(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        long $l0;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r8;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The reference file \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        $l0 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $z1 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r0, $l0);

        return $z1;
    }

    public static boolean isFileOlder(java.io.File, java.util.Date)
    {
        java.io.File r0;
        java.util.Date r1;
        long $l0;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Date;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>(r0, $l0);

        return $z0;
    }

    public static boolean isFileOlder(java.io.File, long)
    {
        java.io.File r0;
        long l0, $l1;
        boolean $z0, $z1;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static long checksumCRC32(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.util.zip.CRC32 r1, $r2;
        long $l0;

        r0 := @parameter0: java.io.File;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        r1 = $r2;

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>(r0, r1);

        $l0 = virtualinvoke r1.<java.util.zip.CRC32: long getValue()>();

        return $l0;
    }

    public static java.util.zip.Checksum checksum(java.io.File, java.util.zip.Checksum) throws java.io.IOException
    {
        java.io.File r0;
        java.util.zip.Checksum r1;
        java.util.zip.CheckedInputStream r2, $r4;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        java.io.FileInputStream $r5;
        org.apache.commons.io.output.NullOutputStream $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.zip.Checksum;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Checksums can\'t be computed on directories");

        throw $r7;

     label1:
        r2 = null;

     label2:
        $r4 = new java.util.zip.CheckedInputStream;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r4.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r5, r1);

        r2 = $r4;

        $r6 = new org.apache.commons.io.output.NullOutputStream;

        specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, $r6);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

     label5:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r3;

     label6:
        return r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void moveDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r2, $r11, $r17;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r28;
        java.lang.String $r9, $r14, $r20, $r29;
        java.io.FileNotFoundException $r23;
        java.lang.NullPointerException $r26, $r27;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r27 = new java.lang.NullPointerException;

        specialinvoke $r27.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r27;

     label1:
        if r1 != null goto label2;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r26;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r23 = new java.io.FileNotFoundException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label4;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label5:
        z0 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if z0 != 0 goto label6;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>(r0, r1);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>(r0);

        $z4 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label6;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete original directory \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label6:
        return;
    }

    public static void moveDirectoryToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean z0, $z1, $z2, $z3;
        java.lang.String $r3, $r9, $r16;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r17;
        java.io.FileNotFoundException $r10;
        java.lang.NullPointerException $r18, $r19;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r19;

     label1:
        if r1 != null goto label2;

        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r18;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label4;

        $r10 = new java.io.FileNotFoundException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label5:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>(r0, $r2);

        return;
    }

    public static void moveFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r2, $r11, $r17, $r23;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r26, $r27, $r28, $r29, $r31, $r34;
        java.lang.String $r8, $r14, $r20, $r25, $r35;
        java.io.FileNotFoundException $r30;
        java.lang.NullPointerException $r32, $r33;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        $r33 = new java.lang.NullPointerException;

        specialinvoke $r33.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r33;

     label1:
        if r1 != null goto label2;

        $r32 = new java.lang.NullPointerException;

        specialinvoke $r32.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r32;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r30 = new java.io.FileNotFoundException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        $r23 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r23;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label5;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label5:
        $z4 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label6;

        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label6:
        z0 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if z0 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r0, r1);

        $z5 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z5 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>(r1);

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete original file \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label7:
        return;
    }

    public static void moveFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1, $r2;
        boolean z0, $z1, $z2, $z3;
        java.lang.String $r3, $r9, $r16;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r17;
        java.io.FileNotFoundException $r10;
        java.lang.NullPointerException $r18, $r19;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r19;

     label1:
        if r1 != null goto label2;

        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r18;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label4;

        $r10 = new java.io.FileNotFoundException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label4:
        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 != 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label5:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>(r0, $r2);

        return;
    }

    public static void moveToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean z0, $z1, $z2;
        java.io.FileNotFoundException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.NullPointerException $r8, $r9;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r8;

     label2:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r2 = new java.io.FileNotFoundException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label3:
        $z2 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z0);

        goto label5;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>(r0, r1, z0);

     label5:
        return;
    }

    static void <clinit>()
    {
        java.io.File[] $r0;

        <org.apache.commons.io.FileUtils: long ONE_GB> = 1073741824L;

        <org.apache.commons.io.FileUtils: long ONE_MB> = 1048576L;

        <org.apache.commons.io.FileUtils: long ONE_KB> = 1024L;

        $r0 = newarray (java.io.File)[0];

        <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> = $r0;

        return;
    }
}
