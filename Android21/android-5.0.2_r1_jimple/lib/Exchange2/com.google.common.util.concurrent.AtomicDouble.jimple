public class com.google.common.util.concurrent.AtomicDouble extends java.lang.Number implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient volatile long value;
    private static final java.util.concurrent.atomic.AtomicLongFieldUpdater updater;

    public void <init>(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0;
        long $l0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        r0.<com.google.common.util.concurrent.AtomicDouble: long value> = $l0;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.AtomicDouble r0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        return;
    }

    public final double get()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        long $l0;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $l0 = r0.<com.google.common.util.concurrent.AtomicDouble: long value>;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public final void set(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0;
        long l0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        r0.<com.google.common.util.concurrent.AtomicDouble: long value> = l0;

        return;
    }

    public final void lazySet(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: void set(double)>(d0);

        return;
    }

    public final double getAndSet(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0, $d1;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r1 = <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(java.lang.Object,long)>(r0, l0);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d1;
    }

    public final boolean compareAndSet(double, double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0, d1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater>;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        return $z0;
    }

    public final boolean weakCompareAndSet(double, double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0, d1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater>;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(java.lang.Object,long,long)>(r0, $l0, $l1);

        return $z0;
    }

    public final double getAndAdd(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0, d1, d2;
        long l0, l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

     label1:
        l0 = r0.<com.google.common.util.concurrent.AtomicDouble: long value>;

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        d2 = d1 + d0;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        $r1 = <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, l0, l1);

        if $z0 == 0 goto label2;

        return d1;

     label2:
        goto label1;
    }

    public final double addAndGet(double)
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double d0, d1, d2;
        long l0, l1;
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        d0 := @parameter0: double;

     label1:
        l0 = r0.<com.google.common.util.concurrent.AtomicDouble: long value>;

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l0);

        d2 = d1 + d0;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        $r1 = <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>(r0, l0, l1);

        if $z0 == 0 goto label2;

        return d2;

     label2:
        goto label1;
    }

    public java.lang.String toString()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double $d0;
        java.lang.String $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r1;
    }

    public int intValue()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double $d0;
        int $i0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        $i0 = (int) $d0;

        return $i0;
    }

    public long longValue()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double $d0;
        long $l0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        $l0 = (long) $d0;

        return $l0;
    }

    public float floatValue()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double $d0;
        float $f0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public double doubleValue()
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        return $d0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        java.io.ObjectOutputStream r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: double get()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.common.util.concurrent.AtomicDouble r0;
        java.io.ObjectInputStream r1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDouble;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $d0 = virtualinvoke r1.<java.io.ObjectInputStream: double readDouble()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicDouble: void set(double)>($d0);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater $r0;

        <com.google.common.util.concurrent.AtomicDouble: long serialVersionUID> = 0L;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "com/google/common/util/concurrent/AtomicDouble", "value");

        <com.google.common.util.concurrent.AtomicDouble: java.util.concurrent.atomic.AtomicLongFieldUpdater updater> = $r0;

        return;
    }
}
