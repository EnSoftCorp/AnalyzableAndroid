public class org.apache.commons.io.LineIterator extends java.lang.Object implements java.util.Iterator
{
    private final java.io.BufferedReader bufferedReader;
    private java.lang.String cachedLine;
    private boolean finished;

    public void <init>(java.io.Reader) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.io.LineIterator r0;
        java.io.Reader r1;
        boolean $z0;
        java.io.BufferedReader $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.io.LineIterator;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.LineIterator: boolean finished> = 0;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reader must not be null");

        throw $r4;

     label1:
        $z0 = r1 instanceof java.io.BufferedReader;

        if $z0 == 0 goto label2;

        $r3 = (java.io.BufferedReader) r1;

        r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader> = $r3;

        goto label3;

     label2:
        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader> = $r2;

     label3:
        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.io.LineIterator r0;
        java.lang.String r1, $r2, $r6;
        boolean $z0, $z1;
        java.io.BufferedReader $r3;
        java.io.IOException $r4, r7;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.commons.io.LineIterator;

        $r2 = r0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine>;

        if $r2 == null goto label1;

        return 1;

     label1:
        $z0 = r0.<org.apache.commons.io.LineIterator: boolean finished>;

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>;

        r1 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if r1 != null goto label4;

        r0.<org.apache.commons.io.LineIterator: boolean finished> = 1;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke r0.<org.apache.commons.io.LineIterator: boolean isValidLine(java.lang.String)>(r1);

        if $z1 == 0 goto label6;

        r0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = r1;

     label5:
        return 1;

     label6:
        goto label2;

     label7:
        $r4 := @caughtexception;

        r7 = $r4;

        virtualinvoke r0.<org.apache.commons.io.LineIterator: void close()>();

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke r7.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.io.IOException from label6 to label7 with label7;
    }

    protected boolean isValidLine(java.lang.String)
    {
        org.apache.commons.io.LineIterator r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.LineIterator;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    public java.lang.Object next()
    {
        org.apache.commons.io.LineIterator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.LineIterator;

        $r1 = virtualinvoke r0.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();

        return $r1;
    }

    public java.lang.String nextLine()
    {
        org.apache.commons.io.LineIterator r0;
        java.lang.String r1;
        boolean $z0;
        java.util.NoSuchElementException $r2;

        r0 := @this: org.apache.commons.io.LineIterator;

        $z0 = virtualinvoke r0.<org.apache.commons.io.LineIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more lines");

        throw $r2;

     label1:
        r1 = r0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine>;

        r0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = null;

        return r1;
    }

    public void close()
    {
        org.apache.commons.io.LineIterator r0;
        java.io.BufferedReader $r1;

        r0 := @this: org.apache.commons.io.LineIterator;

        r0.<org.apache.commons.io.LineIterator: boolean finished> = 1;

        $r1 = r0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>($r1);

        r0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = null;

        return;
    }

    public void remove()
    {
        org.apache.commons.io.LineIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.io.LineIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Remove unsupported on LineIterator");

        throw $r1;
    }

    public static void closeQuietly(org.apache.commons.io.LineIterator)
    {
        org.apache.commons.io.LineIterator r0;

        r0 := @parameter0: org.apache.commons.io.LineIterator;

        if r0 == null goto label1;

        virtualinvoke r0.<org.apache.commons.io.LineIterator: void close()>();

     label1:
        return;
    }
}
