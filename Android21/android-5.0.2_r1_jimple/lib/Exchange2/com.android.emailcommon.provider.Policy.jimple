public final class com.android.emailcommon.provider.Policy extends com.android.emailcommon.provider.EmailContent implements com.android.emailcommon.provider.EmailContent$PolicyColumns, android.os.Parcelable
{
    public static final boolean DEBUG_POLICY;
    public static final java.lang.String TAG;
    public static final java.lang.String TABLE_NAME;
    public static android.net.Uri CONTENT_URI;
    private static final long DAYS_TO_MSEC;
    private static final long EXPIRATION_OFFSET_MSEC;
    public static final int PASSWORD_MODE_NONE;
    public static final int PASSWORD_MODE_SIMPLE;
    public static final int PASSWORD_MODE_STRONG;
    public static final char POLICY_STRING_DELIMITER;
    public int mPasswordMode;
    public int mPasswordMinLength;
    public int mPasswordMaxFails;
    public int mPasswordExpirationDays;
    public int mPasswordHistory;
    public int mPasswordComplexChars;
    public int mMaxScreenLockTime;
    public boolean mRequireRemoteWipe;
    public boolean mRequireEncryption;
    public boolean mRequireEncryptionExternal;
    public boolean mRequireManualSyncWhenRoaming;
    public boolean mDontAllowCamera;
    public boolean mDontAllowAttachments;
    public boolean mDontAllowHtml;
    public int mMaxAttachmentSize;
    public int mMaxTextTruncationSize;
    public int mMaxHtmlTruncationSize;
    public int mMaxEmailLookback;
    public int mMaxCalendarLookback;
    public boolean mPasswordRecoveryEnabled;
    public java.lang.String mProtocolPoliciesEnforced;
    public java.lang.String mProtocolPoliciesUnsupported;
    public static final int CONTENT_ID_COLUMN;
    public static final int CONTENT_PASSWORD_MODE_COLUMN;
    public static final int CONTENT_PASSWORD_MIN_LENGTH_COLUMN;
    public static final int CONTENT_PASSWORD_EXPIRATION_DAYS_COLUMN;
    public static final int CONTENT_PASSWORD_HISTORY_COLUMN;
    public static final int CONTENT_PASSWORD_COMPLEX_CHARS_COLUMN;
    public static final int CONTENT_PASSWORD_MAX_FAILS_COLUMN;
    public static final int CONTENT_MAX_SCREEN_LOCK_TIME_COLUMN;
    public static final int CONTENT_REQUIRE_REMOTE_WIPE_COLUMN;
    public static final int CONTENT_REQUIRE_ENCRYPTION_COLUMN;
    public static final int CONTENT_REQUIRE_ENCRYPTION_EXTERNAL_COLUMN;
    public static final int CONTENT_REQUIRE_MANUAL_SYNC_WHEN_ROAMING;
    public static final int CONTENT_DONT_ALLOW_CAMERA_COLUMN;
    public static final int CONTENT_DONT_ALLOW_ATTACHMENTS_COLUMN;
    public static final int CONTENT_DONT_ALLOW_HTML_COLUMN;
    public static final int CONTENT_MAX_ATTACHMENT_SIZE_COLUMN;
    public static final int CONTENT_MAX_TEXT_TRUNCATION_SIZE_COLUMN;
    public static final int CONTENT_MAX_HTML_TRUNCATION_SIZE_COLUMN;
    public static final int CONTENT_MAX_EMAIL_LOOKBACK_COLUMN;
    public static final int CONTENT_MAX_CALENDAR_LOOKBACK_COLUMN;
    public static final int CONTENT_PASSWORD_RECOVERY_ENABLED_COLUMN;
    public static final int CONTENT_PROTOCOL_POLICIES_ENFORCED_COLUMN;
    public static final int CONTENT_PROTOCOL_POLICIES_UNSUPPORTED_COLUMN;
    public static final java.lang.String[] CONTENT_PROJECTION;
    public static final com.android.emailcommon.provider.Policy NO_POLICY;
    private static final java.lang.String[] ATTACHMENT_RESET_PROJECTION;
    private static final int ATTACHMENT_RESET_PROJECTION_ID;
    private static final int ATTACHMENT_RESET_PROJECTION_SIZE;
    private static final int ATTACHMENT_RESET_PROJECTION_FLAGS;
    public static final android.os.Parcelable$Creator CREATOR;

    public static void initPolicy()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        android.net.Uri $r1, $r5;
        java.lang.String $r4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <com.android.emailcommon.provider.EmailContent: android.net.Uri CONTENT_URI>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/policy");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r4);

        <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI> = $r5;

        return;
    }

    public void <init>()
    {
        com.android.emailcommon.provider.Policy r0;
        android.net.Uri $r1;

        r0 := @this: com.android.emailcommon.provider.Policy;

        specialinvoke r0.<com.android.emailcommon.provider.EmailContent: void <init>()>();

        $r1 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        r0.<com.android.emailcommon.provider.Policy: android.net.Uri mBaseUri> = $r1;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMode> = 0;

        r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe> = 1;

        return;
    }

    public static com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context, long)
    {
        android.content.Context r0;
        long l0;
        com.android.emailcommon.provider.Policy $r1;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        $r1 = staticinvoke <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long,android.database.ContentObserver)>(r0, l0, null);

        return $r1;
    }

    public static com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context, long, android.database.ContentObserver)
    {
        android.content.Context r0;
        long l0;
        android.database.ContentObserver r1;
        java.lang.String[] $r2;
        android.net.Uri $r3;
        com.android.emailcommon.provider.EmailContent $r4;
        com.android.emailcommon.provider.Policy $r5;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        r1 := @parameter2: android.database.ContentObserver;

        $r3 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $r2 = <com.android.emailcommon.provider.Policy: java.lang.String[] CONTENT_PROJECTION>;

        $r4 = staticinvoke <com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent restoreContentWithId(android.content.Context,java.lang.Class,android.net.Uri,java.lang.String[],long,android.database.ContentObserver)>(r0, class "com/android/emailcommon/provider/Policy", $r3, $r2, l0, r1);

        $r5 = (com.android.emailcommon.provider.Policy) $r4;

        return $r5;
    }

    protected android.net.Uri getContentNotificationUri()
    {
        com.android.emailcommon.provider.Policy r0;
        android.net.Uri $r1;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $r1 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        return $r1;
    }

    public static long getAccountIdWithPolicyKey(android.content.Context, long)
    {
        android.content.Context r0;
        long l0, $l1;
        java.lang.String[] $r1, $r3;
        android.net.Uri $r2;
        java.lang.String $r4;
        java.lang.Long $r5, $r6;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        $r2 = <com.android.emailcommon.provider.Account: android.net.Uri CONTENT_URI>;

        $r3 = <com.android.emailcommon.provider.Account: java.lang.String[] ID_PROJECTION>;

        $r1 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r1[0] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r6 = staticinvoke <com.android.emailcommon.utility.Utility: java.lang.Long getFirstRowLong(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Long)>(r0, $r2, $r3, "policyKey=?", $r1, null, 0, $r5);

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public static java.util.ArrayList addPolicyStringToList(java.lang.String, java.util.ArrayList)
    {
        java.lang.String r0, $r2;
        java.util.ArrayList r1;
        int i0, i1, i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.ArrayList;

        if r0 == null goto label2;

        i0 = 0;

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i0 >= i1 goto label2;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(1, i0);

        if i2 <= i0 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        i0 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public android.net.Uri save(android.content.Context)
    {
        com.android.emailcommon.provider.Policy r0;
        android.content.Context r1;
        android.net.Uri $r2;

        r0 := @this: com.android.emailcommon.provider.Policy;

        r1 := @parameter0: android.content.Context;

        virtualinvoke r0.<com.android.emailcommon.provider.Policy: void normalize()>();

        $r2 = specialinvoke r0.<com.android.emailcommon.provider.EmailContent: android.net.Uri save(android.content.Context)>(r1);

        return $r2;
    }

    public static void setAttachmentFlagsForNewPolicy(android.content.Context, com.android.emailcommon.provider.Account, com.android.emailcommon.provider.Policy)
    {
        android.content.Context r0;
        com.android.emailcommon.provider.Account r1;
        com.android.emailcommon.provider.Policy r2;
        android.content.ContentResolver r3;
        android.database.Cursor r4;
        android.content.ContentValues r5, $r11;
        int i0, i1, i2, $i5, $i6, $i8, i9;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        long l3, $l4;
        java.lang.Throwable r6, $r15;
        java.lang.String[] $r7, $r9;
        android.net.Uri $r8, $r12, $r14;
        java.lang.String $r10;
        java.lang.Integer $r13;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        r2 := @parameter2: com.android.emailcommon.provider.Policy;

        r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = <com.android.emailcommon.provider.EmailContent$Attachment: android.net.Uri CONTENT_URI>;

        $r9 = <com.android.emailcommon.provider.Policy: java.lang.String[] ATTACHMENT_RESET_PROJECTION>;

        $r7 = newarray (java.lang.String)[1];

        $l4 = r1.<com.android.emailcommon.provider.Account: long mId>;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l4);

        $r7[0] = $r10;

        r4 = virtualinvoke r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r8, $r9, "accountKey=?", $r7, null);

        $r11 = new android.content.ContentValues;

        specialinvoke $r11.<android.content.ContentValues: void <init>()>();

        r5 = $r11;

     label01:
        $z2 = r2.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        if $z2 == 0 goto label02;

        $i8 = 0;

        goto label04;

     label02:
        $i5 = r2.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        if $i5 <= 0 goto label03;

        $i8 = r2.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        goto label04;

     label03:
        $i8 = 2147483647;

     label04:
        i0 = $i8;

     label05:
        $z3 = interfaceinvoke r4.<android.database.Cursor: boolean moveToNext()>();

        if $z3 == 0 goto label13;

        i1 = interfaceinvoke r4.<android.database.Cursor: int getInt(int)>(2);

        i2 = interfaceinvoke r4.<android.database.Cursor: int getInt(int)>(1);

        $i6 = i1 & 512;

        if $i6 == 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z0 = $z5;

        if i2 <= i0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        z1 = $z4;

        if z1 == z0 goto label12;

        if z1 == 0 goto label10;

        i9 = i1 | 512;

        goto label11;

     label10:
        i9 = i1 & -513;

     label11:
        l3 = interfaceinvoke r4.<android.database.Cursor: long getLong(int)>(0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        virtualinvoke r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("flags", $r13);

        $r14 = <com.android.emailcommon.provider.EmailContent$Attachment: android.net.Uri CONTENT_URI>;

        $r12 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r14, l3);

        virtualinvoke r3.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r12, r5, null, null);

     label12:
        goto label05;

     label13:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        goto label16;

     label14:
        $r15 := @caughtexception;

        r6 = $r15;

     label15:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        throw r6;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void normalize()
    {
        com.android.emailcommon.provider.Policy r0;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $i0 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i0 != 0 goto label1;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = 0;

        r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = 0;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = 0;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = 0;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = 0;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = 0;

        goto label3;

     label1:
        $i1 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i1 == 1 goto label2;

        $i3 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i3 == 2 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password mode");

        throw $r1;

     label2:
        $i2 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i2 != 1 goto label3;

        r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = 0;

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.emailcommon.provider.Policy r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @this: com.android.emailcommon.provider.Policy;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof com.android.emailcommon.provider.Policy;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r2 = (com.android.emailcommon.provider.Policy) r1;

        $z2 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        $z1 = r2.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        if $z2 == $z1 goto label02;

        return 0;

     label02:
        $z4 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        $z3 = r2.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        if $z4 == $z3 goto label03;

        return 0;

     label03:
        $z6 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        $z5 = r2.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        if $z6 == $z5 goto label04;

        return 0;

     label04:
        $i1 = r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i0 = r2.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        if $i1 == $i0 goto label05;

        return 0;

     label05:
        $i3 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        $i2 = r2.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i3 == $i2 goto label06;

        return 0;

     label06:
        $i5 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $i4 = r2.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        if $i5 == $i4 goto label07;

        return 0;

     label07:
        $i6 = r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        $i7 = r2.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        if $i6 == $i7 goto label08;

        return 0;

     label08:
        $i8 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        $i9 = r2.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        if $i8 == $i9 goto label09;

        return 0;

     label09:
        $i10 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        $i11 = r2.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        if $i10 == $i11 goto label10;

        return 0;

     label10:
        $i12 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        $i13 = r2.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i12 == $i13 goto label11;

        return 0;

     label11:
        $z7 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        $z8 = r2.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        if $z7 == $z8 goto label12;

        return 0;

     label12:
        $z9 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming>;

        $z10 = r2.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming>;

        if $z9 == $z10 goto label13;

        return 0;

     label13:
        $z11 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        $z12 = r2.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        if $z11 == $z12 goto label14;

        return 0;

     label14:
        $z13 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml>;

        $z14 = r2.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml>;

        if $z13 == $z14 goto label15;

        return 0;

     label15:
        $i17 = r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        $i16 = r2.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        if $i17 == $i16 goto label16;

        return 0;

     label16:
        $i15 = r0.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize>;

        $i14 = r2.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize>;

        if $i15 == $i14 goto label17;

        return 0;

     label17:
        $i21 = r0.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize>;

        $i20 = r2.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize>;

        if $i21 == $i20 goto label18;

        return 0;

     label18:
        $i19 = r0.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback>;

        $i18 = r2.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback>;

        if $i19 == $i18 goto label19;

        return 0;

     label19:
        $i23 = r0.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback>;

        $i22 = r2.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback>;

        if $i23 == $i22 goto label20;

        return 0;

     label20:
        $z16 = r0.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled>;

        $z15 = r2.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled>;

        if $z16 == $z15 goto label21;

        return 0;

     label21:
        $r5 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced>;

        $r4 = r2.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced>;

        $z17 = staticinvoke <com.android.emailcommon.utility.TextUtilities: boolean stringOrNullEquals(java.lang.String,java.lang.String)>($r5, $r4);

        if $z17 != 0 goto label22;

        return 0;

     label22:
        $r6 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        $r3 = r2.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        $z18 = staticinvoke <com.android.emailcommon.utility.TextUtilities: boolean stringOrNullEquals(java.lang.String,java.lang.String)>($r6, $r3);

        if $z18 != 0 goto label23;

        return 0;

     label23:
        return 1;
    }

    public int hashCode()
    {
        com.android.emailcommon.provider.Policy r0;
        byte b0, $b16, $b18, $b19;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, i20, i21, i22, i23, i24, i25, i26, i27, i28;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $z0 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        if $z0 == 0 goto label1;

        $b18 = 1;

        goto label2;

     label1:
        $b18 = 0;

     label2:
        b0 = $b18;

        $z1 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        if $z1 == 0 goto label3;

        $b19 = 1;

        goto label4;

     label3:
        $b19 = 0;

     label4:
        $i1 = $b19 << 1;

        i20 = b0 + $i1;

        $z2 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        if $z2 == 0 goto label5;

        $b16 = 1;

        goto label6;

     label5:
        $b16 = 0;

     label6:
        $i2 = $b16 << 2;

        i21 = i20 + $i2;

        $i3 = r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i4 = $i3 << 3;

        i22 = i21 + $i4;

        $i5 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        $i6 = $i5 << 6;

        i23 = i22 + $i6;

        $i7 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $i8 = $i7 << 12;

        i24 = i23 + $i8;

        $i9 = r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        $i10 = $i9 << 15;

        i25 = i24 + $i10;

        $i11 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        $i13 = $i11 << 18;

        i26 = i25 + $i13;

        $i12 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        $i15 = $i12 << 22;

        i27 = i26 + $i15;

        $i14 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        $i17 = $i14 << 26;

        i28 = i27 + $i17;

        return i28;
    }

    public void restore(android.database.Cursor)
    {
        com.android.emailcommon.provider.Policy r0;
        android.database.Cursor r1;
        android.net.Uri $r2;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.android.emailcommon.provider.Policy;

        r1 := @parameter0: android.database.Cursor;

        $r2 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        r0.<com.android.emailcommon.provider.Policy: android.net.Uri mBaseUri> = $r2;

        $l0 = interfaceinvoke r1.<android.database.Cursor: long getLong(int)>(0);

        r0.<com.android.emailcommon.provider.Policy: long mId> = $l0;

        $i1 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(1);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMode> = $i1;

        $i2 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(2);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = $i2;

        $i3 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(6);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = $i3;

        $i4 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(4);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = $i4;

        $i5 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(3);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = $i5;

        $i6 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(5);

        r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = $i6;

        $i7 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(7);

        r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = $i7;

        $i8 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(8);

        if $i8 != 1 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe> = $z7;

        $i9 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(9);

        if $i9 != 1 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption> = $z6;

        $i10 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(10);

        if $i10 != 1 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal> = $z4;

        $i11 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(11);

        if $i11 != 1 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming> = $z5;

        $i12 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(12);

        if $i12 != 1 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera> = $z2;

        $i14 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(13);

        if $i14 != 1 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments> = $z3;

        $i13 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(14);

        if $i13 != 1 goto label13;

        $z0 = 1;

        goto label14;

     label13:
        $z0 = 0;

     label14:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml> = $z0;

        $i16 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(15);

        r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize> = $i16;

        $i15 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(16);

        r0.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize> = $i15;

        $i18 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(17);

        r0.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize> = $i18;

        $i17 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(18);

        r0.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback> = $i17;

        $i20 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(19);

        r0.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback> = $i20;

        $i19 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(20);

        if $i19 != 1 goto label15;

        $z1 = 1;

        goto label16;

     label15:
        $z1 = 0;

     label16:
        r0.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled> = $z1;

        $r4 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(21);

        r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced> = $r4;

        $r3 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(22);

        r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported> = $r3;

        return;
    }

    public android.content.ContentValues toContentValues()
    {
        com.android.emailcommon.provider.Policy r0;
        android.content.ContentValues r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r16, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Boolean $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r23;
        java.lang.String $r22, $r24;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        r1 = $r2;

        $i0 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordMode", $r3);

        $i1 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordMinLength", $r4);

        $i2 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordMaxFails", $r5);

        $i3 = r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordHistory", $r6);

        $i4 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordExpirationDays", $r7);

        $i5 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("passwordComplexChars", $r8);

        $i6 = r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxScreenLockTime", $r9);

        $z0 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("requireRemoteWipe", $r10);

        $z1 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("requireEncryption", $r11);

        $z2 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("requireEncryptionExternal", $r13);

        $z3 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming>;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("requireManualSyncRoaming", $r12);

        $z5 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("dontAllowCamera", $r14);

        $z4 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("dontAllowAttachments", $r15);

        $z6 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("dontAllowHtml", $r17);

        $i7 = r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxAttachmentSize", $r16);

        $i9 = r0.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxTextTruncationSize", $r18);

        $i8 = r0.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxHTMLTruncationSize", $r19);

        $i10 = r0.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxEmailLookback", $r21);

        $i11 = r0.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("maxCalendarLookback", $r20);

        $z7 = r0.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled>;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("passwordRecoveryEnabled", $r23);

        $r22 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced>;

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("protocolPoliciesEnforced", $r22);

        $r24 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        virtualinvoke r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("protocolPoliciesUnsupported", $r24);

        return r1;
    }

    public int getDPManagerPasswordQuality()
    {
        com.android.emailcommon.provider.Policy r0;
        int $i0, $i1;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $i0 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        return 131072;

     label2:
        $i1 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i1 != 0 goto label3;

        return 327680;

     label3:
        return 393216;

     label4:
        return 0;
    }

    public long getDPManagerPasswordExpirationTimeout()
    {
        com.android.emailcommon.provider.Policy r0;
        long l0, $l2;
        int $i1;
        byte $b3;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $i1 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $l2 = (long) $i1;

        l0 = $l2 * 86400000L;

        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label1;

        l0 = l0 + 120000L;

     label1:
        return l0;
    }

    private static void appendPolicy(java.lang.StringBuilder, java.lang.String, int)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        return;
    }

    public java.lang.String toString()
    {
        com.android.emailcommon.provider.Policy r0, $r3;
        java.lang.StringBuilder r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r5;
        byte $b10;

        r0 := @this: com.android.emailcommon.provider.Policy;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        r1 = $r2;

        $r3 = <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy NO_POLICY>;

        $z0 = virtualinvoke r0.<com.android.emailcommon.provider.Policy: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No policies]");

        goto label12;

     label01:
        $i0 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i0 != 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pwd none ");

        goto label05;

     label02:
        $i1 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i1 != 2 goto label03;

        $b10 = 1;

        goto label04;

     label03:
        $b10 = 0;

     label04:
        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "Pwd strong", $b10);

        $i2 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "len", $i2);

        $i3 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "cmpx", $i3);

        $i4 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "expy", $i4);

        $i5 = r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "hist", $i5);

        $i6 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "fail", $i6);

        $i7 = r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "idle", $i7);

     label05:
        $z1 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        if $z1 == 0 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encrypt ");

     label06:
        $z2 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        if $z2 == 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encryptsd ");

     label07:
        $z3 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        if $z3 == 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nocamera ");

     label08:
        $z5 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        if $z5 == 0 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noatts ");

     label09:
        $z4 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming>;

        if $z4 == 0 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nopushroam ");

     label10:
        $i8 = r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        if $i8 <= 0 goto label11;

        $i9 = r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        staticinvoke <com.android.emailcommon.provider.Policy: void appendPolicy(java.lang.StringBuilder,java.lang.String,int)>(r1, "attmax", $i9);

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label12:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int describeContents()
    {
        com.android.emailcommon.provider.Policy r0;

        r0 := @this: com.android.emailcommon.provider.Policy;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        com.android.emailcommon.provider.Policy r0;
        android.os.Parcel r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long $l1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r2, $r3;
        byte $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21;

        r0 := @this: com.android.emailcommon.provider.Policy;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $l1 = r0.<com.android.emailcommon.provider.Policy: long mId>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        $i2 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $i5 = r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $i6 = r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $i7 = r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $i8 = r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i8);

        $z0 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        if $z0 == 0 goto label01;

        $b21 = 1;

        goto label02;

     label01:
        $b21 = 0;

     label02:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b21);

        $z1 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        if $z1 == 0 goto label03;

        $b20 = 1;

        goto label04;

     label03:
        $b20 = 0;

     label04:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b20);

        $z2 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal>;

        if $z2 == 0 goto label05;

        $b18 = 1;

        goto label06;

     label05:
        $b18 = 0;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b18);

        $z3 = r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming>;

        if $z3 == 0 goto label07;

        $b19 = 1;

        goto label08;

     label07:
        $b19 = 0;

     label08:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b19);

        $z4 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        if $z4 == 0 goto label09;

        $b16 = 1;

        goto label10;

     label09:
        $b16 = 0;

     label10:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b16);

        $z6 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        if $z6 == 0 goto label11;

        $b17 = 1;

        goto label12;

     label11:
        $b17 = 0;

     label12:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b17);

        $z5 = r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml>;

        if $z5 == 0 goto label13;

        $b14 = 1;

        goto label14;

     label13:
        $b14 = 0;

     label14:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b14);

        $i10 = r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i10);

        $i9 = r0.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i9);

        $i12 = r0.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i12);

        $i11 = r0.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i11);

        $i13 = r0.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i13);

        $z7 = r0.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled>;

        if $z7 == 0 goto label15;

        $b15 = 1;

        goto label16;

     label15:
        $b15 = 0;

     label16:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b15);

        $r3 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $r2 = r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        return;
    }

    public void <init>(android.os.Parcel)
    {
        com.android.emailcommon.provider.Policy r0;
        android.os.Parcel r1;
        android.net.Uri $r2;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.android.emailcommon.provider.Policy;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<com.android.emailcommon.provider.EmailContent: void <init>()>();

        $r2 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        r0.<com.android.emailcommon.provider.Policy: android.net.Uri mBaseUri> = $r2;

        $l0 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<com.android.emailcommon.provider.Policy: long mId> = $l0;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMode> = $i1;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = $i2;

        $i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = $i3;

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = $i4;

        $i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = $i5;

        $i6 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = $i6;

        $i7 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = $i7;

        $i8 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i8 != 1 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe> = $z7;

        $i9 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i9 != 1 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption> = $z6;

        $i10 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i10 != 1 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal> = $z4;

        $i11 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i11 != 1 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        r0.<com.android.emailcommon.provider.Policy: boolean mRequireManualSyncWhenRoaming> = $z5;

        $i12 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i12 != 1 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera> = $z2;

        $i14 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i14 != 1 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments> = $z3;

        $i13 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i13 != 1 goto label13;

        $z0 = 1;

        goto label14;

     label13:
        $z0 = 0;

     label14:
        r0.<com.android.emailcommon.provider.Policy: boolean mDontAllowHtml> = $z0;

        $i16 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize> = $i16;

        $i15 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxTextTruncationSize> = $i15;

        $i18 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxHtmlTruncationSize> = $i18;

        $i17 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxEmailLookback> = $i17;

        $i20 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.emailcommon.provider.Policy: int mMaxCalendarLookback> = $i20;

        $i19 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i19 != 1 goto label15;

        $z1 = 1;

        goto label16;

     label15:
        $z1 = 0;

     label16:
        r0.<com.android.emailcommon.provider.Policy: boolean mPasswordRecoveryEnabled> = $z1;

        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesEnforced> = $r4;

        $r3 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported> = $r3;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        com.android.emailcommon.provider.Policy $r1;
        com.android.emailcommon.provider.Policy$1 $r3;

        <com.android.emailcommon.provider.Policy: int ATTACHMENT_RESET_PROJECTION_FLAGS> = 2;

        <com.android.emailcommon.provider.Policy: int ATTACHMENT_RESET_PROJECTION_SIZE> = 1;

        <com.android.emailcommon.provider.Policy: int ATTACHMENT_RESET_PROJECTION_ID> = 0;

        <com.android.emailcommon.provider.Policy: int CONTENT_PROTOCOL_POLICIES_UNSUPPORTED_COLUMN> = 22;

        <com.android.emailcommon.provider.Policy: int CONTENT_PROTOCOL_POLICIES_ENFORCED_COLUMN> = 21;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_RECOVERY_ENABLED_COLUMN> = 20;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_CALENDAR_LOOKBACK_COLUMN> = 19;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_EMAIL_LOOKBACK_COLUMN> = 18;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_HTML_TRUNCATION_SIZE_COLUMN> = 17;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_TEXT_TRUNCATION_SIZE_COLUMN> = 16;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_ATTACHMENT_SIZE_COLUMN> = 15;

        <com.android.emailcommon.provider.Policy: int CONTENT_DONT_ALLOW_HTML_COLUMN> = 14;

        <com.android.emailcommon.provider.Policy: int CONTENT_DONT_ALLOW_ATTACHMENTS_COLUMN> = 13;

        <com.android.emailcommon.provider.Policy: int CONTENT_DONT_ALLOW_CAMERA_COLUMN> = 12;

        <com.android.emailcommon.provider.Policy: int CONTENT_REQUIRE_MANUAL_SYNC_WHEN_ROAMING> = 11;

        <com.android.emailcommon.provider.Policy: int CONTENT_REQUIRE_ENCRYPTION_EXTERNAL_COLUMN> = 10;

        <com.android.emailcommon.provider.Policy: int CONTENT_REQUIRE_ENCRYPTION_COLUMN> = 9;

        <com.android.emailcommon.provider.Policy: int CONTENT_REQUIRE_REMOTE_WIPE_COLUMN> = 8;

        <com.android.emailcommon.provider.Policy: int CONTENT_MAX_SCREEN_LOCK_TIME_COLUMN> = 7;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_MAX_FAILS_COLUMN> = 6;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_COMPLEX_CHARS_COLUMN> = 5;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_HISTORY_COLUMN> = 4;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_EXPIRATION_DAYS_COLUMN> = 3;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_MIN_LENGTH_COLUMN> = 2;

        <com.android.emailcommon.provider.Policy: int CONTENT_PASSWORD_MODE_COLUMN> = 1;

        <com.android.emailcommon.provider.Policy: int CONTENT_ID_COLUMN> = 0;

        <com.android.emailcommon.provider.Policy: char POLICY_STRING_DELIMITER> = 1;

        <com.android.emailcommon.provider.Policy: int PASSWORD_MODE_STRONG> = 2;

        <com.android.emailcommon.provider.Policy: int PASSWORD_MODE_SIMPLE> = 1;

        <com.android.emailcommon.provider.Policy: int PASSWORD_MODE_NONE> = 0;

        <com.android.emailcommon.provider.Policy: long EXPIRATION_OFFSET_MSEC> = 120000L;

        <com.android.emailcommon.provider.Policy: long DAYS_TO_MSEC> = 86400000L;

        <com.android.emailcommon.provider.Policy: java.lang.String TABLE_NAME> = "Policy";

        <com.android.emailcommon.provider.Policy: java.lang.String TAG> = "Email/Policy";

        <com.android.emailcommon.provider.Policy: boolean DEBUG_POLICY> = 0;

        $r0 = newarray (java.lang.String)[23];

        $r0[0] = "_id";

        $r0[1] = "passwordMode";

        $r0[2] = "passwordMinLength";

        $r0[3] = "passwordExpirationDays";

        $r0[4] = "passwordHistory";

        $r0[5] = "passwordComplexChars";

        $r0[6] = "passwordMaxFails";

        $r0[7] = "maxScreenLockTime";

        $r0[8] = "requireRemoteWipe";

        $r0[9] = "requireEncryption";

        $r0[10] = "requireEncryptionExternal";

        $r0[11] = "requireManualSyncRoaming";

        $r0[12] = "dontAllowCamera";

        $r0[13] = "dontAllowAttachments";

        $r0[14] = "dontAllowHtml";

        $r0[15] = "maxAttachmentSize";

        $r0[16] = "maxTextTruncationSize";

        $r0[17] = "maxHTMLTruncationSize";

        $r0[18] = "maxEmailLookback";

        $r0[19] = "maxCalendarLookback";

        $r0[20] = "passwordRecoveryEnabled";

        $r0[21] = "protocolPoliciesEnforced";

        $r0[22] = "protocolPoliciesUnsupported";

        <com.android.emailcommon.provider.Policy: java.lang.String[] CONTENT_PROJECTION> = $r0;

        $r1 = new com.android.emailcommon.provider.Policy;

        specialinvoke $r1.<com.android.emailcommon.provider.Policy: void <init>()>();

        <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy NO_POLICY> = $r1;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "_id";

        $r2[1] = "size";

        $r2[2] = "flags";

        <com.android.emailcommon.provider.Policy: java.lang.String[] ATTACHMENT_RESET_PROJECTION> = $r2;

        $r3 = new com.android.emailcommon.provider.Policy$1;

        specialinvoke $r3.<com.android.emailcommon.provider.Policy$1: void <init>()>();

        <com.android.emailcommon.provider.Policy: android.os.Parcelable$Creator CREATOR> = $r3;

        return;
    }
}
