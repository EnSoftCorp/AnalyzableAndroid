public class org.apache.james.mime4j.codec.EncoderUtil extends java.lang.Object
{
    static final byte[] BASE64_TABLE;
    private static final byte BASE64_PAD;
    private static final java.util.BitSet Q_REGULAR_CHARS;
    private static final java.util.BitSet Q_RESTRICTED_CHARS;
    private static final int MAX_USED_CHARACTERS;
    private static final java.lang.String ENC_WORD_PREFIX;
    private static final java.lang.String ENC_WORD_SUFFIX;
    private static final int ENCODED_WORD_MAX_LENGTH;
    private static final java.util.BitSet TOKEN_CHARS;
    private static final java.util.BitSet ATEXT_CHARS;

    private static java.util.BitSet initChars(java.lang.String)
    {
        java.lang.String r0;
        java.util.BitSet r1, $r2;
        char c0;
        int $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(128);

        r1 = $r2;

        c0 = 33;

     label1:
        if c0 >= 127 goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c0);

        if $i1 != -1 goto label2;

        virtualinvoke r1.<java.util.BitSet: void set(int)>(c0);

     label2:
        $i2 = c0 + 1;

        c0 = (char) $i2;

        goto label1;

     label3:
        return r1;
    }

    private void <init>()
    {
        org.apache.james.mime4j.codec.EncoderUtil r0;

        r0 := @this: org.apache.james.mime4j.codec.EncoderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encodeAddressDisplayName(java.lang.String)
    {
        java.lang.String r0, $r1, $r3;
        boolean $z0, $z1;
        org.apache.james.mime4j.codec.EncoderUtil$Usage $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isAtomPhrase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>(r0, 0);

        if $z1 == 0 goto label2;

        $r2 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage WORD_ENTITY>;

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r0, $r2);

        return $r3;

     label2:
        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String encodeAddressLocalPart(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isDotAtomText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String encodeHeaderParameter(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6, $r8, $r13, r14;
        java.util.Locale $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale US>;

        r14 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String encodeIfNecessary(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>(r0, i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)>(r0, r1, i0);

        return $r2;

     label1:
        return r0;
    }

    public static boolean hasToBeEncoded(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, i1, i2, $i4;
        char c3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label01:
        if i0 < 0 goto label02;

        if i0 <= 50 goto label03;

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label03:
        i1 = i0;

        i2 = 0;

     label04:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i4 goto label10;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        if c3 == 9 goto label05;

        if c3 != 32 goto label06;

     label05:
        i1 = 0;

        goto label09;

     label06:
        i1 = i1 + 1;

        if i1 <= 77 goto label07;

        return 1;

     label07:
        if c3 < 32 goto label08;

        if c3 < 127 goto label09;

     label08:
        return 1;

     label09:
        i2 = i2 + 1;

        goto label04;

     label10:
        return 0;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>(r0, r1, 0, null, null);

        return $r2;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int)
    {
        java.lang.String r0, $r2;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>(r0, r1, i0, null, null);

        return $r2;
    }

    public static java.lang.String encodeEncodedWord(java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, org.apache.james.mime4j.codec.EncoderUtil$Encoding)
    {
        java.lang.String r0, r4, r6, $r8, $r15, $r19, r22;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1;
        int i0;
        java.nio.charset.Charset r2;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding r3, $r9;
        byte[] r5;
        java.lang.IllegalArgumentException $r7, $r20, $r21;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter2: int;

        r2 := @parameter3: java.nio.charset.Charset;

        r3 := @parameter4: org.apache.james.mime4j.codec.EncoderUtil$Encoding;

        if r0 != null goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r21;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 50 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label3:
        if r2 != null goto label4;

        r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.nio.charset.Charset determineCharset(java.lang.String)>(r0);

     label4:
        $r8 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        r4 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toMimeCharset(java.lang.String)>($r8);

        if r4 != null goto label5;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported charset");

        throw $r20;

     label5:
        r5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r0, r2);

        if r3 != null goto label6;

        r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r5, r1);

     label6:
        $r9 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        if r3 != $r9 goto label7;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?B?");

        r6 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>(r6, r0, i0, r2, r5);

        return $r19;

     label7:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?Q?");

        r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>(r22, r0, r1, i0, r2, r5);

        return $r15;
    }

    public static java.lang.String encodeB(byte[])
    {
        byte[] r0, $r4, $r6, $r10, $r12, $r13, $r18, $r19, $r20, $r24;
        java.lang.StringBuilder r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i8, $i9, $i12, $i13, $i19, $i20, $i22, $i23, $i24, $i25, $i30, $i31, $i32, $i36, $i39, $i40, $i41, $i43, $i44, $i47, $i48, $i49, $i52, $i57, $i59, i61, i62;
        java.lang.String $r3;
        byte $b6, $b10, $b14, $b17, $b18, $b26, $b28, $b34, $b35, $b38, $b46, $b50, $b53, $b55, $b60;
        short $s7, $s16, $s21, $s37, $s42, $s45;
        char $c11, $c15, $c27, $c29, $c33, $c51, $c54, $c56, $c58;

        r0 := @parameter0: byte[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i0 = 0;

        i1 = lengthof r0;

     label1:
        $i3 = i1 - 2;

        if i0 >= $i3 goto label2;

        $b38 = r0[i0];

        $s37 = $b38 & 255;

        $i40 = $s37 << 16;

        $i36 = i0 + 1;

        $b35 = r0[$i36];

        $s42 = $b35 & 255;

        $i41 = $s42 << 8;

        $i44 = $i40 | $i41;

        $i39 = i0 + 2;

        $b46 = r0[$i39];

        $s45 = $b46 & 255;

        i2 = $i44 | $s45;

        $r19 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i43 = i2 >> 18;

        $i49 = $i43 & 63;

        $b50 = $r19[$i49];

        $c51 = (char) $b50;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c51);

        $r18 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i47 = i2 >> 12;

        $i48 = $i47 & 63;

        $b55 = $r18[$i48];

        $c56 = (char) $b55;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c56);

        $r20 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i57 = i2 >> 6;

        $i52 = $i57 & 63;

        $b53 = $r20[$i52];

        $c54 = (char) $b53;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c54);

        $r24 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i59 = i2 & 63;

        $b60 = $r24[$i59];

        $c58 = (char) $b60;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c58);

        i0 = i0 + 3;

        goto label1;

     label2:
        $i4 = i1 - 2;

        if i0 != $i4 goto label3;

        $b17 = r0[i0];

        $s16 = $b17 & 255;

        $i23 = $s16 << 16;

        $i19 = i0 + 1;

        $b18 = r0[$i19];

        $s21 = $b18 & 255;

        $i20 = $s21 << 8;

        i61 = $i23 | $i20;

        $r10 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i24 = i61 >> 18;

        $i22 = $i24 & 63;

        $b26 = $r10[$i22];

        $c27 = (char) $b26;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c27);

        $r12 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i25 = i61 >> 12;

        $i30 = $i25 & 63;

        $b28 = $r12[$i30];

        $c29 = (char) $b28;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c29);

        $r13 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i32 = i61 >> 6;

        $i31 = $i32 & 63;

        $b34 = $r13[$i31];

        $c33 = (char) $b34;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c33);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        goto label4;

     label3:
        $i5 = i1 - 1;

        if i0 != $i5 goto label4;

        $b6 = r0[i0];

        $s7 = $b6 & 255;

        i62 = $s7 << 16;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i8 = i62 >> 18;

        $i9 = $i8 & 63;

        $b10 = $r4[$i9];

        $c11 = (char) $b10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        $r6 = <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE>;

        $i13 = i62 >> 12;

        $i12 = $i13 & 63;

        $b14 = $r6[$i12];

        $c15 = (char) $b14;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String encodeQ(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1, $r4;
        java.util.BitSet r2, $r12;
        java.lang.StringBuilder r3, $r5;
        int i0, i1;
        short s2, $s5, $s8;
        java.lang.String $r6;
        byte $b3;
        boolean $z0;
        char $c4, $c6, $c7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r1 != $r4 goto label1;

        $r12 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label2;

     label1:
        $r12 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label2:
        r2 = $r12;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r3 = $r5;

        i0 = lengthof r0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label7;

        $b3 = r0[i1];

        s2 = $b3 & 255;

        if s2 != 32 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        goto label6;

     label4:
        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>(s2);

        if $z0 != 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $s5 = s2 >>> 4;

        $c6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>($s5);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $s8 = s2 & 15;

        $c7 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>($s8);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        goto label6;

     label5:
        $c4 = (char) s2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static boolean isToken(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char c2;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS>;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>(c2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static boolean isAtomPhrase(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        char c2;
        java.util.BitSet $r1;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $z1 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>(c2);

        if $z1 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        $z2 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c2);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return z0;
    }

    private static boolean isDotAtomText(java.lang.String)
    {
        java.lang.String r0;
        char c0, c3;
        int i1, i2, $i4;
        java.util.BitSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c0 = 46;

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        if i2 >= i1 goto label6;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        if c3 != 46 goto label4;

        if c0 == 46 goto label3;

        $i4 = i1 - 1;

        if i2 != $i4 goto label5;

     label3:
        return 0;

     label4:
        $r1 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS>;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>(c3);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        c0 = c3;

        i2 = i2 + 1;

        goto label2;

     label6:
        return 1;
    }

    private static java.lang.String quote(java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\\\\\"]", "\\\\$0");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String encodeB(java.lang.String, java.lang.String, int, java.nio.charset.Charset, byte[])
    {
        java.lang.String r0, r1, r4, r6, r7, r9, $r10, $r17, $r19, $r20;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.charset.Charset r2;
        byte[] r3, r5, r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r21;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.nio.charset.Charset;

        r3 := @parameter4: byte[];

        i1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int bEncodedLength(byte[])>(r3);

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 + i1;

        $r10 = "?=";

        $i7 = virtualinvoke $r10.<java.lang.String: int length()>();

        i2 = $i5 + $i7;

        $i6 = 75 - i0;

        if i2 > $i6 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(byte[])>(r3);

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label1:
        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

        $i8 = $i9 / 2;

        i3 = virtualinvoke r1.<java.lang.String: int offsetByCodePoints(int,int)>($i8, -1);

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        r5 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r4, r2);

        r6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>(r0, r4, i0, r2, r5);

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i3);

        r8 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r7, r2);

        r9 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>(r0, r7, 0, r2, r8);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    private static int bEncodedLength(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 + 2;

        $i2 = $i1 / 3;

        $i3 = $i2 * 4;

        return $i3;
    }

    private static java.lang.String encodeQ(java.lang.String, java.lang.String, org.apache.james.mime4j.codec.EncoderUtil$Usage, int, java.nio.charset.Charset, byte[])
    {
        java.lang.String r0, r1, r5, r7, r8, r10, $r11, $r14, $r21, $r22;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.charset.Charset r3;
        byte[] r4, r6, r9;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        i0 := @parameter3: int;

        r3 := @parameter4: java.nio.charset.Charset;

        r4 := @parameter5: byte[];

        i1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: int qEncodedLength(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r4, r2);

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i4 + i1;

        $r11 = "?=";

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        i2 = $i6 + $i5;

        $i8 = 75 - i0;

        if i2 > $i8 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>(r4, r2);

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?=");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label1:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        $i9 = $i7 / 2;

        i3 = virtualinvoke r1.<java.lang.String: int offsetByCodePoints(int,int)>($i9, -1);

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        r6 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r5, r3);

        r7 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>(r0, r5, r2, i0, r3, r6);

        r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i3);

        r9 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>(r8, r3);

        r10 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>(r0, r8, r2, 0, r3, r9);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    private static int qEncodedLength(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1, $r3;
        java.util.BitSet r2, $r4;
        int i0, i1, $i3;
        short s2;
        byte $b4;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $r3 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r1 != $r3 goto label1;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label2;

     label1:
        $r4 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label2:
        r2 = $r4;

        i0 = 0;

        i1 = 0;

     label3:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label7;

        $b4 = r0[i1];

        s2 = $b4 & 255;

        if s2 != 32 goto label4;

        i0 = i0 + 1;

        goto label6;

     label4:
        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>(s2);

        if $z0 != 0 goto label5;

        i0 = i0 + 3;

        goto label6;

     label5:
        i0 = i0 + 1;

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        return i0;
    }

    private static byte[] encode(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String r0;
        java.nio.charset.Charset r1;
        java.nio.ByteBuffer r2;
        byte[] r3;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 = virtualinvoke r1.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>(r0);

        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        r3 = newarray (byte)[$i0];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        return r3;
    }

    private static java.nio.charset.Charset determineCharset(java.lang.String)
    {
        java.lang.String r0;
        boolean z0;
        int i0, i1;
        char c2;
        java.nio.charset.Charset $r1, $r2;

        r0 := @parameter0: java.lang.String;

        z0 = 1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 <= 255 goto label2;

        $r2 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset UTF_8>;

        return $r2;

     label2:
        if c2 <= 127 goto label3;

        z0 = 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;

        goto label6;

     label5:
        $r1 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;

     label6:
        return $r1;
    }

    private static org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[], org.apache.james.mime4j.codec.EncoderUtil$Usage)
    {
        byte[] r0;
        org.apache.james.mime4j.codec.EncoderUtil$Usage r1, $r3;
        java.util.BitSet r2, $r5;
        int i0, i1, $i3, $i4, $i5, $i6, i8;
        short s2;
        org.apache.james.mime4j.codec.EncoderUtil$Encoding $r4, $r6;
        byte $b7;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.james.mime4j.codec.EncoderUtil$Usage;

        $i3 = lengthof r0;

        if $i3 != 0 goto label1;

        $r6 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

        return $r6;

     label1:
        $r3 = <org.apache.james.mime4j.codec.EncoderUtil$Usage: org.apache.james.mime4j.codec.EncoderUtil$Usage TEXT_TOKEN>;

        if r1 != $r3 goto label2;

        $r5 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS>;

        goto label3;

     label2:
        $r5 = <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS>;

     label3:
        r2 = $r5;

        i0 = 0;

        i1 = 0;

     label4:
        $i4 = lengthof r0;

        if i1 >= $i4 goto label6;

        $b7 = r0[i1];

        s2 = $b7 & 255;

        if s2 == 32 goto label5;

        $z0 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>(s2);

        if $z0 != 0 goto label5;

        i0 = i0 + 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $i6 = i0 * 100;

        $i5 = lengthof r0;

        i8 = $i6 / $i5;

        if i8 <= 30 goto label7;

        $r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding B>;

        goto label8;

     label7:
        $r4 = <org.apache.james.mime4j.codec.EncoderUtil$Encoding: org.apache.james.mime4j.codec.EncoderUtil$Encoding Q>;

     label8:
        return $r4;
    }

    private static char hexDigit(int)
    {
        int i0, $i1, $i2, $i4;
        char $c3;

        i0 := @parameter0: int;

        if i0 >= 10 goto label1;

        $i4 = i0 + 48;

        $c3 = (char) $i4;

        goto label2;

     label1:
        $i1 = i0 - 10;

        $i2 = $i1 + 65;

        $c3 = (char) $i2;

     label2:
        return $c3;
    }

    static void <clinit>()
    {
        byte[] $r0;
        java.util.BitSet $r1, $r2, $r3, $r4;

        <org.apache.james.mime4j.codec.EncoderUtil: int ENCODED_WORD_MAX_LENGTH> = 75;

        <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String ENC_WORD_SUFFIX> = "?=";

        <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String ENC_WORD_PREFIX> = "=?";

        <org.apache.james.mime4j.codec.EncoderUtil: int MAX_USED_CHARACTERS> = 50;

        <org.apache.james.mime4j.codec.EncoderUtil: byte BASE64_PAD> = 61;

        $r0 = newarray (byte)[64];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 97;

        $r0[27] = 98;

        $r0[28] = 99;

        $r0[29] = 100;

        $r0[30] = 101;

        $r0[31] = 102;

        $r0[32] = 103;

        $r0[33] = 104;

        $r0[34] = 105;

        $r0[35] = 106;

        $r0[36] = 107;

        $r0[37] = 108;

        $r0[38] = 109;

        $r0[39] = 110;

        $r0[40] = 111;

        $r0[41] = 112;

        $r0[42] = 113;

        $r0[43] = 114;

        $r0[44] = 115;

        $r0[45] = 116;

        $r0[46] = 117;

        $r0[47] = 118;

        $r0[48] = 119;

        $r0[49] = 120;

        $r0[50] = 121;

        $r0[51] = 122;

        $r0[52] = 48;

        $r0[53] = 49;

        $r0[54] = 50;

        $r0[55] = 51;

        $r0[56] = 52;

        $r0[57] = 53;

        $r0[58] = 54;

        $r0[59] = 55;

        $r0[60] = 56;

        $r0[61] = 57;

        $r0[62] = 43;

        $r0[63] = 47;

        <org.apache.james.mime4j.codec.EncoderUtil: byte[] BASE64_TABLE> = $r0;

        $r1 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_REGULAR_CHARS> = $r1;

        $r2 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?\"#$%&\'(),.:;<>@[\\]^`{|}~");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet Q_RESTRICTED_CHARS> = $r2;

        $r3 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@,;:\\\"/[]?=");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet TOKEN_CHARS> = $r3;

        $r4 = staticinvoke <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>@.,;:\\\"[]");

        <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet ATEXT_CHARS> = $r4;

        return;
    }
}
