public class org.apache.commons.io.HexDump extends java.lang.Object
{
    public static final java.lang.String EOL;
    private static final char[] _hexcodes;
    private static final int[] _shifts;

    public void <init>()
    {
        org.apache.commons.io.HexDump r0;

        r0 := @this: org.apache.commons.io.HexDump;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        byte[] r0, $r15;
        long l0, l2, $l8, $l12;
        java.io.OutputStream r1;
        int i1, i3, i4, i5, $i6, $i7, $i9, $i10, $i11, $i13, $i17, $i19, i21;
        java.lang.StringBuffer r2, $r10, $r12;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9, $r14, $r16;
        byte $b14, $b15, $b18, $b20;
        char $c16;
        java.lang.IllegalArgumentException $r22;

        r0 := @parameter0: byte[];

        l0 := @parameter1: long;

        r1 := @parameter2: java.io.OutputStream;

        i1 := @parameter3: int;

        if i1 < 0 goto label01;

        $i7 = lengthof r0;

        if i1 < $i7 goto label02;

     label01:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal index: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into array of length ");

        $i6 = lengthof r0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label02:
        if r1 != null goto label03;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream");

        throw $r22;

     label03:
        $l8 = (long) i1;

        l2 = l0 + $l8;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>(74);

        r2 = $r10;

        i3 = i1;

     label04:
        $i10 = lengthof r0;

        if i3 >= $i10 goto label14;

        $i9 = lengthof r0;

        i4 = $i9 - i3;

        if i4 <= 16 goto label05;

        i4 = 16;

     label05:
        $r12 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(java.lang.StringBuffer,long)>(r2, l2);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i5 = 0;

     label06:
        if i5 >= 16 goto label09;

        if i5 >= i4 goto label07;

        $i19 = i5 + i3;

        $b20 = r0[$i19];

        staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuffer dump(java.lang.StringBuffer,byte)>(r2, $b20);

        goto label08;

     label07:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

     label08:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i5 = i5 + 1;

        goto label06;

     label09:
        i21 = 0;

     label10:
        if i21 >= i4 goto label13;

        $i11 = i21 + i3;

        $b15 = r0[$i11];

        if $b15 < 32 goto label11;

        $i13 = i21 + i3;

        $b14 = r0[$i13];

        if $b14 >= 127 goto label11;

        $i17 = i21 + i3;

        $b18 = r0[$i17];

        $c16 = (char) $b18;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);

        goto label12;

     label11:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label12:
        i21 = i21 + 1;

        goto label10;

     label13:
        $r14 = <org.apache.commons.io.HexDump: java.lang.String EOL>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = virtualinvoke $r16.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r15);

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        virtualinvoke r2.<java.lang.StringBuffer: void setLength(int)>(0);

        $l12 = (long) i4;

        l2 = l2 + $l12;

        i3 = i3 + 16;

        goto label04;

     label14:
        return;
    }

    private static java.lang.StringBuffer dump(java.lang.StringBuffer, long)
    {
        java.lang.StringBuffer r0;
        long l0, $l3;
        int i1, $i2, $i4, $i5;
        int[] $r1;
        char[] $r2;
        char $c6;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        i1 = 0;

     label1:
        if i1 >= 8 goto label2;

        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i2 = $r1[i1];

        $l3 = l0 >> $i2;

        $i4 = (int) $l3;

        $i5 = $i4 & 15;

        $c6 = $r2[$i5];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    private static java.lang.StringBuffer dump(java.lang.StringBuffer, byte)
    {
        java.lang.StringBuffer r0;
        byte b0, $b4, $b5;
        int i1, $i2, $i3;
        int[] $r1;
        char[] $r2;
        char $c6;

        r0 := @parameter0: java.lang.StringBuffer;

        b0 := @parameter1: byte;

        i1 = 0;

     label1:
        if i1 >= 2 goto label2;

        $r2 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r1 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i2 = i1 + 6;

        $i3 = $r1[$i2];

        $b4 = b0 >> $i3;

        $b5 = $b4 & 15;

        $c6 = $r2[$b5];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1;
        int[] $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.commons.io.HexDump: java.lang.String EOL> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.apache.commons.io.HexDump: char[] _hexcodes> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 28;

        $r2[1] = 24;

        $r2[2] = 20;

        $r2[3] = 16;

        $r2[4] = 12;

        $r2[5] = 8;

        $r2[6] = 4;

        $r2[7] = 0;

        <org.apache.commons.io.HexDump: int[] _shifts> = $r2;

        return;
    }
}
