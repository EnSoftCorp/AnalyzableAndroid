public class org.apache.commons.io.filefilter.RegexFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
    private final java.util.regex.Pattern pattern;

    public void <init>(java.lang.String)
    {
        org.apache.commons.io.filefilter.RegexFileFilter r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        r0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern> = $r2;

        return;
    }

    public void <init>(java.lang.String, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.filefilter.RegexFileFilter r0;
        java.lang.String r1;
        org.apache.commons.io.IOCase r2;
        byte b0;
        java.util.regex.Pattern $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.io.IOCase;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");

        throw $r4;

     label1:
        b0 = 0;

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<org.apache.commons.io.IOCase: boolean isCaseSensitive()>();

        if $z0 != 0 goto label2;

        b0 = 2;

     label2:
        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(r1, b0);

        r0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern> = $r3;

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.apache.commons.io.filefilter.RegexFileFilter r0;
        java.lang.String r1;
        int i0;
        java.util.regex.Pattern $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(r1, i0);

        r0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern> = $r2;

        return;
    }

    public void <init>(java.util.regex.Pattern)
    {
        org.apache.commons.io.filefilter.RegexFileFilter r0;
        java.util.regex.Pattern r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");

        throw $r2;

     label1:
        r0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern> = r1;

        return;
    }

    public boolean accept(java.io.File, java.lang.String)
    {
        org.apache.commons.io.filefilter.RegexFileFilter r0;
        java.io.File r1;
        java.lang.String r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }
}
