public final class com.google.common.util.concurrent.SimpleTimeLimiter extends java.lang.Object implements com.google.common.util.concurrent.TimeLimiter
{
    private final java.util.concurrent.ExecutorService executor;

    public void <init>(java.util.concurrent.ExecutorService)
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.ExecutorService r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.ExecutorService) $r2;

        r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor> = $r3;

        return;
    }

    public void <init>()
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        specialinvoke r0.<com.google.common.util.concurrent.SimpleTimeLimiter: void <init>(java.util.concurrent.ExecutorService)>($r1);

        return;
    }

    public java.lang.Object newProxy(java.lang.Object, java.lang.Class, long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.lang.Object r1, $r14;
        java.lang.Class r2;
        long l0;
        java.util.concurrent.TimeUnit r3;
        java.util.Set r4;
        com.google.common.util.concurrent.SimpleTimeLimiter$1 r5, $r13;
        byte $b1;
        java.lang.StringBuilder $r9, $r10, $r11;
        boolean $z0, $z1;
        java.lang.String $r12;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        l0 := @parameter2: long;

        r3 := @parameter3: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad timeout: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r12);

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isInterface()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "interfaceType must be an interface type");

        r4 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.util.Set findInterruptibleMethods(java.lang.Class)>(r2);

        $r13 = new com.google.common.util.concurrent.SimpleTimeLimiter$1;

        specialinvoke $r13.<com.google.common.util.concurrent.SimpleTimeLimiter$1: void <init>(com.google.common.util.concurrent.SimpleTimeLimiter,java.lang.Object,long,java.util.concurrent.TimeUnit,java.util.Set)>(r0, r1, l0, r3, r4);

        r5 = $r13;

        $r14 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(r2, r5);

        return $r14;
    }

    public java.lang.Object callWithTimeout(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception
    {
        com.google.common.util.concurrent.SimpleTimeLimiter r0;
        java.util.concurrent.Callable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean z0, $z1;
        java.util.concurrent.Future r3;
        java.lang.InterruptedException r4, $r12;
        byte $b1;
        java.lang.Object[] $r7;
        java.lang.Long $r8;
        java.util.concurrent.ExecutorService $r9;
        java.lang.Object $r10, $r11;
        java.util.concurrent.ExecutionException $r13, r17;
        java.util.concurrent.TimeoutException $r14, r18;
        java.lang.Exception $r15;
        com.google.common.util.concurrent.UncheckedTimeoutException $r16;

        r0 := @this: com.google.common.util.concurrent.SimpleTimeLimiter;

        r1 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        z0 := @parameter3: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7[0] = $r8;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "timeout must be positive: %s", $r7);

        $r9 = r0.<com.google.common.util.concurrent.SimpleTimeLimiter: java.util.concurrent.ExecutorService executor>;

        r3 = interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

     label03:
        if z0 == 0 goto label07;

     label04:
        $r10 = interfaceinvoke r3.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r2);

     label05:
        return $r10;

     label06:
        $r12 := @caughtexception;

        r4 = $r12;

        interfaceinvoke r3.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        throw r4;

     label07:
        $r11 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)>(r3, l0, r2);

     label08:
        return $r11;

     label09:
        $r13 := @caughtexception;

        r17 = $r13;

        $r15 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>(r17, 1);

        throw $r15;

     label10:
        $r14 := @caughtexception;

        r18 = $r14;

        interfaceinvoke r3.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        $r16 = new com.google.common.util.concurrent.UncheckedTimeoutException;

        specialinvoke $r16.<com.google.common.util.concurrent.UncheckedTimeoutException: void <init>(java.lang.Throwable)>(r18);

        throw $r16;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.util.concurrent.ExecutionException from label03 to label05 with label09;
        catch java.util.concurrent.ExecutionException from label06 to label08 with label09;
        catch java.util.concurrent.TimeoutException from label03 to label05 with label10;
        catch java.util.concurrent.TimeoutException from label06 to label08 with label10;
    }

    private static java.lang.Exception throwCause(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Exception r0, $r4;
        boolean z0, $z1, $z2;
        java.lang.Throwable r1;
        java.lang.StackTraceElement[] r2, $r5, $r6;
        java.lang.Error $r3;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.Exception;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        if r1 != null goto label1;

        throw r0;

     label1:
        if z0 == 0 goto label2;

        $r5 = virtualinvoke r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r6 = virtualinvoke r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r7 = staticinvoke <com.google.common.collect.ObjectArrays: java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class)>($r5, $r6, class "java/lang/StackTraceElement");

        r2 = (java.lang.StackTraceElement[]) $r7;

        virtualinvoke r1.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(r2);

     label2:
        $z1 = r1 instanceof java.lang.Exception;

        if $z1 == 0 goto label3;

        $r4 = (java.lang.Exception) r1;

        throw $r4;

     label3:
        $z2 = r1 instanceof java.lang.Error;

        if $z2 == 0 goto label4;

        $r3 = (java.lang.Error) r1;

        throw $r3;

     label4:
        throw r0;
    }

    private static java.util.Set findInterruptibleMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashSet r1;
        java.lang.reflect.Method[] r2;
        int i0, i1;
        java.lang.reflect.Method r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: boolean declaresInterruptedEx(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }

    private static boolean declaresInterruptedEx(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] r1;
        int i0, i1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 != class "java/lang/InterruptedException" goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static java.lang.Object newProxy(java.lang.Class, java.lang.reflect.InvocationHandler)
    {
        java.lang.Class r0;
        java.lang.reflect.InvocationHandler r1;
        java.lang.Object r2, $r5;
        java.lang.ClassLoader $r3;
        java.lang.Class[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.InvocationHandler;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        r2 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r3, $r4, r1);

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r2);

        return $r5;
    }

    static java.lang.Exception access$000(java.lang.Exception, boolean) throws java.lang.Exception
    {
        java.lang.Exception r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.Exception;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.google.common.util.concurrent.SimpleTimeLimiter: java.lang.Exception throwCause(java.lang.Exception,boolean)>(r0, z0);

        return $r1;
    }
}
