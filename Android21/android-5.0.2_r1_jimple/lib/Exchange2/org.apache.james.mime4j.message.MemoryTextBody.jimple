class org.apache.james.mime4j.message.MemoryTextBody extends org.apache.james.mime4j.message.AbstractBody implements org.apache.james.mime4j.message.TextBody
{
    private static org.apache.james.mime4j.Log log;
    private java.lang.String mimeCharset;
    private byte[] tempFile;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.james.mime4j.message.MemoryTextBody r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.james.mime4j.message.MemoryTextBody;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.james.mime4j.message.MemoryTextBody: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.james.mime4j.message.MemoryTextBody r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.io.ByteArrayOutputStream r4, $r6;
        org.apache.james.mime4j.util.TempStorage $r5;
        byte[] $r7;

        r0 := @this: org.apache.james.mime4j.message.MemoryTextBody;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.james.mime4j.message.AbstractBody: void <init>()>();

        r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset> = null;

        r0.<org.apache.james.mime4j.message.MemoryTextBody: byte[] tempFile> = null;

        r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset> = r2;

        $r5 = staticinvoke <org.apache.james.mime4j.util.TempStorage: org.apache.james.mime4j.util.TempStorage getInstance()>();

        virtualinvoke $r5.<org.apache.james.mime4j.util.TempStorage: org.apache.james.mime4j.util.TempPath getRootTempPath()>();

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r4 = $r6;

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r1, r4);

        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

        $r7 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<org.apache.james.mime4j.message.MemoryTextBody: byte[] tempFile> = $r7;

        return;
    }

    public java.io.Reader getReader() throws java.io.UnsupportedEncodingException, java.io.IOException
    {
        org.apache.james.mime4j.message.MemoryTextBody r0;
        java.lang.String r1, $r2, $r7, $r11, $r18, $r23, $r24;
        java.io.InputStreamReader $r3;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5;
        org.apache.james.mime4j.Log $r6, $r9, $r20;
        boolean $z0;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r21, $r22;

        r0 := @this: org.apache.james.mime4j.message.MemoryTextBody;

        r1 = null;

        $r2 = r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset>;

        if $r2 == null goto label1;

        $r23 = r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset>;

        r1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toJavaCharset(java.lang.String)>($r23);

     label1:
        if r1 != null goto label3;

        r1 = "ISO-8859-1";

        $r6 = <org.apache.james.mime4j.message.MemoryTextBody: org.apache.james.mime4j.Log log>;

        $z0 = virtualinvoke $r6.<org.apache.james.mime4j.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset>;

        if $r7 != null goto label2;

        $r20 = <org.apache.james.mime4j.message.MemoryTextBody: org.apache.james.mime4j.Log log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No MIME charset specified. Using ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead.");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.james.mime4j.Log: void warn(java.lang.Object)>($r24);

        goto label3;

     label2:
        $r9 = <org.apache.james.mime4j.message.MemoryTextBody: org.apache.james.mime4j.Log log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MIME charset \'");

        $r11 = r0.<org.apache.james.mime4j.message.MemoryTextBody: java.lang.String mimeCharset>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has no ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("corresponding Java charset. Using ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead.");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.james.mime4j.Log: void warn(java.lang.Object)>($r18);

     label3:
        $r3 = new java.io.InputStreamReader;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = r0.<org.apache.james.mime4j.message.MemoryTextBody: byte[] tempFile>;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, r1);

        return $r3;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.james.mime4j.message.MemoryTextBody r0;
        java.io.OutputStream r1;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;

        r0 := @this: org.apache.james.mime4j.message.MemoryTextBody;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<org.apache.james.mime4j.message.MemoryTextBody: byte[] tempFile>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, r1);

        return;
    }

    static void <clinit>()
    {
        org.apache.james.mime4j.Log $r0;

        $r0 = staticinvoke <org.apache.james.mime4j.LogFactory: org.apache.james.mime4j.Log getLog(java.lang.Class)>(class "org/apache/james/mime4j/message/MemoryTextBody");

        <org.apache.james.mime4j.message.MemoryTextBody: org.apache.james.mime4j.Log log> = $r0;

        return;
    }
}
