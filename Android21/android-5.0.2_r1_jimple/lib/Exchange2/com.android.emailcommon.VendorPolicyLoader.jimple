public class com.android.emailcommon.VendorPolicyLoader extends java.lang.Object
{
    private static final java.lang.String POLICY_PACKAGE;
    private static final java.lang.String POLICY_CLASS;
    private static final java.lang.String GET_POLICY_METHOD;
    private static final java.lang.Class[] ARGS;
    private static final java.lang.String USE_ALTERNATE_EXCHANGE_STRINGS;
    private static final java.lang.String GET_IMAP_ID;
    private static final java.lang.String GET_IMAP_ID_USER;
    private static final java.lang.String GET_IMAP_ID_HOST;
    private static final java.lang.String GET_IMAP_ID_CAPA;
    private static final java.lang.String FIND_PROVIDER;
    private static final java.lang.String FIND_PROVIDER_IN_URI;
    private static final java.lang.String FIND_PROVIDER_IN_USER;
    private static final java.lang.String FIND_PROVIDER_OUT_URI;
    private static final java.lang.String FIND_PROVIDER_OUT_USER;
    private static final java.lang.String FIND_PROVIDER_NOTE;
    private static com.android.emailcommon.VendorPolicyLoader sInstance;
    private final java.lang.reflect.Method mPolicyMethod;

    public static com.android.emailcommon.VendorPolicyLoader getInstance(android.content.Context)
    {
        android.content.Context r0;
        com.android.emailcommon.VendorPolicyLoader $r1, $r2, $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader sInstance>;

        if $r1 != null goto label1;

        $r3 = new com.android.emailcommon.VendorPolicyLoader;

        specialinvoke $r3.<com.android.emailcommon.VendorPolicyLoader: void <init>(android.content.Context)>(r0);

        <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader sInstance> = $r3;

     label1:
        $r2 = <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader sInstance>;

        return $r2;
    }

    public static void injectPolicyForTest(android.content.Context, java.lang.String, java.lang.Class)
    {
        android.content.Context r0;
        java.lang.String r1, r3, $r5, $r6;
        java.lang.Class r2;
        java.lang.Object[] $r4, $r7;
        com.android.emailcommon.VendorPolicyLoader $r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r5 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r4[1] = r3;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Using policy: package=%s name=%s", $r4);

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r5, $r6, $r7);

        $r8 = new com.android.emailcommon.VendorPolicyLoader;

        specialinvoke $r8.<com.android.emailcommon.VendorPolicyLoader: void <init>(android.content.Context,java.lang.String,java.lang.String,boolean)>(r0, r1, r3, 1);

        <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader sInstance> = $r8;

        return;
    }

    public static void clearInstanceForTest()
    {
        <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader sInstance> = null;

        return;
    }

    private void <init>(android.content.Context)
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        android.content.Context r1;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.emailcommon.VendorPolicyLoader: void <init>(android.content.Context,java.lang.String,java.lang.String,boolean)>(r1, "com.android.email.policy", "com.android.email.policy.EmailPolicy", 0);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, java.lang.String, boolean)
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        android.content.Context r1, r5;
        java.lang.String r2, r3, $r12, $r13, $r19, $r20;
        boolean z0, $z1;
        java.lang.reflect.Method r4;
        java.lang.ClassLoader r6;
        java.lang.Class[] $r7;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.StringBuilder $r9, $r11, $r14, $r16, $r18, $r21;
        java.lang.ClassNotFoundException $r10, r24;
        java.lang.Object[] $r15, $r22;
        java.lang.NoSuchMethodException $r17, r25;
        java.lang.Class r23;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 != 0 goto label1;

        $z1 = staticinvoke <com.android.emailcommon.VendorPolicyLoader: boolean isSystemPackage(android.content.Context,java.lang.String)>(r1, r2);

        if $z1 != 0 goto label1;

        r0.<com.android.emailcommon.VendorPolicyLoader: java.lang.reflect.Method mPolicyMethod> = null;

        return;

     label1:
        r4 = null;

     label2:
        r5 = virtualinvoke r1.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r2, 3);

        r6 = virtualinvoke r5.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r23 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);

        $r7 = <com.android.emailcommon.VendorPolicyLoader: java.lang.Class[] ARGS>;

        r4 = virtualinvoke r23.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getPolicy", $r7);

     label3:
        goto label7;

     label4:
        $r8 := @caughtexception;

        goto label7;

     label5:
        $r10 := @caughtexception;

        r24 = $r10;

        $r12 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VendorPolicyLoader: ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>($r12, $r13, $r15);

        goto label7;

     label6:
        $r17 := @caughtexception;

        r25 = $r17;

        $r19 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VendorPolicyLoader: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>($r19, $r20, $r22);

     label7:
        r0.<com.android.emailcommon.VendorPolicyLoader: java.lang.reflect.Method mPolicyMethod> = r4;

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
        catch java.lang.ClassNotFoundException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
    }

    public static boolean isSystemPackage(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        android.content.pm.ApplicationInfo r2;
        android.content.pm.PackageManager $r3;
        int $i0, $i1;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 0);

        $i0 = r2.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label3 with label4;
    }

    public android.os.Bundle getPolicy(java.lang.String, android.os.Bundle)
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        java.lang.String r1, $r12;
        android.os.Bundle r2, r3, $r6;
        java.lang.Exception r4, $r10;
        java.lang.reflect.Method $r5, $r8;
        java.lang.Object[] $r7, $r11;
        java.lang.Object $r9;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        r3 = null;

        $r5 = r0.<com.android.emailcommon.VendorPolicyLoader: java.lang.reflect.Method mPolicyMethod>;

        if $r5 == null goto label4;

     label1:
        $r8 = r0.<com.android.emailcommon.VendorPolicyLoader: java.lang.reflect.Method mPolicyMethod>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r7[1] = r2;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

        r3 = (android.os.Bundle) $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        $r12 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r4;

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>($r12, "VendorPolicyLoader", $r11);

     label4:
        if r3 == null goto label5;

        $r6 = r3;

        goto label6;

     label5:
        $r6 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label6:
        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean useAlternateExchangeStrings()
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        android.os.Bundle $r1;
        boolean $z0;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        $r1 = virtualinvoke r0.<com.android.emailcommon.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)>("useAlternateExchangeStrings", null);

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("useAlternateExchangeStrings", 0);

        return $z0;
    }

    public java.lang.String getImapIdValues(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        java.lang.String r1, r2, r3, r5;
        android.os.Bundle r4, $r6, $r7;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r4 = $r6;

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("getImapId.user", r1);

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("getImapId.host", r2);

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("getImapId.capabilities", r3);

        $r7 = virtualinvoke r0.<com.android.emailcommon.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)>("getImapId", r4);

        r5 = virtualinvoke $r7.<android.os.Bundle: java.lang.String getString(java.lang.String)>("getImapId");

        return r5;
    }

    public com.android.emailcommon.VendorPolicyLoader$Provider findProviderForDomain(java.lang.String)
    {
        com.android.emailcommon.VendorPolicyLoader r0;
        java.lang.String r1, $r7, $r8, $r9, $r10, $r11;
        android.os.Bundle r2, r3, $r5;
        com.android.emailcommon.VendorPolicyLoader$Provider r4, $r6;
        boolean $z0;

        r0 := @this: com.android.emailcommon.VendorPolicyLoader;

        r1 := @parameter0: java.lang.String;

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("findProvider", r1);

        r3 = virtualinvoke r0.<com.android.emailcommon.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)>("findProvider", r2);

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.os.Bundle: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = new com.android.emailcommon.VendorPolicyLoader$Provider;

        specialinvoke $r6.<com.android.emailcommon.VendorPolicyLoader$Provider: void <init>()>();

        r4 = $r6;

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String id> = null;

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String label> = null;

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String domain> = r1;

        $r7 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("findProvider.inUri");

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String incomingUriTemplate> = $r7;

        $r8 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("findProvider.inUser");

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String incomingUsernameTemplate> = $r8;

        $r9 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("findProvider.outUri");

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String outgoingUriTemplate> = $r9;

        $r10 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("findProvider.outUser");

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String outgoingUsernameTemplate> = $r10;

        $r11 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("findProvider.note");

        r4.<com.android.emailcommon.VendorPolicyLoader$Provider: java.lang.String note> = $r11;

        return r4;

     label1:
        return null;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER_NOTE> = "findProvider.note";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER_OUT_USER> = "findProvider.outUser";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER_OUT_URI> = "findProvider.outUri";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER_IN_USER> = "findProvider.inUser";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER_IN_URI> = "findProvider.inUri";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String FIND_PROVIDER> = "findProvider";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String GET_IMAP_ID_CAPA> = "getImapId.capabilities";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String GET_IMAP_ID_HOST> = "getImapId.host";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String GET_IMAP_ID_USER> = "getImapId.user";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String GET_IMAP_ID> = "getImapId";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String USE_ALTERNATE_EXCHANGE_STRINGS> = "useAlternateExchangeStrings";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String GET_POLICY_METHOD> = "getPolicy";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String POLICY_CLASS> = "com.android.email.policy.EmailPolicy";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.String POLICY_PACKAGE> = "com.android.email.policy";

        $r0 = newarray (java.lang.Class)[2];

        $r0[0] = class "java/lang/String";

        $r0[1] = class "android/os/Bundle";

        <com.android.emailcommon.VendorPolicyLoader: java.lang.Class[] ARGS> = $r0;

        return;
    }
}
