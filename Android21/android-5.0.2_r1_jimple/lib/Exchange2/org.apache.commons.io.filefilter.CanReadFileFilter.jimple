public class org.apache.commons.io.filefilter.CanReadFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
    public static final org.apache.commons.io.filefilter.IOFileFilter CAN_READ;
    public static final org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ;
    public static final org.apache.commons.io.filefilter.IOFileFilter READ_ONLY;

    protected void <init>()
    {
        org.apache.commons.io.filefilter.CanReadFileFilter r0;

        r0 := @this: org.apache.commons.io.filefilter.CanReadFileFilter;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        return;
    }

    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.CanReadFileFilter r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.filefilter.CanReadFileFilter;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean canRead()>();

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.commons.io.filefilter.CanReadFileFilter $r0;
        org.apache.commons.io.filefilter.NotFileFilter $r1;
        org.apache.commons.io.filefilter.IOFileFilter $r2, $r4, $r5;
        org.apache.commons.io.filefilter.AndFileFilter $r3;

        $r0 = new org.apache.commons.io.filefilter.CanReadFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.CanReadFileFilter: void <init>()>();

        <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ> = $r0;

        $r1 = new org.apache.commons.io.filefilter.NotFileFilter;

        $r2 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ> = $r1;

        $r3 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r5 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;

        $r4 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE>;

        specialinvoke $r3.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r4);

        <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter READ_ONLY> = $r3;

        return;
    }
}
