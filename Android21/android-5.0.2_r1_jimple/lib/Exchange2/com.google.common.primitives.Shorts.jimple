public final class com.google.common.primitives.Shorts extends java.lang.Object
{
    public static final int BYTES;
    public static final short MAX_POWER_OF_TWO;

    private void <init>()
    {
        com.google.common.primitives.Shorts r0;

        r0 := @this: com.google.common.primitives.Shorts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(short)
    {
        short s0;

        s0 := @parameter0: short;

        return s0;
    }

    public static short checkedCast(long)
    {
        long l0, $l3;
        short s1;
        int $i2;
        byte $b4;
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Long $r1;

        l0 := @parameter0: long;

        $i2 = (int) l0;

        s1 = (short) $i2;

        $l3 = (long) s1;

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Out of range: %s", $r0);

        return s1;
    }

    public static short saturatedCast(long)
    {
        long l0;
        byte $b1, $b2;
        int $i3;
        short $s4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 32767L;

        if $b1 <= 0 goto label1;

        return 32767;

     label1:
        $b2 = l0 cmp -32768L;

        if $b2 >= 0 goto label2;

        return -32768;

     label2:
        $i3 = (int) l0;

        $s4 = (short) $i3;

        return $s4;
    }

    public static int compare(short, short)
    {
        short s0, s1;
        int $i2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $i2 = s0 - s1;

        return $i2;
    }

    public static boolean contains(short[], short)
    {
        short[] r0, r1;
        short s0, s3;
        int i1, i2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        s3 = r1[i2];

        if s3 != s0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(short[], short)
    {
        short[] r0;
        short s0;
        int $i1, $i2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.google.common.primitives.Shorts: int indexOf(short[],short,int,int)>(r0, s0, 0, $i1);

        return $i2;
    }

    private static int indexOf(short[], short, int, int)
    {
        short[] r0;
        short s0, $s4;
        int i1, i2, i3;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i1;

     label1:
        if i3 >= i2 goto label3;

        $s4 = r0[i3];

        if $s4 != s0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(short[], short[])
    {
        short[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        short $s9, $s10;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i2 = lengthof r1;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i4 = lengthof r0;

        $i3 = lengthof r1;

        $i5 = $i4 - $i3;

        $i6 = $i5 + 1;

        if i0 >= $i6 goto label7;

        i1 = 0;

     label3:
        $i7 = lengthof r1;

        if i1 >= $i7 goto label5;

        $i8 = i0 + i1;

        $s10 = r0[$i8];

        $s9 = r1[i1];

        if $s10 == $s9 goto label4;

        goto label6;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return i0;

     label6:
        i0 = i0 + 1;

        goto label2;

     label7:
        return -1;
    }

    public static int lastIndexOf(short[], short)
    {
        short[] r0;
        short s0;
        int $i1, $i2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.google.common.primitives.Shorts: int lastIndexOf(short[],short,int,int)>(r0, s0, 0, $i1);

        return $i2;
    }

    private static int lastIndexOf(short[], short, int, int)
    {
        short[] r0;
        short s0, $s4;
        int i1, i2, i3;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i2 - 1;

     label1:
        if i3 < i1 goto label3;

        $s4 = r0[i3];

        if $s4 != s0 goto label2;

        return i3;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        return -1;
    }

    public static transient short min(short[])
    {
        short[] r0;
        short s0, $s4;
        int i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: short[];

        $i2 = lengthof r0;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        s0 = r0[0];

        i1 = 1;

     label3:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label5;

        $s4 = r0[i1];

        if $s4 >= s0 goto label4;

        s0 = r0[i1];

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return s0;
    }

    public static transient short max(short[])
    {
        short[] r0;
        short s0, $s4;
        int i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: short[];

        $i2 = lengthof r0;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        s0 = r0[0];

        i1 = 1;

     label3:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label5;

        $s4 = r0[i1];

        if $s4 <= s0 goto label4;

        s0 = r0[i1];

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return s0;
    }

    public static transient short[] concat(short[][])
    {
        short[][] r0, r1, r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        short[] r2, r3, r4;

        r0 := @parameter0: short[][];

        i0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        $i6 = lengthof r2;

        i0 = i0 + $i6;

        i2 = i2 + 1;

        goto label1;

     label2:
        r4 = newarray (short)[i0];

        i7 = 0;

        r5 = r0;

        i8 = lengthof r5;

        i3 = 0;

     label3:
        if i3 >= i8 goto label4;

        r3 = r5[i3];

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, i7, $i4);

        $i5 = lengthof r3;

        i7 = i7 + $i5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r4;
    }

    public static byte[] toByteArray(short)
    {
        short s0, $s1;
        byte[] $r0;
        byte $b2, $b3;

        s0 := @parameter0: short;

        $r0 = newarray (byte)[2];

        $s1 = s0 >> 8;

        $b2 = (byte) $s1;

        $r0[0] = $b2;

        $b3 = (byte) s0;

        $r0[1] = $b3;

        return $r0;
    }

    public static short fromByteArray(byte[])
    {
        byte[] r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        boolean $z0;
        java.lang.Integer $r2, $r3;
        byte $b2, $b3;
        short $s4;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $i1 = lengthof r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r1[1] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "array too small: %s < %s", $r1);

        $b3 = r0[0];

        $b2 = r0[1];

        $s4 = staticinvoke <com.google.common.primitives.Shorts: short fromBytes(byte,byte)>($b3, $b2);

        return $s4;
    }

    public static short fromBytes(byte, byte)
    {
        byte b0, b1;
        short $s2, $s5;
        int $i3, $i4;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $i3 = b0 << 8;

        $s2 = b1 & 255;

        $i4 = $i3 | $s2;

        $s5 = (short) $i4;

        return $s5;
    }

    public static short[] ensureCapacity(short[], int, int)
    {
        short[] r0, $r5;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r1, $r3;
        boolean $z0, $z1;
        java.lang.Integer $r2, $r4;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r1);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[0] = $r4;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r3);

        $i2 = lengthof r0;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.google.common.primitives.Shorts: short[] copyOf(short[],int)>(r0, $i3);

        goto label6;

     label5:
        $r5 = r0;

     label6:
        return $r5;
    }

    private static short[] copyOf(short[], int)
    {
        short[] r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        r1 = newarray (short)[i0];

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;
    }

    public static transient java.lang.String join(java.lang.String, short[])
    {
        java.lang.String r0, $r6;
        short[] r1;
        java.lang.StringBuilder r2, $r4, $r7;
        int i0, $i1, $i2, $i3, $i5;
        short $s4, $s6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: short[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r4 = new java.lang.StringBuilder;

        $i2 = lengthof r1;

        $i3 = $i2 * 6;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i3);

        r2 = $r4;

        $s4 = r1[0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s4);

        i0 = 1;

     label2:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label3;

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $s6 = r1[i0];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s6);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.google.common.primitives.Shorts$LexicographicalComparator $r0;

        $r0 = <com.google.common.primitives.Shorts$LexicographicalComparator: com.google.common.primitives.Shorts$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static short[] toArray(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        int i0, i1;
        short[] r2, $r7;
        boolean $z0;
        java.lang.Object $r3, $r4;
        java.lang.Short $r5;
        short $s2;
        com.google.common.primitives.Shorts$ShortArrayAsList $r6;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.google.common.primitives.Shorts$ShortArrayAsList;

        if $z0 == 0 goto label1;

        $r6 = (com.google.common.primitives.Shorts$ShortArrayAsList) r0;

        $r7 = virtualinvoke $r6.<com.google.common.primitives.Shorts$ShortArrayAsList: short[] toShortArray()>();

        return $r7;

     label1:
        r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r1;

        r2 = newarray (short)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.lang.Short) $r4;

        $s2 = virtualinvoke $r5.<java.lang.Short: short shortValue()>();

        r2[i1] = $s2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(short[])
    {
        short[] r0;
        int $i0;
        com.google.common.primitives.Shorts$ShortArrayAsList $r1;
        java.util.List $r2;

        r0 := @parameter0: short[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.google.common.primitives.Shorts$ShortArrayAsList;

        specialinvoke $r1.<com.google.common.primitives.Shorts$ShortArrayAsList: void <init>(short[])>(r0);

        return $r1;
    }

    static int access$000(short[], short, int, int)
    {
        short[] r0;
        short s0;
        int i1, i2, $i3;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.google.common.primitives.Shorts: int indexOf(short[],short,int,int)>(r0, s0, i1, i2);

        return $i3;
    }

    static int access$100(short[], short, int, int)
    {
        short[] r0;
        short s0;
        int i1, i2, $i3;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.google.common.primitives.Shorts: int lastIndexOf(short[],short,int,int)>(r0, s0, i1, i2);

        return $i3;
    }

    public static void <clinit>()
    {
        <com.google.common.primitives.Shorts: short MAX_POWER_OF_TWO> = 16384;

        <com.google.common.primitives.Shorts: int BYTES> = 2;

        return;
    }
}
