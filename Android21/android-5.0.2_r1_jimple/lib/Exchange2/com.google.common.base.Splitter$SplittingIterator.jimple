abstract class com.google.common.base.Splitter$SplittingIterator extends com.google.common.base.AbstractIterator
{
    final java.lang.CharSequence toSplit;
    final com.google.common.base.CharMatcher trimmer;
    final boolean omitEmptyStrings;
    int offset;
    int limit;

    abstract int separatorStart(int);

    abstract int separatorEnd(int);

    protected void <init>(com.google.common.base.Splitter, java.lang.CharSequence)
    {
        com.google.common.base.Splitter$SplittingIterator r0;
        com.google.common.base.Splitter r1;
        java.lang.CharSequence r2;
        com.google.common.base.CharMatcher $r3;
        boolean $z0;
        int $i0;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        r1 := @parameter0: com.google.common.base.Splitter;

        r2 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<com.google.common.base.AbstractIterator: void <init>()>();

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = 0;

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter)>(r1);

        r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer> = $r3;

        $z0 = staticinvoke <com.google.common.base.Splitter: boolean access$300(com.google.common.base.Splitter)>(r1);

        r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings> = $z0;

        $i0 = staticinvoke <com.google.common.base.Splitter: int access$400(com.google.common.base.Splitter)>(r1);

        r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i0;

        r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit> = r2;

        return;
    }

    protected java.lang.String computeNext()
    {
        com.google.common.base.Splitter$SplittingIterator r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.Object $r1;
        java.lang.String $r2, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.CharSequence $r3, $r4, $r5, $r8, $r9, $r11, $r13;
        com.google.common.base.CharMatcher $r7, $r10, $r12;
        char $c10, $c12, $c13;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

     label01:
        $i3 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        if $i3 == -1 goto label10;

        i0 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        $i4 = r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        i2 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: int separatorStart(int)>($i4);

        if i2 != -1 goto label02;

        $r13 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        i1 = interfaceinvoke $r13.<java.lang.CharSequence: int length()>();

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = -1;

        goto label03;

     label02:
        i1 = i2;

        $i5 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: int separatorEnd(int)>(i2);

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i5;

     label03:
        if i0 >= i1 goto label04;

        $r12 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r11 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $c13 = interfaceinvoke $r11.<java.lang.CharSequence: char charAt(int)>(i0);

        $z3 = virtualinvoke $r12.<com.google.common.base.CharMatcher: boolean matches(char)>($c13);

        if $z3 == 0 goto label04;

        i0 = i0 + 1;

        goto label03;

     label04:
        if i1 <= i0 goto label05;

        $r10 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r9 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i11 = i1 - 1;

        $c12 = interfaceinvoke $r9.<java.lang.CharSequence: char charAt(int)>($i11);

        $z2 = virtualinvoke $r10.<com.google.common.base.CharMatcher: boolean matches(char)>($c12);

        if $z2 == 0 goto label05;

        i1 = i1 + -1;

        goto label04;

     label05:
        $z0 = r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings>;

        if $z0 == 0 goto label06;

        if i0 != i1 goto label06;

        goto label01;

     label06:
        $i6 = r0.<com.google.common.base.Splitter$SplittingIterator: int limit>;

        if $i6 != 1 goto label08;

        $r5 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        i1 = interfaceinvoke $r5.<java.lang.CharSequence: int length()>();

        r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = -1;

     label07:
        if i1 <= i0 goto label09;

        $r7 = r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r8 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i9 = i1 - 1;

        $c10 = interfaceinvoke $r8.<java.lang.CharSequence: char charAt(int)>($i9);

        $z1 = virtualinvoke $r7.<com.google.common.base.CharMatcher: boolean matches(char)>($c10);

        if $z1 == 0 goto label09;

        i1 = i1 + -1;

        goto label07;

     label08:
        $i7 = r0.<com.google.common.base.Splitter$SplittingIterator: int limit>;

        $i8 = $i7 - 1;

        r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i8;

     label09:
        $r3 = r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        $r6 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        return $r6;

     label10:
        $r1 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.Object endOfData()>();

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    protected volatile java.lang.Object computeNext()
    {
        com.google.common.base.Splitter$SplittingIterator r0;
        java.lang.String $r1;

        r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $r1 = virtualinvoke r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.String computeNext()>();

        return $r1;
    }
}
