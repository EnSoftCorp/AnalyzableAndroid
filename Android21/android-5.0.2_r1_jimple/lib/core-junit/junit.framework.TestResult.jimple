public class junit.framework.TestResult extends java.lang.Object
{
    protected java.util.Vector fFailures;
    protected java.util.Vector fErrors;
    protected java.util.Vector fListeners;
    protected int fRunTests;
    private boolean fStop;

    public void <init>()
    {
        junit.framework.TestResult r0;
        java.util.Vector $r1, $r2, $r3;

        r0 := @this: junit.framework.TestResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<junit.framework.TestResult: java.util.Vector fFailures> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<junit.framework.TestResult: java.util.Vector fErrors> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<junit.framework.TestResult: java.util.Vector fListeners> = $r3;

        r0.<junit.framework.TestResult: int fRunTests> = 0;

        r0.<junit.framework.TestResult: boolean fStop> = 0;

        return;
    }

    public synchronized void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.framework.TestResult r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;
        java.util.Iterator r3;
        junit.framework.TestListener r4;
        junit.framework.TestFailure $r5;
        java.util.Vector $r6;
        java.util.List $r7;
        boolean $z1;
        java.lang.Object $r8;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        $r6 = r0.<junit.framework.TestResult: java.util.Vector fErrors>;

        $r5 = new junit.framework.TestFailure;

        specialinvoke $r5.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>(r1, r2);

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        $r7 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (junit.framework.TestListener) $r8;

        interfaceinvoke r4.<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>(r1, r2);

        goto label1;

     label2:
        return;
    }

    public synchronized void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.framework.TestResult r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;
        java.util.Iterator r3;
        junit.framework.TestListener r4;
        junit.framework.TestFailure $r5;
        java.util.Vector $r6;
        java.util.List $r7;
        boolean $z1;
        java.lang.Object $r8;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        $r6 = r0.<junit.framework.TestResult: java.util.Vector fFailures>;

        $r5 = new junit.framework.TestFailure;

        specialinvoke $r5.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>(r1, r2);

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        $r7 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (junit.framework.TestListener) $r8;

        interfaceinvoke r4.<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>(r1, r2);

        goto label1;

     label2:
        return;
    }

    public synchronized void addListener(junit.framework.TestListener)
    {
        junit.framework.TestResult r0;
        junit.framework.TestListener r1;
        java.util.Vector $r2;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<junit.framework.TestResult: java.util.Vector fListeners>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        return;
    }

    public synchronized void removeListener(junit.framework.TestListener)
    {
        junit.framework.TestResult r0;
        junit.framework.TestListener r1;
        java.util.Vector $r2;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<junit.framework.TestResult: java.util.Vector fListeners>;

        virtualinvoke $r2.<java.util.Vector: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private synchronized java.util.List cloneListeners()
    {
        junit.framework.TestResult r0;
        java.util.ArrayList r1, $r2;
        java.util.Vector $r3;

        r0 := @this: junit.framework.TestResult;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        $r3 = r0.<junit.framework.TestResult: java.util.Vector fListeners>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return r1;
    }

    public void endTest(junit.framework.Test)
    {
        junit.framework.TestResult r0;
        junit.framework.Test r1;
        java.util.Iterator r2;
        junit.framework.TestListener r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        $r4 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (junit.framework.TestListener) $r5;

        interfaceinvoke r3.<junit.framework.TestListener: void endTest(junit.framework.Test)>(r1);

        goto label1;

     label2:
        return;
    }

    public synchronized int errorCount()
    {
        junit.framework.TestResult r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: junit.framework.TestResult;

        $r1 = r0.<junit.framework.TestResult: java.util.Vector fErrors>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public synchronized java.util.Enumeration errors()
    {
        junit.framework.TestResult r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: junit.framework.TestResult;

        $r1 = r0.<junit.framework.TestResult: java.util.Vector fErrors>;

        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

        return $r2;
    }

    public synchronized int failureCount()
    {
        junit.framework.TestResult r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: junit.framework.TestResult;

        $r1 = r0.<junit.framework.TestResult: java.util.Vector fFailures>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public synchronized java.util.Enumeration failures()
    {
        junit.framework.TestResult r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: junit.framework.TestResult;

        $r1 = r0.<junit.framework.TestResult: java.util.Vector fFailures>;

        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

        return $r2;
    }

    protected void run(junit.framework.TestCase)
    {
        junit.framework.TestResult r0;
        junit.framework.TestCase r1;
        junit.framework.TestResult$1 r2, $r3;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.TestCase;

        virtualinvoke r0.<junit.framework.TestResult: void startTest(junit.framework.Test)>(r1);

        $r3 = new junit.framework.TestResult$1;

        specialinvoke $r3.<junit.framework.TestResult$1: void <init>(junit.framework.TestResult,junit.framework.TestCase)>(r0, r1);

        r2 = $r3;

        virtualinvoke r0.<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>(r1, r2);

        virtualinvoke r0.<junit.framework.TestResult: void endTest(junit.framework.Test)>(r1);

        return;
    }

    public synchronized int runCount()
    {
        junit.framework.TestResult r0;
        int $i0;

        r0 := @this: junit.framework.TestResult;

        $i0 = r0.<junit.framework.TestResult: int fRunTests>;

        return $i0;
    }

    public void runProtected(junit.framework.Test, junit.framework.Protectable)
    {
        junit.framework.TestResult r0;
        junit.framework.Test r1;
        junit.framework.Protectable r2;
        junit.framework.AssertionFailedError r3, $r6;
        java.lang.ThreadDeath $r4, r7;
        java.lang.Throwable $r5, r8;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.Protectable;

     label1:
        interfaceinvoke r2.<junit.framework.Protectable: void protect()>();

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r0.<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>(r1, r3);

        goto label6;

     label4:
        $r4 := @caughtexception;

        r7 = $r4;

        throw r7;

     label5:
        $r5 := @caughtexception;

        r8 = $r5;

        virtualinvoke r0.<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>(r1, r8);

     label6:
        return;

        catch junit.framework.AssertionFailedError from label1 to label2 with label3;
        catch java.lang.ThreadDeath from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public synchronized boolean shouldStop()
    {
        junit.framework.TestResult r0;
        boolean $z0;

        r0 := @this: junit.framework.TestResult;

        $z0 = r0.<junit.framework.TestResult: boolean fStop>;

        return $z0;
    }

    public void startTest(junit.framework.Test)
    {
        junit.framework.TestResult r0, r2;
        junit.framework.Test r1;
        int i0, $i1, $i2;
        java.lang.Throwable r3, $r7;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Iterator r8;
        junit.framework.TestListener r9;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        i0 = interfaceinvoke r1.<junit.framework.Test: int countTestCases()>();

        r2 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<junit.framework.TestResult: int fRunTests>;

        $i2 = $i1 + i0;

        r0.<junit.framework.TestResult: int fRunTests> = $i2;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r5 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r8 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (junit.framework.TestListener) $r6;

        interfaceinvoke r9.<junit.framework.TestListener: void startTest(junit.framework.Test)>(r1);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public synchronized void stop()
    {
        junit.framework.TestResult r0;

        r0 := @this: junit.framework.TestResult;

        r0.<junit.framework.TestResult: boolean fStop> = 1;

        return;
    }

    public synchronized boolean wasSuccessful()
    {
        junit.framework.TestResult r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: junit.framework.TestResult;

        $i0 = virtualinvoke r0.<junit.framework.TestResult: int failureCount()>();

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r0.<junit.framework.TestResult: int errorCount()>();

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
