public class junit.framework.TestSuite extends java.lang.Object implements junit.framework.Test
{
    private java.lang.String fName;
    private java.util.Vector fTests;

    public static junit.framework.Test createTest(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r14, $r15, $r24, $r25, $r31, $r38, $r45, $r48;
        java.lang.reflect.Constructor r2;
        java.lang.InstantiationException r4, $r17;
        java.lang.Class[] $r5;
        int $i0;
        java.lang.Object[] $r6, $r8;
        boolean $z0;
        junit.framework.TestCase $r9;
        java.lang.NoSuchMethodException $r10;
        java.lang.StringBuilder $r11, $r13, $r16, $r19, $r21, $r22, $r23, $r26, $r28, $r32, $r33, $r34, $r37, $r39, $r40, $r42, $r43, $r44, r52, r53, r54, r55;
        junit.framework.Test $r18, $r29, $r35, $r47, r56;
        java.lang.IllegalAccessException $r30, r51;
        java.lang.reflect.InvocationTargetException $r36, r50;
        java.lang.Throwable $r46;
        java.lang.Object r49;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>(r0);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no public constructor TestCase(String name) or TestCase()");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r15);

        return $r18;

     label4:
        $r5 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r5;

        if $i0 != 0 goto label5;

        $r8 = newarray (java.lang.Object)[0];

        r49 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $z0 = r49 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label6;

        $r9 = (junit.framework.TestCase) r49;

        virtualinvoke $r9.<junit.framework.TestCase: void setName(java.lang.String)>(r1);

        goto label6;

     label5:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        r49 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

     label6:
        r56 = (junit.framework.Test) r49;

        return r56;

     label7:
        $r17 := @caughtexception;

        r4 = $r17;

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate test case: ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r24 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>(r4);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r25);

        return $r29;

     label8:
        $r36 := @caughtexception;

        r50 = $r36;

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in constructor: ");

        $r39 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r46 = virtualinvoke r50.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r45 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>($r46);

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r48);

        return $r47;

     label9:
        $r30 := @caughtexception;

        r51 = $r30;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access test case: ");

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r31 = staticinvoke <junit.framework.TestSuite: java.lang.String exceptionToString(java.lang.Throwable)>(r51);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r38);

        return $r35;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label4 to label6 with label7;
        catch java.lang.reflect.InvocationTargetException from label4 to label6 with label8;
        catch java.lang.IllegalAccessException from label4 to label6 with label9;
    }

    public static java.lang.reflect.Constructor getTestConstructor(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] $r2, $r5;
        java.lang.reflect.Constructor $r3, $r6;
        java.lang.NoSuchMethodException $r4;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "java/lang/String";

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Class)[0];

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

        return $r6;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static junit.framework.Test warning(java.lang.String)
    {
        java.lang.String r0;
        junit.framework.TestSuite$1 $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new junit.framework.TestSuite$1;

        specialinvoke $r1.<junit.framework.TestSuite$1: void <init>(java.lang.String,java.lang.String)>("warning", r0);

        return $r1;
    }

    private static java.lang.String exceptionToString(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.StringWriter r1, $r3;
        java.io.PrintWriter r2, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Throwable;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        r1 = $r3;

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        r2 = $r4;

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r2);

        $r5 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r5;
    }

    public void <init>()
    {
        junit.framework.TestSuite r0;
        java.util.Vector $r1;

        r0 := @this: junit.framework.TestSuite;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        junit.framework.TestSuite r0;
        java.lang.Class r1;
        java.util.Vector $r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r2;

        specialinvoke r0.<junit.framework.TestSuite: void addTestsFromTestCase(java.lang.Class)>(r1);

        return;
    }

    private void addTestsFromTestCase(java.lang.Class)
    {
        junit.framework.TestSuite r0;
        java.lang.Class r1, $r9, r32;
        java.util.ArrayList r3, $r8;
        java.lang.reflect.Method[] r4;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Method r5;
        java.lang.String $r6, $r12, $r14, $r18, $r23, $r25, $r28;
        boolean $z0, $z1;
        java.util.Vector $r10;
        java.lang.StringBuilder $r11, $r13, $r15, $r17, $r19, $r20, $r21, $r24, $r27, $r30, $r31;
        junit.framework.Test $r16, $r22, $r29;
        java.lang.NoSuchMethodException $r26;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        r0.<junit.framework.TestSuite: java.lang.String fName> = $r6;

     label01:
        staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>(r1);

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r25 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no public constructor TestCase(String name) or TestCase()");

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r28);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r29);

        return;

     label04:
        $i2 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z0 != 0 goto label05;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r18 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not public");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r23);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r22);

        return;

     label05:
        r32 = r1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = $r8;

     label06:
        $r9 = class "junit/framework/Test";

        $z1 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r32);

        if $z1 == 0 goto label09;

        r4 = virtualinvoke r32.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r4;

        i1 = 0;

     label07:
        if i1 >= i0 goto label08;

        r5 = r4[i1];

        specialinvoke r0.<junit.framework.TestSuite: void addTestMethod(java.lang.reflect.Method,java.util.List,java.lang.Class)>(r5, r3, r1);

        i1 = i1 + 1;

        goto label07;

     label08:
        r32 = virtualinvoke r32.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label06;

     label09:
        $r10 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $i3 = virtualinvoke $r10.<java.util.Vector: int size()>();

        if $i3 != 0 goto label10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No tests found in ");

        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r14);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r16);

     label10:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
    }

    public void <init>(java.lang.Class, java.lang.String)
    {
        junit.framework.TestSuite r0;
        java.lang.Class r1;
        java.lang.String r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r1);

        virtualinvoke r0.<junit.framework.TestSuite: void setName(java.lang.String)>(r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestSuite r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r2;

        virtualinvoke r0.<junit.framework.TestSuite: void setName(java.lang.String)>(r1);

        return;
    }

    public transient void <init>(java.lang.Class[])
    {
        junit.framework.TestSuite r0;
        java.lang.Class[] r1, r2;
        int i0, i1;
        java.lang.Class r3;
        java.util.Vector $r4;
        junit.framework.Test $r5;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(int)>(10);

        r0.<junit.framework.TestSuite: java.util.Vector fTests> = $r4;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r5 = specialinvoke r0.<junit.framework.TestSuite: junit.framework.Test testCaseForClass(java.lang.Class)>(r3);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private junit.framework.Test testCaseForClass(java.lang.Class)
    {
        junit.framework.TestSuite r0, $r9;
        java.lang.Class r1, $r2, $r10;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        junit.framework.Test $r8;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class;

        $r2 = class "junit/framework/TestCase";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $r9 = new junit.framework.TestSuite;

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "junit/framework/TestCase");

        specialinvoke $r9.<junit.framework.TestSuite: void <init>(java.lang.Class)>($r10);

        return $r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend TestCase");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r7);

        return $r8;
    }

    public void <init>(java.lang.Class[], java.lang.String)
    {
        junit.framework.TestSuite r0;
        java.lang.Class[] r1;
        java.lang.String r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class[];

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<junit.framework.TestSuite: void <init>(java.lang.Class[])>(r1);

        virtualinvoke r0.<junit.framework.TestSuite: void setName(java.lang.String)>(r2);

        return;
    }

    public void addTest(junit.framework.Test)
    {
        junit.framework.TestSuite r0;
        junit.framework.Test r1;
        java.util.Vector $r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: junit.framework.Test;

        $r2 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addTestSuite(java.lang.Class)
    {
        junit.framework.TestSuite r0, $r2;
        java.lang.Class r1;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.Class;

        $r2 = new junit.framework.TestSuite;

        specialinvoke $r2.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r1);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestSuite r0;
        int i0, $i1;
        java.util.Iterator r1;
        junit.framework.Test r2;
        java.util.Vector $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: junit.framework.TestSuite;

        i0 = 0;

        $r3 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        r1 = virtualinvoke $r3.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (junit.framework.Test) $r4;

        $i1 = interfaceinvoke r2.<junit.framework.Test: int countTestCases()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    public java.lang.String getName()
    {
        junit.framework.TestSuite r0;
        java.lang.String $r1;

        r0 := @this: junit.framework.TestSuite;

        $r1 = r0.<junit.framework.TestSuite: java.lang.String fName>;

        return $r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestSuite r0;
        junit.framework.TestResult r1;
        java.util.Iterator r2;
        junit.framework.Test r3;
        java.util.Vector $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: junit.framework.TestResult;

        $r4 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        r2 = virtualinvoke $r4.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (junit.framework.Test) $r5;

        $z1 = virtualinvoke r1.<junit.framework.TestResult: boolean shouldStop()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r0.<junit.framework.TestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)>(r3, r1);

        goto label1;

     label3:
        return;
    }

    public void runTest(junit.framework.Test, junit.framework.TestResult)
    {
        junit.framework.TestSuite r0;
        junit.framework.Test r1;
        junit.framework.TestResult r2;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.TestResult;

        interfaceinvoke r1.<junit.framework.Test: void run(junit.framework.TestResult)>(r2);

        return;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestSuite r0;
        java.lang.String r1;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.String;

        r0.<junit.framework.TestSuite: java.lang.String fName> = r1;

        return;
    }

    public junit.framework.Test testAt(int)
    {
        junit.framework.TestSuite r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        junit.framework.Test $r3;

        r0 := @this: junit.framework.TestSuite;

        i0 := @parameter0: int;

        $r1 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(i0);

        $r3 = (junit.framework.Test) $r2;

        return $r3;
    }

    public int testCount()
    {
        junit.framework.TestSuite r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: junit.framework.TestSuite;

        $r1 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public java.util.Enumeration tests()
    {
        junit.framework.TestSuite r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: junit.framework.TestSuite;

        $r1 = r0.<junit.framework.TestSuite: java.util.Vector fTests>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        junit.framework.TestSuite r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: junit.framework.TestSuite;

        $r1 = virtualinvoke r0.<junit.framework.TestSuite: java.lang.String getName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<junit.framework.TestSuite: java.lang.String getName()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    private void addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)
    {
        junit.framework.TestSuite r0;
        java.lang.reflect.Method r1;
        java.util.List r2;
        java.lang.Class r3;
        java.lang.String r4, $r8, $r12, $r13;
        boolean $z0, $z1, $z3;
        junit.framework.Test $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r14;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.Class;

        r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<junit.framework.TestSuite: boolean isPublicTestMethod(java.lang.reflect.Method)>(r1);

        if $z1 != 0 goto label3;

        $z3 = specialinvoke r0.<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>(r1);

        if $z3 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test method isn\'t public: ");

        $r8 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r12 = virtualinvoke r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>($r13);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r15);

     label2:
        return;

     label3:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r5 = staticinvoke <junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>(r3, r4);

        virtualinvoke r0.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r5);

        return;
    }

    private boolean isPublicTestMethod(java.lang.reflect.Method)
    {
        junit.framework.TestSuite r0;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.reflect.Method;

        $z0 = specialinvoke r0.<junit.framework.TestSuite: boolean isTestMethod(java.lang.reflect.Method)>(r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isTestMethod(java.lang.reflect.Method)
    {
        junit.framework.TestSuite r0;
        java.lang.reflect.Method r1;
        java.lang.Class[] $r2;
        int $i0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        java.lang.Class $r4, $r5;

        r0 := @this: junit.framework.TestSuite;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
