public abstract class junit.framework.TestCase extends junit.framework.Assert implements junit.framework.Test
{
    private java.lang.String fName;

    public void <init>()
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        specialinvoke r0.<junit.framework.Assert: void <init>()>();

        r0.<junit.framework.TestCase: java.lang.String fName> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestCase r0;
        java.lang.String r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.Assert: void <init>()>();

        r0.<junit.framework.TestCase: java.lang.String fName> = r1;

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return 1;
    }

    protected junit.framework.TestResult createResult()
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult $r1;

        r0 := @this: junit.framework.TestCase;

        $r1 = new junit.framework.TestResult;

        specialinvoke $r1.<junit.framework.TestResult: void <init>()>();

        return $r1;
    }

    public junit.framework.TestResult run()
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult r1;

        r0 := @this: junit.framework.TestCase;

        r1 = virtualinvoke r0.<junit.framework.TestCase: junit.framework.TestResult createResult()>();

        virtualinvoke r0.<junit.framework.TestCase: void run(junit.framework.TestResult)>(r1);

        return r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: junit.framework.TestResult;

        virtualinvoke r1.<junit.framework.TestResult: void run(junit.framework.TestCase)>(r0);

        return;
    }

    public void runBare() throws java.lang.Throwable
    {
        junit.framework.TestCase r0;
        java.lang.Throwable r1, r2, r3, $r5, $r6, $r7, $r8, $r9, r10, r11;

        r0 := @this: junit.framework.TestCase;

        r1 = null;

        virtualinvoke r0.<junit.framework.TestCase: void setUp()>();

     label01:
        virtualinvoke r0.<junit.framework.TestCase: void runTest()>();

     label02:
        virtualinvoke r0.<junit.framework.TestCase: void tearDown()>();

     label03:
        goto label16;

     label04:
        $r7 := @caughtexception;

        r2 = $r7;

        if r1 != null goto label05;

        r1 = r2;

     label05:
        goto label16;

     label06:
        $r5 := @caughtexception;

        r10 = $r5;

        r1 = r10;

     label07:
        virtualinvoke r0.<junit.framework.TestCase: void tearDown()>();

     label08:
        goto label16;

     label09:
        $r6 := @caughtexception;

        r11 = $r6;

        if r1 != null goto label10;

        r1 = r11;

     label10:
        goto label16;

     label11:
        $r9 := @caughtexception;

        r3 = $r9;

     label12:
        virtualinvoke r0.<junit.framework.TestCase: void tearDown()>();

     label13:
        goto label15;

     label14:
        $r8 := @caughtexception;

        if r1 != null goto label15;

     label15:
        throw r3;

     label16:
        if r1 == null goto label17;

        throw r1;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void runTest() throws java.lang.Throwable
    {
        junit.framework.TestCase r0;
        java.lang.reflect.Method r1;
        java.lang.String $r3, $r6, $r11, $r13, $r24, $r25;
        java.lang.Class $r4;
        java.lang.Class[] $r5;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r7;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r21, $r22, $r23, $r26;
        java.lang.reflect.InvocationTargetException $r16, r27;
        java.lang.IllegalAccessException $r17, r28;
        java.lang.Throwable $r18;
        java.lang.NoSuchMethodException $r19;

        r0 := @this: junit.framework.TestCase;

        $r3 = r0.<junit.framework.TestCase: java.lang.String fName>;

        staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.String,java.lang.Object)>("TestCase.fName cannot be null", $r3);

        r1 = null;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r5 = (java.lang.Class[]) null;

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r6, $r5);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r24 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r25);

     label4:
        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r11 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" should be public");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r13);

     label5:
        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r7);

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;

        r27 = $r16;

        virtualinvoke r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable fillInStackTrace()>();

        $r18 = virtualinvoke r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r18;

     label8:
        $r17 := @caughtexception;

        r28 = $r17;

        virtualinvoke r28.<java.lang.IllegalAccessException: java.lang.Throwable fillInStackTrace()>();

        throw r28;

     label9:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
        catch java.lang.IllegalAccessException from label5 to label6 with label8;
    }

    protected void setUp() throws java.lang.Exception
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return;
    }

    public java.lang.String toString()
    {
        junit.framework.TestCase r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r6, $r9;
        java.lang.Class $r5;

        r0 := @this: junit.framework.TestCase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<junit.framework.TestCase: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String getName()
    {
        junit.framework.TestCase r0;
        java.lang.String $r1;

        r0 := @this: junit.framework.TestCase;

        $r1 = r0.<junit.framework.TestCase: java.lang.String fName>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestCase r0;
        java.lang.String r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: java.lang.String;

        r0.<junit.framework.TestCase: java.lang.String fName> = r1;

        return;
    }
}
