public class com.android.internal.telephony.sip.SipPhone extends com.android.internal.telephony.sip.SipPhoneBase
{
    private static final java.lang.String LOG_TAG;
    private static final boolean DBG;
    private static final boolean VDBG;
    private static final int TIMEOUT_MAKE_CALL;
    private static final int TIMEOUT_ANSWER_CALL;
    private static final int TIMEOUT_HOLD_CALL;
    private com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall;
    private com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall;
    private com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall;
    private android.net.sip.SipManager mSipManager;
    private android.net.sip.SipProfile mProfile;

    void <init>(android.content.Context, com.android.internal.telephony.PhoneNotifier, android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.content.Context r1;
        com.android.internal.telephony.PhoneNotifier r2;
        android.net.sip.SipProfile r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r12, $r13, $r15;
        java.lang.String $r6, $r8, $r14, $r17;
        com.android.internal.telephony.sip.SipPhone$SipCall $r9, $r10, $r11, $r16, $r18, $r19;
        android.net.sip.SipManager $r20;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: android.net.sip.SipProfile;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIP:");

        $r6 = virtualinvoke r3.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)>($r8, r1, r2);

        $r9 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r9.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall> = $r9;

        $r10 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r10.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall> = $r10;

        $r11 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r11.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall> = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new SipPhone: ");

        $r14 = virtualinvoke r3.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>($r17);

        $r16 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r16.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall> = $r16;

        $r19 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r19.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall> = $r19;

        $r18 = new com.android.internal.telephony.sip.SipPhone$SipCall;

        specialinvoke $r18.<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)>(r0, null);

        r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall> = $r18;

        r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile> = r3;

        $r20 = staticinvoke <android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)>(r1);

        r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipManager mSipManager> = $r20;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhone r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        android.net.sip.SipProfile $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.internal.telephony.sip.SipPhone;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.android.internal.telephony.sip.SipPhone) r1;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile>;

        $r4 = virtualinvoke $r3.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r5 = r2.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile>;

        $r6 = virtualinvoke $r5.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z1;
    }

    public java.lang.String getSipUri()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipProfile $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile>;

        $r2 = virtualinvoke $r1.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        return $r2;
    }

    public boolean equals(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>();

        $r3 = virtualinvoke r1.<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public com.android.internal.telephony.Connection takeIncomingCall(java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Object r1;
        java.lang.Class r2;
        android.net.sip.SipAudioCall r3;
        java.lang.String r4, $r15, $r17, $r19, $r32;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.android.internal.telephony.sip.SipPhone$SipConnection r5;
        java.lang.Throwable r6, $r30;
        com.android.internal.telephony.sip.SipPhone$SipCall $r7, $r9, $r20, $r22, $r23, $r24, $r29;
        com.android.internal.telephony.Call$State $r8, $r10, $r21, $r25;
        java.lang.StringBuilder $r11, $r13, $r14, $r26, $r27, $r31;
        android.net.sip.SipProfile $r12, $r16, $r18;
        int $i0;
        java.lang.Exception $r28, r33;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.Object;

        r2 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label01:
        $z1 = r1 instanceof android.net.sip.SipAudioCall;

        if $z1 != 0 goto label03;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("takeIncomingCall: ret=null, not a SipAudioCall");

        exitmonitor r2;

     label02:
        return null;

     label03:
        $r7 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z2 = virtualinvoke $r8.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z2 == 0 goto label05;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("takeIncomingCall: ret=null, ringingCall not alive");

        exitmonitor r2;

     label04:
        return null;

     label05:
        $r9 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z3 = virtualinvoke $r10.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z3 == 0 goto label07;

        $r24 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        $r25 = virtualinvoke $r24.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z5 = virtualinvoke $r25.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z5 == 0 goto label07;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("takeIncomingCall: ret=null, foreground and background both alive");

        exitmonitor r2;

     label06:
        return null;

     label07:
        r3 = (android.net.sip.SipAudioCall) r1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("takeIncomingCall: taking call from: ");

        $r12 = virtualinvoke r3.<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>();

        $r15 = virtualinvoke $r12.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>($r17);

        $r16 = virtualinvoke r3.<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>();

        r4 = virtualinvoke $r16.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r18 = r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile>;

        $r19 = virtualinvoke $r18.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z4 == 0 goto label10;

        $r20 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r21 = virtualinvoke $r20.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        z0 = virtualinvoke $r21.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        $r22 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        r5 = virtualinvoke $r22.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.sip.SipPhone$SipConnection initIncomingCall(android.net.sip.SipAudioCall,boolean)>(r3, z0);

        $i0 = virtualinvoke r3.<android.net.sip.SipAudioCall: int getState()>();

        if $i0 == 3 goto label08;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("    takeIncomingCall: call cancelled !!");

        $r23 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r23.<com.android.internal.telephony.sip.SipPhone$SipCall: void reset()>();

        r5 = null;

     label08:
        exitmonitor r2;

     label09:
        return r5;

     label10:
        goto label12;

     label11:
        $r28 := @caughtexception;

        r33 = $r28;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    takeIncomingCall: exception e=");

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>($r32);

        $r29 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r29.<com.android.internal.telephony.sip.SipPhone$SipCall: void reset()>();

     label12:
        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("takeIncomingCall: NOT taking !!");

        exitmonitor r2;

     label13:
        return null;

     label14:
        $r30 := @caughtexception;

        r6 = $r30;

        exitmonitor r2;

     label15:
        throw r6;

        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label09 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void acceptCall(int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r12;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r6, $r7, $r8;
        com.android.internal.telephony.Call$State $r4, $r5, $r9, $r10;
        com.android.internal.telephony.CallStateException $r11;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        if $r4 == $r5 goto label2;

        $r8 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r10 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State WAITING>;

        if $r9 != $r10 goto label3;

     label2:
        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("acceptCall: accepting");

        $r6 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r6.<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>(0);

        $r7 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r7.<com.android.internal.telephony.sip.SipPhone$SipCall: void acceptCall()>();

        goto label4;

     label3:
        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("acceptCall: throw CallStateException(\"phone not ringing\")");

        $r11 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r11.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("phone not ringing");

        throw $r11;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void rejectCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r7;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r6;
        com.android.internal.telephony.Call$State $r4;
        boolean $z0;
        com.android.internal.telephony.CallStateException $r5;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke $r4.<com.android.internal.telephony.Call$State: boolean isRinging()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("rejectCall: rejecting");

        $r6 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r6.<com.android.internal.telephony.sip.SipPhone$SipCall: void rejectCall()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("rejectCall: throw CallStateException(\"phone not ringing\")");

        $r5 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r5.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("phone not ringing");

        throw $r5;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public com.android.internal.telephony.Connection dial(java.lang.String, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        int i0;
        java.lang.Class r2;
        java.lang.Throwable r3, $r5;
        com.android.internal.telephony.Connection $r4;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r4 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String,int)>(r1, i0);

        exitmonitor r2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.internal.telephony.Connection dialInternal(java.lang.String, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1, $r6, $r21;
        int i0;
        com.android.internal.telephony.Connection r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r19, $r20, $r22;
        boolean $z0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r7, $r10, $r13, $r14;
        com.android.internal.telephony.Call$State $r8, $r9, $r11, $r12;
        com.android.internal.telephony.CallStateException $r15, $r16, $r17;
        android.net.sip.SipException $r18, r23;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialInternal: dialString=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xxxxxx");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>($r6);

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void clearDisconnected()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: boolean canDial()>();

        if $z0 != 0 goto label1;

        $r15 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r15.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("dialInternal: cannot dial in current state");

        throw $r15;

     label1:
        $r7 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r9 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        if $r8 != $r9 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void switchHoldingAndActive()>();

     label2:
        $r10 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r11 = virtualinvoke $r10.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r12 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r11 == $r12 goto label3;

        $r16 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r16.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("cannot dial in current state");

        throw $r16;

     label3:
        $r13 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r13.<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>(0);

     label4:
        $r14 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        r2 = virtualinvoke $r14.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>(r1);

     label5:
        return r2;

     label6:
        $r18 := @caughtexception;

        r23 = $r18;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void loge(java.lang.String,java.lang.Exception)>("dialInternal: ", r23);

        $r17 = new com.android.internal.telephony.CallStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dial error: ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r21);

        throw $r17;

        catch android.net.sip.SipException from label4 to label5 with label6;
    }

    public void switchHoldingAndActive() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r11;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r4, $r5, $r7, $r9, $r10;
        com.android.internal.telephony.Call$State $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("dialInternal: switch fg and bg");

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r4 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        virtualinvoke $r4.<com.android.internal.telephony.sip.SipPhone$SipCall: void switchWith(com.android.internal.telephony.sip.SipPhone$SipCall)>($r3);

        $r5 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke $r6.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 == 0 goto label2;

        $r10 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        virtualinvoke $r10.<com.android.internal.telephony.sip.SipPhone$SipCall: void hold()>();

     label2:
        $r7 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z1 = virtualinvoke $r8.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z1 == 0 goto label3;

        $r9 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r9.<com.android.internal.telephony.sip.SipPhone$SipCall: void unhold()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean canConference()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("canConference: ret=true");

        return 1;
    }

    public void conference() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r22;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r9, $r13, $r16, $r20, $r21;
        com.android.internal.telephony.Call$State $r4, $r5, $r10, $r14, $r18, $r19;
        com.android.internal.telephony.CallStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r15;
        java.lang.String $r17;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        if $r4 != $r5 goto label2;

        $r16 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r19 = virtualinvoke $r16.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r18 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        if $r19 == $r18 goto label3;

     label2:
        $r6 = new com.android.internal.telephony.CallStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrong state to merge calls: fg=");

        $r9 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", bg=");

        $r13 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        $r14 = virtualinvoke $r13.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r17);

        throw $r6;

     label3:
        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void log(java.lang.String)>("conference: merge fg & bg");

        $r20 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r21 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        virtualinvoke $r20.<com.android.internal.telephony.sip.SipPhone$SipCall: void merge(com.android.internal.telephony.sip.SipPhone$SipCall)>($r21);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r22 := @caughtexception;

        r2 = $r22;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void conference(com.android.internal.telephony.Call) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.Call r1;
        java.lang.Class r2, $r11;
        java.lang.Throwable r3, $r14;
        boolean $z0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r4, $r5;
        com.android.internal.telephony.CallStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r13;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: com.android.internal.telephony.Call;

        r2 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $z0 = r1 instanceof com.android.internal.telephony.sip.SipPhone$SipCall;

        if $z0 != 0 goto label2;

        $r6 = new com.android.internal.telephony.CallStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expect ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "com/android/internal/telephony/sip/SipPhone$SipCall");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", cannot merge with ");

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label2:
        $r5 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r4 = (com.android.internal.telephony.sip.SipPhone$SipCall) r1;

        virtualinvoke $r5.<com.android.internal.telephony.sip.SipPhone$SipCall: void merge(com.android.internal.telephony.sip.SipPhone$SipCall)>($r4);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean canTransfer()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        return 0;
    }

    public void explicitCallTransfer()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        return;
    }

    public void clearDisconnected()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r6;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r4, $r5;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: void clearDisconnected()>();

        $r4 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r4.<com.android.internal.telephony.sip.SipPhone$SipCall: void clearDisconnected()>();

        $r5 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        virtualinvoke $r5.<com.android.internal.telephony.sip.SipPhone$SipCall: void clearDisconnected()>();

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void updatePhoneState()>();

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void notifyPreciseCallStateChanged()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void sendDtmf(char)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        char c0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r11;
        boolean $z0, $z1;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3, $r5;
        com.android.internal.telephony.Call$State $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDtmf called with invalid character \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void loge(java.lang.String)>($r10);

        goto label6;

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z1 = virtualinvoke $r4.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z1 == 0 goto label6;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label2:
        $r5 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r5.<com.android.internal.telephony.sip.SipPhone$SipCall: void sendDtmf(char)>(c0);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void startDtmf(char)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        char c0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startDtmf called with invalid character \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void loge(java.lang.String)>($r5);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>(c0);

     label2:
        return;
    }

    public void stopDtmf()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        return;
    }

    public void sendBurstDtmf(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void loge(java.lang.String)>("sendBurstDtmf() is a CDMA method");

        return;
    }

    public void getOutgoingCallerIdDisplay(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void setOutgoingCallerIdDisplay(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void getCallWaiting(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void setCallWaiting(boolean, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: void loge(java.lang.String)>("call waiting not supported");

        return;
    }

    public void setEchoSuppressionEnabled()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.Class r1;
        android.media.AudioManager r2;
        java.lang.String r3;
        java.lang.Throwable r4, $r8;
        android.content.Context $r5;
        java.lang.Object $r6;
        boolean $z0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r7;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r5 = r0.<com.android.internal.telephony.sip.SipPhone: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r2 = (android.media.AudioManager) $r6;

        r3 = virtualinvoke r2.<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>("ec_supported");

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("off");

        if $z0 == 0 goto label2;

        $r7 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r7.<com.android.internal.telephony.sip.SipPhone$SipCall: void setAudioGroupMode()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setMute(boolean)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean z0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r4;
        com.android.internal.telephony.sip.SipPhone$SipCall $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        z0 := @parameter0: boolean;

        r1 = class "com/android/internal/telephony/sip/SipPhone";

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>(z0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean getMute()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1, $r3, $r4;
        com.android.internal.telephony.Call$State $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        $z1 = virtualinvoke $r4.<com.android.internal.telephony.sip.SipPhone$SipCall: boolean getMute()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        $z1 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone$SipCall: boolean getMute()>();

     label2:
        return $z1;
    }

    public com.android.internal.telephony.Call getForegroundCall()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        return $r1;
    }

    public com.android.internal.telephony.Call getBackgroundCall()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mBackgroundCall>;

        return $r1;
    }

    public com.android.internal.telephony.Call getRingingCall()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        return $r1;
    }

    public android.telephony.ServiceState getServiceState()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.telephony.ServiceState $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>();

        return $r1;
    }

    private java.lang.String getUriString(android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipProfile r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.net.sip.SipProfile;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getUserName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r6 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipDomain(android.net.sip.SipProfile)>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private java.lang.String getSipDomain(android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipProfile r1;
        java.lang.String r2, $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 = virtualinvoke r1.<android.net.sip.SipProfile: java.lang.String getSipDomain()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>(":5060");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 5;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r3;

     label1:
        return r2;
    }

    private static com.android.internal.telephony.Call$State getCallStateFrom(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        boolean $z0;
        com.android.internal.telephony.Call$State $r1, $r2, $r3, $r4, $r5, $r6, $r11, $r12;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $z0 = virtualinvoke r0.<android.net.sip.SipAudioCall: boolean isOnHold()>();

        if $z0 == 0 goto label1;

        $r12 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State HOLDING>;

        return $r12;

     label1:
        i0 = virtualinvoke r0.<android.net.sip.SipAudioCall: int getState()>();

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label8;
            case 2: goto label8;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label7;
            default: goto label8;
        };

     label2:
        $r1 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        return $r1;

     label3:
        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        return $r6;

     label4:
        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State DIALING>;

        return $r5;

     label5:
        $r4 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ALERTING>;

        return $r4;

     label6:
        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State DISCONNECTING>;

        return $r3;

     label7:
        $r2 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        return $r2;

     label8:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal connection state: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.sip.SipPhone: void slog(java.lang.String)>($r10);

        $r11 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State DISCONNECTED>;

        return $r11;
    }

    private void log(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipPhone", r1);

        return;
    }

    private static void slog(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipPhone", r0);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhone", r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Exception)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        java.lang.Exception r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SipPhone", r1, r2);

        return;
    }

    public volatile android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        android.net.LinkProperties $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>(r1);

        return $r2;
    }

    public volatile boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean needsOtaServiceProvisioning()>();

        return $z0;
    }

    public volatile void setCellBroadcastSmsConfig(int[], android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>(r1, r2);

        return;
    }

    public volatile void getCellBroadcastSmsConfig(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void getCellBroadcastSmsConfig(android.os.Message)>(r1);

        return;
    }

    public volatile void activateCellBroadcastSms(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void activateCellBroadcastSms(int,android.os.Message)>(i0, r1);

        return;
    }

    public volatile com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.uicc.IccFileHandler $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.IccPhoneBookInterfaceManager $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.PhoneSubInfo $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>();

        return $r1;
    }

    public volatile void saveClirSetting(int)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void saveClirSetting(int)>(i0);

        return;
    }

    public volatile boolean isDataConnectivityPossible()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean isDataConnectivityPossible()>();

        return $z0;
    }

    public volatile boolean disableDataConnectivity()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean disableDataConnectivity()>();

        return $z0;
    }

    public volatile boolean enableDataConnectivity()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean enableDataConnectivity()>();

        return $z0;
    }

    public volatile void setDataEnabled(boolean)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setDataEnabled(boolean)>(z0);

        return;
    }

    public volatile boolean getDataEnabled()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataEnabled()>();

        return $z0;
    }

    public volatile void setDataRoamingEnabled(boolean)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>(z0);

        return;
    }

    public volatile boolean getDataRoamingEnabled()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>();

        return $z0;
    }

    public volatile void disableLocationUpdates()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void disableLocationUpdates()>();

        return;
    }

    public volatile void enableLocationUpdates()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void enableLocationUpdates()>();

        return;
    }

    public volatile void updateServiceLocation()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void updateServiceLocation()>();

        return;
    }

    public volatile java.util.List getCurrentDataConnectionList()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>();

        return $r1;
    }

    public volatile void getDataCallList(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void getDataCallList(android.os.Message)>(r1);

        return;
    }

    public volatile void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void getNeighboringCids(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void getNeighboringCids(android.os.Message)>(r1);

        return;
    }

    public volatile void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.OperatorInfo r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: com.android.internal.telephony.OperatorInfo;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)>(r1, r2);

        return;
    }

    public volatile void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>(r1);

        return;
    }

    public volatile void getAvailableNetworks(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void getAvailableNetworks(android.os.Message)>(r1);

        return;
    }

    public volatile com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.IccCard $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>();

        return $r1;
    }

    public volatile boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>();

        return $z0;
    }

    public volatile void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0, i1, i2;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>(i0, i1, r1, i2, r2);

        return;
    }

    public volatile void getCallForwardingOption(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void getCallForwardingOption(int,android.os.Message)>(i0, r1);

        return;
    }

    public volatile void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return;
    }

    public volatile void setLine1Number(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return;
    }

    public volatile java.lang.String getLine1AlphaTag()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>();

        return $r1;
    }

    public volatile java.lang.String getLine1Number()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>();

        return $r1;
    }

    public volatile java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>();

        return $r1;
    }

    public volatile java.lang.String getGroupIdLevel1()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getGroupIdLevel1()>();

        return $r1;
    }

    public volatile java.lang.String getSubscriberId()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>();

        return $r1;
    }

    public volatile java.lang.String getMeid()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>();

        return $r1;
    }

    public volatile java.lang.String getEsn()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>();

        return $r1;
    }

    public volatile java.lang.String getImei()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>();

        return $r1;
    }

    public volatile java.lang.String getDeviceSvn()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>();

        return $r1;
    }

    public volatile java.lang.String getDeviceId()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>();

        return $r1;
    }

    public volatile java.lang.String getVoiceMailAlphaTag()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>();

        return $r1;
    }

    public volatile java.lang.String getVoiceMailNumber()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>();

        return $r1;
    }

    public volatile void setRadioPower(boolean)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>(z0);

        return;
    }

    public volatile void unregisterForSuppServiceNotification(android.os.Handler)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void unregisterForSuppServiceNotification(android.os.Handler)>(r1);

        return;
    }

    public volatile void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void sendUssdResponse(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>(r1);

        return;
    }

    public volatile boolean handlePinMmi(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean handlePinMmi(java.lang.String)>(r1);

        return $z0;
    }

    public volatile boolean handleInCallMmiCommands(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean handleInCallMmiCommands(java.lang.String)>(r1);

        return $z0;
    }

    public volatile boolean canDial()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean canDial()>();

        return $z0;
    }

    public volatile void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.sip.SipPhone r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void notifyCallForwardingIndicator()>();

        return;
    }

    public volatile com.android.internal.telephony.Phone$DataActivityState getDataActivityState()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.Phone$DataActivityState $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneConstants$DataState $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>(r1);

        return $r2;
    }

    public volatile com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>();

        return $r1;
    }

    public volatile java.util.List getPendingMmiCodes()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>();

        return $r1;
    }

    public volatile boolean getCallForwardingIndicator()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>();

        return $z0;
    }

    public volatile boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>();

        return $z0;
    }

    public volatile android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.telephony.SignalStrength $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>();

        return $r1;
    }

    public volatile int getPhoneType()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $i0 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>();

        return $i0;
    }

    public volatile com.android.internal.telephony.PhoneConstants$State getState()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.PhoneConstants$State $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        return $r1;
    }

    public volatile android.telephony.CellLocation getCellLocation()
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.telephony.CellLocation $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>();

        return $r1;
    }

    public volatile void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void unregisterForRingbackTone(android.os.Handler)>(r1);

        return;
    }

    public volatile void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void registerForRingbackTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile com.android.internal.telephony.Connection dial(java.lang.String, com.android.internal.telephony.UUSInfo, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.UUSInfo r2;
        int i0;
        com.android.internal.telephony.Connection $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.UUSInfo;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo,int)>(r1, r2, i0);

        return $r3;
    }

    static android.net.sip.SipProfile access$100(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipProfile $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile mProfile>;

        return $r1;
    }

    static com.android.internal.telephony.sip.SipPhone$SipCall access$200(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mRingingCall>;

        return $r1;
    }

    static android.content.Context access$300(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: android.content.Context mContext>;

        return $r1;
    }

    static void access$400(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.Connection r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter1: com.android.internal.telephony.Connection;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone: void notifyDisconnectP(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    static com.android.internal.telephony.Call$State access$1100(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        com.android.internal.telephony.Call$State $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = staticinvoke <com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call$State getCallStateFrom(android.net.sip.SipAudioCall)>(r0);

        return $r1;
    }

    static com.android.internal.telephony.sip.SipPhone$SipCall access$1200(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall mForegroundCall>;

        return $r1;
    }

    static java.lang.String access$1300(com.android.internal.telephony.sip.SipPhone, android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipProfile r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r1 := @parameter1: android.net.sip.SipProfile;

        $r2 = specialinvoke r0.<com.android.internal.telephony.sip.SipPhone: java.lang.String getUriString(android.net.sip.SipProfile)>(r1);

        return $r2;
    }

    static android.net.sip.SipManager access$1400(com.android.internal.telephony.sip.SipPhone)
    {
        com.android.internal.telephony.sip.SipPhone r0;
        android.net.sip.SipManager $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone: android.net.sip.SipManager mSipManager>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.sip.SipPhone: int TIMEOUT_HOLD_CALL> = 15;

        <com.android.internal.telephony.sip.SipPhone: int TIMEOUT_ANSWER_CALL> = 8;

        <com.android.internal.telephony.sip.SipPhone: int TIMEOUT_MAKE_CALL> = 15;

        <com.android.internal.telephony.sip.SipPhone: boolean VDBG> = 0;

        <com.android.internal.telephony.sip.SipPhone: boolean DBG> = 1;

        <com.android.internal.telephony.sip.SipPhone: java.lang.String LOG_TAG> = "SipPhone";

        return;
    }
}
