public class com.android.internal.telephony.imsphone.ImsPhone extends com.android.internal.telephony.imsphone.ImsPhoneBase
{
    private static final java.lang.String LOG_TAG;
    private static final boolean DBG;
    private static final boolean VDBG;
    protected static final int EVENT_SET_CALL_BARRING_DONE;
    protected static final int EVENT_GET_CALL_BARRING_DONE;
    protected static final int EVENT_SET_CALL_WAITING_DONE;
    protected static final int EVENT_GET_CALL_WAITING_DONE;
    public static final java.lang.String CS_FALLBACK;
    static final int RESTART_ECM_TIMER;
    static final int CANCEL_ECM_TIMER;
    private static final int DEFAULT_ECM_EXIT_TIMER_VALUE;
    com.android.internal.telephony.PhoneBase mDefaultPhone;
    com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT;
    java.util.ArrayList mPendingMMIs;
    android.os.Registrant mPostDialHandler;
    android.telephony.ServiceState mSS;
    private java.lang.String mLastDialString;
    android.os.PowerManager$WakeLock mWakeLock;
    protected boolean mIsPhoneInEcmState;
    private android.os.Registrant mEcmExitRespRegistrant;
    private final android.os.RegistrantList mSilentRedialRegistrants;
    private java.lang.Runnable mExitEcmRunnable;
    com.android.ims.ImsEcbmStateListener mImsEcbmStateListener;

    void <init>(android.content.Context, com.android.internal.telephony.PhoneNotifier, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Context r1;
        com.android.internal.telephony.PhoneNotifier r2;
        com.android.internal.telephony.Phone r3;
        android.os.PowerManager r4;
        java.util.ArrayList $r5;
        android.telephony.ServiceState $r6, $r12;
        android.os.RegistrantList $r7;
        com.android.internal.telephony.imsphone.ImsPhone$1 $r8;
        com.android.internal.telephony.imsphone.ImsPhone$2 $r9;
        com.android.internal.telephony.PhoneBase $r10, $r13;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r11;
        int $i0;
        boolean $z0;
        android.os.PowerManager$WakeLock $r14, $r16;
        java.lang.Object $r15;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)>("ImsPhone", r1, r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs> = $r5;

        $r6 = new android.telephony.ServiceState;

        specialinvoke $r6.<android.telephony.ServiceState: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS> = $r6;

        $r7 = new android.os.RegistrantList;

        specialinvoke $r7.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mSilentRedialRegistrants> = $r7;

        $r8 = new com.android.internal.telephony.imsphone.ImsPhone$1;

        specialinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhone$1: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable> = $r8;

        $r9 = new com.android.internal.telephony.imsphone.ImsPhone$2;

        specialinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhone$2: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.ims.ImsEcbmStateListener mImsEcbmStateListener> = $r9;

        $r10 = (com.android.internal.telephony.PhoneBase) r3;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone> = $r10;

        $r11 = new com.android.internal.telephony.imsphone.ImsPhoneCallTracker;

        specialinvoke $r11.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT> = $r11;

        $r12 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r12.<android.telephony.ServiceState: void setStateOff()>();

        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i0 = virtualinvoke $r13.<com.android.internal.telephony.PhoneBase: int getPhoneId()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId> = $i0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ril.cdma.inecmmode", 0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState> = $z0;

        $r15 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r4 = (android.os.PowerManager) $r15;

        $r14 = virtualinvoke r4.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ImsPhone");

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock> = $r14;

        $r16 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r16.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        return;
    }

    public void updateParentPhone(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase r1, $r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone> = r1;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.PhoneBase: int getPhoneId()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId> = $i0;

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.ArrayList $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "dispose");

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void dispose()>();

        return;
    }

    public void removeReferences()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "removeReferences");

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void removeReferences()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT> = null;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS> = null;

        return;
    }

    public android.telephony.ServiceState getServiceState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ServiceState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        return $r1;
    }

    void setServiceState(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.telephony.ServiceState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r1.<android.telephony.ServiceState: void setState(int)>(i0);

        return;
    }

    public com.android.internal.telephony.CallTracker getCallTracker()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        return $r1;
    }

    public java.util.List getPendingMmiCodes()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        return $r1;
    }

    public void acceptCall(int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void acceptCall(int)>(i0);

        return;
    }

    public void rejectCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void rejectCall()>();

        return;
    }

    public void switchHoldingAndActive() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void switchWaitingOrHoldingAndActive()>();

        return;
    }

    public boolean canConference()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean canConference()>();

        return $z0;
    }

    public boolean canDial()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean canDial()>();

        return $z0;
    }

    public void conference()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void conference()>();

        return;
    }

    public void clearDisconnected()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void clearDisconnected()>();

        return;
    }

    public boolean canTransfer()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean canTransfer()>();

        return $z0;
    }

    public void explicitCallTransfer()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void explicitCallTransfer()>();

        return;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mForegroundCall>;

        return $r2;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mBackgroundCall>;

        return $r2;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mRingingCall>;

        return $r2;
    }

    private boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.CallStateException r2, $r12, $r14, r15;
        int $i0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r3, $r6, $r10;
        com.android.internal.telephony.Call$State $r4, $r5, $r7, $r8;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r9, $r11;
        com.android.internal.telephony.Phone$SuppService $r13;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r4 == $r5 goto label5;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 0: rejectCall");

     label2:
        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r11.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void rejectCall()>();

     label3:
        goto label9;

     label4:
        $r12 := @caughtexception;

        r2 = $r12;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "reject failed", r2);

        $r13 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService REJECT>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r13);

        goto label9;

     label5:
        $r6 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r8 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r7 == $r8 goto label9;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 0: hangupWaitingOrBackground");

     label6:
        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r10 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        virtualinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void hangup(com.android.internal.telephony.imsphone.ImsPhoneCall)>($r10);

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;

        r15 = $r14;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "hangup failed", r15);

     label9:
        return 1;

        catch com.android.internal.telephony.CallStateException from label2 to label3 with label4;
        catch com.android.internal.telephony.CallStateException from label6 to label7 with label8;
    }

    private boolean handleCallWaitingIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.imsphone.ImsPhoneCall r2;
        com.android.internal.telephony.CallStateException r3, $r9;
        com.android.internal.telephony.Call$State $r4, $r5;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r6, $r7;
        com.android.internal.telephony.Phone$SuppService $r8, $r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 <= 2 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

     label2:
        if i0 <= 1 goto label3;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "not support 1X SEND");

        $r8 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService HANGUP>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r8);

        goto label5;

     label3:
        $r4 = virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r4 == $r5 goto label4;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 1: hangup foreground");

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void hangup(com.android.internal.telephony.imsphone.ImsPhoneCall)>(r2);

        goto label5;

     label4:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 1: switchWaitingOrHoldingAndActive");

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void switchWaitingOrHoldingAndActive()>();

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "hangup failed", r3);

        $r10 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService HANGUP>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r10);

     label7:
        return 1;

        catch com.android.internal.telephony.CallStateException from label2 to label5 with label6;
    }

    private boolean handleCallHoldIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.CallStateException r3, $r10;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r4;
        com.android.internal.telephony.Call$State $r5, $r6;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r7, $r8;
        com.android.internal.telephony.Phone$SuppService $r9, $r11;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 <= 2 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        if i0 <= 1 goto label2;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "separate not supported");

        $r9 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService SEPARATE>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r9);

        goto label6;

     label2:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r5 == $r6 goto label3;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 2: accept ringing call");

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void acceptCall(int)>(2);

        goto label4;

     label3:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 2: switchWaitingOrHoldingAndActive");

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void switchWaitingOrHoldingAndActive()>();

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "switch failed", r3);

        $r11 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService SWITCH>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r11);

     label6:
        return 1;

        catch com.android.internal.telephony.CallStateException from label2 to label4 with label5;
    }

    private boolean handleMultipartyIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        return 0;

     label1:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 3: merge calls");

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void conference()>();

        return 1;
    }

    private boolean handleEctIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.Phone$SuppService $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 == 1 goto label1;

        return 0;

     label1:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 4: not support explicit call transfer");

        $r2 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService TRANSFER>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r2);

        return 1;
    }

    private boolean handleCcbsIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int $i0;
        com.android.internal.telephony.Phone$SuppService $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        return 0;

     label1:
        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("ImsPhone", "MmiCode 5: CCBS not supported!");

        $r2 = <com.android.internal.telephony.Phone$SuppService: com.android.internal.telephony.Phone$SuppService UNKNOWN>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>($r2);

        return 1;
    }

    public boolean handleInCallMmiCommands(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        char c0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInCall()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        z0 = 0;

        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        tableswitch(c0)
        {
            case 48: goto label3;
            case 49: goto label4;
            case 50: goto label5;
            case 51: goto label6;
            case 52: goto label7;
            case 53: goto label8;
            default: goto label9;
        };

     label3:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label4:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label5:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label6:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label7:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleEctIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label8:
        z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCcbsIncallSupplementaryService(java.lang.String)>(r1);

        goto label9;

     label9:
        return z0;
    }

    boolean isInCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Call$State r1, r2, r3;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        r1 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        r2 = virtualinvoke $r5.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        r3 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r3.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    void notifyNewRingingConnection(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.PhoneBase $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        virtualinvoke $r2.<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    public com.android.internal.telephony.Connection dial(java.lang.String, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.Connection $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    protected com.android.internal.telephony.Connection dialInternal(java.lang.String, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2, r3, $r9, $r15;
        int i0, $i1, $i3;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r4;
        boolean $z0, $z1, $z2;
        com.android.internal.telephony.PhoneBase $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.util.ArrayList $r11;
        android.os.AsyncResult $r12;
        com.android.internal.telephony.CallStateException $r13;
        android.os.RegistrantList $r14;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r16, $r19, $r20;
        com.android.internal.telephony.Connection $r17, $r18, $r21;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleInCallMmiCommands(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i1 = virtualinvoke $r5.<com.android.internal.telephony.PhoneBase: int getPhoneType()>();

        if $i1 != 2 goto label2;

        $r20 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r21 = virtualinvoke $r20.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>(r1, i0);

        return $r21;

     label2:
        r3 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortionAlt(java.lang.String)>(r2);

        r4 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newFromDialString(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone)>(r3, r0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialing w/ mmi \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'...");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r9);

        if r4 != null goto label3;

        $r19 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r18 = virtualinvoke $r19.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>(r1, i0);

        return $r18;

     label3:
        $z1 = virtualinvoke r4.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isTemporaryModeCLIR()>();

        if $z1 == 0 goto label4;

        $r16 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r15 = virtualinvoke r4.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: java.lang.String getDialingNumber()>();

        $i3 = virtualinvoke r4.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: int getCLIRMode()>();

        $r17 = virtualinvoke $r16.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,int)>($r15, $i3, i0);

        return $r17;

     label4:
        $z2 = virtualinvoke r4.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isSupportedOverImsPhone()>();

        if $z2 != 0 goto label5;

        $r13 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r13.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("cs_fallback");

        throw $r13;

     label5:
        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $r14 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mMmiRegistrants>;

        $r12 = new android.os.AsyncResult;

        specialinvoke $r12.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r4, null);

        virtualinvoke $r14.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r12);

        virtualinvoke r4.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void processCode()>();

        return null;
    }

    public void sendDtmf(char)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        char c0;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1, $r4;
        com.android.internal.telephony.PhoneConstants$State $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDtmf called with invalid character \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsPhone", $r9);

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r3 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.PhoneConstants$State mState>;

        $r2 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State OFFHOOK>;

        if $r3 != $r2 goto label2;

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void sendDtmf(char)>(c0);

     label2:
        return;
    }

    public void startDtmf(char)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        char c0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startDtmf called with invalid character \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsPhone", $r5);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendDtmf(char)>(c0);

     label2:
        return;
    }

    public void stopDtmf()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        return;
    }

    public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = new android.os.Registrant;

        specialinvoke $r3.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Registrant mPostDialHandler> = $r3;

        return;
    }

    void notifyIncomingRing()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.AsyncResult r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "notifyIncomingRing");

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, null, null);

        r1 = $r2;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(14, r1);

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setMute(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void setMute(boolean)>(z0);

        return;
    }

    public boolean getMute()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean getMute()>();

        return $z0;
    }

    public com.android.internal.telephony.PhoneConstants$State getState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.PhoneConstants$State $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.PhoneConstants$State mState>;

        return $r2;
    }

    private boolean isValidCommandInterfaceCFReason(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isValidCommandInterfaceCFAction(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isCfEnable(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 != 3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private int getConditionFromCFReason(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return -1;
    }

    private int getCFReasonFromCondition(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;

     label5:
        return 3;
    }

    private int getActionFromCFAction(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 4;

     label4:
        return 3;

     label5:
        return -1;
    }

    public void getCallForwardingOption(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, $i3;
        android.os.Message r1, r2;
        com.android.ims.ImsUtInterface r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r8;
        com.android.ims.ImsException $r9, r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingOption reason=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r7);

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFReason(int)>(i0);

        if $z0 == 0 goto label5;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "requesting call forwarding query.");

        r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(13, r1);

     label1:
        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r3 = virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getConditionFromCFReason(int)>(i0);

        interfaceinvoke r3.<com.android.ims.ImsUtInterface: void queryCallForward(int,java.lang.String,android.os.Message)>($i3, null, r2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r10 = $r9;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, r10);

     label4:
        goto label6;

     label5:
        if r1 == null goto label6;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message)>(r1);

     label6:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, i2, $i5, $i7;
        java.lang.String r1, $r11;
        android.os.Message r2;
        com.android.internal.telephony.imsphone.ImsPhone$Cf r4, $r12;
        com.android.ims.ImsUtInterface r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r13;
        byte $b6;
        com.android.ims.ImsException $r14, r15;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Message;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallForwardingOption action=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r11);

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFAction(int)>(i0);

        if $z0 == 0 goto label09;

        $z1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFReason(int)>(i1);

        if $z1 == 0 goto label09;

        $r12 = new com.android.internal.telephony.imsphone.ImsPhone$Cf;

        if i1 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        specialinvoke $r12.<com.android.internal.telephony.imsphone.ImsPhone$Cf: void <init>(java.lang.String,boolean,android.os.Message)>(r1, $z3, r2);

        r4 = $r12;

        $z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isCfEnable(int)>(i0);

        if $z2 == 0 goto label03;

        $b6 = 1;

        goto label04;

     label03:
        $b6 = 0;

     label04:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(12, $b6, 0, r4);

     label05:
        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r5 = virtualinvoke $r13.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i5 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getActionFromCFAction(int)>(i0);

        $i7 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getConditionFromCFReason(int)>(i1);

        interfaceinvoke r5.<com.android.ims.ImsUtInterface: void updateCallForward(int,int,java.lang.String,int,android.os.Message)>($i5, $i7, r1, i2, r2);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

        r15 = $r14;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r2, r15);

     label08:
        goto label10;

     label09:
        if r2 == null goto label10;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message)>(r2);

     label10:
        return;

        catch com.android.ims.ImsException from label05 to label06 with label07;
    }

    public void getCallWaiting(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1, r2;
        com.android.ims.ImsUtInterface r3;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r4;
        com.android.ims.ImsException $r5, r6;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "getCallWaiting");

        r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(37, r1);

     label1:
        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r3 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke r3.<com.android.ims.ImsUtInterface: void queryCallWaiting(android.os.Message)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, r6);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void setCallWaiting(boolean, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        android.os.Message r1, r2;
        com.android.ims.ImsUtInterface r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r8;
        com.android.ims.ImsException $r9, r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallWaiting enable=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r7);

        r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(36, r1);

     label1:
        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r3 = virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke r3.<com.android.ims.ImsUtInterface: void updateCallWaiting(boolean,android.os.Message)>(z0, r2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r10 = $r9;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, r10);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    private int getCBTypeFromFacility(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = "AO";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $r3 = "OI";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $r4 = "OX";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return 4;

     label3:
        $r5 = "AI";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $r6 = "IR";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        return 5;

     label5:
        $r7 = "AB";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label6;

        return 7;

     label6:
        $r8 = "AG";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label7;

        return 8;

     label7:
        $r9 = "AC";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label8;

        return 9;

     label8:
        return 0;
    }

    void getCallBarring(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8;
        android.os.Message r2, r3;
        com.android.ims.ImsUtInterface r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r9;
        int $i1;
        com.android.ims.ImsException $r10, r11;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallBarring facility=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r8);

        r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(35, r2);

     label1:
        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r4 = virtualinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCBTypeFromFacility(java.lang.String)>(r1);

        interfaceinvoke r4.<com.android.ims.ImsUtInterface: void queryCallBarring(int,android.os.Message)>($i1, r3);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r11 = $r10;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r2, r11);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    void setCallBarring(java.lang.String, boolean, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2, $r11;
        boolean z0;
        android.os.Message r3, r4;
        com.android.ims.ImsUtInterface r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r12;
        com.android.ims.ImsException $r13, r14;
        int $i1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Message;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallBarring facility=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lockState=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r11);

        r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(34, r3);

     label1:
        $r12 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r5 = virtualinvoke $r12.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCBTypeFromFacility(java.lang.String)>(r1);

        interfaceinvoke r5.<com.android.ims.ImsUtInterface: void updateCallBarring(int,boolean,android.os.Message,java.lang.String[])>($i1, z0, r4, null);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r14 = $r13;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r3, r14);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void sendUssdResponse(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r2;
        java.util.ArrayList $r3;
        android.os.AsyncResult $r4;
        android.os.RegistrantList $r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "sendUssdResponse");

        r2 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newFromUssdUserInput(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone)>(r1, r0);

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mMmiRegistrants>;

        $r4 = new android.os.AsyncResult;

        specialinvoke $r4.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r2, null);

        virtualinvoke $r5.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r4);

        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void sendUssd(java.lang.String)>(r1);

        return;
    }

    void sendUSSD(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.os.Message r2;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void sendUSSD(java.lang.String,android.os.Message)>(r1, r2);

        return;
    }

    void cancelUSSD()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void cancelUSSD()>();

        return;
    }

    void sendErrorResponse(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandException $r2;
        com.android.internal.telephony.CommandException$Error $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "sendErrorResponse");

        if r1 == null goto label1;

        $r2 = new com.android.internal.telephony.CommandException;

        $r3 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r2.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r3);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r2);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    void sendErrorResponse(android.os.Message, java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        java.lang.Throwable r2;
        com.android.internal.telephony.CommandException $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "sendErrorResponse");

        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)>(r2);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r3);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    void sendErrorResponse(android.os.Message, com.android.ims.ImsReasonInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        com.android.ims.ImsReasonInfo r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        int $i0, $i2;
        java.lang.String $r6;
        com.android.internal.telephony.CommandException $r7;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: com.android.ims.ImsReasonInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendErrorResponse reasonCode=");

        $i0 = virtualinvoke r2.<com.android.ims.ImsReasonInfo: int getCode()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r6);

        if r1 == null goto label1;

        $i2 = virtualinvoke r2.<com.android.ims.ImsReasonInfo: int getCode()>();

        $r7 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(int)>($i2);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r7);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    com.android.internal.telephony.CommandException getCommandException(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.CommandException$Error r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.android.internal.telephony.CommandException $r6;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCommandException code=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r5);

        r1 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        lookupswitch(i0)
        {
            case 801: goto label1;
            case 821: goto label2;
            default: goto label3;
        };

     label1:
        r1 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error REQUEST_NOT_SUPPORTED>;

        goto label3;

     label2:
        r1 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        goto label3;

     label3:
        $r6 = new com.android.internal.telephony.CommandException;

        specialinvoke $r6.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>(r1);

        return $r6;
    }

    com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.Throwable r1;
        boolean $z0;
        com.android.internal.telephony.CommandException $r2, r5;
        com.android.internal.telephony.CommandException$Error $r3;
        com.android.ims.ImsException $r4;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof com.android.ims.ImsException;

        if $z0 == 0 goto label1;

        $r4 = (com.android.ims.ImsException) r1;

        $i0 = virtualinvoke $r4.<com.android.ims.ImsException: int getCode()>();

        r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(int)>($i0);

        goto label2;

     label1:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "getCommandException generic failure");

        $r2 = new com.android.internal.telephony.CommandException;

        $r3 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r2.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r3);

        r5 = $r2;

     label2:
        return r5;
    }

    private void onNetworkInitiatedUssd(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r1;
        android.os.AsyncResult $r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.imsphone.ImsPhoneMmiCode;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "onNetworkInitiatedUssd");

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mMmiCompleteRegistrants>;

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r3.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    void onIncomingUSSD(int, java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, i2;
        java.lang.String r1, $r6;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r2, $r9, r13;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.util.ArrayList $r7, $r8, $r11;
        java.lang.Object $r10, $r12;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onIncomingUSSD ussdMode=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r6);

        if i0 != 1 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z1 = $z4;

        if i0 == 0 goto label03;

        if i0 == 1 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z0 = $z3;

        r2 = null;

        i1 = 0;

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label05:
        if i1 >= i2 goto label07;

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (com.android.internal.telephony.imsphone.ImsPhoneMmiCode) $r10;

        $z2 = virtualinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isPendingUSSD()>();

        if $z2 == 0 goto label06;

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.internal.telephony.imsphone.ImsPhoneMmiCode) $r12;

        goto label07;

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        if r2 == null goto label09;

        if z0 == 0 goto label08;

        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void onUssdFinishedError()>();

        goto label10;

     label08:
        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void onUssdFinished(java.lang.String,boolean)>(r1, z1);

        goto label10;

     label09:
        if z0 != 0 goto label10;

        if r1 == null goto label10;

        r13 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newNetworkInitiatedUssd(java.lang.String,boolean,com.android.internal.telephony.imsphone.ImsPhone)>(r1, z1, r0);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void onNetworkInitiatedUssd(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)>(r13);

     label10:
        return;
    }

    void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r1;
        java.util.ArrayList $r2;
        boolean $z0, $z1;
        android.os.AsyncResult $r3;
        android.os.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.imsphone.ImsPhoneMmiCode;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isUssdRequest()>();

        if $z1 == 0 goto label2;

     label1:
        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mMmiCompleteRegistrants>;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r4.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r3);

     label2:
        return;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneConnection getHandoverConnection()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneConnection r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2, $r3, $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        r1 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.imsphone.ImsPhoneConnection getHandoverConnection()>();

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        r1 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.imsphone.ImsPhoneConnection getHandoverConnection()>();

     label1:
        if r1 != null goto label2;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        r1 = virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.imsphone.ImsPhoneConnection getHandoverConnection()>();

     label2:
        return r1;
    }

    public void notifySrvccState(com.android.internal.telephony.Call$SrvccState)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Call$SrvccState r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Call$SrvccState;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void notifySrvccState(com.android.internal.telephony.Call$SrvccState)>(r1);

        return;
    }

    void initiateSilentRedial()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.os.AsyncResult r2, $r3;
        android.os.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.String mLastDialString>;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        r2 = $r3;

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r4.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r2);

     label1:
        return;
    }

    public void registerForSilentRedial(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void unregisterForSilentRedial(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public long getSubId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase $r1;
        long $l0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $l0 = virtualinvoke $r1.<com.android.internal.telephony.PhoneBase: long getSubId()>();

        return $l0;
    }

    public int getPhoneId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.PhoneBase: int getPhoneId()>();

        return $i0;
    }

    public com.android.internal.telephony.Subscription getSubscriptionInfo()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase $r1;
        com.android.internal.telephony.Subscription $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.Subscription getSubscriptionInfo()>();

        return $r2;
    }

    private com.android.internal.telephony.uicc.IccRecords getIccRecords()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.uicc.IccRecords $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r2 = $r1.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        return $r4;
    }

    private com.android.internal.telephony.CallForwardInfo getCallForwardInfo(com.android.ims.ImsCallForwardInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsCallForwardInfo r1;
        com.android.internal.telephony.CallForwardInfo r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.ims.ImsCallForwardInfo;

        $r3 = new com.android.internal.telephony.CallForwardInfo;

        specialinvoke $r3.<com.android.internal.telephony.CallForwardInfo: void <init>()>();

        r2 = $r3;

        $i0 = r1.<com.android.ims.ImsCallForwardInfo: int mStatus>;

        r2.<com.android.internal.telephony.CallForwardInfo: int status> = $i0;

        $i1 = r1.<com.android.ims.ImsCallForwardInfo: int mCondition>;

        $i2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCFReasonFromCondition(int)>($i1);

        r2.<com.android.internal.telephony.CallForwardInfo: int reason> = $i2;

        r2.<com.android.internal.telephony.CallForwardInfo: int serviceClass> = 1;

        $i3 = r1.<com.android.ims.ImsCallForwardInfo: int mToA>;

        r2.<com.android.internal.telephony.CallForwardInfo: int toa> = $i3;

        $r4 = r1.<com.android.ims.ImsCallForwardInfo: java.lang.String mNumber>;

        r2.<com.android.internal.telephony.CallForwardInfo: java.lang.String number> = $r4;

        $i4 = r1.<com.android.ims.ImsCallForwardInfo: int mTimeSeconds>;

        r2.<com.android.internal.telephony.CallForwardInfo: int timeSeconds> = $i4;

        return r2;
    }

    private com.android.internal.telephony.CallForwardInfo[] handleCfQueryResult(com.android.ims.ImsCallForwardInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsCallForwardInfo[] r1;
        com.android.internal.telephony.CallForwardInfo[] r2;
        com.android.internal.telephony.uicc.IccRecords r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        com.android.ims.ImsCallForwardInfo $r4, $r5, $r7, $r8;
        com.android.internal.telephony.CallForwardInfo $r6;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.ims.ImsCallForwardInfo[];

        r2 = null;

        if r1 == null goto label1;

        $i5 = lengthof r1;

        if $i5 == 0 goto label1;

        $i6 = lengthof r1;

        r2 = newarray (com.android.internal.telephony.CallForwardInfo)[$i6];

     label1:
        r3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        if r1 == null goto label2;

        $i2 = lengthof r1;

        if $i2 != 0 goto label3;

     label2:
        if r3 == null goto label8;

        virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)>(1, 0, null);

        goto label8;

     label3:
        i0 = 0;

        i1 = lengthof r1;

     label4:
        if i0 >= i1 goto label8;

        $r4 = r1[i0];

        $i3 = $r4.<com.android.ims.ImsCallForwardInfo: int mCondition>;

        if $i3 != 0 goto label7;

        if r3 == null goto label7;

        $r7 = r1[i0];

        $i4 = $r7.<com.android.ims.ImsCallForwardInfo: int mStatus>;

        if $i4 != 1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        $r8 = r1[i0];

        $r9 = $r8.<com.android.ims.ImsCallForwardInfo: java.lang.String mNumber>;

        virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)>(1, $z0, $r9);

     label7:
        $r5 = r1[i0];

        $r6 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallForwardInfo getCallForwardInfo(com.android.ims.ImsCallForwardInfo)>($r5);

        r2[i0] = $r6;

        i0 = i0 + 1;

        goto label4;

     label8:
        return r2;
    }

    private int[] handleCbQueryResult(com.android.ims.ImsSsInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsSsInfo[] r1;
        int[] r2;
        com.android.ims.ImsSsInfo $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.ims.ImsSsInfo[];

        r2 = newarray (int)[1];

        r2[0] = 0;

        $r3 = r1[0];

        $i0 = $r3.<com.android.ims.ImsSsInfo: int mStatus>;

        if $i0 != 1 goto label1;

        r2[0] = 1;

     label1:
        return r2;
    }

    private int[] handleCwQueryResult(com.android.ims.ImsSsInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsSsInfo[] r1;
        int[] r2;
        com.android.ims.ImsSsInfo $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.ims.ImsSsInfo[];

        r2 = newarray (int)[2];

        r2[0] = 0;

        $r3 = r1[0];

        $i0 = $r3.<com.android.ims.ImsSsInfo: int mStatus>;

        if $i0 != 1 goto label1;

        r2[0] = 1;

        r2[1] = 1;

     label1:
        return r2;
    }

    private void sendResponse(android.os.Message, java.lang.Object, java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        java.lang.Object r2;
        java.lang.Throwable r3;
        com.android.internal.telephony.CommandException r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Throwable;

        if r1 == null goto label2;

        r4 = null;

        if r3 == null goto label1;

        r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)>(r3);

     label1:
        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, r2, r4);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1, $r15, $r26, $r30, $r33;
        android.os.AsyncResult r2;
        com.android.internal.telephony.uicc.IccRecords r3;
        com.android.internal.telephony.imsphone.ImsPhone$Cf r4;
        com.android.internal.telephony.CallForwardInfo[] r5;
        int[] r6;
        java.lang.Object $r7, $r14, $r16, $r19, $r22, $r24, $r27, $r31;
        java.lang.StringBuilder $r8, $r9, $r10;
        int $i0, $i2, $i3, $i4, $i5;
        java.lang.String $r11, $r36;
        java.lang.Throwable $r12, $r13, $r23, $r25, $r29, $r34, $r35;
        com.android.ims.ImsSsInfo[] $r17, $r18, $r20, $r21;
        com.android.ims.ImsCallForwardInfo[] $r28, $r32;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        $r7 = r1.<android.os.Message: java.lang.Object obj>;

        r2 = (android.os.AsyncResult) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMessage what=");

        $i0 = r1.<android.os.Message: int what>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r11);

        $i2 = r1.<android.os.Message: int what>;

        lookupswitch($i2)
        {
            case 12: goto label01;
            case 13: goto label05;
            case 34: goto label10;
            case 35: goto label07;
            case 36: goto label10;
            case 37: goto label07;
            default: goto label11;
        };

     label01:
        r3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        $r31 = r2.<android.os.AsyncResult: java.lang.Object userObj>;

        r4 = (com.android.internal.telephony.imsphone.ImsPhone$Cf) $r31;

        $z0 = r4.<com.android.internal.telephony.imsphone.ImsPhone$Cf: boolean mIsCfu>;

        if $z0 == 0 goto label04;

        $r34 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r34 != null goto label04;

        if r3 == null goto label04;

        $i5 = r1.<android.os.Message: int arg1>;

        if $i5 != 1 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        $r36 = r4.<com.android.internal.telephony.imsphone.ImsPhone$Cf: java.lang.String mSetCfNumber>;

        virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)>(1, $z1, $r36);

     label04:
        $r33 = r4.<com.android.internal.telephony.imsphone.ImsPhone$Cf: android.os.Message mOnComplete>;

        $r35 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r33, null, $r35);

        goto label12;

     label05:
        r5 = null;

        $r23 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r23 != null goto label06;

        $r27 = r2.<android.os.AsyncResult: java.lang.Object result>;

        $r28 = (com.android.ims.ImsCallForwardInfo[]) $r27;

        $r32 = (com.android.ims.ImsCallForwardInfo[]) $r28;

        r5 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallForwardInfo[] handleCfQueryResult(com.android.ims.ImsCallForwardInfo[])>($r32);

     label06:
        $r24 = r2.<android.os.AsyncResult: java.lang.Object userObj>;

        $r30 = (android.os.Message) $r24;

        $r29 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r30, r5, $r29);

        goto label12;

     label07:
        r6 = null;

        $r12 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r12 != null goto label09;

        $i3 = r1.<android.os.Message: int what>;

        if $i3 != 35 goto label08;

        $r19 = r2.<android.os.AsyncResult: java.lang.Object result>;

        $r21 = (com.android.ims.ImsSsInfo[]) $r19;

        $r20 = (com.android.ims.ImsSsInfo[]) $r21;

        r6 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int[] handleCbQueryResult(com.android.ims.ImsSsInfo[])>($r20);

        goto label09;

     label08:
        $i4 = r1.<android.os.Message: int what>;

        if $i4 != 37 goto label09;

        $r16 = r2.<android.os.AsyncResult: java.lang.Object result>;

        $r18 = (com.android.ims.ImsSsInfo[]) $r16;

        $r17 = (com.android.ims.ImsSsInfo[]) $r18;

        r6 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int[] handleCwQueryResult(com.android.ims.ImsSsInfo[])>($r17);

     label09:
        $r14 = r2.<android.os.AsyncResult: java.lang.Object userObj>;

        $r15 = (android.os.Message) $r14;

        $r13 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r15, r6, $r13);

        goto label12;

     label10:
        $r22 = r2.<android.os.AsyncResult: java.lang.Object userObj>;

        $r26 = (android.os.Message) $r22;

        $r25 = r2.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r26, null, $r25);

        goto label12;

     label11:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void handleMessage(android.os.Message)>(r1);

     label12:
        return;
    }

    public boolean isInEmergencyCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isInEmergencyCall()>();

        return $z0;
    }

    public boolean isInEcm()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        return $z0;
    }

    void sendEmergencyCallbackModeChange()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Intent r1, $r2;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.EMERGENCY_CALLBACK_MODE_CHANGED");

        r1 = $r2;

        $z0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("phoneinECMState", $z0);

        $i0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getPhoneId()>();

        staticinvoke <android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int)>(r1, $i0);

        staticinvoke <android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)>(r1, null, -1);

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "sendEmergencyCallbackModeChange");

        return;
    }

    public void exitEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsEcbm r1;
        com.android.ims.ImsException r2, $r6;
        android.os.PowerManager$WakeLock $r3, $r5;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", "exitEmergencyCallbackMode()");

     label2:
        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        r1 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsEcbm getEcbmInterface()>();

        virtualinvoke r1.<com.android.ims.ImsEcbm: void exitEmergencyCallbackMode()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r2.<com.android.ims.ImsException: void printStackTrace()>();

     label5:
        return;

        catch com.android.ims.ImsException from label2 to label3 with label4;
    }

    private void handleEnterEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        long l0;
        java.lang.StringBuilder $r1, $r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4;
        java.lang.Runnable $r5;
        android.os.PowerManager$WakeLock $r6;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEnterEmergencyCallbackMode,mIsPhoneInEcmState= ");

        $z0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r4);

        $z1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        if $z1 != 0 goto label1;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState> = 1;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendEmergencyCallbackModeChange()>();

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setSystemProperty(java.lang.String,java.lang.String)>("ril.cdma.inecmmode", "true");

        l0 = staticinvoke <android.os.SystemProperties: long getLong(java.lang.String,long)>("ro.cdma.ecmexittimer", 300000L);

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean postDelayed(java.lang.Runnable,long)>($r5, l0);

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void acquire()>();

     label1:
        return;
    }

    private void handleExitEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4;
        java.lang.Runnable $r5;
        android.os.Registrant $r6, $r8;
        java.lang.Boolean $r7;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleExitEmergencyCallbackMode: mIsPhoneInEcmState = ");

        $z0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r4);

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void removeCallbacks(java.lang.Runnable)>($r5);

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Registrant mEcmExitRespRegistrant>;

        if $r6 == null goto label1;

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Registrant mEcmExitRespRegistrant>;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r8.<android.os.Registrant: void notifyResult(java.lang.Object)>($r7);

     label1:
        $z1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState>;

        if $z1 == 0 goto label2;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsPhoneInEcmState> = 0;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setSystemProperty(java.lang.String,java.lang.String)>("ril.cdma.inecmmode", "false");

     label2:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendEmergencyCallbackModeChange()>();

        return;
    }

    void handleTimerInEmergencyCallbackMode(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, $i2, $i3;
        long l1;
        java.lang.Runnable $r1, $r9;
        com.android.internal.telephony.PhoneBase $r2, $r3, $r6, $r10, $r12, $r13;
        java.lang.Boolean $r4, $r7, $r11, $r16;
        com.android.internal.telephony.cdma.CDMAPhone $r5, $r14;
        com.android.internal.telephony.gsm.GSMPhone $r8, $r15;
        java.lang.StringBuilder $r17, $r18, $r19;
        java.lang.String $r20;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label1;
            default: goto label5;
        };

     label1:
        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void removeCallbacks(java.lang.Runnable)>($r1);

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i2 = virtualinvoke $r2.<com.android.internal.telephony.PhoneBase: int getPhoneType()>();

        if $i2 != 1 goto label2;

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r8 = (com.android.internal.telephony.gsm.GSMPhone) $r6;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r8.<com.android.internal.telephony.gsm.GSMPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r7);

        goto label6;

     label2:
        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r5 = (com.android.internal.telephony.cdma.CDMAPhone) $r3;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r5.<com.android.internal.telephony.cdma.CDMAPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r4);

        goto label6;

     label3:
        l1 = staticinvoke <android.os.SystemProperties: long getLong(java.lang.String,long)>("ro.cdma.ecmexittimer", 300000L);

        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean postDelayed(java.lang.Runnable,long)>($r9, l1);

        $r10 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $i3 = virtualinvoke $r10.<com.android.internal.telephony.PhoneBase: int getPhoneType()>();

        if $i3 != 1 goto label4;

        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r15 = (com.android.internal.telephony.gsm.GSMPhone) $r13;

        $r16 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r15.<com.android.internal.telephony.gsm.GSMPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r16);

        goto label6;

     label4:
        $r12 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneBase mDefaultPhone>;

        $r14 = (com.android.internal.telephony.cdma.CDMAPhone) $r12;

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r14.<com.android.internal.telephony.cdma.CDMAPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r11);

        goto label6;

     label5:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleTimerInEmergencyCallbackMode, unsupported action ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsPhone", $r20);

     label6:
        return;
    }

    public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = new android.os.Registrant;

        specialinvoke $r3.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Registrant mEcmExitRespRegistrant> = $r3;

        return;
    }

    public void unsetOnEcbModeExitResponse(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        android.os.Registrant $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Registrant mEcmExitRespRegistrant>;

        virtualinvoke $r2.<android.os.Registrant: void clear()>();

        return;
    }

    public boolean isVolteEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isVolteEnabled()>();

        return $z0;
    }

    public boolean isVtEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isVtEnabled()>();

        return $z0;
    }

    public volatile android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.net.LinkProperties $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>(r1);

        return $r2;
    }

    public volatile boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean needsOtaServiceProvisioning()>();

        return $z0;
    }

    public volatile void setCellBroadcastSmsConfig(int[], android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>(r1, r2);

        return;
    }

    public volatile void getCellBroadcastSmsConfig(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getCellBroadcastSmsConfig(android.os.Message)>(r1);

        return;
    }

    public volatile void activateCellBroadcastSms(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void activateCellBroadcastSms(int,android.os.Message)>(i0, r1);

        return;
    }

    public volatile com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.uicc.IccFileHandler $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.IccPhoneBookInterfaceManager $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneSubInfo $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>();

        return $r1;
    }

    public volatile void saveClirSetting(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void saveClirSetting(int)>(i0);

        return;
    }

    public volatile boolean isDataConnectivityPossible()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean isDataConnectivityPossible()>();

        return $z0;
    }

    public volatile boolean disableDataConnectivity()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean disableDataConnectivity()>();

        return $z0;
    }

    public volatile boolean enableDataConnectivity()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean enableDataConnectivity()>();

        return $z0;
    }

    public volatile void setDataEnabled(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setDataEnabled(boolean)>(z0);

        return;
    }

    public volatile boolean getDataEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getDataEnabled()>();

        return $z0;
    }

    public volatile void setDataRoamingEnabled(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setDataRoamingEnabled(boolean)>(z0);

        return;
    }

    public volatile boolean getDataRoamingEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getDataRoamingEnabled()>();

        return $z0;
    }

    public volatile void disableLocationUpdates()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void disableLocationUpdates()>();

        return;
    }

    public volatile void enableLocationUpdates()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void enableLocationUpdates()>();

        return;
    }

    public volatile void updateServiceLocation()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void updateServiceLocation()>();

        return;
    }

    public volatile java.util.List getCurrentDataConnectionList()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.util.List getCurrentDataConnectionList()>();

        return $r1;
    }

    public volatile void getDataCallList(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getDataCallList(android.os.Message)>(r1);

        return;
    }

    public volatile void getNeighboringCids(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getNeighboringCids(android.os.Message)>(r1);

        return;
    }

    public volatile void selectNetworkManually(com.android.internal.telephony.OperatorInfo, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.OperatorInfo r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.OperatorInfo;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)>(r1, r2);

        return;
    }

    public volatile void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>(r1);

        return;
    }

    public volatile void getAvailableNetworks(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getAvailableNetworks(android.os.Message)>(r1);

        return;
    }

    public volatile com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.IccCard $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.IccCard getIccCard()>();

        return $r1;
    }

    public volatile boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getIccRecordsLoaded()>();

        return $z0;
    }

    public volatile void setOutgoingCallerIdDisplay(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>(i0, r1);

        return;
    }

    public volatile void getOutgoingCallerIdDisplay(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getOutgoingCallerIdDisplay(android.os.Message)>(r1);

        return;
    }

    public volatile void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return;
    }

    public volatile void setLine1Number(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return;
    }

    public volatile java.lang.String getLine1AlphaTag()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getLine1AlphaTag()>();

        return $r1;
    }

    public volatile java.lang.String getLine1Number()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getLine1Number()>();

        return $r1;
    }

    public volatile java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getIccSerialNumber()>();

        return $r1;
    }

    public volatile java.lang.String getGroupIdLevel1()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getGroupIdLevel1()>();

        return $r1;
    }

    public volatile java.lang.String getSubscriberId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getSubscriberId()>();

        return $r1;
    }

    public volatile java.lang.String getMeid()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getMeid()>();

        return $r1;
    }

    public volatile java.lang.String getEsn()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getEsn()>();

        return $r1;
    }

    public volatile java.lang.String getImei()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getImei()>();

        return $r1;
    }

    public volatile java.lang.String getDeviceSvn()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getDeviceSvn()>();

        return $r1;
    }

    public volatile java.lang.String getDeviceId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getDeviceId()>();

        return $r1;
    }

    public volatile java.lang.String getVoiceMailAlphaTag()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getVoiceMailAlphaTag()>();

        return $r1;
    }

    public volatile java.lang.String getVoiceMailNumber()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getVoiceMailNumber()>();

        return $r1;
    }

    public volatile void setRadioPower(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setRadioPower(boolean)>(z0);

        return;
    }

    public volatile void unregisterForSuppServiceNotification(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForSuppServiceNotification(android.os.Handler)>(r1);

        return;
    }

    public volatile void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile boolean handlePinMmi(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean handlePinMmi(java.lang.String)>(r1);

        return $z0;
    }

    public volatile void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyCallForwardingIndicator()>();

        return;
    }

    public volatile com.android.internal.telephony.Phone$DataActivityState getDataActivityState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone$DataActivityState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneConstants$DataState $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>(r1);

        return $r2;
    }

    public volatile com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>();

        return $r1;
    }

    public volatile boolean getCallForwardingIndicator()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getCallForwardingIndicator()>();

        return $z0;
    }

    public volatile boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getMessageWaitingIndicator()>();

        return $z0;
    }

    public volatile android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.SignalStrength $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: android.telephony.SignalStrength getSignalStrength()>();

        return $r1;
    }

    public volatile int getPhoneType()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $i0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: int getPhoneType()>();

        return $i0;
    }

    public volatile android.telephony.CellLocation getCellLocation()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.CellLocation $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: android.telephony.CellLocation getCellLocation()>();

        return $r1;
    }

    public volatile java.util.List getAllCellInfo()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.util.List getAllCellInfo()>();

        return $r1;
    }

    public volatile void unregisterForOnHoldTone(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForOnHoldTone(android.os.Handler)>(r1);

        return;
    }

    public volatile void registerForOnHoldTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForOnHoldTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForRingbackTone(android.os.Handler)>(r1);

        return;
    }

    public volatile void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForRingbackTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void migrateFrom(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneBase r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void migrateFrom(com.android.internal.telephony.PhoneBase)>(r1);

        return;
    }

    public volatile com.android.internal.telephony.Connection dial(java.lang.String, com.android.internal.telephony.UUSInfo, int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.UUSInfo r2;
        int i0;
        com.android.internal.telephony.Connection $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.UUSInfo;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo,int)>(r1, r2, i0);

        return $r3;
    }

    public volatile com.android.internal.telephony.Call getRingingCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.Call getBackgroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.Call getForegroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        return $r1;
    }

    static void access$000(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void handleEnterEmergencyCallbackMode()>();

        return;
    }

    static void access$100(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void handleExitEmergencyCallbackMode()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.imsphone.ImsPhone: int DEFAULT_ECM_EXIT_TIMER_VALUE> = 300000;

        <com.android.internal.telephony.imsphone.ImsPhone: int CANCEL_ECM_TIMER> = 1;

        <com.android.internal.telephony.imsphone.ImsPhone: int RESTART_ECM_TIMER> = 0;

        <com.android.internal.telephony.imsphone.ImsPhone: java.lang.String CS_FALLBACK> = "cs_fallback";

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_GET_CALL_WAITING_DONE> = 37;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SET_CALL_WAITING_DONE> = 36;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_GET_CALL_BARRING_DONE> = 35;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SET_CALL_BARRING_DONE> = 34;

        <com.android.internal.telephony.imsphone.ImsPhone: boolean VDBG> = 0;

        <com.android.internal.telephony.imsphone.ImsPhone: boolean DBG> = 1;

        <com.android.internal.telephony.imsphone.ImsPhone: java.lang.String LOG_TAG> = "ImsPhone";

        return;
    }
}
