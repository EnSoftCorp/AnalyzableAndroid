public abstract class com.android.internal.telephony.ServiceStateTracker extends android.os.Handler
{
    protected static final boolean DBG;
    protected static final boolean VDBG;
    protected static final java.lang.String PROP_FORCE_ROAMING;
    protected com.android.internal.telephony.CommandsInterface mCi;
    protected com.android.internal.telephony.uicc.UiccController mUiccController;
    protected com.android.internal.telephony.uicc.UiccCardApplication mUiccApplcation;
    protected com.android.internal.telephony.uicc.IccRecords mIccRecords;
    protected com.android.internal.telephony.PhoneBase mPhoneBase;
    protected boolean mVoiceCapable;
    public android.telephony.ServiceState mSS;
    protected android.telephony.ServiceState mNewSS;
    private static final long LAST_CELL_INFO_LIST_MAX_AGE_MS;
    protected long mLastCellInfoListTime;
    protected java.util.List mLastCellInfoList;
    protected final android.telephony.CellInfo mCellInfo;
    protected android.telephony.SignalStrength mSignalStrength;
    public com.android.internal.telephony.RestrictedState mRestrictedState;
    public static final int OTASP_UNINITIALIZED;
    public static final int OTASP_UNKNOWN;
    public static final int OTASP_NEEDED;
    public static final int OTASP_NOT_NEEDED;
    protected int[] mPollingContext;
    protected boolean mDesiredPowerState;
    protected boolean mDontPollSignalStrength;
    protected android.os.RegistrantList mRoamingOnRegistrants;
    protected android.os.RegistrantList mRoamingOffRegistrants;
    protected android.os.RegistrantList mAttachedRegistrants;
    protected android.os.RegistrantList mDetachedRegistrants;
    protected android.os.RegistrantList mDataRegStateOrRatChangedRegistrants;
    protected android.os.RegistrantList mNetworkAttachedRegistrants;
    protected android.os.RegistrantList mPsRestrictEnabledRegistrants;
    protected android.os.RegistrantList mPsRestrictDisabledRegistrants;
    protected boolean mPendingRadioPowerOffAfterDataOff;
    protected int mPendingRadioPowerOffAfterDataOffTag;
    protected static final int POLL_PERIOD_MILLIS;
    public static final int DEFAULT_GPRS_CHECK_PERIOD_MILLIS;
    protected static final int EVENT_RADIO_STATE_CHANGED;
    protected static final int EVENT_NETWORK_STATE_CHANGED;
    protected static final int EVENT_GET_SIGNAL_STRENGTH;
    protected static final int EVENT_POLL_STATE_REGISTRATION;
    protected static final int EVENT_POLL_STATE_GPRS;
    protected static final int EVENT_POLL_STATE_OPERATOR;
    protected static final int EVENT_POLL_SIGNAL_STRENGTH;
    protected static final int EVENT_NITZ_TIME;
    protected static final int EVENT_SIGNAL_STRENGTH_UPDATE;
    protected static final int EVENT_RADIO_AVAILABLE;
    protected static final int EVENT_POLL_STATE_NETWORK_SELECTION_MODE;
    protected static final int EVENT_GET_LOC_DONE;
    protected static final int EVENT_SIM_RECORDS_LOADED;
    protected static final int EVENT_SIM_READY;
    protected static final int EVENT_LOCATION_UPDATES_ENABLED;
    protected static final int EVENT_GET_PREFERRED_NETWORK_TYPE;
    protected static final int EVENT_SET_PREFERRED_NETWORK_TYPE;
    protected static final int EVENT_RESET_PREFERRED_NETWORK_TYPE;
    protected static final int EVENT_CHECK_REPORT_GPRS;
    protected static final int EVENT_RESTRICTED_STATE_CHANGED;
    protected static final int EVENT_POLL_STATE_REGISTRATION_CDMA;
    protected static final int EVENT_POLL_STATE_OPERATOR_CDMA;
    protected static final int EVENT_RUIM_READY;
    protected static final int EVENT_RUIM_RECORDS_LOADED;
    protected static final int EVENT_POLL_SIGNAL_STRENGTH_CDMA;
    protected static final int EVENT_GET_SIGNAL_STRENGTH_CDMA;
    protected static final int EVENT_NETWORK_STATE_CHANGED_CDMA;
    protected static final int EVENT_GET_LOC_DONE_CDMA;
    protected static final int EVENT_NV_LOADED;
    protected static final int EVENT_POLL_STATE_CDMA_SUBSCRIPTION;
    protected static final int EVENT_NV_READY;
    protected static final int EVENT_ERI_FILE_LOADED;
    protected static final int EVENT_OTA_PROVISION_STATUS_CHANGE;
    protected static final int EVENT_SET_RADIO_POWER_OFF;
    protected static final int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED;
    protected static final int EVENT_CDMA_PRL_VERSION_CHANGED;
    protected static final int EVENT_RADIO_ON;
    public static final int EVENT_ICC_CHANGED;
    protected static final int EVENT_GET_CELL_INFO_LIST;
    protected static final int EVENT_UNSOL_CELL_INFO_LIST;
    protected static final int EVENT_CHANGE_IMS_STATE;
    protected static final java.lang.String TIMEZONE_PROPERTY;
    protected static final java.lang.String[] GMT_COUNTRY_CODES;
    protected static final java.lang.String REGISTRATION_DENIED_GEN;
    protected static final java.lang.String REGISTRATION_DENIED_AUTH;
    protected boolean mImsRegistrationOnOff;
    protected boolean mAlarmSwitch;
    protected android.content.IntentFilter mIntentFilter;
    protected android.app.PendingIntent mRadioOffIntent;
    protected static final java.lang.String ACTION_RADIO_OFF;
    protected boolean mPowerOffDelayNeed;
    protected boolean mDeviceShuttingDown;
    private android.telephony.SignalStrength mLastSignalStrength;
    private boolean mWantContinuousLocationUpdates;
    private boolean mWantSingleLocationUpdate;

    protected void <init>(com.android.internal.telephony.PhoneBase, com.android.internal.telephony.CommandsInterface, android.telephony.CellInfo)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        com.android.internal.telephony.PhoneBase r1, $r17, $r23;
        com.android.internal.telephony.CommandsInterface r2, $r21, $r22;
        android.telephony.CellInfo r3;
        android.telephony.ServiceState $r4, $r5;
        android.telephony.SignalStrength $r6;
        com.android.internal.telephony.RestrictedState $r7;
        android.os.RegistrantList $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        android.content.Context $r16;
        boolean $z0;
        android.content.res.Resources $r18;
        com.android.internal.telephony.uicc.UiccController $r19, $r20;
        java.lang.String $r24;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        r2 := @parameter1: com.android.internal.telephony.CommandsInterface;

        r3 := @parameter2: android.telephony.CellInfo;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccController mUiccController> = null;

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccCardApplication mUiccApplcation> = null;

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.IccRecords mIccRecords> = null;

        $r4 = new android.telephony.ServiceState;

        specialinvoke $r4.<android.telephony.ServiceState: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS> = $r4;

        $r5 = new android.telephony.ServiceState;

        specialinvoke $r5.<android.telephony.ServiceState: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS> = $r5;

        r0.<com.android.internal.telephony.ServiceStateTracker: java.util.List mLastCellInfoList> = null;

        $r6 = new android.telephony.SignalStrength;

        specialinvoke $r6.<android.telephony.SignalStrength: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength> = $r6;

        $r7 = new com.android.internal.telephony.RestrictedState;

        specialinvoke $r7.<com.android.internal.telephony.RestrictedState: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.RestrictedState mRestrictedState> = $r7;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDontPollSignalStrength> = 0;

        $r8 = new android.os.RegistrantList;

        specialinvoke $r8.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOnRegistrants> = $r8;

        $r9 = new android.os.RegistrantList;

        specialinvoke $r9.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOffRegistrants> = $r9;

        $r10 = new android.os.RegistrantList;

        specialinvoke $r10.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mAttachedRegistrants> = $r10;

        $r11 = new android.os.RegistrantList;

        specialinvoke $r11.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDetachedRegistrants> = $r11;

        $r12 = new android.os.RegistrantList;

        specialinvoke $r12.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDataRegStateOrRatChangedRegistrants> = $r12;

        $r13 = new android.os.RegistrantList;

        specialinvoke $r13.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mNetworkAttachedRegistrants> = $r13;

        $r14 = new android.os.RegistrantList;

        specialinvoke $r14.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictEnabledRegistrants> = $r14;

        $r15 = new android.os.RegistrantList;

        specialinvoke $r15.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictDisabledRegistrants> = $r15;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff> = 0;

        r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag> = 0;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mImsRegistrationOnOff> = 0;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mAlarmSwitch> = 0;

        r0.<com.android.internal.telephony.ServiceStateTracker: android.content.IntentFilter mIntentFilter> = null;

        r0.<com.android.internal.telephony.ServiceStateTracker: android.app.PendingIntent mRadioOffIntent> = null;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPowerOffDelayNeed> = 1;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDeviceShuttingDown> = 0;

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mLastSignalStrength> = null;

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase> = r1;

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.CellInfo mCellInfo> = r3;

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi> = r2;

        $r17 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r16 = virtualinvoke $r17.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r18 = virtualinvoke $r16.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r18.<android.content.res.Resources: boolean getBoolean(int)>(17956931);

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mVoiceCapable> = $z0;

        $r20 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccController mUiccController> = $r20;

        $r19 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccController mUiccController>;

        virtualinvoke $r19.<com.android.internal.telephony.uicc.UiccController: void registerForIccChanged(android.os.Handler,int,java.lang.Object)>(r0, 42, null);

        $r22 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r22.<com.android.internal.telephony.CommandsInterface: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>(r0, 12, null);

        $r21 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r21.<com.android.internal.telephony.CommandsInterface: void registerForCellInfoList(android.os.Handler,int,java.lang.Object)>(r0, 44, null);

        $r23 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r24 = staticinvoke <android.telephony.ServiceState: java.lang.String rilRadioTechnologyToString(int)>(0);

        virtualinvoke $r23.<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>("gsm.network.type", $r24);

        return;
    }

    void requestShutdown()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDeviceShuttingDown>;

        if $z0 != 1 goto label1;

        return;

     label1:
        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDeviceShuttingDown> = 1;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDesiredPowerState> = 0;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()>();

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        com.android.internal.telephony.CommandsInterface $r1, $r3;
        com.android.internal.telephony.uicc.UiccController $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void unSetOnSignalStrengthUpdate(android.os.Handler)>(r0);

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccController mUiccController>;

        virtualinvoke $r2.<com.android.internal.telephony.uicc.UiccController: void unregisterForIccChanged(android.os.Handler)>(r0);

        $r3 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void unregisterForCellInfoList(android.os.Handler)>(r0);

        return;
    }

    public boolean getDesiredPowerState()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDesiredPowerState>;

        return $z0;
    }

    protected boolean notifySignalStrength()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean z0, $z1;
        android.telephony.CellInfo r1, $r4;
        java.lang.NullPointerException r2, $r8;
        java.lang.Throwable r3, $r13;
        android.telephony.SignalStrength $r5, $r6;
        com.android.internal.telephony.PhoneBase $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.String $r14;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        z0 = 0;

        $r4 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.CellInfo mCellInfo>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength>;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mLastSignalStrength>;

        $z1 = virtualinvoke $r6.<android.telephony.SignalStrength: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label5;

     label2:
        $r7 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        virtualinvoke $r7.<com.android.internal.telephony.PhoneBase: void notifySignalStrength()>();

        z0 = 1;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateSignalStrength() Phone already destroyed: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SignalStrength not notified");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void loge(java.lang.String)>($r14);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return z0;

        catch java.lang.NullPointerException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void notifyDataRegStateRilRadioTechnologyChanged()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        int i0, i1;
        android.telephony.ServiceState $r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8, $r10;
        com.android.internal.telephony.PhoneBase $r9;
        android.os.RegistrantList $r11;
        android.util.Pair $r12;
        java.lang.Integer $r13, $r14;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        i0 = virtualinvoke $r1.<android.telephony.ServiceState: int getRilDataRadioTechnology()>();

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        i1 = virtualinvoke $r2.<android.telephony.ServiceState: int getDataRegState()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyDataRegStateRilRadioTechnologyChanged: drs=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rat=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r8);

        $r9 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r10 = staticinvoke <android.telephony.ServiceState: java.lang.String rilRadioTechnologyToString(int)>(i0);

        virtualinvoke $r9.<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>("gsm.network.type", $r10);

        $r11 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDataRegStateOrRatChangedRegistrants>;

        $r12 = new android.util.Pair;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r12.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r14, $r13);

        virtualinvoke $r11.<android.os.RegistrantList: void notifyResult(java.lang.Object)>($r12);

        return;
    }

    protected void useDataRegStateForDataOnlyDevices()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7;
        android.telephony.ServiceState $r3, $r6, $r9, $r10;
        int $i0, $i1, $i2;
        java.lang.String $r8;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mVoiceCapable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("useDataRegStateForDataOnlyDevice: VoiceRegState=");

        $r3 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS>;

        $i0 = virtualinvoke $r3.<android.telephony.ServiceState: int getVoiceRegState()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DataRegState=");

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS>;

        $i1 = virtualinvoke $r6.<android.telephony.ServiceState: int getDataRegState()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r8);

        $r10 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS>;

        $r9 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS>;

        $i2 = virtualinvoke $r9.<android.telephony.ServiceState: int getDataRegState()>();

        virtualinvoke $r10.<android.telephony.ServiceState: void setVoiceRegState(int)>($i2);

     label1:
        return;
    }

    protected void updatePhoneObject()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        com.android.internal.telephony.PhoneBase $r1, $r5;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        boolean $z0;
        android.telephony.ServiceState $r4;
        int $i0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17956986);

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r4 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $i0 = virtualinvoke $r4.<android.telephony.ServiceState: int getRilVoiceRadioTechnology()>();

        virtualinvoke $r5.<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)>($i0);

     label1:
        return;
    }

    public void registerForRoamingOn(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;
        android.telephony.ServiceState $r6;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOnRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $z0 = virtualinvoke $r6.<android.telephony.ServiceState: boolean getRoaming()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForRoamingOn(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOnRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForRoamingOff(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;
        android.telephony.ServiceState $r6;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOffRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $z0 = virtualinvoke $r6.<android.telephony.ServiceState: boolean getRoaming()>();

        if $z0 != 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForRoamingOff(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mRoamingOffRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void reRegisterNetwork(android.os.Message)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Message r1, $r3;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Message obtainMessage(int,java.lang.Object)>(19, r1);

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)>($r3);

        return;
    }

    public void setRadioPower(boolean)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDesiredPowerState> = z0;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()>();

        return;
    }

    public void enableSingleLocationUpdate()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0, $z1;
        com.android.internal.telephony.CommandsInterface $r1;
        android.os.Message $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate> = 1;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Message obtainMessage(int)>(18);

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)>(1, $r2);

        return;
    }

    public void enableLocationUpdates()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0, $z1;
        com.android.internal.telephony.CommandsInterface $r1;
        android.os.Message $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates> = 1;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Message obtainMessage(int)>(18);

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)>(1, $r2);

        return;
    }

    protected void disableSingleLocationUpdate()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0, $z1;
        com.android.internal.telephony.CommandsInterface $r1;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate> = 0;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)>(0, null);

     label1:
        return;
    }

    public void disableLocationUpdates()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean $z0, $z1;
        com.android.internal.telephony.CommandsInterface $r1;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates> = 0;

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantSingleLocationUpdate>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mWantContinuousLocationUpdates>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)>(0, null);

     label1:
        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.ServiceStateTracker r0, r2;
        android.os.Message r1;
        java.lang.Throwable r3, r5, $r13, $r27, $r29, $r36, $r43, $r46;
        java.lang.Object r4, $r14, $r16, $r26, $r30, $r31, $r32, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r28, $r37, $r38, $r39, $r40, $r42, $r45;
        java.lang.String $r12, $r20, $r25, $r41, $r44;
        long $l8, $l9;
        com.android.internal.telephony.PhoneBase $r24;
        java.util.List $r33, $r35, r50;
        android.os.AsyncResult r47, r49;
        com.android.internal.telephony.ServiceStateTracker$CellInfoResult r48;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 38: goto label01;
            case 39: goto label20;
            case 40: goto label20;
            case 41: goto label20;
            case 42: goto label09;
            case 43: goto label10;
            case 44: goto label18;
            default: goto label20;
        };

     label01:
        r2 = r0;

        entermonitor r0;

     label02:
        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff>;

        if $z0 == 0 goto label03;

        $i3 = r1.<android.os.Message: int arg1>;

        $i4 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        if $i3 != $i4 goto label03;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("EVENT_SET_RADIO_OFF, turn radio off now.");

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()>();

        $i6 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        $i5 = $i6 + 1;

        r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag> = $i5;

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff> = 0;

        goto label04;

     label03:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EVENT_SET_RADIO_OFF is stale arg1=");

        $i1 = r1.<android.os.Message: int arg1>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!= tag=");

        $i2 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r12);

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r43 := @caughtexception;

        r3 = $r43;

        exitmonitor r2;

     label07:
        throw r3;

     label08:
        goto label21;

     label09:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void onUpdateIccAvailability()>();

        goto label21;

     label10:
        $r26 = r1.<android.os.Message: java.lang.Object obj>;

        r47 = (android.os.AsyncResult) $r26;

        $r31 = r47.<android.os.AsyncResult: java.lang.Object userObj>;

        r48 = (com.android.internal.telephony.ServiceStateTracker$CellInfoResult) $r31;

        $r32 = r48.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.lang.Object lockObj>;

        r4 = $r32;

        entermonitor $r32;

     label11:
        $r29 = r47.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r29 == null goto label12;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EVENT_GET_CELL_INFO_LIST: error ret null, e=");

        $r36 = r47.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r42 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r41);

        r48.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = null;

        goto label13;

     label12:
        $r30 = r47.<android.os.AsyncResult: java.lang.Object result>;

        $r35 = (java.util.List) $r30;

        r48.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = $r35;

     label13:
        $l9 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: long mLastCellInfoListTime> = $l9;

        $r33 = r48.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list>;

        r0.<com.android.internal.telephony.ServiceStateTracker: java.util.List mLastCellInfoList> = $r33;

        $r34 = r48.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.lang.Object lockObj>;

        virtualinvoke $r34.<java.lang.Object: void notify()>();

        exitmonitor r4;

     label14:
        goto label17;

     label15:
        $r46 := @caughtexception;

        r5 = $r46;

        exitmonitor r4;

     label16:
        throw r5;

     label17:
        goto label21;

     label18:
        $r14 = r1.<android.os.Message: java.lang.Object obj>;

        r49 = (android.os.AsyncResult) $r14;

        $r13 = r49.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r13 == null goto label19;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EVENT_UNSOL_CELL_INFO_LIST: error ignoring, e=");

        $r27 = r49.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r25);

        goto label21;

     label19:
        $r16 = r49.<android.os.AsyncResult: java.lang.Object result>;

        r50 = (java.util.List) $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EVENT_UNSOL_CELL_INFO_LIST: size=");

        $i7 = interfaceinvoke r50.<java.util.List: int size()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" list=");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r50);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r20);

        $l8 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: long mLastCellInfoListTime> = $l8;

        r0.<com.android.internal.telephony.ServiceStateTracker: java.util.List mLastCellInfoList> = r50;

        $r24 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        virtualinvoke $r24.<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)>(r50);

        goto label21;

     label20:
        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled message with number: ");

        $i10 = r1.<android.os.Message: int what>;

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r44);

     label21:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    protected abstract com.android.internal.telephony.Phone getPhone();

    protected abstract void handlePollStateResult(int, android.os.AsyncResult);

    protected abstract void updateSpnDisplay();

    protected abstract void setPowerStateToDesired();

    protected abstract void onUpdateIccAvailability();

    protected abstract void log(java.lang.String);

    protected abstract void loge(java.lang.String);

    public abstract int getCurrentDataConnectionState();

    public abstract boolean isConcurrentVoiceAndDataAllowed();

    public abstract void setImsRegistrationState(boolean);

    public abstract void pollState();

    public void registerForDataConnectionAttached(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0, $i1;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mAttachedRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $i1 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: int getCurrentDataConnectionState()>();

        if $i1 != 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForDataConnectionAttached(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mAttachedRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForDataConnectionDetached(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0, $i1;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDetachedRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $i1 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: int getCurrentDataConnectionState()>();

        if $i1 == 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForDataConnectionDetached(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDetachedRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForDataRegStateOrRatChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDataRegStateOrRatChangedRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void notifyDataRegStateRilRadioTechnologyChanged()>();

        return;
    }

    public void unregisterForDataRegStateOrRatChanged(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mDataRegStateOrRatChangedRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForNetworkAttached(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0, $i1;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;
        android.telephony.ServiceState $r6;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mNetworkAttachedRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $i1 = virtualinvoke $r6.<android.telephony.ServiceState: int getVoiceRegState()>();

        if $i1 != 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForNetworkAttached(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mNetworkAttachedRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForPsRestrictedEnabled(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;
        com.android.internal.telephony.RestrictedState $r6;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictEnabledRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.RestrictedState mRestrictedState>;

        $z0 = virtualinvoke $r6.<com.android.internal.telephony.RestrictedState: boolean isPsRestricted()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForPsRestrictedEnabled(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictEnabledRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void registerForPsRestrictedDisabled(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.Registrant r3, $r4;
        android.os.RegistrantList $r5;
        com.android.internal.telephony.RestrictedState $r6;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = new android.os.Registrant;

        specialinvoke $r4.<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r3 = $r4;

        $r5 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictDisabledRegistrants>;

        virtualinvoke $r5.<android.os.RegistrantList: void add(android.os.Registrant)>(r3);

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.RestrictedState mRestrictedState>;

        $z0 = virtualinvoke $r6.<com.android.internal.telephony.RestrictedState: boolean isPsRestricted()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<android.os.Registrant: void notifyRegistrant()>();

     label1:
        return;
    }

    public void unregisterForPsRestrictedDisabled(android.os.Handler)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.ServiceStateTracker: android.os.RegistrantList mPsRestrictDisabledRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)
    {
        com.android.internal.telephony.ServiceStateTracker r0, r2;
        com.android.internal.telephony.dataconnection.DcTrackerBase r1;
        java.lang.String[] r3;
        java.lang.String r4, $r11, $r14;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r5, $r16;
        boolean $z0, $z1, $z2, $z3;
        com.android.internal.telephony.PhoneBase $r7;
        android.content.Context $r8;
        android.content.res.Resources $r9;
        android.telephony.ServiceState $r10;
        java.lang.StringBuilder $r12, $r13, $r15;
        android.os.Message r17;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.dataconnection.DcTrackerBase;

        r2 = r0;

        entermonitor r0;

     label01:
        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff>;

        if $z0 != 0 goto label08;

        $r7 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236028);

        $r10 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        r4 = virtualinvoke $r10.<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>();

        if r3 == null goto label05;

        if r4 == null goto label05;

        i0 = 0;

     label02:
        $i3 = lengthof r3;

        if i0 >= $i3 goto label05;

        $r11 = r3[i0];

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label04;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not disconnecting data for ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r14);

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()>();

        exitmonitor r2;

     label03:
        return;

     label04:
        i0 = i0 + 1;

        goto label02;

     label05:
        $z1 = virtualinvoke r1.<com.android.internal.telephony.dataconnection.DcTrackerBase: boolean isDisconnected()>();

        if $z1 == 0 goto label06;

        virtualinvoke r1.<com.android.internal.telephony.dataconnection.DcTrackerBase: void cleanUpAllConnections(java.lang.String)>("radioTurnedOff");

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("Data disconnected, turn off radio right away.");

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()>();

        goto label08;

     label06:
        virtualinvoke r1.<com.android.internal.telephony.dataconnection.DcTrackerBase: void cleanUpAllConnections(java.lang.String)>("radioTurnedOff");

        r17 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler)>(r0);

        r17.<android.os.Message: int what> = 38;

        $i2 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        $i1 = $i2 + 1;

        r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag> = $i1;

        r17.<android.os.Message: int arg1> = $i1;

        $z2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: boolean sendMessageDelayed(android.os.Message,long)>(r17, 30000L);

        if $z2 == 0 goto label07;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("Wait upto 30s for data to disconnect, then turn off radio.");

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff> = 1;

        goto label08;

     label07:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("Cannot send delayed Msg, turn off radio right away.");

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()>();

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean processPendingRadioPowerOffAfterDataOff()
    {
        com.android.internal.telephony.ServiceStateTracker r0, r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("Process pending request to turn radio off.");

        $i0 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        $i1 = $i0 + 1;

        r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag> = $i1;

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()>();

        r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff> = 0;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected boolean onSignalStrengthResult(android.os.AsyncResult, boolean)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.os.AsyncResult r1;
        boolean z0, $z1;
        java.lang.Throwable $r3, $r6;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r8;
        android.telephony.SignalStrength $r9, $r12, $r13, $r14;
        java.lang.Object $r10, $r11;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: android.os.AsyncResult;

        z0 := @parameter1: boolean;

        $r3 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r3 != null goto label1;

        $r10 = r1.<android.os.AsyncResult: java.lang.Object result>;

        if $r10 == null goto label1;

        $r11 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r12 = (android.telephony.SignalStrength) $r11;

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength> = $r12;

        $r13 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength>;

        virtualinvoke $r13.<android.telephony.SignalStrength: void validateInput()>();

        $r14 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength>;

        virtualinvoke $r14.<android.telephony.SignalStrength: void setGsm(boolean)>(z0);

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onSignalStrengthResult() Exception from RIL : ");

        $r6 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r8);

        $r9 = new android.telephony.SignalStrength;

        specialinvoke $r9.<android.telephony.SignalStrength: void <init>(boolean)>(z0);

        r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength> = $r9;

     label2:
        $z1 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: boolean notifySignalStrength()>();

        return $z1;
    }

    protected abstract void hangupAndPowerOff();

    protected void cancelPollState()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        int[] $r1;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = newarray (int)[1];

        r0.<com.android.internal.telephony.ServiceStateTracker: int[] mPollingContext> = $r1;

        return;
    }

    protected boolean shouldFixTimeZoneNow(com.android.internal.telephony.PhoneBase, java.lang.String, java.lang.String, boolean)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        com.android.internal.telephony.PhoneBase r1;
        java.lang.String r2, r3, $r6, $r7, $r25, $r27, $r35;
        boolean z0, z1, $z2, $z3, z4;
        int i0, i2;
        long l1;
        com.android.internal.telephony.uicc.UiccCardApplication $r8, $r30;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r32, $r34, $r36, $r37;
        com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState $r28, $r29;
        java.lang.Exception $r31, $r33;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

     label01:
        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label02:
        goto label04;

     label03:
        $r31 := @caughtexception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shouldFixTimeZoneNow: no mcc, operatorNumeric=");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retVal=false");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r35);

        return 0;

     label04:
        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label05:
        goto label07;

     label06:
        $r33 := @caughtexception;

        i2 = i0 + 1;

     label07:
        z4 = 0;

        $r8 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccCardApplication mUiccApplcation>;

        if $r8 == null goto label10;

        $r30 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.uicc.UiccCardApplication mUiccApplcation>;

        $r28 = virtualinvoke $r30.<com.android.internal.telephony.uicc.UiccCardApplication: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState getState()>();

        $r29 = <com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState APPSTATE_UNKNOWN>;

        if $r28 == $r29 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z4 = $z3;

     label10:
        if z4 == 0 goto label11;

        if i0 != i2 goto label12;

     label11:
        if z0 == 0 goto label13;

     label12:
        $z2 = 1;

        goto label14;

     label13:
        $z2 = 0;

     label14:
        z1 = $z2;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shouldFixTimeZoneNow: retVal=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" iccCardExist=");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" operatorNumeric=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mcc=");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" prevOperatorNumeric=");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" prevMcc=");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needToFixTimeZone=");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ltod=");

        $r27 = staticinvoke <android.util.TimeUtils: java.lang.String logTimeOfDay(long)>(l1);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r25);

        return z1;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
    }

    public java.lang.String getSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        java.lang.String r1, r2, $r4;
        com.android.internal.telephony.PhoneBase $r3;
        long $l0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.PhoneBase mPhoneBase>;

        $l0 = virtualinvoke $r3.<com.android.internal.telephony.PhoneBase: long getSubId()>();

        $r4 = staticinvoke <android.telephony.TelephonyManager: java.lang.String getTelephonyProperty(java.lang.String,long,java.lang.String)>(r1, $l0, r2);

        return $r4;
    }

    public java.util.List getAllCellInfo()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        com.android.internal.telephony.ServiceStateTracker$CellInfoResult r1, $r7;
        int i0, $i1;
        android.os.Message r2;
        java.lang.Object r3, $r9, $r23, $r24, r28;
        java.lang.InterruptedException r4, $r25;
        java.lang.Throwable r5, r6, $r26, $r27;
        com.android.internal.telephony.CommandsInterface $r8, $r22;
        java.util.List $r10, $r13, $r17, $r19, $r20, $r21;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r16;
        java.lang.String $r18;
        boolean $z0;
        long $l2, $l3, $l4;
        byte $b5;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r7 = new com.android.internal.telephony.ServiceStateTracker$CellInfoResult;

        specialinvoke $r7.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: void <init>(com.android.internal.telephony.ServiceStateTracker,com.android.internal.telephony.ServiceStateTracker$1)>(r0, null);

        r1 = $r7;

        $r8 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        i0 = interfaceinvoke $r8.<com.android.internal.telephony.CommandsInterface: int getRilVersion()>();

        if i0 < 8 goto label12;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: boolean isCallerOnDifferentThread()>();

        if $z0 == 0 goto label11;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l4 = r0.<com.android.internal.telephony.ServiceStateTracker: long mLastCellInfoListTime>;

        $l3 = $l2 - $l4;

        $b5 = $l3 cmp 2000L;

        if $b5 <= 0 goto label10;

        r2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Message obtainMessage(int,java.lang.Object)>(43, r1);

        $r24 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.lang.Object lockObj>;

        r3 = $r24;

        entermonitor $r24;

     label01:
        r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = null;

        $r22 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r22.<com.android.internal.telephony.CommandsInterface: void getCellInfoList(android.os.Message)>(r2);

     label02:
        $r23 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.lang.Object lockObj>;

        virtualinvoke $r23.<java.lang.Object: void wait(long)>(5000L);

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

        r4 = $r25;

        virtualinvoke r4.<java.lang.InterruptedException: void printStackTrace()>();

     label05:
        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r26 := @caughtexception;

        r5 = $r26;

        exitmonitor r3;

     label08:
        throw r5;

     label09:
        goto label13;

     label10:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("SST.getAllCellInfo(): return last, back to back calls");

        $r21 = r0.<com.android.internal.telephony.ServiceStateTracker: java.util.List mLastCellInfoList>;

        r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = $r21;

        goto label13;

     label11:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("SST.getAllCellInfo(): return last, same thread can\'t block");

        $r20 = r0.<com.android.internal.telephony.ServiceStateTracker: java.util.List mLastCellInfoList>;

        r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = $r20;

        goto label13;

     label12:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("SST.getAllCellInfo(): not implemented");

        r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list> = null;

     label13:
        $r9 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.lang.Object lockObj>;

        r28 = $r9;

        entermonitor $r9;

     label14:
        $r10 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list>;

        if $r10 == null goto label16;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SST.getAllCellInfo(): X size=");

        $r13 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list>;

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" list=");

        $r17 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r18);

        $r19 = r1.<com.android.internal.telephony.ServiceStateTracker$CellInfoResult: java.util.List list>;

        exitmonitor r28;

     label15:
        return $r19;

     label16:
        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>("SST.getAllCellInfo(): X size=0 list=null");

        exitmonitor r28;

     label17:
        return null;

     label18:
        $r27 := @caughtexception;

        r6 = $r27;

        exitmonitor r28;

     label19:
        throw r6;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        android.telephony.CellInfo r1, $r3;
        java.lang.Throwable r2, $r5;
        android.telephony.SignalStrength $r4;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r3 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.CellInfo mCellInfo>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength mSignalStrength>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r18, $r21, $r23, $r24, $r25, $r26, $r28, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r40, $r41, $r42, $r43;
        android.telephony.ServiceState $r6, $r11;
        java.lang.String $r8, $r13, $r19, $r22, $r29, $r34, $r35, $r39, $r44;
        android.telephony.CellInfo $r17;
        com.android.internal.telephony.RestrictedState $r20;
        int[] $r27;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("ServiceStateTracker:");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSS=");

        $r6 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mNewSS=");

        $r11 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mNewSS>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCellInfo=");

        $r17 = r0.<com.android.internal.telephony.ServiceStateTracker: android.telephony.CellInfo mCellInfo>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mRestrictedState=");

        $r20 = r0.<com.android.internal.telephony.ServiceStateTracker: com.android.internal.telephony.RestrictedState mRestrictedState>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPollingContext=");

        $r27 = r0.<com.android.internal.telephony.ServiceStateTracker: int[] mPollingContext>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDesiredPowerState=");

        $z0 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDesiredPowerState>;

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDontPollSignalStrength=");

        $z1 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mDontPollSignalStrength>;

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPendingRadioPowerOffAfterDataOff=");

        $z2 = r0.<com.android.internal.telephony.ServiceStateTracker: boolean mPendingRadioPowerOffAfterDataOff>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r39);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPendingRadioPowerOffAfterDataOffTag=");

        $i0 = r0.<com.android.internal.telephony.ServiceStateTracker: int mPendingRadioPowerOffAfterDataOffTag>;

        $r41 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        return;
    }

    protected void checkCorrectThread()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        java.lang.Thread $r1, $r3;
        android.os.Looper $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Looper getLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: java.lang.Thread getThread()>();

        if $r1 == $r3 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("ServiceStateTracker must be used from within one thread");

        throw $r4;

     label1:
        return;
    }

    protected boolean isCallerOnDifferentThread()
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        boolean z0, $z1;
        java.lang.Thread $r1, $r3;
        android.os.Looper $r2;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: android.os.Looper getLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: java.lang.Thread getThread()>();

        if $r1 == $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        return z0;
    }

    protected void updateCarrierMccMncConfiguration(java.lang.String, java.lang.String, android.content.Context)
    {
        com.android.internal.telephony.ServiceStateTracker r0;
        java.lang.String r1, r2, $r8;
        android.content.Context r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: com.android.internal.telephony.ServiceStateTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.Context;

        if r1 != null goto label1;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label2;

     label1:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update mccmnc=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fromServiceState=true");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.ServiceStateTracker: void log(java.lang.String)>($r8);

        staticinvoke <com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String,boolean)>(r3, r1, 1);

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String ACTION_RADIO_OFF> = "android.intent.action.ACTION_RADIO_OFF";

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String REGISTRATION_DENIED_AUTH> = "Authentication Failure";

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String REGISTRATION_DENIED_GEN> = "General";

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String TIMEZONE_PROPERTY> = "persist.sys.timezone";

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_CHANGE_IMS_STATE> = 45;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_UNSOL_CELL_INFO_LIST> = 44;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_CELL_INFO_LIST> = 43;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_ICC_CHANGED> = 42;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RADIO_ON> = 41;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_CDMA_PRL_VERSION_CHANGED> = 40;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED> = 39;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_SET_RADIO_POWER_OFF> = 38;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_OTA_PROVISION_STATUS_CHANGE> = 37;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_ERI_FILE_LOADED> = 36;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_NV_READY> = 35;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_CDMA_SUBSCRIPTION> = 34;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_NV_LOADED> = 33;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_LOC_DONE_CDMA> = 31;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_NETWORK_STATE_CHANGED_CDMA> = 30;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_SIGNAL_STRENGTH_CDMA> = 29;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_SIGNAL_STRENGTH_CDMA> = 28;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RUIM_RECORDS_LOADED> = 27;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RUIM_READY> = 26;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_OPERATOR_CDMA> = 25;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_REGISTRATION_CDMA> = 24;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RESTRICTED_STATE_CHANGED> = 23;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_CHECK_REPORT_GPRS> = 22;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RESET_PREFERRED_NETWORK_TYPE> = 21;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_SET_PREFERRED_NETWORK_TYPE> = 20;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_PREFERRED_NETWORK_TYPE> = 19;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_LOCATION_UPDATES_ENABLED> = 18;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_SIM_READY> = 17;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_SIM_RECORDS_LOADED> = 16;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_LOC_DONE> = 15;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_NETWORK_SELECTION_MODE> = 14;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RADIO_AVAILABLE> = 13;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_SIGNAL_STRENGTH_UPDATE> = 12;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_NITZ_TIME> = 11;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_SIGNAL_STRENGTH> = 10;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_OPERATOR> = 6;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_GPRS> = 5;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_POLL_STATE_REGISTRATION> = 4;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_GET_SIGNAL_STRENGTH> = 3;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_NETWORK_STATE_CHANGED> = 2;

        <com.android.internal.telephony.ServiceStateTracker: int EVENT_RADIO_STATE_CHANGED> = 1;

        <com.android.internal.telephony.ServiceStateTracker: int DEFAULT_GPRS_CHECK_PERIOD_MILLIS> = 60000;

        <com.android.internal.telephony.ServiceStateTracker: int POLL_PERIOD_MILLIS> = 20000;

        <com.android.internal.telephony.ServiceStateTracker: int OTASP_NOT_NEEDED> = 3;

        <com.android.internal.telephony.ServiceStateTracker: int OTASP_NEEDED> = 2;

        <com.android.internal.telephony.ServiceStateTracker: int OTASP_UNKNOWN> = 1;

        <com.android.internal.telephony.ServiceStateTracker: int OTASP_UNINITIALIZED> = 0;

        <com.android.internal.telephony.ServiceStateTracker: long LAST_CELL_INFO_LIST_MAX_AGE_MS> = 2000L;

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String PROP_FORCE_ROAMING> = "telephony.test.forceRoaming";

        <com.android.internal.telephony.ServiceStateTracker: boolean VDBG> = 0;

        <com.android.internal.telephony.ServiceStateTracker: boolean DBG> = 1;

        $r0 = newarray (java.lang.String)[20];

        $r0[0] = "bf";

        $r0[1] = "ci";

        $r0[2] = "eh";

        $r0[3] = "fo";

        $r0[4] = "gb";

        $r0[5] = "gh";

        $r0[6] = "gm";

        $r0[7] = "gn";

        $r0[8] = "gw";

        $r0[9] = "ie";

        $r0[10] = "lr";

        $r0[11] = "is";

        $r0[12] = "ma";

        $r0[13] = "ml";

        $r0[14] = "mr";

        $r0[15] = "pt";

        $r0[16] = "sl";

        $r0[17] = "sn";

        $r0[18] = "st";

        $r0[19] = "tg";

        <com.android.internal.telephony.ServiceStateTracker: java.lang.String[] GMT_COUNTRY_CODES> = $r0;

        return;
    }
}
