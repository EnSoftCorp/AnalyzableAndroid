public abstract class com.android.internal.telephony.InboundSmsHandler extends com.android.internal.util.StateMachine
{
    protected static final boolean DBG;
    private static final boolean VDBG;
    private static final java.lang.String[] PDU_PROJECTION;
    private static final java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION;
    static final int PDU_COLUMN;
    static final int SEQUENCE_COLUMN;
    static final int DESTINATION_PORT_COLUMN;
    static final int DATE_COLUMN;
    static final int REFERENCE_NUMBER_COLUMN;
    static final int COUNT_COLUMN;
    static final int ADDRESS_COLUMN;
    static final int ID_COLUMN;
    static final java.lang.String SELECT_BY_ID;
    static final java.lang.String SELECT_BY_REFERENCE;
    public static final int EVENT_NEW_SMS;
    static final int EVENT_BROADCAST_SMS;
    static final int EVENT_BROADCAST_COMPLETE;
    static final int EVENT_RETURN_TO_IDLE;
    static final int EVENT_RELEASE_WAKELOCK;
    static final int EVENT_START_ACCEPTING_SMS;
    static final int EVENT_UPDATE_PHONE_OBJECT;
    public static final int EVENT_INJECT_SMS;
    private static final int WAKELOCK_TIMEOUT;
    private static final android.net.Uri sRawUri;
    protected final android.content.Context mContext;
    private final android.content.ContentResolver mResolver;
    private final com.android.internal.telephony.WapPushOverSms mWapPush;
    final android.os.PowerManager$WakeLock mWakeLock;
    final com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState;
    final com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState;
    final com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState;
    final com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState;
    final com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState;
    protected com.android.internal.telephony.SmsStorageMonitor mStorageMonitor;
    private final boolean mSmsReceiveDisabled;
    protected com.android.internal.telephony.PhoneBase mPhone;
    protected com.android.internal.telephony.CellBroadcastHandler mCellBroadcastHandler;
    private android.os.UserManager mUserManager;

    protected void <init>(java.lang.String, android.content.Context, com.android.internal.telephony.SmsStorageMonitor, com.android.internal.telephony.PhoneBase, com.android.internal.telephony.CellBroadcastHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        android.content.Context r2, $r14, $r16, $r19;
        com.android.internal.telephony.SmsStorageMonitor r3;
        com.android.internal.telephony.PhoneBase r4;
        com.android.internal.telephony.CellBroadcastHandler r5;
        boolean z0, $z1, $z2;
        android.os.PowerManager r6;
        com.android.internal.telephony.InboundSmsHandler$DefaultState $r7, $r23, $r24, $r25, $r27;
        com.android.internal.telephony.InboundSmsHandler$StartupState $r8, $r26, $r30;
        com.android.internal.telephony.InboundSmsHandler$IdleState $r9, $r28;
        com.android.internal.telephony.InboundSmsHandler$DeliveringState $r10, $r31, $r32;
        com.android.internal.telephony.InboundSmsHandler$WaitingState $r11, $r29;
        android.content.ContentResolver $r12;
        com.android.internal.telephony.WapPushOverSms $r13;
        android.content.res.Resources $r15;
        android.os.PowerManager$WakeLock $r17, $r20;
        java.lang.Object $r18, $r22;
        android.os.UserManager $r21;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.internal.telephony.SmsStorageMonitor;

        r4 := @parameter3: com.android.internal.telephony.PhoneBase;

        r5 := @parameter4: com.android.internal.telephony.CellBroadcastHandler;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String)>(r1);

        $r7 = new com.android.internal.telephony.InboundSmsHandler$DefaultState;

        specialinvoke $r7.<com.android.internal.telephony.InboundSmsHandler$DefaultState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState> = $r7;

        $r8 = new com.android.internal.telephony.InboundSmsHandler$StartupState;

        specialinvoke $r8.<com.android.internal.telephony.InboundSmsHandler$StartupState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState> = $r8;

        $r9 = new com.android.internal.telephony.InboundSmsHandler$IdleState;

        specialinvoke $r9.<com.android.internal.telephony.InboundSmsHandler$IdleState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState> = $r9;

        $r10 = new com.android.internal.telephony.InboundSmsHandler$DeliveringState;

        specialinvoke $r10.<com.android.internal.telephony.InboundSmsHandler$DeliveringState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState> = $r10;

        $r11 = new com.android.internal.telephony.InboundSmsHandler$WaitingState;

        specialinvoke $r11.<com.android.internal.telephony.InboundSmsHandler$WaitingState: void <init>(com.android.internal.telephony.InboundSmsHandler)>(r0);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState> = $r11;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext> = r2;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.SmsStorageMonitor mStorageMonitor> = r3;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone> = r4;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.CellBroadcastHandler mCellBroadcastHandler> = r5;

        $r12 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver> = $r12;

        $r13 = new com.android.internal.telephony.WapPushOverSms;

        specialinvoke $r13.<com.android.internal.telephony.WapPushOverSms: void <init>(android.content.Context)>(r2);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush> = $r13;

        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r15.<android.content.res.Resources: boolean getBoolean(int)>(17956932);

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("telephony.sms.receive", z0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled> = $z2;

        $r16 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r18 = virtualinvoke $r16.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r6 = (android.os.PowerManager) $r18;

        $r17 = virtualinvoke r6.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, r1);

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock> = $r17;

        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r20.<android.os.PowerManager$WakeLock: void acquire()>();

        $r19 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r22 = virtualinvoke $r19.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r21 = (android.os.UserManager) $r22;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager> = $r21;

        $r24 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State)>($r24);

        $r26 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        $r23 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r26, $r23);

        $r28 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState>;

        $r25 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r28, $r25);

        $r31 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        $r27 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r31, $r27);

        $r29 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState>;

        $r32 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r29, $r32);

        $r30 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void setInitialState(com.android.internal.util.State)>($r30);

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("created InboundSmsHandler");

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.InboundSmsHandler r0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void quit()>();

        return;
    }

    public void updatePhoneObject(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.PhoneBase r1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int,java.lang.Object)>(7, r1);

        return;
    }

    protected void onQuitting()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.WapPushOverSms $r1;
        android.os.PowerManager$WakeLock $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        virtualinvoke $r1.<com.android.internal.telephony.WapPushOverSms: void dispose()>();

     label1:
        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        goto label1;

     label2:
        return;
    }

    public com.android.internal.telephony.PhoneBase getPhone()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.PhoneBase $r1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        return $r1;
    }

    void handleNewSms(android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.AsyncResult r1;
        int i0;
        android.telephony.SmsMessage r2;
        java.lang.Throwable $r3, $r8;
        java.lang.Object $r4;
        com.android.internal.telephony.SmsMessageBase $r5;
        boolean $z0, z1;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;
        java.lang.RuntimeException $r11, r12;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.os.AsyncResult;

        $r3 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r3 == null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception processing incoming SMS: ");

        $r8 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r10);

        return;

     label1:
        $r4 = r1.<android.os.AsyncResult: java.lang.Object result>;

        r2 = (android.telephony.SmsMessage) $r4;

        $r5 = r2.<android.telephony.SmsMessage: com.android.internal.telephony.SmsMessageBase mWrappedSmsMessage>;

        i0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>($r5);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r12 = $r11;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Exception dispatching message", r12);

        i0 = 2;

     label4:
        if i0 == -1 goto label7;

        if i0 != 1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        z1 = $z0;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z1, i0, null);

     label7:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void handleInjectSms(android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.AsyncResult r1;
        int i0;
        android.app.PendingIntent r2;
        android.telephony.SmsMessage r3;
        java.lang.Object $r4, $r5;
        com.android.internal.telephony.SmsMessageBase $r6;
        java.lang.RuntimeException $r7, r9;
        android.app.PendingIntent$CanceledException $r8;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.os.AsyncResult;

        r2 = null;

     label1:
        $r4 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        r2 = (android.app.PendingIntent) $r4;

        $r5 = r1.<android.os.AsyncResult: java.lang.Object result>;

        r3 = (android.telephony.SmsMessage) $r5;

        if r3 != null goto label2;

        i0 = 2;

        goto label3;

     label2:
        $r6 = r3.<android.telephony.SmsMessage: com.android.internal.telephony.SmsMessageBase mWrappedSmsMessage>;

        i0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>($r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Exception dispatching message", r9);

        i0 = 2;

     label5:
        if r2 == null goto label9;

     label6:
        virtualinvoke r2.<android.app.PendingIntent: void send(int)>(i0);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

     label9:
        return;

        catch java.lang.RuntimeException from label1 to label3 with label4;
        catch android.app.PendingIntent$CanceledException from label6 to label7 with label8;
    }

    public int dispatchMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsMessageBase r1;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        if r1 != null goto label1;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("dispatchSmsMessage: message is null");

        return 2;

     label1:
        $z0 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("Received short message on device which doesn\'t support receiving SMS. Ignored.");

        return 1;

     label2:
        $i0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)>(r1);

        return $i0;
    }

    protected abstract int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase);

    protected abstract void acknowledgeLastIncomingSms(boolean, int, android.os.Message);

    protected void onUpdatePhoneObject(com.android.internal.telephony.PhoneBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.PhoneBase r1, $r2, $r6;
        com.android.internal.telephony.SmsStorageMonitor $r3;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.PhoneBase;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone> = r1;

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        $r3 = $r2.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.SmsStorageMonitor mStorageMonitor> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUpdatePhoneObject: phone=");

        $r6 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r10);

        return;
    }

    void notifyAndAcknowledgeLastIncomingSms(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        boolean z0;
        int i0;
        android.os.Message r1;
        android.content.Intent r2, $r3;
        android.content.Context $r5;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        if z0 != 0 goto label1;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.provider.Telephony.SMS_REJECTED");

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("result", i0);

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>(r2, "android.permission.RECEIVE_SMS");

     label1:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z0, i0, r1);

        return;
    }

    protected abstract boolean is3gpp2();

    protected int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsMessageBase r1;
        com.android.internal.telephony.SmsHeader r2;
        com.android.internal.telephony.InboundSmsTracker r3, $r5, $r15;
        int i0, i1, $i3, $i5, $i6, $i7, $i8;
        com.android.internal.telephony.SmsHeader$PortAddrs r4, $r7, $r8;
        byte[] $r6, $r14;
        long $l2, $l4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r11;
        com.android.internal.telephony.SmsHeader$ConcatRef $r12, r17;
        java.lang.String $r13, $r16;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        r2 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>();

        if r2 == null goto label1;

        $r12 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        if $r12 != null goto label3;

     label1:
        i0 = -1;

        if r2 == null goto label2;

        $r7 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if $r7 == null goto label2;

        $r8 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        i0 = $r8.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destination port: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r13);

     label2:
        $r5 = new com.android.internal.telephony.InboundSmsTracker;

        $r6 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        $l2 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        specialinvoke $r5.<com.android.internal.telephony.InboundSmsTracker: void <init>(byte[],long,int,boolean,boolean)>($r6, $l2, i0, $z0, 0);

        r3 = $r5;

        goto label6;

     label3:
        r17 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        r4 = r2.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if r4 == null goto label4;

        $i8 = r4.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

        goto label5;

     label4:
        $i8 = -1;

     label5:
        i1 = $i8;

        $r15 = new com.android.internal.telephony.InboundSmsTracker;

        $r14 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        $l4 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        $z1 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        $r16 = virtualinvoke r1.<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>();

        $i6 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int refNumber>;

        $i7 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int seqNumber>;

        $i5 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int msgCount>;

        specialinvoke $r15.<com.android.internal.telephony.InboundSmsTracker: void <init>(byte[],long,int,boolean,java.lang.String,int,int,int,boolean)>($r14, $l4, i1, $z1, $r16, $i6, $i7, $i5, 0);

        r3 = $r15;

     label6:
        $i3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)>(r3);

        return $i3;
    }

    protected int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        $i0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)>(r1);

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int,java.lang.Object)>(2, r1);

        return 1;

     label2:
        return 1;

     label3:
        return 2;
    }

    boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        byte[][] r2, $r37, r42;
        android.database.Cursor r3;
        java.lang.String r4, r5, r6, $r16, $r20, $r32, $r34;
        java.lang.String[] r7, $r9, $r11;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        java.lang.Throwable r8, $r36;
        android.net.Uri $r10;
        android.content.ContentResolver $r12;
        android.content.Intent $r13, r45;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver $r14, r40;
        com.android.internal.telephony.uicc.UiccController $r15;
        java.lang.Object $r19;
        android.os.UserHandle $r21;
        android.content.Context $r22;
        android.content.pm.PackageManager $r23;
        com.android.internal.telephony.WapPushOverSms $r26;
        byte[] $r27, $r33, $r38, r43;
        java.io.ByteArrayOutputStream $r28, r41;
        java.lang.StringBuilder $r29, $r30, $r31;
        android.database.SQLException $r35, r39;
        android.telephony.SmsMessage r44;
        java.util.List r46;
        com.android.internal.telephony.uicc.UiccCard r47;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        i0 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        i1 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getDestPort()>();

        if i0 != 1 goto label01;

        $r37 = newarray (byte[])[1];

        $r38 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        $r37[0] = $r38;

        r2 = $r37;

        goto label15;

     label01:
        r3 = null;

     label02:
        r4 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        $i4 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        $i5 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = r4;

        $r9[1] = r5;

        $r9[2] = r6;

        r7 = $r9;

        $r12 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r10 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r11 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION>;

        r3 = virtualinvoke $r12.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r10, $r11, "address=? AND reference_number=? AND count=?", r7, null);

        i2 = interfaceinvoke r3.<android.database.Cursor: int getCount()>();

        if i2 >= i0 goto label05;

        z0 = 0;

     label03:
        if r3 == null goto label04;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label04:
        return z0;

     label05:
        r2 = newarray (byte[])[i0];

     label06:
        $z1 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label08;

        $i9 = interfaceinvoke r3.<android.database.Cursor: int getInt(int)>(1);

        $i8 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getIndexOffset()>();

        i10 = $i9 - $i8;

        $r34 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r33 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>($r34);

        r2[i10] = $r33;

        if i10 != 0 goto label07;

        $z4 = interfaceinvoke r3.<android.database.Cursor: boolean isNull(int)>(2);

        if $z4 != 0 goto label07;

        i3 = interfaceinvoke r3.<android.database.Cursor: int getInt(int)>(2);

        i11 = staticinvoke <com.android.internal.telephony.InboundSmsTracker: int getRealDestPort(int)>(i3);

        if i11 == -1 goto label07;

        i1 = i11;

     label07:
        goto label06;

     label08:
        if r3 == null goto label15;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

        goto label15;

     label09:
        $r35 := @caughtexception;

        r39 = $r35;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Can\'t access multipart SMS database", r39);

        z5 = 0;

     label10:
        if r3 == null goto label11;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label11:
        return z5;

     label12:
        $r36 := @caughtexception;

        r8 = $r36;

     label13:
        if r3 == null goto label14;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label14:
        throw r8;

     label15:
        $r14 = new com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        specialinvoke $r14.<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsTracker)>(r0, r1);

        r40 = $r14;

        if i1 != 2948 goto label21;

        $r28 = new java.io.ByteArrayOutputStream;

        specialinvoke $r28.<java.io.ByteArrayOutputStream: void <init>()>();

        r41 = $r28;

        r42 = r2;

        i12 = lengthof r42;

        i13 = 0;

     label16:
        if i13 >= i12 goto label18;

        r43 = r42[i13];

        $z2 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: boolean is3gpp2()>();

        if $z2 != 0 goto label17;

        r44 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>(r43, "3gpp");

        r43 = virtualinvoke r44.<android.telephony.SmsMessage: byte[] getUserData()>();

     label17:
        $i7 = lengthof r43;

        virtualinvoke r41.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r43, 0, $i7);

        i13 = i13 + 1;

        goto label16;

     label18:
        $r26 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        $r27 = virtualinvoke r41.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        i14 = virtualinvoke $r26.<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[],android.content.BroadcastReceiver,com.android.internal.telephony.InboundSmsHandler)>($r27, r40, r0);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchWapPdu() returned ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r32);

        if i14 != -1 goto label19;

        $z3 = 1;

        goto label20;

     label19:
        $z3 = 0;

     label20:
        return $z3;

     label21:
        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("android.provider.Telephony.SMS_FILTER");

        r45 = $r13;

        r46 = null;

        $r15 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        r47 = virtualinvoke $r15.<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccCard getUiccCard()>();

        if r47 == null goto label22;

        $r22 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r46 = virtualinvoke r47.<com.android.internal.telephony.uicc.UiccCard: java.util.List getCarrierPackageNamesForIntent(android.content.pm.PackageManager,android.content.Intent)>($r23, r45);

     label22:
        if r46 == null goto label23;

        $i6 = interfaceinvoke r46.<java.util.List: int size()>();

        if $i6 != 1 goto label23;

        $r19 = interfaceinvoke r46.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (java.lang.String) $r19;

        virtualinvoke r45.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r20);

        virtualinvoke r45.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("destport", i1);

        goto label24;

     label23:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void setAndDirectIntent(android.content.Intent,int)>(r45, i1);

     label24:
        virtualinvoke r45.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("pdus", r2);

        $r16 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        virtualinvoke r45.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("format", $r16);

        $r21 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dispatchIntent(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.UserHandle)>(r45, "android.permission.RECEIVE_SMS", 16, r40, $r21);

        return 1;

        catch android.database.SQLException from label02 to label03 with label09;
        catch android.database.SQLException from label05 to label08 with label09;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label05 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected void dispatchIntent(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.UserHandle)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        android.content.BroadcastReceiver r3, $r16;
        android.os.UserHandle r4, r7, $r11, $r15;
        int[] r5, $r21;
        android.content.pm.UserInfo r8;
        com.android.internal.telephony.PhoneBase $r10;
        boolean $z0, $z1, $z2;
        android.content.Context $r12, $r17;
        android.app.IActivityManager $r13;
        android.os.Handler $r14, $r19;
        android.os.UserManager $r18, $r20;
        android.os.RemoteException $r22;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.BroadcastReceiver;

        r4 := @parameter4: android.os.UserHandle;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(134217728);

        $r10 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.PhoneBase mPhone>;

        $i1 = virtualinvoke $r10.<com.android.internal.telephony.PhoneBase: int getPhoneId()>();

        staticinvoke <android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int)>(r1, $i1);

        $r11 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $z0 = virtualinvoke r4.<android.os.UserHandle: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label13;

        r5 = null;

     label01:
        $r13 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r5 = interfaceinvoke $r13.<android.app.IActivityManager: int[] getRunningUserIds()>();

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

     label04:
        if r5 != null goto label05;

        $r21 = newarray (int)[1];

        $i7 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $r21[0] = $i7;

        r5 = $r21;

     label05:
        $i2 = lengthof r5;

        i8 = $i2 - 1;

     label06:
        if i8 < 0 goto label12;

        $r15 = new android.os.UserHandle;

        $i3 = r5[i8];

        specialinvoke $r15.<android.os.UserHandle: void <init>(int)>($i3);

        r7 = $r15;

        $i5 = r5[i8];

        if $i5 == 0 goto label08;

        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r18.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_sms", r7);

        if $z1 == 0 goto label07;

        goto label11;

     label07:
        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        $i6 = r5[i8];

        r8 = virtualinvoke $r20.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i6);

        if r8 == null goto label11;

        $z2 = virtualinvoke r8.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 == 0 goto label08;

        goto label11;

     label08:
        $r17 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $i4 = r5[i8];

        if $i4 != 0 goto label09;

        $r16 = r3;

        goto label10;

     label09:
        $r16 = null;

     label10:
        $r19 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Handler getHandler()>();

        virtualinvoke $r17.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r7, r2, i0, $r16, $r19, -1, null, null);

     label11:
        i8 = i8 + -1;

        goto label06;

     label12:
        goto label14;

     label13:
        $r12 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r14 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Handler getHandler()>();

        virtualinvoke $r12.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r4, r2, i0, r3, $r14, -1, null, null);

     label14:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
    }

    void deleteFromRawTable(java.lang.String, java.lang.String[])
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r9;
        java.lang.String[] r2;
        int i0;
        android.net.Uri $r3;
        android.content.ContentResolver $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r4 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r3 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        i0 = virtualinvoke $r4.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r3, r1, r2);

        if i0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("No rows were deleted from raw table!");

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows from raw table.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r9);

     label2:
        return;
    }

    void setAndDirectIntent(android.content.Intent, int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Intent r1;
        int i0;
        android.content.ComponentName r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r13, $r16, $r17, $r18, $r19;
        java.lang.String $r7, $r15, $r20, $r21;
        android.content.Context $r11;
        android.net.Uri r22;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        if i0 != -1 goto label3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.provider.Telephony.SMS_DELIVER");

        $r11 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r2 = staticinvoke <com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)>($r11, 1);

        if r2 == null goto label1;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r2);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delivering SMS to: ");

        $r15 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getClassName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r21);

        goto label2;

     label1:
        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

     label2:
        goto label4;

     label3:
        virtualinvoke r1.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.DATA_SMS_RECEIVED");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sms://localhost:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r7);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setData(android.net.Uri)>(r22);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

     label4:
        return;
    }

    private int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        android.database.Cursor r2;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r3, r4, r5, r6, r8, $r17, $r19, $r30, $r38, $r40;
        java.lang.String[] r7, $r18, $r20, $r22, $r23;
        byte[] r9, r10, $r33;
        byte b1, b8;
        java.lang.Throwable r11, $r36;
        android.content.ContentResolver $r12, $r25;
        android.net.Uri $r13, $r21, r47;
        java.lang.StringBuilder $r14, $r15, $r16, $r24, $r26, $r27, $r28, $r29, $r31, $r32, $r34, $r35, $r39, $r42, $r43, $r44;
        boolean $z0, $z1;
        android.database.SQLException $r37, r45;
        java.lang.Exception $r41, r48;
        android.content.ContentValues r46;
        long l9;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        $i2 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i2 == 1 goto label13;

        r2 = null;

     label01:
        i0 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getSequenceNumber()>();

        r3 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        $i4 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        $i5 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r22 = newarray (java.lang.String)[3];

        $r22[0] = r3;

        $r22[1] = r4;

        $r22[2] = r5;

        r7 = $r22;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>("address=? AND reference_number=? AND count=?", r7);

        $r25 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r21 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r20 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_PROJECTION>;

        $r23 = newarray (java.lang.String)[4];

        $r23[0] = r3;

        $r23[1] = r4;

        $r23[2] = r5;

        $r23[3] = r6;

        r2 = virtualinvoke $r25.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r21, $r20, "address=? AND reference_number=? AND count=? AND sequence=?", $r23, null);

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label05;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding duplicate message segment, refNumber=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seqNumber=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r30);

        r8 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

        r9 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        r10 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>(r8);

        $r33 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r10, $r33);

        if $z1 != 0 goto label02;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: dup message segment PDU of length ");

        $i7 = lengthof r9;

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different from existing PDU of length ");

        $i6 = lengthof r10;

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r38);

     label02:
        b1 = 5;

     label03:
        if r2 == null goto label04;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label04:
        return b1;

     label05:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label06:
        if r2 == null goto label13;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label13;

     label07:
        $r37 := @caughtexception;

        r45 = $r37;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Can\'t access multipart SMS database", r45);

        b8 = 2;

     label08:
        if r2 == null goto label09;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label09:
        return b8;

     label10:
        $r36 := @caughtexception;

        r11 = $r36;

     label11:
        if r2 == null goto label12;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label12:
        throw r11;

     label13:
        r46 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: android.content.ContentValues getContentValues()>();

        $r12 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r13 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        r47 = virtualinvoke $r12.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r13, r46);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URI of new row -> ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r47);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r17);

     label14:
        l9 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r47);

        $i3 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i3 != 1 goto label15;

        $r18 = newarray (java.lang.String)[1];

        $r19 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l9);

        $r18[0] = $r19;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>("_id=?", $r18);

     label15:
        return 1;

     label16:
        $r41 := @caughtexception;

        r48 = $r41;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing URI for new row: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r47);

        $r40 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>($r40, r48);

        return 2;

        catch android.database.SQLException from label01 to label03 with label07;
        catch android.database.SQLException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    static boolean isCurrentFormat3gpp2()
    {
        int i0;
        android.telephony.TelephonyManager $r0;
        boolean $z0;

        $r0 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>();

        i0 = virtualinvoke $r0.<android.telephony.TelephonyManager: int getCurrentPhoneType()>();

        if 2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    private android.net.Uri writeInboxMessage(android.content.Intent)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Intent r1;
        android.telephony.SmsMessage[] r2, r3;
        int i0, i1, $i2;
        android.telephony.SmsMessage r4;
        java.lang.Throwable r6, $r11;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        android.net.Uri $r9, r15;
        java.lang.NullPointerException $r12;
        java.lang.Exception $r13, r16;
        android.content.ContentValues r14;
        long l3;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: android.content.Intent;

        r2 = staticinvoke <android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>(r1);

        if r2 == null goto label01;

        $i2 = lengthof r2;

        if $i2 >= 1 goto label02;

     label01:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("Failed to parse SMS pdu");

        return null;

     label02:
        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label03:
        if i1 >= i0 goto label08;

        r4 = r3[i1];

     label04:
        virtualinvoke r4.<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>();

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("NPE inside SmsMessage");

        return null;

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        r14 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: android.content.ContentValues parseSmsMessage(android.telephony.SmsMessage[])>(r2);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r7 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = <android.provider.Telephony$Sms$Inbox: android.net.Uri CONTENT_URI>;

        r15 = virtualinvoke $r8.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r9, r14);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return r15;

     label11:
        $r13 := @caughtexception;

        r16 = $r13;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Failed to persist inbox message", r16);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label15;

     label13:
        $r11 := @caughtexception;

        r6 = $r11;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r6;

     label15:
        return null;

        catch java.lang.NullPointerException from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private static android.content.ContentValues parseSmsMessage(android.telephony.SmsMessage[])
    {
        android.telephony.SmsMessage[] r0;
        android.telephony.SmsMessage r1;
        android.content.ContentValues r2, $r4;
        java.lang.String r3, $r5, $r6, $r14;
        long $l0, $l1;
        java.lang.Long $r7, $r8;
        java.lang.Integer $r9, $r10, $r11, $r13;
        int $i2;
        boolean $z0, $z1;
        byte $b3;

        r0 := @parameter0: android.telephony.SmsMessage[];

        r1 = r0[0];

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        r2 = $r4;

        $r5 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("address", $r5);

        $r6 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String buildMessageBodyFromPdus(android.telephony.SmsMessage[])>(r0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("body", $r6);

        $l0 = virtualinvoke r1.<android.telephony.SmsMessage: long getTimestampMillis()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date_sent", $r7);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date", $r8);

        $i2 = virtualinvoke r1.<android.telephony.SmsMessage: int getProtocolIdentifier()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("protocol", $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("seen", $r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("read", $r11);

        r3 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subject", r3);

     label1:
        $z1 = virtualinvoke r1.<android.telephony.SmsMessage: boolean isReplyPathPresent()>();

        if $z1 == 0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b3);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("reply_path_present", $r13);

        $r14 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>();

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("service_center", $r14);

        return r2;
    }

    private static java.lang.String buildMessageBodyFromPdus(android.telephony.SmsMessage[])
    {
        android.telephony.SmsMessage[] r0, r2;
        java.lang.StringBuilder r1, $r4;
        int i0, i1, $i2;
        android.telephony.SmsMessage r3, $r9;
        java.lang.String $r5, $r6, $r7, $r10, $r11;

        r0 := @parameter0: android.telephony.SmsMessage[];

        $i2 = lengthof r0;

        if $i2 != 1 goto label1;

        $r9 = r0[0];

        $r10 = virtualinvoke $r9.<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>();

        $r11 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String replaceFormFeeds(java.lang.String)>($r10);

        return $r11;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r7 = virtualinvoke r3.<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String replaceFormFeeds(java.lang.String)>($r5);

        return $r6;
    }

    private static java.lang.String replaceFormFeeds(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(12, 10);

     label2:
        return $r1;
    }

    static com.android.internal.util.IState access$000(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState $r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.util.IState getCurrentState()>();

        return $r1;
    }

    static void access$100(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$200(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$300(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$400(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$500(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$600(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$700(com.android.internal.telephony.InboundSmsHandler, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deferMessage(android.os.Message)>(r1);

        return;
    }

    static void access$800(com.android.internal.telephony.InboundSmsHandler, com.android.internal.util.IState)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static android.net.Uri access$900(com.android.internal.telephony.InboundSmsHandler, android.content.Intent)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Intent r1;
        android.net.Uri $r2;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.content.Intent;

        $r2 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.net.Uri writeInboxMessage(android.content.Intent)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        android.net.Uri $r2, $r3;

        <com.android.internal.telephony.InboundSmsHandler: int WAKELOCK_TIMEOUT> = 3000;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_INJECT_SMS> = 8;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_UPDATE_PHONE_OBJECT> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_START_ACCEPTING_SMS> = 6;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RELEASE_WAKELOCK> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RETURN_TO_IDLE> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_COMPLETE> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_SMS> = 2;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_NEW_SMS> = 1;

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String SELECT_BY_REFERENCE> = "address=? AND reference_number=? AND count=?";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String SELECT_BY_ID> = "_id=?";

        <com.android.internal.telephony.InboundSmsHandler: int ID_COLUMN> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int ADDRESS_COLUMN> = 6;

        <com.android.internal.telephony.InboundSmsHandler: int COUNT_COLUMN> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int REFERENCE_NUMBER_COLUMN> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int DATE_COLUMN> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int DESTINATION_PORT_COLUMN> = 2;

        <com.android.internal.telephony.InboundSmsHandler: int SEQUENCE_COLUMN> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int PDU_COLUMN> = 0;

        <com.android.internal.telephony.InboundSmsHandler: boolean VDBG> = 0;

        <com.android.internal.telephony.InboundSmsHandler: boolean DBG> = 1;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "pdu";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_PROJECTION> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "pdu";

        $r1[1] = "sequence";

        $r1[2] = "destination_port";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION> = $r1;

        $r2 = <android.provider.Telephony$Sms: android.net.Uri CONTENT_URI>;

        $r3 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r2, "raw");

        <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri> = $r3;

        return;
    }
}
