class com.android.commands.content.Content$ReadCommand extends com.android.commands.content.Content$Command
{

    public void <init>(android.net.Uri, int)
    {
        com.android.commands.content.Content$ReadCommand r0;
        android.net.Uri r1;
        int i0;

        r0 := @this: com.android.commands.content.Content$ReadCommand;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.commands.content.Content$Command: void <init>(android.net.Uri,int)>(r1, i0);

        return;
    }

    public void onExecute(android.content.IContentProvider) throws java.lang.Exception
    {
        com.android.commands.content.Content$ReadCommand r0;
        android.content.IContentProvider r1;
        android.os.ParcelFileDescriptor r2;
        android.net.Uri $r3;
        java.io.FileInputStream $r4;
        java.io.FileDescriptor $r5;
        java.io.PrintStream $r6;

        r0 := @this: com.android.commands.content.Content$ReadCommand;

        r1 := @parameter0: android.content.IContentProvider;

        $r3 = r0.<com.android.commands.content.Content$ReadCommand: android.net.Uri mUri>;

        r2 = interfaceinvoke r1.<android.content.IContentProvider: android.os.ParcelFileDescriptor openFile(java.lang.String,android.net.Uri,java.lang.String,android.os.ICancellationSignal)>(null, $r3, "r", null);

        $r4 = new java.io.FileInputStream;

        $r5 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.android.commands.content.Content$ReadCommand: void copy(java.io.InputStream,java.io.OutputStream)>($r4, $r6);

        return;
    }

    private static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        int i0, $i1;
        java.lang.Throwable r3, $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[8192];

     label1:
        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        i0 = $i1;

        if $i1 <= -1 goto label2;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

        goto label1;

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
