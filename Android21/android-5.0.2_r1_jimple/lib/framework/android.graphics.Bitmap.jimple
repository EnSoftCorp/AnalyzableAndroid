public final class android.graphics.Bitmap extends java.lang.Object implements android.os.Parcelable
{
    public static final int DENSITY_NONE;
    public final long mNativeBitmap;
    public byte[] mBuffer;
    private final android.graphics.Bitmap$BitmapFinalizer mFinalizer;
    private final boolean mIsMutable;
    private boolean mRequestPremultiplied;
    private byte[] mNinePatchChunk;
    private android.graphics.NinePatch$InsetStruct mNinePatchInsets;
    private int mWidth;
    private int mHeight;
    private boolean mRecycled;
    int mDensity;
    private static volatile android.graphics.Matrix sScaleMatrix;
    private static volatile int sDefaultDensity;
    private static final int WORKING_COMPRESS_STORAGE;
    public static final android.os.Parcelable$Creator CREATOR;

    public static void setDefaultDensity(int)
    {
        int i0;

        i0 := @parameter0: int;

        <android.graphics.Bitmap: int sDefaultDensity> = i0;

        return;
    }

    static int getDefaultDensity()
    {
        int $i0, $i1, $i2, $i3;

        $i0 = <android.graphics.Bitmap: int sDefaultDensity>;

        if $i0 < 0 goto label1;

        $i3 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i3;

     label1:
        $i1 = <android.util.DisplayMetrics: int DENSITY_DEVICE>;

        <android.graphics.Bitmap: int sDefaultDensity> = $i1;

        $i2 = <android.graphics.Bitmap: int sDefaultDensity>;

        return $i2;
    }

    void <init>(long, byte[], int, int, int, boolean, boolean, byte[], android.graphics.NinePatch$InsetStruct)
    {
        android.graphics.Bitmap r0;
        long l0;
        byte[] r1, r2;
        int i1, i2, i3, i4, $i5, $i7;
        boolean z0, z1;
        android.graphics.NinePatch$InsetStruct r3;
        byte $b6;
        android.graphics.Bitmap$BitmapFinalizer $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.graphics.Bitmap;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r2 := @parameter7: byte[];

        r3 := @parameter8: android.graphics.NinePatch$InsetStruct;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i5 = staticinvoke <android.graphics.Bitmap: int getDefaultDensity()>();

        r0.<android.graphics.Bitmap: int mDensity> = $i5;

        $b6 = l0 cmp 0L;

        if $b6 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("internal error: native bitmap is 0");

        throw $r5;

     label1:
        r0.<android.graphics.Bitmap: int mWidth> = i1;

        r0.<android.graphics.Bitmap: int mHeight> = i2;

        r0.<android.graphics.Bitmap: boolean mIsMutable> = z0;

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z1;

        r0.<android.graphics.Bitmap: byte[] mBuffer> = r1;

        r0.<android.graphics.Bitmap: long mNativeBitmap> = l0;

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r2;

        r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets> = r3;

        if i3 < 0 goto label2;

        r0.<android.graphics.Bitmap: int mDensity> = i3;

     label2:
        if r1 != null goto label3;

        $i7 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        goto label4;

     label3:
        $i7 = 0;

     label4:
        i4 = $i7;

        $r4 = new android.graphics.Bitmap$BitmapFinalizer;

        specialinvoke $r4.<android.graphics.Bitmap$BitmapFinalizer: void <init>(long,int)>(l0, i4);

        r0.<android.graphics.Bitmap: android.graphics.Bitmap$BitmapFinalizer mFinalizer> = $r4;

        return;
    }

    void reinit(int, int, boolean)
    {
        android.graphics.Bitmap r0;
        int i0, i1;
        boolean z0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z0;

        return;
    }

    public int getDensity()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mDensity>;

        return $i0;
    }

    public void setDensity(int)
    {
        android.graphics.Bitmap r0;
        int i0;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        r0.<android.graphics.Bitmap: int mDensity> = i0;

        return;
    }

    public void reconfigure(int, int, android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3;
        android.graphics.Bitmap$Config r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;
        byte[] $r3, $r4;
        long $l4;
        java.lang.IllegalStateException $r5, $r6;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call reconfigure() on a recycled bitmap");

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r2;

     label2:
        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("only mutable bitmaps may be reconfigured");

        throw $r6;

     label3:
        $r3 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        if $r3 != null goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("native-backed bitmaps may not be reconfigured");

        throw $r5;

     label4:
        $l4 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i3 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $r4 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        $i2 = lengthof $r4;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeReconfigure(long,int,int,int,int,boolean)>($l4, i0, i1, $i3, $i2, $z1);

        r0.<android.graphics.Bitmap: int mWidth> = i0;

        r0.<android.graphics.Bitmap: int mHeight> = i1;

        return;
    }

    public void setWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>(i0, $i1, $r1);

        return;
    }

    public void setHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i1, i0, $r1);

        return;
    }

    public void setConfig(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$Config r1;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r0.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i0, $i1, r1);

        return;
    }

    public void setNinePatchChunk(byte[])
    {
        android.graphics.Bitmap r0;
        byte[] r1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: byte[];

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = r1;

        return;
    }

    public void recycle()
    {
        android.graphics.Bitmap r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 != 0 goto label2;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeRecycle(long)>($l0);

        if $z1 == 0 goto label1;

        r0.<android.graphics.Bitmap: byte[] mBuffer> = null;

        r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = null;

     label1:
        r0.<android.graphics.Bitmap: boolean mRecycled> = 1;

     label2:
        return;
    }

    public final boolean isRecycled()
    {
        android.graphics.Bitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        return $z0;
    }

    public int getGenerationId()
    {
        android.graphics.Bitmap r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeGenerationId(long)>($l0);

        return $i1;
    }

    private void checkRecycled(java.lang.String)
    {
        android.graphics.Bitmap r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    private static void checkXYSign(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be >= 0");

        throw $r1;

     label1:
        if i1 >= 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be >= 0");

        throw $r0;

     label2:
        return;
    }

    private static void checkWidthHeight(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be > 0");

        throw $r1;

     label1:
        if i1 > 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be > 0");

        throw $r0;

     label2:
        return;
    }

    public void copyPixelsToBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, i4, $i6, i12;
        byte b1, $b8;
        long l2, l3, $l5, $l7, $l9, $l10, $l11;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label1;

        b1 = 0;

        goto label4;

     label1:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label2;

        b1 = 1;

        goto label4;

     label2:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label3;

        b1 = 2;

        goto label4;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label4:
        $l5 = (long) i0;

        l2 = $l5 << b1;

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l3 = (long) $i6;

        $b8 = l2 cmp l3;

        if $b8 >= 0 goto label5;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label5:
        $l7 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsToBuffer(long,java.nio.Buffer)>($l7, r1);

        i4 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l11 = (long) i4;

        $l9 = l3 >> b1;

        $l10 = $l11 + $l9;

        i12 = (int) $l10;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>(i12);

        return;
    }

    public void copyPixelsFromBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap r0;
        java.nio.Buffer r1;
        int i0, i4, $i6, i12;
        byte b1, $b8;
        long l2, l3, $l5, $l7, $l9, $l10, $l11;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: java.nio.Buffer;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("copyPixelsFromBuffer called on recycled bitmap");

        i0 = virtualinvoke r1.<java.nio.Buffer: int remaining()>();

        $z0 = r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label1;

        b1 = 0;

        goto label4;

     label1:
        $z1 = r1 instanceof java.nio.ShortBuffer;

        if $z1 == 0 goto label2;

        b1 = 1;

        goto label4;

     label2:
        $z2 = r1 instanceof java.nio.IntBuffer;

        if $z2 == 0 goto label3;

        b1 = 2;

        goto label4;

     label3:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label4:
        $l5 = (long) i0;

        l2 = $l5 << b1;

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        l3 = (long) $i6;

        $b8 = l2 cmp l3;

        if $b8 >= 0 goto label5;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r3;

     label5:
        $l7 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(long,java.nio.Buffer)>($l7, r1);

        i4 = virtualinvoke r1.<java.nio.Buffer: int position()>();

        $l11 = (long) i4;

        $l9 = l3 >> b1;

        $l10 = $l11 + $l9;

        i12 = (int) $l10;

        virtualinvoke r1.<java.nio.Buffer: java.nio.Buffer position(int)>(i12);

        return;
    }

    public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean)
    {
        android.graphics.Bitmap r0, r2;
        android.graphics.Bitmap$Config r1;
        boolean z0, $z1;
        int $i0, $i2;
        long $l1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        $l1 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i0 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(long,int,boolean)>($l1, $i0, z0);

        if r2 == null goto label1;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r2.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z1);

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r2.<android.graphics.Bitmap: int mDensity> = $i2;

     label1:
        return r2;
    }

    public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean)
    {
        android.graphics.Bitmap r0, r4;
        int i0, i1, i2, i3;
        boolean z0;
        android.graphics.Matrix r1, $r7, $r9;
        java.lang.Class r2, r5;
        java.lang.Throwable r3, r6, $r8, $r10;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 = class "android/graphics/Bitmap";

        entermonitor class "android/graphics/Bitmap";

     label01:
        r1 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = null;

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        if r1 != null goto label06;

        $r9 = new android.graphics.Matrix;

        specialinvoke $r9.<android.graphics.Matrix: void <init>()>();

        r1 = $r9;

     label06:
        i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $f4 = (float) i0;

        $f2 = (float) i2;

        f0 = $f4 / $f2;

        $f5 = (float) i1;

        $f3 = (float) i3;

        f1 = $f5 / $f3;

        virtualinvoke r1.<android.graphics.Matrix: void setScale(float,float)>(f0, f1);

        r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, 0, 0, i2, i3, r1, z0);

        r5 = class "android/graphics/Bitmap";

        entermonitor class "android/graphics/Bitmap";

     label07:
        $r7 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        if $r7 != null goto label08;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = r1;

     label08:
        exitmonitor r5;

     label09:
        goto label12;

     label10:
        $r8 := @caughtexception;

        r6 = $r8;

        exitmonitor r5;

     label11:
        throw r6;

     label12:
        return r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r0, 0, 0, $i0, $i1);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int)
    {
        android.graphics.Bitmap r0, $r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, i0, i1, i2, i3, null, 0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean)
    {
        android.graphics.Bitmap r0, r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        android.graphics.Matrix r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z12;
        android.graphics.Canvas r2, $r10;
        android.graphics.Paint r4, $r14;
        android.graphics.Rect r5, $r11;
        android.graphics.RectF r6, r9, $r12, $r13;
        android.graphics.Bitmap$Config r7, r8, $r16;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int[] $r15;
        java.lang.IllegalArgumentException $r17, $r18;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Matrix;

        z0 := @parameter6: boolean;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i2, i3);

        $i7 = i0 + i2;

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i7 <= $i6 goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r17;

     label01:
        $i9 = i1 + i3;

        $i8 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i9 <= $i8 goto label02;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r18;

     label02:
        $z2 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z2 != 0 goto label04;

        if i0 != 0 goto label04;

        if i1 != 0 goto label04;

        $i15 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i2 != $i15 goto label04;

        $i14 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i3 != $i14 goto label04;

        if r1 == null goto label03;

        $z12 = virtualinvoke r1.<android.graphics.Matrix: boolean isIdentity()>();

        if $z12 == 0 goto label04;

     label03:
        return r0;

     label04:
        i4 = i2;

        i5 = i3;

        $r10 = new android.graphics.Canvas;

        specialinvoke $r10.<android.graphics.Canvas: void <init>()>();

        r2 = $r10;

        $r11 = new android.graphics.Rect;

        $i11 = i0 + i2;

        $i10 = i1 + i3;

        specialinvoke $r11.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, $i11, $i10);

        r5 = $r11;

        $r12 = new android.graphics.RectF;

        $f0 = (float) i2;

        $f1 = (float) i3;

        specialinvoke $r12.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        r6 = $r12;

        r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r8 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if r8 == null goto label08;

        $r15 = <android.graphics.Bitmap$2: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i13 = virtualinvoke r8.<android.graphics.Bitmap$Config: int ordinal()>();

        $i16 = $r15[$i13];

        tableswitch($i16)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label07;
            default: goto label07;
        };

     label05:
        r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label08;

     label06:
        r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        goto label08;

     label07:
        r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label08:
        if r1 == null goto label09;

        $z7 = virtualinvoke r1.<android.graphics.Matrix: boolean isIdentity()>();

        if $z7 == 0 goto label10;

     label09:
        $z3 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i4, i5, r7, $z3);

        r4 = null;

        goto label18;

     label10:
        $z8 = virtualinvoke r1.<android.graphics.Matrix: boolean rectStaysRect()>();

        if $z8 != 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        z1 = $z11;

        $r13 = new android.graphics.RectF;

        specialinvoke $r13.<android.graphics.RectF: void <init>()>();

        r9 = $r13;

        virtualinvoke r1.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>(r9, r6);

        $f3 = virtualinvoke r9.<android.graphics.RectF: float width()>();

        i17 = staticinvoke <java.lang.Math: int round(float)>($f3);

        $f2 = virtualinvoke r9.<android.graphics.RectF: float height()>();

        i18 = staticinvoke <java.lang.Math: int round(float)>($f2);

        if z1 == 0 goto label13;

        $r16 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label14;

     label13:
        $r16 = r7;

     label14:
        if z1 != 0 goto label15;

        $z10 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z10 == 0 goto label16;

     label15:
        $z9 = 1;

        goto label17;

     label16:
        $z9 = 0;

     label17:
        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i17, i18, $r16, $z9);

        $f6 = r9.<android.graphics.RectF: float left>;

        $f7 = neg $f6;

        $f4 = r9.<android.graphics.RectF: float top>;

        $f5 = neg $f4;

        virtualinvoke r2.<android.graphics.Canvas: void translate(float,float)>($f7, $f5);

        virtualinvoke r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>(r1);

        $r14 = new android.graphics.Paint;

        specialinvoke $r14.<android.graphics.Paint: void <init>()>();

        r4 = $r14;

        virtualinvoke r4.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        if z1 == 0 goto label18;

        virtualinvoke r4.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

     label18:
        $i12 = r0.<android.graphics.Bitmap: int mDensity>;

        r3.<android.graphics.Bitmap: int mDensity> = $i12;

        $z4 = virtualinvoke r0.<android.graphics.Bitmap: boolean hasAlpha()>();

        virtualinvoke r3.<android.graphics.Bitmap: void setHasAlpha(boolean)>($z4);

        $z5 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        virtualinvoke r3.<android.graphics.Bitmap: void setPremultiplied(boolean)>($z5);

        virtualinvoke r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r3);

        virtualinvoke r2.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>(r0, r5, r6, r4);

        virtualinvoke r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        return r3;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>(i0, i1, r0, 1);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(r0, i0, i1, r1, 1);

        return $r2;
    }

    private static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config, boolean)
    {
        int i0, i1;
        android.graphics.Bitmap$Config r0;
        boolean z0;
        android.graphics.Bitmap $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>(null, i0, i1, r0, z0);

        return $r1;
    }

    private static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config, boolean)
    {
        android.util.DisplayMetrics r0;
        int i0, i1, $i2, $i4;
        android.graphics.Bitmap$Config r1, $r4;
        boolean z0;
        android.graphics.Bitmap r2;
        java.lang.IllegalArgumentException $r3;
        long $l3;

        r0 := @parameter0: android.util.DisplayMetrics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        z0 := @parameter4: boolean;

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r3;

     label2:
        $i2 = r1.<android.graphics.Bitmap$Config: int nativeInt>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>(null, 0, i0, i0, i1, $i2, 1);

        if r0 == null goto label3;

        $i4 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r2.<android.graphics.Bitmap: int mDensity> = $i4;

     label3:
        virtualinvoke r2.<android.graphics.Bitmap: void setHasAlpha(boolean)>(z0);

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r1 != $r4 goto label4;

        if z0 != 0 goto label4;

        $l3 = r2.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(long,int)>($l3, -16777216);

     label4:
        return r2;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1, i2, i3;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, i0, i1, i2, i3, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.graphics.Bitmap$Config r2;
        android.graphics.Bitmap r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @parameter0: android.util.DisplayMetrics;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: android.graphics.Bitmap$Config;

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>(i2, i3);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i6 >= i2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r6;

     label1:
        $i7 = i3 - 1;

        $i8 = $i7 * i1;

        i4 = i0 + $i8;

        i5 = lengthof r1;

        if i0 < 0 goto label2;

        $i9 = i0 + i2;

        if $i9 > i5 goto label2;

        if i4 < 0 goto label2;

        $i10 = i4 + i2;

        if $i10 <= i5 goto label3;

     label2:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label3:
        if i2 <= 0 goto label4;

        if i3 > 0 goto label5;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r5;

     label5:
        $i11 = r2.<android.graphics.Bitmap$Config: int nativeInt>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>(r1, i0, i1, i2, i3, $i11, 0);

        if r0 == null goto label6;

        $i12 = r0.<android.util.DisplayMetrics: int densityDpi>;

        r3.<android.graphics.Bitmap: int mDensity> = $i12;

     label6:
        return r3;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config)
    {
        int[] r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(null, r0, 0, i0, i0, i1, r1);

        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, android.graphics.Bitmap$Config)
    {
        android.util.DisplayMetrics r0;
        int[] r1;
        int i0, i1;
        android.graphics.Bitmap$Config r2;
        android.graphics.Bitmap $r3;

        r0 := @parameter0: android.util.DisplayMetrics;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Bitmap$Config;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>(r0, r1, 0, i0, i0, i1, r2);

        return $r3;
    }

    public byte[] getNinePatchChunk()
    {
        android.graphics.Bitmap r0;
        byte[] $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: byte[] mNinePatchChunk>;

        return $r1;
    }

    public void getOpticalInsets(android.graphics.Rect)
    {
        android.graphics.Bitmap r0;
        android.graphics.Rect r1, $r4;
        android.graphics.NinePatch$InsetStruct $r2, $r3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets>;

        if $r2 != null goto label1;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        goto label2;

     label1:
        $r3 = r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets>;

        $r4 = $r3.<android.graphics.NinePatch$InsetStruct: android.graphics.Rect opticalRect>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

     label2:
        return;
    }

    public android.graphics.NinePatch$InsetStruct getNinePatchInsets()
    {
        android.graphics.Bitmap r0;
        android.graphics.NinePatch$InsetStruct $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct mNinePatchInsets>;

        return $r1;
    }

    public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream)
    {
        android.graphics.Bitmap r0;
        android.graphics.Bitmap$CompressFormat r1;
        int i0, $i1;
        java.io.OutputStream r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;
        byte[] $r4;
        long $l2;
        java.lang.NullPointerException $r5;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t compress a recycled bitmap");

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 100 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quality must be 0..100");

        throw $r3;

     label3:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, "Bitmap.compress");

        $l2 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i1 = r1.<android.graphics.Bitmap$CompressFormat: int nativeInt>;

        $r4 = newarray (byte)[4096];

        z0 = staticinvoke <android.graphics.Bitmap: boolean nativeCompress(long,int,int,java.io.OutputStream,byte[])>($l2, $i1, i0, r2, $r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return z0;
    }

    public final boolean isMutable()
    {
        android.graphics.Bitmap r0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsMutable>;

        return $z0;
    }

    public final boolean isPremultiplied()
    {
        android.graphics.Bitmap r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeIsPremultiplied(long)>($l0);

        return $z0;
    }

    public final void setPremultiplied(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        r0.<android.graphics.Bitmap: boolean mRequestPremultiplied> = z0;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPremultiplied(long,boolean)>($l0, z0);

        return;
    }

    public final int getWidth()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mWidth>;

        return $i0;
    }

    public final int getHeight()
    {
        android.graphics.Bitmap r0;
        int $i0;

        r0 := @this: android.graphics.Bitmap;

        $i0 = r0.<android.graphics.Bitmap: int mHeight>;

        return $i0;
    }

    public int getScaledWidth(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledHeight(android.graphics.Canvas)
    {
        android.graphics.Bitmap r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.graphics.Canvas: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledHeight(android.util.DisplayMetrics)
    {
        android.graphics.Bitmap r0;
        android.util.DisplayMetrics r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i1 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i0, $i2, $i1);

        return $i3;
    }

    public int getScaledWidth(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public int getScaledHeight(int)
    {
        android.graphics.Bitmap r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        $i3 = staticinvoke <android.graphics.Bitmap: int scaleFromDensity(int,int,int)>($i1, $i2, i0);

        return $i3;
    }

    public static int scaleFromDensity(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 == 0 goto label1;

        if i2 == 0 goto label1;

        if i1 != i2 goto label2;

     label1:
        return i0;

     label2:
        $i4 = i0 * i2;

        $i3 = i1 >> 1;

        $i5 = $i4 + $i3;

        $i6 = $i5 / i1;

        return $i6;
    }

    public final int getRowBytes()
    {
        android.graphics.Bitmap r0;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeRowBytes(long)>($l0);

        return $i1;
    }

    public final int getByteCount()
    {
        android.graphics.Bitmap r0;
        int $i0, $i1, $i2;

        r0 := @this: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public final int getAllocationByteCount()
    {
        android.graphics.Bitmap r0;
        byte[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        if $r1 != null goto label1;

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getByteCount()>();

        return $i1;

     label1:
        $r2 = r0.<android.graphics.Bitmap: byte[] mBuffer>;

        $i0 = lengthof $r2;

        return $i0;
    }

    public final android.graphics.Bitmap$Config getConfig()
    {
        android.graphics.Bitmap r0;
        long $l0;
        int $i1;
        android.graphics.Bitmap$Config $r1;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i1 = staticinvoke <android.graphics.Bitmap: int nativeConfig(long)>($l0);

        $r1 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config nativeToConfig(int)>($i1);

        return $r1;
    }

    public final boolean hasAlpha()
    {
        android.graphics.Bitmap r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeHasAlpha(long)>($l0);

        return $z0;
    }

    public void setHasAlpha(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z1 = r0.<android.graphics.Bitmap: boolean mRequestPremultiplied>;

        staticinvoke <android.graphics.Bitmap: void nativeSetHasAlpha(long,boolean,boolean)>($l0, z0, $z1);

        return;
    }

    public final boolean hasMipMap()
    {
        android.graphics.Bitmap r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeHasMipMap(long)>($l0);

        return $z0;
    }

    public final void setHasMipMap(boolean)
    {
        android.graphics.Bitmap r0;
        boolean z0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetHasMipMap(long,boolean)>($l0, z0);

        return;
    }

    public void eraseColor(int)
    {
        android.graphics.Bitmap r0;
        int i0;
        boolean $z0;
        long $l1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t erase a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot erase immutable bitmaps");

        throw $r1;

     label1:
        $l1 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(long,int)>($l1, i0);

        return;
    }

    public int getPixel(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i3;
        long $l2;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixel() on a recycled bitmap");

        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $l2 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $i3 = staticinvoke <android.graphics.Bitmap: int nativeGetPixel(long,int,int)>($l2, i0, i1);

        return $i3;
    }

    public void getPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        long $l6;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixels() on a recycled bitmap");

        if i4 == 0 goto label1;

        if i5 != 0 goto label2;

     label1:
        return;

     label2:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $l6 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeGetPixels(long,int[],int,int,int,int,int,int)>($l6, r1, i0, i1, i2, i3, i4, i5);

        return;
    }

    private void checkPixelAccess(int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i0 < $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be < bitmap.width()");

        throw $r2;

     label1:
        $i3 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i1 < $i3 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be < bitmap.height()");

        throw $r1;

     label2:
        return;
    }

    private void checkPixelsAccess(int, int, int, int, int, int, int[])
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6, $r7;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: int[];

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>(i0, i1);

        if i2 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r7;

     label1:
        if i3 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r5;

     label2:
        $i8 = i0 + i2;

        $i9 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i8 <= $i9 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r6;

     label3:
        $i10 = i1 + i3;

        $i11 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if $i10 <= $i11 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r3;

     label4:
        $i12 = staticinvoke <java.lang.Math: int abs(int)>(i5);

        if $i12 >= i2 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r4;

     label5:
        $i13 = i3 - 1;

        $i14 = $i13 * i5;

        i6 = i4 + $i14;

        i7 = lengthof r1;

        if i4 < 0 goto label6;

        $i16 = i4 + i2;

        if $i16 > i7 goto label6;

        if i6 < 0 goto label6;

        $i15 = i6 + i2;

        if $i15 <= i7 goto label7;

     label6:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label7:
        return;
    }

    public void setPixel(int, int, int)
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2;
        boolean $z0;
        long $l3;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.Bitmap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixel() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>(i0, i1);

        $l3 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixel(long,int,int,int)>($l3, i0, i1, i2);

        return;
    }

    public void setPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        boolean $z0;
        long $l6;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixels() on a recycled bitmap");

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        if i4 == 0 goto label2;

        if i5 != 0 goto label3;

     label2:
        return;

     label3:
        specialinvoke r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>(i2, i3, i4, i5, i0, i1, r1);

        $l6 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixels(long,int[],int,int,int,int,int,int)>($l6, r1, i0, i1, i2, i3, i4, i5);

        return;
    }

    public int describeContents()
    {
        android.graphics.Bitmap r0;

        r0 := @this: android.graphics.Bitmap;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.graphics.Bitmap r0;
        android.os.Parcel r1;
        int i0, $i1;
        boolean $z0, $z1;
        long $l2;
        java.lang.RuntimeException $r2;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t parcel a recycled bitmap");

        $l2 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $z0 = r0.<android.graphics.Bitmap: boolean mIsMutable>;

        $i1 = r0.<android.graphics.Bitmap: int mDensity>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeWriteToParcel(long,boolean,int,android.os.Parcel)>($l2, $z0, $i1, r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("native writeToParcel failed");

        throw $r2;

     label1:
        return;
    }

    public android.graphics.Bitmap extractAlpha()
    {
        android.graphics.Bitmap r0, $r1;

        r0 := @this: android.graphics.Bitmap;

        $r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>(null, null);

        return $r1;
    }

    public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[])
    {
        android.graphics.Bitmap r0, r3;
        android.graphics.Paint r1;
        int[] r2;
        long l0, $l1, $l3;
        int $i2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Paint;

        r2 := @parameter1: int[];

        specialinvoke r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t extractAlpha on a recycled bitmap");

        if r1 == null goto label1;

        $l3 = r1.<android.graphics.Paint: long mNativePaint>;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        l0 = $l3;

        $l1 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(long,long,int[])>($l1, l0, r2);

        if r3 != null goto label3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to extractAlpha on Bitmap");

        throw $r4;

     label3:
        $i2 = r0.<android.graphics.Bitmap: int mDensity>;

        r3.<android.graphics.Bitmap: int mDensity> = $i2;

        return r3;
    }

    public boolean sameAs(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        boolean $z0, $z1;
        long $l0, $l1;

        r0 := @this: android.graphics.Bitmap;

        r1 := @parameter0: android.graphics.Bitmap;

        if r0 == r1 goto label1;

        if r1 == null goto label2;

        $l1 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        $l0 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $z1 = staticinvoke <android.graphics.Bitmap: boolean nativeSameAs(long,long)>($l1, $l0);

        if $z1 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void prepareToDraw()
    {
        android.graphics.Bitmap r0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativePrepareToDraw(long)>($l0);

        return;
    }

    private static native android.graphics.Bitmap nativeCreate(int[], int, int, int, int, int, boolean);

    private static native android.graphics.Bitmap nativeCopy(long, int, boolean);

    private static native void nativeDestructor(long);

    private static native boolean nativeRecycle(long);

    private static native void nativeReconfigure(long, int, int, int, int, boolean);

    private static native boolean nativeCompress(long, int, int, java.io.OutputStream, byte[]);

    private static native void nativeErase(long, int);

    private static native int nativeRowBytes(long);

    private static native int nativeConfig(long);

    private static native int nativeGetPixel(long, int, int);

    private static native void nativeGetPixels(long, int[], int, int, int, int, int, int);

    private static native void nativeSetPixel(long, int, int, int);

    private static native void nativeSetPixels(long, int[], int, int, int, int, int, int);

    private static native void nativeCopyPixelsToBuffer(long, java.nio.Buffer);

    private static native void nativeCopyPixelsFromBuffer(long, java.nio.Buffer);

    private static native int nativeGenerationId(long);

    private static native android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel);

    private static native boolean nativeWriteToParcel(long, boolean, int, android.os.Parcel);

    private static native android.graphics.Bitmap nativeExtractAlpha(long, long, int[]);

    private static native void nativePrepareToDraw(long);

    private static native boolean nativeHasAlpha(long);

    private static native boolean nativeIsPremultiplied(long);

    private static native void nativeSetPremultiplied(long, boolean);

    private static native void nativeSetHasAlpha(long, boolean, boolean);

    private static native boolean nativeHasMipMap(long);

    private static native void nativeSetHasMipMap(long, boolean);

    private static native boolean nativeSameAs(long, long);

    final long ni()
    {
        android.graphics.Bitmap r0;
        long $l0;

        r0 := @this: android.graphics.Bitmap;

        $l0 = r0.<android.graphics.Bitmap: long mNativeBitmap>;

        return $l0;
    }

    static android.graphics.Bitmap access$000(android.os.Parcel)
    {
        android.os.Parcel r0;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.os.Parcel;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>(r0);

        return $r1;
    }

    static void access$100(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.graphics.Bitmap: void nativeDestructor(long)>(l0);

        return;
    }

    static void <clinit>()
    {
        android.graphics.Bitmap$1 $r0;

        <android.graphics.Bitmap: int WORKING_COMPRESS_STORAGE> = 4096;

        <android.graphics.Bitmap: int DENSITY_NONE> = 0;

        <android.graphics.Bitmap: int sDefaultDensity> = -1;

        $r0 = new android.graphics.Bitmap$1;

        specialinvoke $r0.<android.graphics.Bitmap$1: void <init>()>();

        <android.graphics.Bitmap: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
}
