public class android.hardware.camera2.utils.ParamsUtils extends java.lang.Object
{
    private static final int RATIONAL_DENOMINATOR;

    public static android.graphics.Rect createRect(android.util.Size)
    {
        android.util.Size r0;
        android.graphics.Rect $r2;
        int $i0, $i1;

        r0 := @parameter0: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "size must not be null");

        $r2 = new android.graphics.Rect;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r2;
    }

    public static android.graphics.Rect createRect(android.graphics.RectF)
    {
        android.graphics.RectF r0;
        android.graphics.Rect r1, $r3;

        r0 := @parameter0: android.graphics.RectF;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "rect must not be null");

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r1 = $r3;

        virtualinvoke r0.<android.graphics.RectF: void roundOut(android.graphics.Rect)>(r1);

        return r1;
    }

    public static android.graphics.Rect mapRect(android.graphics.Matrix, android.graphics.Rect)
    {
        android.graphics.Matrix r0;
        android.graphics.Rect r1, $r6;
        android.graphics.RectF r2, $r5;

        r0 := @parameter0: android.graphics.Matrix;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "transform must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rect must not be null");

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>(android.graphics.Rect)>(r1);

        r2 = $r5;

        virtualinvoke r0.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

        $r6 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>(r2);

        return $r6;
    }

    public static android.util.Size createSize(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        android.util.Size $r2;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "rect must not be null");

        $r2 = new android.util.Size;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i0, $i1);

        return $r2;
    }

    public static android.util.Rational createRational(float)
    {
        float f0, f1, $f2;
        int i0, i1;
        boolean $z0;
        byte $b2, $b3, $b4, $b5, $b6;
        android.util.Rational $r0, $r1, $r2, $r3, $r4;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $r4 = <android.util.Rational: android.util.Rational NaN>;

        return $r4;

     label1:
        $b2 = f0 cmpl #InfinityF;

        if $b2 != 0 goto label2;

        $r3 = <android.util.Rational: android.util.Rational POSITIVE_INFINITY>;

        return $r3;

     label2:
        $b3 = f0 cmpl #-InfinityF;

        if $b3 != 0 goto label3;

        $r2 = <android.util.Rational: android.util.Rational NEGATIVE_INFINITY>;

        return $r2;

     label3:
        $b4 = f0 cmpl 0.0F;

        if $b4 != 0 goto label4;

        $r1 = <android.util.Rational: android.util.Rational ZERO>;

        return $r1;

     label4:
        i0 = 1000000;

     label5:
        $f2 = (float) i0;

        f1 = f0 * $f2;

        $b5 = f1 cmpl -2.14748365E9F;

        if $b5 <= 0 goto label6;

        $b6 = f1 cmpg 2.14748365E9F;

        if $b6 < 0 goto label8;

     label6:
        if i0 != 1 goto label7;

        goto label8;

     label7:
        i0 = i0 / 10;

        goto label5;

     label8:
        i1 = (int) f1;

        $r0 = new android.util.Rational;

        specialinvoke $r0.<android.util.Rational: void <init>(int,int)>(i1, i0);

        return $r0;
    }

    public static void convertRectF(android.graphics.Rect, android.graphics.RectF)
    {
        android.graphics.Rect r0;
        android.graphics.RectF r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.RectF;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "source must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "destination must not be null");

        $i0 = r0.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        r1.<android.graphics.RectF: float left> = $f0;

        $i1 = r0.<android.graphics.Rect: int right>;

        $f1 = (float) $i1;

        r1.<android.graphics.RectF: float right> = $f1;

        $i2 = r0.<android.graphics.Rect: int bottom>;

        $f2 = (float) $i2;

        r1.<android.graphics.RectF: float bottom> = $f2;

        $i3 = r0.<android.graphics.Rect: int top>;

        $f3 = (float) $i3;

        r1.<android.graphics.RectF: float top> = $f3;

        return;
    }

    public static java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest$Key, java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        java.lang.Object r2, r3;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.hardware.camera2.CaptureRequest$Key;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "r must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "key must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "defaultValue must not be null");

        r3 = virtualinvoke r0.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>(r1);

        if r3 != null goto label1;

        return r2;

     label1:
        return r3;
    }

    private void <init>()
    {
        android.hardware.camera2.utils.ParamsUtils r0;
        java.lang.AssertionError $r1;

        r0 := @this: android.hardware.camera2.utils.ParamsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.utils.ParamsUtils: int RATIONAL_DENOMINATOR> = 1000000;

        return;
    }
}
