public class android.hardware.camera2.legacy.LegacyRequestMapper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean VERBOSE;
    private static final byte DEFAULT_JPEG_QUALITY;

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyRequestMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyRequestMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyRequest r0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.camera2.CaptureRequest r2;
        android.util.Size r3, r198;
        android.hardware.Camera$Parameters r4;
        android.graphics.Rect r5, $r15;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r6;
        int i0, $i2, $i3, $i10, $i11, $i12, $i13, $i14, $i20, $i23, $i28, $i30, $i32, $i33, $i35, $i36, $i37, $i38, $i40, $i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52;
        java.lang.Integer r7, $r16, $r18, $r36, $r38, $r40, $r45, $r48, $r49, $r52, $r56, $r61, $r63, $r64, $r83, $r84, $r87, $r89, $r96, $r105, $r129, $r131, $r135, $r139, $r140, $r142, r187, r190, r196;
        java.util.List r8, $r21, $r47, $r53, $r69, $r72, $r74, $r163, r181, r197;
        java.util.Iterator r9;
        int[] r10, r183;
        android.hardware.camera2.CameraCharacteristics$Key $r11, $r31;
        java.lang.Object $r12, $r14, $r19, $r22, $r23, $r25, $r28, $r30, $r32, $r34, $r35, $r41, $r44, $r50, $r54, $r57, $r62, $r66, $r80, $r82, $r85, $r88, $r94, $r102, $r104, $r112, $r128, $r138, $r143, $r177;
        android.hardware.camera2.CaptureRequest$Key $r13, $r17, $r20, $r26, $r27, $r29, $r33, $r37, $r39, $r46, $r51, $r55, $r58, $r65, $r71, $r73, $r79, $r81, $r86, $r90, $r92, $r103, $r111, $r130, $r137, $r141;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, z20;
        java.lang.String[] $r24;
        java.lang.Boolean $r42, $r43, $r59, $r60, r185, r189;
        java.lang.Float $r67, $r70, r191;
        java.lang.StringBuilder $r68, $r75, $r77, $r78, $r97, $r98, $r99, $r106, $r107, $r108, $r109, $r115, $r116, $r117, $r118, $r120, $r121, $r123, $r124, $r126, $r127, $r132, $r134, $r136, $r144, $r145, $r146, $r148, $r149, $r151, $r152, $r153, $r154, $r155, $r157, $r158, $r159, $r160, $r161, $r162, $r164, $r166, $r167, $r168, $r170, $r171, $r172, $r173, $r175, $r176;
        java.lang.String $r76, $r100, $r110, $r113, $r114, $r119, $r122, $r125, $r133, $r147, $r150, $r156, $r165, $r169, $r174, r178, r186, r188, r192, r193, r194;
        java.lang.Byte $r91, $r93, $r95, $r101;
        short $s4, $s7;
        byte $b5, $b8, $b19;
        double $d0, $d1, $d2;
        long $l15;
        float $f0;
        android.hardware.camera2.params.MeteringRectangle[] r179, r180;
        android.util.Range r182, r184;
        android.location.Location r195;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        r1 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r2 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r3 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r4 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r12 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r11);

        r5 = (android.graphics.Rect) $r12;

        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r14 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r13);

        $r15 = (android.graphics.Rect) $r14;

        r6 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect,android.graphics.Rect,android.util.Size,android.hardware.Camera$Parameters)>(r5, $r15, r3, r4);

        $z1 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z1 == 0 goto label01;

        $i30 = r6.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: int zoomIndex>;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setZoom(int)>($i30);

        goto label02;

     label01:
        $z0 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z0 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", "convertRequestToMetadata - zoom is not supported");

     label02:
        $r17 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r19 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r17, $r16);

        $r18 = (java.lang.Integer) $r19;

        i0 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        if i0 == 1 goto label03;

        $r168 = new java.lang.StringBuilder;

        specialinvoke $r168.<java.lang.StringBuilder: void <init>()>();

        $r171 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring unsupported colorCorrection.aberrationMode = ");

        $r170 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r169 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r169);

     label03:
        $r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r22 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r20);

        r7 = (java.lang.Integer) $r22;

        if r7 == null goto label04;

        $i28 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        r178 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String convertAeAntiBandingModeToLegacy(int)>($i28);

        goto label05;

     label04:
        $r21 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>();

        $r24 = newarray (java.lang.String)[4];

        $r24[0] = "auto";

        $r24[1] = "off";

        $r24[2] = "50hz";

        $r24[3] = "60hz";

        $r23 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.Object listSelectFirstFrom(java.util.List,java.lang.Object[])>($r21, $r24);

        r178 = (java.lang.String) $r23;

     label05:
        if r178 == null goto label06;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>(r178);

     label06:
        $r26 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        $r25 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r26);

        r179 = (android.hardware.camera2.params.MeteringRectangle[]) $r25;

        $r27 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>;

        $r28 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r27);

        if $r28 == null goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "convertRequestMetadata - control.awbRegions setting is not supported, ignoring value");

     label07:
        i42 = virtualinvoke r4.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        r8 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.camera2.params.MeteringRectangle[],int,java.lang.String)>(r5, r6, r179, i42, "AE");

        if i42 <= 0 goto label08;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>(r8);

     label08:
        $r29 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        $r30 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r29);

        r180 = (android.hardware.camera2.params.MeteringRectangle[]) $r30;

        i43 = virtualinvoke r4.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        r181 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.camera2.params.MeteringRectangle[],int,java.lang.String)>(r5, r6, r180, i43, "AF");

        if i43 <= 0 goto label09;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>(r181);

     label09:
        $r33 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r34 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r33);

        r182 = (android.util.Range) $r34;

        if r182 == null goto label14;

        r183 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int[] convertAeFpsRangeToLegacy(android.util.Range)>(r182);

        z18 = 0;

        $r163 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        r9 = interfaceinvoke $r163.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z16 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label12;

        $r177 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (int[]) $r177;

        $i40 = r183[0];

        $i35 = r10[0];

        if $i40 != $i35 goto label11;

        $i38 = r183[1];

        $i41 = r10[1];

        if $i38 != $i41 goto label11;

        z18 = 1;

        goto label12;

     label11:
        goto label10;

     label12:
        if z18 == 0 goto label13;

        $i37 = r183[0];

        $i36 = r183[1];

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i37, $i36);

        goto label14;

     label13:
        $r162 = new java.lang.StringBuilder;

        specialinvoke $r162.<java.lang.StringBuilder: void <init>()>();

        $r161 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported FPS range set [");

        $i33 = r183[0];

        $r173 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r172 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i32 = r183[1];

        $r175 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r174 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r174);

     label14:
        $r31 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r32 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r31);

        r184 = (android.util.Range) $r32;

        $r37 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r35 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r37, $r38);

        $r36 = (java.lang.Integer) $r35;

        i44 = virtualinvoke $r36.<java.lang.Integer: int intValue()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i44);

        $z2 = virtualinvoke r184.<android.util.Range: boolean contains(java.lang.Comparable)>($r40);

        if $z2 != 0 goto label15;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "convertRequestMetadata - control.aeExposureCompensation is out of range, ignoring value");

        i44 = 0;

     label15:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setExposureCompensation(int)>(i44);

        $r39 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z3 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r41 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r2, $r39, $r43, $z3, $r42);

        r185 = (java.lang.Boolean) $r41;

        if r185 == null goto label16;

        $z17 = virtualinvoke r185.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>($z17);

     label16:
        $z4 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z4 == 0 goto label17;

        $r167 = new java.lang.StringBuilder;

        specialinvoke $r167.<java.lang.StringBuilder: void <init>()>();

        $r166 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - control.aeLock set to ");

        $r164 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r185);

        $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r165);

     label17:
        staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: void mapAeAndFlashMode(android.hardware.camera2.CaptureRequest,android.hardware.Camera$Parameters)>(r2, r4);

        $r46 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r44 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r46, $r45);

        $r48 = (java.lang.Integer) $r44;

        i45 = virtualinvoke $r48.<java.lang.Integer: int intValue()>();

        $r47 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        r186 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertAfModeToLegacy(int,java.util.List)>(i45, $r47);

        if r186 == null goto label18;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>(r186);

     label18:
        $z7 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z7 == 0 goto label19;

        $r155 = new java.lang.StringBuilder;

        specialinvoke $r155.<java.lang.StringBuilder: void <init>()>();

        $r154 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - control.afMode ");

        $r153 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45);

        $r152 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mapped to ");

        $r151 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r186);

        $r150 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r150);

     label19:
        $r51 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r53 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>();

        if $r53 == null goto label20;

        $z5 = 1;

        goto label21;

     label20:
        $z5 = 0;

     label21:
        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r50 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r2, $r51, $r52, $z5, $r49);

        r187 = (java.lang.Integer) $r50;

        r188 = null;

        if r187 == null goto label22;

        $i23 = virtualinvoke r187.<java.lang.Integer: int intValue()>();

        r188 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String convertAwbModeToLegacy(int)>($i23);

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>(r188);

     label22:
        $z6 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z6 == 0 goto label23;

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r160 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - control.awbMode ");

        $r159 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r187);

        $r158 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mapped to ");

        $r157 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r188);

        $r156 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r156);

     label23:
        $r58 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r59 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z8 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>();

        $r60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r54 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r2, $r58, $r59, $z8, $r60);

        r189 = (java.lang.Boolean) $r54;

        if r189 == null goto label24;

        $z14 = virtualinvoke r189.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>($z14);

     label24:
        $r55 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r57 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r55, $r56);

        $r64 = (java.lang.Integer) $r57;

        i46 = virtualinvoke $r64.<java.lang.Integer: int intValue()>();

        i47 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int filterSupportedCaptureIntent(int)>(i46);

        if i47 == 3 goto label25;

        if i47 != 4 goto label26;

     label25:
        $z13 = 1;

        goto label27;

     label26:
        $z13 = 0;

     label27:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>($z13);

        $r65 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z9 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r62 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r2, $r65, $r61, $z9, $r63);

        r190 = (java.lang.Integer) $r62;

        if r190 == null goto label30;

        $i20 = virtualinvoke r190.<java.lang.Integer: int intValue()>();

        if $i20 != 1 goto label28;

        $z15 = 1;

        goto label29;

     label28:
        $z15 = 0;

     label29:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>($z15);

     label30:
        $r69 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        z19 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>($r69, "infinity");

        $r71 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE>;

        $r70 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r67 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r66 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object,boolean,java.lang.Object)>(r2, $r71, $r70, z19, $r67);

        r191 = (java.lang.Float) $r66;

        if r191 == null goto label31;

        $f0 = virtualinvoke r191.<java.lang.Float: float floatValue()>();

        $b19 = $f0 cmpl 0.0F;

        if $b19 == 0 goto label32;

     label31:
        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring android.lens.focusDistance ");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z19);

        $r75 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", only 0.0f is supported");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r76);

     label32:
        $r74 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>();

        if $r74 == null goto label38;

        $r141 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r140 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r143 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r141, $r140);

        $r142 = (java.lang.Integer) $r143;

        i48 = virtualinvoke $r142.<java.lang.Integer: int intValue()>();

        lookupswitch(i48)
        {
            case 1: goto label35;
            case 2: goto label33;
            default: goto label36;
        };

     label33:
        $r137 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r139 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r138 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r137, $r139);

        $r135 = (java.lang.Integer) $r138;

        i49 = virtualinvoke $r135.<java.lang.Integer: int intValue()>();

        r192 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertSceneModeToLegacy(int)>(i49);

        if r192 == null goto label34;

        r193 = r192;

        goto label37;

     label34:
        r193 = "auto";

        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown requested scene mode: ");

        $r134 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i49);

        $r133 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r133);

        goto label37;

     label35:
        r193 = "auto";

        goto label37;

     label36:
        $r148 = new java.lang.StringBuilder;

        specialinvoke $r148.<java.lang.StringBuilder: void <init>()>();

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Control mode ");

        $r145 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i48);

        $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unsupported, defaulting to AUTO");

        $r147 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r147);

        r193 = "auto";

     label37:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>(r193);

     label38:
        $r72 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>();

        if $r72 == null goto label40;

        $r130 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE>;

        $r131 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r128 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r130, $r131);

        $r129 = (java.lang.Integer) $r128;

        i50 = virtualinvoke $r129.<java.lang.Integer: int intValue()>();

        r194 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String convertEffectModeToLegacy(int)>(i50);

        if r194 == null goto label39;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>(r194);

        goto label40;

     label39:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>("none");

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown requested effect mode: ");

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i50);

        $r122 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r122);

     label40:
        $r73 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE>;

        $r84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r85 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r73, $r84);

        $r83 = (java.lang.Integer) $r85;

        i51 = virtualinvoke $r83.<java.lang.Integer: int intValue()>();

        if i51 == 0 goto label41;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - ignoring sensor.testPatternMode ");

        $r126 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i51);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; only OFF is supported");

        $r125 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r125);

     label41:
        $r81 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION>;

        $r82 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r81);

        r195 = (android.location.Location) $r82;

        if r195 == null goto label43;

        $z12 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: boolean checkForCompleteGpsData(android.location.Location)>(r195);

        if $z12 == 0 goto label42;

        $d2 = virtualinvoke r195.<android.location.Location: double getAltitude()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setGpsAltitude(double)>($d2);

        $d1 = virtualinvoke r195.<android.location.Location: double getLatitude()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setGpsLatitude(double)>($d1);

        $d0 = virtualinvoke r195.<android.location.Location: double getLongitude()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setGpsLongitude(double)>($d0);

        $r114 = virtualinvoke r195.<android.location.Location: java.lang.String getProvider()>();

        $r113 = virtualinvoke $r114.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>($r113);

        $l15 = virtualinvoke r195.<android.location.Location: long getTime()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>($l15);

        goto label44;

     label42:
        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r117 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete GPS parameters provided in location ");

        $r120 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r195);

        $r119 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r119);

        goto label44;

     label43:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void removeGpsData()>();

     label44:
        $r79 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r80 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r79);

        r196 = (java.lang.Integer) $r80;

        $r90 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        if r196 != null goto label45;

        $i3 = 0;

        goto label46;

     label45:
        $i3 = virtualinvoke r196.<java.lang.Integer: int intValue()>();

     label46:
        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r88 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r90, $r89);

        $r87 = (java.lang.Integer) $r88;

        $i2 = virtualinvoke $r87.<java.lang.Integer: int intValue()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setRotation(int)>($i2);

        $r86 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>;

        $r95 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(85);

        $r94 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r86, $r95);

        $r93 = (java.lang.Byte) $r94;

        $b5 = virtualinvoke $r93.<java.lang.Byte: byte byteValue()>();

        $s4 = 255 & $b5;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setJpegQuality(int)>($s4);

        $r92 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY>;

        $r91 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(85);

        $r102 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r92, $r91);

        $r101 = (java.lang.Byte) $r102;

        $b8 = virtualinvoke $r101.<java.lang.Byte: byte byteValue()>();

        $s7 = 255 & $b8;

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>($s7);

        r197 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>();

        if r197 == null goto label53;

        $i10 = interfaceinvoke r197.<java.util.List: int size()>();

        if $i10 <= 0 goto label53;

        $r111 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $r112 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r111);

        r198 = (android.util.Size) $r112;

        if r198 != null goto label47;

        $z10 = 0;

        goto label49;

     label47:
        $i11 = virtualinvoke r198.<android.util.Size: int getWidth()>();

        $i12 = virtualinvoke r198.<android.util.Size: int getHeight()>();

        $z11 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: boolean containsSize(java.util.List,int,int)>(r197, $i11, $i12);

        if $z11 != 0 goto label48;

        $z10 = 1;

        goto label49;

     label48:
        $z10 = 0;

     label49:
        z20 = $z10;

        if z20 == 0 goto label50;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid JPEG thumbnail size set ");

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r198);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping thumbnail...");

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r110);

     label50:
        if r198 == null goto label51;

        if z20 == 0 goto label52;

     label51:
        virtualinvoke r4.<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>(0, 0);

        goto label53;

     label52:
        $i13 = virtualinvoke r198.<android.util.Size: int getWidth()>();

        $i14 = virtualinvoke r198.<android.util.Size: int getHeight()>();

        virtualinvoke r4.<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>($i13, $i14);

     label53:
        $r103 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r105 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r104 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r103, $r105);

        $r96 = (java.lang.Integer) $r104;

        i52 = virtualinvoke $r96.<java.lang.Integer: int intValue()>();

        if i52 == 1 goto label54;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertRequestToMetadata - Ignoring unsupported noiseReduction.mode = ");

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i52);

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r100);

     label54:
        return;
    }

    private static boolean checkForCompleteGpsData(android.location.Location)
    {
        android.location.Location r0;
        java.lang.String $r1;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @parameter0: android.location.Location;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<android.location.Location: java.lang.String getProvider()>();

        if $r1 == null goto label1;

        $l0 = virtualinvoke r0.<android.location.Location: long getTime()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static int filterSupportedCaptureIntent(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        java.lang.String $r4, $r9;
        byte b3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            default: goto label3;
        };

     label1:
        goto label4;

     label2:
        b3 = 1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported control.captureIntent value ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; default to PREVIEW");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r4);

     label3:
        i0 = 1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown control.captureIntent value ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; default to PREVIEW");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r9);

     label4:
        return i0;
    }

    private static java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.camera2.params.MeteringRectangle[], int, java.lang.String)
    {
        android.graphics.Rect r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.camera2.params.MeteringRectangle[] r2, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i9, i10, i11;
        java.lang.String r3, $r18, $r19, $r26;
        java.util.ArrayList r4, $r11, $r12, r31;
        android.hardware.camera2.params.MeteringRectangle r6, r32;
        android.hardware.camera2.legacy.ParameterUtils$MeteringData r7;
        android.hardware.Camera$Area[] $r8, $r27;
        android.hardware.Camera$Area $r9, $r28, $r29;
        java.util.List $r10, $r30;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24;
        boolean $z0;
        java.lang.Object $r25;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.camera2.params.MeteringRectangle[];

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        if r2 == null goto label01;

        if i0 > 0 goto label03;

     label01:
        if i0 <= 0 goto label02;

        $r8 = newarray (android.hardware.Camera$Area)[1];

        $r9 = <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT>;

        $r8[0] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        return $r10;

     label02:
        return null;

     label03:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r4 = $r11;

        r5 = r2;

        i1 = lengthof r5;

        i2 = 0;

     label04:
        if i2 >= i1 goto label06;

        r6 = r5[i2];

        $i9 = virtualinvoke r6.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        if $i9 == 0 goto label05;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r6);

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        $i3 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i3 != 0 goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "Only received metering rectangles with weight 0.");

        $r27 = newarray (android.hardware.Camera$Area)[1];

        $r29 = <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT>;

        $r27[0] = $r29;

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        return $r30;

     label07:
        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i4);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(i10);

        r31 = $r12;

        i11 = 0;

     label08:
        if i11 >= i10 goto label09;

        $r25 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i11);

        r32 = (android.hardware.camera2.params.MeteringRectangle) $r25;

        r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$MeteringData convertMeteringRectangleToLegacy(android.graphics.Rect,android.hardware.camera2.params.MeteringRectangle,android.hardware.camera2.legacy.ParameterUtils$ZoomData)>(r0, r32, r1);

        $r28 = r7.<android.hardware.camera2.legacy.ParameterUtils$MeteringData: android.hardware.Camera$Area meteringArea>;

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r28);

        i11 = i11 + 1;

        goto label08;

     label09:
        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        if i0 >= $i5 goto label10;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertMeteringRegionsToLegacy - Too many requested ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" regions, ignoring all beyond the first ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r26);

     label10:
        $z0 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z0 == 0 goto label11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertMeteringRegionsToLegacy - ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" areas = ");

        $r18 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromAreaList(java.util.List)>(r31);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r19);

     label11:
        return r31;
    }

    private static void mapAeAndFlashMode(android.hardware.camera2.CaptureRequest, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.Camera$Parameters r1;
        int i0, i1;
        java.util.List r2;
        java.lang.String r3, $r19, $r20;
        android.hardware.camera2.CaptureRequest$Key $r4, $r8;
        java.lang.Integer $r5, $r7, $r9, $r11;
        java.lang.Object $r6, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r0, $r4, $r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r0, $r8, $r9);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        r3 = null;

        $z0 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "off");

        if $z0 == 0 goto label01;

        r3 = "off";

     label01:
        if i1 != 1 goto label05;

        if i0 != 2 goto label03;

        $z5 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "torch");

        if $z5 == 0 goto label02;

        r3 = "torch";

        goto label11;

     label02:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore flash.mode == TORCH;camera does not support it");

        goto label11;

     label03:
        if i0 != 1 goto label11;

        $z6 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "on");

        if $z6 == 0 goto label04;

        r3 = "on";

        goto label11;

     label04:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore flash.mode == SINGLE;camera does not support it");

        goto label11;

     label05:
        if i1 != 3 goto label07;

        $z3 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "on");

        if $z3 == 0 goto label06;

        r3 = "on";

        goto label11;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_ALWAYS_FLASH;camera does not support it");

        goto label11;

     label07:
        if i1 != 2 goto label09;

        $z4 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "auto");

        if $z4 == 0 goto label08;

        r3 = "auto";

        goto label11;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_AUTO_FLASH;camera does not support it");

        goto label11;

     label09:
        if i1 != 4 goto label11;

        $z2 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listContains(java.util.List,java.lang.Object)>(r2, "red-eye");

        if $z2 == 0 goto label10;

        r3 = "red-eye";

        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", "mapAeAndFlashMode - Ignore control.aeMode == ON_AUTO_FLASH_REDEYE;camera does not support it");

     label11:
        if r3 == null goto label12;

        virtualinvoke r1.<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>(r3);

     label12:
        $z1 = <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE>;

        if $z1 == 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAeAndFlashMode - set flash.mode (api1) to ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requested (api2) ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supported (api1) ");

        $r19 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r20);

     label13:
        return;
    }

    private static java.lang.String convertAeAntiBandingModeToLegacy(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return "off";

     label2:
        return "50hz";

     label3:
        return "60hz";

     label4:
        return "auto";

     label5:
        return null;
    }

    private static int[] convertAeFpsRangeToLegacy(android.util.Range)
    {
        android.util.Range r0;
        int[] r1;
        java.lang.Comparable $r2, $r4;
        java.lang.Integer $r3, $r5;
        int $i0, $i1;

        r0 := @parameter0: android.util.Range;

        r1 = newarray (int)[2];

        $r2 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r1[0] = $i0;

        $r4 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getUpper()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[1] = $i1;

        return r1;
    }

    private static java.lang.String convertAwbModeToLegacy(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            default: goto label9;
        };

     label1:
        return "auto";

     label2:
        return "incandescent";

     label3:
        return "fluorescent";

     label4:
        return "warm-fluorescent";

     label5:
        return "daylight";

     label6:
        return "cloudy-daylight";

     label7:
        return "twilight";

     label8:
        return "shade";

     label9:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAwbModeToLegacy - unrecognized control.awbMode");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r3);

        return "auto";
    }

    private static java.lang.Object getIfSupported(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest$Key, java.lang.Object, boolean, java.lang.Object)
    {
        android.hardware.camera2.CaptureRequest r0;
        android.hardware.camera2.CaptureRequest$Key r1;
        java.lang.Object r2, r3, r4;
        boolean z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest;

        r1 := @parameter1: android.hardware.camera2.CaptureRequest$Key;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.Object;

        r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r0, r1, r2);

        if z0 != 0 goto label2;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r4, r3);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported; ignoring requested value ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyRequestMapper", $r10);

     label1:
        return null;

     label2:
        return r4;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.camera2.legacy.LegacyRequestMapper: byte DEFAULT_JPEG_QUALITY> = 85;

        <android.hardware.camera2.legacy.LegacyRequestMapper: java.lang.String TAG> = "LegacyRequestMapper";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LegacyRequestMapper", 2);

        <android.hardware.camera2.legacy.LegacyRequestMapper: boolean VERBOSE> = $z0;

        return;
    }
}
