public abstract class android.widget.AbsSeekBar extends android.widget.ProgressBar
{
    private final android.graphics.Rect mTempRect;
    private android.graphics.drawable.Drawable mThumb;
    private android.content.res.ColorStateList mThumbTintList;
    private android.graphics.PorterDuff$Mode mThumbTintMode;
    private boolean mHasThumbTint;
    private boolean mHasThumbTintMode;
    private int mThumbOffset;
    private boolean mSplitTrack;
    float mTouchProgressOffset;
    boolean mIsUserSeekable;
    private int mKeyProgressIncrement;
    private android.animation.ObjectAnimator mPositionAnimator;
    private static final int PROGRESS_ANIMATION_DURATION;
    private static final int NO_ALPHA;
    private float mDisabledAlpha;
    private int mScaledTouchSlop;
    private float mTouchDownX;
    private boolean mIsDragging;

    public void <init>(android.content.Context)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.graphics.Rect $r2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context)>(r1);

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r2;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.graphics.Rect $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r3;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, i2, $i3, $i4, $i5;
        android.content.res.TypedArray r3, r12;
        android.graphics.drawable.Drawable r4;
        android.graphics.Rect $r5;
        int[] $r6, $r7;
        boolean $z0, $z1, $z2;
        android.view.ViewConfiguration $r8;
        float $f0;
        android.content.res.ColorStateList $r9;
        android.graphics.PorterDuff$Mode $r10, $r11;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r5;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        $r6 = <com.android.internal.R$styleable: int[] SeekBar>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r6, i0, i1);

        r4 = virtualinvoke r3.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>(r4);

        $z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean hasValue(int)>(4);

        if $z0 == 0 goto label1;

        $i5 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(4, -1);

        $r10 = r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode>;

        $r11 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i5, $r10);

        r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode> = $r11;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode> = 1;

     label1:
        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean hasValue(int)>(3);

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r3.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(3);

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = $r9;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 1;

     label2:
        $i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getThumbOffset()>();

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(1, $i3);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setThumbOffset(int)>(i2);

        $z2 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 0);

        r0.<android.widget.AbsSeekBar: boolean mSplitTrack> = $z2;

        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        $r7 = <com.android.internal.R$styleable: int[] Theme>;

        r12 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r7, 0, 0);

        $f0 = virtualinvoke r12.<android.content.res.TypedArray: float getFloat(int,float)>(3, 0.5F);

        r0.<android.widget.AbsSeekBar: float mDisabledAlpha> = $f0;

        virtualinvoke r12.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        $r8 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i4 = virtualinvoke $r8.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<android.widget.AbsSeekBar: int mScaledTouchSlop> = $i4;

        return;
    }

    public void setThumb(android.graphics.drawable.Drawable)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, $r3, $r4, $r5, $r6, $r7;
        boolean z0, $z1, $z3;
        int[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r3 == null goto label1;

        $r7 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == $r7 goto label1;

        $r6 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if r1 == null goto label5;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $z3 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean canResolveLayoutDirection()>();

        if $z3 == 0 goto label3;

        $i7 = virtualinvoke r0.<android.widget.AbsSeekBar: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>($i7);

     label3:
        $i2 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i3 = $i2 / 2;

        r0.<android.widget.AbsSeekBar: int mThumbOffset> = $i3;

        if z0 == 0 goto label5;

        $i4 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i5 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if $i4 != $i5 goto label4;

        $i6 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i8 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if $i6 == $i8 goto label5;

     label4:
        virtualinvoke r0.<android.widget.AbsSeekBar: void requestLayout()>();

     label5:
        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb> = r1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        if z0 == 0 goto label6;

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getHeight()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void updateThumbAndTrackPos(int,int)>($i0, $i1);

        if r1 == null goto label6;

        $z1 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z1 == 0 goto label6;

        r2 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>(r2);

     label6:
        return;
    }

    public android.graphics.drawable.Drawable getThumb()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        return $r1;
    }

    public void setThumbTintList(android.content.res.ColorStateList)
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.res.ColorStateList;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        return;
    }

    public android.content.res.ColorStateList getThumbTintList()
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList>;

        return $r1;
    }

    public void setThumbTintMode(android.graphics.PorterDuff$Mode)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        return;
    }

    public android.graphics.PorterDuff$Mode getThumbTintMode()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode>;

        return $r1;
    }

    private void applyThumbTint()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable $r1, $r2, $r3, $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.PorterDuff$Mode $r4;
        android.content.res.ColorStateList $r6;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r1 == null goto label3;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTint>;

        if $z0 != 0 goto label1;

        $z3 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode>;

        if $z3 == 0 goto label3;

     label1:
        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb> = $r3;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTint>;

        if $z1 == 0 goto label2;

        $r7 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r6 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList>;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r6);

     label2:
        $z2 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTintMode>;

        if $z2 == 0 goto label3;

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode mThumbTintMode>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>($r4);

     label3:
        return;
    }

    public int getThumbOffset()
    {
        android.widget.AbsSeekBar r0;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        $i0 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        return $i0;
    }

    public void setThumbOffset(int)
    {
        android.widget.AbsSeekBar r0;
        int i0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r0.<android.widget.AbsSeekBar: int mThumbOffset> = i0;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        return;
    }

    public void setSplitTrack(boolean)
    {
        android.widget.AbsSeekBar r0;
        boolean z0;

        r0 := @this: android.widget.AbsSeekBar;

        z0 := @parameter0: boolean;

        r0.<android.widget.AbsSeekBar: boolean mSplitTrack> = z0;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        return;
    }

    public boolean getSplitTrack()
    {
        android.widget.AbsSeekBar r0;
        boolean $z0;

        r0 := @this: android.widget.AbsSeekBar;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mSplitTrack>;

        return $z0;
    }

    public void setKeyProgressIncrement(int)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = neg i0;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = $i1;

        return;
    }

    public int getKeyProgressIncrement()
    {
        android.widget.AbsSeekBar r0;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        $i0 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        return $i0;
    }

    public synchronized void setMax(int)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.ProgressBar: void setMax(int)>(i0);

        $i1 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        if $i1 == 0 goto label1;

        $i5 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i6 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        $i7 = $i5 / $i6;

        if $i7 <= 20 goto label2;

     label1:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $f0 = (float) $i2;

        $f1 = $f0 / 20.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>($i4);

     label2:
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == $r2 goto label1;

        $z0 = specialinvoke r0.<android.widget.ProgressBar: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.widget.AbsSeekBar;

        specialinvoke r0.<android.widget.ProgressBar: void jumpDrawablesToCurrentState()>();

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        return;
    }

    protected void drawableStateChanged()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, r2;
        boolean $z0, $z2;
        int[] $r3;
        float $f0, $f1;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        specialinvoke r0.<android.widget.ProgressBar: void drawableStateChanged()>();

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getProgressDrawable()>();

        if r1 == null goto label3;

        $z2 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z2 == 0 goto label1;

        $i0 = 255;

        goto label2;

     label1:
        $f0 = r0.<android.widget.AbsSeekBar: float mDisabledAlpha>;

        $f1 = 255.0F * $f0;

        $i0 = (int) $f1;

     label2:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void setAlpha(int)>($i0);

     label3:
        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r2 == null goto label4;

        $z0 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke r2.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label4:
        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.widget.AbsSeekBar r0;
        float f0, f1;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.widget.ProgressBar: void drawableHotspotChanged(float,float)>(f0, f1);

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    void onProgressRefresh(float, boolean)
    {
        android.widget.AbsSeekBar r0;
        float f0;
        boolean z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.widget.ProgressBar: void onProgressRefresh(float,boolean)>(f0, z0);

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isAnimationRunning()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(float)>(f0);

     label1:
        return;
    }

    void onAnimatePosition(float, boolean)
    {
        android.widget.AbsSeekBar r0;
        float f0;
        boolean z0;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(float)>(f0);

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.widget.ProgressBar: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        specialinvoke r0.<android.widget.AbsSeekBar: void updateThumbAndTrackPos(int,int)>(i0, i1);

        return;
    }

    private void updateThumbAndTrackPos(int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.graphics.drawable.Drawable r1, r2;
        float $f0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getCurrentDrawable()>();

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i10 = r0.<android.widget.AbsSeekBar: int mMaxHeight>;

        $i6 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i8 = i1 - $i6;

        $i7 = r0.<android.widget.AbsSeekBar: int mPaddingBottom>;

        $i9 = $i8 - $i7;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

        if r2 != null goto label1;

        $i12 = 0;

        goto label2;

     label1:
        $i12 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

     label2:
        i3 = $i12;

        if i3 <= i2 goto label3;

        $i22 = i3 - i2;

        i4 = $i22 / 2;

        i5 = 0;

        goto label4;

     label3:
        i4 = 0;

        $i11 = i2 - i3;

        i5 = $i11 / 2;

     label4:
        if r1 == null goto label5;

        $i13 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i14 = i0 - $i13;

        $i15 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i20 = $i14 - $i15;

        $i17 = r0.<android.widget.AbsSeekBar: int mPaddingBottom>;

        $i16 = i1 - $i17;

        $i18 = $i16 - i4;

        $i19 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i21 = $i18 - $i19;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, i4, $i20, $i21);

     label5:
        if r2 == null goto label6;

        $f0 = specialinvoke r0.<android.widget.AbsSeekBar: float getScale()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>(i0, r2, $f0, i5);

     label6:
        return;
    }

    private float getScale()
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1;
        float $f0, $f1, $f2;

        r0 := @this: android.widget.AbsSeekBar;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $f1 = (float) $i1;

        $f0 = (float) i0;

        $f2 = $f1 / $f0;

        goto label2;

     label1:
        $f2 = 0.0F;

     label2:
        return $f2;
    }

    private void setThumbPos(float)
    {
        android.widget.AbsSeekBar r0;
        float f0;
        android.graphics.drawable.Drawable r1;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>($i0, r1, f0, -2147483648);

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

     label1:
        return;
    }

    private void setThumbPos(int, android.graphics.drawable.Drawable, float, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25;
        android.graphics.drawable.Drawable r1, r3;
        float f0, $f1, $f2, $f3;
        android.graphics.Rect r2;
        boolean $z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        $i10 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i12 = i0 - $i10;

        $i13 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i2 = $i12 - $i13;

        i3 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i4 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        i23 = i2 - i3;

        $i15 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i14 = $i15 * 2;

        i24 = i23 + $i14;

        $f2 = (float) i24;

        $f1 = f0 * $f2;

        $f3 = $f1 + 0.5F;

        i5 = (int) $f3;

        if i1 != -2147483648 goto label1;

        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        i6 = r2.<android.graphics.Rect: int top>;

        i7 = r2.<android.graphics.Rect: int bottom>;

        goto label2;

     label1:
        i6 = i1;

        i7 = i1 + i4;

     label2:
        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isLayoutRtl()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mMirrorForRtl>;

        if $z1 == 0 goto label3;

        $i22 = i24 - i5;

        goto label4;

     label3:
        $i22 = i5;

     label4:
        i25 = $i22;

        i8 = i25 + i3;

        r3 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getBackground()>();

        if r3 == null goto label5;

        virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i16 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i17 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        i9 = $i16 - $i17;

        i11 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i19 = i25 + i9;

        $i18 = i6 + i11;

        $i21 = i8 + i9;

        $i20 = i7 + i11;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>($i19, $i18, $i21, $i20);

     label5:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i25, i6, i8, i7);

        return;
    }

    public void onResolveDrawables(int)
    {
        android.widget.AbsSeekBar r0;
        int i0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.ProgressBar: void onResolveDrawables(int)>(i0);

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

     label1:
        return;
    }

    protected synchronized void onDraw(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.widget.ProgressBar: void onDraw(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void drawThumb(android.graphics.Canvas)>(r1);

        return;
    }

    void drawTrack(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.Insets r3;
        android.graphics.Rect r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        android.graphics.Region$Op $r5;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r2 == null goto label1;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mSplitTrack>;

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>();

        r4 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>(r4);

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i1 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i4 = $i2 - $i1;

        $i3 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        virtualinvoke r4.<android.graphics.Rect: void offset(int,int)>($i4, $i3);

        $i6 = r4.<android.graphics.Rect: int left>;

        $i5 = r3.<android.graphics.Insets: int left>;

        $i7 = $i6 + $i5;

        r4.<android.graphics.Rect: int left> = $i7;

        $i10 = r4.<android.graphics.Rect: int right>;

        $i8 = r3.<android.graphics.Insets: int right>;

        $i9 = $i10 - $i8;

        r4.<android.graphics.Rect: int right> = $i9;

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r5 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>(r4, $r5);

        specialinvoke r0.<android.widget.ProgressBar: void drawTrack(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void drawTrack(android.graphics.Canvas)>(r1);

     label2:
        return;
    }

    void drawThumb(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable $r2, $r3;
        int $i1, $i2, $i3, $i4;
        float $f0, $f1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 == null goto label1;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i1 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i3 = $i2 - $i1;

        $f1 = (float) $i3;

        $i4 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $f0 = (float) $i4;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label1:
        return;
    }

    protected synchronized void onMeasure(int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24;
        android.graphics.drawable.Drawable r1, $r2, $r3;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getCurrentDrawable()>();

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i5 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

     label2:
        i2 = $i5;

        i3 = 0;

        i4 = 0;

        if r1 == null goto label3;

        $i13 = r0.<android.widget.AbsSeekBar: int mMinWidth>;

        $i16 = r0.<android.widget.AbsSeekBar: int mMaxWidth>;

        $i15 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i15);

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i17);

        $i19 = r0.<android.widget.AbsSeekBar: int mMinHeight>;

        $i18 = r0.<android.widget.AbsSeekBar: int mMaxHeight>;

        $i21 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i21);

        i22 = staticinvoke <java.lang.Math: int max(int,int)>($i19, $i20);

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i22);

     label3:
        $i7 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i6 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i8 = $i7 + $i6;

        i23 = i3 + $i8;

        $i10 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i9 = r0.<android.widget.AbsSeekBar: int mPaddingBottom>;

        $i12 = $i10 + $i9;

        i24 = i4 + $i12;

        $i11 = staticinvoke <android.widget.AbsSeekBar: int resolveSizeAndState(int,int,int)>(i23, i0, 0);

        $i14 = staticinvoke <android.widget.AbsSeekBar: int resolveSizeAndState(int,int,int)>(i24, i1, 0);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setMeasuredDimension(int,int)>($i11, $i14);

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.MotionEvent r1;
        float f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r2, $r3, $r5, $r6;
        android.graphics.Rect $r4, $r7;
        byte $b2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable>;

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label10;
            case 2: goto label06;
            case 3: goto label13;
            default: goto label15;
        };

     label03:
        $z2 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isInScrollingContainer()>();

        if $z2 == 0 goto label04;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<android.widget.AbsSeekBar: float mTouchDownX> = $f1;

        goto label15;

     label04:
        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(1);

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 == null goto label05;

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r4 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate(android.graphics.Rect)>($r4);

     label05:
        virtualinvoke r0.<android.widget.AbsSeekBar: void onStartTrackingTouch()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.widget.AbsSeekBar: void attemptClaimDrag()>();

        goto label15;

     label06:
        $z4 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z4 == 0 goto label07;

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        goto label15;

     label07:
        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f2 = r0.<android.widget.AbsSeekBar: float mTouchDownX>;

        $f3 = f0 - $f2;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $i1 = r0.<android.widget.AbsSeekBar: int mScaledTouchSlop>;

        $f5 = (float) $i1;

        $b2 = $f4 cmpl $f5;

        if $b2 <= 0 goto label09;

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(1);

        $r6 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r6 == null goto label08;

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r7 = virtualinvoke $r5.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate(android.graphics.Rect)>($r7);

     label08:
        virtualinvoke r0.<android.widget.AbsSeekBar: void onStartTrackingTouch()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.widget.AbsSeekBar: void attemptClaimDrag()>();

     label09:
        goto label15;

     label10:
        $z5 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z5 == 0 goto label11;

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(0);

        goto label12;

     label11:
        virtualinvoke r0.<android.widget.AbsSeekBar: void onStartTrackingTouch()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

     label12:
        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        goto label15;

     label13:
        $z3 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z3 == 0 goto label14;

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(0);

     label14:
        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

     label15:
        return 1;
    }

    private void setHotspot(float, float)
    {
        android.widget.AbsSeekBar r0;
        float f0, f1;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getBackground()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    private void trackTouchEvent(android.view.MotionEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12;
        boolean $z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i4 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i6 = i0 - $i4;

        $i5 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i1 = $i6 - $i5;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        i2 = (int) $f2;

        f1 = 0.0F;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isLayoutRtl()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mMirrorForRtl>;

        if $z1 == 0 goto label3;

        $i15 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i14 = i0 - $i15;

        if i2 <= $i14 goto label1;

        f0 = 0.0F;

        goto label6;

     label1:
        $i18 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        if i2 >= $i18 goto label2;

        f0 = 1.0F;

        goto label6;

     label2:
        $i16 = i1 - i2;

        $i19 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i17 = $i16 + $i19;

        $f11 = (float) $i17;

        $f10 = (float) i1;

        f0 = $f11 / $f10;

        f1 = r0.<android.widget.AbsSeekBar: float mTouchProgressOffset>;

        goto label6;

     label3:
        $i7 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        if i2 >= $i7 goto label4;

        f0 = 0.0F;

        goto label6;

     label4:
        $i8 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i10 = i0 - $i8;

        if i2 <= $i10 goto label5;

        f0 = 1.0F;

        goto label6;

     label5:
        $i9 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i11 = i2 - $i9;

        $f4 = (float) $i11;

        $f3 = (float) i1;

        f0 = $f4 / $f3;

        f1 = r0.<android.widget.AbsSeekBar: float mTouchProgressOffset>;

     label6:
        i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $f6 = (float) i3;

        $f5 = f0 * $f6;

        f12 = f1 + $f5;

        $f8 = (float) i2;

        $f7 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $i12 = (int) $f7;

        $f9 = (float) $i12;

        specialinvoke r0.<android.widget.AbsSeekBar: void setHotspot(float,float)>($f8, $f9);

        $i13 = (int) f12;

        virtualinvoke r0.<android.widget.AbsSeekBar: void setProgress(int,boolean)>($i13, 1);

        return;
    }

    private void attemptClaimDrag()
    {
        android.widget.AbsSeekBar r0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(1);

     label1:
        return;
    }

    void onStartTrackingTouch()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        r0.<android.widget.AbsSeekBar: boolean mIsDragging> = 1;

        return;
    }

    void onStopTrackingTouch()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        r0.<android.widget.AbsSeekBar: boolean mIsDragging> = 0;

        return;
    }

    void onKeyChange()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.view.KeyEvent r1;
        boolean $z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        lookupswitch(i0)
        {
            case 21: goto label1;
            case 22: goto label3;
            default: goto label5;
        };

     label1:
        if i1 > 0 goto label2;

        goto label5;

     label2:
        $i5 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        $i6 = i1 - $i5;

        virtualinvoke r0.<android.widget.AbsSeekBar: void animateSetProgress(int)>($i6);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label3:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i1 < $i2 goto label4;

        goto label5;

     label4:
        $i3 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        $i4 = i1 + $i3;

        virtualinvoke r0.<android.widget.AbsSeekBar: void animateSetProgress(int)>($i4);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label5:
        $z1 = specialinvoke r0.<android.widget.ProgressBar: boolean onKeyDown(int,android.view.KeyEvent)>(i0, r1);

        return $z1;
    }

    boolean isAnimationRunning()
    {
        android.widget.AbsSeekBar r0;
        android.animation.ObjectAnimator $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        $z0 = virtualinvoke $r2.<android.animation.ObjectAnimator: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setProgress(int, boolean)
    {
        android.widget.AbsSeekBar r0;
        int i0;
        boolean z0, $z1;
        android.animation.ObjectAnimator $r1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isAnimationRunning()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        virtualinvoke $r1.<android.animation.ObjectAnimator: void cancel()>();

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void setProgress(int,boolean)>(i0, z0);

        return;
    }

    void animateSetProgress(int)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1, $i2;
        float f0, $f1, $f2;
        boolean $z0;
        float[] $r1;
        android.animation.ObjectAnimator $r2, $r3, $r5, $r6;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isAnimationRunning()>();

        if $z0 == 0 goto label1;

        $f2 = virtualinvoke r0.<android.widget.AbsSeekBar: float getAnimationPosition()>();

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $f2 = (float) $i1;

     label2:
        f0 = $f2;

        if i0 >= 0 goto label3;

        i0 = 0;

        goto label4;

     label3:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i0 <= $i2 goto label4;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

     label4:
        virtualinvoke r0.<android.widget.AbsSeekBar: void setProgressValueOnly(int)>(i0);

        $r1 = newarray (float)[2];

        $r1[0] = f0;

        $f1 = (float) i0;

        $r1[1] = $f1;

        $r2 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "animationPosition", $r1);

        r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator> = $r2;

        $r3 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        virtualinvoke $r3.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(250L);

        $r5 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        virtualinvoke $r5.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $r6 = r0.<android.widget.AbsSeekBar: android.animation.ObjectAnimator mPositionAnimator>;

        virtualinvoke $r6.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.widget.ProgressBar: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $r2 = class "android/widget/AbsSeekBar";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.widget.AbsSeekBar r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        int i0, $i1;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.ProgressBar: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r2 = class "android/widget/AbsSeekBar";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r3);

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        if i0 <= 0 goto label1;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(8192);

     label1:
        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i0 >= $i1 goto label2;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(4096);

     label2:
        return;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.os.Bundle r1;
        boolean $z0, $z1;
        float $f0, $f1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $z0 = specialinvoke r0.<android.widget.ProgressBar: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $f0 = (float) $i3;

        $f1 = $f0 / 5.0F;

        $i4 = staticinvoke <java.lang.Math: int round(float)>($f1);

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i4);

        lookupswitch(i0)
        {
            case 4096: goto label5;
            case 8192: goto label3;
            default: goto label7;
        };

     label3:
        if i1 > 0 goto label4;

        return 0;

     label4:
        $i5 = i1 - i2;

        virtualinvoke r0.<android.widget.AbsSeekBar: void setProgress(int,boolean)>($i5, 1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label5:
        $i6 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i1 < $i6 goto label6;

        return 0;

     label6:
        $i7 = i1 + i2;

        virtualinvoke r0.<android.widget.AbsSeekBar: void setProgress(int,boolean)>($i7, 1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label7:
        return 0;
    }

    public void onRtlPropertiesChanged(int)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1;
        android.graphics.drawable.Drawable r1;
        float $f0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.ProgressBar: void onRtlPropertiesChanged(int)>(i0);

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $f0 = specialinvoke r0.<android.widget.AbsSeekBar: float getScale()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>($i1, r1, $f0, -2147483648);

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.widget.AbsSeekBar: int NO_ALPHA> = 255;

        <android.widget.AbsSeekBar: int PROGRESS_ANIMATION_DURATION> = 250;

        return;
    }
}
