public final class android.view.ViewRootImpl extends java.lang.Object implements android.view.ViewParent, android.view.View$AttachInfo$Callbacks, android.view.HardwareRenderer$HardwareDrawCallbacks
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final boolean LOCAL_LOGV;
    private static final boolean DEBUG_DRAW;
    private static final boolean DEBUG_LAYOUT;
    private static final boolean DEBUG_DIALOG;
    private static final boolean DEBUG_INPUT_RESIZE;
    private static final boolean DEBUG_ORIENTATION;
    private static final boolean DEBUG_TRACKBALL;
    private static final boolean DEBUG_IMF;
    private static final boolean DEBUG_CONFIGURATION;
    private static final boolean DEBUG_FPS;
    private static final boolean DEBUG_INPUT_STAGES;
    private static final java.lang.String PROPERTY_PROFILE_RENDERING;
    private static final java.lang.String PROPERTY_MEDIA_DISABLED;
    public static final java.lang.String PROPERTY_EMULATOR_CIRCULAR;
    static final int MAX_TRACKBALL_DELAY;
    static final java.lang.ThreadLocal sRunQueues;
    static final java.util.ArrayList sFirstDrawHandlers;
    static boolean sFirstDrawComplete;
    static final java.util.ArrayList sConfigCallbacks;
    final android.content.Context mContext;
    final android.view.IWindowSession mWindowSession;
    final android.view.Display mDisplay;
    final android.hardware.display.DisplayManager mDisplayManager;
    final java.lang.String mBasePackageName;
    final int[] mTmpLocation;
    final android.util.TypedValue mTmpValue;
    final java.lang.Thread mThread;
    final android.view.WindowLeaked mLocation;
    final android.view.WindowManager$LayoutParams mWindowAttributes;
    final android.view.ViewRootImpl$W mWindow;
    final int mTargetSdkVersion;
    int mSeq;
    android.view.View mView;
    android.view.View mAccessibilityFocusedHost;
    android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView;
    int mViewVisibility;
    boolean mAppVisible;
    int mOrigWindowType;
    boolean mStopped;
    boolean mLastInCompatMode;
    android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback;
    com.android.internal.view.BaseSurfaceHolder mSurfaceHolder;
    boolean mIsCreating;
    boolean mDrawingAllowed;
    final android.graphics.Region mTransparentRegion;
    final android.graphics.Region mPreviousTransparentRegion;
    int mWidth;
    int mHeight;
    android.graphics.Rect mDirty;
    boolean mIsAnimating;
    android.content.res.CompatibilityInfo$Translator mTranslator;
    final android.view.View$AttachInfo mAttachInfo;
    android.view.InputChannel mInputChannel;
    android.view.InputQueue$Callback mInputQueueCallback;
    android.view.InputQueue mInputQueue;
    android.view.FallbackEventHandler mFallbackEventHandler;
    android.view.Choreographer mChoreographer;
    final android.graphics.Rect mTempRect;
    final android.graphics.Rect mVisRect;
    boolean mTraversalScheduled;
    int mTraversalBarrier;
    boolean mWillDrawSoon;
    boolean mIsInTraversal;
    boolean mApplyInsetsRequested;
    boolean mLayoutRequested;
    boolean mFirst;
    boolean mReportNextDraw;
    boolean mFullRedrawNeeded;
    boolean mNewSurfaceNeeded;
    boolean mHasHadWindowFocus;
    boolean mLastWasImTarget;
    boolean mWindowsAnimating;
    boolean mDrawDuringWindowsAnimating;
    boolean mIsDrawing;
    int mLastSystemUiVisibility;
    int mClientWindowLayoutFlags;
    boolean mLastOverscanRequested;
    private static final int MAX_QUEUED_INPUT_EVENT_POOL_SIZE;
    private android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool;
    private int mQueuedInputEventPoolSize;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail;
    int mPendingInputEventCount;
    boolean mProcessInputEventsScheduled;
    boolean mUnbufferedInputDispatch;
    java.lang.String mPendingInputEventQueueLengthCounterName;
    android.view.ViewRootImpl$InputStage mFirstInputStage;
    android.view.ViewRootImpl$InputStage mFirstPostImeInputStage;
    android.view.ViewRootImpl$InputStage mSyntheticInputStage;
    boolean mWindowAttributesChanged;
    int mWindowAttributesChangesFlag;
    private final android.view.Surface mSurface;
    boolean mAdded;
    boolean mAddedTouchMode;
    final android.view.DisplayAdjustments mDisplayAdjustments;
    final android.graphics.Rect mWinFrame;
    final android.graphics.Rect mPendingOverscanInsets;
    final android.graphics.Rect mPendingVisibleInsets;
    final android.graphics.Rect mPendingStableInsets;
    final android.graphics.Rect mPendingContentInsets;
    final android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets;
    final android.graphics.Rect mDispatchContentInsets;
    final android.graphics.Rect mDispatchStableInsets;
    final android.content.res.Configuration mLastConfiguration;
    final android.content.res.Configuration mPendingConfiguration;
    boolean mScrollMayChange;
    int mSoftInputMode;
    java.lang.ref.WeakReference mLastScrolledFocus;
    int mScrollY;
    int mCurScrollY;
    android.widget.Scroller mScroller;
    android.view.HardwareLayer mResizeBuffer;
    long mResizeBufferStartTime;
    int mResizeBufferDuration;
    boolean mBlockResizeBuffer;
    static final android.view.animation.Interpolator mResizeInterpolator;
    private java.util.ArrayList mPendingTransitions;
    final android.view.ViewConfiguration mViewConfiguration;
    android.content.ClipDescription mDragDescription;
    android.view.View mCurrentDragView;
    volatile java.lang.Object mLocalDragState;
    final android.graphics.PointF mDragPoint;
    final android.graphics.PointF mLastTouchPoint;
    private boolean mProfileRendering;
    private android.view.Choreographer$FrameCallback mRenderProfiler;
    private boolean mRenderProfilingEnabled;
    private boolean mMediaDisabled;
    private long mFpsStartTime;
    private long mFpsPrevTime;
    private int mFpsNumFrames;
    android.media.AudioManager mAudioManager;
    final android.view.accessibility.AccessibilityManager mAccessibilityManager;
    android.view.AccessibilityInteractionController mAccessibilityInteractionController;
    android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager;
    android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager;
    android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent;
    java.util.HashSet mTempHashSet;
    private final int mDensity;
    private final int mNoncompatDensity;
    private boolean mInLayout;
    java.util.ArrayList mLayoutRequesters;
    boolean mHandlingLayoutInLayoutRequest;
    private int mViewLayoutDirectionInitial;
    private boolean mRemoved;
    private boolean mIsEmulator;
    private boolean mIsCircularEmulator;
    private final boolean mWindowIsRound;
    protected final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    private boolean mProfile;
    private final android.hardware.display.DisplayManager$DisplayListener mDisplayListener;
    int mHardwareXOffset;
    int mHardwareYOffset;
    int mResizeAlpha;
    final android.graphics.Paint mResizePaint;
    private static final int MSG_INVALIDATE;
    private static final int MSG_INVALIDATE_RECT;
    private static final int MSG_DIE;
    private static final int MSG_RESIZED;
    private static final int MSG_RESIZED_REPORT;
    private static final int MSG_WINDOW_FOCUS_CHANGED;
    private static final int MSG_DISPATCH_INPUT_EVENT;
    private static final int MSG_DISPATCH_APP_VISIBILITY;
    private static final int MSG_DISPATCH_GET_NEW_SURFACE;
    private static final int MSG_DISPATCH_KEY_FROM_IME;
    private static final int MSG_FINISH_INPUT_CONNECTION;
    private static final int MSG_CHECK_FOCUS;
    private static final int MSG_CLOSE_SYSTEM_DIALOGS;
    private static final int MSG_DISPATCH_DRAG_EVENT;
    private static final int MSG_DISPATCH_DRAG_LOCATION_EVENT;
    private static final int MSG_DISPATCH_SYSTEM_UI_VISIBILITY;
    private static final int MSG_UPDATE_CONFIGURATION;
    private static final int MSG_PROCESS_INPUT_EVENTS;
    private static final int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST;
    private static final int MSG_DISPATCH_DONE_ANIMATING;
    private static final int MSG_INVALIDATE_WORLD;
    private static final int MSG_WINDOW_MOVED;
    private static final int MSG_SYNTHESIZE_INPUT_EVENT;
    final android.view.ViewRootImpl$ViewRootHandler mHandler;
    final android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable;
    android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver;
    final android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable;
    boolean mConsumeBatchedInputScheduled;
    final android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable;
    boolean mConsumeBatchedInputImmediatelyScheduled;
    final android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable;

    public void <init>(android.content.Context, android.view.Display)
    {
        android.view.ViewRootImpl r0;
        android.content.Context r1;
        android.view.Display r2;
        int[] $r3;
        android.util.TypedValue $r4;
        android.view.WindowManager$LayoutParams $r5;
        android.view.Surface $r6;
        android.graphics.Rect $r7, $r8, $r9, $r10, $r12, $r13, $r31, $r32, $r37, $r38;
        android.view.ViewTreeObserver$InternalInsetsInfo $r11;
        android.content.res.Configuration $r14, $r15;
        android.graphics.PointF $r16, $r17;
        boolean $z0, $z3;
        java.util.ArrayList $r18;
        android.graphics.Paint $r19;
        android.view.ViewRootImpl$1 $r20;
        android.view.ViewRootImpl$TraversalRunnable $r21;
        android.view.ViewRootImpl$ViewRootHandler $r22, $r44;
        android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable $r23;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r24;
        android.view.IWindowSession $r25, $r42;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r26;
        android.view.DisplayAdjustments $r27;
        java.lang.String $r28;
        android.view.WindowLeaked $r29, $r33;
        java.lang.Thread $r30;
        android.view.ViewRootImpl$W $r35, $r45;
        android.content.pm.ApplicationInfo $r36;
        android.graphics.Region $r39, $r41;
        android.view.View$AttachInfo $r40;
        int $i0, $i1, $i2;
        android.view.accessibility.AccessibilityManager $r43, $r46, $r49;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r47, $r48;
        android.view.ViewRootImpl$HighContrastTextManager $r50, $r51;
        android.util.DisplayMetrics $r52, $r56;
        android.content.res.Resources $r53, $r57, $r62;
        android.view.ViewConfiguration $r54;
        android.view.FallbackEventHandler $r55;
        android.view.InputEventConsistencyVerifier $r58;
        android.view.Choreographer $r59;
        java.lang.Object $r60;
        android.hardware.display.DisplayManager $r61;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Display;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (int)[2];

        r0.<android.view.ViewRootImpl: int[] mTmpLocation> = $r3;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue> = $r4;

        $r5 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r5.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes> = $r5;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = 1;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = -1;

        r0.<android.view.ViewRootImpl: boolean mStopped> = 0;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = "pq";

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        $r6 = new android.view.Surface;

        specialinvoke $r6.<android.view.Surface: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.Surface mSurface> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets> = $r10;

        $r11 = new android.view.ViewTreeObserver$InternalInsetsInfo;

        specialinvoke $r11.<android.view.ViewTreeObserver$InternalInsetsInfo: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchContentInsets> = $r12;

        $r13 = new android.graphics.Rect;

        specialinvoke $r13.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchStableInsets> = $r13;

        $r14 = new android.content.res.Configuration;

        specialinvoke $r14.<android.content.res.Configuration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration> = $r14;

        $r15 = new android.content.res.Configuration;

        specialinvoke $r15.<android.content.res.Configuration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration> = $r15;

        $r17 = new android.graphics.PointF;

        specialinvoke $r17.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint> = $r17;

        $r16 = new android.graphics.PointF;

        specialinvoke $r16.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint> = $r16;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = -1L;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = -1L;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters> = $r18;

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label1;

        $r58 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r58.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        goto label2;

     label1:
        $r58 = null;

     label2:
        r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = $r58;

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

        $r20 = new android.view.ViewRootImpl$1;

        specialinvoke $r20.<android.view.ViewRootImpl$1: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener> = $r20;

        $r19 = new android.graphics.Paint;

        specialinvoke $r19.<android.graphics.Paint: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint> = $r19;

        $r22 = new android.view.ViewRootImpl$ViewRootHandler;

        specialinvoke $r22.<android.view.ViewRootImpl$ViewRootHandler: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler> = $r22;

        $r21 = new android.view.ViewRootImpl$TraversalRunnable;

        specialinvoke $r21.<android.view.ViewRootImpl$TraversalRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable> = $r21;

        $r24 = new android.view.ViewRootImpl$ConsumeBatchedInputRunnable;

        specialinvoke $r24.<android.view.ViewRootImpl$ConsumeBatchedInputRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable> = $r24;

        $r23 = new android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable;

        specialinvoke $r23.<android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable> = $r23;

        $r26 = new android.view.ViewRootImpl$InvalidateOnAnimationRunnable;

        specialinvoke $r26.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable> = $r26;

        r0.<android.view.ViewRootImpl: android.content.Context mContext> = r1;

        $r25 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession> = $r25;

        r0.<android.view.ViewRootImpl: android.view.Display mDisplay> = r2;

        $r28 = virtualinvoke r1.<android.content.Context: java.lang.String getBasePackageName()>();

        r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName> = $r28;

        $r27 = virtualinvoke r2.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments> = $r27;

        $r30 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.ViewRootImpl: java.lang.Thread mThread> = $r30;

        $r29 = new android.view.WindowLeaked;

        specialinvoke $r29.<android.view.WindowLeaked: void <init>(java.lang.String)>(null);

        r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation> = $r29;

        $r33 = r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation>;

        virtualinvoke $r33.<android.view.WindowLeaked: java.lang.Throwable fillInStackTrace()>();

        r0.<android.view.ViewRootImpl: int mWidth> = -1;

        r0.<android.view.ViewRootImpl: int mHeight> = -1;

        $r31 = new android.graphics.Rect;

        specialinvoke $r31.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty> = $r31;

        $r32 = new android.graphics.Rect;

        specialinvoke $r32.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect> = $r32;

        $r37 = new android.graphics.Rect;

        specialinvoke $r37.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect> = $r37;

        $r38 = new android.graphics.Rect;

        specialinvoke $r38.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame> = $r38;

        $r35 = new android.view.ViewRootImpl$W;

        specialinvoke $r35.<android.view.ViewRootImpl$W: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow> = $r35;

        $r36 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r36.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<android.view.ViewRootImpl: int mTargetSdkVersion> = $i0;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = 8;

        $r41 = new android.graphics.Region;

        specialinvoke $r41.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion> = $r41;

        $r39 = new android.graphics.Region;

        specialinvoke $r39.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion> = $r39;

        r0.<android.view.ViewRootImpl: boolean mFirst> = 1;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r40 = new android.view.View$AttachInfo;

        $r42 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r45 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r44 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        specialinvoke $r40.<android.view.View$AttachInfo: void <init>(android.view.IWindowSession,android.view.IWindow,android.view.Display,android.view.ViewRootImpl,android.os.Handler,android.view.View$AttachInfo$Callbacks)>($r42, $r45, r2, r0, $r44, r0);

        r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo> = $r40;

        $r43 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager> = $r43;

        $r48 = new android.view.ViewRootImpl$AccessibilityInteractionConnectionManager;

        specialinvoke $r48.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager> = $r48;

        $r46 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r47 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r46.<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>($r47);

        $r51 = new android.view.ViewRootImpl$HighContrastTextManager;

        specialinvoke $r51.<android.view.ViewRootImpl$HighContrastTextManager: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager> = $r51;

        $r49 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r50 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager>;

        virtualinvoke $r49.<android.view.accessibility.AccessibilityManager: boolean addHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)>($r50);

        $r54 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.ViewConfiguration mViewConfiguration> = $r54;

        $r53 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r52 = virtualinvoke $r53.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r52.<android.util.DisplayMetrics: int densityDpi>;

        r0.<android.view.ViewRootImpl: int mDensity> = $i1;

        $r57 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r56 = virtualinvoke $r57.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = $r56.<android.util.DisplayMetrics: int noncompatDensityDpi>;

        r0.<android.view.ViewRootImpl: int mNoncompatDensity> = $i2;

        $r55 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)>(r1);

        r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler> = $r55;

        $r59 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer> = $r59;

        $r60 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r61 = (android.hardware.display.DisplayManager) $r60;

        r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager> = $r61;

        virtualinvoke r0.<android.view.ViewRootImpl: void loadSystemProperties()>();

        $r62 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r62.<android.content.res.Resources: boolean getBoolean(int)>(17956972);

        r0.<android.view.ViewRootImpl: boolean mWindowIsRound> = $z3;

        return;
    }

    public static void addFirstDrawHandler(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.ArrayList r1, $r3, $r4;
        java.lang.Throwable r2, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Runnable;

        $r3 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z0 != 0 goto label2;

        $r4 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void addConfigCallback(android.content.ComponentCallbacks)
    {
        android.content.ComponentCallbacks r0;
        java.util.ArrayList r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @parameter0: android.content.ComponentCallbacks;

        $r3 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void profile()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mProfile> = 1;

        return;
    }

    static boolean isInTouchMode()
    {
        android.view.IWindowSession r0;
        boolean $z0;
        android.os.RemoteException $r2;

        r0 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession peekWindowSession()>();

        if r0 == null goto label4;

     label1:
        $z0 = interfaceinvoke r0.<android.view.IWindowSession: boolean getInTouchMode()>();

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setView(android.view.View, android.view.WindowManager$LayoutParams, android.view.View)
    {
        android.view.ViewRootImpl r0, r4;
        android.view.View r1, r3, $r15, $r21;
        android.view.WindowManager$LayoutParams r2, $r22, $r24, $r39, $r40, $r47, $r162, r172;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.content.res.CompatibilityInfo r5;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8;
        android.os.RemoteException r6, $r158;
        java.lang.Throwable r7, r14, $r156, $r161;
        android.view.ViewRootImpl$NativePostImeInputStage r8, $r63;
        android.view.ViewRootImpl$EarlyPostImeInputStage r9, $r70;
        android.view.ViewRootImpl$ImeInputStage r10, $r67;
        android.view.ViewRootImpl$ViewPreImeInputStage r11, $r80;
        android.view.ViewRootImpl$NativePreImeInputStage r12, $r77;
        android.view.View$AttachInfo $r16, $r33, $r35, $r36, $r42, $r44, $r48, $r51, $r87, $r144, $r146, $r157;
        android.view.Display $r17, $r43;
        android.view.ViewRootImpl$ViewRootHandler $r18;
        android.hardware.display.DisplayManager $r19;
        android.hardware.display.DisplayManager$DisplayListener $r20;
        android.view.FallbackEventHandler $r23, $r104, $r170;
        float $f0, $f1, $f2;
        java.lang.String $r25, $r69, $r73, $r79, $r84, $r102, $r109, $r115, $r123, $r126, $r141, $r148, $r153, $r159;
        double $d0, $d1;
        android.graphics.Rect $r26, $r49, $r50, $r52, $r54, $r57, $r58, $r59, $r145;
        android.content.res.CompatibilityInfo$Translator $r27, $r30, $r34, $r37, $r38, $r53, $r142, $r167, $r168;
        android.os.IBinder $r28, $r97, $r108, $r120, $r147;
        android.view.DisplayAdjustments $r29, $r31;
        com.android.internal.view.BaseSurfaceHolder $r32, $r160;
        android.view.IWindowSession $r41;
        android.view.InputChannel $r45, $r55, $r94, $r143;
        android.view.ViewRootImpl$W $r46, $r112, $r129, $r130, $r136;
        android.view.accessibility.AccessibilityManager $r56;
        android.view.ViewRootImpl$InputStage $r60;
        android.view.ViewRootImpl$ViewPostImeInputStage $r61, r174;
        java.lang.StringBuilder $r62, $r65, $r66, $r68, $r71, $r72, $r74, $r75, $r76, $r78, $r85, $r86, $r95, $r98, $r99, $r100, $r105, $r106, $r107, $r110, $r111, $r113, $r114, $r117, $r118, $r119, $r121, $r122, $r125, $r127, $r128, $r131, $r132, $r134, $r135, $r137, $r138, $r139, $r150, $r151, $r152, $r154, $r155;
        android.view.ViewRootImpl$SyntheticInputStage $r64;
        android.view.ViewRootImpl$WindowInputEventReceiver $r81;
        android.view.InputQueue$Callback $r82, $r88, $r90;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r83;
        com.android.internal.view.RootViewSurfaceTaker $r89, $r164;
        android.view.InputQueue $r91, $r92;
        android.os.Looper $r93;
        android.view.WindowManager$BadTokenException $r96, $r101, $r103, $r116, $r124, $r140;
        android.view.WindowManager$InvalidDisplayException $r133;
        java.lang.RuntimeException $r149, $r171;
        android.view.SurfaceHolder$Callback2 $r163, $r166;
        android.view.ViewRootImpl$TakenSurfaceHolder $r165;
        android.view.Surface $r169;
        java.lang.CharSequence r173;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.view.View;

        r4 = r0;

        entermonitor r0;

     label01:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r15 != null goto label40;

        r0.<android.view.ViewRootImpl: android.view.View mView> = r1;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i2 = virtualinvoke $r17.<android.view.Display: int getState()>();

        $r16.<android.view.View$AttachInfo: int mDisplayState> = $i2;

        $r19 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager>;

        $r20 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        $r18 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r19.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r20, $r18);

        $r21 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i3 = virtualinvoke $r21.<android.view.View: int getRawLayoutDirection()>();

        r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial> = $i3;

        $r23 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r23.<android.view.FallbackEventHandler: void setView(android.view.View)>(r1);

        $r22 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r22.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r2);

        $r24 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r25 = $r24.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r25 != null goto label02;

        $r162 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r159 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r162.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r159;

     label02:
        r172 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i5 = r172.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i5;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $z1 = r1 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z1 == 0 goto label03;

        $r164 = (com.android.internal.view.RootViewSurfaceTaker) r1;

        $r163 = interfaceinvoke $r164.<com.android.internal.view.RootViewSurfaceTaker: android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback> = $r163;

        $r166 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        if $r166 == null goto label03;

        $r165 = new android.view.ViewRootImpl$TakenSurfaceHolder;

        specialinvoke $r165.<android.view.ViewRootImpl$TakenSurfaceHolder: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = $r165;

        $r160 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r160.<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)>(0);

     label03:
        $f0 = virtualinvoke r1.<android.view.View: float getZ()>();

        $f1 = $f0 * 2.0F;

        $d1 = (double) $f1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i0 = (int) $d0;

        $r26 = r172.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r26.<android.graphics.Rect: void set(int,int,int,int)>(i0, i0, i0, i0);

        $r29 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        r5 = virtualinvoke $r29.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r27 = virtualinvoke r5.<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()>();

        r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator> = $r27;

        $r31 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        $r28 = r172.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke $r31.<android.view.DisplayAdjustments: void setActivityToken(android.os.IBinder)>($r28);

        $r32 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r32 != null goto label04;

        specialinvoke r0.<android.view.ViewRootImpl: void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)>(r172);

     label04:
        z0 = 0;

        $r30 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r30 == null goto label05;

        $r169 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r167 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r169.<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)>($r167);

        z0 = 1;

        virtualinvoke r172.<android.view.WindowManager$LayoutParams: void backup()>();

        $r168 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r168.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r172);

     label05:
        $z2 = virtualinvoke r5.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        if $z2 != 0 goto label06;

        $i16 = r172.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i17 = $i16 | 128;

        r172.<android.view.WindowManager$LayoutParams: int privateFlags> = $i17;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

     label06:
        $i6 = r172.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i6;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = -1;

        $r35 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r35.<android.view.View$AttachInfo: android.view.View mRootView> = r1;

        $r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r34 == null goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        $r33.<android.view.View$AttachInfo: boolean mScalingRequired> = $z8;

        $r36 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r38 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r38 != null goto label09;

        $f2 = 1.0F;

        goto label10;

     label09:
        $r37 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $f2 = $r37.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

     label10:
        $r36.<android.view.View$AttachInfo: float mApplicationScale> = $f2;

        if r3 == null goto label11;

        $r146 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r147 = virtualinvoke r3.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        $r146.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken> = $r147;

     label11:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

        $r40 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i8 = $r40.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i7 = $i8 & 2;

        if $i7 != 0 goto label12;

        $r143 = new android.view.InputChannel;

        specialinvoke $r143.<android.view.InputChannel: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = $r143;

     label12:
        $r39 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i9 = $r39.<android.view.WindowManager$LayoutParams: int type>;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = $i9;

        $r42 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r42.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        $r41 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r46 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $i11 = r0.<android.view.ViewRootImpl: int mSeq>;

        $r47 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i12 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $r43 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i10 = virtualinvoke $r43.<android.view.Display: int getDisplayId()>();

        $r44 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r52 = $r44.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r45 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        i1 = interfaceinvoke $r41.<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>($r46, $i11, $r47, $i12, $i10, $r52, $r45);

     label13:
        if z0 == 0 goto label18;

        virtualinvoke r172.<android.view.WindowManager$LayoutParams: void restore()>();

        goto label18;

     label14:
        $r158 := @caughtexception;

        r6 = $r158;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r157 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r157.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = null;

        $r170 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r170.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $r171 = new java.lang.RuntimeException;

        specialinvoke $r171.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Adding window failed", r6);

        throw $r171;

     label15:
        $r161 := @caughtexception;

        r7 = $r161;

     label16:
        if z0 == 0 goto label17;

        virtualinvoke r172.<android.view.WindowManager$LayoutParams: void restore()>();

     label17:
        throw r7;

     label18:
        $r53 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r53 == null goto label19;

        $r142 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r144 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r145 = $r144.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r142.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r145);

     label19:
        $r54 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r54.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        $r50 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r48 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r49 = $r48.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r50.<android.graphics.Rect: void set(android.graphics.Rect)>($r49);

        $r57 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        $r51 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r58 = $r51.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        virtualinvoke $r57.<android.graphics.Rect: void set(android.graphics.Rect)>($r58);

        $r59 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r59.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        if i1 >= 0 goto label30;

        $r87 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r87.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r104 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r104.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        tableswitch(i1)
        {
            case -9: goto label28;
            case -8: goto label27;
            case -7: goto label26;
            case -6: goto label24;
            case -5: goto label23;
            case -4: goto label22;
            case -3: goto label21;
            case -2: goto label20;
            case -1: goto label20;
            default: goto label29;
        };

     label20:
        $r103 = new android.view.WindowManager$BadTokenException;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r108 = r172.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r107 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r108);

        $r110 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid; is your activity running?");

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r103.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r109);

        throw $r103;

     label21:
        $r96 = new android.view.WindowManager$BadTokenException;

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r97 = r172.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r97);

        $r99 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not for an application");

        $r102 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r96.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r102);

        throw $r96;

     label22:
        $r101 = new android.view.WindowManager$BadTokenException;

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- app for token ");

        $r120 = r172.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r121 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r120);

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is exiting");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r101.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r123);

        throw $r101;

     label23:
        $r124 = new android.view.WindowManager$BadTokenException;

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- window ");

        $r112 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r113 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r112);

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been added");

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r124.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r115);

        throw $r124;

     label24:
        exitmonitor r4;

     label25:
        return;

     label26:
        $r116 = new android.view.WindowManager$BadTokenException;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r136 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r135 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r136);

        $r134 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- another window of this type already exists");

        $r141 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r116.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r141);

        throw $r116;

     label27:
        $r140 = new android.view.WindowManager$BadTokenException;

        $r139 = new java.lang.StringBuilder;

        specialinvoke $r139.<java.lang.StringBuilder: void <init>()>();

        $r138 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r129 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r128 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r129);

        $r127 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- permission denied for this window type");

        $r126 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r140.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r126);

        throw $r140;

     label28:
        $r133 = new android.view.WindowManager$InvalidDisplayException;

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r130 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r150 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r130);

        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- the specified display can not be found");

        $r148 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r133.<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>($r148);

        throw $r133;

     label29:
        $r149 = new java.lang.RuntimeException;

        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- unknown error code ");

        $r152 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r153 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r149.<java.lang.RuntimeException: void <init>(java.lang.String)>($r153);

        throw $r149;

     label30:
        $z4 = r1 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z4 == 0 goto label31;

        $r89 = (com.android.internal.view.RootViewSurfaceTaker) r1;

        $r88 = interfaceinvoke $r89.<com.android.internal.view.RootViewSurfaceTaker: android.view.InputQueue$Callback willYouTakeTheInputQueue()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = $r88;

     label31:
        $r55 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        if $r55 == null goto label33;

        $r82 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if $r82 == null goto label32;

        $r92 = new android.view.InputQueue;

        specialinvoke $r92.<android.view.InputQueue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = $r92;

        $r90 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        $r91 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        interfaceinvoke $r90.<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>($r91);

     label32:
        $r81 = new android.view.ViewRootImpl$WindowInputEventReceiver;

        $r94 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        $r93 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke $r81.<android.view.ViewRootImpl$WindowInputEventReceiver: void <init>(android.view.ViewRootImpl,android.view.InputChannel,android.os.Looper)>(r0, $r94, $r93);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = $r81;

     label33:
        virtualinvoke r1.<android.view.View: void assignParent(android.view.ViewParent)>(r0);

        $i13 = i1 & 1;

        if $i13 == 0 goto label34;

        $z6 = 1;

        goto label35;

     label34:
        $z6 = 0;

     label35:
        r0.<android.view.ViewRootImpl: boolean mAddedTouchMode> = $z6;

        $i14 = i1 & 2;

        if $i14 == 0 goto label36;

        $z7 = 1;

        goto label37;

     label36:
        $z7 = 0;

     label37:
        r0.<android.view.ViewRootImpl: boolean mAppVisible> = $z7;

        $r56 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z5 = virtualinvoke $r56.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z5 == 0 goto label38;

        $r83 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r83.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureConnection()>();

     label38:
        $i15 = virtualinvoke r1.<android.view.View: int getImportantForAccessibility()>();

        if $i15 != 0 goto label39;

        virtualinvoke r1.<android.view.View: void setImportantForAccessibility(int)>(1);

     label39:
        r173 = virtualinvoke r172.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r64 = new android.view.ViewRootImpl$SyntheticInputStage;

        specialinvoke $r64.<android.view.ViewRootImpl$SyntheticInputStage: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mSyntheticInputStage> = $r64;

        $r61 = new android.view.ViewRootImpl$ViewPostImeInputStage;

        $r60 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mSyntheticInputStage>;

        specialinvoke $r61.<android.view.ViewRootImpl$ViewPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, $r60);

        r174 = $r61;

        $r63 = new android.view.ViewRootImpl$NativePostImeInputStage;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-post-ime:");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r173);

        $r69 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<android.view.ViewRootImpl$NativePostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r174, $r69);

        r8 = $r63;

        $r70 = new android.view.ViewRootImpl$EarlyPostImeInputStage;

        specialinvoke $r70.<android.view.ViewRootImpl$EarlyPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r8);

        r9 = $r70;

        $r67 = new android.view.ViewRootImpl$ImeInputStage;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:ime:");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r173);

        $r79 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r67.<android.view.ViewRootImpl$ImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r9, $r79);

        r10 = $r67;

        $r80 = new android.view.ViewRootImpl$ViewPreImeInputStage;

        specialinvoke $r80.<android.view.ViewRootImpl$ViewPreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r10);

        r11 = $r80;

        $r77 = new android.view.ViewRootImpl$NativePreImeInputStage;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-pre-ime:");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r173);

        $r73 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r77.<android.view.ViewRootImpl$NativePreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r11, $r73);

        r12 = $r77;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage> = r12;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage> = r9;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:pending:");

        $r85 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r173);

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = $r84;

     label40:
        exitmonitor r4;

     label41:
        goto label44;

     label42:
        $r156 := @caughtexception;

        r14 = $r156;

        exitmonitor r4;

     label43:
        throw r14;

     label44:
        return;

        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label16 with label15;
        catch java.lang.Throwable from label01 to label25 with label42;
        catch java.lang.Throwable from label26 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
    }

    private boolean isInLocalFocusMode()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void destroyHardwareResources()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3, $r6;
        android.view.HardwareRenderer $r2, $r5, $r7;
        android.view.View $r4;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r5.<android.view.HardwareRenderer: void destroyHardwareResources(android.view.View)>($r4);

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r7.<android.view.HardwareRenderer: void destroy()>();

     label1:
        return;
    }

    public void detachFunctor(long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.HardwareRenderer $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        r0.<android.view.ViewRootImpl: boolean mBlockResizeBuffer> = 1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r4.<android.view.HardwareRenderer: void stopDrawing()>();

     label1:
        return;
    }

    public void invokeFunctor(long, boolean)
    {
        android.view.ViewRootImpl r0;
        long l0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <android.view.ThreadedRenderer: void invokeFunctor(long,boolean)>(l0, z0);

        return;
    }

    public void registerAnimatingRenderNode(android.view.RenderNode)
    {
        android.view.ViewRootImpl r0;
        android.view.RenderNode r1;
        android.view.View$AttachInfo $r2, $r4, $r6, $r9, $r10;
        android.view.HardwareRenderer $r3, $r11;
        java.util.List $r5, $r7;
        java.util.ArrayList $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.RenderNode;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r3 == null goto label1;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r11.<android.view.HardwareRenderer: void registerAnimatingRenderNode(android.view.RenderNode)>(r1);

        goto label3;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r5 != null goto label2;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes> = $r8;

     label2:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    private void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        boolean z0, z1, z2, z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11;
        android.view.View$AttachInfo $r2, $r3, $r5, $r7, $r9, $r11, $r15, $r17, $r19, $r20;
        android.content.res.CompatibilityInfo$Translator $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.HardwareRenderer $r6, $r10, $r12, $r14, $r18;
        android.content.Context $r8;
        java.lang.CharSequence $r13;
        java.lang.String $r16;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 0;

        $r4 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r4 == null goto label01;

        return;

     label01:
        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16777216;

        if $i1 == 0 goto label02;

        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        z0 = $z10;

        if z0 == 0 goto label14;

        $z4 = staticinvoke <android.view.HardwareRenderer: boolean isAvailable()>();

        if $z4 != 0 goto label04;

        return;

     label04:
        $i2 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        z1 = $z9;

        $i4 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label07;

        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        z2 = $z11;

        if z1 == 0 goto label09;

        $r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        goto label14;

     label09:
        $z5 = <android.view.HardwareRenderer: boolean sRendererDisabled>;

        if $z5 == 0 goto label10;

        $z7 = <android.view.HardwareRenderer: boolean sSystemRendererDisabled>;

        if $z7 == 0 goto label14;

        if z2 == 0 goto label14;

     label10:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r6 == null goto label11;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r18 = $r19.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r18.<android.view.HardwareRenderer: void destroy()>();

     label11:
        $i6 = r1.<android.view.WindowManager$LayoutParams: int format>;

        if $i6 == -1 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        z3 = $z8;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r10 = staticinvoke <android.view.HardwareRenderer: android.view.HardwareRenderer create(android.content.Context,boolean)>($r8, z3);

        $r7.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer> = $r10;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r9.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r12 == null goto label14;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r14 = $r11.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r13 = virtualinvoke r1.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r16 = interfaceinvoke $r13.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke $r14.<android.view.HardwareRenderer: void setName(java.lang.String)>($r16);

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r15.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        $r17.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 1;

     label14:
        return;
    }

    public android.view.View getView()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        return $r1;
    }

    final android.view.WindowLeaked getLocation()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowLeaked $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation>;

        return $r1;
    }

    void setLayoutParams(android.view.WindowManager$LayoutParams, boolean)
    {
        android.view.ViewRootImpl r0, r2;
        android.view.WindowManager$LayoutParams r1, $r5, $r7, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r27;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.Throwable r3, $r28;
        android.graphics.Rect $r6, $r8, $r9, $r11, $r21;
        java.lang.String $r20, $r26;
        android.view.View$AttachInfo $r29;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        z0 := @parameter1: boolean;

        r2 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r6 = $r5.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i0 = $r6.<android.graphics.Rect: int left>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r8 = $r7.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i1 = $r8.<android.graphics.Rect: int top>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r9 = $r10.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i2 = $r9.<android.graphics.Rect: int right>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r11 = $r12.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i3 = $r11.<android.graphics.Rect: int bottom>;

        $r13 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i4 = $r13.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i6 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i6;

        $r14 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i7 = $r14.<android.view.WindowManager$LayoutParams: int privateFlags>;

        i5 = $i7 & 128;

        $r15 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i8 = $r15.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        r1.<android.view.WindowManager$LayoutParams: int systemUiVisibility> = $i8;

        $r16 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i9 = $r16.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i9;

        $r17 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i10 = virtualinvoke $r17.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r1);

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = $i10;

        $i12 = r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag>;

        $i11 = $i12 & 524288;

        if $i11 == 0 goto label2;

        $r29 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r29.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

     label2:
        $r19 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r20 = $r19.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r20 != null goto label3;

        $r25 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r26 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r25.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r26;

     label3:
        $r18 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i13 = $r18.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i14 = $i13 | i5;

        $r18.<android.view.WindowManager$LayoutParams: int privateFlags> = $i14;

        $r23 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r21 = $r23.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r21.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        $r22 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>($r22);

        if z0 == 0 goto label4;

        $i21 = r1.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i21;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label4:
        $i15 = r1.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i16 = $i15 & 240;

        if $i16 != 0 goto label5;

        $r27 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r24 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i19 = $r24.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i17 = $i19 & -241;

        $i20 = i4 & 240;

        $i18 = $i17 | $i20;

        $r27.<android.view.WindowManager$LayoutParams: int softInputMode> = $i18;

     label5:
        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r28 := @caughtexception;

        r3 = $r28;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void handleAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z1 == z0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = z0;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        $z2 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z2 != 0 goto label1;

        staticinvoke <android.view.WindowManagerGlobal: void trimForeground()>();

     label1:
        return;
    }

    void handleGetNewSurface()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void requestFitSystemWindows()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void requestLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public boolean isLayoutRequested()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        return $z0;
    }

    void invalidate()
    {
        android.view.ViewRootImpl r0;
        int $i0, $i1;
        android.graphics.Rect $r1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        $z0 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    void invalidateWorld(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r3;
        android.view.ViewGroup r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r1.<android.view.View: void invalidate()>();

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = (android.view.ViewGroup) r1;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        if i0 >= $i1 goto label2;

        $r3 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateWorld(android.view.View)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void invalidateChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(null, r2);

        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        int[] r1;
        android.graphics.Rect r2, r3, $r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.content.res.CompatibilityInfo$Translator $r5, $r9, $r11;
        android.view.View$AttachInfo $r6, $r7, $r8, $r10;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        if r2 != null goto label01;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidate()>();

        return null;

     label01:
        $z1 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $z7 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z7 != 0 goto label02;

        return null;

     label02:
        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i0 != 0 goto label03;

        $r11 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r11 == null goto label06;

     label03:
        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i1 == 0 goto label04;

        $i10 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $i11 = neg $i10;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>(0, $i11);

     label04:
        $r5 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r5 == null goto label05;

        $r9 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r9.<android.content.res.CompatibilityInfo$Translator: void translateRectInAppWindowToScreen(android.graphics.Rect)>(r2);

     label05:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r6.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z2 == 0 goto label06;

        virtualinvoke r2.<android.graphics.Rect: void inset(int,int)>(-1, -1);

     label06:
        r3 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $z3 = virtualinvoke r3.<android.graphics.Rect: boolean isEmpty()>();

        if $z3 != 0 goto label07;

        $z6 = virtualinvoke r3.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r2);

        if $z6 != 0 goto label07;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState> = 1;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

     label07:
        $i4 = r2.<android.graphics.Rect: int left>;

        $i5 = r2.<android.graphics.Rect: int top>;

        $i3 = r2.<android.graphics.Rect: int right>;

        $i2 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r3.<android.graphics.Rect: void union(int,int,int,int)>($i4, $i5, $i3, $i2);

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r7.<android.view.View$AttachInfo: float mApplicationScale>;

        $i6 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f2 = (float) $i6;

        $f1 = $f2 * f0;

        $f3 = $f1 + 0.5F;

        $i9 = (int) $f3;

        $i7 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f5 = (float) $i7;

        $f4 = $f5 * f0;

        $f6 = $f4 + 0.5F;

        $i8 = (int) $f6;

        z0 = virtualinvoke r3.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i9, $i8);

        if z0 != 0 goto label08;

        virtualinvoke r3.<android.graphics.Rect: void setEmpty()>();

     label08:
        $z5 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z5 != 0 goto label10;

        if z0 != 0 goto label09;

        $z4 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z4 == 0 goto label10;

     label09:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label10:
        return null;
    }

    void setStopped(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z1 == z0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mStopped> = z0;

        if z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public android.view.ViewParent getParent()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r4;
        android.graphics.Rect r2;
        android.graphics.Point r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == $r4 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("child is not mine, honest!");

        throw $r5;

     label1:
        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i1, $i0);

        return $z0;
    }

    public void bringChildToFront(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    int getHostVisibility()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        goto label2;

     label1:
        $i0 = 8;

     label2:
        return $i0;
    }

    void disposeResizeBuffer()
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareLayer $r1, $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        virtualinvoke $r2.<android.view.HardwareLayer: void destroy()>();

        r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer> = null;

     label1:
        return;
    }

    public void requestTransitionStart(android.animation.LayoutTransition)
    {
        android.view.ViewRootImpl r0;
        android.animation.LayoutTransition r1;
        java.util.ArrayList $r2, $r3, $r4, $r5, $r6;
        boolean $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.animation.LayoutTransition;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r2 == null goto label1;

        $r6 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r3 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    void notifyRendererOfFramePending()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.HardwareRenderer $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r4.<android.view.HardwareRenderer: void notifyFramePending()>();

     label1:
        return;
    }

    void scheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r3;
        android.view.Choreographer $r4;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 != 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = virtualinvoke $r2.<android.os.Looper: int postSyncBarrier()>();

        r0.<android.view.ViewRootImpl: int mTraversalBarrier> = $i0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r4.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(2, $r3, null);

        $z1 = r0.<android.view.ViewRootImpl: boolean mUnbufferedInputDispatch>;

        if $z1 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleConsumeBatchedInput()>();

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void notifyRendererOfFramePending()>();

     label2:
        return;
    }

    void unscheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r3;
        android.view.Choreographer $r4;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r2.<android.os.Looper: void removeSyncBarrier(int)>($i0);

        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r4.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(2, $r3, null);

     label1:
        return;
    }

    void doTraversal()
    {
        android.view.ViewRootImpl r0;
        java.lang.Throwable r1, $r4;
        boolean $z0, $z1, $z2;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        android.os.Looper $r3;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label7;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r3.<android.os.Looper: void removeSyncBarrier(int)>($i0);

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z1 == 0 goto label1;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String)>("ViewAncestor");

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "performTraversals");

     label2:
        specialinvoke r0.<android.view.ViewRootImpl: void performTraversals()>();

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

     label6:
        $z2 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z2 == 0 goto label7;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        android.view.View$AttachInfo $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z0 == 0 goto label1;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i5 | 128;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i6;

        goto label2;

     label1:
        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i0 & -129;

        $i1 = r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags>;

        $i2 = $i1 & 128;

        $i4 = $i3 | $i2;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

     label2:
        return;
    }

    private boolean collectViewAttributes()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.view.WindowManager$LayoutParams r1;
        android.view.View$AttachInfo $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19;
        android.view.View $r9, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z1 == 0 goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z0 = $r4.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 0;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6.<android.view.View$AttachInfo: int mSystemUiVisibility> = 0;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7.<android.view.View$AttachInfo: boolean mHasSystemUiListeners> = 0;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke $r9.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>($r8, 0);

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r10.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r11.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility>;

        $i1 = $i0 ^ -1;

        $i2 = $i3 & $i1;

        $r10.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i2;

        r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i4 = $r12.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i6 = specialinvoke r0.<android.view.ViewRootImpl: int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)>(r1);

        $i5 = $i4 | $i6;

        $r12.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i5;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r13.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z2 != z0 goto label1;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i10 = $r17.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i9 = r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        if $i10 != $i9 goto label1;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z5 = $r19.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        $z4 = r1.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners>;

        if $z5 == $z4 goto label2;

     label1:
        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>(r1);

        $r14 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i7 = $r14.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i7;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z3 = $r15.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        r1.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners> = $z3;

        $r18 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i8 = $r16.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        virtualinvoke $r18.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>($i8);

        return 1;

     label2:
        return 0;
    }

    private int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        short s0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        s0 = 0;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 67108864;

        if $i2 == 0 goto label1;

        s0 = s0 | 1280;

     label1:
        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = $i3 & 134217728;

        if $i4 == 0 goto label2;

        s0 = s0 | 768;

     label2:
        return s0;
    }

    private boolean measureHierarchy(android.view.View, android.view.WindowManager$LayoutParams, android.content.res.Resources, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.WindowManager$LayoutParams r2;
        android.content.res.Resources r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24;
        boolean z0, z1;
        android.util.DisplayMetrics r4;
        android.util.TypedValue $r5, $r6, $r7;
        float $f0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.content.res.Resources;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 = 0;

        z1 = 0;

        $i5 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i5 != -2 goto label3;

        r4 = virtualinvoke r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r6 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        virtualinvoke r3.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(17104905, $r6, 1);

        i4 = 0;

        $r5 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        $i13 = $r5.<android.util.TypedValue: int type>;

        if $i13 != 5 goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        $f0 = virtualinvoke $r7.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r4);

        i4 = (int) $f0;

     label1:
        if i4 == 0 goto label3;

        if i0 <= i4 goto label3;

        $i12 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i2 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i4, $i12);

        $i14 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i3 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i14);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i2, i3);

        $i15 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        $i17 = $i15 & 16777216;

        if $i17 != 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        $i16 = i4 + i0;

        i21 = $i16 / 2;

        $i20 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i22 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i21, $i20);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i22, i3);

        $i18 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        $i19 = $i18 & 16777216;

        if $i19 != 0 goto label3;

        z1 = 1;

     label3:
        if z1 != 0 goto label5;

        $i6 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i23 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i0, $i6);

        $i7 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i24 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i7);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i23, i24);

        $i8 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i10 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i8 != $i10 goto label4;

        $i9 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i11 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i9 == $i11 goto label5;

     label4:
        z0 = 1;

     label5:
        return z0;
    }

    void transformMatrixToGlobal(android.graphics.Matrix)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Matrix r1;
        android.view.View$AttachInfo $r2, $r3;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $f1 = (float) $i0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r3.<android.view.View$AttachInfo: int mWindowTop>;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f1, $f0);

        return;
    }

    void transformMatrixToLocal(android.graphics.Matrix)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Matrix r1;
        android.view.View$AttachInfo $r2, $r3;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r3.<android.view.View$AttachInfo: int mWindowTop>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f0);

        return;
    }

    void dispatchApplyInsets(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.View$AttachInfo $r2, $r5;
        android.graphics.Rect $r3, $r4, $r6, $r7, $r9, $r10;
        android.view.WindowInsets $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchContentInsets>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchStableInsets>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        virtualinvoke $r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r6);

        $z1 = r0.<android.view.ViewRootImpl: boolean mIsEmulator>;

        if $z1 == 0 goto label1;

        $z4 = r0.<android.view.ViewRootImpl: boolean mIsCircularEmulator>;

        if $z4 != 0 goto label2;

     label1:
        $z2 = r0.<android.view.ViewRootImpl: boolean mWindowIsRound>;

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z0 = $z3;

        $r8 = new android.view.WindowInsets;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchContentInsets>;

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDispatchStableInsets>;

        specialinvoke $r8.<android.view.WindowInsets: void <init>(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,boolean)>($r10, null, $r9, z0);

        virtualinvoke r1.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>($r8);

        return;
    }

    private void performTraversals()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r63, $r64, $r65, $r66, $r76, $r77, $r78, $r209, $r214, $r232, $r254;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z44, $z45, $z47, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z99, $z100, $z101, $z102, z103, z104, z105, z106, z107, z108, z109, z110, z111, z112, z113, z114;
        android.view.WindowManager$LayoutParams r2, r3, $r67, $r68, $r69;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, i128, i129, i130, i131, i132, i133, i134, i135, i136, i137, i138, i139, i140, i141, i142, i143;
        android.content.res.CompatibilityInfo r4;
        android.graphics.Rect r5, $r24, $r26, $r29, $r30, $r32, $r33, $r35, $r38, $r85, $r89, $r130, $r157, $r158, $r162, $r163, $r186, $r187, $r188, $r189, $r219, $r221, $r222, $r224, $r225, $r226, $r228, $r229, $r251, $r253, r278, r281, r282;
        android.graphics.Point r6, r8, $r217, $r248;
        android.content.res.Resources r7, $r215, $r240, $r256;
        java.lang.Throwable r9, $r258;
        android.view.Surface$OutOfResourcesException r10, $r263, $r264, r267;
        android.view.DisplayAdjustments $r11;
        android.os.Handler $r12;
        android.view.ViewRootImpl$RunQueue $r13;
        android.view.View$AttachInfo $r14, $r15, $r16, $r17, $r21, $r25, $r28, $r31, $r34, $r36, $r39, $r40, $r42, $r45, $r49, $r50, $r70, $r71, $r73, $r82, $r83, $r104, $r109, $r110, $r128, $r131, $r133, $r141, $r143, $r156, $r159, $r161, $r164, $r165, $r168, $r169, $r171, $r173, $r175, $r181, $r183, $r190, $r192, $r195, $r196, $r198, $r199, $r200, $r203, $r206, $r210, $r211, $r216, $r220, $r223, $r227, $r230, $r233, $r234, $r237, $r238, $r242, $r243, $r244, $r245, $r246, $r249, $r250, $r252;
        com.android.internal.view.BaseSurfaceHolder $r18, $r44, $r113, $r114, $r115, $r116, $r118, $r120, $r121, $r122, $r135, $r137, $r138, $r139, $r148, $r149, $r151, $r152, $r153, $r154, $r205, $r259;
        android.view.ViewTreeObserver $r19, $r48, $r72, $r92, $r235;
        android.view.HardwareRenderer $r20, $r43, $r111, $r126, $r127, $r129, $r132, $r140, $r145, $r160, $r166, $r170, $r172, $r176, $r180, $r182, $r201;
        android.view.Surface $r22, $r23, $r37, $r41, $r117, $r123, $r125, $r134, $r136, $r142, $r174, $r179, $r191, $r193, $r202;
        android.content.res.Configuration $r27, $r184, $r185, $r236, $r239, $r241;
        java.util.ArrayList $r46, $r47, $r51, $r54, $r55, $r56, $r59, $r60, $r61, $r62, $r207, $r212;
        android.animation.LayoutTransition $r52, $r57;
        java.lang.Object $r53, $r58, $r208;
        android.view.ViewTreeObserver$InternalInsetsInfo $r74, $r79, r280;
        android.content.res.CompatibilityInfo$Translator $r75, $r80, $r84, $r88, $r100, $r108, $r194, $r197;
        android.graphics.Region $r81, $r96, $r97, $r98, $r99, $r101, $r102, $r103, $r107, $r177, r283;
        android.view.IWindowSession $r86, $r106;
        android.view.ViewRootImpl$W $r87, $r105;
        int[] $r90, $r91, $r93, $r94, $r95;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b52, $b53;
        java.util.concurrent.locks.ReentrantLock $r112, $r124, $r147, $r204, $r260;
        android.view.SurfaceHolder$Callback2 $r119, $r150, $r155;
        java.lang.ref.WeakReference $r144, $r178;
        android.widget.Scroller $r146, $r167;
        android.content.Context $r213, $r231, $r255;
        android.view.Display $r218, $r247;
        android.os.RemoteException $r257, $r261, $r262;
        android.util.DisplayMetrics r265, r266;
        android.view.SurfaceHolder$Callback[] r269, r270, r272, r273, r275, r276;
        android.view.SurfaceHolder$Callback r271, r274, r277;
        android.view.inputmethod.InputMethodManager r285;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label001;

        $z11 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z11 != 0 goto label002;

     label001:
        return;

     label002:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 1;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 1;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        r2 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i2 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $i6 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i6 != i2 goto label003;

        $z101 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z101 == 0 goto label004;

     label003:
        $z102 = 1;

        goto label005;

     label004:
        $z102 = 0;

     label005:
        z3 = $z102;

        r3 = null;

        $z12 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

        if $z12 == 0 goto label006;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        z2 = 1;

        r3 = r2;

     label006:
        $r11 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        r4 = virtualinvoke $r11.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $z13 = virtualinvoke r4.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        $z14 = r0.<android.view.ViewRootImpl: boolean mLastInCompatMode>;

        if $z13 != $z14 goto label008;

        r3 = r2;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        $z100 = r0.<android.view.ViewRootImpl: boolean mLastInCompatMode>;

        if $z100 == 0 goto label007;

        $i126 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i127 = $i126 & -129;

        r3.<android.view.WindowManager$LayoutParams: int privateFlags> = $i127;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

        goto label008;

     label007:
        $i124 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i125 = $i124 | 128;

        r3.<android.view.WindowManager$LayoutParams: int privateFlags> = $i125;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

     label008:
        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        r5 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $z15 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z15 == 0 goto label013;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        $i122 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i122 == 2014 goto label009;

        $i119 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i119 != 2011 goto label010;

     label009:
        $r248 = new android.graphics.Point;

        specialinvoke $r248.<android.graphics.Point: void <init>()>();

        r6 = $r248;

        $r247 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r247.<android.view.Display: void getRealSize(android.graphics.Point)>(r6);

        i0 = r6.<android.graphics.Point: int x>;

        i1 = r6.<android.graphics.Point: int y>;

        goto label011;

     label010:
        $r254 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r255 = virtualinvoke $r254.<android.view.View: android.content.Context getContext()>();

        $r256 = virtualinvoke $r255.<android.content.Context: android.content.res.Resources getResources()>();

        r265 = virtualinvoke $r256.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = r265.<android.util.DisplayMetrics: int widthPixels>;

        i1 = r265.<android.util.DisplayMetrics: int heightPixels>;

     label011:
        $r243 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r243.<android.view.View$AttachInfo: boolean mUse32BitDrawingCache> = 1;

        $r244 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r244.<android.view.View$AttachInfo: boolean mHasWindowFocus> = 0;

        $r245 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r245.<android.view.View$AttachInfo: int mWindowVisibility> = i2;

        $r246 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r246.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        z3 = 0;

        $r239 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $r240 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $r241 = virtualinvoke $r240.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r239.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r241);

        $r242 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i120 = $r242.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i120;

        $i121 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i121 != 2 goto label012;

        $r236 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $i118 = virtualinvoke $r236.<android.content.res.Configuration: int getLayoutDirection()>();

        virtualinvoke r1.<android.view.View: void setLayoutDirection(int)>($i118);

     label012:
        $r237 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>($r237, 0);

        $r238 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r235 = $r238.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r235.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(1);

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

        goto label015;

     label013:
        i0 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        i1 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        $i7 = r0.<android.view.ViewRootImpl: int mWidth>;

        if i0 != $i7 goto label014;

        $i123 = r0.<android.view.ViewRootImpl: int mHeight>;

        if i1 == $i123 goto label015;

     label014:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        z0 = 1;

     label015:
        if z3 == 0 goto label018;

        $r249 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r249.<android.view.View$AttachInfo: int mWindowVisibility> = i2;

        virtualinvoke r1.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i2);

        if i2 != 0 goto label016;

        $z95 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z95 == 0 goto label017;

     label016:
        virtualinvoke r0.<android.view.ViewRootImpl: void destroyHardwareResources()>();

     label017:
        if i2 != 8 goto label018;

        r0.<android.view.ViewRootImpl: boolean mHasHadWindowFocus> = 0;

     label018:
        $r13 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        $r14 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r14.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r13.<android.view.ViewRootImpl$RunQueue: void executeActions(android.os.Handler)>($r12);

        z103 = 0;

        $z16 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z16 == 0 goto label019;

        $z94 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z94 != 0 goto label019;

        $z93 = 1;

        goto label020;

     label019:
        $z93 = 0;

     label020:
        z4 = $z93;

        if z4 == 0 goto label032;

        $r232 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r231 = virtualinvoke $r232.<android.view.View: android.content.Context getContext()>();

        r7 = virtualinvoke $r231.<android.content.Context: android.content.res.Resources getResources()>();

        $z90 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z90 == 0 goto label023;

        $r250 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z99 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        if $z99 != 0 goto label021;

        $z97 = 1;

        goto label022;

     label021:
        $z97 = 0;

     label022:
        $r250.<android.view.View$AttachInfo: boolean mInTouchMode> = $z97;

        $z96 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>($z96);

        goto label031;

     label023:
        $r228 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r230 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r229 = $r230.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        $z89 = virtualinvoke $r228.<android.graphics.Rect: boolean equals(java.lang.Object)>($r229);

        if $z89 != 0 goto label024;

        z103 = 1;

     label024:
        $r225 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r227 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r226 = $r227.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $z88 = virtualinvoke $r225.<android.graphics.Rect: boolean equals(java.lang.Object)>($r226);

        if $z88 != 0 goto label025;

        z103 = 1;

     label025:
        $r222 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        $r223 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r224 = $r223.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        $z87 = virtualinvoke $r222.<android.graphics.Rect: boolean equals(java.lang.Object)>($r224);

        if $z87 != 0 goto label026;

        z103 = 1;

     label026:
        $r219 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r220 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r221 = $r220.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $z86 = virtualinvoke $r219.<android.graphics.Rect: boolean equals(java.lang.Object)>($r221);

        if $z86 != 0 goto label027;

        $r252 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r253 = $r252.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $r251 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r253.<android.graphics.Rect: void set(android.graphics.Rect)>($r251);

     label027:
        $i116 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i116 == -2 goto label028;

        $i114 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i114 != -2 goto label031;

     label028:
        z0 = 1;

        $i117 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i117 == 2014 goto label029;

        $i115 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i115 != 2011 goto label030;

     label029:
        $r217 = new android.graphics.Point;

        specialinvoke $r217.<android.graphics.Point: void <init>()>();

        r8 = $r217;

        $r218 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r218.<android.view.Display: void getRealSize(android.graphics.Point)>(r8);

        i0 = r8.<android.graphics.Point: int x>;

        i1 = r8.<android.graphics.Point: int y>;

        goto label031;

     label030:
        r266 = virtualinvoke r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = r266.<android.util.DisplayMetrics: int widthPixels>;

        i1 = r266.<android.util.DisplayMetrics: int heightPixels>;

     label031:
        $z85 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r2, r7, i0, i1);

        z0 = z0 | $z85;

     label032:
        $z19 = specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        if $z19 == 0 goto label033;

        r3 = r2;

     label033:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z17 = $r15.<android.view.View$AttachInfo: boolean mForceReportNewAttributes>;

        if $z17 == 0 goto label034;

        $r233 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r233.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 0;

        r3 = r2;

     label034:
        $z18 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z18 != 0 goto label035;

        $r234 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z91 = $r234.<android.view.View$AttachInfo: boolean mViewVisibilityChanged>;

        if $z91 == 0 goto label040;

     label035:
        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 0;

        $i8 = r0.<android.view.ViewRootImpl: int mSoftInputMode>;

        i128 = $i8 & 240;

        if i128 != 0 goto label040;

        $r211 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r212 = $r211.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        i129 = virtualinvoke $r212.<java.util.ArrayList: int size()>();

        i3 = 0;

     label036:
        if i3 >= i129 goto label038;

        $r206 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r207 = $r206.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        $r208 = virtualinvoke $r207.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r209 = (android.view.View) $r208;

        $z92 = virtualinvoke $r209.<android.view.View: boolean isShown()>();

        if $z92 == 0 goto label037;

        i128 = 16;

     label037:
        i3 = i3 + 1;

        goto label036;

     label038:
        if i128 != 0 goto label039;

        i128 = 32;

     label039:
        $i104 = r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i99 = $i104 & 240;

        if $i99 == i128 goto label040;

        $i100 = r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i101 = $i100 & -241;

        $i102 = $i101 | i128;

        r2.<android.view.WindowManager$LayoutParams: int softInputMode> = $i102;

        r3 = r2;

     label040:
        if r3 == null goto label044;

        $i106 = r1.<android.view.View: int mPrivateFlags>;

        $i105 = $i106 & 512;

        if $i105 == 0 goto label041;

        $i103 = r3.<android.view.WindowManager$LayoutParams: int format>;

        $z81 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i103);

        if $z81 != 0 goto label041;

        r3.<android.view.WindowManager$LayoutParams: int format> = -3;

     label041:
        $r210 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i108 = r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i107 = $i108 & 33554432;

        if $i107 == 0 goto label042;

        $z80 = 1;

        goto label043;

     label042:
        $z80 = 0;

     label043:
        $r210.<android.view.View$AttachInfo: boolean mOverscanRequested> = $z80;

     label044:
        $z20 = r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested>;

        if $z20 == 0 goto label045;

        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 0;

        $r216 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z84 = $r216.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested> = $z84;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

        $z83 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z83 == 0 goto label045;

        $r214 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r213 = virtualinvoke $r214.<android.view.View: android.content.Context getContext()>();

        $r215 = virtualinvoke $r213.<android.content.Context: android.content.res.Resources getResources()>();

        $z82 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r2, $r215, i0, i1);

        z0 = z0 | $z82;

     label045:
        if z4 == 0 goto label046;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 0;

     label046:
        if z4 == 0 goto label049;

        if z0 == 0 goto label049;

        $i86 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i87 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i86 != $i87 goto label048;

        $i85 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i90 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i85 != $i90 goto label048;

        $i91 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i91 != -2 goto label047;

        $i112 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        if $i112 >= i0 goto label047;

        $i111 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        $i113 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i111 != $i113 goto label048;

     label047:
        $i88 = r2.<android.view.WindowManager$LayoutParams: int height>;

        if $i88 != -2 goto label049;

        $i89 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        if $i89 >= i1 goto label049;

        $i110 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        $i109 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i110 == $i109 goto label049;

     label048:
        $z74 = 1;

        goto label050;

     label049:
        $z74 = 0;

     label050:
        z104 = $z74;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r16.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z22 = virtualinvoke $r19.<android.view.ViewTreeObserver: boolean hasComputeInternalInsetsListeners()>();

        if $z22 != 0 goto label051;

        $r196 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z75 = $r196.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets>;

        if $z75 == 0 goto label052;

     label051:
        $z76 = 1;

        goto label053;

     label052:
        $z76 = 0;

     label053:
        z105 = $z76;

        z106 = 0;

        i4 = 0;

        $z21 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z21 != 0 goto label054;

        if z104 != 0 goto label054;

        if z103 != 0 goto label054;

        if z3 != 0 goto label054;

        if r3 == null goto label123;

     label054:
        if i2 != 0 goto label058;

        if z105 == 0 goto label056;

        $z79 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z79 != 0 goto label055;

        if z3 == 0 goto label056;

     label055:
        $z78 = 1;

        goto label057;

     label056:
        $z78 = 0;

     label057:
        z106 = $z78;

     label058:
        $r18 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r18 == null goto label059;

        $r205 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r204 = $r205.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r204.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.view.ViewRootImpl: boolean mDrawingAllowed> = 1;

     label059:
        z5 = 0;

        z7 = 0;

        $r22 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z6 = virtualinvoke $r22.<android.view.Surface: boolean isValid()>();

     label060:
        $r21 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20 = $r21.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r20 == null goto label061;

        $r203 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r201 = $r203.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r202 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r201.<android.view.HardwareRenderer: void pauseSurface(android.view.Surface)>($r202);

     label061:
        $r23 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i5 = virtualinvoke $r23.<android.view.Surface: int getGenerationId()>();

        i4 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>(r3, i2, z106);

        $z23 = r0.<android.view.ViewRootImpl: boolean mDrawDuringWindowsAnimating>;

        if $z23 != 0 goto label062;

        $i98 = i4 & 8;

        if $i98 == 0 goto label062;

        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 1;

     label062:
        $r27 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $i9 = $r27.<android.content.res.Configuration: int seq>;

        if $i9 == 0 goto label065;

        $r184 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $z66 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z66 != 0 goto label063;

        $z67 = 1;

        goto label064;

     label063:
        $z67 = 0;

     label064:
        virtualinvoke r0.<android.view.ViewRootImpl: void updateConfiguration(android.content.res.Configuration,boolean)>($r184, $z67);

        $r185 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r185.<android.content.res.Configuration: int seq> = 0;

     label065:
        $r24 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r28 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r29 = $r28.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        $z24 = virtualinvoke $r24.<android.graphics.Rect: boolean equals(java.lang.Object)>($r29);

        if $z24 != 0 goto label066;

        $z70 = 1;

        goto label067;

     label066:
        $z70 = 0;

     label067:
        z8 = $z70;

        $r33 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r26 = $r25.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $z26 = virtualinvoke $r33.<android.graphics.Rect: boolean equals(java.lang.Object)>($r26);

        if $z26 != 0 goto label068;

        $z71 = 1;

        goto label069;

     label068:
        $z71 = 0;

     label069:
        z7 = $z71;

        $r30 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r35 = $r34.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $z25 = virtualinvoke $r30.<android.graphics.Rect: boolean equals(java.lang.Object)>($r35);

        if $z25 != 0 goto label070;

        $z68 = 1;

        goto label071;

     label070:
        $z68 = 0;

     label071:
        z10 = $z68;

        $r38 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        $r31 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r32 = $r31.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        $z29 = virtualinvoke $r38.<android.graphics.Rect: boolean equals(java.lang.Object)>($r32);

        if $z29 != 0 goto label072;

        $z69 = 1;

        goto label073;

     label072:
        $z69 = 0;

     label073:
        z9 = $z69;

        if z7 == 0 goto label075;

        $i81 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i81 <= 0 goto label074;

        $i79 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i79 <= 0 goto label074;

        if r2 == null goto label074;

        $i82 = r2.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i80 = r2.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        $i83 = $i82 | $i80;

        $i84 = $i83 & 1536;

        if $i84 != 0 goto label074;

        $r193 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        if $r193 == null goto label074;

        $r191 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z72 = virtualinvoke $r191.<android.view.Surface: boolean isValid()>();

        if $z72 == 0 goto label074;

        $r192 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z73 = $r192.<android.view.View$AttachInfo: boolean mTurnOffWindowResizeAnim>;

        if $z73 != 0 goto label074;

        $r181 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r180 = $r181.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r180 == null goto label074;

        $r183 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r182 = $r183.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z63 = virtualinvoke $r182.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z63 == 0 goto label074;

        if r2 == null goto label074;

        $i78 = r2.<android.view.WindowManager$LayoutParams: int format>;

        $z65 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i78);

        if $z65 != 0 goto label074;

        $z64 = r0.<android.view.ViewRootImpl: boolean mBlockResizeBuffer>;

        if $z64 != 0 goto label074;

        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label074:
        $r190 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r187 = $r190.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r186 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        virtualinvoke $r187.<android.graphics.Rect: void set(android.graphics.Rect)>($r186);

     label075:
        if z8 == 0 goto label076;

        $r161 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r189 = $r161.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        $r188 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r189.<android.graphics.Rect: void set(android.graphics.Rect)>($r188);

        z7 = 1;

     label076:
        if z9 == 0 goto label077;

        $r164 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r162 = $r164.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        $r163 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        virtualinvoke $r162.<android.graphics.Rect: void set(android.graphics.Rect)>($r163);

        z7 = 1;

     label077:
        if z7 != 0 goto label078;

        $i76 = r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility>;

        $r156 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i77 = $r156.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        if $i76 != $i77 goto label078;

        $z60 = r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested>;

        if $z60 != 0 goto label078;

        $z58 = r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested>;

        $r165 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z59 = $r165.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        if $z58 == $z59 goto label079;

     label078:
        $r39 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i10 = $r39.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i10;

        $r36 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z27 = $r36.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        r0.<android.view.ViewRootImpl: boolean mLastOverscanRequested> = $z27;

        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 0;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

     label079:
        if z10 == 0 goto label080;

        $r159 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r157 = $r159.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $r158 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r157.<android.graphics.Rect: void set(android.graphics.Rect)>($r158);

     label080:
        if z6 != 0 goto label085;

        $r179 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z62 = virtualinvoke $r179.<android.view.Surface: boolean isValid()>();

        if $z62 == 0 goto label093;

        z1 = 1;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        $r177 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        virtualinvoke $r177.<android.graphics.Region: void setEmpty()>();

        $r175 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r176 = $r175.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r176 == null goto label093;

     label081:
        $r173 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r160 = $r173.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r174 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z5 = virtualinvoke $r160.<android.view.HardwareRenderer: boolean initialize(android.view.Surface)>($r174);

     label082:
        goto label093;

     label083:
        $r264 := @caughtexception;

        r10 = $r264;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r10);

     label084:
        return;

     label085:
        $r37 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z28 = virtualinvoke $r37.<android.view.Surface: boolean isValid()>();

        if $z28 != 0 goto label088;

        $r144 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if $r144 == null goto label086;

        $r178 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        virtualinvoke $r178.<java.lang.ref.WeakReference: void clear()>();

     label086:
        r0.<android.view.ViewRootImpl: int mCurScrollY> = 0;

        r0.<android.view.ViewRootImpl: int mScrollY> = 0;

        $r146 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r146 == null goto label087;

        $r167 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r167.<android.widget.Scroller: void abortAnimation()>();

     label087:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

        $r171 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r172 = $r171.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r172 == null goto label093;

        $r169 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r170 = $r169.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z61 = virtualinvoke $r170.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z61 == 0 goto label093;

        $r168 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r166 = $r168.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r166.<android.view.HardwareRenderer: void destroy()>();

        goto label093;

     label088:
        $r41 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $i14 = virtualinvoke $r41.<android.view.Surface: int getGenerationId()>();

        if i5 == $i14 goto label093;

        $r139 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r139 != null goto label093;

        $r141 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r140 = $r141.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r140 == null goto label093;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label089:
        $r143 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r145 = $r143.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r142 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r145.<android.view.HardwareRenderer: void updateSurface(android.view.Surface)>($r142);

     label090:
        goto label093;

     label091:
        $r263 := @caughtexception;

        r267 = $r263;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r267);

     label092:
        return;

     label093:
        goto label095;

     label094:
        $r262 := @caughtexception;

     label095:
        $r42 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i15 = r5.<android.graphics.Rect: int left>;

        $r42.<android.view.View$AttachInfo: int mWindowLeft> = $i15;

        $r40 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i11 = r5.<android.graphics.Rect: int top>;

        $r40.<android.view.View$AttachInfo: int mWindowTop> = $i11;

        $i13 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i12 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        if $i13 != $i12 goto label096;

        $i67 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i68 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        if $i67 == $i68 goto label097;

     label096:
        $i16 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        r0.<android.view.ViewRootImpl: int mWidth> = $i16;

        $i17 = virtualinvoke r5.<android.graphics.Rect: int height()>();

        r0.<android.view.ViewRootImpl: int mHeight> = $i17;

     label097:
        $r44 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r44 == null goto label111;

        $r134 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z57 = virtualinvoke $r134.<android.view.Surface: boolean isValid()>();

        if $z57 == 0 goto label098;

        $r138 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r136 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r138.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = $r136;

     label098:
        $r114 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i61 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i65 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r114.<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>($i61, $i65);

        $r113 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r112 = $r113.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r112.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r117 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z56 = virtualinvoke $r117.<android.view.Surface: boolean isValid()>();

        if $z56 == 0 goto label104;

        if z6 != 0 goto label101;

        $r153 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r153.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 1;

        $r155 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r154 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r155.<android.view.SurfaceHolder$Callback2: void surfaceCreated(android.view.SurfaceHolder)>($r154);

        $r135 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r269 = virtualinvoke $r135.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r269 == null goto label100;

        r270 = r269;

        i130 = lengthof r270;

        i131 = 0;

     label099:
        if i131 >= i130 goto label100;

        r271 = r270[i131];

        $r137 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke r271.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>($r137);

        i131 = i131 + 1;

        goto label099;

     label100:
        z2 = 1;

     label101:
        if z2 == 0 goto label103;

        $r150 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r149 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i72 = r2.<android.view.WindowManager$LayoutParams: int format>;

        $i71 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i70 = r0.<android.view.ViewRootImpl: int mHeight>;

        interfaceinvoke $r150.<android.view.SurfaceHolder$Callback2: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>($r149, $i72, $i71, $i70);

        $r151 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r272 = virtualinvoke $r151.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r272 == null goto label103;

        r273 = r272;

        i132 = lengthof r273;

        i133 = 0;

     label102:
        if i133 >= i132 goto label103;

        r274 = r273[i133];

        $r152 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i75 = r2.<android.view.WindowManager$LayoutParams: int format>;

        $i74 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i73 = r0.<android.view.ViewRootImpl: int mHeight>;

        interfaceinvoke r274.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>($r152, $i75, $i74, $i73);

        i133 = i133 + 1;

        goto label102;

     label103:
        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 0;

        goto label111;

     label104:
        if z6 == 0 goto label111;

        $r116 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r116.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        $r115 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r275 = virtualinvoke $r115.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        $r119 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r120 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r119.<android.view.SurfaceHolder$Callback2: void surfaceDestroyed(android.view.SurfaceHolder)>($r120);

        if r275 == null goto label106;

        r276 = r275;

        i134 = lengthof r276;

        i135 = 0;

     label105:
        if i135 >= i134 goto label106;

        r277 = r276[i135];

        $r148 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke r277.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>($r148);

        i135 = i135 + 1;

        goto label105;

     label106:
        $r118 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r124 = $r118.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r124.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label107:
        $r122 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r123 = new android.view.Surface;

        specialinvoke $r123.<android.view.Surface: void <init>()>();

        $r122.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = $r123;

     label108:
        $r121 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r147 = $r121.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r147.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label111;

     label109:
        $r258 := @caughtexception;

        r9 = $r258;

     label110:
        $r259 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r260 = $r259.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r260.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r9;

     label111:
        $r45 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r43 = $r45.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r43 == null goto label115;

        $r110 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r111 = $r110.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z54 = virtualinvoke $r111.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z54 == 0 goto label115;

        if z5 != 0 goto label112;

        $i62 = r0.<android.view.ViewRootImpl: int mWidth>;

        $r131 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r129 = $r131.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i64 = virtualinvoke $r129.<android.view.HardwareRenderer: int getWidth()>();

        if $i62 != $i64 goto label112;

        $i63 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r133 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r132 = $r133.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i66 = virtualinvoke $r132.<android.view.HardwareRenderer: int getHeight()>();

        if $i63 == $i66 goto label115;

     label112:
        if r3 == null goto label113;

        $r130 = r3.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        goto label114;

     label113:
        $r130 = null;

     label114:
        r278 = $r130;

        $r109 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r127 = $r109.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i55 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i54 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r127.<android.view.HardwareRenderer: void setup(int,int,android.graphics.Rect)>($i55, $i54, r278);

        if z5 != 0 goto label115;

        $r128 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r126 = $r128.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r125 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r126.<android.view.HardwareRenderer: void invalidate(android.view.Surface)>($r125);

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label115:
        $z32 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z32 != 0 goto label122;

        $i45 = i4 & 1;

        if $i45 == 0 goto label116;

        $z55 = 1;

        goto label117;

     label116:
        $z55 = 0;

     label117:
        z107 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>($z55);

        if z107 != 0 goto label118;

        $i59 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i57 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i59 != $i57 goto label118;

        $i58 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i56 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i58 != $i56 goto label118;

        if z7 == 0 goto label122;

     label118:
        $i42 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i46 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i136 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i42, $i46);

        $i44 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i43 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i137 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i44, $i43);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i136, i137);

        i138 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i139 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        z108 = 0;

        $f4 = r2.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        $b53 = $f4 cmpl 0.0F;

        if $b53 <= 0 goto label119;

        $i48 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i47 = $i48 - i138;

        $f7 = (float) $i47;

        $f6 = r2.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        $f5 = $f7 * $f6;

        $i60 = (int) $f5;

        i140 = i138 + $i60;

        i136 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i140, 1073741824);

        z108 = 1;

     label119:
        $f3 = r2.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $b52 = $f3 cmpl 0.0F;

        if $b52 <= 0 goto label120;

        $i51 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i50 = $i51 - i139;

        $f1 = (float) $i50;

        $f2 = r2.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $f0 = $f1 * $f2;

        $i49 = (int) $f0;

        i141 = i139 + $i49;

        i137 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i141, 1073741824);

        z108 = 1;

     label120:
        if z108 == 0 goto label121;

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i136, i137);

     label121:
        z4 = 1;

     label122:
        goto label128;

     label123:
        $r198 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i94 = $r198.<android.view.View$AttachInfo: int mWindowLeft>;

        $i95 = r5.<android.graphics.Rect: int left>;

        if $i94 != $i95 goto label124;

        $r195 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i93 = $r195.<android.view.View$AttachInfo: int mWindowTop>;

        $i92 = r5.<android.graphics.Rect: int top>;

        if $i93 == $i92 goto label125;

     label124:
        $z77 = 1;

        goto label126;

     label125:
        $z77 = 0;

     label126:
        z109 = $z77;

        if z109 == 0 goto label128;

        $r197 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r197 == null goto label127;

        $r194 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r194.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>(r5);

     label127:
        $r200 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i97 = r5.<android.graphics.Rect: int left>;

        $r200.<android.view.View$AttachInfo: int mWindowLeft> = $i97;

        $r199 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i96 = r5.<android.graphics.Rect: int top>;

        $r199.<android.view.View$AttachInfo: int mWindowTop> = $i96;

     label128:
        if z4 == 0 goto label129;

        $z53 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z53 != 0 goto label129;

        $z50 = 1;

        goto label130;

     label129:
        $z50 = 0;

     label130:
        z110 = $z50;

        if z110 != 0 goto label131;

        $r104 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z51 = $r104.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z51 == 0 goto label132;

     label131:
        $z52 = 1;

        goto label133;

     label132:
        $z52 = 0;

     label133:
        z111 = $z52;

        if z110 == 0 goto label138;

        specialinvoke r0.<android.view.ViewRootImpl: void performLayout(android.view.WindowManager$LayoutParams,int,int)>(r2, i0, i1);

        $i36 = r1.<android.view.View: int mPrivateFlags>;

        $i35 = $i36 & 512;

        if $i35 == 0 goto label138;

        $r91 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        virtualinvoke r1.<android.view.View: void getLocationInWindow(int[])>($r91);

        $r102 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        $r94 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i40 = $r94[0];

        $r95 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i41 = $r95[1];

        $r93 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i29 = $r93[0];

        $i37 = r1.<android.view.View: int mRight>;

        $i28 = $i29 + $i37;

        $i30 = r1.<android.view.View: int mLeft>;

        $i38 = $i28 - $i30;

        $r90 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i34 = $r90[1];

        $i33 = r1.<android.view.View: int mBottom>;

        $i32 = $i34 + $i33;

        $i31 = r1.<android.view.View: int mTop>;

        $i39 = $i32 - $i31;

        virtualinvoke $r102.<android.graphics.Region: boolean set(int,int,int,int)>($i40, $i41, $i38, $i39);

        $r103 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke r1.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>($r103);

        $r100 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r100 == null goto label134;

        $r108 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r107 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r108.<android.content.res.CompatibilityInfo$Translator: void translateRegionInWindowToScreen(android.graphics.Region)>($r107);

     label134:
        $r101 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        $r99 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $z47 = virtualinvoke $r101.<android.graphics.Region: boolean equals(java.lang.Object)>($r99);

        if $z47 != 0 goto label138;

        $r96 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $r97 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r96.<android.graphics.Region: boolean set(android.graphics.Region)>($r97);

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label135:
        $r106 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r105 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r98 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        interfaceinvoke $r106.<android.view.IWindowSession: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>($r105, $r98);

     label136:
        goto label138;

     label137:
        $r261 := @caughtexception;

     label138:
        if z111 == 0 goto label139;

        $r83 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r83.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r82 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r92 = $r82.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r92.<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>();

     label139:
        if z105 == 0 goto label147;

        $r70 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r280 = $r70.<android.view.View$AttachInfo: android.view.ViewTreeObserver$InternalInsetsInfo mGivenInternalInsets>;

        virtualinvoke r280.<android.view.ViewTreeObserver$InternalInsetsInfo: void reset()>();

        $r71 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r72 = $r71.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r72.<android.view.ViewTreeObserver: void dispatchOnComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)>(r280);

        $r73 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z40 = virtualinvoke r280.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean isEmpty()>();

        if $z40 != 0 goto label140;

        $z44 = 1;

        goto label141;

     label140:
        $z44 = 0;

     label141:
        $r73.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets> = $z44;

        if z106 != 0 goto label142;

        $r79 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        $z45 = virtualinvoke $r79.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean equals(java.lang.Object)>(r280);

        if $z45 != 0 goto label147;

     label142:
        $r74 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        virtualinvoke $r74.<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)>(r280);

        $r75 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r75 == null goto label143;

        $r84 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r85 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r281 = virtualinvoke $r84.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)>($r85);

        $r88 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r89 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r282 = virtualinvoke $r88.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)>($r89);

        $r80 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r81 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

        r283 = virtualinvoke $r80.<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>($r81);

        goto label144;

     label143:
        r281 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r282 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r283 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

     label144:
        $r86 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r87 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $i25 = r280.<android.view.ViewTreeObserver$InternalInsetsInfo: int mTouchableInsets>;

        interfaceinvoke $r86.<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>($r87, $i25, r281, r282, r283);

     label145:
        goto label147;

     label146:
        $r257 := @caughtexception;

     label147:
        z112 = 0;

        $z30 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z30 == 0 goto label149;

        $r76 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r76 == null goto label148;

        $r77 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z42 = virtualinvoke $r77.<android.view.View: boolean hasFocus()>();

        if $z42 != 0 goto label148;

        $r78 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r78.<android.view.View: boolean requestFocus(int)>(2);

     label148:
        $i27 = i4 & 8;

        if $i27 == 0 goto label150;

        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 1;

        goto label150;

     label149:
        $z31 = r0.<android.view.ViewRootImpl: boolean mWindowsAnimating>;

        if $z31 == 0 goto label150;

        z112 = 1;

     label150:
        r0.<android.view.ViewRootImpl: boolean mFirst> = 0;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 0;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 0;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = i2;

        $r50 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z34 = $r50.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z34 == 0 goto label153;

        $z38 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        if $z38 != 0 goto label153;

        $r69 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i24 = $r69.<android.view.WindowManager$LayoutParams: int flags>;

        z113 = staticinvoke <android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>($i24);

        $z39 = r0.<android.view.ViewRootImpl: boolean mLastWasImTarget>;

        if z113 == $z39 goto label153;

        r0.<android.view.ViewRootImpl: boolean mLastWasImTarget> = z113;

        r285 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if r285 == null goto label153;

        if z113 == 0 goto label153;

        $r64 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r285.<android.view.inputmethod.InputMethodManager: void startGettingWindowFocus(android.view.View)>($r64);

        $r66 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r63 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r65 = virtualinvoke $r63.<android.view.View: android.view.View findFocus()>();

        $r67 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i26 = $r67.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $z35 = r0.<android.view.ViewRootImpl: boolean mHasHadWindowFocus>;

        if $z35 != 0 goto label151;

        $z41 = 1;

        goto label152;

     label151:
        $z41 = 0;

     label152:
        $r68 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i23 = $r68.<android.view.WindowManager$LayoutParams: int flags>;

        virtualinvoke r285.<android.view.inputmethod.InputMethodManager: void onWindowFocus(android.view.View,android.view.View,int,boolean,int)>($r66, $r65, $i26, $z41, $i23);

     label153:
        $i18 = i4 & 2;

        if $i18 == 0 goto label154;

        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 1;

     label154:
        $r49 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r48 = $r49.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z33 = virtualinvoke $r48.<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>();

        if $z33 != 0 goto label155;

        if i2 == 0 goto label156;

     label155:
        $z36 = 1;

        goto label157;

     label156:
        $z36 = 0;

     label157:
        z114 = $z36;

        if z114 != 0 goto label162;

        if z1 != 0 goto label162;

        if z112 == 0 goto label158;

        $z37 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z37 == 0 goto label166;

     label158:
        $r51 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r51 == null goto label161;

        $r62 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i22 = virtualinvoke $r62.<java.util.ArrayList: int size()>();

        if $i22 <= 0 goto label161;

        i142 = 0;

     label159:
        $r61 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i21 = virtualinvoke $r61.<java.util.ArrayList: int size()>();

        if i142 >= $i21 goto label160;

        $r59 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r58 = virtualinvoke $r59.<java.util.ArrayList: java.lang.Object get(int)>(i142);

        $r57 = (android.animation.LayoutTransition) $r58;

        virtualinvoke $r57.<android.animation.LayoutTransition: void startChangingAnimations()>();

        i142 = i142 + 1;

        goto label159;

     label160:
        $r60 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r60.<java.util.ArrayList: void clear()>();

     label161:
        specialinvoke r0.<android.view.ViewRootImpl: void performDraw()>();

        goto label166;

     label162:
        if i2 != 0 goto label163;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        goto label166;

     label163:
        $r46 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r46 == null goto label166;

        $r47 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i20 = virtualinvoke $r47.<java.util.ArrayList: int size()>();

        if $i20 <= 0 goto label166;

        i143 = 0;

     label164:
        $r56 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i19 = virtualinvoke $r56.<java.util.ArrayList: int size()>();

        if i143 >= $i19 goto label165;

        $r54 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r53 = virtualinvoke $r54.<java.util.ArrayList: java.lang.Object get(int)>(i143);

        $r52 = (android.animation.LayoutTransition) $r53;

        virtualinvoke $r52.<android.animation.LayoutTransition: void endChangingAnimations()>();

        i143 = i143 + 1;

        goto label164;

     label165:
        $r55 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r55.<java.util.ArrayList: void clear()>();

     label166:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 0;

        return;

        catch android.view.Surface$OutOfResourcesException from label081 to label082 with label083;
        catch android.view.Surface$OutOfResourcesException from label089 to label090 with label091;
        catch android.os.RemoteException from label060 to label084 with label094;
        catch android.os.RemoteException from label085 to label092 with label094;
        catch java.lang.Throwable from label107 to label108 with label109;
        catch java.lang.Throwable from label109 to label110 with label109;
        catch android.os.RemoteException from label135 to label136 with label137;
        catch android.os.RemoteException from label144 to label145 with label146;
    }

    private void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface$OutOfResourcesException r1;
        android.view.ViewRootImpl$W $r3;
        android.view.IWindowSession $r4;
        boolean $z0;
        int $i1, $i3;
        android.os.RemoteException $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.Surface$OutOfResourcesException;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "OutOfResourcesException initializing HW surface", r1);

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $z0 = interfaceinvoke $r4.<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>($r3);

        if $z0 != 0 goto label2;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 == 1000 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewRootImpl", "No processes killed for memory; killing self");

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void performMeasure(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        java.lang.Throwable r1, $r3;
        android.view.View $r2;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "measure");

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r2.<android.view.View: void measure(int,int)>(i0, i1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean isInLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mInLayout>;

        return $z0;
    }

    boolean requestLayoutDuringLayout(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        android.view.View$AttachInfo $r3;
        java.util.ArrayList $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 != null goto label2;

     label1:
        return 1;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r5 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        $z1 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z1 != 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private void performLayout(android.view.WindowManager$LayoutParams, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        android.view.View r2, r4, $r9;
        java.util.ArrayList r3, $r6, $r7, $r11, r21, r22;
        java.lang.Throwable r5, $r20;
        android.content.Context $r8;
        android.content.res.Resources $r10;
        android.view.ViewRootImpl$2 $r12;
        android.view.ViewRootImpl$RunQueue $r13;
        java.lang.StringBuilder $r14, $r16, $r18, $r19;
        java.lang.Object $r15;
        java.lang.String $r17;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 0;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 1;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "layout");

     label1:
        $i5 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i6 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>(0, 0, $i5, $i6);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r6 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i2 <= 0 goto label4;

        $r7 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r3 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r7, 0);

        if r3 == null goto label4;

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 1;

        i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i4 = 0;

     label2:
        if i4 >= i3 goto label3;

        $r15 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r4 = (android.view.View) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestLayout() improperly called by ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during layout: running second layout pass");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r17);

        virtualinvoke r4.<android.view.View: void requestLayout()>();

        i4 = i4 + 1;

        goto label2;

     label3:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r8 = virtualinvoke $r9.<android.view.View: android.content.Context getContext()>();

        $r10 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r2, r1, $r10, i0, i1);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        $i8 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i7 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>(0, 0, $i8, $i7);

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $r11 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r21 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r11, 1);

        if r21 == null goto label4;

        r22 = r21;

        $r13 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        $r12 = new android.view.ViewRootImpl$2;

        specialinvoke $r12.<android.view.ViewRootImpl$2: void <init>(android.view.ViewRootImpl,java.util.ArrayList)>(r0, r22);

        virtualinvoke $r13.<android.view.ViewRootImpl$RunQueue: void post(java.lang.Runnable)>($r12);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        goto label7;

     label5:
        $r20 := @caughtexception;

        r5 = $r20;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r5;

     label7:
        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList, boolean)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1, r2, $r11;
        boolean z0, z1, $z2, $z4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.view.View r3, r4, r14;
        java.lang.Object $r5, $r9;
        android.view.ViewParent $r6, $r7, $r10, $r12, $r13;
        android.view.View$AttachInfo $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.util.ArrayList;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r2 = null;

        i1 = 0;

     label01:
        if i1 >= i0 goto label09;

        $r9 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (android.view.View) $r9;

        if r3 == null goto label08;

        $r8 = r3.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r8 == null goto label08;

        $r10 = r3.<android.view.View: android.view.ViewParent mParent>;

        if $r10 == null goto label08;

        if z0 != 0 goto label02;

        $i9 = r3.<android.view.View: int mPrivateFlags>;

        $i8 = $i9 & 4096;

        if $i8 != 4096 goto label08;

     label02:
        z1 = 0;

        r4 = r3;

     label03:
        if r4 == null goto label06;

        $i6 = r4.<android.view.View: int mViewFlags>;

        $i7 = $i6 & 12;

        if $i7 != 8 goto label04;

        z1 = 1;

        goto label06;

     label04:
        $r12 = r4.<android.view.View: android.view.ViewParent mParent>;

        $z4 = $r12 instanceof android.view.View;

        if $z4 == 0 goto label05;

        $r13 = r4.<android.view.View: android.view.ViewParent mParent>;

        r4 = (android.view.View) $r13;

        goto label03;

     label05:
        r4 = null;

        goto label03;

     label06:
        if z1 != 0 goto label08;

        if r2 != null goto label07;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r2 = $r11;

     label07:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label08:
        i1 = i1 + 1;

        goto label01;

     label09:
        if z0 != 0 goto label14;

        i10 = 0;

     label10:
        if i10 >= i0 goto label14;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        r14 = (android.view.View) $r5;

     label11:
        if r14 == null goto label13;

        $i2 = r14.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 4096;

        if $i3 == 0 goto label13;

        $i4 = r14.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & -4097;

        r14.<android.view.View: int mPrivateFlags> = $i5;

        $r6 = r14.<android.view.View: android.view.ViewParent mParent>;

        $z2 = $r6 instanceof android.view.View;

        if $z2 == 0 goto label12;

        $r7 = r14.<android.view.View: android.view.ViewParent mParent>;

        r14 = (android.view.View) $r7;

        goto label11;

     label12:
        r14 = null;

        goto label11;

     label13:
        i10 = i10 + 1;

        goto label10;

     label14:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        return r2;
    }

    public void requestTransparentRegion(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != r1 goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = $r3.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 512;

        $r3.<android.view.View: int mPrivateFlags> = $i1;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        r0.<android.view.ViewRootImpl: int mWindowAttributesChangesFlag> = 0;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label1:
        return;
    }

    private static int getRootMeasureSpec(int, int)
    {
        int i0, i1, i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i1)
        {
            case -2: goto label2;
            case -1: goto label1;
            default: goto label3;
        };

     label1:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, 1073741824);

        goto label4;

     label2:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, -2147483648);

        goto label4;

     label3:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

     label4:
        return i2;
    }

    public void onHardwarePreDraw(android.view.HardwareCanvas)
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareCanvas r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.HardwareCanvas;

        $i0 = r0.<android.view.ViewRootImpl: int mHardwareXOffset>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $i2 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.view.HardwareCanvas: void translate(float,float)>($f1, $f0);

        return;
    }

    public void onHardwarePostDraw(android.view.HardwareCanvas)
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareCanvas r1;
        android.view.HardwareLayer $r2, $r5;
        int $i0, $i1, $i2;
        android.graphics.Paint $r3, $r4;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.HardwareCanvas;

        $r2 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint>;

        $i0 = r0.<android.view.ViewRootImpl: int mResizeAlpha>;

        virtualinvoke $r3.<android.graphics.Paint: void setAlpha(int)>($i0);

        $r5 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        $i1 = r0.<android.view.ViewRootImpl: int mHardwareXOffset>;

        $f1 = (float) $i1;

        $i2 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        $f0 = (float) $i2;

        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Paint mResizePaint>;

        virtualinvoke r1.<android.view.HardwareCanvas: void drawHardwareLayer(android.view.HardwareLayer,float,float,android.graphics.Paint)>($r5, $f1, $f0, $r4);

     label1:
        return;
    }

    void outputDisplayList(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.RenderNode r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 = virtualinvoke r1.<android.view.View: android.view.RenderNode getDisplayList()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.RenderNode: void output()>();

     label1:
        return;
    }

    private void profileRendering(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;
        android.view.Choreographer$FrameCallback $r1, $r2, $r3, $r6;
        android.view.Choreographer $r4, $r7;
        android.view.ViewRootImpl$3 $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfileRendering>;

        if $z1 == 0 goto label4;

        r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled> = z0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if $r1 == null goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        virtualinvoke $r7.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>($r6);

     label1:
        $z2 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        if $z2 == 0 goto label3;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if $r2 != null goto label2;

        $r5 = new android.view.ViewRootImpl$3;

        specialinvoke $r5.<android.view.ViewRootImpl$3: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        virtualinvoke $r4.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r3);

        goto label4;

     label3:
        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = null;

     label4:
        return;
    }

    private void trackFPS()
    {
        android.view.ViewRootImpl r0;
        long l0, l1, l2, $l3, $l8, $l9;
        java.lang.String r1, $r7, $r13;
        float f0, $f1, $f2, $f3;
        byte $b4, $b12;
        int $i5, $i6, $i7, $i11;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: android.view.ViewRootImpl;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

        goto label2;

     label1:
        $i5 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $i6 = $i5 + 1;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = $i6;

        $i7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $l9 = r0.<android.view.ViewRootImpl: long mFpsPrevTime>;

        l1 = l0 - $l9;

        $l8 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        l2 = l0 - $l8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFrame time:\t");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ViewRootImpl", $r7);

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        $b12 = l2 cmp 1000L;

        if $b12 <= 0 goto label2;

        $i11 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $f2 = (float) $i11;

        $f3 = $f2 * 1000.0F;

        $f1 = (float) l2;

        f0 = $f3 / $f1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFPS:\t");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ViewRootImpl", $r13);

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

     label2:
        return;
    }

    private void performDraw()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable r1, $r26;
        int i0, i1, i2, $i3, i4;
        android.view.SurfaceHolder$Callback r2;
        android.view.View$AttachInfo $r3, $r4, $r6, $r18, $r20, $r21, $r25;
        java.util.List $r5, $r19, $r22, $r24;
        android.view.HardwareRenderer $r7, $r17;
        com.android.internal.view.BaseSurfaceHolder $r8, $r12, $r13, $r16;
        android.view.ViewRootImpl$W $r9;
        android.view.Surface $r10;
        android.view.IWindowSession $r11;
        android.view.SurfaceHolder$Callback2 $r14, $r15;
        java.lang.Object $r23;
        android.os.RemoteException $r27;
        android.view.RenderNode $r28;
        android.view.SurfaceHolder$Callback[] r29, r30;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r3.<android.view.View$AttachInfo: int mDisplayState>;

        if $i3 != 1 goto label01;

        $z4 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z4 != 0 goto label01;

        return;

     label01:
        z0 = r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded>;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 0;

        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 1;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "draw");

     label02:
        specialinvoke r0.<android.view.ViewRootImpl: void draw(boolean)>(z0);

     label03:
        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        goto label06;

     label04:
        $r26 := @caughtexception;

        r1 = $r26;

     label05:
        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r1;

     label06:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r5 == null goto label09;

        $r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r20.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        i4 = interfaceinvoke $r19.<java.util.List: int size()>();

        i0 = 0;

     label07:
        if i0 >= i4 goto label08;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r22 = $r25.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i0);

        $r28 = (android.view.RenderNode) $r23;

        virtualinvoke $r28.<android.view.RenderNode: void endAllAnimators()>();

        i0 = i0 + 1;

        goto label07;

     label08:
        $r21 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r24 = $r21.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r24.<java.util.List: void clear()>();

     label09:
        $z1 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z1 == 0 goto label16;

        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 0;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r7 == null goto label10;

        $r18 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17 = $r18.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r17.<android.view.HardwareRenderer: void fence()>();

     label10:
        $r8 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r8 == null goto label13;

        $r10 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z2 = virtualinvoke $r10.<android.view.Surface: boolean isValid()>();

        if $z2 == 0 goto label13;

        $r14 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        $r12 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r14.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>($r12);

        $r13 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r29 = virtualinvoke $r13.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r29 == null goto label13;

        r30 = r29;

        i1 = lengthof r30;

        i2 = 0;

     label11:
        if i2 >= i1 goto label13;

        r2 = r30[i2];

        $z3 = r2 instanceof android.view.SurfaceHolder$Callback2;

        if $z3 == 0 goto label12;

        $r15 = (android.view.SurfaceHolder$Callback2) r2;

        $r16 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r15.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>($r16);

     label12:
        i2 = i2 + 1;

        goto label11;

     label13:
        $r11 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r11.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r9);

     label14:
        goto label16;

     label15:
        $r27 := @caughtexception;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private void draw(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, z16, z17;
        android.view.Surface r1, $r24;
        java.util.ArrayList r2, $r46, $r48, $r49;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i20, $i21, $i22, $i23, i25, i26;
        java.lang.Throwable r3, $r51;
        long l3, $l16, $l17, $l19;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, f11;
        android.view.WindowManager$LayoutParams r4;
        android.graphics.Rect r5, $r35, r52;
        android.view.View$AttachInfo $r6, $r8, $r10, $r11, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r29, $r32, $r33, $r34, $r39, $r41;
        android.widget.Scroller $r7, $r36, $r37, $r42, $r43;
        android.view.HardwareLayer $r9;
        com.android.internal.view.BaseSurfaceHolder $r12;
        android.view.ViewTreeObserver $r13, $r40;
        android.view.HardwareRenderer $r14, $r16, $r19, $r21, $r26, $r27, $r28, $r30;
        android.view.View $r31;
        android.view.animation.Interpolator $r38;
        byte $b24;
        java.lang.Object $r44;
        java.lang.Runnable $r45;
        android.view.ViewRootImpl$ViewRootHandler $r47;
        android.view.Surface$OutOfResourcesException $r50, r53;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z2 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z2 != 0 goto label01;

        return;

     label01:
        $z3 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z3 != 0 goto label08;

        $r48 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        r2 = $r48;

        entermonitor $r48;

     label02:
        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 1;

        $r49 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        i0 = virtualinvoke $r49.<java.util.ArrayList: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        $r47 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r46 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        $r44 = virtualinvoke $r46.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r45 = (java.lang.Runnable) $r44;

        virtualinvoke $r47.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r45);

        i1 = i1 + 1;

        goto label03;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r51 := @caughtexception;

        r3 = $r51;

        exitmonitor r2;

     label07:
        throw r3;

     label08:
        virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(null, 0);

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z5 = $r6.<android.view.View$AttachInfo: boolean mViewScrollChanged>;

        if $z5 == 0 goto label09;

        $r39 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r39.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 0;

        $r41 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r40 = $r41.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r40.<android.view.ViewTreeObserver: void dispatchOnScrollChanged()>();

     label09:
        $r7 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r7 == null goto label10;

        $r43 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        $z14 = virtualinvoke $r43.<android.widget.Scroller: boolean computeScrollOffset()>();

        if $z14 == 0 goto label10;

        $z13 = 1;

        goto label11;

     label10:
        $z13 = 0;

     label11:
        z16 = $z13;

        if z16 == 0 goto label12;

        $r42 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        i25 = virtualinvoke $r42.<android.widget.Scroller: int getCurrY()>();

        goto label13;

     label12:
        i25 = r0.<android.view.ViewRootImpl: int mScrollY>;

     label13:
        $i5 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i5 == i25 goto label14;

        r0.<android.view.ViewRootImpl: int mCurScrollY> = i25;

        z0 = 1;

     label14:
        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f10 = $r8.<android.view.View$AttachInfo: float mApplicationScale>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z17 = $r10.<android.view.View$AttachInfo: boolean mScalingRequired>;

        i2 = 0;

        $r9 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r9 == null goto label16;

        $l16 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l17 = r0.<android.view.ViewRootImpl: long mResizeBufferStartTime>;

        l3 = $l16 - $l17;

        $i18 = r0.<android.view.ViewRootImpl: int mResizeBufferDuration>;

        $l19 = (long) $i18;

        $b24 = l3 cmp $l19;

        if $b24 >= 0 goto label15;

        $f8 = (float) l3;

        $i23 = r0.<android.view.ViewRootImpl: int mResizeBufferDuration>;

        $f9 = (float) $i23;

        f0 = $f8 / $f9;

        $r38 = <android.view.ViewRootImpl: android.view.animation.Interpolator mResizeInterpolator>;

        f11 = interfaceinvoke $r38.<android.view.animation.Interpolator: float getInterpolation(float)>(f0);

        z16 = 1;

        $f7 = f11 * 255.0F;

        $i22 = (int) $f7;

        i2 = 255 - $i22;

        goto label16;

     label15:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label16:
        r52 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $r12 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r12 == null goto label19;

        virtualinvoke r52.<android.graphics.Rect: void setEmpty()>();

        if z16 == 0 goto label18;

        $r36 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r36 == null goto label17;

        $r37 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r37.<android.widget.Scroller: void abortAnimation()>();

     label17:
        virtualinvoke r0.<android.view.ViewRootImpl: void disposeResizeBuffer()>();

     label18:
        return;

     label19:
        if z0 == 0 goto label20;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

        $i15 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f4 = (float) $i15;

        $f5 = $f4 * f10;

        $f6 = $f5 + 0.5F;

        $i21 = (int) $f6;

        $i14 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f1 = (float) $i14;

        $f2 = $f1 * f10;

        $f3 = $f2 + 0.5F;

        $i20 = (int) $f3;

        virtualinvoke r52.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i21, $i20);

     label20:
        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r11.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r13.<android.view.ViewTreeObserver: void dispatchOnDraw()>();

        i4 = 0;

        i26 = i25;

        r4 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        if r4 == null goto label21;

        $r35 = r4.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        goto label22;

     label21:
        $r35 = null;

     label22:
        r5 = $r35;

        if r5 == null goto label23;

        $i10 = r5.<android.graphics.Rect: int left>;

        i4 = i4 - $i10;

        $i9 = r5.<android.graphics.Rect: int top>;

        i26 = i26 - $i9;

        $i12 = r5.<android.graphics.Rect: int left>;

        $i13 = r5.<android.graphics.Rect: int right>;

        virtualinvoke r52.<android.graphics.Rect: void offset(int,int)>($i12, $i13);

     label23:
        $z6 = virtualinvoke r52.<android.graphics.Rect: boolean isEmpty()>();

        if $z6 == 0 goto label24;

        $z12 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z12 == 0 goto label33;

     label24:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r14 = $r15.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r14 == null goto label27;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r26 = $r25.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z11 = virtualinvoke $r26.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z11 == 0 goto label27;

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        $i8 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        if $i8 != i26 goto label25;

        $i11 = r0.<android.view.ViewRootImpl: int mHardwareXOffset>;

        if $i11 == i4 goto label26;

     label25:
        r0.<android.view.ViewRootImpl: int mHardwareYOffset> = i26;

        r0.<android.view.ViewRootImpl: int mHardwareXOffset> = i4;

        $r29 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r28 = $r29.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r28.<android.view.HardwareRenderer: void invalidateRoot()>();

     label26:
        r0.<android.view.ViewRootImpl: int mResizeAlpha> = i2;

        virtualinvoke r52.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.ViewRootImpl: boolean mBlockResizeBuffer> = 0;

        $r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r30 = $r33.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r31 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r32 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke $r30.<android.view.HardwareRenderer: void draw(android.view.View,android.view.View$AttachInfo,android.view.HardwareRenderer$HardwareDrawCallbacks)>($r31, $r32, r0);

        goto label33;

     label27:
        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r16 = $r17.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r16 == null goto label32;

        $r18 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r18.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z9 = virtualinvoke $r19.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z9 != 0 goto label32;

        $r22 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r21 = $r22.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $z8 = virtualinvoke $r21.<android.view.HardwareRenderer: boolean isRequested()>();

        if $z8 == 0 goto label32;

     label28:
        $r23 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r27 = $r23.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $i7 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i6 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r24 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r27.<android.view.HardwareRenderer: boolean initializeIfNeeded(int,int,android.view.Surface,android.graphics.Rect)>($i7, $i6, $r24, r5);

     label29:
        goto label31;

     label30:
        $r50 := @caughtexception;

        r53 = $r50;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r53);

        return;

     label31:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;

     label32:
        $r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z7 = specialinvoke r0.<android.view.ViewRootImpl: boolean drawSoftware(android.view.Surface,android.view.View$AttachInfo,int,int,boolean,android.graphics.Rect)>(r1, $r20, i4, i26, z17, r52);

        if $z7 != 0 goto label33;

        return;

     label33:
        if z16 == 0 goto label34;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label34:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.view.Surface$OutOfResourcesException from label28 to label29 with label30;
    }

    private boolean drawSoftware(android.view.Surface, android.view.View$AttachInfo, int, int, boolean, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface r1, $r8;
        android.view.View$AttachInfo r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, $z1, $z2, $z3;
        android.graphics.Rect r3;
        android.graphics.Canvas r4;
        java.lang.Throwable r5, r6, $r14, $r15;
        java.lang.IllegalArgumentException r7, $r16, $r17, $r19, r21, r22;
        long $l8;
        android.graphics.PorterDuff$Mode $r9;
        android.view.View $r10, $r12;
        float $f0, $f1;
        android.content.res.CompatibilityInfo$Translator $r11, $r13;
        android.view.Surface$OutOfResourcesException $r18, r20;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: android.view.View$AttachInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.graphics.Rect;

     label01:
        i2 = r3.<android.graphics.Rect: int left>;

        i3 = r3.<android.graphics.Rect: int top>;

        i4 = r3.<android.graphics.Rect: int right>;

        i5 = r3.<android.graphics.Rect: int bottom>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        r4 = virtualinvoke $r8.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(r3);

        $i6 = r3.<android.graphics.Rect: int left>;

        if i2 != $i6 goto label02;

        $i13 = r3.<android.graphics.Rect: int top>;

        if i3 != $i13 goto label02;

        $i14 = r3.<android.graphics.Rect: int right>;

        if i4 != $i14 goto label02;

        $i16 = r3.<android.graphics.Rect: int bottom>;

        if i5 == $i16 goto label03;

     label02:
        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

     label03:
        $i7 = r0.<android.view.ViewRootImpl: int mDensity>;

        virtualinvoke r4.<android.graphics.Canvas: void setDensity(int)>($i7);

     label04:
        goto label07;

     label05:
        $r18 := @caughtexception;

        r20 = $r18;

        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r20);

        return 0;

     label06:
        $r19 := @caughtexception;

        r21 = $r19;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not lock surface", r21);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

     label07:
        $z1 = virtualinvoke r4.<android.graphics.Canvas: boolean isOpaque()>();

        if $z1 == 0 goto label08;

        if i1 != 0 goto label08;

        if i0 == 0 goto label09;

     label08:
        $r9 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r4.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r9);

     label09:
        virtualinvoke r3.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r2.<android.view.View$AttachInfo: long mDrawingTime> = $l8;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i9 = $r10.<android.view.View: int mPrivateFlags>;

        $i11 = $i9 | 32;

        $r10.<android.view.View: int mPrivateFlags> = $i11;

     label10:
        $i10 = neg i0;

        $f1 = (float) $i10;

        $i12 = neg i1;

        $f0 = (float) $i12;

        virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $r11 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r11 == null goto label11;

        $r13 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r13.<android.content.res.CompatibilityInfo$Translator: void translateCanvas(android.graphics.Canvas)>(r4);

     label11:
        if z0 == 0 goto label12;

        $i15 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

        goto label13;

     label12:
        $i15 = 0;

     label13:
        virtualinvoke r4.<android.graphics.Canvas: void setScreenDensity(int)>($i15);

        r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState> = 0;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r12.<android.view.View: void draw(android.graphics.Canvas)>(r4);

     label14:
        $z2 = r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState>;

        if $z2 != 0 goto label18;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

        goto label18;

     label15:
        $r15 := @caughtexception;

        r5 = $r15;

     label16:
        $z3 = r2.<android.view.View$AttachInfo: boolean mSetIgnoreDirtyState>;

        if $z3 != 0 goto label17;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

     label17:
        throw r5;

     label18:
        virtualinvoke r1.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r4);

     label19:
        goto label26;

     label20:
        $r17 := @caughtexception;

        r22 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not unlock surface", r22);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

     label21:
        $r14 := @caughtexception;

        r6 = $r14;

     label22:
        virtualinvoke r1.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r4);

     label23:
        goto label25;

     label24:
        $r16 := @caughtexception;

        r7 = $r16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Could not unlock surface", r7);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return 0;

     label25:
        throw r6;

     label26:
        return 1;

        catch android.view.Surface$OutOfResourcesException from label01 to label04 with label05;
        catch java.lang.IllegalArgumentException from label01 to label04 with label06;
        catch java.lang.Throwable from label10 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.IllegalArgumentException from label18 to label19 with label20;
        catch java.lang.Throwable from label07 to label18 with label21;
        catch java.lang.IllegalArgumentException from label22 to label23 with label24;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()
    {
        android.view.ViewRootImpl r0;
        android.util.TypedValue r1, $r6;
        boolean z0;
        android.view.View$AttachInfo $r2, $r4, $r12;
        android.graphics.drawable.Drawable $r3, $r5, $r13;
        android.view.View $r7, $r10;
        android.content.Context $r8, $r11;
        android.content.res.Resources$Theme $r9;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        if $r3 != null goto label1;

        $r6 = new android.util.TypedValue;

        specialinvoke $r6.<android.util.TypedValue: void <init>()>();

        r1 = $r6;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r8 = $r7.<android.view.View: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        z0 = virtualinvoke $r9.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16844044, r1, 1);

        if z0 == 0 goto label1;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r11 = $r10.<android.view.View: android.content.Context mContext>;

        $i0 = r1.<android.util.TypedValue: int resourceId>;

        $r13 = virtualinvoke $r11.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        $r12.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable> = $r13;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        return $r5;
    }

    public void setDrawDuringWindowsAnimating(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewRootImpl: boolean mDrawDuringWindowsAnimating> = z0;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void handleDispatchDoneAnimating()>();

     label1:
        return;
    }

    boolean scrollToRectOrFocus(android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2, r3, $r10, $r19, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r33, $r34;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        android.view.View r4, r5, $r8, $r17, $r24, $r27, $r29, $r31, $r32, $r35;
        android.view.View$AttachInfo $r6, $r7;
        java.lang.ref.WeakReference $r9, $r11, $r37;
        android.widget.Scroller $r12, $r13, $r14, $r16, $r18;
        android.view.HardwareLayer $r15;
        android.content.Context $r20;
        android.view.ViewGroup $r36;
        java.lang.Object $r38;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r6.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r7.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        i0 = 0;

        z1 = 0;

        $i2 = r3.<android.graphics.Rect: int left>;

        $i1 = r2.<android.graphics.Rect: int left>;

        if $i2 > $i1 goto label01;

        $i32 = r3.<android.graphics.Rect: int top>;

        $i31 = r2.<android.graphics.Rect: int top>;

        if $i32 > $i31 goto label01;

        $i35 = r3.<android.graphics.Rect: int right>;

        $i33 = r2.<android.graphics.Rect: int right>;

        if $i35 > $i33 goto label01;

        $i36 = r3.<android.graphics.Rect: int bottom>;

        $i34 = r2.<android.graphics.Rect: int bottom>;

        if $i36 <= $i34 goto label12;

     label01:
        i0 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r4 = virtualinvoke $r8.<android.view.View: android.view.View findFocus()>();

        if r4 != null goto label02;

        return 0;

     label02:
        $r9 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if $r9 == null goto label03;

        $r37 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        $r38 = virtualinvoke $r37.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r35 = (android.view.View) $r38;

        goto label04;

     label03:
        $r35 = null;

     label04:
        r5 = $r35;

        if r4 == r5 goto label05;

        r1 = null;

     label05:
        if r4 != r5 goto label06;

        $z5 = r0.<android.view.ViewRootImpl: boolean mScrollMayChange>;

        if $z5 != 0 goto label06;

        if r1 != null goto label06;

        goto label12;

     label06:
        $r11 = new java.lang.ref.WeakReference;

        specialinvoke $r11.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r4);

        r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus> = $r11;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 0;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        $z2 = virtualinvoke r4.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r10, null);

        if $z2 == 0 goto label12;

        if r1 != null goto label07;

        $r34 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r4.<android.view.View: void getFocusedRect(android.graphics.Rect)>($r34);

        $r31 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z4 = $r31 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label08;

        $r32 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r36 = (android.view.ViewGroup) $r32;

        $r33 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r36.<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>(r4, $r33);

        goto label08;

     label07:
        $r19 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r19.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

     label08:
        $r23 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        $z3 = virtualinvoke $r23.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r22);

        if $z3 == 0 goto label12;

        $r21 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i9 = virtualinvoke $r21.<android.graphics.Rect: int height()>();

        $r24 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i7 = virtualinvoke $r24.<android.view.View: int getHeight()>();

        $i8 = r3.<android.graphics.Rect: int top>;

        $i12 = $i7 - $i8;

        $i11 = r3.<android.graphics.Rect: int bottom>;

        $i10 = $i12 - $i11;

        if $i9 <= $i10 goto label09;

        goto label11;

     label09:
        $r25 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i14 = $r25.<android.graphics.Rect: int top>;

        $i13 = $i14 - i0;

        $i15 = r3.<android.graphics.Rect: int top>;

        if $i13 >= $i15 goto label10;

        $i29 = r3.<android.graphics.Rect: int top>;

        $r30 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i25 = $r30.<android.graphics.Rect: int top>;

        $i28 = $i25 - i0;

        $i30 = $i29 - $i28;

        i0 = i0 - $i30;

        goto label11;

     label10:
        $r26 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i18 = $r26.<android.graphics.Rect: int bottom>;

        $i17 = $i18 - i0;

        $r27 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i16 = virtualinvoke $r27.<android.view.View: int getHeight()>();

        $i21 = r3.<android.graphics.Rect: int bottom>;

        $i20 = $i16 - $i21;

        if $i17 <= $i20 goto label11;

        $r28 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i19 = $r28.<android.graphics.Rect: int bottom>;

        $i24 = $i19 - i0;

        $r29 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i23 = virtualinvoke $r29.<android.view.View: int getHeight()>();

        $i22 = r3.<android.graphics.Rect: int bottom>;

        $i27 = $i23 - $i22;

        $i26 = $i24 - $i27;

        i0 = i0 + $i26;

     label11:
        z1 = 1;

     label12:
        $i3 = r0.<android.view.ViewRootImpl: int mScrollY>;

        if i0 == $i3 goto label16;

        if z0 != 0 goto label14;

        $r15 = r0.<android.view.ViewRootImpl: android.view.HardwareLayer mResizeBuffer>;

        if $r15 != null goto label14;

        $r14 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r14 != null goto label13;

        $r18 = new android.widget.Scroller;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r20 = virtualinvoke $r17.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r18.<android.widget.Scroller: void <init>(android.content.Context)>($r20);

        r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller> = $r18;

     label13:
        $r16 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        $i6 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $i5 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $i4 = i0 - $i5;

        virtualinvoke $r16.<android.widget.Scroller: void startScroll(int,int,int,int)>(0, $i6, 0, $i4);

        goto label15;

     label14:
        $r13 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r13 == null goto label15;

        $r12 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r12.<android.widget.Scroller: void abortAnimation()>();

     label15:
        r0.<android.view.ViewRootImpl: int mScrollY> = i0;

     label16:
        return z1;
    }

    public android.view.View getAccessibilityFocusedHost()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        return $r1;
    }

    public android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        return $r1;
    }

    void setAccessibilityFocus(android.view.View, android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r4, $r7, $r12;
        android.view.accessibility.AccessibilityNodeInfo r2, r3, $r6;
        android.view.accessibility.AccessibilityNodeProvider r5;
        int i0;
        android.view.View$AttachInfo $r8, $r10;
        android.view.HardwareRenderer $r9, $r11;
        android.graphics.Rect $r13, $r14;
        long $l1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityNodeInfo;

        $r6 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r6 == null goto label2;

        r3 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        r4 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = null;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = null;

        virtualinvoke r4.<android.view.View: void clearAccessibilityFocusNoCallbacks()>();

        r5 = virtualinvoke r4.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r5 == null goto label1;

        $r13 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>($r13);

        $r14 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r4.<android.view.View: void invalidate(android.graphics.Rect)>($r14);

        $l1 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        i0 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l1);

        virtualinvoke r5.<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>(i0, 128, null);

     label1:
        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label2:
        $r7 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if $r7 == null goto label3;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        virtualinvoke $r12.<android.view.View: void clearAccessibilityFocusNoCallbacks()>();

     label3:
        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = r1;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = r2;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r9 == null goto label4;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r11.<android.view.HardwareRenderer: void invalidateRoot()>();

     label4:
        return;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void clearChildFocus(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public android.view.ViewParent getParentForAccessibility()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public void focusableViewAvailable(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r4, $r5, $r6;
        android.view.ViewGroup r3;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r4 == null goto label2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r5.<android.view.View: boolean hasFocus()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

        goto label2;

     label1:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r2 = virtualinvoke $r6.<android.view.View: android.view.View findFocus()>();

        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        r3 = (android.view.ViewGroup) r2;

        $i0 = virtualinvoke r3.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label2;

        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r1, r2);

        if $z2 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

     label2:
        return;
    }

    public void recomputeViewAttributes(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2;
        android.view.View$AttachInfo $r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != r1 goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        $z0 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r2, $r8, $r25, $r29;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r3, $r4;
        android.view.accessibility.AccessibilityManager $r5, $r7;
        android.view.ViewRootImpl$HighContrastTextManager $r6;
        android.view.View$AttachInfo $r9, $r24, $r27;
        android.view.Surface $r10;
        android.view.InputQueue$Callback $r11, $r23;
        android.view.ViewRootImpl$WindowInputEventReceiver $r12, $r18;
        android.view.ViewRootImpl$W $r13;
        android.view.InputChannel $r14, $r19;
        android.view.IWindowSession $r15;
        android.hardware.display.DisplayManager $r16;
        android.hardware.display.DisplayManager$DisplayListener $r17;
        android.view.InputQueue $r20, $r21, $r22;
        android.view.ViewTreeObserver $r26;
        android.os.RemoteException $r28;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label1;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r24 = $r25.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r24 == null goto label1;

        $r27 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r26 = $r27.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r26.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(0);

        $r29 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r29.<android.view.View: void dispatchDetachedFromWindow()>();

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r3.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureNoConnection()>();

        $r5 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r5.<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>($r4);

        $r7 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager>;

        virtualinvoke $r7.<android.view.accessibility.AccessibilityManager: boolean removeHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)>($r6);

        specialinvoke r0.<android.view.ViewRootImpl: void removeSendWindowContentChangedCallback()>();

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r8.<android.view.View: void assignParent(android.view.ViewParent)>(null);

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        $r10 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r10.<android.view.Surface: void release()>();

        $r11 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if $r11 == null goto label2;

        $r21 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        if $r21 == null goto label2;

        $r23 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        $r20 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        interfaceinvoke $r23.<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>($r20);

        $r22 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        virtualinvoke $r22.<android.view.InputQueue: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = null;

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = null;

     label2:
        $r12 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if $r12 == null goto label3;

        $r18 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        virtualinvoke $r18.<android.view.ViewRootImpl$WindowInputEventReceiver: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = null;

     label3:
        $r15 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r13 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r15.<android.view.IWindowSession: void remove(android.view.IWindow)>($r13);

     label4:
        goto label6;

     label5:
        $r28 := @caughtexception;

     label6:
        $r14 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        if $r14 == null goto label7;

        $r19 = r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel>;

        virtualinvoke $r19.<android.view.InputChannel: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.InputChannel mInputChannel> = null;

     label7:
        $r16 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager>;

        $r17 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        virtualinvoke $r16.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>($r17);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    void updateConfiguration(android.content.res.Configuration, boolean)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Configuration r1, $r12, $r14, $r16, $r19, r22;
        boolean z0, $z1;
        android.content.res.CompatibilityInfo r2, $r6;
        java.util.ArrayList r3, $r7, $r8, $r18;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Throwable r4, $r21;
        android.view.DisplayAdjustments $r5;
        android.view.View $r9, $r11, $r13, $r15;
        android.content.res.Resources $r10;
        java.lang.Object $r17;
        android.content.ComponentCallbacks $r20;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.res.Configuration;

        z0 := @parameter1: boolean;

        $r5 = r0.<android.view.ViewRootImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        r2 = virtualinvoke $r5.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r6 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        $z1 = virtualinvoke r2.<android.content.res.CompatibilityInfo: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label01;

        $r19 = new android.content.res.Configuration;

        specialinvoke $r19.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r1);

        r1 = $r19;

        $i4 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

        virtualinvoke r2.<android.content.res.CompatibilityInfo: void applyToConfiguration(int,android.content.res.Configuration)>($i4, r1);

     label01:
        $r7 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        $r8 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        i0 = $i1 - 1;

     label03:
        if i0 < 0 goto label04;

        $r18 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $r17 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r20 = (android.content.ComponentCallbacks) $r17;

        interfaceinvoke $r20.<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        i0 = i0 + -1;

        goto label03;

     label04:
        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r21 := @caughtexception;

        r4 = $r21;

        exitmonitor r3;

     label07:
        throw r4;

     label08:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r9 == null goto label11;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r10 = virtualinvoke $r11.<android.view.View: android.content.res.Resources getResources()>();

        r22 = virtualinvoke $r10.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        if z0 != 0 goto label09;

        $r16 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        $i3 = virtualinvoke $r16.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r22);

        if $i3 == 0 goto label11;

     label09:
        $r12 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        i5 = virtualinvoke $r12.<android.content.res.Configuration: int getLayoutDirection()>();

        i6 = virtualinvoke r22.<android.content.res.Configuration: int getLayoutDirection()>();

        $r14 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfiguration>;

        virtualinvoke $r14.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r22);

        if i5 == i6 goto label10;

        $i2 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i2 != 2 goto label10;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r15.<android.view.View: void setLayoutDirection(int)>(i6);

     label10:
        $r13 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r13.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r22);

     label11:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static boolean isViewDescendantOf(android.view.View, android.view.View)
    {
        android.view.View r0, r1, $r3;
        android.view.ViewParent r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        if r0 != r1 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r3 = (android.view.View) r2;

        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>($r3, r1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static void forceLayout(android.view.View)
    {
        android.view.View r0, $r2;
        android.view.ViewGroup r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void forceLayout()>();

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r1 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    boolean ensureTouchMode(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3;
        android.os.RemoteException r1, $r4;
        android.view.View$AttachInfo $r2;
        android.view.IWindowSession $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        if $z2 != 0 goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        interfaceinvoke $r3.<android.view.IWindowSession: void setInTouchMode(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

     label4:
        $z3 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z0);

        return $z3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean ensureTouchModeLocally(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;
        android.view.View$AttachInfo $r1, $r2, $r3;
        android.view.ViewTreeObserver $r4;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r1.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mInTouchMode> = z0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r4.<android.view.ViewTreeObserver: void dispatchOnTouchModeChanged(boolean)>(z0);

        if z0 == 0 goto label2;

        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean enterTouchMode()>();

        goto label3;

     label2:
        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean leaveTouchMode()>();

     label3:
        return $z2;
    }

    private boolean enterTouchMode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r3, $r4, $r5;
        android.view.ViewGroup r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r1 = virtualinvoke $r5.<android.view.View: android.view.View findFocus()>();

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z1 != 0 goto label2;

        r2 = staticinvoke <android.view.ViewRootImpl: android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)>(r1);

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean requestFocus()>();

        return $z2;

     label1:
        virtualinvoke r1.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 0);

        return 1;

     label2:
        return 0;
    }

    private static android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)
    {
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label4;

        r2 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label2;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z2 == 0 goto label2;

        return r2;

     label2:
        $z1 = virtualinvoke r2.<android.view.ViewGroup: boolean isRootNamespace()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        r1 = virtualinvoke r2.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label4:
        return null;
    }

    private boolean leaveTouchMode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, $r3, $r4, r6;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r5;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label3;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r1 = virtualinvoke $r4.<android.view.View: android.view.View findFocus()>();

        $z2 = r1 instanceof android.view.ViewGroup;

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $r5 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke $r5.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 262144 goto label2;

        return 0;

     label2:
        r6 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.View focusSearch(android.view.View,int)>(null, 130);

        if r6 == null goto label3;

        $z1 = virtualinvoke r6.<android.view.View: boolean requestFocus(int)>(130);

        return $z1;

     label3:
        return 0;
    }

    private static boolean isNavigationKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch($i0)
        {
            case 19: goto label1;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label1;
            case 23: goto label1;
            case 61: goto label1;
            case 62: goto label1;
            case 66: goto label1;
            case 92: goto label1;
            case 93: goto label1;
            case 122: goto label1;
            case 123: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static boolean isTypingKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getUnicodeChar()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        int i0, $i1, $i2;
        android.view.View$AttachInfo $r2;
        boolean $z0, $z1, $z2, $z4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = $i1 & 4;

        if $i2 == 0 goto label3;

        return 0;

     label3:
        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isNavigationKey(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label4;

        $z4 = virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return $z4;

     label4:
        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isTypingKey(android.view.KeyEvent)>(r1);

        if $z2 == 0 goto label5;

        virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return 0;

     label5:
        return 0;
    }

    void setLocalDragState(java.lang.Object)
    {
        android.view.ViewRootImpl r0;
        java.lang.Object r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<android.view.ViewRootImpl: java.lang.Object mLocalDragState> = r1;

        return;
    }

    private void handleDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;
        int i0, $i1, $i3;
        android.view.View r2, $r4, $r10, $r12, $r17, $r28;
        boolean z0, $z1;
        android.content.ClipDescription $r5, $r24;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.PointF $r6, $r8, $r9, $r25, $r26;
        android.content.res.CompatibilityInfo$Translator $r7, $r23;
        java.lang.StringBuilder $r11, $r13, $r15;
        java.lang.String $r14;
        android.view.ViewRootImpl$W $r16, $r20, $r21;
        android.view.IWindowSession $r18, $r19, $r22;
        android.os.RemoteException $r27, $r29;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DragEvent;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r4 == null goto label17;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z1 == 0 goto label17;

        i0 = r1.<android.view.DragEvent: int mAction>;

        if i0 != 6 goto label01;

        $r28 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r28.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        goto label17;

     label01:
        if i0 != 1 goto label02;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = null;

        $r24 = r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription>;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = $r24;

        goto label03;

     label02:
        $r5 = r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription>;

        r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription> = $r5;

     label03:
        if i0 == 2 goto label04;

        if i0 != 3 goto label07;

     label04:
        $r6 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f1 = r1.<android.view.DragEvent: float mX>;

        $f0 = r1.<android.view.DragEvent: float mY>;

        virtualinvoke $r6.<android.graphics.PointF: void set(float,float)>($f1, $f0);

        $r7 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r7 == null goto label05;

        $r23 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r26 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        virtualinvoke $r23.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>($r26);

     label05:
        $i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i1 == 0 goto label06;

        $r25 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $i3 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $f4 = (float) $i3;

        virtualinvoke $r25.<android.graphics.PointF: void offset(float,float)>(0.0F, $f4);

     label06:
        $r8 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f2 = $r8.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f2;

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f3 = $r9.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f3;

     label07:
        r2 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        z0 = virtualinvoke $r10.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if r2 == $r12 goto label12;

     label08:
        if r2 == null goto label09;

        $r22 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r21 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r22.<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>($r21);

     label09:
        $r17 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r17 == null goto label10;

        $r19 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r20 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r19.<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>($r20);

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ViewRootImpl", "Unable to note drag target change");

     label12:
        if i0 != 3 goto label16;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = null;

     label13:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting drop result: ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ViewRootImpl", $r14);

        $r18 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r18.<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>($r16, z0);

     label14:
        goto label16;

     label15:
        $r29 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", "Unable to report drop result");

     label16:
        if i0 != 4 goto label17;

        virtualinvoke r0.<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>(null);

     label17:
        virtualinvoke r1.<android.view.DragEvent: void recycle()>();

        return;

        catch android.os.RemoteException from label08 to label10 with label11;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.View $r2, $r5, $r6;
        android.view.View$AttachInfo $r3, $r4, $r7;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$SystemUiVisibilityInfo;

        $i2 = r0.<android.view.ViewRootImpl: int mSeq>;

        $i1 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        if $i2 == $i1 goto label1;

        $i8 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        r0.<android.view.ViewRootImpl: int mSeq> = $i8;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != null goto label2;

        return;

     label2:
        $i3 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        if $i3 == 0 goto label3;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i7 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue>;

        $i6 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        virtualinvoke $r6.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>($i7, $i6);

     label3:
        $i4 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        i0 = $i4 & 7;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i5 = $r3.<android.view.View$AttachInfo: int mGlobalSystemUiVisibility>;

        if i0 == $i5 goto label4;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: int mGlobalSystemUiVisibility> = i0;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r5.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

     label4:
        return;
    }

    public void handleDispatchDoneAnimating()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Rect $r1;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mWindowsAnimating>;

        if $z0 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mWindowsAnimating> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $z1 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z2 != 0 goto label1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded>;

        if $z3 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label2:
        return;
    }

    public void getLastTouchPoint(android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Point r1;
        android.graphics.PointF $r2, $r3;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Point;

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f0 = $r2.<android.graphics.PointF: float x>;

        $i0 = (int) $f0;

        r1.<android.graphics.Point: int x> = $i0;

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f1 = $r3.<android.graphics.PointF: float y>;

        $i1 = (int) $f1;

        r1.<android.graphics.Point: int y> = $i1;

        return;
    }

    public void setDragFocus(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r2 == r1 goto label1;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = r1;

     label1:
        return;
    }

    private android.media.AudioManager getAudioManager()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1, $r4;
        android.media.AudioManager $r2, $r3, $r7;
        android.content.Context $r5;
        java.lang.Object $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAudioManager called when there is no mView");

        throw $r8;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        if $r2 != null goto label2;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = virtualinvoke $r4.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r7 = (android.media.AudioManager) $r6;

        r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager> = $r7;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        return $r3;
    }

    public android.view.AccessibilityInteractionController getAccessibilityInteractionController()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;
        android.view.AccessibilityInteractionController $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAccessibilityInteractionController called when there is no mView");

        throw $r5;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        if $r2 != null goto label2;

        $r4 = new android.view.AccessibilityInteractionController;

        specialinvoke $r4.<android.view.AccessibilityInteractionController: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController> = $r4;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        return $r3;
    }

    private int relayoutWindow(android.view.WindowManager$LayoutParams, int, boolean) throws android.os.RemoteException
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11;
        boolean z0, z1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.view.View$AttachInfo $r2;
        android.content.res.Configuration $r3, $r10;
        android.view.View $r4, $r7, $r28;
        android.view.IWindowSession $r5;
        android.view.ViewRootImpl$W $r6;
        android.view.Surface $r8;
        android.graphics.Rect $r9, $r11, $r12, $r13, $r14, $r16, $r18, $r20, $r22, $r25;
        android.content.res.CompatibilityInfo$Translator $r15, $r17, $r19, $r21, $r23, $r24, $r30, $r32;
        byte $b7;
        java.lang.StringBuilder $r26, $r27, $r29;
        java.lang.String $r31;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r2.<android.view.View$AttachInfo: float mApplicationScale>;

        z1 = 0;

        if r1 == null goto label1;

        $r30 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r30 == null goto label1;

        z1 = 1;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void backup()>();

        $r32 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r32.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r1);

     label1:
        if r1 == null goto label2;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r3.<android.content.res.Configuration: int seq> = 0;

        if r1 == null goto label3;

        $i10 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        $i9 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i10 == $i9 goto label3;

        $i8 = r0.<android.view.ViewRootImpl: int mTargetSdkVersion>;

        if $i8 >= 14 goto label3;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window type can not be changed after the window is added; ignoring change of ");

        $r28 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewRootImpl", $r31);

        $i11 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        r1.<android.view.WindowManager$LayoutParams: int type> = $i11;

     label3:
        $r5 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $i2 = r0.<android.view.ViewRootImpl: int mSeq>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i3 = virtualinvoke $r4.<android.view.View: int getMeasuredWidth()>();

        $f1 = (float) $i3;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        $i5 = (int) $f3;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i4 = virtualinvoke $r7.<android.view.View: int getMeasuredHeight()>();

        $f5 = (float) $i4;

        $f4 = $f5 * f0;

        $f6 = $f4 + 0.5F;

        $i6 = (int) $f6;

        if z0 == 0 goto label4;

        $b7 = 1;

        goto label5;

     label4:
        $b7 = 0;

     label5:
        $r13 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $r14 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        $r11 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        $r12 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        $r10 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mPendingConfiguration>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i1 = interfaceinvoke $r5.<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)>($r6, $i2, r1, $i5, $i6, i0, $b7, $r13, $r14, $r11, $r12, $r9, $r10, $r8);

        if z1 == 0 goto label6;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void restore()>();

     label6:
        $r17 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r17 == null goto label7;

        $r15 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r18 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        virtualinvoke $r15.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>($r18);

        $r21 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r16 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingOverscanInsets>;

        virtualinvoke $r21.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r16);

        $r19 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingContentInsets>;

        virtualinvoke $r19.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r22);

        $r24 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r20 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingVisibleInsets>;

        virtualinvoke $r24.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r20);

        $r23 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r25 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingStableInsets>;

        virtualinvoke $r23.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r25);

     label7:
        return i1;
    }

    public void playSoundEffect(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.media.AudioManager r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r12, $r13, $r15;
        java.lang.Class $r7;
        java.lang.String $r8, $r10, $r14;
        java.lang.IllegalStateException $r11, r16;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $z0 = r0.<android.view.ViewRootImpl: boolean mMediaDisabled>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r1 = specialinvoke r0.<android.view.ViewRootImpl: android.media.AudioManager getAudioManager()>();

        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label06;
            case 2: goto label10;
            case 3: goto label08;
            case 4: goto label04;
            default: goto label12;
        };

     label02:
        virtualinvoke r1.<android.media.AudioManager: void playSoundEffect(int)>(0);

     label03:
        return;

     label04:
        virtualinvoke r1.<android.media.AudioManager: void playSoundEffect(int)>(2);

     label05:
        return;

     label06:
        virtualinvoke r1.<android.media.AudioManager: void playSoundEffect(int)>(3);

     label07:
        return;

     label08:
        virtualinvoke r1.<android.media.AudioManager: void playSoundEffect(int)>(4);

     label09:
        return;

     label10:
        virtualinvoke r1.<android.media.AudioManager: void playSoundEffect(int)>(1);

     label11:
        return;

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown effect id ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not defined in ");

        $r7 = class "android/view/SoundEffectConstants";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label13:
        $r11 := @caughtexception;

        r16 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL EXCEPTION when attempting to play sound effect: ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", $r14);

        virtualinvoke r16.<java.lang.IllegalStateException: void printStackTrace()>();

        return;

        catch java.lang.IllegalStateException from label01 to label03 with label13;
        catch java.lang.IllegalStateException from label04 to label05 with label13;
        catch java.lang.IllegalStateException from label06 to label07 with label13;
        catch java.lang.IllegalStateException from label08 to label09 with label13;
        catch java.lang.IllegalStateException from label10 to label11 with label13;
        catch java.lang.IllegalStateException from label12 to label13 with label13;
    }

    public boolean performHapticFeedback(int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0;
        boolean z0, $z1;
        android.view.ViewRootImpl$W $r2;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $z1 = interfaceinvoke $r3.<android.view.IWindowSession: boolean performHapticFeedback(android.view.IWindow,int,boolean)>($r2, i0, z0);

     label2:
        return $z1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, $r4, $r6;
        int i0;
        boolean $z0;
        android.view.FocusFinder $r3;
        android.view.ViewGroup $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = (android.view.ViewGroup) $r4;

        $r6 = virtualinvoke $r3.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>($r5, r1, i0);

        return $r6;
    }

    public void debug()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r1.<android.view.View: void debug()>();

        return;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1, r5;
        java.io.FileDescriptor r2;
        java.io.PrintWriter r3;
        java.lang.String[] r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1;
        android.view.Choreographer $r9;
        android.view.ViewRootImpl$InputStage $r10;
        android.view.View $r11;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.PrintWriter;

        r4 := @parameter3: java.lang.String[];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("ViewRoot:");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mAdded=");

        $z0 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mRemoved=");

        $z1 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mConsumeBatchedInputScheduled=");

        $z2 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mConsumeBatchedInputImmediatelyScheduled=");

        $z3 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mPendingInputEventCount=");

        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mProcessInputEventsScheduled=");

        $z4 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mTraversalScheduled=");

        $z6 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z6);

        $z5 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z5 == 0 goto label1;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" (barrier=");

        $i1 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>(")");

        goto label2;

     label1:
        virtualinvoke r3.<java.io.PrintWriter: void println()>();

     label2:
        $r10 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

        virtualinvoke $r10.<android.view.ViewRootImpl$InputStage: void dump(java.lang.String,java.io.PrintWriter)>(r5, r3);

        $r9 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r9.<android.view.Choreographer: void dump(java.lang.String,java.io.PrintWriter)>(r1, r3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("View Hierarchy:");

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r5, r3, $r11);

        return;
    }

    private void dumpViewHierarchy(java.lang.String, java.io.PrintWriter, android.view.View)
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1, $r5, r10;
        java.io.PrintWriter r2;
        android.view.View r3, $r9;
        android.view.ViewGroup r4;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: android.view.View;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        if r3 != null goto label1;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("null");

        return;

     label1:
        $r5 = virtualinvoke r3.<android.view.View: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $z0 = r3 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label2;

        return;

     label2:
        r4 = (android.view.ViewGroup) r3;

        i0 = virtualinvoke r4.<android.view.ViewGroup: int getChildCount()>();

        if i0 > 0 goto label3;

        return;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r9 = virtualinvoke r4.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r10, r2, $r9);

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }

    public void dumpGfxInfo(int[])
    {
        android.view.ViewRootImpl r0;
        int[] r1;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: int[];

        r1[1] = 0;

        r1[0] = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        staticinvoke <android.view.ViewRootImpl: void getGfxInfo(android.view.View,int[])>($r3, r1);

     label1:
        return;
    }

    private static void getGfxInfo(android.view.View, int[])
    {
        android.view.View r0, $r4;
        int[] r1;
        android.view.RenderNode r2;
        android.view.ViewGroup r3;
        int i0, i1, $i2, $i3, $i5, $i6, $i7;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: int[];

        r2 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $i2 = r1[0];

        $i3 = $i2 + 1;

        r1[0] = $i3;

        if r2 == null goto label1;

        $i5 = r1[1];

        $i6 = virtualinvoke r2.<android.view.RenderNode: int getDebugSize()>();

        $i7 = $i5 + $i6;

        r1[1] = $i7;

     label1:
        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        r3 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = virtualinvoke r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ViewRootImpl: void getGfxInfo(android.view.View,int[])>($r4, r1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    boolean die(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z3;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7;
        android.view.WindowManager$LayoutParams $r5;
        java.lang.CharSequence $r6;
        java.lang.String $r8;
        android.view.ViewRootImpl$ViewRootHandler $r9;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mIsInTraversal>;

        if $z3 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void doDie()>();

        return 0;

     label1:
        $z1 = r0.<android.view.ViewRootImpl: boolean mIsDrawing>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to destroy the window while drawing!\n  window=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", title=");

        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r6 = virtualinvoke $r5.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ViewRootImpl", $r8);

     label3:
        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r9.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(3);

        return 1;
    }

    void doDie()
    {
        android.view.ViewRootImpl r0, r1;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Throwable r3, $r12;
        android.view.WindowManagerGlobal $r5;
        android.view.View $r6, $r7;
        android.view.WindowManager$LayoutParams $r8;
        android.view.Surface $r9;
        android.view.IWindowSession $r10;
        android.view.ViewRootImpl$W $r11;
        android.os.RemoteException $r13;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r1 = r0;

        entermonitor r0;

     label01:
        $z1 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<android.view.ViewRootImpl: boolean mRemoved> = 1;

        $z2 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z2 == 0 goto label04;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchDetachedFromWindow()>();

     label04:
        $z3 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z3 == 0 goto label11;

        $z4 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z4 != 0 goto label11;

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r6 == null goto label11;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        i0 = virtualinvoke $r7.<android.view.View: int getVisibility()>();

        $i1 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i1 == i0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z0 = $z6;

        $z5 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

        if $z5 != 0 goto label07;

        if z0 == 0 goto label10;

     label07:
        $r8 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i2 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>($r8, i0, 0);

        $i3 = $i2 & 2;

        if $i3 == 0 goto label08;

        $r10 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r10.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r11);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        $r9 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r9.<android.view.Surface: void release()>();

     label11:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        exitmonitor r1;

     label12:
        goto label15;

     label13:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r1;

     label14:
        throw r3;

     label15:
        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        virtualinvoke $r5.<android.view.WindowManagerGlobal: void doRemoveView(android.view.ViewRootImpl)>(r0);

        return;

        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void requestUpdateConfiguration(android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Configuration r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.res.Configuration;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(18, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void loadSystemProperties()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$4 $r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r1 = new android.view.ViewRootImpl$4;

        specialinvoke $r1.<android.view.ViewRootImpl$4: void <init>(android.view.ViewRootImpl)>(r0);

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void destroyHardwareRenderer()
    {
        android.view.ViewRootImpl r0;
        android.view.HardwareRenderer r1;
        android.view.View$AttachInfo $r2, $r4, $r5;
        android.view.View $r3, $r6;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if r1 == null goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label1;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r1.<android.view.HardwareRenderer: void destroyHardwareResources(android.view.View)>($r6);

     label1:
        virtualinvoke r1.<android.view.HardwareRenderer: void destroy()>();

        virtualinvoke r1.<android.view.HardwareRenderer: void setRequested(boolean)>(0);

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer> = null;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

     label2:
        return;
    }

    public void dispatchFinishInputConnection(android.view.inputmethod.InputConnection)
    {
        android.view.ViewRootImpl r0;
        android.view.inputmethod.InputConnection r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.inputmethod.InputConnection;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchResized(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, boolean, android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2, r3, r4, r5, $r12, $r14, $r15, $r16, $r17;
        boolean z0, z1, $z3;
        android.content.res.Configuration r6, $r13;
        android.os.Message r7;
        com.android.internal.os.SomeArgs r8;
        android.view.ViewRootImpl$ViewRootHandler $r9, $r11;
        android.content.res.CompatibilityInfo$Translator $r10, $r18, $r19, $r20, $r21;
        int $i0, $i1;
        byte $b2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        r5 := @parameter4: android.graphics.Rect;

        z0 := @parameter5: boolean;

        r6 := @parameter6: android.content.res.Configuration;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        if z0 == 0 goto label01;

        $b2 = 5;

        goto label02;

     label01:
        $b2 = 4;

     label02:
        r7 = virtualinvoke $r9.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>($b2);

        $r10 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r10 == null goto label03;

        $r19 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r19.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r1);

        $r18 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r18.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r2);

        $r21 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r21.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r3);

        $r20 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r20.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r4);

     label03:
        r8 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z1 = $z3;

        if z1 == 0 goto label06;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        goto label07;

     label06:
        $r17 = r1;

     label07:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = $r17;

        if z1 == 0 goto label08;

        $r15 = new android.graphics.Rect;

        specialinvoke $r15.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r3);

        goto label09;

     label08:
        $r15 = r3;

     label09:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = $r15;

        if z1 == 0 goto label10;

        $r16 = new android.graphics.Rect;

        specialinvoke $r16.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r4);

        goto label11;

     label10:
        $r16 = r4;

     label11:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = $r16;

        if z1 == 0 goto label12;

        if r6 == null goto label12;

        $r13 = new android.content.res.Configuration;

        specialinvoke $r13.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r6);

        goto label13;

     label12:
        $r13 = r6;

     label13:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg4> = $r13;

        if z1 == 0 goto label14;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        goto label15;

     label14:
        $r14 = r2;

     label15:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg5> = $r14;

        if z1 == 0 goto label16;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r5);

        goto label17;

     label16:
        $r12 = r5;

     label17:
        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg6> = $r12;

        r7.<android.os.Message: java.lang.Object obj> = r8;

        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r11.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r7);

        return;
    }

    public void dispatchMoved(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        android.graphics.PointF r1, $r5;
        android.content.res.CompatibilityInfo$Translator $r2, $r6;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;
        android.os.Message r7;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r2 == null goto label1;

        $r5 = new android.graphics.PointF;

        $f1 = (float) i0;

        $f0 = (float) i1;

        specialinvoke $r5.<android.graphics.PointF: void <init>(float,float)>($f1, $f0);

        r1 = $r5;

        $r6 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r6.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>(r1);

        $f2 = r1.<android.graphics.PointF: float x>;

        $d0 = (double) $f2;

        $d1 = $d0 + 0.5;

        i0 = (int) $d1;

        $f3 = r1.<android.graphics.PointF: float y>;

        $d2 = (double) $f3;

        $d3 = $d2 + 0.5;

        i1 = (int) $d3;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r7 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(24, i0, i1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r7);

        return;
    }

    private android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        int i0, $i1, $i2;
        android.view.ViewRootImpl$QueuedInputEvent r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        i0 := @parameter2: int;

        r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        if r3 == null goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        $i2 = $i1 - 1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i2;

        $r5 = r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = $r5;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

        goto label2;

     label1:
        $r4 = new android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke $r4.<android.view.ViewRootImpl$QueuedInputEvent: void <init>(android.view.ViewRootImpl$1)>(null);

        r3 = $r4;

     label2:
        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = r1;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = r2;

        r3.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags> = i0;

        return r3;
    }

    private void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = null;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = null;

        $i0 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        if $i0 >= 10 goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        $i2 = $i1 + 1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i2;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = $r2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = r1;

     label1:
        return;
    }

    void enqueueInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.ViewRootImpl: void enqueueInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int,boolean)>(r1, null, 0, 0);

        return;
    }

    void enqueueInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        int i0, $i1, $i2, $i3;
        boolean z0;
        android.view.ViewRootImpl$QueuedInputEvent r3, r4;
        java.lang.String $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 = specialinvoke r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int)>(r1, r2, i0);

        r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail>;

        if r4 != null goto label1;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = r3;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r3;

        goto label2;

     label1:
        r4.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = r3;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r3;

     label2:
        $i1 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        $i2 = $i1 + 1;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = $i2;

        $r5 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        $i3 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r5, $i3);

        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

        goto label4;

     label3:
        specialinvoke r0.<android.view.ViewRootImpl: void scheduleProcessInputEvents()>();

     label4:
        return;
    }

    private void scheduleProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(19);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    void doProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2, $r4, $r5;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r3;
        int $i0, $i1, $i2;
        java.lang.String $r6;

        r0 := @this: android.view.ViewRootImpl;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        if $r2 == null goto label3;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        $r4 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = $r4;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        if $r5 != null goto label2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = null;

     label2:
        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        $i1 = $i0 - 1;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = $i1;

        $r6 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        $i2 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r6, $i2);

        specialinvoke r0.<android.view.ViewRootImpl: void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        goto label1;

     label3:
        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 == 0 goto label4;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(19);

     label4:
        return;
    }

    private void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;
        android.view.ViewRootImpl$InputStage r2, $r5;
        android.view.InputEvent $r3, $r6;
        int $i0;
        android.view.InputEventConsistencyVerifier $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        $r3 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i0 = virtualinvoke $r3.<android.view.InputEvent: int getSequenceNumber()>();

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8L, "deliverInputEvent", $i0);

        $r4 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r4 == null goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        $r6 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r7.<android.view.InputEventConsistencyVerifier: void onInputEvent(android.view.InputEvent,int)>($r6, 0);

     label1:
        $z0 = virtualinvoke r1.<android.view.ViewRootImpl$QueuedInputEvent: boolean shouldSendToSynthesizer()>();

        if $z0 == 0 goto label2;

        r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mSyntheticInputStage>;

        goto label5;

     label2:
        $z1 = virtualinvoke r1.<android.view.ViewRootImpl$QueuedInputEvent: boolean shouldSkipIme()>();

        if $z1 == 0 goto label3;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage>;

        goto label4;

     label3:
        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

     label4:
        r2 = $r5;

     label5:
        if r2 == null goto label6;

        virtualinvoke r2.<android.view.ViewRootImpl$InputStage: void deliver(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        goto label7;

     label6:
        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

     label7:
        return;
    }

    private void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;
        boolean z0, $z1;
        android.view.InputEvent $r2, $r4, $r5;
        int $i0, $i1, $i2;
        android.view.InputEventReceiver $r3, $r6;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        $r2 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i0 = virtualinvoke $r2.<android.view.InputEvent: int getSequenceNumber()>();

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(8L, "deliverInputEvent", $i0);

        $r3 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        if $r3 == null goto label3;

        $i1 = r1.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags>;

        $i2 = $i1 & 8;

        if $i2 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r6 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        $r5 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r6.<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>($r5, z0);

        goto label4;

     label3:
        $r4 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r4.<android.view.InputEvent: void recycleIfNeededAfterDispatch()>();

     label4:
        specialinvoke r0.<android.view.ViewRootImpl: void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        return;
    }

    static boolean isTerminalInputEvent(android.view.InputEvent)
    {
        android.view.InputEvent r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        android.view.MotionEvent r2;

        r0 := @parameter0: android.view.InputEvent;

        $z0 = r0 instanceof android.view.KeyEvent;

        if $z0 == 0 goto label3;

        r1 = (android.view.KeyEvent) r0;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        r2 = (android.view.MotionEvent) r0;

        i0 = virtualinvoke r2.<android.view.MotionEvent: int getAction()>();

        if i0 == 1 goto label4;

        if i0 == 3 goto label4;

        if i0 != 10 goto label5;

     label4:
        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    void scheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void unscheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void scheduleConsumeBatchedInputImmediately()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable $r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleConsumeBatchedInput()>();

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r1);

     label1:
        return;
    }

    void doConsumeBatchedInput(long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        boolean $z0, $z1;
        android.view.ViewRootImpl$WindowInputEventReceiver $r1, $r2;
        byte $b1;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        $z1 = virtualinvoke $r2.<android.view.ViewRootImpl$WindowInputEventReceiver: boolean consumeBatchedInputEvents(long)>(l0);

        if $z1 == 0 goto label1;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleConsumeBatchedInput()>();

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

     label2:
        return;
    }

    public void dispatchInvalidateDelayed(android.view.View, long)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        long l0;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, l0);

        return;
    }

    public void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo, long)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo$InvalidateInfo r1;
        long l0;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        l0 := @parameter1: long;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, l0);

        return;
    }

    public void dispatchInvalidateOnAnimation(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addView(android.view.View)>(r1);

        return;
    }

    public void dispatchInvalidateRectOnAnimation(android.view.View$AttachInfo$InvalidateInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo$InvalidateInfo r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addViewRect(android.view.View$AttachInfo$InvalidateInfo)>(r1);

        return;
    }

    public void cancelInvalidate(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(2, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r4.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void removeView(android.view.View)>(r1);

        return;
    }

    public void dispatchInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent,android.view.InputEventReceiver)>(r1, null);

        return;
    }

    public void dispatchInputEvent(android.view.InputEvent, android.view.InputEventReceiver)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        com.android.internal.os.SomeArgs r3;
        android.os.Message r4;
        android.view.ViewRootImpl$ViewRootHandler $r5, $r6;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        r3 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r2;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r5.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r3);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r6 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r6.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public void synthesizeInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(25, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchKeyFromIme(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(11, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchUnhandledInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        boolean $z0;
        android.view.MotionEvent $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        $z0 = r1 instanceof android.view.MotionEvent;

        if $z0 == 0 goto label1;

        $r2 = (android.view.MotionEvent) r1;

        r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>($r2);

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void synthesizeInputEvent(android.view.InputEvent)>(r1);

        return;
    }

    public void dispatchAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        byte $b0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(8);

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        r1.<android.os.Message: int arg1> = $b0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchGetNewSurface()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(9);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void windowFocusChanged(boolean, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        byte $b0, $b1;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r1.<android.os.Message: int what> = 6;

        if z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        r1.<android.os.Message: int arg1> = $b1;

        if z1 == 0 goto label3;

        $b0 = 1;

        goto label4;

     label3:
        $b0 = 0;

     label4:
        r1.<android.os.Message: int arg2> = $b0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchCloseSystemDialogs(java.lang.String)
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r2.<android.os.Message: int what> = 14;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;
        byte b0;
        android.os.Message r2;
        int $i1;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DragEvent;

        $i1 = virtualinvoke r1.<android.view.DragEvent: int getAction()>();

        if $i1 != 2 goto label1;

        b0 = 16;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r5.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(b0);

        goto label2;

     label1:
        b0 = 15;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r2 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b0, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void dispatchSystemUiVisibilityChanged(int, int, int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, i2, i3;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1, $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;
        android.os.Message $r5;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = new android.view.ViewRootImpl$SystemUiVisibilityInfo;

        specialinvoke $r2.<android.view.ViewRootImpl$SystemUiVisibilityInfo: void <init>()>();

        r1 = $r2;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq> = i0;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = i1;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue> = i2;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = i3;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r5 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, r1);

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public void dispatchDoneAnimating()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(22);

        return;
    }

    public void dispatchCheckFocus()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $z0 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean hasMessages(int)>(13);

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(13);

     label1:
        return;
    }

    private void postSendWindowContentChangedCallback(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r2, $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if $r2 != null goto label1;

        $r4 = new android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent;

        specialinvoke $r4.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$1)>(r0, null);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent> = $r4;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r3.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void runOrPost(android.view.View,int)>(r1, i0);

        return;
    }

    private void removeSendWindowContentChangedCallback()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r1, $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if $r1 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        return null;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.ViewRootImpl r0;
        android.view.ContextMenu r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    public void childDrawableStateChanged(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r3, $r6, $r7, $r9, $r10, $r12, $r13, r17;
        android.view.accessibility.AccessibilityEvent r2;
        int i0, i2, i3, $i4, $i5, i8, i10, i11, i12;
        long l1, $l6, l7, l9;
        android.view.accessibility.AccessibilityNodeProvider r4, r18, r19;
        android.view.accessibility.AccessibilityNodeInfo r5, $r11, $r14, $r15, $r16;
        android.view.accessibility.AccessibilityManager $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r6 != null goto label01;

        return 0;

     label01:
        i0 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch(i0)
        {
            case 2048: goto label08;
            case 32768: goto label02;
            case 65536: goto label06;
            default: goto label12;
        };

     label02:
        l1 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i2 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>(l1);

        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r3 = virtualinvoke $r9.<android.view.View: android.view.View findViewByAccessibilityId(int)>(i2);

        if r3 == null goto label05;

        r4 = virtualinvoke r3.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r4 == null goto label05;

        i3 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>(l1);

        if i3 != 2147483647 goto label03;

        r5 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(-1);

        goto label04;

     label03:
        r5 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(i3);

     label04:
        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r3, r5);

     label05:
        goto label12;

     label06:
        l7 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i8 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>(l7);

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r17 = virtualinvoke $r7.<android.view.View: android.view.View findViewByAccessibilityId(int)>(i8);

        if r17 == null goto label07;

        r18 = virtualinvoke r17.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r18 == null goto label07;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

     label07:
        goto label12;

     label08:
        $r10 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if $r10 == null goto label12;

        $r11 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r11 == null goto label12;

        l9 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i10 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>(l9);

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        $i5 = virtualinvoke $r12.<android.view.View: int getAccessibilityViewId()>();

        if i10 == $i5 goto label09;

        goto label12;

     label09:
        i11 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>();

        $i4 = i11 & 1;

        if $i4 != 0 goto label10;

        if i11 != 0 goto label12;

     label10:
        $r13 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        r19 = virtualinvoke $r13.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r19 == null goto label12;

        $r14 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        $l6 = virtualinvoke $r14.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        i12 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l6);

        if i12 != 2147483647 goto label11;

        $r16 = virtualinvoke r19.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(-1);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = $r16;

        goto label12;

     label11:
        $r15 = virtualinvoke r19.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(i12);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = $r15;

     label12:
        $r8 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        virtualinvoke $r8.<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r2);

        return 1;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewRootImpl: void postSendWindowContentChangedCallback(android.view.View,int)>(r2, i0);

        return;
    }

    public boolean canResolveLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isLayoutDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public int getLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 0;
    }

    public boolean canResolveTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isTextDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public int getTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean canResolveTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isTextAlignmentResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public int getTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    private android.view.View getCommonPredecessor(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, r4, r9;
        java.util.HashSet r3, $r7, $r8;
        android.view.ViewParent r5, r6;
        boolean $z0, $z1, $z3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r7 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        if $r7 != null goto label01;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet> = $r8;

     label01:
        r3 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        virtualinvoke r3.<java.util.HashSet: void clear()>();

        r4 = r1;

     label02:
        if r4 == null goto label05;

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

        r5 = r4.<android.view.View: android.view.ViewParent mParent>;

        $z3 = r5 instanceof android.view.View;

        if $z3 == 0 goto label03;

        r4 = (android.view.View) r5;

        goto label04;

     label03:
        r4 = null;

     label04:
        goto label02;

     label05:
        r9 = r2;

     label06:
        if r9 == null goto label10;

        $z0 = virtualinvoke r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r9);

        if $z0 == 0 goto label07;

        virtualinvoke r3.<java.util.HashSet: void clear()>();

        return r9;

     label07:
        r6 = r9.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r6 instanceof android.view.View;

        if $z1 == 0 goto label08;

        r9 = (android.view.View) r6;

        goto label09;

     label08:
        r9 = null;

     label09:
        goto label06;

     label10:
        virtualinvoke r3.<java.util.HashSet: void clear()>();

        return null;
    }

    void checkThread()
    {
        android.view.ViewRootImpl r0;
        java.lang.Thread $r1, $r2;
        android.view.ViewRootImpl$CalledFromWrongThreadException $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.Thread mThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 == $r2 goto label1;

        $r3 = new android.view.ViewRootImpl$CalledFromWrongThreadException;

        specialinvoke $r3.<android.view.ViewRootImpl$CalledFromWrongThreadException: void <init>(java.lang.String)>("Only the original thread that created a view hierarchy can touch its views.");

        throw $r3;

     label1:
        return;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.Rect r2, $r4, $r5, $r8, $r10;
        boolean z0, z1;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo $r6, $r7;
        android.view.ViewRootImpl$W $r9;
        android.os.RemoteException $r11;
        android.view.IWindowSession $r12;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        z1 = virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(r2, z0);

        if r2 == null goto label4;

        $r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        $r5 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $i1 = neg $i0;

        virtualinvoke $r5.<android.graphics.Rect: void offset(int,int)>(0, $i1);

        $r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r6.<android.view.View$AttachInfo: int mWindowLeft>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r7.<android.view.View$AttachInfo: int mWindowTop>;

        virtualinvoke $r8.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

     label1:
        $r12 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        interfaceinvoke $r12.<android.view.IWindowSession: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>($r9, $r10);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void childHasTransientStateChanged(android.view.View, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return 0;
    }

    public void onStopNestedScroll(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0, i1, i2, i3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0, i1;
        int[] r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        return;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        float f0, f1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        return 0;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        float f0, f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return 0;
    }

    void changeCanvasOpacity(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        android.view.View$AttachInfo $r5, $r7;
        android.view.HardwareRenderer $r6, $r8;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changeCanvasOpacity: opaque=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ViewRootImpl", $r4);

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r6 == null goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r8.<android.view.HardwareRenderer: void setOpaque(boolean)>(z0);

     label1:
        return;
    }

    static android.view.ViewRootImpl$RunQueue getRunQueue()
    {
        android.view.ViewRootImpl$RunQueue r0, $r3, r5;
        java.lang.ThreadLocal $r1, $r4;
        java.lang.Object $r2;

        $r1 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (android.view.ViewRootImpl$RunQueue) $r2;

        if r0 == null goto label1;

        return r0;

     label1:
        $r3 = new android.view.ViewRootImpl$RunQueue;

        specialinvoke $r3.<android.view.ViewRootImpl$RunQueue: void <init>()>();

        r5 = $r3;

        $r4 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(r5);

        return r5;
    }

    static boolean access$000(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        return $z0;
    }

    static android.view.Choreographer$FrameCallback access$100(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.Choreographer$FrameCallback $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        return $r1;
    }

    static void access$200(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>(r0);

        return;
    }

    static void access$300(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void profileRendering(boolean)>(z0);

        return;
    }

    static boolean access$400(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z0);

        return $z1;
    }

    static android.view.Surface access$500(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.Surface $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        return $r1;
    }

    static boolean access$600(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isInLocalFocusMode()>();

        return $z0;
    }

    static void access$700(android.view.ViewRootImpl, android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.DragEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void handleDragEvent(android.view.DragEvent)>(r1);

        return;
    }

    static void access$800(android.view.ViewRootImpl, android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        return;
    }

    static boolean access$900(android.view.ViewRootImpl, android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)>(r1);

        return $z0;
    }

    static boolean access$1802(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mProfileRendering> = z0;

        return z0;
    }

    static boolean access$1902(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mMediaDisabled> = z0;

        return z0;
    }

    static boolean access$2002(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mIsEmulator> = z0;

        return z0;
    }

    static boolean access$2102(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mIsCircularEmulator> = z0;

        return z0;
    }

    static android.view.View access$2500(android.view.ViewRootImpl, android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        $r3 = specialinvoke r0.<android.view.ViewRootImpl: android.view.View getCommonPredecessor(android.view.View,android.view.View)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;
        java.util.ArrayList $r1, $r2;
        android.view.animation.AccelerateDecelerateInterpolator $r3;

        <android.view.ViewRootImpl: int MSG_SYNTHESIZE_INPUT_EVENT> = 25;

        <android.view.ViewRootImpl: int MSG_WINDOW_MOVED> = 24;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_WORLD> = 23;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DONE_ANIMATING> = 22;

        <android.view.ViewRootImpl: int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST> = 21;

        <android.view.ViewRootImpl: int MSG_PROCESS_INPUT_EVENTS> = 19;

        <android.view.ViewRootImpl: int MSG_UPDATE_CONFIGURATION> = 18;

        <android.view.ViewRootImpl: int MSG_DISPATCH_SYSTEM_UI_VISIBILITY> = 17;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_LOCATION_EVENT> = 16;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_EVENT> = 15;

        <android.view.ViewRootImpl: int MSG_CLOSE_SYSTEM_DIALOGS> = 14;

        <android.view.ViewRootImpl: int MSG_CHECK_FOCUS> = 13;

        <android.view.ViewRootImpl: int MSG_FINISH_INPUT_CONNECTION> = 12;

        <android.view.ViewRootImpl: int MSG_DISPATCH_KEY_FROM_IME> = 11;

        <android.view.ViewRootImpl: int MSG_DISPATCH_GET_NEW_SURFACE> = 9;

        <android.view.ViewRootImpl: int MSG_DISPATCH_APP_VISIBILITY> = 8;

        <android.view.ViewRootImpl: int MSG_DISPATCH_INPUT_EVENT> = 7;

        <android.view.ViewRootImpl: int MSG_WINDOW_FOCUS_CHANGED> = 6;

        <android.view.ViewRootImpl: int MSG_RESIZED_REPORT> = 5;

        <android.view.ViewRootImpl: int MSG_RESIZED> = 4;

        <android.view.ViewRootImpl: int MSG_DIE> = 3;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_RECT> = 2;

        <android.view.ViewRootImpl: int MSG_INVALIDATE> = 1;

        <android.view.ViewRootImpl: int MAX_QUEUED_INPUT_EVENT_POOL_SIZE> = 10;

        <android.view.ViewRootImpl: int MAX_TRACKBALL_DELAY> = 250;

        <android.view.ViewRootImpl: java.lang.String PROPERTY_EMULATOR_CIRCULAR> = "ro.emulator.circular";

        <android.view.ViewRootImpl: java.lang.String PROPERTY_MEDIA_DISABLED> = "config.disable_media";

        <android.view.ViewRootImpl: java.lang.String PROPERTY_PROFILE_RENDERING> = "viewroot.profile_rendering";

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_STAGES> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_FPS> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_CONFIGURATION> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_IMF> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_TRACKBALL> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_ORIENTATION> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_RESIZE> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DIALOG> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_LAYOUT> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DRAW> = 0;

        <android.view.ViewRootImpl: boolean LOCAL_LOGV> = 0;

        <android.view.ViewRootImpl: boolean DBG> = 0;

        <android.view.ViewRootImpl: java.lang.String TAG> = "ViewRootImpl";

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers> = $r1;

        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks> = $r2;

        $r3 = new android.view.animation.AccelerateDecelerateInterpolator;

        specialinvoke $r3.<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>();

        <android.view.ViewRootImpl: android.view.animation.Interpolator mResizeInterpolator> = $r3;

        return;
    }
}
