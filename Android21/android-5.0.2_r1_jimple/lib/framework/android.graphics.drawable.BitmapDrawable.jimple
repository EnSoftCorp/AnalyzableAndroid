public class android.graphics.drawable.BitmapDrawable extends android.graphics.drawable.Drawable
{
    private static final int DEFAULT_PAINT_FLAGS;
    private static final int TILE_MODE_UNDEFINED;
    private static final int TILE_MODE_DISABLED;
    private static final int TILE_MODE_CLAMP;
    private static final int TILE_MODE_REPEAT;
    private static final int TILE_MODE_MIRROR;
    private final android.graphics.Rect mDstRect;
    private android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState;
    private android.graphics.PorterDuffColorFilter mTintFilter;
    private int mTargetDensity;
    private boolean mDstRectAndInsetsDirty;
    private boolean mMutated;
    private int mBitmapWidth;
    private int mBitmapHeight;
    private android.graphics.Insets mOpticalInsets;
    private android.graphics.Matrix mMirrorMatrix;

    public void <init>()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Rect $r1;
        android.graphics.Insets $r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3;
        android.graphics.Bitmap $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r1;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r2;

        $r3 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r4 = (android.graphics.Bitmap) null;

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r4);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = $r3;

        return;
    }

    public void <init>(android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Rect $r2;
        android.graphics.Insets $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r4, $r6;
        android.graphics.Bitmap $r5;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r2;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r3;

        $r4 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r5 = (android.graphics.Bitmap) null;

        specialinvoke $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r5);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = $r4;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i0;

        return;
    }

    public void <init>(android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r1);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r2, null, null);

        return;
    }

    public void <init>(android.content.res.Resources, android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        android.graphics.Bitmap r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r4;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.graphics.Bitmap;

        $r3 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>(r2);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r3, r1, null);

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i0;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.lang.String r1, $r9;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r4;
        android.graphics.Bitmap $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>(r1);

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r3);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r2, null, null);

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r5 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r9);

     label1:
        return;
    }

    public void <init>(android.content.res.Resources, java.lang.String)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        java.lang.String r2, $r11;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r5, $r6;
        android.graphics.Bitmap $r4, $r7;
        int $i0;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: java.lang.String;

        $r3 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>(r2);

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r4);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r3, null, null);

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i0;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r7 = $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r7 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r11);

     label1:
        return;
    }

    public void <init>(java.io.InputStream)
    {
        android.graphics.drawable.BitmapDrawable r0;
        java.io.InputStream r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r4;
        android.graphics.Bitmap $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>(r1);

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r3);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r2, null, null);

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r5 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r9);

     label1:
        return;
    }

    public void <init>(android.content.res.Resources, java.io.InputStream)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        java.io.InputStream r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r5, $r6;
        android.graphics.Bitmap $r4, $r7;
        int $i0;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: java.io.InputStream;

        $r3 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>(r2);

        specialinvoke $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>($r4);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>($r3, null, null);

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i0;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r7 = $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r7 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BitmapDrawable cannot decode ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BitmapDrawable", $r11);

     label1:
        return;
    }

    public final android.graphics.Paint getPaint()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        return $r2;
    }

    public final android.graphics.Bitmap getBitmap()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        return $r2;
    }

    private void computeBitmapSize()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        int $i1, $i2, $i3, $i4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r1 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label1;

        $i1 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getScaledWidth(int)>($i1);

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth> = $i2;

        $i3 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        $i4 = virtualinvoke r1.<android.graphics.Bitmap: int getScaledHeight(int)>($i3);

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight> = $i4;

        goto label2;

     label1:
        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight> = -1;

        r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth> = -1;

     label2:
        return;
    }

    private void setBitmap(android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r3 == r1 goto label1;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap> = r1;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTargetDensity(android.graphics.Canvas)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Canvas r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = virtualinvoke r1.<android.graphics.Canvas: int getDensity()>();

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(android.util.DisplayMetrics)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.util.DisplayMetrics r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.util.DisplayMetrics;

        $i0 = r1.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>($i0);

        return;
    }

    public void setTargetDensity(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, $i1, $i2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i0 := @parameter0: int;

        $i1 = r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity>;

        if $i1 == i0 goto label4;

        if i0 != 0 goto label1;

        $i2 = 160;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = $i2;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label3;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

     label3:
        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label4:
        return;
    }

    public int getGravity()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        return $i0;
    }

    public void setGravity(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, $i1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i1 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        if $i1 == i0 goto label1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity> = i0;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setMipMap(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Bitmap $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r4.<android.graphics.Bitmap: void setHasMipMap(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public boolean hasMipMap()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Bitmap $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $z0 = virtualinvoke $r4.<android.graphics.Bitmap: boolean hasMipMap()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setAntiAlias(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAntiAlias(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public boolean hasAntiAlias()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z0 = virtualinvoke $r2.<android.graphics.Paint: boolean isAntiAlias()>();

        return $z0;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setFilterBitmap(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setDither(boolean)>(z0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public android.graphics.Shader$TileMode getTileModeX()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Shader$TileMode $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        return $r2;
    }

    public android.graphics.Shader$TileMode getTileModeY()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Shader$TileMode $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        return $r2;
    }

    public void setTileModeX(android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r1, $r3);

        return;
    }

    public final void setTileModeY(android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, $r3;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>($r3, r1);

        return;
    }

    public void setTileModeXY(android.graphics.Shader$TileMode, android.graphics.Shader$TileMode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Shader$TileMode r1, r2, $r4, $r5;
        android.graphics.drawable.BitmapDrawable$BitmapState r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Shader$TileMode;

        r2 := @parameter1: android.graphics.Shader$TileMode;

        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        if $r4 != r1 goto label1;

        $r5 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if $r5 == r2 goto label2;

     label1:
        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX> = r1;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY> = r2;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader> = 1;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label2:
        return;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $z1 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored> = z0;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public final boolean isAutoMirrored()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $z0 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        return $z0;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i1 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations>;

        $i2 = $i0 | $i1;

        return $i2;
    }

    private boolean needMirroring()
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $z0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getLayoutDirection()>();

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void updateMirrorMatrix(float)
    {
        android.graphics.drawable.BitmapDrawable r0;
        float f0;
        android.graphics.Matrix $r1, $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        f0 := @parameter0: float;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        if $r1 != null goto label1;

        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix> = $r4;

     label1:
        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: void setTranslate(float,float)>(f0, 0.0F);

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        virtualinvoke $r3.<android.graphics.Matrix: boolean preScale(float,float)>(-1.0F, 1.0F);

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Rect r1;
        android.graphics.Shader r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r7, $r10;
        android.graphics.Paint $r4, $r8, $r13;
        boolean $z0;
        android.graphics.Matrix $r5, $r6, $r11;
        int $i0, $i1, $i2;
        float $f0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        r2 = virtualinvoke $r4.<android.graphics.Paint: android.graphics.Shader getShader()>();

        if r2 == null goto label2;

        $z0 = specialinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean needMirroring()>();

        if $z0 == 0 goto label1;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $i2 = $i1 - $i0;

        $f0 = (float) $i2;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateMirrorMatrix(float)>($f0);

        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        virtualinvoke r2.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r11);

        $r10 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r13 = $r10.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r13.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

        goto label2;

     label1:
        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        if $r5 == null goto label2;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix> = null;

        $r6 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r2.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r6);

        $r7 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r8 = $r7.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r8.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r2);

     label2:
        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Bitmap r2;
        android.graphics.drawable.BitmapDrawable$BitmapState r3, $r8;
        android.graphics.Paint r4, r30;
        android.graphics.Shader$TileMode r5, r6, $r27, $r28;
        android.graphics.Shader r7;
        boolean z0, $z1, z2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b0;
        android.graphics.PorterDuffColorFilter $r9, $r22;
        android.graphics.Rect $r10, $r14, $r16, $r18, $r20, $r21;
        android.graphics.Matrix $r11, $r12, $r17;
        int $i1, $i2, $i3, $i5, $i6, $i7, $i8, i9;
        android.graphics.ColorFilter $r24;
        android.graphics.BitmapShader $r25;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r8 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r2 = $r8.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r2 != null goto label01;

        return;

     label01:
        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r4 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z1 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader>;

        if $z1 == 0 goto label08;

        r5 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        r6 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if r5 != null goto label02;

        if r6 != null goto label02;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

        goto label07;

     label02:
        $r25 = new android.graphics.BitmapShader;

        if r5 != null goto label03;

        $r27 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        goto label04;

     label03:
        $r27 = r5;

     label04:
        if r6 != null goto label05;

        $r28 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        goto label06;

     label05:
        $r28 = r6;

     label06:
        specialinvoke $r25.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r2, $r27, $r28);

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r25);

     label07:
        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mRebuildShader> = 0;

     label08:
        $f0 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 == 0 goto label09;

        r30 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>();

        i9 = virtualinvoke r30.<android.graphics.Paint: int getAlpha()>();

        $f4 = (float) i9;

        $f3 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $f5 = $f4 * $f3;

        $f6 = $f5 + 0.5F;

        $i8 = (int) $f6;

        virtualinvoke r30.<android.graphics.Paint: void setAlpha(int)>($i8);

        goto label10;

     label09:
        i9 = -1;

     label10:
        $r9 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        if $r9 == null goto label11;

        $r24 = virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        if $r24 != null goto label11;

        $r22 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r22);

        z2 = 1;

        goto label12;

     label11:
        z2 = 0;

     label12:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        r7 = virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader getShader()>();

        z0 = specialinvoke r0.<android.graphics.drawable.BitmapDrawable: boolean needMirroring()>();

        if r7 != null goto label14;

        if z0 == 0 goto label13;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r20 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i5 = $r20.<android.graphics.Rect: int right>;

        $r21 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i7 = $r21.<android.graphics.Rect: int left>;

        $i6 = $i5 - $i7;

        $f2 = (float) $i6;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f2, 0.0F);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label13:
        $r18 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>(r2, null, $r18, r4);

        if z0 == 0 goto label17;

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        goto label17;

     label14:
        if z0 == 0 goto label15;

        $r14 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i3 = $r14.<android.graphics.Rect: int right>;

        $r16 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i1 = $r16.<android.graphics.Rect: int left>;

        $i2 = $i3 - $i1;

        $f1 = (float) $i2;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateMirrorMatrix(float)>($f1);

        $r17 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        virtualinvoke r7.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r17);

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r7);

        goto label16;

     label15:
        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix>;

        if $r11 == null goto label16;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Matrix mMirrorMatrix> = null;

        $r12 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r7.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r12);

        virtualinvoke r4.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r7);

     label16:
        $r10 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>($r10, r4);

     label17:
        if z2 == 0 goto label18;

        virtualinvoke r4.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(null);

     label18:
        if i9 < 0 goto label19;

        virtualinvoke r4.<android.graphics.Paint: void setAlpha(int)>(i9);

     label19:
        return;
    }

    private void updateDstRectAndInsetsIfDirty()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Rect r1, $r4, $r8, $r10, $r11, $r12, $r13;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r6, $r9;
        android.graphics.Shader$TileMode $r3, $r7;
        android.graphics.Insets $r5, $r14;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $z0 = r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty>;

        if $z0 == 0 goto label2;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeX>;

        if $r3 != null goto label1;

        $r6 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r7 = $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Shader$TileMode mTileModeY>;

        if $r7 != null goto label1;

        r1 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect getBounds()>();

        i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getLayoutDirection()>();

        $r9 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i7 = $r9.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        $i5 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth>;

        $i6 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight>;

        $r8 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i7, $i5, $i6, r1, $r8, i0);

        $r10 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i8 = $r10.<android.graphics.Rect: int left>;

        $i9 = r1.<android.graphics.Rect: int left>;

        i1 = $i8 - $i9;

        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i11 = $r11.<android.graphics.Rect: int top>;

        $i10 = r1.<android.graphics.Rect: int top>;

        i2 = $i11 - $i10;

        $i12 = r1.<android.graphics.Rect: int right>;

        $r12 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i13 = $r12.<android.graphics.Rect: int right>;

        i3 = $i12 - $i13;

        $i15 = r1.<android.graphics.Rect: int bottom>;

        $r13 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        $i14 = $r13.<android.graphics.Rect: int bottom>;

        i4 = $i15 - $i14;

        $r14 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i1, i2, i3, i4);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r14;

        goto label2;

     label1:
        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void copyBounds(android.graphics.Rect)>($r4);

        $r5 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r5;

     label2:
        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 0;

        return;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Insets $r1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets>;

        return $r1;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Outline r1;
        boolean z0, $z1, $z2;
        android.graphics.Rect $r2;
        android.graphics.drawable.BitmapDrawable$BitmapState $r3, $r5;
        android.graphics.Bitmap $r4, $r6;
        int $i0;
        float $f0, $f1;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Outline;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateDstRectAndInsetsIfDirty()>();

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect>;

        virtualinvoke r1.<android.graphics.Outline: void setRect(android.graphics.Rect)>($r2);

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r4 == null goto label1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r6 = $r5.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $z1 = virtualinvoke $r6.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getAlpha()>();

        $f0 = (float) $i0;

        $f1 = $f0 / 255.0F;

        goto label4;

     label3:
        $f1 = 0.0F;

     label4:
        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>($f1);

        return;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.BitmapDrawable r0;
        int i0, i1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r3;
        android.graphics.Paint $r2, $r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        i1 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        if i0 == i1 goto label1;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r4.<android.graphics.Paint: void setAlpha(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        return $i0;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        android.graphics.Paint $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.Paint $r2;
        android.graphics.ColorFilter $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $r3 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>();

        return $r3;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3;
        android.graphics.PorterDuff$Mode $r4;
        android.graphics.PorterDuffColorFilter $r5, $r6;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint> = r1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r5, r1, $r4);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3;
        android.content.res.ColorStateList $r4;
        android.graphics.PorterDuffColorFilter $r5, $r6;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode> = r1;

        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r4 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r5, $r4, r1);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public android.content.res.ColorStateList getTint()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        return $r2;
    }

    public android.graphics.PorterDuff$Mode getTintMode()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1;
        android.graphics.PorterDuff$Mode $r2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r2 = $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode>;

        return $r2;
    }

    public void setXfermode(android.graphics.Xfermode)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Xfermode r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2;
        android.graphics.Paint $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.Xfermode;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>(r1);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void invalidateSelf()>();

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.BitmapDrawable r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $z0 = r0.<android.graphics.drawable.BitmapDrawable: boolean mMutated>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r1 != r0 goto label1;

        $r2 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        specialinvoke $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState)>($r3);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = $r2;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mMutated> = 1;

     label1:
        return r0;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.BitmapDrawable r0;
        int[] r1;
        android.graphics.drawable.BitmapDrawable$BitmapState r2;
        android.content.res.ColorStateList $r3, $r6;
        android.graphics.PorterDuff$Mode $r4, $r5;
        android.graphics.PorterDuffColorFilter $r7, $r8;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: int[];

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label1;

        $r4 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r4 == null goto label1;

        $r7 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r6 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r5 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode>;

        $r8 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r7, $r6, $r5);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r8;

        return 1;

     label1:
        return 0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        boolean $z0, $z1, $z2;
        android.content.res.ColorStateList $r2, $r3;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 != 0 goto label1;

        $r2 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        if $r2 == null goto label2;

        $r3 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $z2 = virtualinvoke $r3.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        $r6 = <com.android.internal.R$styleable: int[] BitmapDrawable>;

        r5 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void verifyState(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void verifyState(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.BitmapDrawable$BitmapState r2;
        android.graphics.Bitmap $r3;
        org.xmlpull.v1.XmlPullParserException $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r3 != null goto label1;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <bitmap> requires a valid src attribute");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.TypedArray r1;
        android.content.res.Resources r2;
        android.graphics.drawable.BitmapDrawable$BitmapState r3, $r11;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.graphics.Bitmap r4, $r10, $r17;
        android.content.res.ColorStateList r5;
        android.graphics.Paint r6;
        android.graphics.Shader$TileMode r7, $r12, $r15;
        int[] $r8;
        android.util.DisplayMetrics $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        float $f0, $f1;
        android.graphics.PorterDuff$Mode $r13, $r14;
        org.xmlpull.v1.XmlPullParserException $r16;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.lang.String $r20, $r22;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.Resources getResources()>();

        r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i4 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations>;

        $i5 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i6 = $i4 | $i5;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations> = $i6;

        $r8 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs> = $r8;

        i0 = virtualinvoke r1.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        if i0 == 0 goto label2;

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>(r2, i0);

        if r4 != null goto label1;

        $r16 = new org.xmlpull.v1.XmlPullParserException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <bitmap> requires a valid src attribute");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label1:
        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap> = r4;

     label2:
        $r9 = virtualinvoke r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i7 = $r9.<android.util.DisplayMetrics: int densityDpi>;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity> = $i7;

        $r10 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if $r10 == null goto label3;

        $r17 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        $z9 = virtualinvoke $r17.<android.graphics.Bitmap: boolean hasMipMap()>();

        goto label4;

     label3:
        $z9 = 0;

     label4:
        z10 = $z9;

        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(8, z10);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>($z0);

        $z2 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored>;

        $z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, $z2);

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean mAutoMirrored> = $z1;

        $f1 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha>;

        $f0 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(7, $f1);

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: float mBaseAlpha> = $f0;

        i1 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(10, -1);

        if i1 == -1 goto label5;

        $r13 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        $r14 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>(i1, $r13);

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode> = $r14;

     label5:
        r5 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(5);

        if r5 == null goto label6;

        r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint> = r5;

     label6:
        $r11 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r6 = $r11.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $z4 = virtualinvoke r6.<android.graphics.Paint: boolean isAntiAlias()>();

        $z3 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, $z4);

        virtualinvoke r6.<android.graphics.Paint: void setAntiAlias(boolean)>($z3);

        $z6 = virtualinvoke r6.<android.graphics.Paint: boolean isFilterBitmap()>();

        $z5 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, $z6);

        virtualinvoke r6.<android.graphics.Paint: void setFilterBitmap(boolean)>($z5);

        $z7 = virtualinvoke r6.<android.graphics.Paint: boolean isDither()>();

        $z8 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, $z7);

        virtualinvoke r6.<android.graphics.Paint: void setDither(boolean)>($z8);

        $i8 = r3.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        $i9 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(0, $i8);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setGravity(int)>($i9);

        i2 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(6, -2);

        if i2 == -2 goto label7;

        r7 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i2);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r7, r7);

     label7:
        i10 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(11, -2);

        if i10 == -2 goto label8;

        $r15 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i10);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>($r15);

     label8:
        i3 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(12, -2);

        if i3 == -2 goto label9;

        $r12 = staticinvoke <android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode parseTileMode(int)>(i3);

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>($r12);

     label9:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void initializeWithState(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r3, r2);

        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.BitmapDrawable$BitmapState r2;
        android.content.res.TypedArray r3;
        org.xmlpull.v1.XmlPullParserException r4, $r9;
        java.lang.Throwable r5, $r11;
        int[] $r6, $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r1);

        r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        if r2 == null goto label1;

        $r6 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        if $r6 != null goto label2;

     label1:
        return;

     label2:
        $r8 = r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        $r7 = <com.android.internal.R$styleable: int[] BitmapDrawable>;

        r3 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r8, $r7);

     label3:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r3);

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label8;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r10;

     label6:
        $r11 := @caughtexception;

        r5 = $r11;

     label7:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r5;

     label8:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private static android.graphics.Shader$TileMode parseTileMode(int)
    {
        int i0;
        android.graphics.Shader$TileMode $r0, $r1, $r2;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r0 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        return $r0;

     label2:
        $r2 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode REPEAT>;

        return $r2;

     label3:
        $r1 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode MIRROR>;

        return $r1;

     label4:
        return null;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;
        int[] $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r3 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int[] mThemeAttrs>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapWidth>;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.BitmapDrawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $i0 = r0.<android.graphics.drawable.BitmapDrawable: int mBitmapHeight>;

        return $i0;
    }

    public int getOpacity()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable$BitmapState $r2, $r3, $r4;
        int $i0, $i1;
        boolean $z0;
        android.graphics.Paint $r5;
        byte $b2;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = $r2.<android.graphics.drawable.BitmapDrawable$BitmapState: int mGravity>;

        if $i0 == 119 goto label1;

        return -3;

     label1:
        $r3 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        r1 = $r3.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 != 0 goto label2;

        $r4 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $r5 = $r4.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r5.<android.graphics.Paint: int getAlpha()>();

        if $i1 >= 255 goto label3;

     label2:
        $b2 = -3;

        goto label4;

     label3:
        $b2 = -1;

     label4:
        return $b2;
    }

    public final android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState $r1, $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        $r1 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>();

        $r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mChangingConfigurations> = $i0;

        $r2 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState>;

        return $r2;
    }

    private void <init>(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1, $r6;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        android.graphics.Rect $r4;
        android.graphics.Insets $r5;
        boolean $z0;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Rect mDstRect> = $r4;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = 160;

        r0.<android.graphics.drawable.BitmapDrawable: boolean mDstRectAndInsetsDirty> = 1;

        $r5 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.Insets mOpticalInsets> = $r5;

        if r3 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.BitmapDrawable$BitmapState: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        $r6 = new android.graphics.drawable.BitmapDrawable$BitmapState;

        specialinvoke $r6.<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState)>(r1);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = $r6;

        virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: void applyTheme(android.content.res.Resources$Theme)>(r3);

        goto label2;

     label1:
        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.BitmapDrawable$BitmapState mBitmapState> = r1;

     label2:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void initializeWithState(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)>(r1, r2);

        return;
    }

    private void initializeWithState(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        android.content.res.Resources r2;
        int $i0, $i1;
        android.graphics.PorterDuff$Mode $r3;
        android.content.res.ColorStateList $r4;
        android.graphics.PorterDuffColorFilter $r5, $r6;
        android.util.DisplayMetrics $r7;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r2 := @parameter1: android.content.res.Resources;

        if r2 == null goto label1;

        $r7 = virtualinvoke r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = $r7.<android.util.DisplayMetrics: int densityDpi>;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = $i1;

        goto label2;

     label1:
        $i0 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: int mTargetDensity>;

        r0.<android.graphics.drawable.BitmapDrawable: int mTargetDensity> = $i0;

     label2:
        $r5 = r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r4 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.content.res.ColorStateList mTint>;

        $r3 = r1.<android.graphics.drawable.BitmapDrawable$BitmapState: android.graphics.PorterDuff$Mode mTintMode>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r5, $r4, $r3);

        r0.<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>();

        return;
    }

    void <init>(android.graphics.drawable.BitmapDrawable$BitmapState, android.content.res.Resources, android.content.res.Resources$Theme, android.graphics.drawable.BitmapDrawable$1)
    {
        android.graphics.drawable.BitmapDrawable r0;
        android.graphics.drawable.BitmapDrawable$BitmapState r1;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.BitmapDrawable$1 r4;

        r0 := @this: android.graphics.drawable.BitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.BitmapDrawable$BitmapState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        r4 := @parameter3: android.graphics.drawable.BitmapDrawable$1;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.content.res.Resources$Theme)>(r1, r2, r3);

        return;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_MIRROR> = 2;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_REPEAT> = 1;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_CLAMP> = 0;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_DISABLED> = -1;

        <android.graphics.drawable.BitmapDrawable: int TILE_MODE_UNDEFINED> = -2;

        <android.graphics.drawable.BitmapDrawable: int DEFAULT_PAINT_FLAGS> = 6;

        return;
    }
}
