class android.graphics.drawable.RippleBackground extends java.lang.Object
{
    private static final android.animation.TimeInterpolator LINEAR_INTERPOLATOR;
    private static final float GLOBAL_SPEED;
    private static final float WAVE_OPACITY_DECAY_VELOCITY;
    private static final float WAVE_OUTER_OPACITY_EXIT_VELOCITY_MAX;
    private static final float WAVE_OUTER_OPACITY_EXIT_VELOCITY_MIN;
    private static final float WAVE_OUTER_OPACITY_ENTER_VELOCITY;
    private static final float WAVE_OUTER_SIZE_INFLUENCE_MAX;
    private static final float WAVE_OUTER_SIZE_INFLUENCE_MIN;
    private final java.util.ArrayList mRunningAnimations;
    private final java.util.ArrayList mPendingAnimations;
    private final android.graphics.drawable.RippleDrawable mOwner;
    private final android.graphics.Rect mBounds;
    private int mColorOpaque;
    private int mColorAlpha;
    private float mOuterRadius;
    private float mDensity;
    private android.graphics.CanvasProperty mPropOuterPaint;
    private android.graphics.CanvasProperty mPropOuterRadius;
    private android.graphics.CanvasProperty mPropOuterX;
    private android.graphics.CanvasProperty mPropOuterY;
    private android.animation.ObjectAnimator mAnimOuterOpacity;
    private android.graphics.Paint mTempPaint;
    private float mOuterOpacity;
    private float mOuterX;
    private float mOuterY;
    private boolean mHardwareAnimating;
    private boolean mCanUseHardware;
    private boolean mHasMaxRadius;
    private final android.animation.AnimatorListenerAdapter mAnimationListener;

    public void <init>(android.graphics.drawable.RippleDrawable, android.graphics.Rect)
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.drawable.RippleDrawable r1;
        android.graphics.Rect r2;
        java.util.ArrayList $r3, $r4;
        android.graphics.drawable.RippleBackground$2 $r5;

        r0 := @this: android.graphics.drawable.RippleBackground;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable;

        r2 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mRunningAnimations> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations> = $r4;

        r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity> = 0.0F;

        $r5 = new android.graphics.drawable.RippleBackground$2;

        specialinvoke $r5.<android.graphics.drawable.RippleBackground$2: void <init>(android.graphics.drawable.RippleBackground)>(r0);

        r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener> = $r5;

        r0.<android.graphics.drawable.RippleBackground: android.graphics.drawable.RippleDrawable mOwner> = r1;

        r0.<android.graphics.drawable.RippleBackground: android.graphics.Rect mBounds> = r2;

        return;
    }

    public void setup(int, int, float)
    {
        android.graphics.drawable.RippleBackground r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.graphics.Rect $r1, $r2;
        double $d0, $d1;

        r0 := @this: android.graphics.drawable.RippleBackground;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = i1 | -16777216;

        r0.<android.graphics.drawable.RippleBackground: int mColorOpaque> = $i2;

        $i3 = staticinvoke <android.graphics.Color: int alpha(int)>(i1);

        $i4 = $i3 / 2;

        r0.<android.graphics.drawable.RippleBackground: int mColorAlpha> = $i4;

        if i0 == -1 goto label1;

        r0.<android.graphics.drawable.RippleBackground: boolean mHasMaxRadius> = 1;

        $f8 = (float) i0;

        r0.<android.graphics.drawable.RippleBackground: float mOuterRadius> = $f8;

        goto label2;

     label1:
        $r1 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Rect mBounds>;

        $i5 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $f3 = (float) $i5;

        f1 = $f3 / 2.0F;

        $r2 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Rect mBounds>;

        $i6 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $f4 = (float) $i6;

        f2 = $f4 / 2.0F;

        $f7 = f1 * f1;

        $f5 = f2 * f2;

        $f6 = $f7 + $f5;

        $d1 = (double) $f6;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $f9 = (float) $d0;

        r0.<android.graphics.drawable.RippleBackground: float mOuterRadius> = $f9;

     label2:
        r0.<android.graphics.drawable.RippleBackground: float mOuterX> = 0.0F;

        r0.<android.graphics.drawable.RippleBackground: float mOuterY> = 0.0F;

        r0.<android.graphics.drawable.RippleBackground: float mDensity> = f0;

        return;
    }

    public boolean isHardwareAnimating()
    {
        android.graphics.drawable.RippleBackground r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $z0 = r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating>;

        return $z0;
    }

    public void onHotspotBoundsChanged()
    {
        android.graphics.drawable.RippleBackground r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        boolean $z0;
        android.graphics.Rect $r1, $r2;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $z0 = r0.<android.graphics.drawable.RippleBackground: boolean mHasMaxRadius>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Rect mBounds>;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        f0 = $f2 / 2.0F;

        $r2 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Rect mBounds>;

        $i1 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f1 = $f3 / 2.0F;

        $f5 = f0 * f0;

        $f4 = f1 * f1;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d1;

        r0.<android.graphics.drawable.RippleBackground: float mOuterRadius> = $f7;

     label1:
        return;
    }

    public void setOuterOpacity(float)
    {
        android.graphics.drawable.RippleBackground r0;
        float f0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        f0 := @parameter0: float;

        r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity> = f0;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void invalidateSelf()>();

        return;
    }

    public float getOuterOpacity()
    {
        android.graphics.drawable.RippleBackground r0;
        float $f0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $f0 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        return $f0;
    }

    public boolean draw(android.graphics.Canvas, android.graphics.Paint)
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        boolean z0, z1, $z2, $z3, $z4;
        android.view.HardwareCanvas $r3;

        r0 := @this: android.graphics.drawable.RippleBackground;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        $z2 = r0.<android.graphics.drawable.RippleBackground: boolean mCanUseHardware>;

        if $z2 == z0 goto label1;

        $z4 = r0.<android.graphics.drawable.RippleBackground: boolean mCanUseHardware>;

        if $z4 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void cancelHardwareAnimations(boolean)>(1);

     label1:
        r0.<android.graphics.drawable.RippleBackground: boolean mCanUseHardware> = z0;

        if z0 == 0 goto label2;

        $z3 = r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating>;

        if $z3 == 0 goto label2;

        $r3 = (android.view.HardwareCanvas) r1;

        z1 = specialinvoke r0.<android.graphics.drawable.RippleBackground: boolean drawHardware(android.view.HardwareCanvas)>($r3);

        goto label3;

     label2:
        z1 = specialinvoke r0.<android.graphics.drawable.RippleBackground: boolean drawSoftware(android.graphics.Canvas,android.graphics.Paint)>(r1, r2);

     label3:
        return z1;
    }

    public boolean shouldDraw()
    {
        android.graphics.drawable.RippleBackground r0;
        int i0, $i1;
        float $f0, $f1, $f2, $f3, $f4;
        boolean $z0, $z1, $z2;
        byte $b2;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $i1 = r0.<android.graphics.drawable.RippleBackground: int mColorAlpha>;

        $f1 = (float) $i1;

        $f0 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        $f2 = $f1 * $f0;

        $f3 = $f2 + 0.5F;

        i0 = (int) $f3;

        $z0 = r0.<android.graphics.drawable.RippleBackground: boolean mCanUseHardware>;

        if $z0 == 0 goto label1;

        $z2 = r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating>;

        if $z2 != 0 goto label2;

     label1:
        if i0 <= 0 goto label3;

        $f4 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        $b2 = $f4 cmpl 0.0F;

        if $b2 <= 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private boolean drawHardware(android.view.HardwareCanvas)
    {
        android.graphics.drawable.RippleBackground r0;
        android.view.HardwareCanvas r1;
        java.util.ArrayList r2, $r7;
        int i0, i1;
        android.graphics.CanvasProperty $r3, $r4, $r5, $r6;
        java.lang.Object $r8, $r10;
        android.view.RenderNodeAnimator $r9, $r11;

        r0 := @this: android.graphics.drawable.RippleBackground;

        r1 := @parameter0: android.view.HardwareCanvas;

        r2 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i0 <= 0 goto label3;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void cancelHardwareAnimations(boolean)>(0);

        r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating> = 1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (android.view.RenderNodeAnimator) $r8;

        virtualinvoke $r9.<android.view.RenderNodeAnimator: void setTarget(android.graphics.Canvas)>(r1);

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r11 = (android.view.RenderNodeAnimator) $r10;

        virtualinvoke $r11.<android.view.RenderNodeAnimator: void start()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mRunningAnimations>;

        virtualinvoke $r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label3:
        $r6 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterX>;

        $r5 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterY>;

        $r4 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterRadius>;

        $r3 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterPaint>;

        virtualinvoke r1.<android.view.HardwareCanvas: void drawCircle(android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty)>($r6, $r5, $r4, $r3);

        return 1;
    }

    private boolean drawSoftware(android.graphics.Canvas, android.graphics.Paint)
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        boolean z0;
        int i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b3;
        android.graphics.Paint$Style $r3;

        r0 := @this: android.graphics.drawable.RippleBackground;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        z0 = 0;

        $i1 = r0.<android.graphics.drawable.RippleBackground: int mColorOpaque>;

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i1);

        $i2 = r0.<android.graphics.drawable.RippleBackground: int mColorAlpha>;

        $f1 = (float) $i2;

        $f0 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        $f2 = $f1 * $f0;

        $f3 = $f2 + 0.5F;

        i0 = (int) $f3;

        if i0 <= 0 goto label1;

        $f4 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        $b3 = $f4 cmpl 0.0F;

        if $b3 <= 0 goto label1;

        virtualinvoke r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $f7 = r0.<android.graphics.drawable.RippleBackground: float mOuterX>;

        $f6 = r0.<android.graphics.drawable.RippleBackground: float mOuterY>;

        $f5 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f7, $f6, $f5, r2);

        z0 = 1;

     label1:
        return z0;
    }

    public void getBounds(android.graphics.Rect)
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.Rect r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2;

        r0 := @this: android.graphics.drawable.RippleBackground;

        r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.graphics.drawable.RippleBackground: float mOuterX>;

        i0 = (int) $f0;

        $f1 = r0.<android.graphics.drawable.RippleBackground: float mOuterY>;

        i1 = (int) $f1;

        $f2 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        $i3 = (int) $f2;

        i2 = $i3 + 1;

        $i7 = i0 - i2;

        $i6 = i1 - i2;

        $i5 = i0 + i2;

        $i4 = i1 + i2;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i7, $i6, $i5, $i4);

        return;
    }

    public void enter()
    {
        android.graphics.drawable.RippleBackground r0;
        android.animation.ObjectAnimator r1;
        float[] $r2;
        android.animation.TimeInterpolator $r4;

        r0 := @this: android.graphics.drawable.RippleBackground;

        virtualinvoke r0.<android.graphics.drawable.RippleBackground: void cancel()>();

        $r2 = newarray (float)[2];

        $r2[0] = 0.0F;

        $r2[1] = 1.0F;

        r1 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "outerOpacity", $r2);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        virtualinvoke r1.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(100L);

        $r4 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r4);

        r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity> = r1;

        virtualinvoke r1.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    public void exit()
    {
        android.graphics.drawable.RippleBackground r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        int i1, i2, $i3, $i4;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        virtualinvoke r0.<android.graphics.drawable.RippleBackground: void cancel()>();

        $f4 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        $f2 = r0.<android.graphics.drawable.RippleBackground: float mDensity>;

        $f3 = 40.0F * $f2;

        $f7 = $f4 - $f3;

        $f5 = r0.<android.graphics.drawable.RippleBackground: float mDensity>;

        $f6 = 200.0F * $f5;

        $f8 = $f7 / $f6;

        f0 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f8, 0.0F, 1.0F);

        f1 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(1.5F, 4.5F, f0);

        $f9 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        $f11 = 1.0F - $f9;

        $f13 = 1000.0F * $f11;

        $f10 = 3.0F + f1;

        $f12 = $f13 / $f10;

        $f14 = $f12 + 0.5F;

        $i3 = (int) $f14;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        $i4 = r0.<android.graphics.drawable.RippleBackground: int mColorAlpha>;

        $f22 = (float) $i4;

        $f20 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        $f16 = (float) i1;

        $f15 = $f16 * f1;

        $f18 = $f15 * f0;

        $f17 = $f18 / 1000.0F;

        $f19 = $f20 + $f17;

        $f21 = $f22 * $f19;

        $f23 = $f21 + 0.5F;

        i2 = (int) $f23;

        $z0 = r0.<android.graphics.drawable.RippleBackground: boolean mCanUseHardware>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void exitHardware(int,int,int)>(333, i1, i2);

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleBackground: void exitSoftware(int,int,int)>(333, i1, i2);

     label2:
        return;
    }

    private void exitHardware(int, int, int)
    {
        android.graphics.drawable.RippleBackground r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.graphics.Paint r1;
        android.view.RenderNodeAnimator r2, r3, $r9, $r17, $r22;
        java.util.ArrayList $r4, $r14, $r26;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.graphics.Paint$Style $r5;
        android.graphics.CanvasProperty $r6, $r7, $r8, $r10, $r12, $r16, $r23;
        android.animation.TimeInterpolator $r11, $r18, $r25;
        long $l7, $l8, $l9, $l10;
        android.animation.AnimatorListenerAdapter $r15, $r19, $r24;

        r0 := @this: android.graphics.drawable.RippleBackground;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r4 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        r1 = specialinvoke r0.<android.graphics.drawable.RippleBackground: android.graphics.Paint getTempPaint()>();

        virtualinvoke r1.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $i4 = r0.<android.graphics.drawable.RippleBackground: int mColorOpaque>;

        virtualinvoke r1.<android.graphics.Paint: void setColor(int)>($i4);

        $i5 = r0.<android.graphics.drawable.RippleBackground: int mColorAlpha>;

        $f1 = (float) $i5;

        $f0 = r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity>;

        $f2 = $f1 * $f0;

        $f3 = $f2 + 0.5F;

        $i6 = (int) $f3;

        virtualinvoke r1.<android.graphics.Paint: void setAlpha(int)>($i6);

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r1.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        $r6 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createPaint(android.graphics.Paint)>(r1);

        r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterPaint> = $r6;

        $f4 = r0.<android.graphics.drawable.RippleBackground: float mOuterRadius>;

        $r7 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f4);

        r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterRadius> = $r7;

        $f5 = r0.<android.graphics.drawable.RippleBackground: float mOuterX>;

        $r8 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f5);

        r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterX> = $r8;

        $f6 = r0.<android.graphics.drawable.RippleBackground: float mOuterY>;

        $r10 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f6);

        r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterY> = $r10;

        if i1 <= 0 goto label3;

        $r17 = new android.view.RenderNodeAnimator;

        $r16 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterPaint>;

        $f7 = (float) i2;

        specialinvoke $r17.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,int,float)>($r16, 1, $f7);

        r2 = $r17;

        $l8 = (long) i1;

        virtualinvoke r2.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l8);

        $r18 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r2.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r18);

        i3 = i0 - i1;

        if i3 <= 0 goto label1;

        $r22 = new android.view.RenderNodeAnimator;

        $r23 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterPaint>;

        specialinvoke $r22.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,int,float)>($r23, 1, 0.0F);

        r3 = $r22;

        $l9 = (long) i3;

        virtualinvoke r3.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l9);

        $r25 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r3.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r25);

        $l10 = (long) i1;

        virtualinvoke r3.<android.view.RenderNodeAnimator: void setStartDelay(long)>($l10);

        $f8 = (float) i2;

        virtualinvoke r3.<android.view.RenderNodeAnimator: void setStartValue(float)>($f8);

        $r24 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r3.<android.view.RenderNodeAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r24);

        $r26 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r19 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r2.<android.view.RenderNodeAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r19);

     label2:
        goto label4;

     label3:
        $r9 = new android.view.RenderNodeAnimator;

        $r12 = r0.<android.graphics.drawable.RippleBackground: android.graphics.CanvasProperty mPropOuterPaint>;

        specialinvoke $r9.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,int,float)>($r12, 1, 0.0F);

        r2 = $r9;

        $r11 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r2.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r11);

        $l7 = (long) i0;

        virtualinvoke r2.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l7);

        $r15 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r2.<android.view.RenderNodeAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r15);

     label4:
        $r14 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating> = 1;

        r0.<android.graphics.drawable.RippleBackground: float mOuterOpacity> = 0.0F;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void invalidateSelf()>();

        return;
    }

    public void jump()
    {
        android.graphics.drawable.RippleBackground r0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void endSoftwareAnimations()>();

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void cancelHardwareAnimations(boolean)>(1);

        return;
    }

    private void endSoftwareAnimations()
    {
        android.graphics.drawable.RippleBackground r0;
        android.animation.ObjectAnimator $r1, $r2;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity>;

        virtualinvoke $r2.<android.animation.ObjectAnimator: void end()>();

        r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity> = null;

     label1:
        return;
    }

    private android.graphics.Paint getTempPaint()
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.Paint $r1, $r2, $r3;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Paint mTempPaint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.RippleBackground: android.graphics.Paint mTempPaint> = $r3;

     label1:
        $r2 = r0.<android.graphics.drawable.RippleBackground: android.graphics.Paint mTempPaint>;

        return $r2;
    }

    private void exitSoftware(int, int, int)
    {
        android.graphics.drawable.RippleBackground r0;
        int i0, i1, i2, i3;
        android.animation.ObjectAnimator r1;
        float[] $r2, $r5;
        long $l4, $l5;
        android.animation.AnimatorListenerAdapter $r4, $r9;
        float $f0, $f1;
        android.animation.TimeInterpolator $r6;
        android.graphics.drawable.RippleBackground$1 $r8;

        r0 := @this: android.graphics.drawable.RippleBackground;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 <= 0 goto label3;

        $r5 = newarray (float)[1];

        $f0 = (float) i2;

        $f1 = $f0 / 255.0F;

        $r5[0] = $f1;

        r1 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "outerOpacity", $r5);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l5 = (long) i1;

        virtualinvoke r1.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l5);

        $r6 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r6);

        i3 = i0 - i1;

        if i3 <= 0 goto label1;

        $r8 = new android.graphics.drawable.RippleBackground$1;

        specialinvoke $r8.<android.graphics.drawable.RippleBackground$1: void <init>(android.graphics.drawable.RippleBackground,int)>(r0, i3);

        virtualinvoke r1.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r8);

        goto label2;

     label1:
        $r9 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r9);

     label2:
        goto label4;

     label3:
        $r2 = newarray (float)[1];

        $r2[0] = 0.0F;

        r1 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "outerOpacity", $r2);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l4 = (long) i0;

        virtualinvoke r1.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l4);

        $r4 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r4);

     label4:
        r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity> = r1;

        virtualinvoke r1.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    public void cancel()
    {
        android.graphics.drawable.RippleBackground r0;

        r0 := @this: android.graphics.drawable.RippleBackground;

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void cancelSoftwareAnimations()>();

        specialinvoke r0.<android.graphics.drawable.RippleBackground: void cancelHardwareAnimations(boolean)>(1);

        return;
    }

    private void cancelSoftwareAnimations()
    {
        android.graphics.drawable.RippleBackground r0;
        android.animation.ObjectAnimator $r1, $r2;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity>;

        virtualinvoke $r2.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity> = null;

     label1:
        return;
    }

    private void cancelHardwareAnimations(boolean)
    {
        android.graphics.drawable.RippleBackground r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r2, $r3;
        int i0, i1;
        java.lang.Object $r4;
        android.view.RenderNodeAnimator $r5;

        r0 := @this: android.graphics.drawable.RippleBackground;

        z0 := @parameter0: boolean;

        r1 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mRunningAnimations>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.view.RenderNodeAnimator) $r4;

        virtualinvoke $r5.<android.view.RenderNodeAnimator: void cancel()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r3 = r0.<android.graphics.drawable.RippleBackground: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

     label3:
        r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating> = 0;

        return;
    }

    private void invalidateSelf()
    {
        android.graphics.drawable.RippleBackground r0;
        android.graphics.drawable.RippleDrawable $r1;

        r0 := @this: android.graphics.drawable.RippleBackground;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.graphics.drawable.RippleDrawable mOwner>;

        virtualinvoke $r1.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    static android.animation.TimeInterpolator access$000()
    {
        android.animation.TimeInterpolator $r0;

        $r0 = <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        return $r0;
    }

    static android.animation.AnimatorListenerAdapter access$100(android.graphics.drawable.RippleBackground)
    {
        android.graphics.drawable.RippleBackground r0;
        android.animation.AnimatorListenerAdapter $r1;

        r0 := @parameter0: android.graphics.drawable.RippleBackground;

        $r1 = r0.<android.graphics.drawable.RippleBackground: android.animation.AnimatorListenerAdapter mAnimationListener>;

        return $r1;
    }

    static android.animation.ObjectAnimator access$202(android.graphics.drawable.RippleBackground, android.animation.ObjectAnimator)
    {
        android.graphics.drawable.RippleBackground r0;
        android.animation.ObjectAnimator r1;

        r0 := @parameter0: android.graphics.drawable.RippleBackground;

        r1 := @parameter1: android.animation.ObjectAnimator;

        r0.<android.graphics.drawable.RippleBackground: android.animation.ObjectAnimator mAnimOuterOpacity> = r1;

        return r1;
    }

    static boolean access$302(android.graphics.drawable.RippleBackground, boolean)
    {
        android.graphics.drawable.RippleBackground r0;
        boolean z0;

        r0 := @parameter0: android.graphics.drawable.RippleBackground;

        z0 := @parameter1: boolean;

        r0.<android.graphics.drawable.RippleBackground: boolean mHardwareAnimating> = z0;

        return z0;
    }

    static void <clinit>()
    {
        android.view.animation.LinearInterpolator $r0;

        <android.graphics.drawable.RippleBackground: float WAVE_OUTER_SIZE_INFLUENCE_MIN> = 40.0F;

        <android.graphics.drawable.RippleBackground: float WAVE_OUTER_SIZE_INFLUENCE_MAX> = 200.0F;

        <android.graphics.drawable.RippleBackground: float WAVE_OUTER_OPACITY_ENTER_VELOCITY> = 10.0F;

        <android.graphics.drawable.RippleBackground: float WAVE_OUTER_OPACITY_EXIT_VELOCITY_MIN> = 1.5F;

        <android.graphics.drawable.RippleBackground: float WAVE_OUTER_OPACITY_EXIT_VELOCITY_MAX> = 4.5F;

        <android.graphics.drawable.RippleBackground: float WAVE_OPACITY_DECAY_VELOCITY> = 3.0F;

        <android.graphics.drawable.RippleBackground: float GLOBAL_SPEED> = 1.0F;

        $r0 = new android.view.animation.LinearInterpolator;

        specialinvoke $r0.<android.view.animation.LinearInterpolator: void <init>()>();

        <android.graphics.drawable.RippleBackground: android.animation.TimeInterpolator LINEAR_INTERPOLATOR> = $r0;

        return;
    }
}
