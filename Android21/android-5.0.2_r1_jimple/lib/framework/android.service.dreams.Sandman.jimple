public final class android.service.dreams.Sandman extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final android.content.ComponentName SOMNAMBULATOR_COMPONENT;

    private void <init>()
    {
        android.service.dreams.Sandman r0;

        r0 := @this: android.service.dreams.Sandman;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean shouldStartDockApp(android.content.Context, android.content.Intent)
    {
        android.content.Context r0;
        android.content.Intent r1;
        android.content.ComponentName r2, $r4;
        android.content.pm.PackageManager $r3;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.Intent;

        $r3 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>($r3);

        if r2 == null goto label1;

        $r4 = <android.service.dreams.Sandman: android.content.ComponentName SOMNAMBULATOR_COMPONENT>;

        $z0 = virtualinvoke r2.<android.content.ComponentName: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void startDreamByUserRequest(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        staticinvoke <android.service.dreams.Sandman: void startDream(android.content.Context,boolean)>(r0, 0);

        return;
    }

    public static void startDreamWhenDockedIfAppropriate(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.service.dreams.Sandman: boolean isScreenSaverEnabled(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.service.dreams.Sandman: boolean isScreenSaverActivatedOnDock(android.content.Context)>(r0);

        if $z1 != 0 goto label2;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Dreams currently disabled for docks.");

        return;

     label2:
        staticinvoke <android.service.dreams.Sandman: void startDream(android.content.Context,boolean)>(r0, 1);

        return;
    }

    private static void startDream(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0, $z1;
        android.service.dreams.IDreamManager r1;
        android.os.PowerManager r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        long $l2;
        android.os.RemoteException $r5, r6;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

     label1:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("dreams");

        r1 = staticinvoke <android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager asInterface(android.os.IBinder)>($r3);

        if r1 == null goto label4;

        $z1 = interfaceinvoke r1.<android.service.dreams.IDreamManager: boolean isDreaming()>();

        if $z1 != 0 goto label4;

        if z0 == 0 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Activating dream while docked.");

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r2 = (android.os.PowerManager) $r4;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r2.<android.os.PowerManager: void wakeUp(long)>($l2);

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Activating dream by user request.");

     label3:
        interfaceinvoke r1.<android.service.dreams.IDreamManager: void dream()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Sandman", "Could not start dream when docked.", r6);

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    private static boolean isScreenSaverEnabled(android.content.Context)
    {
        android.content.Context r0;
        byte b0, $b2;
        android.content.res.Resources $r1;
        boolean $z0, $z1;
        android.content.ContentResolver $r2;
        int $i1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17956948);

        if $z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        b0 = $b2;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "screensaver_enabled", b0, -2);

        if $i1 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private static boolean isScreenSaverActivatedOnDock(android.content.Context)
    {
        android.content.Context r0;
        byte b0, $b2;
        android.content.res.Resources $r1;
        boolean $z0, $z1;
        android.content.ContentResolver $r2;
        int $i1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17956949);

        if $z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        b0 = $b2;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "screensaver_activate_on_dock", b0, -2);

        if $i1 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    static void <clinit>()
    {
        android.content.ComponentName $r0;

        <android.service.dreams.Sandman: java.lang.String TAG> = "Sandman";

        $r0 = new android.content.ComponentName;

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.Somnambulator");

        <android.service.dreams.Sandman: android.content.ComponentName SOMNAMBULATOR_COMPONENT> = $r0;

        return;
    }
}
