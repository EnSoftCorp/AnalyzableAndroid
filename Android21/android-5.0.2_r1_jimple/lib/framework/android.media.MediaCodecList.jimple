public final class android.media.MediaCodecList extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static java.lang.Object sInitLock;
    private static android.media.MediaCodecInfo[] sAllCodecInfos;
    private static android.media.MediaCodecInfo[] sRegularCodecInfos;
    public static final int REGULAR_CODECS;
    public static final int ALL_CODECS;
    private android.media.MediaCodecInfo[] mCodecInfos;

    public static final int getCodecCount()
    {
        android.media.MediaCodecInfo[] $r0;
        int $i0;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        $r0 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        $i0 = lengthof $r0;

        return $i0;
    }

    private static final native int native_getCodecCount();

    public static final android.media.MediaCodecInfo getCodecInfoAt(int)
    {
        int i0, $i1;
        java.lang.IllegalArgumentException $r0;
        android.media.MediaCodecInfo[] $r1, $r2;
        android.media.MediaCodecInfo $r3;

        i0 := @parameter0: int;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        if i0 < 0 goto label1;

        $r1 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        $r2 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        $r3 = $r2[i0];

        return $r3;
    }

    private static final void initCodecList()
    {
        java.lang.Object r0, $r5;
        int i0, i1, $i2, $i3;
        java.util.ArrayList r1, r2, $r7, $r8;
        android.media.MediaCodecInfo r3, r17;
        java.lang.Throwable r4, $r16;
        android.media.MediaCodecInfo[] $r6, $r9, $r11, $r13, $r14;
        java.lang.Object[] $r10, $r12;
        java.lang.Exception $r15, r18;

        $r5 = <android.media.MediaCodecList: java.lang.Object sInitLock>;

        r0 = $r5;

        entermonitor $r5;

     label01:
        $r6 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        if $r6 != null goto label08;

        i0 = staticinvoke <android.media.MediaCodecList: int native_getCodecCount()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1 = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        i1 = 0;

     label02:
        if i1 >= i0 goto label07;

     label03:
        r3 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getNewCodecInfoAt(int)>(i1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r17 = virtualinvoke r3.<android.media.MediaCodecInfo: android.media.MediaCodecInfo makeRegular()>();

        if r17 == null goto label04;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

        r18 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecList", "Could not get codec capabilities", r18);

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r9 = newarray (android.media.MediaCodecInfo)[$i2];

        $r10 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (android.media.MediaCodecInfo[]) $r10;

        <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos> = $r11;

        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r13 = newarray (android.media.MediaCodecInfo)[$i3];

        $r12 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r14 = (android.media.MediaCodecInfo[]) $r12;

        <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos> = $r14;

     label08:
        exitmonitor r0;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r0;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static android.media.MediaCodecInfo getNewCodecInfoAt(int)
    {
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String[] r0, r2;
        android.media.MediaCodecInfo$CodecCapabilities[] r1;
        java.lang.String r3, $r5;
        android.media.MediaCodecInfo $r4;
        boolean $z0;
        android.media.MediaCodecInfo$CodecCapabilities $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.media.MediaCodecList: java.lang.String[] getSupportedTypes(int)>(i0);

        $i4 = lengthof r0;

        r1 = newarray (android.media.MediaCodecInfo$CodecCapabilities)[$i4];

        i1 = 0;

        r2 = r0;

        i2 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r3 = r2[i3];

        $i5 = i1;

        i1 = i1 + 1;

        $r6 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo$CodecCapabilities getCodecCapabilities(int,java.lang.String)>(i0, r3);

        r1[$i5] = $r6;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = new android.media.MediaCodecInfo;

        $r5 = staticinvoke <android.media.MediaCodecList: java.lang.String getCodecName(int)>(i0);

        $z0 = staticinvoke <android.media.MediaCodecList: boolean isEncoder(int)>(i0);

        specialinvoke $r4.<android.media.MediaCodecInfo: void <init>(java.lang.String,boolean,android.media.MediaCodecInfo$CodecCapabilities[])>($r5, $z0, r1);

        return $r4;
    }

    static final native java.lang.String getCodecName(int);

    static final native boolean isEncoder(int);

    static final native java.lang.String[] getSupportedTypes(int);

    static final native android.media.MediaCodecInfo$CodecCapabilities getCodecCapabilities(int, java.lang.String);

    static final native int findCodecByName(java.lang.String);

    public static android.media.MediaCodecInfo getInfoFor(java.lang.String)
    {
        java.lang.String r0;
        android.media.MediaCodecInfo[] $r1;
        int $i0;
        android.media.MediaCodecInfo $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        $r1 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos>;

        $i0 = staticinvoke <android.media.MediaCodecList: int findCodecByName(java.lang.String)>(r0);

        $r2 = $r1[$i0];

        return $r2;
    }

    private static final native void native_init();

    private void <init>()
    {
        android.media.MediaCodecList r0;

        r0 := @this: android.media.MediaCodecList;

        specialinvoke r0.<android.media.MediaCodecList: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        android.media.MediaCodecList r0;
        int i0;
        android.media.MediaCodecInfo[] $r1, $r2;

        r0 := @this: android.media.MediaCodecList;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        if i0 != 0 goto label1;

        $r2 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos> = $r2;

        goto label2;

     label1:
        $r1 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos>;

        r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos> = $r1;

     label2:
        return;
    }

    public final android.media.MediaCodecInfo[] getCodecInfos()
    {
        android.media.MediaCodecList r0;
        android.media.MediaCodecInfo[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: android.media.MediaCodecList;

        $r2 = r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos>;

        $r1 = r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r4 = (android.media.MediaCodecInfo[]) $r3;

        return $r4;
    }

    public final java.lang.String findDecoderForFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        android.media.MediaFormat r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaCodecList;

        r1 := @parameter0: android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodecList: java.lang.String findCodecForFormat(boolean,android.media.MediaFormat)>(0, r1);

        return $r2;
    }

    public final java.lang.String findEncoderForFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        android.media.MediaFormat r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaCodecList;

        r1 := @parameter0: android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodecList: java.lang.String findCodecForFormat(boolean,android.media.MediaFormat)>(1, r1);

        return $r2;
    }

    private java.lang.String findCodecForFormat(boolean, android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        boolean z0, $z1, $z2;
        android.media.MediaFormat r1;
        java.lang.String r2, $r6;
        android.media.MediaCodecInfo[] r3;
        int i0, i1;
        android.media.MediaCodecInfo r4;
        android.media.MediaCodecInfo$CodecCapabilities r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.media.MediaCodecList;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.media.MediaFormat;

        r2 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r3 = r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r4 = r3[i1];

        $z1 = virtualinvoke r4.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z1 == z0 goto label2;

        goto label6;

     label2:
        r5 = virtualinvoke r4.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r2);

        if r5 == null goto label4;

        $z2 = virtualinvoke r5.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>(r1);

        if $z2 == 0 goto label4;

        $r6 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

     label3:
        return $r6;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return null;

        catch java.lang.IllegalArgumentException from label2 to label3 with label5;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.media.MediaCodecList: int ALL_CODECS> = 1;

        <android.media.MediaCodecList: int REGULAR_CODECS> = 0;

        <android.media.MediaCodecList: java.lang.String TAG> = "MediaCodecList";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.media.MediaCodecList: java.lang.Object sInitLock> = $r0;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCodecList: void native_init()>();

        return;
    }
}
