public class android.view.SurfaceControl extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.lang.String mName;
    long mNativeObject;
    public static final int HIDDEN;
    public static final int SECURE;
    public static final int NON_PREMULTIPLIED;
    public static final int OPAQUE;
    public static final int PROTECTED_APP;
    public static final int CURSOR_WINDOW;
    public static final int FX_SURFACE_NORMAL;
    public static final int FX_SURFACE_DIM;
    public static final int FX_SURFACE_MASK;
    private static final int SURFACE_HIDDEN;
    private static final int SURFACE_OPAQUE;
    public static final int BUILT_IN_DISPLAY_ID_MAIN;
    public static final int BUILT_IN_DISPLAY_ID_HDMI;
    public static final int POWER_MODE_OFF;
    public static final int POWER_MODE_DOZE;
    public static final int POWER_MODE_NORMAL;
    public static final int POWER_MODE_DOZE_SUSPEND;

    private static native long nativeCreate(android.view.SurfaceSession, java.lang.String, int, int, int, int) throws android.view.Surface$OutOfResourcesException;

    private static native void nativeRelease(long);

    private static native void nativeDestroy(long);

    private static native android.graphics.Bitmap nativeScreenshot(android.os.IBinder, android.graphics.Rect, int, int, int, int, boolean, boolean, int);

    private static native void nativeScreenshot(android.os.IBinder, android.view.Surface, android.graphics.Rect, int, int, int, int, boolean, boolean);

    private static native void nativeOpenTransaction();

    private static native void nativeCloseTransaction();

    private static native void nativeSetAnimationTransaction();

    private static native void nativeSetLayer(long, int);

    private static native void nativeSetPosition(long, float, float);

    private static native void nativeSetSize(long, int, int);

    private static native void nativeSetTransparentRegionHint(long, android.graphics.Region);

    private static native void nativeSetAlpha(long, float);

    private static native void nativeSetMatrix(long, float, float, float, float);

    private static native void nativeSetFlags(long, int, int);

    private static native void nativeSetWindowCrop(long, int, int, int, int);

    private static native void nativeSetLayerStack(long, int);

    private static native boolean nativeClearContentFrameStats(long);

    private static native boolean nativeGetContentFrameStats(long, android.view.WindowContentFrameStats);

    private static native boolean nativeClearAnimationFrameStats();

    private static native boolean nativeGetAnimationFrameStats(android.view.WindowAnimationFrameStats);

    private static native android.os.IBinder nativeGetBuiltInDisplay(int);

    private static native android.os.IBinder nativeCreateDisplay(java.lang.String, boolean);

    private static native void nativeDestroyDisplay(android.os.IBinder);

    private static native void nativeSetDisplaySurface(android.os.IBinder, long);

    private static native void nativeSetDisplayLayerStack(android.os.IBinder, int);

    private static native void nativeSetDisplayProjection(android.os.IBinder, int, int, int, int, int, int, int, int, int);

    private static native void nativeSetDisplaySize(android.os.IBinder, int, int);

    private static native android.view.SurfaceControl$PhysicalDisplayInfo[] nativeGetDisplayConfigs(android.os.IBinder);

    private static native int nativeGetActiveConfig(android.os.IBinder);

    private static native boolean nativeSetActiveConfig(android.os.IBinder, int);

    private static native void nativeSetDisplayPowerMode(android.os.IBinder, int);

    public void <init>(android.view.SurfaceSession, java.lang.String, int, int, int, int) throws android.view.Surface$OutOfResourcesException
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceSession r1;
        java.lang.String r2, $r10;
        int i0, i1, i2, i3, $i4;
        dalvik.system.CloseGuard $r3, $r4;
        long $l5, $l6;
        byte $b7;
        android.view.Surface$OutOfResourcesException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.Throwable $r9;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceSession;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r3;

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("session must not be null");

        throw $r12;

     label1:
        if r2 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r11;

     label2:
        $i4 = i3 & 4;

        if $i4 != 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surfaces should always be created with the HIDDEN flag set to ensure that they are not made visible prematurely before all of the surface\'s properties have been configured.  Set the other properties and make the surface visible within a transaction.  New surface name: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.Throwable;

        specialinvoke $r9.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SurfaceControl", $r10, $r9);

     label3:
        r0.<android.view.SurfaceControl: java.lang.String mName> = r2;

        $l5 = staticinvoke <android.view.SurfaceControl: long nativeCreate(android.view.SurfaceSession,java.lang.String,int,int,int,int)>(r1, r2, i0, i1, i2, i3);

        r0.<android.view.SurfaceControl: long mNativeObject> = $l5;

        $l6 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label4;

        $r5 = new android.view.Surface$OutOfResourcesException;

        specialinvoke $r5.<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>("Couldn\'t allocate SurfaceControl native object");

        throw $r5;

     label4:
        $r4 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.SurfaceControl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;
        long $l0, $l2;
        byte $b1;

        r0 := @this: android.view.SurfaceControl;

     label1:
        $r2 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(long)>($l2);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String toString()
    {
        android.view.SurfaceControl r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.view.SurfaceControl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r3 = r0.<android.view.SurfaceControl: java.lang.String mName>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void release()
    {
        android.view.SurfaceControl r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.SurfaceControl;

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(long)>($l2);

        r0.<android.view.SurfaceControl: long mNativeObject> = 0L;

     label1:
        $r1 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    public void destroy()
    {
        android.view.SurfaceControl r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.SurfaceControl;

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeDestroy(long)>($l2);

        r0.<android.view.SurfaceControl: long mNativeObject> = 0L;

     label1:
        $r1 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    private void checkNotReleased()
    {
        android.view.SurfaceControl r0;
        long $l0;
        byte $b1;
        java.lang.NullPointerException $r1;

        r0 := @this: android.view.SurfaceControl;

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("mNativeObject is null. Have you called release() already?");

        throw $r1;

     label1:
        return;
    }

    public static void openTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeOpenTransaction()>();

        return;
    }

    public static void closeTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeCloseTransaction()>();

        return;
    }

    public static void setAnimationTransaction()
    {
        staticinvoke <android.view.SurfaceControl: void nativeSetAnimationTransaction()>();

        return;
    }

    public void setLayer(int)
    {
        android.view.SurfaceControl r0;
        int i0;
        long $l1;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l1 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayer(long,int)>($l1, i0);

        return;
    }

    public void setPosition(float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetPosition(long,float,float)>($l0, f0, f1);

        return;
    }

    public void setSize(int, int)
    {
        android.view.SurfaceControl r0;
        int i0, i1;
        long $l2;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetSize(long,int,int)>($l2, i0, i1);

        return;
    }

    public void hide()
    {
        android.view.SurfaceControl r0;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(long,int,int)>($l0, 1, 1);

        return;
    }

    public void show()
    {
        android.view.SurfaceControl r0;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(long,int,int)>($l0, 0, 1);

        return;
    }

    public void setTransparentRegionHint(android.graphics.Region)
    {
        android.view.SurfaceControl r0;
        android.graphics.Region r1;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.graphics.Region;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetTransparentRegionHint(long,android.graphics.Region)>($l0, r1);

        return;
    }

    public boolean clearContentFrameStats()
    {
        android.view.SurfaceControl r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeClearContentFrameStats(long)>($l0);

        return $z0;
    }

    public boolean getContentFrameStats(android.view.WindowContentFrameStats)
    {
        android.view.SurfaceControl r0;
        android.view.WindowContentFrameStats r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.WindowContentFrameStats;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetContentFrameStats(long,android.view.WindowContentFrameStats)>($l0, r1);

        return $z0;
    }

    public static boolean clearAnimationFrameStats()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeClearAnimationFrameStats()>();

        return $z0;
    }

    public static boolean getAnimationFrameStats(android.view.WindowAnimationFrameStats)
    {
        android.view.WindowAnimationFrameStats r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowAnimationFrameStats;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetAnimationFrameStats(android.view.WindowAnimationFrameStats)>(r0);

        return $z0;
    }

    public void setAlpha(float)
    {
        android.view.SurfaceControl r0;
        float f0;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetAlpha(long,float)>($l0, f0);

        return;
    }

    public void setMatrix(float, float, float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1, f2, f3;
        long $l0;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetMatrix(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return;
    }

    public void setWindowCrop(android.graphics.Rect)
    {
        android.view.SurfaceControl r0;
        android.graphics.Rect r1;
        long $l0, $l5;
        int $i1, $i2, $i3, $i4;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        if r1 == null goto label1;

        $l5 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        staticinvoke <android.view.SurfaceControl: void nativeSetWindowCrop(long,int,int,int,int)>($l5, $i4, $i3, $i2, $i1);

        goto label2;

     label1:
        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetWindowCrop(long,int,int,int,int)>($l0, 0, 0, 0, 0);

     label2:
        return;
    }

    public void setLayerStack(int)
    {
        android.view.SurfaceControl r0;
        int i0;
        long $l1;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l1 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayerStack(long,int)>($l1, i0);

        return;
    }

    public void setOpaque(boolean)
    {
        android.view.SurfaceControl r0;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.view.SurfaceControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        if z0 == 0 goto label1;

        $l1 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(long,int,int)>($l1, 2, 2);

        goto label2;

     label1:
        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(long,int,int)>($l0, 0, 2);

     label2:
        return;
    }

    public static void setDisplayPowerMode(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayPowerMode(android.os.IBinder,int)>(r0, i0);

        return;
    }

    public static android.view.SurfaceControl$PhysicalDisplayInfo[] getDisplayConfigs(android.os.IBinder)
    {
        android.os.IBinder r0;
        android.view.SurfaceControl$PhysicalDisplayInfo[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r2;

     label1:
        $r1 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$PhysicalDisplayInfo[] nativeGetDisplayConfigs(android.os.IBinder)>(r0);

        return $r1;
    }

    public static int getActiveConfig(android.os.IBinder)
    {
        android.os.IBinder r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        $i0 = staticinvoke <android.view.SurfaceControl: int nativeGetActiveConfig(android.os.IBinder)>(r0);

        return $i0;
    }

    public static boolean setActiveConfig(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeSetActiveConfig(android.os.IBinder,int)>(r0, i0);

        return $z0;
    }

    public static void setDisplayProjection(android.os.IBinder, int, android.graphics.Rect, android.graphics.Rect)
    {
        android.os.IBinder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Rect r1, r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        r2 := @parameter3: android.graphics.Rect;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("layerStackRect must not be null");

        throw $r4;

     label2:
        if r2 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayRect must not be null");

        throw $r3;

     label3:
        $i8 = r1.<android.graphics.Rect: int left>;

        $i7 = r1.<android.graphics.Rect: int top>;

        $i6 = r1.<android.graphics.Rect: int right>;

        $i5 = r1.<android.graphics.Rect: int bottom>;

        $i4 = r2.<android.graphics.Rect: int left>;

        $i3 = r2.<android.graphics.Rect: int top>;

        $i2 = r2.<android.graphics.Rect: int right>;

        $i1 = r2.<android.graphics.Rect: int bottom>;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayProjection(android.os.IBinder,int,int,int,int,int,int,int,int,int)>(r0, i0, $i8, $i7, $i6, $i5, $i4, $i3, $i2, $i1);

        return;
    }

    public static void setDisplayLayerStack(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayLayerStack(android.os.IBinder,int)>(r0, i0);

        return;
    }

    public static void setDisplaySurface(android.os.IBinder, android.view.Surface)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        long $l0;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r5;

     label1:
        if r1 == null goto label7;

        $r4 = r1.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $l0 = r1.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySurface(android.os.IBinder,long)>(r0, $l0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        goto label8;

     label7:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySurface(android.os.IBinder,long)>(r0, 0L);

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void setDisplaySize(android.os.IBinder, int, int)
    {
        android.os.IBinder r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r2;

     label1:
        if i0 <= 0 goto label2;

        if i1 > 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be positive");

        throw $r1;

     label3:
        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySize(android.os.IBinder,int,int)>(r0, i0, i1);

        return;
    }

    public static android.os.IBinder createDisplay(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        android.os.IBinder $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r2;

     label1:
        $r1 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeCreateDisplay(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    public static void destroyDisplay(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;

     label1:
        staticinvoke <android.view.SurfaceControl: void nativeDestroyDisplay(android.os.IBinder)>(r0);

        return;
    }

    public static android.os.IBinder getBuiltInDisplay(int)
    {
        int i0;
        android.os.IBinder $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeGetBuiltInDisplay(int)>(i0);

        return $r0;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface, int, int, int, int, boolean)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        int i0, i1, i2, i3;
        boolean z0;
        android.graphics.Rect $r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 := @parameter6: boolean;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)>(r0, r1, $r2, i0, i1, i2, i3, 0, z0);

        return;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface, int, int)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        int i0, i1;
        android.graphics.Rect $r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)>(r0, r1, $r2, i0, i1, 0, 0, 1, 0);

        return;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        android.graphics.Rect $r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)>(r0, r1, $r2, 0, 0, 0, 0, 1, 0);

        return;
    }

    public static android.graphics.Bitmap screenshot(android.graphics.Rect, int, int, int, int, boolean, int)
    {
        android.graphics.Rect r0;
        int i0, i1, i2, i3, i4;
        boolean z0;
        android.os.IBinder r1;
        android.graphics.Bitmap $r2;

        r0 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        r1 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getBuiltInDisplay(int)>(0);

        $r2 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,int,int,boolean,boolean,int)>(r1, r0, i0, i1, i2, i3, 0, z0, i4);

        return $r2;
    }

    public static android.graphics.Bitmap screenshot(int, int)
    {
        int i0, i1;
        android.os.IBinder r0;
        android.graphics.Rect $r1;
        android.graphics.Bitmap $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getBuiltInDisplay(int)>(0);

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        $r2 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,int,int,boolean,boolean,int)>(r0, $r1, i0, i1, 0, 0, 1, 0, 0);

        return $r2;
    }

    private static void screenshot(android.os.IBinder, android.view.Surface, android.graphics.Rect, int, int, int, int, boolean, boolean)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        android.graphics.Rect r2;
        int i0, i1, i2, i3;
        boolean z0, z1;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("consumer must not be null");

        throw $r3;

     label2:
        staticinvoke <android.view.SurfaceControl: void nativeScreenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)>(r0, r1, r2, i0, i1, i2, i3, z0, z1);

        return;
    }

    public static void <clinit>()
    {
        <android.view.SurfaceControl: int POWER_MODE_DOZE_SUSPEND> = 3;

        <android.view.SurfaceControl: int POWER_MODE_NORMAL> = 2;

        <android.view.SurfaceControl: int POWER_MODE_DOZE> = 1;

        <android.view.SurfaceControl: int POWER_MODE_OFF> = 0;

        <android.view.SurfaceControl: int BUILT_IN_DISPLAY_ID_HDMI> = 1;

        <android.view.SurfaceControl: int BUILT_IN_DISPLAY_ID_MAIN> = 0;

        <android.view.SurfaceControl: int SURFACE_OPAQUE> = 2;

        <android.view.SurfaceControl: int SURFACE_HIDDEN> = 1;

        <android.view.SurfaceControl: int FX_SURFACE_MASK> = 983040;

        <android.view.SurfaceControl: int FX_SURFACE_DIM> = 131072;

        <android.view.SurfaceControl: int FX_SURFACE_NORMAL> = 0;

        <android.view.SurfaceControl: int CURSOR_WINDOW> = 8192;

        <android.view.SurfaceControl: int PROTECTED_APP> = 2048;

        <android.view.SurfaceControl: int OPAQUE> = 1024;

        <android.view.SurfaceControl: int NON_PREMULTIPLIED> = 256;

        <android.view.SurfaceControl: int SECURE> = 128;

        <android.view.SurfaceControl: int HIDDEN> = 4;

        <android.view.SurfaceControl: java.lang.String TAG> = "SurfaceControl";

        return;
    }
}
