public abstract class android.filterfw.core.Frame extends java.lang.Object
{
    public static final int NO_BINDING;
    public static final long TIMESTAMP_NOT_SET;
    public static final long TIMESTAMP_UNKNOWN;
    private android.filterfw.core.FrameFormat mFormat;
    private android.filterfw.core.FrameManager mFrameManager;
    private boolean mReadOnly;
    private boolean mReusable;
    private int mRefCount;
    private int mBindingType;
    private long mBindingId;
    private long mTimestamp;

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager)
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FrameManager r2;
        android.filterfw.core.MutableFrameFormat $r3;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.core.Frame: boolean mReadOnly> = 0;

        r0.<android.filterfw.core.Frame: boolean mReusable> = 0;

        r0.<android.filterfw.core.Frame: int mRefCount> = 1;

        r0.<android.filterfw.core.Frame: int mBindingType> = 0;

        r0.<android.filterfw.core.Frame: long mBindingId> = 0L;

        r0.<android.filterfw.core.Frame: long mTimestamp> = -2L;

        $r3 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat mFormat> = $r3;

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager> = r2;

        return;
    }

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager, int, long)
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FrameManager r2;
        int i0;
        long l1;
        android.filterfw.core.MutableFrameFormat $r3;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.core.Frame: boolean mReadOnly> = 0;

        r0.<android.filterfw.core.Frame: boolean mReusable> = 0;

        r0.<android.filterfw.core.Frame: int mRefCount> = 1;

        r0.<android.filterfw.core.Frame: int mBindingType> = 0;

        r0.<android.filterfw.core.Frame: long mBindingId> = 0L;

        r0.<android.filterfw.core.Frame: long mTimestamp> = -2L;

        $r3 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat mFormat> = $r3;

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager> = r2;

        r0.<android.filterfw.core.Frame: int mBindingType> = i0;

        r0.<android.filterfw.core.Frame: long mBindingId> = l1;

        return;
    }

    public android.filterfw.core.FrameFormat getFormat()
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat $r1;

        r0 := @this: android.filterfw.core.Frame;

        $r1 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat mFormat>;

        return $r1;
    }

    public int getCapacity()
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat $r1;
        int $i0;

        r0 := @this: android.filterfw.core.Frame;

        $r1 = virtualinvoke r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r1.<android.filterfw.core.FrameFormat: int getSize()>();

        return $i0;
    }

    public boolean isReadOnly()
    {
        android.filterfw.core.Frame r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.Frame;

        $z0 = r0.<android.filterfw.core.Frame: boolean mReadOnly>;

        return $z0;
    }

    public int getBindingType()
    {
        android.filterfw.core.Frame r0;
        int $i0;

        r0 := @this: android.filterfw.core.Frame;

        $i0 = r0.<android.filterfw.core.Frame: int mBindingType>;

        return $i0;
    }

    public long getBindingId()
    {
        android.filterfw.core.Frame r0;
        long $l0;

        r0 := @this: android.filterfw.core.Frame;

        $l0 = r0.<android.filterfw.core.Frame: long mBindingId>;

        return $l0;
    }

    public void setObjectValue(java.lang.Object)
    {
        android.filterfw.core.Frame r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Bitmap $r2;
        java.nio.ByteBuffer $r3;
        float[] $r4, $r5;
        int[] $r6, $r7;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<android.filterfw.core.Frame: void assertFrameMutable()>();

        $z0 = r1 instanceof int[];

        if $z0 == 0 goto label1;

        $r6 = (int[]) r1;

        $r7 = (int[]) $r6;

        virtualinvoke r0.<android.filterfw.core.Frame: void setInts(int[])>($r7);

        goto label5;

     label1:
        $z1 = r1 instanceof float[];

        if $z1 == 0 goto label2;

        $r4 = (float[]) r1;

        $r5 = (float[]) $r4;

        virtualinvoke r0.<android.filterfw.core.Frame: void setFloats(float[])>($r5);

        goto label5;

     label2:
        $z2 = r1 instanceof java.nio.ByteBuffer;

        if $z2 == 0 goto label3;

        $r3 = (java.nio.ByteBuffer) r1;

        virtualinvoke r0.<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)>($r3);

        goto label5;

     label3:
        $z3 = r1 instanceof android.graphics.Bitmap;

        if $z3 == 0 goto label4;

        $r2 = (android.graphics.Bitmap) r1;

        virtualinvoke r0.<android.filterfw.core.Frame: void setBitmap(android.graphics.Bitmap)>($r2);

        goto label5;

     label4:
        virtualinvoke r0.<android.filterfw.core.Frame: void setGenericObjectValue(java.lang.Object)>(r1);

     label5:
        return;
    }

    public abstract java.lang.Object getObjectValue();

    public abstract void setInts(int[]);

    public abstract int[] getInts();

    public abstract void setFloats(float[]);

    public abstract float[] getFloats();

    public abstract void setData(java.nio.ByteBuffer, int, int);

    public void setData(java.nio.ByteBuffer)
    {
        android.filterfw.core.Frame r0;
        java.nio.ByteBuffer r1;
        int $i0;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r0.<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer,int,int)>(r1, 0, $i0);

        return;
    }

    public void setData(byte[], int, int)
    {
        android.filterfw.core.Frame r0;
        byte[] r1;
        int i0, i1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)>($r2);

        return;
    }

    public abstract java.nio.ByteBuffer getData();

    public abstract void setBitmap(android.graphics.Bitmap);

    public abstract android.graphics.Bitmap getBitmap();

    public void setTimestamp(long)
    {
        android.filterfw.core.Frame r0;
        long l0;

        r0 := @this: android.filterfw.core.Frame;

        l0 := @parameter0: long;

        r0.<android.filterfw.core.Frame: long mTimestamp> = l0;

        return;
    }

    public long getTimestamp()
    {
        android.filterfw.core.Frame r0;
        long $l0;

        r0 := @this: android.filterfw.core.Frame;

        $l0 = r0.<android.filterfw.core.Frame: long mTimestamp>;

        return $l0;
    }

    public void setDataFromFrame(android.filterfw.core.Frame)
    {
        android.filterfw.core.Frame r0, r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: android.filterfw.core.Frame;

        $r2 = virtualinvoke r1.<android.filterfw.core.Frame: java.nio.ByteBuffer getData()>();

        virtualinvoke r0.<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)>($r2);

        return;
    }

    protected boolean requestResize(int[])
    {
        android.filterfw.core.Frame r0;
        int[] r1;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: int[];

        return 0;
    }

    public int getRefCount()
    {
        android.filterfw.core.Frame r0;
        int $i0;

        r0 := @this: android.filterfw.core.Frame;

        $i0 = r0.<android.filterfw.core.Frame: int mRefCount>;

        return $i0;
    }

    public android.filterfw.core.Frame release()
    {
        android.filterfw.core.Frame r0, $r3;
        android.filterfw.core.FrameManager $r1, $r2;

        r0 := @this: android.filterfw.core.Frame;

        $r1 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager>;

        if $r1 == null goto label1;

        $r2 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager>;

        $r3 = virtualinvoke $r2.<android.filterfw.core.FrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>(r0);

        return $r3;

     label1:
        return r0;
    }

    public android.filterfw.core.Frame retain()
    {
        android.filterfw.core.Frame r0, $r3;
        android.filterfw.core.FrameManager $r1, $r2;

        r0 := @this: android.filterfw.core.Frame;

        $r1 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager>;

        if $r1 == null goto label1;

        $r2 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager>;

        $r3 = virtualinvoke $r2.<android.filterfw.core.FrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)>(r0);

        return $r3;

     label1:
        return r0;
    }

    public android.filterfw.core.FrameManager getFrameManager()
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameManager $r1;

        r0 := @this: android.filterfw.core.Frame;

        $r1 = r0.<android.filterfw.core.Frame: android.filterfw.core.FrameManager mFrameManager>;

        return $r1;
    }

    protected void assertFrameMutable()
    {
        android.filterfw.core.Frame r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.Frame;

        $z0 = virtualinvoke r0.<android.filterfw.core.Frame: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to modify read-only frame!");

        throw $r1;

     label1:
        return;
    }

    protected void setReusable(boolean)
    {
        android.filterfw.core.Frame r0;
        boolean z0;

        r0 := @this: android.filterfw.core.Frame;

        z0 := @parameter0: boolean;

        r0.<android.filterfw.core.Frame: boolean mReusable> = z0;

        return;
    }

    protected void setFormat(android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.MutableFrameFormat $r2;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        $r2 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat mFormat> = $r2;

        return;
    }

    protected void setGenericObjectValue(java.lang.Object)
    {
        android.filterfw.core.Frame r0;
        java.lang.Object r1;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set object value of unsupported type: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    protected static android.graphics.Bitmap convertBitmapToRGBA(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        android.graphics.Bitmap$Config $r2, $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r5, $r6;

        r0 := @parameter0: android.graphics.Bitmap;

        $r2 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if $r2 != $r3 goto label1;

        return r0;

     label1:
        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r4, 0);

        if r1 != null goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error converting bitmap to RGBA!");

        throw $r6;

     label2:
        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i2 = $i1 * 4;

        if $i0 == $i2 goto label3;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unsupported row byte count in bitmap!");

        throw $r5;

     label3:
        return r1;
    }

    protected void reset(android.filterfw.core.FrameFormat)
    {
        android.filterfw.core.Frame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.MutableFrameFormat $r2;

        r0 := @this: android.filterfw.core.Frame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        $r2 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat mFormat> = $r2;

        r0.<android.filterfw.core.Frame: boolean mReadOnly> = 0;

        r0.<android.filterfw.core.Frame: int mRefCount> = 1;

        return;
    }

    protected void onFrameStore()
    {
        android.filterfw.core.Frame r0;

        r0 := @this: android.filterfw.core.Frame;

        return;
    }

    protected void onFrameFetch()
    {
        android.filterfw.core.Frame r0;

        r0 := @this: android.filterfw.core.Frame;

        return;
    }

    protected abstract boolean hasNativeAllocation();

    protected abstract void releaseNativeAllocation();

    final int incRefCount()
    {
        android.filterfw.core.Frame r0;
        int $i0, $i1, $i2;

        r0 := @this: android.filterfw.core.Frame;

        $i0 = r0.<android.filterfw.core.Frame: int mRefCount>;

        $i1 = $i0 + 1;

        r0.<android.filterfw.core.Frame: int mRefCount> = $i1;

        $i2 = r0.<android.filterfw.core.Frame: int mRefCount>;

        return $i2;
    }

    final int decRefCount()
    {
        android.filterfw.core.Frame r0;
        int $i0, $i1, $i2;

        r0 := @this: android.filterfw.core.Frame;

        $i0 = r0.<android.filterfw.core.Frame: int mRefCount>;

        $i1 = $i0 - 1;

        r0.<android.filterfw.core.Frame: int mRefCount> = $i1;

        $i2 = r0.<android.filterfw.core.Frame: int mRefCount>;

        return $i2;
    }

    final boolean isReusable()
    {
        android.filterfw.core.Frame r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.Frame;

        $z0 = r0.<android.filterfw.core.Frame: boolean mReusable>;

        return $z0;
    }

    final void markReadOnly()
    {
        android.filterfw.core.Frame r0;

        r0 := @this: android.filterfw.core.Frame;

        r0.<android.filterfw.core.Frame: boolean mReadOnly> = 1;

        return;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.Frame: long TIMESTAMP_UNKNOWN> = -1L;

        <android.filterfw.core.Frame: long TIMESTAMP_NOT_SET> = -2L;

        <android.filterfw.core.Frame: int NO_BINDING> = 0;

        return;
    }
}
