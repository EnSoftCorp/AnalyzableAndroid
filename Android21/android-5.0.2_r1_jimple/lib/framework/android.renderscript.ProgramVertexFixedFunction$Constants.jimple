public class android.renderscript.ProgramVertexFixedFunction$Constants extends java.lang.Object
{
    static final int MODELVIEW_OFFSET;
    static final int PROJECTION_OFFSET;
    static final int TEXTURE_OFFSET;
    android.renderscript.Matrix4f mModel;
    android.renderscript.Matrix4f mProjection;
    android.renderscript.Matrix4f mTexture;
    android.renderscript.Allocation mAlloc;
    private android.renderscript.FieldPacker mIOBuffer;

    android.renderscript.Allocation getAllocation()
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.Allocation $r1;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        $r1 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation mAlloc>;

        return $r1;
    }

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.RenderScript r1;
        android.renderscript.Type r2;
        int i0, $i1, $i2;
        android.renderscript.Allocation $r3;
        android.renderscript.Element $r4;
        android.renderscript.FieldPacker $r5;
        android.renderscript.Matrix4f $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.Type getConstantInputType(android.renderscript.RenderScript)>(r1);

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>(r1, r2);

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation mAlloc> = $r3;

        $r4 = virtualinvoke r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i1 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i2 = virtualinvoke r2.<android.renderscript.Type: int getCount()>();

        i0 = $i1 * $i2;

        $r5 = new android.renderscript.FieldPacker;

        specialinvoke $r5.<android.renderscript.FieldPacker: void <init>(int)>(i0);

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer> = $r5;

        $r6 = new android.renderscript.Matrix4f;

        specialinvoke $r6.<android.renderscript.Matrix4f: void <init>()>();

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mModel> = $r6;

        $r7 = new android.renderscript.Matrix4f;

        specialinvoke $r7.<android.renderscript.Matrix4f: void <init>()>();

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mProjection> = $r7;

        $r8 = new android.renderscript.Matrix4f;

        specialinvoke $r8.<android.renderscript.Matrix4f: void <init>()>();

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mTexture> = $r8;

        $r9 = new android.renderscript.Matrix4f;

        specialinvoke $r9.<android.renderscript.Matrix4f: void <init>()>();

        virtualinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void setModelview(android.renderscript.Matrix4f)>($r9);

        $r10 = new android.renderscript.Matrix4f;

        specialinvoke $r10.<android.renderscript.Matrix4f: void <init>()>();

        virtualinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void setProjection(android.renderscript.Matrix4f)>($r10);

        $r11 = new android.renderscript.Matrix4f;

        specialinvoke $r11.<android.renderscript.Matrix4f: void <init>()>();

        virtualinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void setTexture(android.renderscript.Matrix4f)>($r11);

        return;
    }

    public void destroy()
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.Allocation $r1;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        $r1 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation mAlloc>;

        virtualinvoke $r1.<android.renderscript.Allocation: void destroy()>();

        r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation mAlloc> = null;

        return;
    }

    private void addToBuffer(int, android.renderscript.Matrix4f)
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        int i0, i1, $i2;
        android.renderscript.Matrix4f r1;
        android.renderscript.FieldPacker $r2, $r3, $r4, $r6, $r9;
        byte[] $r5;
        android.renderscript.Allocation $r7;
        float[] $r8;
        float $f0;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Matrix4f;

        $r2 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer>;

        virtualinvoke $r2.<android.renderscript.FieldPacker: void reset(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= 16 goto label2;

        $r9 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer>;

        $r8 = r1.<android.renderscript.Matrix4f: float[] mMat>;

        $f0 = $r8[i1];

        virtualinvoke $r9.<android.renderscript.FieldPacker: void addF32(float)>($f0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer>;

        $r3 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer>;

        $r5 = virtualinvoke $r3.<android.renderscript.FieldPacker: byte[] getData()>();

        $i2 = lengthof $r5;

        virtualinvoke $r4.<android.renderscript.FieldPacker: void reset(int)>($i2);

        $r7 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation mAlloc>;

        $r6 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.FieldPacker mIOBuffer>;

        virtualinvoke $r7.<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>(0, $r6);

        return;
    }

    public void setModelview(android.renderscript.Matrix4f)
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.Matrix4f r1, $r2;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        r1 := @parameter0: android.renderscript.Matrix4f;

        $r2 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mModel>;

        virtualinvoke $r2.<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>(r1);

        specialinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void addToBuffer(int,android.renderscript.Matrix4f)>(0, r1);

        return;
    }

    public void setProjection(android.renderscript.Matrix4f)
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.Matrix4f r1, $r2;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        r1 := @parameter0: android.renderscript.Matrix4f;

        $r2 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mProjection>;

        virtualinvoke $r2.<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>(r1);

        specialinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void addToBuffer(int,android.renderscript.Matrix4f)>(64, r1);

        return;
    }

    public void setTexture(android.renderscript.Matrix4f)
    {
        android.renderscript.ProgramVertexFixedFunction$Constants r0;
        android.renderscript.Matrix4f r1, $r2;

        r0 := @this: android.renderscript.ProgramVertexFixedFunction$Constants;

        r1 := @parameter0: android.renderscript.Matrix4f;

        $r2 = r0.<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Matrix4f mTexture>;

        virtualinvoke $r2.<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>(r1);

        specialinvoke r0.<android.renderscript.ProgramVertexFixedFunction$Constants: void addToBuffer(int,android.renderscript.Matrix4f)>(128, r1);

        return;
    }

    public static void <clinit>()
    {
        <android.renderscript.ProgramVertexFixedFunction$Constants: int TEXTURE_OFFSET> = 32;

        <android.renderscript.ProgramVertexFixedFunction$Constants: int PROJECTION_OFFSET> = 16;

        <android.renderscript.ProgramVertexFixedFunction$Constants: int MODELVIEW_OFFSET> = 0;

        return;
    }
}
