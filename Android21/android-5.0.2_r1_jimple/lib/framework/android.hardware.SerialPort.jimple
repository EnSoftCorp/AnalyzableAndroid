public class android.hardware.SerialPort extends java.lang.Object
{
    private static final java.lang.String TAG;
    private int mNativeContext;
    private final java.lang.String mName;
    private android.os.ParcelFileDescriptor mFileDescriptor;

    public void <init>(java.lang.String)
    {
        android.hardware.SerialPort r0;
        java.lang.String r1;

        r0 := @this: android.hardware.SerialPort;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.SerialPort: java.lang.String mName> = r1;

        return;
    }

    public void open(android.os.ParcelFileDescriptor, int) throws java.io.IOException
    {
        android.hardware.SerialPort r0;
        android.os.ParcelFileDescriptor r1;
        int i0;
        java.io.FileDescriptor $r2;

        r0 := @this: android.hardware.SerialPort;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r0.<android.hardware.SerialPort: void native_open(java.io.FileDescriptor,int)>($r2, i0);

        r0.<android.hardware.SerialPort: android.os.ParcelFileDescriptor mFileDescriptor> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        android.hardware.SerialPort r0;
        android.os.ParcelFileDescriptor $r1, $r2;

        r0 := @this: android.hardware.SerialPort;

        $r1 = r0.<android.hardware.SerialPort: android.os.ParcelFileDescriptor mFileDescriptor>;

        if $r1 == null goto label1;

        $r2 = r0.<android.hardware.SerialPort: android.os.ParcelFileDescriptor mFileDescriptor>;

        virtualinvoke $r2.<android.os.ParcelFileDescriptor: void close()>();

        r0.<android.hardware.SerialPort: android.os.ParcelFileDescriptor mFileDescriptor> = null;

     label1:
        specialinvoke r0.<android.hardware.SerialPort: void native_close()>();

        return;
    }

    public java.lang.String getName()
    {
        android.hardware.SerialPort r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.SerialPort;

        $r1 = r0.<android.hardware.SerialPort: java.lang.String mName>;

        return $r1;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        android.hardware.SerialPort r0;
        java.nio.ByteBuffer r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.hardware.SerialPort;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i3 = specialinvoke r0.<android.hardware.SerialPort: int native_read_direct(java.nio.ByteBuffer,int)>(r1, $i2);

        return $i3;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i1 = specialinvoke r0.<android.hardware.SerialPort: int native_read_array(byte[],int)>($r3, $i0);

        return $i1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer is not direct and has no array");

        throw $r2;
    }

    public void write(java.nio.ByteBuffer, int) throws java.io.IOException
    {
        android.hardware.SerialPort r0;
        java.nio.ByteBuffer r1;
        int i0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3;

        r0 := @this: android.hardware.SerialPort;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.hardware.SerialPort: void native_write_direct(java.nio.ByteBuffer,int)>(r1, i0);

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke r0.<android.hardware.SerialPort: void native_write_array(byte[],int)>($r3, i0);

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer is not direct and has no array");

        throw $r2;

     label3:
        return;
    }

    public void sendBreak()
    {
        android.hardware.SerialPort r0;

        r0 := @this: android.hardware.SerialPort;

        specialinvoke r0.<android.hardware.SerialPort: void native_send_break()>();

        return;
    }

    private native void native_open(java.io.FileDescriptor, int) throws java.io.IOException;

    private native void native_close();

    private native int native_read_array(byte[], int) throws java.io.IOException;

    private native int native_read_direct(java.nio.ByteBuffer, int) throws java.io.IOException;

    private native void native_write_array(byte[], int) throws java.io.IOException;

    private native void native_write_direct(java.nio.ByteBuffer, int) throws java.io.IOException;

    private native void native_send_break();

    public static void <clinit>()
    {
        <android.hardware.SerialPort: java.lang.String TAG> = "SerialPort";

        return;
    }
}
