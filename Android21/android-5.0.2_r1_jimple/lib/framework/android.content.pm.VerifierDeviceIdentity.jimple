public class android.content.pm.VerifierDeviceIdentity extends java.lang.Object implements android.os.Parcelable
{
    private static final int LONG_SIZE;
    private static final int GROUP_SIZE;
    private final long mIdentity;
    private final java.lang.String mIdentityString;
    private static final char[] ENCODE;
    private static final char SEPARATOR;
    public static final android.os.Parcelable$Creator CREATOR;

    public void <init>(long)
    {
        android.content.pm.VerifierDeviceIdentity r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.pm.VerifierDeviceIdentity: long mIdentity> = l0;

        $r1 = staticinvoke <android.content.pm.VerifierDeviceIdentity: java.lang.String encodeBase32(long)>(l0);

        r0.<android.content.pm.VerifierDeviceIdentity: java.lang.String mIdentityString> = $r1;

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.content.pm.VerifierDeviceIdentity r0;
        android.os.Parcel r1;
        long l0;
        java.lang.String $r2;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        l0 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.content.pm.VerifierDeviceIdentity: long mIdentity> = l0;

        $r2 = staticinvoke <android.content.pm.VerifierDeviceIdentity: java.lang.String encodeBase32(long)>(l0);

        r0.<android.content.pm.VerifierDeviceIdentity: java.lang.String mIdentityString> = $r2;

        return;
    }

    public static android.content.pm.VerifierDeviceIdentity generate()
    {
        java.security.SecureRandom r0, $r1;
        android.content.pm.VerifierDeviceIdentity $r2;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        r0 = $r1;

        $r2 = staticinvoke <android.content.pm.VerifierDeviceIdentity: android.content.pm.VerifierDeviceIdentity generate(java.util.Random)>(r0);

        return $r2;
    }

    static android.content.pm.VerifierDeviceIdentity generate(java.util.Random)
    {
        java.util.Random r0;
        long l0;
        android.content.pm.VerifierDeviceIdentity $r1;

        r0 := @parameter0: java.util.Random;

        l0 = virtualinvoke r0.<java.util.Random: long nextLong()>();

        $r1 = new android.content.pm.VerifierDeviceIdentity;

        specialinvoke $r1.<android.content.pm.VerifierDeviceIdentity: void <init>(long)>(l0);

        return $r1;
    }

    private static final java.lang.String encodeBase32(long)
    {
        long l0, $l4;
        char[] r0, r1;
        int i1, i2, i3, $i6;
        java.lang.String $r2;
        char $c5;

        l0 := @parameter0: long;

        r0 = <android.content.pm.VerifierDeviceIdentity: char[] ENCODE>;

        r1 = newarray (char)[16];

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= 13 goto label3;

        if i2 <= 0 goto label2;

        $i6 = i2 % 4;

        if $i6 != 1 goto label2;

        i1 = i1 + -1;

        r1[i1] = 45;

     label2:
        $l4 = l0 & 31L;

        i3 = (int) $l4;

        l0 = l0 >>> 5;

        i1 = i1 + -1;

        $c5 = r0[i3];

        r1[i1] = $c5;

        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r1);

        return $r2;
    }

    private static final long decodeBase32(byte[]) throws java.lang.IllegalArgumentException
    {
        byte[] r0;
        long l0, $l6, $l7;
        int i1, i2, i3, i5, $i8;
        byte b4;
        java.lang.IllegalArgumentException $r1, $r2, $r7, $r8;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: byte[];

        l0 = 0L;

        i1 = 0;

        i2 = lengthof r0;

        i3 = 0;

     label01:
        if i3 >= i2 goto label11;

        b4 = r0[i3];

        if 65 > b4 goto label02;

        if b4 > 90 goto label02;

        i5 = b4 - 65;

        goto label08;

     label02:
        if 50 > b4 goto label03;

        if b4 > 55 goto label03;

        i5 = b4 - 24;

        goto label08;

     label03:
        if b4 != 45 goto label04;

        goto label10;

     label04:
        if 97 > b4 goto label05;

        if b4 > 122 goto label05;

        i5 = b4 - 97;

        goto label08;

     label05:
        if b4 != 48 goto label06;

        i5 = 14;

        goto label08;

     label06:
        if b4 != 49 goto label07;

        i5 = 8;

        goto label08;

     label07:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("base base-32 character: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label08:
        $l7 = l0 << 5;

        $l6 = (long) i5;

        l0 = $l7 | $l6;

        i1 = i1 + 1;

        if i1 != 1 goto label09;

        $i8 = i5 & 15;

        if $i8 == i5 goto label10;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal start character; will overflow");

        throw $r8;

     label09:
        if i1 <= 13 goto label10;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("too long; should have 13 characters");

        throw $r7;

     label10:
        i3 = i3 + 1;

        goto label01;

     label11:
        if i1 == 13 goto label12;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("too short; should have 13 characters");

        throw $r1;

     label12:
        return l0;
    }

    public int hashCode()
    {
        android.content.pm.VerifierDeviceIdentity r0;
        long $l0;
        int $i1;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        $l0 = r0.<android.content.pm.VerifierDeviceIdentity: long mIdentity>;

        $i1 = (int) $l0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        android.content.pm.VerifierDeviceIdentity r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.content.pm.VerifierDeviceIdentity;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.content.pm.VerifierDeviceIdentity) r1;

        $l1 = r0.<android.content.pm.VerifierDeviceIdentity: long mIdentity>;

        $l0 = r2.<android.content.pm.VerifierDeviceIdentity: long mIdentity>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.String toString()
    {
        android.content.pm.VerifierDeviceIdentity r0;
        java.lang.String $r1;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        $r1 = r0.<android.content.pm.VerifierDeviceIdentity: java.lang.String mIdentityString>;

        return $r1;
    }

    public static android.content.pm.VerifierDeviceIdentity parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        byte[] r1;
        android.content.pm.VerifierDeviceIdentity $r3;
        long $l0;
        java.io.UnsupportedEncodingException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad base-32 characters in input");

        throw $r5;

     label4:
        $r3 = new android.content.pm.VerifierDeviceIdentity;

        $l0 = staticinvoke <android.content.pm.VerifierDeviceIdentity: long decodeBase32(byte[])>(r1);

        specialinvoke $r3.<android.content.pm.VerifierDeviceIdentity: void <init>(long)>($l0);

        return $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public int describeContents()
    {
        android.content.pm.VerifierDeviceIdentity r0;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.content.pm.VerifierDeviceIdentity r0;
        android.os.Parcel r1;
        int i0;
        long $l1;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $l1 = r0.<android.content.pm.VerifierDeviceIdentity: long mIdentity>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        return;
    }

    void <init>(android.os.Parcel, android.content.pm.VerifierDeviceIdentity$1)
    {
        android.content.pm.VerifierDeviceIdentity r0;
        android.os.Parcel r1;
        android.content.pm.VerifierDeviceIdentity$1 r2;

        r0 := @this: android.content.pm.VerifierDeviceIdentity;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.content.pm.VerifierDeviceIdentity$1;

        specialinvoke r0.<android.content.pm.VerifierDeviceIdentity: void <init>(android.os.Parcel)>(r1);

        return;
    }

    static void <clinit>()
    {
        char[] $r0;
        android.content.pm.VerifierDeviceIdentity$1 $r1;

        <android.content.pm.VerifierDeviceIdentity: char SEPARATOR> = 45;

        <android.content.pm.VerifierDeviceIdentity: int GROUP_SIZE> = 4;

        <android.content.pm.VerifierDeviceIdentity: int LONG_SIZE> = 13;

        $r0 = newarray (char)[32];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 50;

        $r0[27] = 51;

        $r0[28] = 52;

        $r0[29] = 53;

        $r0[30] = 54;

        $r0[31] = 55;

        <android.content.pm.VerifierDeviceIdentity: char[] ENCODE> = $r0;

        $r1 = new android.content.pm.VerifierDeviceIdentity$1;

        specialinvoke $r1.<android.content.pm.VerifierDeviceIdentity$1: void <init>()>();

        <android.content.pm.VerifierDeviceIdentity: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }
}
