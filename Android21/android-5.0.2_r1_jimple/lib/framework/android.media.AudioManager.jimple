public class android.media.AudioManager extends java.lang.Object
{
    private final android.content.Context mContext;
    private long mVolumeKeyUpTime;
    private final boolean mUseMasterVolume;
    private final boolean mUseVolumeKeySounds;
    private final boolean mUseFixedVolume;
    private final android.os.Binder mToken;
    private static java.lang.String TAG;
    android.media.AudioPortEventHandler mAudioPortEventHandler;
    public static final java.lang.String ACTION_AUDIO_BECOMING_NOISY;
    public static final java.lang.String RINGER_MODE_CHANGED_ACTION;
    public static final java.lang.String EXTRA_RINGER_MODE;
    public static final java.lang.String VIBRATE_SETTING_CHANGED_ACTION;
    public static final java.lang.String VOLUME_CHANGED_ACTION;
    public static final java.lang.String MASTER_VOLUME_CHANGED_ACTION;
    public static final java.lang.String MASTER_MUTE_CHANGED_ACTION;
    public static final java.lang.String EXTRA_VIBRATE_SETTING;
    public static final java.lang.String EXTRA_VIBRATE_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_TYPE;
    public static final java.lang.String EXTRA_VOLUME_STREAM_VALUE;
    public static final java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE;
    public static final java.lang.String EXTRA_MASTER_VOLUME_VALUE;
    public static final java.lang.String EXTRA_PREV_MASTER_VOLUME_VALUE;
    public static final java.lang.String EXTRA_MASTER_VOLUME_MUTED;
    public static final java.lang.String ACTION_HEADSET_PLUG;
    public static final java.lang.String ACTION_HDMI_AUDIO_PLUG;
    public static final java.lang.String EXTRA_AUDIO_PLUG_STATE;
    public static final java.lang.String EXTRA_MAX_CHANNEL_COUNT;
    public static final java.lang.String EXTRA_ENCODINGS;
    public static final java.lang.String ACTION_ANALOG_AUDIO_DOCK_PLUG;
    public static final java.lang.String ACTION_DIGITAL_AUDIO_DOCK_PLUG;
    public static final java.lang.String ACTION_USB_AUDIO_ACCESSORY_PLUG;
    public static final java.lang.String ACTION_USB_AUDIO_DEVICE_PLUG;
    public static final int STREAM_VOICE_CALL;
    public static final int STREAM_SYSTEM;
    public static final int STREAM_RING;
    public static final int STREAM_MUSIC;
    public static final int STREAM_ALARM;
    public static final int STREAM_NOTIFICATION;
    public static final int STREAM_BLUETOOTH_SCO;
    public static final int STREAM_SYSTEM_ENFORCED;
    public static final int STREAM_DTMF;
    public static final int STREAM_TTS;
    public static final int NUM_STREAMS;
    public static final int[] DEFAULT_STREAM_VOLUME;
    public static final int ADJUST_RAISE;
    public static final int ADJUST_LOWER;
    public static final int ADJUST_SAME;
    public static final int FLAG_SHOW_UI;
    public static final int FLAG_ALLOW_RINGER_MODES;
    public static final int FLAG_PLAY_SOUND;
    public static final int FLAG_REMOVE_SOUND_AND_VIBRATE;
    public static final int FLAG_VIBRATE;
    public static final int FLAG_FIXED_VOLUME;
    public static final int FLAG_BLUETOOTH_ABS_VOLUME;
    public static final int FLAG_SHOW_SILENT_HINT;
    public static final int FLAG_HDMI_SYSTEM_AUDIO_VOLUME;
    public static final int FLAG_ACTIVE_MEDIA_ONLY;
    public static final int FLAG_SHOW_UI_WARNINGS;
    public static final int RINGER_MODE_SILENT;
    public static final int RINGER_MODE_VIBRATE;
    public static final int RINGER_MODE_NORMAL;
    private static final int RINGER_MODE_MAX;
    public static final int VIBRATE_TYPE_RINGER;
    public static final int VIBRATE_TYPE_NOTIFICATION;
    public static final int VIBRATE_SETTING_OFF;
    public static final int VIBRATE_SETTING_ON;
    public static final int VIBRATE_SETTING_ONLY_SILENT;
    public static final int USE_DEFAULT_STREAM_TYPE;
    private static android.media.IAudioService sService;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED;
    public static final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED;
    public static final java.lang.String EXTRA_SCO_AUDIO_STATE;
    public static final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE;
    public static final int SCO_AUDIO_STATE_DISCONNECTED;
    public static final int SCO_AUDIO_STATE_CONNECTED;
    public static final int SCO_AUDIO_STATE_CONNECTING;
    public static final int SCO_AUDIO_STATE_ERROR;
    public static final int MODE_INVALID;
    public static final int MODE_CURRENT;
    public static final int MODE_NORMAL;
    public static final int MODE_RINGTONE;
    public static final int MODE_IN_CALL;
    public static final int MODE_IN_COMMUNICATION;
    public static final int ROUTE_EARPIECE;
    public static final int ROUTE_SPEAKER;
    public static final int ROUTE_BLUETOOTH;
    public static final int ROUTE_BLUETOOTH_SCO;
    public static final int ROUTE_HEADSET;
    public static final int ROUTE_BLUETOOTH_A2DP;
    public static final int ROUTE_ALL;
    public static final int AUDIO_SESSION_ID_GENERATE;
    public static final int FX_KEY_CLICK;
    public static final int FX_FOCUS_NAVIGATION_UP;
    public static final int FX_FOCUS_NAVIGATION_DOWN;
    public static final int FX_FOCUS_NAVIGATION_LEFT;
    public static final int FX_FOCUS_NAVIGATION_RIGHT;
    public static final int FX_KEYPRESS_STANDARD;
    public static final int FX_KEYPRESS_SPACEBAR;
    public static final int FX_KEYPRESS_DELETE;
    public static final int FX_KEYPRESS_RETURN;
    public static final int FX_KEYPRESS_INVALID;
    public static final int NUM_SOUND_EFFECTS;
    public static final int AUDIOFOCUS_NONE;
    public static final int AUDIOFOCUS_GAIN;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
    public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE;
    public static final int AUDIOFOCUS_LOSS;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT;
    public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;
    private final java.util.HashMap mAudioFocusIdListenerMap;
    private final java.lang.Object mFocusListenerLock;
    private final android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate;
    private final android.media.IAudioFocusDispatcher mAudioFocusDispatcher;
    public static final int AUDIOFOCUS_REQUEST_FAILED;
    public static final int AUDIOFOCUS_REQUEST_GRANTED;
    private final android.os.IBinder mICallBack;
    public static final int DEVICE_NONE;
    public static final int DEVICE_OUT_EARPIECE;
    public static final int DEVICE_OUT_SPEAKER;
    public static final int DEVICE_OUT_WIRED_HEADSET;
    public static final int DEVICE_OUT_WIRED_HEADPHONE;
    public static final int DEVICE_OUT_BLUETOOTH_SCO;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_HEADSET;
    public static final int DEVICE_OUT_BLUETOOTH_SCO_CARKIT;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES;
    public static final int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER;
    public static final int DEVICE_OUT_AUX_DIGITAL;
    public static final int DEVICE_OUT_HDMI;
    public static final int DEVICE_OUT_ANLG_DOCK_HEADSET;
    public static final int DEVICE_OUT_DGTL_DOCK_HEADSET;
    public static final int DEVICE_OUT_USB_ACCESSORY;
    public static final int DEVICE_OUT_USB_DEVICE;
    public static final int DEVICE_OUT_REMOTE_SUBMIX;
    public static final int DEVICE_OUT_TELEPHONY_TX;
    public static final int DEVICE_OUT_LINE;
    public static final int DEVICE_OUT_HDMI_ARC;
    public static final int DEVICE_OUT_SPDIF;
    public static final int DEVICE_OUT_FM;
    public static final int DEVICE_OUT_DEFAULT;
    public static final int DEVICE_IN_BUILTIN_MIC;
    public static final int DEVICE_IN_BLUETOOTH_SCO_HEADSET;
    public static final int DEVICE_IN_WIRED_HEADSET;
    public static final int DEVICE_IN_HDMI;
    public static final int DEVICE_IN_TELEPHONY_RX;
    public static final int DEVICE_IN_BACK_MIC;
    public static final int DEVICE_IN_ANLG_DOCK_HEADSET;
    public static final int DEVICE_IN_DGTL_DOCK_HEADSET;
    public static final int DEVICE_IN_USB_ACCESSORY;
    public static final int DEVICE_IN_USB_DEVICE;
    public static final int DEVICE_IN_FM_TUNER;
    public static final int DEVICE_IN_TV_TUNER;
    public static final int DEVICE_IN_LINE;
    public static final int DEVICE_IN_SPDIF;
    public static final int DEVICE_IN_LOOPBACK;
    public static final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE;
    public static final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER;
    public static final int SUCCESS;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_INVALID_OPERATION;
    public static final int ERROR_PERMISSION_DENIED;
    public static final int ERROR_NO_INIT;
    public static final int ERROR_DEAD_OBJECT;
    static final int AUDIOPORT_GENERATION_INIT;
    java.lang.Integer mAudioPortGeneration;
    java.util.ArrayList mAudioPortsCached;
    java.util.ArrayList mAudioPatchesCached;

    public void <init>(android.content.Context)
    {
        android.media.AudioManager r0;
        android.content.Context r1, $r11, $r13, $r17;
        android.os.Binder $r2, $r7;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        android.media.AudioManager$FocusEventHandlerDelegate $r5;
        android.media.AudioManager$1 $r6;
        java.lang.Integer $r8;
        java.util.ArrayList $r9, $r10;
        android.content.res.Resources $r12, $r14, $r16;
        boolean $z0, $z1, $z2;
        android.media.AudioPortEventHandler $r15;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.Binder mToken> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock> = $r4;

        $r5 = new android.media.AudioManager$FocusEventHandlerDelegate;

        specialinvoke $r5.<android.media.AudioManager$FocusEventHandlerDelegate: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate> = $r5;

        $r6 = new android.media.AudioManager$1;

        specialinvoke $r6.<android.media.AudioManager$1: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher> = $r6;

        $r7 = new android.os.Binder;

        specialinvoke $r7.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioManager: android.os.IBinder mICallBack> = $r7;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(0);

        r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.ArrayList mAudioPortsCached> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioManager: java.util.ArrayList mAudioPatchesCached> = $r10;

        r0.<android.media.AudioManager: android.content.Context mContext> = r1;

        $r11 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r12.<android.content.res.Resources: boolean getBoolean(int)>(17956880);

        r0.<android.media.AudioManager: boolean mUseMasterVolume> = $z0;

        $r13 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r14.<android.content.res.Resources: boolean getBoolean(int)>(17956881);

        r0.<android.media.AudioManager: boolean mUseVolumeKeySounds> = $z1;

        $r15 = new android.media.AudioPortEventHandler;

        specialinvoke $r15.<android.media.AudioPortEventHandler: void <init>(android.media.AudioManager)>(r0);

        r0.<android.media.AudioManager: android.media.AudioPortEventHandler mAudioPortEventHandler> = $r15;

        $r17 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r16.<android.content.res.Resources: boolean getBoolean(int)>(17956968);

        r0.<android.media.AudioManager: boolean mUseFixedVolume> = $z2;

        return;
    }

    private static android.media.IAudioService getService()
    {
        android.os.IBinder r0;
        android.media.IAudioService $r1, $r2, $r3, $r4;

        $r1 = <android.media.AudioManager: android.media.IAudioService sService>;

        if $r1 == null goto label1;

        $r4 = <android.media.AudioManager: android.media.IAudioService sService>;

        return $r4;

     label1:
        r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        $r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>(r0);

        <android.media.AudioManager: android.media.IAudioService sService> = $r2;

        $r3 = <android.media.AudioManager: android.media.IAudioService sService>;

        return $r3;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        android.media.session.MediaSessionLegacyHelper r2;
        android.content.Context $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r2.<android.media.session.MediaSessionLegacyHelper: void sendMediaButtonEvent(android.view.KeyEvent,boolean)>(r1, 0);

        return;
    }

    public void preDispatchKeyEvent(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i1;
        long $l2, $l3, $l4;
        byte $b5;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        if i1 == 25 goto label2;

        if i1 == 24 goto label2;

        if i1 == 164 goto label2;

        $l2 = r0.<android.media.AudioManager: long mVolumeKeyUpTime>;

        $l3 = $l2 + 300L;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 <= 0 goto label2;

        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>(0, 8);

        goto label2;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, i0, 8);

     label2:
        return;
    }

    public void handleKeyDown(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i1, $i3;
        byte b2, $b4, $b5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch(i1)
        {
            case 24: goto label01;
            case 25: goto label01;
            case 164: goto label07;
            default: goto label10;
        };

     label01:
        b2 = 17;

        $z3 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z3 == 0 goto label04;

        if i1 != 24 goto label02;

        $b5 = 1;

        goto label03;

     label02:
        $b5 = -1;

     label03:
        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>($b5, b2);

        goto label10;

     label04:
        if i1 != 24 goto label05;

        $b4 = 1;

        goto label06;

     label05:
        $b4 = -1;

     label06:
        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>($b4, i0, b2);

        goto label10;

     label07:
        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label10;

        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r0.<android.media.AudioManager: boolean isMasterMute()>();

        if $z1 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        virtualinvoke r0.<android.media.AudioManager: void setMasterMute(boolean)>($z2);

     label10:
        return;
    }

    public void handleKeyUp(android.view.KeyEvent, int)
    {
        android.media.AudioManager r0;
        android.view.KeyEvent r1;
        int i0, i1;
        byte b2;
        boolean $z0, $z1;
        long $l3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch(i1)
        {
            case 24: goto label1;
            case 25: goto label1;
            default: goto label4;
        };

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseVolumeKeySounds>;

        if $z0 == 0 goto label3;

        $z1 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.media.AudioManager: void adjustMasterVolume(int,int)>(0, 4);

        goto label3;

     label2:
        b2 = 4;

        virtualinvoke r0.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, i0, b2);

     label3:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.media.AudioManager: long mVolumeKeyUpTime> = $l3;

     label4:
        return;
    }

    public boolean isVolumeFixed()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = r0.<android.media.AudioManager: boolean mUseFixedVolume>;

        return $z0;
    }

    public void adjustStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i1, i2, $r6);

        goto label3;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r4);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in adjustStreamVolume", r2);

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void adjustVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.media.session.MediaSessionLegacyHelper r2;
        boolean $z0;
        android.content.Context $r3, $r4;
        java.lang.String $r5, $r7;
        android.os.RemoteException $r6, r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $r4 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i1, $r5);

        goto label3;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r2.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>(-2147483648, i0, i1);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in adjustVolume", r8);

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void adjustSuggestedStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.media.session.MediaSessionLegacyHelper r2;
        boolean $z0;
        android.content.Context $r3, $r4;
        java.lang.String $r5, $r7;
        android.os.RemoteException $r6, r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $r4 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i2, $r5);

        goto label3;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r2.<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)>(i1, i0, i2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in adjustSuggestedStreamVolume", r8);

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void adjustMasterVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r5;
        android.content.Context $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void adjustMasterVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Dead object in adjustMasterVolume", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRingerMode()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getRingerMode()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getRingerMode", r2);

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isValidRingerMode(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int getStreamMaxVolume(int)
    {
        android.media.AudioManager r0;
        int i0, $i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getMasterMaxVolume()>();

     label2:
        return $i2;

     label3:
        $i1 = interfaceinvoke r1.<android.media.IAudioService: int getStreamMaxVolume(int)>(i0);

     label4:
        return $i1;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getStreamMaxVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getStreamVolume(int)
    {
        android.media.AudioManager r0;
        int i0, $i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getMasterVolume()>();

     label2:
        return $i2;

     label3:
        $i1 = interfaceinvoke r1.<android.media.IAudioService: int getStreamVolume(int)>(i0);

     label4:
        return $i1;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getStreamVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getLastAudibleStreamVolume(int)
    {
        android.media.AudioManager r0;
        int i0, $i1, $i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleMasterVolume()>();

     label2:
        return $i2;

     label3:
        $i1 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleStreamVolume(int)>(i0);

     label4:
        return $i1;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getLastAudibleStreamVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getMasterStreamType()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterStreamType()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterStreamType", r2);

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRingerMode(int)
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.media.AudioManager: void setRingerMode(int,boolean)>(i0, 1);

        return;
    }

    public void setRingerMode(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0, $z1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.media.AudioManager: boolean isValidRingerMode(int)>(i0);

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r1.<android.media.IAudioService: void setRingerMode(int,boolean)>(i0, z0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setRingerMode", r2);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setStreamVolume(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r7;
        boolean $z0;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = r0.<android.media.AudioManager: boolean mUseMasterVolume>;

        if $z0 == 0 goto label2;

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setMasterVolume(int,int,java.lang.String)>(i1, i2, $r6);

        goto label3;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>(i0, i1, i2, $r4);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in setStreamVolume", r2);

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public int getMasterMaxVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterMaxVolume()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterMaxVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMasterVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getMasterVolume()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMasterVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastAudibleMasterVolume()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getLastAudibleMasterVolume()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getLastAudibleMasterVolume", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterVolume(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r5;
        android.content.Context $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setMasterVolume(int,int,java.lang.String)>(i0, i1, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Dead object in setMasterVolume", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamSolo(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setStreamSolo(int,boolean,android.os.IBinder)>(i0, z0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setStreamSolo", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamMute(int, boolean)
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setStreamMute(int,boolean,android.os.IBinder)>(i0, z0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setStreamMute", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamMute(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isStreamMute(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isStreamMute", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterMute(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.media.AudioManager: void setMasterMute(boolean,int)>(z0, 1);

        return;
    }

    public void setMasterMute(boolean, int)
    {
        android.media.AudioManager r0;
        boolean z0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        java.lang.String $r4, $r7;
        android.os.IBinder $r5;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r5 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,android.os.IBinder)>(z0, i0, $r4, $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in setMasterMute", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMasterMute()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isMasterMute()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isMasterMute", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceVolumeControlStream(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void forceVolumeControlStream(int,android.os.IBinder)>(i0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in forceVolumeControlStream", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldVibrate(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean shouldVibrate(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in shouldVibrate", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getVibrateSetting(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i1 = interfaceinvoke r1.<android.media.IAudioService: int getVibrateSetting(int)>(i0);

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getVibrateSetting", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVibrateSetting(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setVibrateSetting(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setVibrateSetting", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSpeakerphoneOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setSpeakerphoneOn(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setSpeakerphoneOn", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSpeakerphoneOn()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isSpeakerphoneOn()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isSpeakerphoneOn", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBluetoothScoAvailableOffCall()
    {
        android.media.AudioManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956927);

        return $z0;
    }

    public void startBluetoothSco()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        android.os.IBinder $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        java.lang.String $r7;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        interfaceinvoke r1.<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)>($r4, $i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in startBluetoothSco", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBluetoothScoVirtualCall()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in startBluetoothScoVirtualCall", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopBluetoothSco()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in stopBluetoothSco", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBluetoothScoOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void setBluetoothScoOn(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in setBluetoothScoOn", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBluetoothScoOn()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $z0 = interfaceinvoke r1.<android.media.IAudioService: boolean isBluetoothScoOn()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isBluetoothScoOn", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBluetoothA2dpOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isBluetoothA2dpOn()
    {
        android.media.AudioManager r0;
        int $i0;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(128, "");

        if $i0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void setWiredHeadsetOn(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isWiredHeadsetOn()
    {
        android.media.AudioManager r0;
        int $i0, $i1;

        r0 := @this: android.media.AudioManager;

        $i0 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(4, "");

        if $i0 != 0 goto label1;

        $i1 = staticinvoke <android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>(8, "");

        if $i1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void setMicrophoneMute(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r5;
        android.content.Context $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String)>(z0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Dead object in setMicrophoneMute", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMicrophoneMute()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isMicrophoneMuted()>();

        return $z0;
    }

    public void setMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r3 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        interfaceinvoke r1.<android.media.IAudioService: void setMode(int,android.os.IBinder)>(i0, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in setMode", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMode()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getMode()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in getMode", r2);

        return -2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRouting(int, int, int)
    {
        android.media.AudioManager r0;
        int i0, i1, i2;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public int getRouting(int)
    {
        android.media.AudioManager r0;
        int i0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        return -1;
    }

    public boolean isMusicActive()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        return $z0;
    }

    public boolean isMusicActiveRemotely()
    {
        android.media.AudioManager r0;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(3, 0);

        return $z0;
    }

    public boolean isAudioFocusExclusive()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $i0 = interfaceinvoke r1.<android.media.IAudioService: int getCurrentAudioFocus()>();

        if $i0 != 4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Dead object in isAudioFocusExclusive()", r2);

        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public int generateAudioSessionId()
    {
        android.media.AudioManager r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.media.AudioManager;

        i0 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i0 <= 0 goto label1;

        return i0;

     label1:
        $r1 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, "Failure to generate a new audio session ID");

        return -1;
    }

    public void setParameter(java.lang.String, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.media.AudioManager: void setParameters(java.lang.String)>($r7);

        return;
    }

    public void setParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getParameters(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.media.AudioSystem: java.lang.String getParameters(java.lang.String)>(r1);

        return $r2;
    }

    public void playSoundEffect(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r4;
        android.os.UserHandle $r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 < 10 goto label2;

     label1:
        return;

     label2:
        $r3 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i1 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<android.media.AudioManager: boolean querySoundEffectsEnabled(int)>($i1);

        if $z0 != 0 goto label3;

        return;

     label3:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label4:
        interfaceinvoke r1.<android.media.IAudioService: void playSoundEffect(int)>(i0);

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in playSoundEffect");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void playSoundEffect(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 < 10 goto label2;

     label1:
        return;

     label2:
        $z0 = specialinvoke r0.<android.media.AudioManager: boolean querySoundEffectsEnabled(int)>(i1);

        if $z0 != 0 goto label3;

        return;

     label3:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label4:
        interfaceinvoke r1.<android.media.IAudioService: void playSoundEffect(int)>(i0);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in playSoundEffect");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void playSoundEffect(int, float)
    {
        android.media.AudioManager r0;
        int i0;
        float f0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        if i0 < 0 goto label1;

        if i0 < 10 goto label2;

     label1:
        return;

     label2:
        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        interfaceinvoke r1.<android.media.IAudioService: void playSoundEffectVolume(int,float)>(i0, f0);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in playSoundEffect");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private boolean querySoundEffectsEnabled(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "sound_effects_enabled", 0, i0);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void loadSoundEffects()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: boolean loadSoundEffects()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in loadSoundEffects");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unloadSoundEffects()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void unloadSoundEffects()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unloadSoundEffects");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.media.AudioManager$OnAudioFocusChangeListener $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.media.AudioManager$OnAudioFocusChangeListener) $r3;

        return $r4;
    }

    private java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.String $r2, $r4, $r6, $r8, $r9, $r10;
        java.lang.StringBuilder $r3, $r5, $r7;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        if r1 != null goto label1;

        $r9 = new java.lang.String;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.String: void <init>(java.lang.String)>($r10);

        return $r9;

     label1:
        $r2 = new java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>($r8);

        return $r2;
    }

    public void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r10;
        java.util.HashMap $r5, $r7;
        java.lang.String $r6, $r8;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        $r4 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r6 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r8 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r1);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.HashMap $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        $r4 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>;

        $r6 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        int i0, i1, i2;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r11;
        java.lang.String $r4, $r7, $r9, $r13, $r14;
        android.os.IBinder $r5;
        android.media.IAudioFocusDispatcher $r6;
        android.content.Context $r8;
        java.lang.StringBuilder $r10, $r12, $r15;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = 0;

        if i1 < 1 goto label1;

        if i1 <= 4 goto label2;

     label1:
        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r4, "Invalid duration hint, audio focus request denied");

        return i2;

     label2:
        virtualinvoke r0.<android.media.AudioManager: void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label3:
        $r5 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r6 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r7 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        $r8 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getOpPackageName()>();

        i2 = interfaceinvoke r2.<android.media.IAudioService: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>(i0, i1, $r5, $r6, $r7, $r9);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        $r13 = <android.media.AudioManager: java.lang.String TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call requestAudioFocus() on AudioService due to ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r13, $r14);

     label6:
        return i2;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void requestAudioFocusForCall(int, int)
    {
        android.media.AudioManager r0;
        int i0, i1;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        android.os.IBinder $r4;
        java.lang.String $r5, $r8, $r10;
        java.lang.StringBuilder $r7, $r9, $r11;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.os.IBinder mICallBack>;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<android.media.IAudioService: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>(i0, i1, $r4, null, "AudioFocus_For_Phone_Ring_And_Calls", $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call requestAudioFocusForCall() on AudioService due to ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void abandonAudioFocusForCall()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>(null, "AudioFocus_For_Phone_Ring_And_Calls");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call abandonAudioFocusForCall() on AudioService due to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioFocusChangeListener r1;
        int i0;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r6;
        android.media.IAudioFocusDispatcher $r4;
        java.lang.String $r5, $r8, $r11;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioFocusChangeListener;

        i0 = 0;

        virtualinvoke r0.<android.media.AudioManager: void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        $r4 = r0.<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>;

        $r5 = specialinvoke r0.<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>(r1);

        i0 = interfaceinvoke r2.<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>($r4, $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t call abandonAudioFocus() on AudioService due to ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r11);

     label4:
        return i0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.content.Intent r2, $r7;
        android.app.PendingIntent r3;
        java.lang.String $r4, $r6, $r10;
        android.content.Context $r5, $r9;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        $r10 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r10, "registerMediaButtonEventReceiver() error: receiver and context package names don\'t match");

        return;

     label2:
        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        r2 = $r7;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r9 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r9, 0, r2, 0);

        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>(r3, r1);

        return;
    }

    public void registerMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>(r1, null);

        return;
    }

    public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.content.ComponentName r2;
        android.media.session.MediaSessionLegacyHelper r3;
        android.content.Context $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.content.ComponentName;

        if r1 != null goto label1;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Cannot call registerMediaButtonIntent() with a null parameter");

        return;

     label1:
        $r4 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r3 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r4);

        $r5 = r0.<android.media.AudioManager: android.content.Context mContext>;

        virtualinvoke r3.<android.media.session.MediaSessionLegacyHelper: void addMediaButtonListener(android.app.PendingIntent,android.content.ComponentName,android.content.Context)>(r1, r2, $r5);

        return;
    }

    public void unregisterMediaButtonEventReceiver(android.content.ComponentName)
    {
        android.media.AudioManager r0;
        android.content.ComponentName r1;
        android.content.Intent r2, $r4;
        android.app.PendingIntent r3;
        android.content.Context $r6;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        return;

     label1:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_BUTTON");

        r2 = $r4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r6 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r6, 0, r2, 0);

        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r3);

        return;
    }

    public void unregisterMediaButtonEventReceiver(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.AudioManager: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterMediaButtonIntent(android.app.PendingIntent)
    {
        android.media.AudioManager r0;
        android.app.PendingIntent r1;
        android.media.session.MediaSessionLegacyHelper r2;
        android.content.Context $r3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.app.PendingIntent;

        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        r2 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r2.<android.media.session.MediaSessionLegacyHelper: void removeMediaButtonListener(android.app.PendingIntent)>(r1);

        return;
    }

    public void registerRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.app.PendingIntent $r2;
        android.content.Context $r3;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r1.<android.media.RemoteControlClient: void registerWithSession(android.media.session.MediaSessionLegacyHelper)>($r4);

        return;
    }

    public void unregisterRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.AudioManager r0;
        android.media.RemoteControlClient r1;
        android.app.PendingIntent $r2;
        android.content.Context $r3;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteControlClient;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>();

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<android.media.AudioManager: android.content.Context mContext>;

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke r1.<android.media.RemoteControlClient: void unregisterWithSession(android.media.session.MediaSessionLegacyHelper)>($r4);

        return;
    }

    public boolean registerRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return 0;

     label1:
        virtualinvoke r1.<android.media.RemoteController: void startListeningToSessions()>();

        return 1;
    }

    public void unregisterRemoteController(android.media.RemoteController)
    {
        android.media.AudioManager r0;
        android.media.RemoteController r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.RemoteController;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.media.RemoteController: void stopListeningToSessions()>();

        return;
    }

    public void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        virtualinvoke r0.<android.media.AudioManager: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)>(r1, -1, -1);

        return;
    }

    public void registerRemoteControlDisplay(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: boolean registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in registerRemoteControlDisplay ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>(r1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in unregisterRemoteControlDisplay ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in remoteControlDisplayUsesBitmapSize ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay, boolean)
    {
        android.media.AudioManager r0;
        android.media.IRemoteControlDisplay r1;
        boolean z0;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        interfaceinvoke r2.<android.media.IAudioService: void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay,boolean)>(r1, z0);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in remoteControlDisplayWantsPlaybackPositionSync ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.audiopolicy.AudioPolicy r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r7;
        android.media.audiopolicy.AudioPolicyConfig $r4;
        android.os.IBinder $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r8;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy argument");

        throw $r6;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        $r4 = virtualinvoke r1.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig getConfig()>();

        $r5 = virtualinvoke r1.<android.media.audiopolicy.AudioPolicy: android.os.IBinder token()>();

        $z0 = interfaceinvoke r2.<android.media.IAudioService: boolean registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.os.IBinder)>($r4, $r5);

        if $z0 != 0 goto label4;

     label3:
        return -1;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Dead object in registerAudioPolicyAsync()", r3);

        return -1;

     label6:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    public void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioManager r0;
        android.media.audiopolicy.AudioPolicy r1;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r6;
        android.os.IBinder $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r7;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioPolicy argument");

        throw $r5;

     label1:
        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label2:
        $r4 = virtualinvoke r1.<android.media.audiopolicy.AudioPolicy: android.os.IBinder token()>();

        interfaceinvoke r2.<android.media.IAudioService: void unregisterAudioPolicyAsync(android.os.IBinder)>($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Dead object in unregisterAudioPolicyAsync()", r3);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void reloadAudioSettings()
    {
        android.media.AudioManager r0;
        android.media.IAudioService r1;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8;

        r0 := @this: android.media.AudioManager;

        r1 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r1.<android.media.IAudioService: void reloadAudioSettings()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in reloadAudioSettings");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r5;
        boolean z0;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Dead object in avrcpSupportsAbsoluteVolume", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSilentMode()
    {
        android.media.AudioManager r0;
        int i0;
        boolean z0, $z1;

        r0 := @this: android.media.AudioManager;

        i0 = virtualinvoke r0.<android.media.AudioManager: int getRingerMode()>();

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        return z0;
    }

    public static boolean isOutputDevice(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & -2147483648;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isInputDevice(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & -2147483648;

        if $i1 != -2147483648 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getDevicesForStream(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label1;
            default: goto label2;
        };

     label1:
        $i1 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(i0);

        return $i1;

     label2:
        return 0;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String)
    {
        android.media.AudioManager r0;
        int i0, i1;
        java.lang.String r1, $r6, $r9;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

     label1:
        interfaceinvoke r2.<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r6 = <android.media.AudioManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in setWiredDeviceConnectionState ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice, int, int)
    {
        android.media.AudioManager r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1, i4;
        android.media.IAudioService r2;
        byte b2;
        android.os.RemoteException r3, $r6;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        b2 = 0;

     label1:
        i4 = interfaceinvoke r2.<android.media.IAudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int,int)>(r1, i0, i1);

     label2:
        return i4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead object in setBluetoothA2dpDeviceConnectionState ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r11);

     label4:
        return b2;

     label5:
        $r5 := @caughtexception;

     label6:
        return b2;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.media.IRingtonePlayer getRingtonePlayer()
    {
        android.media.AudioManager r0;
        android.media.IAudioService $r2;
        android.media.IRingtonePlayer $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $r3 = interfaceinvoke $r2.<android.media.IAudioService: android.media.IRingtonePlayer getRingtonePlayer()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.lang.String;

        $r2 = "android.media.property.OUTPUT_SAMPLE_RATE";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        i0 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputSamplingRate()>();

        if i0 <= 0 goto label1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;

     label3:
        $r3 = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label6;

        i1 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputFrameCount()>();

        if i1 <= 0 goto label4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        goto label5;

     label4:
        $r4 = null;

     label5:
        return $r4;

     label6:
        return null;
    }

    public int getOutputLatency(int)
    {
        android.media.AudioManager r0;
        int i0, $i1;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.media.AudioSystem: int getOutputLatency(int)>(i0);

        return $i1;
    }

    public void setVolumeController(android.media.IVolumeController)
    {
        android.media.AudioManager r0;
        android.media.IVolumeController r1;
        android.os.RemoteException r2, $r4;
        android.media.IAudioService $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IVolumeController;

     label1:
        $r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r3.<android.media.IAudioService: void setVolumeController(android.media.IVolumeController)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error setting volume controller", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyVolumeControllerVisible(android.media.IVolumeController, boolean)
    {
        android.media.AudioManager r0;
        android.media.IVolumeController r1;
        boolean z0;
        android.os.RemoteException r2, $r4;
        android.media.IAudioService $r3;
        java.lang.String $r5;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.IVolumeController;

        z0 := @parameter1: boolean;

     label1:
        $r3 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r3.<android.media.IAudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error notifying about volume controller visibility", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isStreamAffectedByRingerMode(int)
    {
        android.media.AudioManager r0;
        int i0;
        android.os.RemoteException r1, $r3;
        android.media.IAudioService $r2;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isStreamAffectedByRingerMode(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error calling isStreamAffectedByRingerMode", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void disableSafeMediaVolume()
    {
        android.media.AudioManager r0;
        android.os.RemoteException r1, $r3;
        android.media.IAudioService $r2;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        interfaceinvoke $r2.<android.media.IAudioService: void disableSafeMediaVolume()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error disabling safe media volume", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setHdmiSystemAudioSupported(boolean)
    {
        android.media.AudioManager r0;
        boolean z0;
        android.os.RemoteException r1, $r3;
        android.media.IAudioService $r2;
        int $i0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $i0 = interfaceinvoke $r2.<android.media.IAudioService: int setHdmiSystemAudioSupported(boolean)>(z0);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error setting system audio mode", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isHdmiSystemAudioSupported()
    {
        android.media.AudioManager r0;
        android.os.RemoteException r1, $r3;
        android.media.IAudioService $r2;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: android.media.AudioManager;

     label1:
        $r2 = staticinvoke <android.media.AudioManager: android.media.IAudioService getService()>();

        $z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isHdmiSystemAudioSupported()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.media.AudioManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Error querying system audio mode", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int listAudioPorts(java.util.ArrayList)
    {
        android.media.AudioManager r0;
        java.util.ArrayList r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke r0.<android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList)>(r1, null);

        return $i0;
    }

    public int listAudioDevicePorts(java.util.ArrayList)
    {
        android.media.AudioManager r0;
        java.util.ArrayList r1, r2, $r3;
        int i0, i1, $i2;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.ArrayList;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = $r3;

        i0 = virtualinvoke r0.<android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList)>(r2, null);

        if i0 != 0 goto label3;

        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        i1 = 0;

     label1:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i1 >= $i2 goto label3;

        $r4 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $z0 = $r4 instanceof android.media.AudioDevicePort;

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }

    public int createAudioPatch(android.media.AudioPatch[], android.media.AudioPortConfig[], android.media.AudioPortConfig[])
    {
        android.media.AudioManager r0;
        android.media.AudioPatch[] r1;
        android.media.AudioPortConfig[] r2, r3;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioPatch[];

        r2 := @parameter1: android.media.AudioPortConfig[];

        r3 := @parameter2: android.media.AudioPortConfig[];

        $i0 = staticinvoke <android.media.AudioSystem: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>(r1, r2, r3);

        return $i0;
    }

    public int releaseAudioPatch(android.media.AudioPatch)
    {
        android.media.AudioManager r0;
        android.media.AudioPatch r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioPatch;

        $i0 = staticinvoke <android.media.AudioSystem: int releaseAudioPatch(android.media.AudioPatch)>(r1);

        return $i0;
    }

    public int listAudioPatches(java.util.ArrayList)
    {
        android.media.AudioManager r0;
        java.util.ArrayList r1;
        int $i0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke r0.<android.media.AudioManager: int updateAudioPortCache(java.util.ArrayList,java.util.ArrayList)>(null, r1);

        return $i0;
    }

    public int setAudioPortGain(android.media.AudioPort, android.media.AudioGainConfig)
    {
        android.media.AudioManager r0;
        android.media.AudioPort r1;
        android.media.AudioGainConfig r2;
        android.media.AudioPortConfig r3, r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioPort;

        r2 := @parameter1: android.media.AudioGainConfig;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return -2;

     label2:
        r3 = virtualinvoke r1.<android.media.AudioPort: android.media.AudioPortConfig activeConfig()>();

        $r5 = new android.media.AudioPortConfig;

        $i0 = virtualinvoke r3.<android.media.AudioPortConfig: int samplingRate()>();

        $i1 = virtualinvoke r3.<android.media.AudioPortConfig: int channelMask()>();

        $i2 = virtualinvoke r3.<android.media.AudioPortConfig: int format()>();

        specialinvoke $r5.<android.media.AudioPortConfig: void <init>(android.media.AudioPort,int,int,int,android.media.AudioGainConfig)>(r1, $i0, $i1, $i2, r2);

        r4 = $r5;

        r4.<android.media.AudioPortConfig: int mConfigMask> = 8;

        $i3 = staticinvoke <android.media.AudioSystem: int setAudioPortConfig(android.media.AudioPortConfig)>(r4);

        return $i3;
    }

    public void registerAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioPortUpdateListener r1;
        android.media.AudioPortEventHandler $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioPortUpdateListener;

        $r2 = r0.<android.media.AudioManager: android.media.AudioPortEventHandler mAudioPortEventHandler>;

        virtualinvoke $r2.<android.media.AudioPortEventHandler: void registerListener(android.media.AudioManager$OnAudioPortUpdateListener)>(r1);

        return;
    }

    public void unregisterAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$OnAudioPortUpdateListener r1;
        android.media.AudioPortEventHandler $r2;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioManager$OnAudioPortUpdateListener;

        $r2 = r0.<android.media.AudioManager: android.media.AudioPortEventHandler mAudioPortEventHandler>;

        virtualinvoke $r2.<android.media.AudioPortEventHandler: void unregisterListener(android.media.AudioManager$OnAudioPortUpdateListener)>(r1);

        return;
    }

    int resetAudioPortGeneration()
    {
        android.media.AudioManager r0;
        int i0;
        java.lang.Integer r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;

        r0 := @this: android.media.AudioManager;

        $r3 = r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration>;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration> = $r5;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    int updateAudioPortCache(java.util.ArrayList, java.util.ArrayList)
    {
        android.media.AudioManager r0;
        java.util.ArrayList r1, r2, r6, r7, $r12, $r13, $r14, $r15;
        java.lang.Integer r3, $r10, $r11, $r16;
        int[] r4, r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        android.media.AudioPortConfig r8, $r27, $r31, r38;
        java.lang.Throwable r9, $r37;
        android.media.AudioPatch $r17, $r20, $r23, $r29, $r33, $r35;
        java.lang.Object $r18, $r19, $r22, $r25, $r28, $r36;
        android.media.AudioPortConfig[] $r21, $r24, $r26, $r30, $r32, $r34;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.util.ArrayList;

        $r10 = r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration>;

        r3 = $r10;

        entermonitor $r10;

     label01:
        $r11 = r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration>;

        $i3 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        if $i3 != 0 goto label17;

        r4 = newarray (int)[1];

        r5 = newarray (int)[1];

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r6 = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r7 = $r15;

     label02:
        virtualinvoke r6.<java.util.ArrayList: void clear()>();

        i0 = staticinvoke <android.media.AudioSystem: int listAudioPorts(java.util.ArrayList,int[])>(r6, r5);

        if i0 == 0 goto label04;

        exitmonitor r3;

     label03:
        return i0;

     label04:
        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        i10 = staticinvoke <android.media.AudioSystem: int listAudioPatches(java.util.ArrayList,int[])>(r7, r4);

        if i10 == 0 goto label06;

        exitmonitor r3;

     label05:
        return i10;

     label06:
        $i6 = r4[0];

        $i4 = r5[0];

        if $i6 != $i4 goto label02;

        i1 = 0;

     label07:
        $i5 = virtualinvoke r7.<java.util.ArrayList: int size()>();

        if i1 >= $i5 goto label16;

        i2 = 0;

     label08:
        $r18 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r17 = (android.media.AudioPatch) $r18;

        $r21 = virtualinvoke $r17.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $i8 = lengthof $r21;

        if i2 >= $i8 goto label11;

        $r28 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r33 = (android.media.AudioPatch) $r28;

        $r32 = virtualinvoke $r33.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $r31 = $r32[i2];

        r8 = virtualinvoke r0.<android.media.AudioManager: android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig,java.util.ArrayList)>($r31, r6);

        if r8 != null goto label10;

        exitmonitor r3;

     label09:
        return -1;

     label10:
        $r36 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r35 = (android.media.AudioPatch) $r36;

        $r34 = virtualinvoke $r35.<android.media.AudioPatch: android.media.AudioPortConfig[] sources()>();

        $r34[i2] = r8;

        i2 = i2 + 1;

        goto label08;

     label11:
        i11 = 0;

     label12:
        $r19 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r20 = (android.media.AudioPatch) $r19;

        $r24 = virtualinvoke $r20.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $i9 = lengthof $r24;

        if i11 >= $i9 goto label15;

        $r22 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r23 = (android.media.AudioPatch) $r22;

        $r26 = virtualinvoke $r23.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $r27 = $r26[i11];

        r38 = virtualinvoke r0.<android.media.AudioManager: android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig,java.util.ArrayList)>($r27, r6);

        if r38 != null goto label14;

        exitmonitor r3;

     label13:
        return -1;

     label14:
        $r25 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r29 = (android.media.AudioPatch) $r25;

        $r30 = virtualinvoke $r29.<android.media.AudioPatch: android.media.AudioPortConfig[] sinks()>();

        $r30[i11] = r38;

        i11 = i11 + 1;

        goto label12;

     label15:
        i1 = i1 + 1;

        goto label07;

     label16:
        r0.<android.media.AudioManager: java.util.ArrayList mAudioPortsCached> = r6;

        r0.<android.media.AudioManager: java.util.ArrayList mAudioPatchesCached> = r7;

        $i7 = r5[0];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r0.<android.media.AudioManager: java.lang.Integer mAudioPortGeneration> = $r16;

     label17:
        if r1 == null goto label18;

        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r13 = r0.<android.media.AudioManager: java.util.ArrayList mAudioPortsCached>;

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r13);

     label18:
        if r2 == null goto label19;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        $r12 = r0.<android.media.AudioManager: java.util.ArrayList mAudioPatchesCached>;

        virtualinvoke r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

     label19:
        exitmonitor r3;

     label20:
        goto label23;

     label21:
        $r37 := @caughtexception;

        r9 = $r37;

        exitmonitor r3;

     label22:
        throw r9;

     label23:
        return 0;

        catch java.lang.Throwable from label01 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label09 with label21;
        catch java.lang.Throwable from label10 to label13 with label21;
        catch java.lang.Throwable from label14 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    android.media.AudioPortConfig updatePortConfig(android.media.AudioPortConfig, java.util.ArrayList)
    {
        android.media.AudioManager r0;
        android.media.AudioPortConfig r1, $r6;
        java.util.ArrayList r2;
        android.media.AudioPort r3, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.media.AudioGainConfig r4;
        android.media.AudioGain r5;
        int[] $r7;
        java.lang.String $r8, $r13;
        java.lang.StringBuilder $r9, $r11, $r12;
        android.media.AudioHandle $r10, $r17, $r18;
        java.lang.Object $r15, $r16;
        boolean $z0;

        r0 := @this: android.media.AudioManager;

        r1 := @parameter0: android.media.AudioPortConfig;

        r2 := @parameter1: java.util.ArrayList;

        r3 = virtualinvoke r1.<android.media.AudioPortConfig: android.media.AudioPort port()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $r15 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r14 = (android.media.AudioPort) $r15;

        $r17 = virtualinvoke $r14.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $r18 = virtualinvoke r3.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $z0 = virtualinvoke $r17.<android.media.AudioHandle: boolean equals(java.lang.Object)>($r18);

        if $z0 == 0 goto label2;

        $r16 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (android.media.AudioPort) $r16;

        goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i0 != $i2 goto label4;

        $r8 = <android.media.AudioManager: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updatePortConfig port not found for handle: ");

        $r10 = virtualinvoke r3.<android.media.AudioPort: android.media.AudioHandle handle()>();

        $i10 = virtualinvoke $r10.<android.media.AudioHandle: int id()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, $r13);

        return null;

     label4:
        r4 = virtualinvoke r1.<android.media.AudioPortConfig: android.media.AudioGainConfig gain()>();

        if r4 == null goto label5;

        $i6 = virtualinvoke r4.<android.media.AudioGainConfig: int index()>();

        r5 = virtualinvoke r3.<android.media.AudioPort: android.media.AudioGain gain(int)>($i6);

        $i7 = virtualinvoke r4.<android.media.AudioGainConfig: int mode()>();

        $i8 = virtualinvoke r4.<android.media.AudioGainConfig: int channelMask()>();

        $r7 = virtualinvoke r4.<android.media.AudioGainConfig: int[] values()>();

        $i9 = virtualinvoke r4.<android.media.AudioGainConfig: int rampDurationMs()>();

        r4 = virtualinvoke r5.<android.media.AudioGain: android.media.AudioGainConfig buildConfig(int,int,int[],int)>($i7, $i8, $r7, $i9);

     label5:
        $i3 = virtualinvoke r1.<android.media.AudioPortConfig: int samplingRate()>();

        $i4 = virtualinvoke r1.<android.media.AudioPortConfig: int channelMask()>();

        $i5 = virtualinvoke r1.<android.media.AudioPortConfig: int format()>();

        $r6 = virtualinvoke r3.<android.media.AudioPort: android.media.AudioPortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>($i3, $i4, $i5, r4);

        return $r6;
    }

    static java.lang.Object access$000(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: java.lang.Object mFocusListenerLock>;

        return $r1;
    }

    static android.media.AudioManager$OnAudioFocusChangeListener access$100(android.media.AudioManager, java.lang.String)
    {
        android.media.AudioManager r0;
        java.lang.String r1;
        android.media.AudioManager$OnAudioFocusChangeListener $r2;

        r0 := @parameter0: android.media.AudioManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.media.AudioManager: android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)>(r1);

        return $r2;
    }

    static android.media.AudioManager$FocusEventHandlerDelegate access$200(android.media.AudioManager)
    {
        android.media.AudioManager r0;
        android.media.AudioManager$FocusEventHandlerDelegate $r1;

        r0 := @parameter0: android.media.AudioManager;

        $r1 = r0.<android.media.AudioManager: android.media.AudioManager$FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate>;

        return $r1;
    }

    static void <clinit>()
    {
        int[] $r0;

        <android.media.AudioManager: int AUDIOPORT_GENERATION_INIT> = 0;

        <android.media.AudioManager: int ERROR_DEAD_OBJECT> = -6;

        <android.media.AudioManager: int ERROR_NO_INIT> = -5;

        <android.media.AudioManager: int ERROR_PERMISSION_DENIED> = -4;

        <android.media.AudioManager: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioManager: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioManager: int ERROR> = -1;

        <android.media.AudioManager: int SUCCESS> = 0;

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER> = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        <android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE> = "android.media.property.OUTPUT_SAMPLE_RATE";

        <android.media.AudioManager: int DEVICE_IN_LOOPBACK> = -2147221504;

        <android.media.AudioManager: int DEVICE_IN_SPDIF> = -2147418112;

        <android.media.AudioManager: int DEVICE_IN_LINE> = -2147450880;

        <android.media.AudioManager: int DEVICE_IN_TV_TUNER> = -2147467264;

        <android.media.AudioManager: int DEVICE_IN_FM_TUNER> = -2147475456;

        <android.media.AudioManager: int DEVICE_IN_USB_DEVICE> = -2147479552;

        <android.media.AudioManager: int DEVICE_IN_USB_ACCESSORY> = -2147481600;

        <android.media.AudioManager: int DEVICE_IN_DGTL_DOCK_HEADSET> = -2147482624;

        <android.media.AudioManager: int DEVICE_IN_ANLG_DOCK_HEADSET> = -2147483136;

        <android.media.AudioManager: int DEVICE_IN_BACK_MIC> = -2147483520;

        <android.media.AudioManager: int DEVICE_IN_TELEPHONY_RX> = -2147483584;

        <android.media.AudioManager: int DEVICE_IN_HDMI> = -2147483616;

        <android.media.AudioManager: int DEVICE_IN_WIRED_HEADSET> = -2147483632;

        <android.media.AudioManager: int DEVICE_IN_BLUETOOTH_SCO_HEADSET> = -2147483640;

        <android.media.AudioManager: int DEVICE_IN_BUILTIN_MIC> = -2147483644;

        <android.media.AudioManager: int DEVICE_OUT_DEFAULT> = 1073741824;

        <android.media.AudioManager: int DEVICE_OUT_FM> = 1048576;

        <android.media.AudioManager: int DEVICE_OUT_SPDIF> = 524288;

        <android.media.AudioManager: int DEVICE_OUT_HDMI_ARC> = 262144;

        <android.media.AudioManager: int DEVICE_OUT_LINE> = 131072;

        <android.media.AudioManager: int DEVICE_OUT_TELEPHONY_TX> = 65536;

        <android.media.AudioManager: int DEVICE_OUT_REMOTE_SUBMIX> = 32768;

        <android.media.AudioManager: int DEVICE_OUT_USB_DEVICE> = 16384;

        <android.media.AudioManager: int DEVICE_OUT_USB_ACCESSORY> = 8192;

        <android.media.AudioManager: int DEVICE_OUT_DGTL_DOCK_HEADSET> = 4096;

        <android.media.AudioManager: int DEVICE_OUT_ANLG_DOCK_HEADSET> = 2048;

        <android.media.AudioManager: int DEVICE_OUT_HDMI> = 1024;

        <android.media.AudioManager: int DEVICE_OUT_AUX_DIGITAL> = 1024;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER> = 512;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES> = 256;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_A2DP> = 128;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_CARKIT> = 64;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO_HEADSET> = 32;

        <android.media.AudioManager: int DEVICE_OUT_BLUETOOTH_SCO> = 16;

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADPHONE> = 8;

        <android.media.AudioManager: int DEVICE_OUT_WIRED_HEADSET> = 4;

        <android.media.AudioManager: int DEVICE_OUT_SPEAKER> = 2;

        <android.media.AudioManager: int DEVICE_OUT_EARPIECE> = 1;

        <android.media.AudioManager: int DEVICE_NONE> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_GRANTED> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_REQUEST_FAILED> = 0;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK> = -3;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT> = -2;

        <android.media.AudioManager: int AUDIOFOCUS_LOSS> = -1;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE> = 4;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK> = 3;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT> = 2;

        <android.media.AudioManager: int AUDIOFOCUS_GAIN> = 1;

        <android.media.AudioManager: int AUDIOFOCUS_NONE> = 0;

        <android.media.AudioManager: int NUM_SOUND_EFFECTS> = 10;

        <android.media.AudioManager: int FX_KEYPRESS_INVALID> = 9;

        <android.media.AudioManager: int FX_KEYPRESS_RETURN> = 8;

        <android.media.AudioManager: int FX_KEYPRESS_DELETE> = 7;

        <android.media.AudioManager: int FX_KEYPRESS_SPACEBAR> = 6;

        <android.media.AudioManager: int FX_KEYPRESS_STANDARD> = 5;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_RIGHT> = 4;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_LEFT> = 3;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_DOWN> = 2;

        <android.media.AudioManager: int FX_FOCUS_NAVIGATION_UP> = 1;

        <android.media.AudioManager: int FX_KEY_CLICK> = 0;

        <android.media.AudioManager: int AUDIO_SESSION_ID_GENERATE> = 0;

        <android.media.AudioManager: int ROUTE_ALL> = -1;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_A2DP> = 16;

        <android.media.AudioManager: int ROUTE_HEADSET> = 8;

        <android.media.AudioManager: int ROUTE_BLUETOOTH_SCO> = 4;

        <android.media.AudioManager: int ROUTE_BLUETOOTH> = 4;

        <android.media.AudioManager: int ROUTE_SPEAKER> = 2;

        <android.media.AudioManager: int ROUTE_EARPIECE> = 1;

        <android.media.AudioManager: int MODE_IN_COMMUNICATION> = 3;

        <android.media.AudioManager: int MODE_IN_CALL> = 2;

        <android.media.AudioManager: int MODE_RINGTONE> = 1;

        <android.media.AudioManager: int MODE_NORMAL> = 0;

        <android.media.AudioManager: int MODE_CURRENT> = -1;

        <android.media.AudioManager: int MODE_INVALID> = -2;

        <android.media.AudioManager: int SCO_AUDIO_STATE_ERROR> = -1;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTING> = 2;

        <android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTED> = 1;

        <android.media.AudioManager: int SCO_AUDIO_STATE_DISCONNECTED> = 0;

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE> = "android.media.extra.SCO_AUDIO_PREVIOUS_STATE";

        <android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_STATE> = "android.media.extra.SCO_AUDIO_STATE";

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED> = "android.media.ACTION_SCO_AUDIO_STATE_UPDATED";

        <android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED> = "android.media.SCO_AUDIO_STATE_CHANGED";

        <android.media.AudioManager: int USE_DEFAULT_STREAM_TYPE> = -2147483648;

        <android.media.AudioManager: int VIBRATE_SETTING_ONLY_SILENT> = 2;

        <android.media.AudioManager: int VIBRATE_SETTING_ON> = 1;

        <android.media.AudioManager: int VIBRATE_SETTING_OFF> = 0;

        <android.media.AudioManager: int VIBRATE_TYPE_NOTIFICATION> = 1;

        <android.media.AudioManager: int VIBRATE_TYPE_RINGER> = 0;

        <android.media.AudioManager: int RINGER_MODE_MAX> = 2;

        <android.media.AudioManager: int RINGER_MODE_NORMAL> = 2;

        <android.media.AudioManager: int RINGER_MODE_VIBRATE> = 1;

        <android.media.AudioManager: int RINGER_MODE_SILENT> = 0;

        <android.media.AudioManager: int FLAG_SHOW_UI_WARNINGS> = 1024;

        <android.media.AudioManager: int FLAG_ACTIVE_MEDIA_ONLY> = 512;

        <android.media.AudioManager: int FLAG_HDMI_SYSTEM_AUDIO_VOLUME> = 256;

        <android.media.AudioManager: int FLAG_SHOW_SILENT_HINT> = 128;

        <android.media.AudioManager: int FLAG_BLUETOOTH_ABS_VOLUME> = 64;

        <android.media.AudioManager: int FLAG_FIXED_VOLUME> = 32;

        <android.media.AudioManager: int FLAG_VIBRATE> = 16;

        <android.media.AudioManager: int FLAG_REMOVE_SOUND_AND_VIBRATE> = 8;

        <android.media.AudioManager: int FLAG_PLAY_SOUND> = 4;

        <android.media.AudioManager: int FLAG_ALLOW_RINGER_MODES> = 2;

        <android.media.AudioManager: int FLAG_SHOW_UI> = 1;

        <android.media.AudioManager: int ADJUST_SAME> = 0;

        <android.media.AudioManager: int ADJUST_LOWER> = -1;

        <android.media.AudioManager: int ADJUST_RAISE> = 1;

        <android.media.AudioManager: int NUM_STREAMS> = 5;

        <android.media.AudioManager: int STREAM_TTS> = 9;

        <android.media.AudioManager: int STREAM_DTMF> = 8;

        <android.media.AudioManager: int STREAM_SYSTEM_ENFORCED> = 7;

        <android.media.AudioManager: int STREAM_BLUETOOTH_SCO> = 6;

        <android.media.AudioManager: int STREAM_NOTIFICATION> = 5;

        <android.media.AudioManager: int STREAM_ALARM> = 4;

        <android.media.AudioManager: int STREAM_MUSIC> = 3;

        <android.media.AudioManager: int STREAM_RING> = 2;

        <android.media.AudioManager: int STREAM_SYSTEM> = 1;

        <android.media.AudioManager: int STREAM_VOICE_CALL> = 0;

        <android.media.AudioManager: java.lang.String ACTION_USB_AUDIO_DEVICE_PLUG> = "android.media.action.USB_AUDIO_DEVICE_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_USB_AUDIO_ACCESSORY_PLUG> = "android.media.action.USB_AUDIO_ACCESSORY_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_DIGITAL_AUDIO_DOCK_PLUG> = "android.media.action.DIGITAL_AUDIO_DOCK_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_ANALOG_AUDIO_DOCK_PLUG> = "android.media.action.ANALOG_AUDIO_DOCK_PLUG";

        <android.media.AudioManager: java.lang.String EXTRA_ENCODINGS> = "android.media.extra.ENCODINGS";

        <android.media.AudioManager: java.lang.String EXTRA_MAX_CHANNEL_COUNT> = "android.media.extra.MAX_CHANNEL_COUNT";

        <android.media.AudioManager: java.lang.String EXTRA_AUDIO_PLUG_STATE> = "android.media.extra.AUDIO_PLUG_STATE";

        <android.media.AudioManager: java.lang.String ACTION_HDMI_AUDIO_PLUG> = "android.media.action.HDMI_AUDIO_PLUG";

        <android.media.AudioManager: java.lang.String ACTION_HEADSET_PLUG> = "android.intent.action.HEADSET_PLUG";

        <android.media.AudioManager: java.lang.String EXTRA_MASTER_VOLUME_MUTED> = "android.media.EXTRA_MASTER_VOLUME_MUTED";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_MASTER_VOLUME_VALUE> = "android.media.EXTRA_PREV_MASTER_VOLUME_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_MASTER_VOLUME_VALUE> = "android.media.EXTRA_MASTER_VOLUME_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_PREV_VOLUME_STREAM_VALUE> = "android.media.EXTRA_PREV_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_VALUE> = "android.media.EXTRA_VOLUME_STREAM_VALUE";

        <android.media.AudioManager: java.lang.String EXTRA_VOLUME_STREAM_TYPE> = "android.media.EXTRA_VOLUME_STREAM_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_TYPE> = "android.media.EXTRA_VIBRATE_TYPE";

        <android.media.AudioManager: java.lang.String EXTRA_VIBRATE_SETTING> = "android.media.EXTRA_VIBRATE_SETTING";

        <android.media.AudioManager: java.lang.String MASTER_MUTE_CHANGED_ACTION> = "android.media.MASTER_MUTE_CHANGED_ACTION";

        <android.media.AudioManager: java.lang.String MASTER_VOLUME_CHANGED_ACTION> = "android.media.MASTER_VOLUME_CHANGED_ACTION";

        <android.media.AudioManager: java.lang.String VOLUME_CHANGED_ACTION> = "android.media.VOLUME_CHANGED_ACTION";

        <android.media.AudioManager: java.lang.String VIBRATE_SETTING_CHANGED_ACTION> = "android.media.VIBRATE_SETTING_CHANGED";

        <android.media.AudioManager: java.lang.String EXTRA_RINGER_MODE> = "android.media.EXTRA_RINGER_MODE";

        <android.media.AudioManager: java.lang.String RINGER_MODE_CHANGED_ACTION> = "android.media.RINGER_MODE_CHANGED";

        <android.media.AudioManager: java.lang.String ACTION_AUDIO_BECOMING_NOISY> = "android.media.AUDIO_BECOMING_NOISY";

        <android.media.AudioManager: java.lang.String TAG> = "AudioManager";

        $r0 = newarray (int)[10];

        $r0[0] = 4;

        $r0[1] = 7;

        $r0[2] = 5;

        $r0[3] = 11;

        $r0[4] = 6;

        $r0[5] = 5;

        $r0[6] = 7;

        $r0[7] = 7;

        $r0[8] = 11;

        $r0[9] = 11;

        <android.media.AudioManager: int[] DEFAULT_STREAM_VOLUME> = $r0;

        return;
    }
}
