public abstract class android.content.AsyncTaskLoader extends android.content.Loader
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    private final java.util.concurrent.Executor mExecutor;
    volatile android.content.AsyncTaskLoader$LoadTask mTask;
    volatile android.content.AsyncTaskLoader$LoadTask mCancellingTask;
    long mUpdateThrottle;
    long mLastLoadCompleteTime;
    android.os.Handler mHandler;

    public void <init>(android.content.Context)
    {
        android.content.AsyncTaskLoader r0;
        android.content.Context r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: android.content.Context;

        $r2 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        specialinvoke r0.<android.content.AsyncTaskLoader: void <init>(android.content.Context,java.util.concurrent.Executor)>(r1, $r2);

        return;
    }

    public void <init>(android.content.Context, java.util.concurrent.Executor)
    {
        android.content.AsyncTaskLoader r0;
        android.content.Context r1;
        java.util.concurrent.Executor r2;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<android.content.Loader: void <init>(android.content.Context)>(r1);

        r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime> = -10000L;

        r0.<android.content.AsyncTaskLoader: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    public void setUpdateThrottle(long)
    {
        android.content.AsyncTaskLoader r0;
        long l0;
        byte $b1;
        android.os.Handler $r1;

        r0 := @this: android.content.AsyncTaskLoader;

        l0 := @parameter0: long;

        r0.<android.content.AsyncTaskLoader: long mUpdateThrottle> = l0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>()>();

        r0.<android.content.AsyncTaskLoader: android.os.Handler mHandler> = $r1;

     label1:
        return;
    }

    protected void onForceLoad()
    {
        android.content.AsyncTaskLoader r0;
        android.content.AsyncTaskLoader$LoadTask $r1;

        r0 := @this: android.content.AsyncTaskLoader;

        specialinvoke r0.<android.content.Loader: void onForceLoad()>();

        virtualinvoke r0.<android.content.AsyncTaskLoader: boolean cancelLoad()>();

        $r1 = new android.content.AsyncTaskLoader$LoadTask;

        specialinvoke $r1.<android.content.AsyncTaskLoader$LoadTask: void <init>(android.content.AsyncTaskLoader)>(r0);

        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask> = $r1;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void executePendingTask()>();

        return;
    }

    protected boolean onCancelLoad()
    {
        android.content.AsyncTaskLoader r0;
        boolean z0, $z1, $z2;
        android.content.AsyncTaskLoader$LoadTask $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11;
        android.os.Handler $r8, $r12;

        r0 := @this: android.content.AsyncTaskLoader;

        $r1 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        if $r1 == null goto label5;

        $r2 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r2 == null goto label2;

        $r9 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $z2 = $r9.<android.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z2 == 0 goto label1;

        $r10 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $r10.<android.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r12 = r0.<android.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r11 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r12.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r11);

     label1:
        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask> = null;

        return 0;

     label2:
        $r3 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $z1 = $r3.<android.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z1 == 0 goto label3;

        $r6 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $r6.<android.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r8 = r0.<android.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r7 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r8.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask> = null;

        return 0;

     label3:
        $r4 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        z0 = virtualinvoke $r4.<android.content.AsyncTaskLoader$LoadTask: boolean cancel(boolean)>(0);

        if z0 == 0 goto label4;

        $r5 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask> = $r5;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void cancelLoadInBackground()>();

     label4:
        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask> = null;

        return z0;

     label5:
        return 0;
    }

    public void onCanceled(java.lang.Object)
    {
        android.content.AsyncTaskLoader r0;
        java.lang.Object r1;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    void executePendingTask()
    {
        android.content.AsyncTaskLoader r0;
        long l0, $l1, $l3, $l4, $l6, $l7, $l8, $l9;
        android.content.AsyncTaskLoader$LoadTask $r1, $r2, $r3, $r6, $r8, $r10, $r11, $r13;
        boolean $z0;
        byte $b2, $b5;
        java.lang.Void[] $r4;
        java.util.concurrent.Executor $r5;
        android.os.Handler $r9, $r12;

        r0 := @this: android.content.AsyncTaskLoader;

        $r1 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r1 != null goto label3;

        $r2 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        if $r2 == null goto label3;

        $r3 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $z0 = $r3.<android.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        if $z0 == 0 goto label1;

        $r11 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $r11.<android.content.AsyncTaskLoader$LoadTask: boolean waiting> = 0;

        $r12 = r0.<android.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r13 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke $r12.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r13);

     label1:
        $l1 = r0.<android.content.AsyncTaskLoader: long mUpdateThrottle>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l3 = r0.<android.content.AsyncTaskLoader: long mUpdateThrottle>;

        $l6 = $l4 + $l3;

        $b5 = l0 cmp $l6;

        if $b5 >= 0 goto label2;

        $r8 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $r8.<android.content.AsyncTaskLoader$LoadTask: boolean waiting> = 1;

        $r9 = r0.<android.content.AsyncTaskLoader: android.os.Handler mHandler>;

        $r10 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $l9 = r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l7 = r0.<android.content.AsyncTaskLoader: long mUpdateThrottle>;

        $l8 = $l9 + $l7;

        virtualinvoke $r9.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>($r10, $l8);

        return;

     label2:
        $r6 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $r5 = r0.<android.content.AsyncTaskLoader: java.util.concurrent.Executor mExecutor>;

        $r4 = (java.lang.Void[]) null;

        virtualinvoke $r6.<android.content.AsyncTaskLoader$LoadTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r5, $r4);

     label3:
        return;
    }

    void dispatchOnCancelled(android.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        android.content.AsyncTaskLoader r0;
        android.content.AsyncTaskLoader$LoadTask r1, $r3;
        java.lang.Object r2;
        long $l0;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: android.content.AsyncTaskLoader$LoadTask;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>(r2);

        $r3 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r3 != r1 goto label1;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void rollbackContentChanged()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime> = $l0;

        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask> = null;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void deliverCancellation()>();

        virtualinvoke r0.<android.content.AsyncTaskLoader: void executePendingTask()>();

     label1:
        return;
    }

    void dispatchOnLoadComplete(android.content.AsyncTaskLoader$LoadTask, java.lang.Object)
    {
        android.content.AsyncTaskLoader r0;
        android.content.AsyncTaskLoader$LoadTask r1, $r3;
        java.lang.Object r2;
        boolean $z0;
        long $l0;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: android.content.AsyncTaskLoader$LoadTask;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        if $r3 == r1 goto label1;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void dispatchOnCancelled(android.content.AsyncTaskLoader$LoadTask,java.lang.Object)>(r1, r2);

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<android.content.AsyncTaskLoader: boolean isAbandoned()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>(r2);

        goto label3;

     label2:
        virtualinvoke r0.<android.content.AsyncTaskLoader: void commitContentChanged()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime> = $l0;

        r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask> = null;

        virtualinvoke r0.<android.content.AsyncTaskLoader: void deliverResult(java.lang.Object)>(r2);

     label3:
        return;
    }

    public abstract java.lang.Object loadInBackground();

    protected java.lang.Object onLoadInBackground()
    {
        android.content.AsyncTaskLoader r0;
        java.lang.Object $r1;

        r0 := @this: android.content.AsyncTaskLoader;

        $r1 = virtualinvoke r0.<android.content.AsyncTaskLoader: java.lang.Object loadInBackground()>();

        return $r1;
    }

    public void cancelLoadInBackground()
    {
        android.content.AsyncTaskLoader r0;

        r0 := @this: android.content.AsyncTaskLoader;

        return;
    }

    public boolean isLoadInBackgroundCanceled()
    {
        android.content.AsyncTaskLoader r0;
        android.content.AsyncTaskLoader$LoadTask $r1;
        boolean $z0;

        r0 := @this: android.content.AsyncTaskLoader;

        $r1 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void waitForLoader()
    {
        android.content.AsyncTaskLoader r0;
        android.content.AsyncTaskLoader$LoadTask r1;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.content.AsyncTaskLoader$LoadTask: void waitForLoader()>();

     label1:
        return;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.content.AsyncTaskLoader r0;
        java.lang.String r1;
        java.io.FileDescriptor r2;
        java.io.PrintWriter r3;
        java.lang.String[] r4;
        android.content.AsyncTaskLoader$LoadTask $r5, $r6, $r7, $r8, $r9, $r10;
        long $l0, $l2, $l3, $l4;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: android.content.AsyncTaskLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.PrintWriter;

        r4 := @parameter3: java.lang.String[];

        specialinvoke r0.<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3, r4);

        $r5 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        if $r5 == null goto label1;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mTask=");

        $r9 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.Object)>($r9);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" waiting=");

        $r10 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mTask>;

        $z1 = $r10.<android.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z1);

     label1:
        $r6 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        if $r6 == null goto label2;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mCancellingTask=");

        $r7 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.Object)>($r7);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" waiting=");

        $r8 = r0.<android.content.AsyncTaskLoader: android.content.AsyncTaskLoader$LoadTask mCancellingTask>;

        $z0 = $r8.<android.content.AsyncTaskLoader$LoadTask: boolean waiting>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z0);

     label2:
        $l0 = r0.<android.content.AsyncTaskLoader: long mUpdateThrottle>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mUpdateThrottle=");

        $l2 = r0.<android.content.AsyncTaskLoader: long mUpdateThrottle>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l2, r3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mLastLoadCompleteTime=");

        $l3 = r0.<android.content.AsyncTaskLoader: long mLastLoadCompleteTime>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l3, $l4, r3);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

     label3:
        return;
    }

    public static void <clinit>()
    {
        <android.content.AsyncTaskLoader: boolean DEBUG> = 0;

        <android.content.AsyncTaskLoader: java.lang.String TAG> = "AsyncTaskLoader";

        return;
    }
}
