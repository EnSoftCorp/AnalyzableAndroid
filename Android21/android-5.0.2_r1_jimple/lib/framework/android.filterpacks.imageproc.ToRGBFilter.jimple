public class android.filterpacks.imageproc.ToRGBFilter extends android.filterfw.core.Filter
{
    private int mInputBPP;
    private android.filterfw.core.Program mProgram;
    private android.filterfw.core.FrameFormat mLastFormat;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat mLastFormat> = null;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        android.filterfw.core.MutableFrameFormat r1, $r2;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        $r2 = new android.filterfw.core.MutableFrameFormat;

        specialinvoke $r2.<android.filterfw.core.MutableFrameFormat: void <init>(int,int)>(2, 2);

        r1 = $r2;

        virtualinvoke r1.<android.filterfw.core.MutableFrameFormat: void setDimensionCount(int)>(2);

        virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", r1);

        virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2, $r3;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $r3 = virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)>(r2);

        return $r3;
    }

    public android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.MutableFrameFormat r2;
        java.lang.Integer $r3;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r2.<android.filterfw.core.MutableFrameFormat: void setMetaValue(java.lang.String,java.lang.Object)>("colorspace", $r3);

        virtualinvoke r2.<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)>(3);

        return r2;
    }

    public void createProgram(android.filterfw.core.FilterContext, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.FrameFormat r2, $r3, $r12;
        int $i0, $i1, $i2, $i3, $i4;
        android.filterfw.core.NativeProgram $r4, $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $i0 = virtualinvoke r2.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        r0.<android.filterpacks.imageproc.ToRGBFilter: int mInputBPP> = $i0;

        $r3 = r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat mLastFormat>;

        if $r3 == null goto label1;

        $r12 = r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat mLastFormat>;

        $i4 = virtualinvoke $r12.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        $i3 = r0.<android.filterpacks.imageproc.ToRGBFilter: int mInputBPP>;

        if $i4 != $i3 goto label1;

        return;

     label1:
        r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat mLastFormat> = r2;

        $i1 = r0.<android.filterpacks.imageproc.ToRGBFilter: int mInputBPP>;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 4: goto label3;
            default: goto label4;
        };

     label2:
        $r5 = new android.filterfw.core.NativeProgram;

        specialinvoke $r5.<android.filterfw.core.NativeProgram: void <init>(java.lang.String,java.lang.String)>("filterpack_imageproc", "gray_to_rgb");

        r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.Program mProgram> = $r5;

        goto label5;

     label3:
        $r4 = new android.filterfw.core.NativeProgram;

        specialinvoke $r4.<android.filterfw.core.NativeProgram: void <init>(java.lang.String,java.lang.String)>("filterpack_imageproc", "rgba_to_rgb");

        r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.Program mProgram> = $r4;

        goto label5;

     label4:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported BytesPerPixel: ");

        $i2 = r0.<android.filterpacks.imageproc.ToRGBFilter: int mInputBPP>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.ToRGBFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r3;
        android.filterfw.core.FrameFormat $r4, $r6, $r7;
        android.filterfw.core.FrameManager $r5;
        android.filterfw.core.Program $r8;

        r0 := @this: android.filterpacks.imageproc.ToRGBFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        $r4 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: void createProgram(android.filterfw.core.FilterContext,android.filterfw.core.FrameFormat)>(r1, $r4);

        $r5 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r6 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r7 = virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)>($r6);

        r3 = virtualinvoke $r5.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r7);

        $r8 = r0.<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r8.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r3);

        virtualinvoke r0.<android.filterpacks.imageproc.ToRGBFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r3);

        virtualinvoke r3.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }
}
