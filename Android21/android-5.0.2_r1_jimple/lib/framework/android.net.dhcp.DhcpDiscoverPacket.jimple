class android.net.dhcp.DhcpDiscoverPacket extends android.net.dhcp.DhcpPacket
{

    void <init>(int, byte[], boolean)
    {
        android.net.dhcp.DhcpDiscoverPacket r0;
        int i0;
        byte[] r1;
        boolean z0;
        java.net.InetAddress $r2, $r3, $r4, $r5;

        r0 := @this: android.net.dhcp.DhcpDiscoverPacket;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $r5 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        $r4 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        $r3 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        $r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke r0.<android.net.dhcp.DhcpPacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[],boolean)>(i0, $r5, $r4, $r3, $r2, r1, z0);

        return;
    }

    public java.lang.String toString()
    {
        android.net.dhcp.DhcpDiscoverPacket r0;
        java.lang.String r1, $r6, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: android.net.dhcp.DhcpDiscoverPacket;

        r1 = specialinvoke r0.<android.net.dhcp.DhcpPacket: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DISCOVER ");

        $z0 = r0.<android.net.dhcp.DhcpDiscoverPacket: boolean mBroadcast>;

        if $z0 == 0 goto label1;

        $r7 = "broadcast ";

        goto label2;

     label1:
        $r7 = "unicast ";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.nio.ByteBuffer buildPacket(int, short, short)
    {
        android.net.dhcp.DhcpDiscoverPacket r0;
        int i0;
        short s1, s2;
        java.nio.ByteBuffer r1;
        java.net.InetAddress r2, $r3, $r4;

        r0 := @this: android.net.dhcp.DhcpDiscoverPacket;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        s2 := @parameter2: short;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1500);

        r2 = <java.net.Inet4Address: java.net.InetAddress ALL>;

        $r4 = <java.net.Inet4Address: java.net.InetAddress ALL>;

        $r3 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        virtualinvoke r0.<android.net.dhcp.DhcpDiscoverPacket: void fillInPacket(int,java.net.InetAddress,java.net.InetAddress,short,short,java.nio.ByteBuffer,byte,boolean)>(i0, $r4, $r3, s1, s2, r1, 1, 1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return r1;
    }

    void finishPacket(java.nio.ByteBuffer)
    {
        android.net.dhcp.DhcpDiscoverPacket r0;
        java.nio.ByteBuffer r1;
        byte[] $r2;

        r0 := @this: android.net.dhcp.DhcpDiscoverPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<android.net.dhcp.DhcpDiscoverPacket: void addTlv(java.nio.ByteBuffer,byte,byte)>(r1, 53, 1);

        $r2 = r0.<android.net.dhcp.DhcpDiscoverPacket: byte[] mRequestedParams>;

        virtualinvoke r0.<android.net.dhcp.DhcpDiscoverPacket: void addTlv(java.nio.ByteBuffer,byte,byte[])>(r1, 55, $r2);

        virtualinvoke r0.<android.net.dhcp.DhcpDiscoverPacket: void addTlvEnd(java.nio.ByteBuffer)>(r1);

        return;
    }

    public void doNextOp(android.net.dhcp.DhcpStateMachine)
    {
        android.net.dhcp.DhcpDiscoverPacket r0;
        android.net.dhcp.DhcpStateMachine r1;
        byte[] $r2, $r3;
        int $i0;
        boolean $z0;

        r0 := @this: android.net.dhcp.DhcpDiscoverPacket;

        r1 := @parameter0: android.net.dhcp.DhcpStateMachine;

        $z0 = r0.<android.net.dhcp.DhcpDiscoverPacket: boolean mBroadcast>;

        $i0 = r0.<android.net.dhcp.DhcpDiscoverPacket: int mTransId>;

        $r3 = r0.<android.net.dhcp.DhcpDiscoverPacket: byte[] mClientMac>;

        $r2 = r0.<android.net.dhcp.DhcpDiscoverPacket: byte[] mRequestedParams>;

        interfaceinvoke r1.<android.net.dhcp.DhcpStateMachine: void onDiscoverReceived(boolean,int,byte[],byte[])>($z0, $i0, $r3, $r2);

        return;
    }
}
