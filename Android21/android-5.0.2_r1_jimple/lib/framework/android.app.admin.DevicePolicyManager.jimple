public class android.app.admin.DevicePolicyManager extends java.lang.Object
{
    private static java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.app.admin.IDevicePolicyManager mService;
    public static final java.lang.String ACTION_PROVISION_MANAGED_PROFILE;
    public static final java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS;
    public static final java.lang.String EXTRA_PROVISIONING_TIME_ZONE;
    public static final java.lang.String EXTRA_PROVISIONING_LOCAL_TIME;
    public static final java.lang.String EXTRA_PROVISIONING_LOCALE;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_SSID;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS;
    public static final java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER;
    public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM;
    public static final java.lang.String MIME_TYPE_PROVISIONING_NFC;
    public static final java.lang.String ACTION_ADD_DEVICE_ADMIN;
    public static final java.lang.String ACTION_SET_PROFILE_OWNER;
    public static final java.lang.String EXTRA_PROFILE_OWNER_NAME;
    public static final java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED;
    public static final java.lang.String EXTRA_DEVICE_ADMIN;
    public static final java.lang.String EXTRA_ADD_EXPLANATION;
    public static final java.lang.String ACTION_SET_NEW_PASSWORD;
    public static final int FLAG_PARENT_CAN_ACCESS_MANAGED;
    public static final int FLAG_MANAGED_CAN_ACCESS_PARENT;
    public static final int PASSWORD_QUALITY_UNSPECIFIED;
    public static final int PASSWORD_QUALITY_BIOMETRIC_WEAK;
    public static final int PASSWORD_QUALITY_SOMETHING;
    public static final int PASSWORD_QUALITY_NUMERIC;
    public static final int PASSWORD_QUALITY_NUMERIC_COMPLEX;
    public static final int PASSWORD_QUALITY_ALPHABETIC;
    public static final int PASSWORD_QUALITY_ALPHANUMERIC;
    public static final int PASSWORD_QUALITY_COMPLEX;
    public static final int RESET_PASSWORD_REQUIRE_ENTRY;
    public static final int WIPE_EXTERNAL_STORAGE;
    public static final int ENCRYPTION_STATUS_UNSUPPORTED;
    public static final int ENCRYPTION_STATUS_INACTIVE;
    public static final int ENCRYPTION_STATUS_ACTIVATING;
    public static final int ENCRYPTION_STATUS_ACTIVE;
    public static final java.lang.String ACTION_START_ENCRYPTION;
    public static final int KEYGUARD_DISABLE_FEATURES_NONE;
    public static final int KEYGUARD_DISABLE_WIDGETS_ALL;
    public static final int KEYGUARD_DISABLE_SECURE_CAMERA;
    public static final int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS;
    public static final int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS;
    public static final int KEYGUARD_DISABLE_TRUST_AGENTS;
    public static final int KEYGUARD_DISABLE_FINGERPRINT;
    public static final int KEYGUARD_DISABLE_FEATURES_ALL;

    private void <init>(android.content.Context, android.os.Handler)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.os.IBinder $r3;
        android.app.admin.IDevicePolicyManager $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext> = r1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_policy");

        $r4 = staticinvoke <android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>($r3);

        r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService> = $r4;

        return;
    }

    public static android.app.admin.DevicePolicyManager create(android.content.Context, android.os.Handler)
    {
        android.content.Context r0;
        android.os.Handler r1;
        android.app.admin.DevicePolicyManager r2, $r3, $r5;
        android.app.admin.IDevicePolicyManager $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        $r3 = new android.app.admin.DevicePolicyManager;

        specialinvoke $r3.<android.app.admin.DevicePolicyManager: void <init>(android.content.Context,android.os.Handler)>(r0, r1);

        r2 = $r3;

        $r4 = r2.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public boolean isAdminActive(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean isAdminActiveAsUser(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean isAdminActiveAsUser(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getActiveAdmins()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.util.List getActiveAdminsAsUser(int)>($i0);

        return $r1;
    }

    public java.util.List getActiveAdminsAsUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.util.List $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>(i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean packageHasActiveAdmins(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(r1, $i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeActiveAdmin(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>(r1, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordQuality(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordQuality(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        long l0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>(r1, l0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        long $l1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return $l1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getPasswordExpiration(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        long $l1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return $l1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordHistoryLength(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPasswordMaximumLength(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        return 16;
    }

    public boolean isActivePasswordSufficient()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int)>($i0);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getCurrentFailedPasswordAttempts()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        int $i0, $i1;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>($i0);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean resetPassword(java.lang.String, int)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int,int)>(r1, i0, $i1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        long l0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,int)>(r1, l0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getMaximumTimeToLock(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        long $l1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>(r1, $i0);

        return $l1;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        long $l1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $l1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $l1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lockNow()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void lockNow()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void wipeData(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void wipeData(int,int)>(i0, $i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.net.Proxy, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, $r27;
        java.net.Proxy r2, $r13;
        java.util.List r3;
        java.lang.String r4, r5, r7, r11, $r21, $r24, $r29, $r30;
        java.net.InetSocketAddress r6;
        int i0, $i1, $i2;
        java.lang.StringBuilder r8, r9, $r17, $r18, $r19, $r20, $r22;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r10;
        android.app.admin.IDevicePolicyManager $r12, $r23;
        java.net.Proxy$Type $r14, $r15;
        java.net.SocketAddress $r16;
        java.lang.IllegalArgumentException $r25, $r28;
        java.lang.Object $r26;
        java.lang.NullPointerException $r31;
        android.os.RemoteException $r32, r33;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.net.Proxy;

        r3 := @parameter2: java.util.List;

        if r2 != null goto label01;

        $r31 = new java.lang.NullPointerException;

        specialinvoke $r31.<java.lang.NullPointerException: void <init>()>();

        throw $r31;

     label01:
        $r12 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r12 == null goto label14;

     label02:
        $r13 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

        $z1 = virtualinvoke r2.<java.net.Proxy: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label03;

        r4 = null;

        r5 = null;

        goto label11;

     label03:
        $r14 = virtualinvoke r2.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r15 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $z2 = virtualinvoke $r14.<java.net.Proxy$Type: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label04;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r28;

     label04:
        $r16 = virtualinvoke r2.<java.net.Proxy: java.net.SocketAddress address()>();

        r6 = (java.net.InetSocketAddress) $r16;

        r7 = virtualinvoke r6.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        i0 = virtualinvoke r6.<java.net.InetSocketAddress: int getPort()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        r8 = $r17;

        $r19 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r4 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        if r3 != null goto label05;

        r5 = "";

        goto label10;

     label05:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        r9 = $r22;

        z0 = 1;

        r10 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r26 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r26;

        if z0 != 0 goto label07;

        r9 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        goto label08;

     label07:
        z0 = 0;

     label08:
        $r29 = virtualinvoke r11.<java.lang.String: java.lang.String trim()>();

        r9 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        goto label06;

     label09:
        r5 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $i1 = staticinvoke <android.net.Proxy: int validate(java.lang.String,java.lang.String,java.lang.String)>(r7, $r24, r5);

        if $i1 == 0 goto label11;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r25;

     label11:
        $r23 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i2 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r27 = interfaceinvoke $r23.<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>(r1, r4, r5, $i2);

     label12:
        return $r27;

     label13:
        $r32 := @caughtexception;

        r33 = $r32;

        $r30 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r30, "Failed talking with device policy service", r33);

     label14:
        return null;

        catch android.os.RemoteException from label02 to label12 with label13;
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.net.ProxyInfo r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.net.ProxyInfo;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName getGlobalProxyAdmin()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        int $i0;
        android.content.ComponentName $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>($i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0, $i1;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getStorageEncryption(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>(r1, $i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getStorageEncryptionStatus()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>($i0);

        return $i1;
    }

    public int getStorageEncryptionStatus(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, $i1;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(int)>(i0);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean installCaCert(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        byte[] r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void uninstallCaCert(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        byte[] r2;
        java.lang.String r3, $r7, $r9;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.RemoteException $r6, r11;
        java.security.cert.CertificateException $r8, r10;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label5;

     label1:
        r3 = staticinvoke <android.app.admin.DevicePolicyManager: java.lang.String getCaCertAlias(byte[])>(r2);

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void uninstallCaCert(android.content.ComponentName,java.lang.String)>(r1, r3);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Unable to parse certificate", r10);

        goto label5;

     label4:
        $r6 := @caughtexception;

        r11 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r11);

     label5:
        return;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.util.List getInstalledCaCerts(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.util.ArrayList r2, $r7;
        com.android.org.conscrypt.TrustedCertificateStore r3, $r10;
        java.util.Iterator r4;
        java.lang.String r5, $r18, $r19, $r22;
        java.security.cert.CertificateException r6, $r16;
        android.app.admin.IDevicePolicyManager $r8, $r9;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r12;
        java.security.cert.Certificate $r13;
        byte[] $r14;
        java.lang.StringBuilder $r15, $r17, $r20;
        android.os.RemoteException $r21, r23;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r8 == null goto label9;

     label1:
        $r9 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r9.<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName)>(r1);

        $r10 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r10.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        r3 = $r10;

        $r11 = virtualinvoke r3.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

     label3:
        $r13 = virtualinvoke r3.<com.android.org.conscrypt.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.security.cert.Certificate: byte[] getEncoded()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r14);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        r6 = $r16;

        $r18 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not encode certificate: ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r18, $r19, r6);

     label6:
        goto label2;

     label7:
        goto label9;

     label8:
        $r21 := @caughtexception;

        r23 = $r21;

        $r22 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r22, "Failed talking with device policy service", r23);

     label9:
        return r2;

        catch java.security.cert.CertificateException from label3 to label4 with label5;
        catch android.os.RemoteException from label1 to label7 with label8;
    }

    public void uninstallAllUserCaCerts(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.util.Iterator r2;
        java.lang.String r3, $r11;
        android.os.RemoteException r4, $r10;
        android.app.admin.IDevicePolicyManager $r5, $r9;
        com.android.org.conscrypt.TrustedCertificateStore $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label6;

        $r6 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r6.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        $r7 = virtualinvoke $r6.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r8;

     label2:
        $r9 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r9.<android.app.admin.IDevicePolicyManager: void uninstallCaCert(android.content.ComponentName,java.lang.String)>(r1, r3);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Failed talking with device policy service", r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean hasCaCertInstalled(android.content.ComponentName, byte[])
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        byte[] r2;
        android.os.RemoteException r3, $r7;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        java.lang.String $r6, $r8, $r10;
        boolean $z0;
        java.security.cert.CertificateException $r9, r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label6;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName)>(r1);

        $r6 = staticinvoke <android.app.admin.DevicePolicyManager: java.lang.String getCaCertAlias(byte[])>(r2);

        if $r6 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r3);

        goto label6;

     label5:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Could not parse certificate", r11);

     label6:
        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
        catch java.security.cert.CertificateException from label1 to label3 with label5;
    }

    public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.security.PrivateKey r2;
        java.security.cert.Certificate r3;
        java.lang.String r4, $r10, $r12, $r14;
        byte[] r5, $r8;
        java.security.cert.Certificate[] $r6;
        android.app.admin.IDevicePolicyManager $r7;
        boolean $z0;
        java.security.cert.CertificateException $r9, r15;
        java.io.IOException $r11, r16;
        android.os.RemoteException $r13, r17;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.security.PrivateKey;

        r3 := @parameter2: java.security.cert.Certificate;

        r4 := @parameter3: java.lang.String;

     label1:
        $r6 = newarray (java.security.cert.Certificate)[1];

        $r6[0] = r3;

        r5 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r6);

        $r7 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r8 = interfaceinvoke r2.<java.security.PrivateKey: byte[] getEncoded()>();

        $z0 = interfaceinvoke $r7.<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,byte[],byte[],java.lang.String)>(r1, $r8, r5, r4);

     label2:
        return $z0;

     label3:
        $r9 := @caughtexception;

        r15 = $r9;

        $r10 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Error encoding certificate", r15);

        goto label6;

     label4:
        $r11 := @caughtexception;

        r16 = $r11;

        $r12 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "Error writing certificate", r16);

        goto label6;

     label5:
        $r13 := @caughtexception;

        r17 = $r13;

        $r14 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r14, "Failed talking with device policy service", r17);

     label6:
        return 0;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label5;
    }

    private static java.lang.String getCaCertAlias(byte[]) throws java.security.cert.CertificateException
    {
        byte[] r0;
        java.security.cert.CertificateFactory r1;
        java.security.cert.X509Certificate r2;
        java.io.ByteArrayInputStream $r3;
        java.security.cert.Certificate $r4;
        com.android.org.conscrypt.TrustedCertificateStore $r5;
        java.lang.String $r6;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r4 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

        r2 = (java.security.cert.X509Certificate) $r4;

        $r5 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        $r6 = virtualinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)>(r2);

        return $r6;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCameraDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setScreenCaptureDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,int,boolean)>(r1, $i0, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>(r1, $i0);

        return $z0;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAutoTimeRequired(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,int,boolean)>(r1, $i0, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getAutoTimeRequired()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean getAutoTimeRequired()>();

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>(r1, i0, $i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int $i0, $i1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>(r1, $i0);

        return $i1;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i1 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>(r1, i0);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        int i0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r1, z0, i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        int $i0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r1, z0, $i0);

        return;
    }

    public android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo r2;
        android.content.pm.PackageManager$NameNotFoundException r3, $r10;
        org.xmlpull.v1.XmlPullParserException r4, $r17;
        android.content.Context $r5, $r9;
        android.content.pm.PackageManager $r6;
        android.content.pm.ResolveInfo $r7, r28;
        android.app.admin.DeviceAdminInfo $r8;
        java.lang.StringBuilder $r11, $r13, $r14, $r16, $r18, $r21, $r24, $r25, $r26;
        java.lang.String $r12, $r15, $r19, $r20, $r23, $r27;
        java.io.IOException $r22, r29;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>(r1, 128);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

        $r12 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve device policy ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r15, r3);

        return null;

     label4:
        $r7 = new android.content.pm.ResolveInfo;

        specialinvoke $r7.<android.content.pm.ResolveInfo: void <init>()>();

        r28 = $r7;

        r28.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r2;

     label5:
        $r8 = new android.app.admin.DeviceAdminInfo;

        $r9 = r0.<android.app.admin.DevicePolicyManager: android.content.Context mContext>;

        specialinvoke $r8.<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r9, r28);

     label6:
        return $r8;

     label7:
        $r17 := @caughtexception;

        r4 = $r17;

        $r19 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse device policy ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r19, $r20, r4);

        return null;

     label8:
        $r22 := @caughtexception;

        r29 = $r22;

        $r23 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse device policy ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, $r27, r29);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
        catch org.xmlpull.v1.XmlPullParserException from label5 to label6 with label7;
        catch java.io.IOException from label5 to label6 with label8;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteCallback r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        int $i0;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>(r1, r2, $i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActivePasswordState(int, int, int, int, int, int, int, int, int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7, i8);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportFailedPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Failed talking with device policy service", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDeviceOwner(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setDeviceOwner(java.lang.String,java.lang.String)>(r1, null);

        return $z0;
    }

    public boolean setDeviceOwner(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2, $r7;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        android.os.RemoteException $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to set device owner");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isDeviceOwner(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to check device owner");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceOwner(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>(r1);

        return $z0;
    }

    public void clearDeviceOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void clearDeviceOwner(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to clear device owner");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwner()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwner()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get device owner");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceOwnerName()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwnerName()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get device owner");

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setActiveProfileOwner(android.content.ComponentName, java.lang.String) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8, $r11;
        int i0;
        android.app.admin.IDevicePolicyManager $r3, $r4, $r5;
        boolean $z0;
        android.os.RemoteException $r6, r13;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>(r1, 0, i0);

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r1, r2, i0);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r13 = $r6;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set profile owner ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r11);

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t set profile owner.", r13);

        throw $r12;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearProfileOwner(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String $r7, $r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to clear profile owner ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, $r11);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasUserSetupCompleted()
    {
        android.app.admin.DevicePolicyManager r0;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        boolean $z0;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: boolean hasUserSetupCompleted()>();

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $r5 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "Failed to check if user setup has completed");

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setProfileOwner(java.lang.String, java.lang.String, int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, r2;
        int i0;
        android.content.ComponentName $r3;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("packageName cannot be null");

        throw $r4;

     label1:
        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r1, "");

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>($r3, r2, i0);

        return $z0;
    }

    public boolean setProfileOwner(android.content.ComponentName, java.lang.String, int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8;
        int i0;
        android.os.RemoteException r3, $r7;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("admin cannot be null");

        throw $r6;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label6;

     label2:
        if r2 != null goto label3;

        r2 = "";

     label3:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r1, r2, i0);

     label4:
        return $z0;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed to set profile owner", r3);

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t set profile owner.", r3);

        throw $r9;

     label6:
        return 0;

        catch android.os.RemoteException from label2 to label4 with label5;
    }

    public void setProfileEnabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProfileName(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isProfileOwnerApp(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6, $r8;
        android.content.ComponentName r2;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.UserHandle $r5;
        int $i0;
        boolean $z0, $z1;
        android.os.RemoteException $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label5;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i0 = virtualinvoke $r5.<android.os.UserHandle: int getIdentifier()>();

        r2 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>($i0);

        if r2 == null goto label2;

        $r6 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r7 := @caughtexception;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, "Failed to check profile owner");

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public android.content.ComponentName getProfileOwner() throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle $r1;
        int $i0;
        android.content.ComponentName $r2;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r1 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i0 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        $r2 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)>($i0);

        return $r2;
    }

    public android.content.ComponentName getProfileOwnerAsUser(int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        android.content.ComponentName $r4;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>(i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get profile owner");

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Requested profile owner for invalid userId", r1);

        throw $r7;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProfileOwnerName() throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r6;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        android.os.UserHandle $r4;
        int $i0;
        java.lang.String $r5, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        $r5 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>($i0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to get profile owner");

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Requested profile owner for invalid userId", r1);

        throw $r8;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProfileOwnerNameAsUser(int) throws java.lang.IllegalArgumentException
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String $r4, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>(i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get profile owner");

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Requested profile owner for invalid userId", r1);

        throw $r7;

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r3;
        android.content.IntentFilter r2;
        android.os.RemoteException r4, $r7;
        android.app.admin.IDevicePolicyManager $r5, $r6;
        java.lang.String $r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: android.content.ComponentName;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8;
        android.os.Bundle r3;
        android.os.RemoteException r4, $r7;
        android.app.admin.IDevicePolicyManager $r5, $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTrustAgentFeaturesEnabled(android.content.ComponentName, android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r2;
        java.util.List r3;
        android.os.RemoteException r4, $r7;
        android.app.admin.IDevicePolicyManager $r5, $r6;
        int $i0;
        java.lang.String $r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: java.util.List;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: void setTrustAgentFeaturesEnabled(android.content.ComponentName,android.content.ComponentName,java.util.List,int)>(r1, r2, r3, $i0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getTrustAgentFeaturesEnabled(android.content.ComponentName, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r2;
        android.os.RemoteException r3, $r8;
        android.app.admin.IDevicePolicyManager $r4, $r6;
        java.util.ArrayList $r5;
        int $i0;
        java.util.List $r7;
        java.lang.String $r9;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r7 = interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentFeaturesEnabled(android.content.ComponentName,android.content.ComponentName,int)>(r1, r2, $i0);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Failed talking with device policy service", r3);

     label4:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getCrossProfileCallerIdDisabled(android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.UserHandle r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        int $i0;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.os.UserHandle;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabledForUser(int)>($i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.content.IntentFilter r2;
        int i0;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>(r1, r2, i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearCrossProfileIntentFilters(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.util.List r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedAccessibilityServices(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.util.List $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r2);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedAccessibilityServices(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.util.List $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServicesForUser(int)>(i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.util.List r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedInputMethods(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.util.List $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r2);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getPermittedInputMethodsForCurrentUser()
    {
        android.app.admin.DevicePolicyManager r0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.util.List $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.UserHandle createUser(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4;
        android.os.UserHandle $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: android.os.UserHandle createUser(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Could not create a user", r3);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.UserHandle createAndInitializeUser(android.content.ComponentName, java.lang.String, java.lang.String, android.content.ComponentName, android.os.Bundle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r4;
        java.lang.String r2, r3, $r10;
        android.os.Bundle r5;
        android.os.RemoteException r6, $r9;
        android.app.admin.IDevicePolicyManager $r7;
        android.os.UserHandle $r8;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.ComponentName;

        r5 := @parameter4: android.os.Bundle;

     label1:
        $r7 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r8 = interfaceinvoke $r7.<android.app.admin.IDevicePolicyManager: android.os.UserHandle createAndInitializeUser(android.content.ComponentName,java.lang.String,java.lang.String,android.content.ComponentName,android.os.Bundle)>(r1, r2, r3, r4, r5);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r6 = $r9;

        $r10 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Could not create a user", r6);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeUser(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        android.os.RemoteException r3, $r5;
        android.app.admin.IDevicePolicyManager $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not remove user ", r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean switchUser(android.content.ComponentName, android.os.UserHandle)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        android.os.RemoteException r3, $r5;
        android.app.admin.IDevicePolicyManager $r4;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not switch user ", r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8;
        android.os.RemoteException r3, $r7;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.Bundle $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r6 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r3);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addUserRestriction(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)>(r1, r2, 1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearUserRestriction(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)>(r1, r2, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        boolean z0, $z1;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z1 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)>(r1, r2, z0);

     label2:
        return $z1;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isApplicationHidden(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void enableSystemApp(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r8, $r11;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install package: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r11);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int enableSystemApp(android.content.ComponentName, android.content.Intent)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.content.Intent r2;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        int $i0;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.Intent;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $i0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: int enableSystemAppWithIntent(android.content.ComponentName,android.content.Intent)>(r1, r2);

     label2:
        return $i0;

     label3:
        $r6 := @caughtexception;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install packages matching filter: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r11);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        boolean z0;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)>(r1, r2, z0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled()
    {
        android.app.admin.DevicePolicyManager r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: android.app.admin.DevicePolicyManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r1 = virtualinvoke r0.<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>($i0);

        return $r1;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)
    {
        android.app.admin.DevicePolicyManager r0;
        int i0;
        android.os.RemoteException r1, $r5;
        android.app.admin.IDevicePolicyManager $r2, $r3;
        java.lang.String[] $r4;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r4 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>(i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r1);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) throws java.lang.SecurityException
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String[] r2;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String[];

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.os.RemoteException r2, $r6;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        java.lang.String[] $r5;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $r5 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed talking with device policy service", r2);

     label4:
        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isLockTaskPermitted(java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        java.lang.String r1, $r6;
        android.os.RemoteException r2, $r5;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Failed talking with device policy service", r2);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r8;
        android.os.RemoteException r4, $r7;
        android.app.admin.IDevicePolicyManager $r5, $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r8;
        android.os.RemoteException r4, $r7;
        android.app.admin.IDevicePolicyManager $r5, $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r6.<android.app.admin.IDevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed talking with device policy service", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1, r2;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.RemoteException $r6;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to set permission provider on device policy service");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMasterVolumeMuted(android.content.ComponentName, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to setMasterMute on device policy service");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        android.app.admin.IDevicePolicyManager $r3, $r4;
        boolean $z0;
        android.os.RemoteException $r5;
        java.lang.String $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "Failed to get isMasterMute on device policy service");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        boolean z0;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)>(r1, r2, z0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to call block uninstall on device policy service");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;
        android.os.RemoteException $r6;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Failed to call block uninstall on device policy service");

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error calling addCrossProfileWidgetProvider", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r7;
        android.os.RemoteException r3, $r6;
        android.app.admin.IDevicePolicyManager $r4, $r5;
        boolean $z0;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        $z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>(r1, r2);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error calling removeCrossProfileWidgetProvider", r3);

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)
    {
        android.app.admin.DevicePolicyManager r0;
        android.content.ComponentName r1;
        java.util.List r2, $r4;
        android.app.admin.IDevicePolicyManager $r3, $r5;
        android.os.RemoteException $r6, r8;
        java.lang.String $r7;

        r0 := @this: android.app.admin.DevicePolicyManager;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        if $r3 == null goto label5;

     label1:
        $r5 = r0.<android.app.admin.DevicePolicyManager: android.app.admin.IDevicePolicyManager mService>;

        r2 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>(r1);

        if r2 == null goto label3;

     label2:
        return r2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.app.admin.DevicePolicyManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error calling getCrossProfileWidgetProviders", r8);

     label5:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_ALL> = 2147483647;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FINGERPRINT> = 32;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_TRUST_AGENTS> = 16;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS> = 8;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS> = 4;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_CAMERA> = 2;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_WIDGETS_ALL> = 1;

        <android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_NONE> = 0;

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_START_ENCRYPTION> = "android.app.action.START_ENCRYPTION";

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE> = 3;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVATING> = 2;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_INACTIVE> = 1;

        <android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_UNSUPPORTED> = 0;

        <android.app.admin.DevicePolicyManager: int WIPE_EXTERNAL_STORAGE> = 1;

        <android.app.admin.DevicePolicyManager: int RESET_PASSWORD_REQUIRE_ENTRY> = 1;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_COMPLEX> = 393216;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHANUMERIC> = 327680;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHABETIC> = 262144;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC_COMPLEX> = 196608;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC> = 131072;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_SOMETHING> = 65536;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_BIOMETRIC_WEAK> = 32768;

        <android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_UNSPECIFIED> = 0;

        <android.app.admin.DevicePolicyManager: int FLAG_MANAGED_CAN_ACCESS_PARENT> = 2;

        <android.app.admin.DevicePolicyManager: int FLAG_PARENT_CAN_ACCESS_MANAGED> = 1;

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PASSWORD> = "android.app.action.SET_NEW_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_ADD_EXPLANATION> = "android.app.extra.ADD_EXPLANATION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DEVICE_ADMIN> = "android.app.extra.DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED> = "android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROFILE_OWNER_NAME> = "android.app.extra.PROFILE_OWNER_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_PROFILE_OWNER> = "android.app.action.SET_PROFILE_OWNER";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADD_DEVICE_ADMIN> = "android.app.action.ADD_DEVICE_ADMIN";

        <android.app.admin.DevicePolicyManager: java.lang.String MIME_TYPE_PROVISIONING_NFC> = "application/com.android.managedprovisioning";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL> = "android.app.extra.PROVISIONING_WIFI_PAC_URL";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS> = "android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT> = "android.app.extra.PROVISIONING_WIFI_PROXY_PORT";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST> = "android.app.extra.PROVISIONING_WIFI_PROXY_HOST";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD> = "android.app.extra.PROVISIONING_WIFI_PASSWORD";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE> = "android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN> = "android.app.extra.PROVISIONING_WIFI_HIDDEN";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SSID> = "android.app.extra.PROVISIONING_WIFI_SSID";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCALE> = "android.app.extra.PROVISIONING_LOCALE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCAL_TIME> = "android.app.extra.PROVISIONING_LOCAL_TIME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_TIME_ZONE> = "android.app.extra.PROVISIONING_TIME_ZONE";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS> = "android.app.extra.PROVISIONING_EMAIL_ADDRESS";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME> = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME";

        <android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE> = "android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE";

        <android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_PROFILE> = "android.app.action.PROVISION_MANAGED_PROFILE";

        <android.app.admin.DevicePolicyManager: java.lang.String TAG> = "DevicePolicyManager";

        return;
    }
}
