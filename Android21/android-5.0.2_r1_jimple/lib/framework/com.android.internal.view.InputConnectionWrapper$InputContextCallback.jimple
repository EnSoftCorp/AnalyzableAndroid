class com.android.internal.view.InputConnectionWrapper$InputContextCallback extends com.android.internal.view.IInputContextCallback$Stub
{
    private static final java.lang.String TAG;
    public int mSeq;
    public boolean mHaveValue;
    public java.lang.CharSequence mTextBeforeCursor;
    public java.lang.CharSequence mTextAfterCursor;
    public java.lang.CharSequence mSelectedText;
    public android.view.inputmethod.ExtractedText mExtractedText;
    public int mCursorCapsMode;
    public boolean mRequestUpdateCursorAnchorInfoResult;
    private static com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance;
    private static int sSequenceNumber;

    void <init>()
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        specialinvoke r0.<com.android.internal.view.IInputContextCallback$Stub: void <init>()>();

        return;
    }

    private static com.android.internal.view.InputConnectionWrapper$InputContextCallback getInstance()
    {
        java.lang.Class r0;
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r1, $r3, $r4;
        java.lang.Throwable r2, $r5;
        int $i0, $i1;

        r0 = class "com/android/internal/view/InputConnectionWrapper$InputContextCallback";

        entermonitor class "com/android/internal/view/InputConnectionWrapper$InputContextCallback";

     label1:
        $r3 = <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance>;

        if $r3 == null goto label2;

        r1 = <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance>;

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance> = null;

        r1.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 0;

        goto label3;

     label2:
        $r4 = new com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        specialinvoke $r4.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void <init>()>();

        r1 = $r4;

     label3:
        $i0 = <com.android.internal.view.InputConnectionWrapper$InputContextCallback: int sSequenceNumber>;

        $i1 = $i0 + 1;

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: int sSequenceNumber> = $i1;

        r1.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq> = $i0;

        exitmonitor r0;

     label4:
        return r1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void dispose()
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, $r3;
        java.lang.Class r1;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        r1 = class "com/android/internal/view/InputConnectionWrapper$InputContextCallback";

        entermonitor class "com/android/internal/view/InputConnectionWrapper$InputContextCallback";

     label1:
        $r3 = <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance>;

        if $r3 != null goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.CharSequence mTextAfterCursor> = null;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.CharSequence mTextBeforeCursor> = null;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: android.view.inputmethod.ExtractedText mExtractedText> = null;

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance> = r0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTextBeforeCursor(java.lang.CharSequence, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r2;
        java.lang.CharSequence r1;
        int i0, $i1, $i2;
        java.lang.Throwable r3, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i0 != $i1 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.CharSequence mTextBeforeCursor> = r1;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setTextBeforeCursor, ignoring.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r11);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setTextAfterCursor(java.lang.CharSequence, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r2;
        java.lang.CharSequence r1;
        int i0, $i1, $i2;
        java.lang.Throwable r3, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i0 != $i1 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.CharSequence mTextAfterCursor> = r1;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setTextAfterCursor, ignoring.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r11);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setSelectedText(java.lang.CharSequence, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r2;
        java.lang.CharSequence r1;
        int i0, $i1, $i2;
        java.lang.Throwable r3, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i0 != $i1 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.CharSequence mSelectedText> = r1;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setSelectedText, ignoring.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r11);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setCursorCapsMode(int, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r1;
        int i0, i1, $i2, $i3;
        java.lang.Throwable r2, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i1 != $i2 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mCursorCapsMode> = i0;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i3 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setCursorCapsMode, ignoring.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r10);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setExtractedText(android.view.inputmethod.ExtractedText, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r2;
        android.view.inputmethod.ExtractedText r1;
        int i0, $i1, $i2;
        java.lang.Throwable r3, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        r1 := @parameter0: android.view.inputmethod.ExtractedText;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i0 != $i1 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: android.view.inputmethod.ExtractedText mExtractedText> = r1;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setExtractedText, ignoring.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r11);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setRequestUpdateCursorAnchorInfoResult(boolean, int)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0, r1;
        boolean z0;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        if i0 != $i1 goto label2;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mRequestUpdateCursorAnchorInfoResult> = z0;

        r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got out-of-sequence callback ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $i2 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: int mSeq>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in setCursorAnchorInfoRequestResult, ignoring.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", $r10);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void waitForResultLocked()
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0;
        long l0, l1, l2, $l3;
        boolean $z0;
        byte $b4;
        java.lang.InterruptedException $r2;

        r0 := @this: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = l0 + 2000L;

     label1:
        $z0 = r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: boolean mHaveValue>;

        if $z0 != 0 goto label6;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = l1 - $l3;

        $b4 = l2 cmp 0L;

        if $b4 > 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputConnectionWrapper.ICC", "Timed out waiting on IInputContextCallback");

        return;

     label2:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l2);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    static com.android.internal.view.InputConnectionWrapper$InputContextCallback access$000()
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback $r0;

        $r0 = staticinvoke <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback getInstance()>();

        return $r0;
    }

    static void access$100(com.android.internal.view.InputConnectionWrapper$InputContextCallback)
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback r0;

        r0 := @parameter0: com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        specialinvoke r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void dispose()>();

        return;
    }

    static void <clinit>()
    {
        com.android.internal.view.InputConnectionWrapper$InputContextCallback $r0;

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: java.lang.String TAG> = "InputConnectionWrapper.ICC";

        $r0 = new com.android.internal.view.InputConnectionWrapper$InputContextCallback;

        specialinvoke $r0.<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void <init>()>();

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback sInstance> = $r0;

        <com.android.internal.view.InputConnectionWrapper$InputContextCallback: int sSequenceNumber> = 1;

        return;
    }
}
