public class android.webkit.WebView extends android.widget.AbsoluteLayout implements android.view.ViewTreeObserver$OnGlobalFocusChangeListener, android.view.ViewGroup$OnHierarchyChangeListener, android.view.ViewDebug$HierarchyHandler
{
    public static final java.lang.String DATA_REDUCTION_PROXY_SETTING_CHANGED;
    private static final java.lang.String LOGTAG;
    private static volatile boolean sEnforceThreadChecking;
    public static final java.lang.String SCHEME_TEL;
    public static final java.lang.String SCHEME_MAILTO;
    public static final java.lang.String SCHEME_GEO;
    private android.webkit.WebViewProvider mProvider;
    private android.webkit.WebView$FindListenerDistributor mFindListener;
    private final android.os.Looper mWebViewThread;

    public void <init>(android.content.Context)
    {
        android.webkit.WebView r0;
        android.content.Context r1;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 16842885);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int,java.util.Map,boolean)>(r1, r2, i0, i1, null, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, boolean)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        boolean z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int,java.util.Map,boolean)>(r1, r2, i0, 0, null, z0);

        return;
    }

    protected void <init>(android.content.Context, android.util.AttributeSet, int, java.util.Map, boolean)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        java.util.Map r3;
        boolean z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.Map;

        z0 := @parameter4: boolean;

        specialinvoke r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int,java.util.Map,boolean)>(r1, r2, i0, 0, r3, z0);

        return;
    }

    protected void <init>(android.content.Context, android.util.AttributeSet, int, int, java.util.Map, boolean)
    {
        android.webkit.WebView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, $i2;
        java.util.Map r3;
        boolean z0, $z1;
        android.os.Looper $r4;
        android.content.pm.ApplicationInfo $r5;
        android.webkit.WebViewProvider $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.util.Map;

        z0 := @parameter5: boolean;

        specialinvoke r0.<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<android.webkit.WebView: android.os.Looper mWebViewThread> = $r4;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid context argument");

        throw $r7;

     label1:
        $r5 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 < 18 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        <android.webkit.WebView: boolean sEnforceThreadChecking> = $z1;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        specialinvoke r0.<android.webkit.WebView: void ensureProviderCreated()>();

        $r6 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r6.<android.webkit.WebViewProvider: void init(java.util.Map,boolean)>(r3, z0);

        staticinvoke <android.webkit.CookieSyncManager: void setGetInstanceIsAllowed()>();

        return;
    }

    public void setHorizontalScrollbarOverlay(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void setHorizontalScrollbarOverlay(boolean)>(z0);

        return;
    }

    public void setVerticalScrollbarOverlay(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void setVerticalScrollbarOverlay(boolean)>(z0);

        return;
    }

    public boolean overlayHorizontalScrollbar()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean overlayHorizontalScrollbar()>();

        return $z0;
    }

    public boolean overlayVerticalScrollbar()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean overlayVerticalScrollbar()>();

        return $z0;
    }

    public int getVisibleTitleHeight()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        int $i0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $i0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: int getVisibleTitleHeight()>();

        return $i0;
    }

    public android.net.http.SslCertificate getCertificate()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.net.http.SslCertificate $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.net.http.SslCertificate getCertificate()>();

        return $r2;
    }

    public void setCertificate(android.net.http.SslCertificate)
    {
        android.webkit.WebView r0;
        android.net.http.SslCertificate r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.net.http.SslCertificate;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void setCertificate(android.net.http.SslCertificate)>(r1);

        return;
    }

    public void savePassword(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1, r2, r3;
        android.webkit.WebViewProvider $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r4.<android.webkit.WebViewProvider: void savePassword(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1, r2, r3, r4;
        android.webkit.WebViewProvider $r5;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r5 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r5.<android.webkit.WebViewProvider: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1, r2;
        android.webkit.WebViewProvider $r3;
        java.lang.String[] $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r4 = interfaceinvoke $r3.<android.webkit.WebViewProvider: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public void destroy()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void destroy()>();

        return;
    }

    public static void enablePlatformNotifications()
    {
        return;
    }

    public static void disablePlatformNotifications()
    {
        return;
    }

    public static void freeMemoryForTests()
    {
        android.webkit.WebViewFactoryProvider $r0;
        android.webkit.WebViewFactoryProvider$Statics $r1;

        $r0 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r1 = interfaceinvoke $r0.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider$Statics: void freeMemoryForTests()>();

        return;
    }

    public void setNetworkAvailable(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void setNetworkAvailable(boolean)>(z0);

        return;
    }

    public android.webkit.WebBackForwardList saveState(android.os.Bundle)
    {
        android.webkit.WebView r0;
        android.os.Bundle r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebBackForwardList $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebBackForwardList saveState(android.os.Bundle)>(r1);

        return $r3;
    }

    public boolean savePicture(android.os.Bundle, java.io.File)
    {
        android.webkit.WebView r0;
        android.os.Bundle r1;
        java.io.File r2;
        android.webkit.WebViewProvider $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider: boolean savePicture(android.os.Bundle,java.io.File)>(r1, r2);

        return $z0;
    }

    public boolean restorePicture(android.os.Bundle, java.io.File)
    {
        android.webkit.WebView r0;
        android.os.Bundle r1;
        java.io.File r2;
        android.webkit.WebViewProvider $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider: boolean restorePicture(android.os.Bundle,java.io.File)>(r1, r2);

        return $z0;
    }

    public android.webkit.WebBackForwardList restoreState(android.os.Bundle)
    {
        android.webkit.WebView r0;
        android.os.Bundle r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebBackForwardList $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>(r1);

        return $r3;
    }

    public void loadUrl(java.lang.String, java.util.Map)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        java.util.Map r2;
        android.webkit.WebViewProvider $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r3.<android.webkit.WebViewProvider: void loadUrl(java.lang.String,java.util.Map)>(r1, r2);

        return;
    }

    public void loadUrl(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void loadUrl(java.lang.String)>(r1);

        return;
    }

    public void postUrl(java.lang.String, byte[])
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        byte[] r2;
        boolean $z0;
        android.webkit.WebViewProvider $r3, $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $z0 = staticinvoke <android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r4.<android.webkit.WebViewProvider: void postUrl(java.lang.String,byte[])>(r1, r2);

        goto label2;

     label1:
        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r3.<android.webkit.WebViewProvider: void loadUrl(java.lang.String)>(r1);

     label2:
        return;
    }

    public void loadData(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1, r2, r3;
        android.webkit.WebViewProvider $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r4.<android.webkit.WebViewProvider: void loadData(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1, r2, r3, r4, r5;
        android.webkit.WebViewProvider $r6;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r6 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r6.<android.webkit.WebViewProvider: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    public void evaluateJavascript(java.lang.String, android.webkit.ValueCallback)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.ValueCallback r2;
        android.webkit.WebViewProvider $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.webkit.ValueCallback;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r3.<android.webkit.WebViewProvider: void evaluateJavaScript(java.lang.String,android.webkit.ValueCallback)>(r1, r2);

        return;
    }

    public void saveWebArchive(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void saveWebArchive(java.lang.String)>(r1);

        return;
    }

    public void saveWebArchive(java.lang.String, boolean, android.webkit.ValueCallback)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        boolean z0;
        android.webkit.ValueCallback r2;
        android.webkit.WebViewProvider $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.webkit.ValueCallback;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r3.<android.webkit.WebViewProvider: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>(r1, z0, r2);

        return;
    }

    public void stopLoading()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void stopLoading()>();

        return;
    }

    public void reload()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void reload()>();

        return;
    }

    public boolean canGoBack()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean canGoBack()>();

        return $z0;
    }

    public void goBack()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void goBack()>();

        return;
    }

    public boolean canGoForward()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean canGoForward()>();

        return $z0;
    }

    public void goForward()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void goForward()>();

        return;
    }

    public boolean canGoBackOrForward(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean canGoBackOrForward(int)>(i0);

        return $z0;
    }

    public void goBackOrForward(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void goBackOrForward(int)>(i0);

        return;
    }

    public boolean isPrivateBrowsingEnabled()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean isPrivateBrowsingEnabled()>();

        return $z0;
    }

    public boolean pageUp(boolean)
    {
        android.webkit.WebView r0;
        boolean z0, $z1;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z1 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean pageUp(boolean)>(z0);

        return $z1;
    }

    public boolean pageDown(boolean)
    {
        android.webkit.WebView r0;
        boolean z0, $z1;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z1 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean pageDown(boolean)>(z0);

        return $z1;
    }

    public void clearView()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearView()>();

        return;
    }

    public android.graphics.Picture capturePicture()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.graphics.Picture $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.graphics.Picture capturePicture()>();

        return $r2;
    }

    public android.print.PrintDocumentAdapter createPrintDocumentAdapter()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.print.PrintDocumentAdapter $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>("default");

        return $r2;
    }

    public android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;
        android.print.PrintDocumentAdapter $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>(r1);

        return $r3;
    }

    public float getScale()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        float $f0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $f0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: float getScale()>();

        return $f0;
    }

    public void setInitialScale(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void setInitialScale(int)>(i0);

        return;
    }

    public void invokeZoomPicker()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void invokeZoomPicker()>();

        return;
    }

    public android.webkit.WebView$HitTestResult getHitTestResult()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebView$HitTestResult $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebView$HitTestResult getHitTestResult()>();

        return $r2;
    }

    public void requestFocusNodeHref(android.os.Message)
    {
        android.webkit.WebView r0;
        android.os.Message r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void requestFocusNodeHref(android.os.Message)>(r1);

        return;
    }

    public void requestImageRef(android.os.Message)
    {
        android.webkit.WebView r0;
        android.os.Message r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void requestImageRef(android.os.Message)>(r1);

        return;
    }

    public java.lang.String getUrl()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        java.lang.String $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: java.lang.String getUrl()>();

        return $r2;
    }

    public java.lang.String getOriginalUrl()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        java.lang.String $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: java.lang.String getOriginalUrl()>();

        return $r2;
    }

    public java.lang.String getTitle()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        java.lang.String $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: java.lang.String getTitle()>();

        return $r2;
    }

    public android.graphics.Bitmap getFavicon()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.graphics.Bitmap getFavicon()>();

        return $r2;
    }

    public java.lang.String getTouchIconUrl()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        java.lang.String $r2;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: java.lang.String getTouchIconUrl()>();

        return $r2;
    }

    public int getProgress()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        int $i0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $i0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: int getProgress()>();

        return $i0;
    }

    public int getContentHeight()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        int $i0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $i0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: int getContentHeight()>();

        return $i0;
    }

    public int getContentWidth()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $i0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: int getContentWidth()>();

        return $i0;
    }

    public void pauseTimers()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void pauseTimers()>();

        return;
    }

    public void resumeTimers()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void resumeTimers()>();

        return;
    }

    public void onPause()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void onPause()>();

        return;
    }

    public void onResume()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void onResume()>();

        return;
    }

    public boolean isPaused()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean isPaused()>();

        return $z0;
    }

    public void freeMemory()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void freeMemory()>();

        return;
    }

    public void clearCache(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearCache(boolean)>(z0);

        return;
    }

    public void clearFormData()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearFormData()>();

        return;
    }

    public void clearHistory()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearHistory()>();

        return;
    }

    public void clearSslPreferences()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearSslPreferences()>();

        return;
    }

    public static void clearClientCertPreferences(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        android.webkit.WebViewFactoryProvider $r1;
        android.webkit.WebViewFactoryProvider$Statics $r2;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        interfaceinvoke $r2.<android.webkit.WebViewFactoryProvider$Statics: void clearClientCertPreferences(java.lang.Runnable)>(r0);

        return;
    }

    public android.webkit.WebBackForwardList copyBackForwardList()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebBackForwardList $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebBackForwardList copyBackForwardList()>();

        return $r2;
    }

    public void setFindListener(android.webkit.WebView$FindListener)
    {
        android.webkit.WebView r0;
        android.webkit.WebView$FindListener r1;
        android.webkit.WebView$FindListenerDistributor $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.WebView$FindListener;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        specialinvoke r0.<android.webkit.WebView: void setupFindListenerIfNeeded()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebView$FindListenerDistributor mFindListener>;

        staticinvoke <android.webkit.WebView$FindListenerDistributor: android.webkit.WebView$FindListener access$002(android.webkit.WebView$FindListenerDistributor,android.webkit.WebView$FindListener)>($r2, r1);

        return;
    }

    public void findNext(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void findNext(boolean)>(z0);

        return;
    }

    public int findAll(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        staticinvoke <android.os.StrictMode: void noteSlowCall(java.lang.String)>("findAll blocks UI: prefer findAllAsync");

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider: int findAll(java.lang.String)>(r1);

        return $i0;
    }

    public void findAllAsync(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void findAllAsync(java.lang.String)>(r1);

        return;
    }

    public boolean showFindDialog(java.lang.String, boolean)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        boolean z0, $z1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z1 = interfaceinvoke $r2.<android.webkit.WebViewProvider: boolean showFindDialog(java.lang.String,boolean)>(r1, z0);

        return $z1;
    }

    public static java.lang.String findAddress(java.lang.String)
    {
        java.lang.String r0, $r3;
        android.webkit.WebViewFactoryProvider $r1;
        android.webkit.WebViewFactoryProvider$Statics $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewFactoryProvider$Statics: java.lang.String findAddress(java.lang.String)>(r0);

        return $r3;
    }

    public static void enableSlowWholeDocumentDraw()
    {
        android.webkit.WebViewFactoryProvider $r0;
        android.webkit.WebViewFactoryProvider$Statics $r1;

        $r0 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r1 = interfaceinvoke $r0.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider$Statics: void enableSlowWholeDocumentDraw()>();

        return;
    }

    public void clearMatches()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void clearMatches()>();

        return;
    }

    public void documentHasImages(android.os.Message)
    {
        android.webkit.WebView r0;
        android.os.Message r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void documentHasImages(android.os.Message)>(r1);

        return;
    }

    public void setWebViewClient(android.webkit.WebViewClient)
    {
        android.webkit.WebView r0;
        android.webkit.WebViewClient r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.WebViewClient;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void setWebViewClient(android.webkit.WebViewClient)>(r1);

        return;
    }

    public void setDownloadListener(android.webkit.DownloadListener)
    {
        android.webkit.WebView r0;
        android.webkit.DownloadListener r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.DownloadListener;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void setDownloadListener(android.webkit.DownloadListener)>(r1);

        return;
    }

    public void setWebChromeClient(android.webkit.WebChromeClient)
    {
        android.webkit.WebView r0;
        android.webkit.WebChromeClient r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.WebChromeClient;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void setWebChromeClient(android.webkit.WebChromeClient)>(r1);

        return;
    }

    public void setPictureListener(android.webkit.WebView$PictureListener)
    {
        android.webkit.WebView r0;
        android.webkit.WebView$PictureListener r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.WebView$PictureListener;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void setPictureListener(android.webkit.WebView$PictureListener)>(r1);

        return;
    }

    public void addJavascriptInterface(java.lang.Object, java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.Object r1;
        java.lang.String r2;
        android.webkit.WebViewProvider $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r3.<android.webkit.WebViewProvider: void addJavascriptInterface(java.lang.Object,java.lang.String)>(r1, r2);

        return;
    }

    public void removeJavascriptInterface(java.lang.String)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void removeJavascriptInterface(java.lang.String)>(r1);

        return;
    }

    public android.webkit.WebSettings getSettings()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebSettings $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebSettings getSettings()>();

        return $r2;
    }

    public static void setWebContentsDebuggingEnabled(boolean)
    {
        boolean z0;
        android.webkit.WebViewFactoryProvider $r0;
        android.webkit.WebViewFactoryProvider$Statics $r1;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r1 = interfaceinvoke $r0.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider$Statics: void setWebContentsDebuggingEnabled(boolean)>(z0);

        return;
    }

    public static synchronized android.webkit.PluginList getPluginList()
    {
        android.webkit.PluginList $r0;

        $r0 = new android.webkit.PluginList;

        specialinvoke $r0.<android.webkit.PluginList: void <init>()>();

        return $r0;
    }

    public void refreshPlugins(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        return;
    }

    public void emulateShiftHeld()
    {
        android.webkit.WebView r0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        return;
    }

    public void onChildViewAdded(android.view.View, android.view.View)
    {
        android.webkit.WebView r0;
        android.view.View r1, r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        return;
    }

    public void onChildViewRemoved(android.view.View, android.view.View)
    {
        android.webkit.WebView r0;
        android.view.View r1, r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        return;
    }

    public void onGlobalFocusChanged(android.view.View, android.view.View)
    {
        android.webkit.WebView r0;
        android.view.View r1, r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        return;
    }

    public void setMapTrackballToArrowKeys(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void setMapTrackballToArrowKeys(boolean)>(z0);

        return;
    }

    public void flingScroll(int, int)
    {
        android.webkit.WebView r0;
        int i0, i1;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void flingScroll(int,int)>(i0, i1);

        return;
    }

    public android.view.View getZoomControls()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.view.View $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.view.View getZoomControls()>();

        return $r2;
    }

    public boolean canZoomIn()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean canZoomIn()>();

        return $z0;
    }

    public boolean canZoomOut()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean canZoomOut()>();

        return $z0;
    }

    public void zoomBy(float)
    {
        android.webkit.WebView r0;
        float f0;
        double $d0, $d1;
        byte $b0, $b1;
        android.webkit.WebViewProvider $r1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: android.webkit.WebView;

        f0 := @parameter0: float;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $d0 = (double) f0;

        $b0 = $d0 cmpg 0.01;

        if $b0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("zoomFactor must be greater than 0.01.");

        throw $r3;

     label1:
        $d1 = (double) f0;

        $b1 = $d1 cmpl 100.0;

        if $b1 <= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("zoomFactor must be less than 100.");

        throw $r2;

     label2:
        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean zoomBy(float)>(f0);

        return;
    }

    public boolean zoomIn()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean zoomIn()>();

        return $z0;
    }

    public boolean zoomOut()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $z0 = interfaceinvoke $r1.<android.webkit.WebViewProvider: boolean zoomOut()>();

        return $z0;
    }

    public void debugDump()
    {
        android.webkit.WebView r0;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        return;
    }

    public void dumpViewHierarchyWithProperties(java.io.BufferedWriter, int)
    {
        android.webkit.WebView r0;
        java.io.BufferedWriter r1;
        int i0;
        android.webkit.WebViewProvider $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.io.BufferedWriter;

        i0 := @parameter1: int;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r2.<android.webkit.WebViewProvider: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)>(r1, i0);

        return;
    }

    public android.view.View findHierarchyView(java.lang.String, int)
    {
        android.webkit.WebView r0;
        java.lang.String r1;
        int i0;
        android.webkit.WebViewProvider $r2;
        android.view.View $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.view.View findHierarchyView(java.lang.String,int)>(r1, i0);

        return $r3;
    }

    public android.webkit.WebViewProvider getWebViewProvider()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        return $r1;
    }

    void setFindDialogFindListener(android.webkit.WebView$FindListener)
    {
        android.webkit.WebView r0;
        android.webkit.WebView$FindListener r1;
        android.webkit.WebView$FindListenerDistributor $r2;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.webkit.WebView$FindListener;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        specialinvoke r0.<android.webkit.WebView: void setupFindListenerIfNeeded()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebView$FindListenerDistributor mFindListener>;

        staticinvoke <android.webkit.WebView$FindListenerDistributor: android.webkit.WebView$FindListener access$2202(android.webkit.WebView$FindListenerDistributor,android.webkit.WebView$FindListener)>($r2, r1);

        return;
    }

    void notifyFindDialogDismissed()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        interfaceinvoke $r1.<android.webkit.WebViewProvider: void notifyFindDialogDismissed()>();

        return;
    }

    private void setupFindListenerIfNeeded()
    {
        android.webkit.WebView r0;
        android.webkit.WebView$FindListenerDistributor $r1, $r2, $r3;
        android.webkit.WebViewProvider $r4;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebView$FindListenerDistributor mFindListener>;

        if $r1 != null goto label1;

        $r2 = new android.webkit.WebView$FindListenerDistributor;

        specialinvoke $r2.<android.webkit.WebView$FindListenerDistributor: void <init>(android.webkit.WebView,android.webkit.WebView$1)>(r0, null);

        r0.<android.webkit.WebView: android.webkit.WebView$FindListenerDistributor mFindListener> = $r2;

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = r0.<android.webkit.WebView: android.webkit.WebView$FindListenerDistributor mFindListener>;

        interfaceinvoke $r4.<android.webkit.WebViewProvider: void setFindListener(android.webkit.WebView$FindListener)>($r3);

     label1:
        return;
    }

    private void ensureProviderCreated()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1, $r4;
        android.webkit.WebViewFactoryProvider $r2;
        android.webkit.WebView$PrivateAccess $r3;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.webkit.WebView: void checkThread()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <android.webkit.WebView: android.webkit.WebViewFactoryProvider getFactory()>();

        $r3 = new android.webkit.WebView$PrivateAccess;

        specialinvoke $r3.<android.webkit.WebView$PrivateAccess: void <init>(android.webkit.WebView)>(r0);

        $r4 = interfaceinvoke $r2.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewProvider createWebView(android.webkit.WebView,android.webkit.WebView$PrivateAccess)>(r0, $r3);

        r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider> = $r4;

     label1:
        return;
    }

    private static synchronized android.webkit.WebViewFactoryProvider getFactory()
    {
        android.webkit.WebViewFactoryProvider $r0;

        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>();

        return $r0;
    }

    private void checkThread()
    {
        android.webkit.WebView r0;
        java.lang.Throwable r1, $r5;
        android.os.Looper $r2, $r3, $r4, $r14, $r16, $r21;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r23;
        java.lang.Thread $r8;
        java.lang.String $r9, $r22, $r24;
        boolean $z0;
        java.lang.RuntimeException $r25;

        r0 := @this: android.webkit.WebView;

        $r2 = r0.<android.webkit.WebView: android.os.Looper mWebViewThread>;

        if $r2 == null goto label1;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<android.webkit.WebView: android.os.Looper mWebViewThread>;

        if $r3 == $r4 goto label1;

        $r5 = new java.lang.Throwable;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A WebView method was called on thread \'");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All WebView methods must be called on the same thread. ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Expected Looper ");

        $r14 = r0.<android.webkit.WebView: android.os.Looper mWebViewThread>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" called on ");

        $r16 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", FYI main Looper is ");

        $r21 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Throwable: void <init>(java.lang.String)>($r22);

        r1 = $r5;

        $r24 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>(r1);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WebView", $r24);

        staticinvoke <android.os.StrictMode: void onWebViewMethodCalledOnWrongThread(java.lang.Throwable)>(r1);

        $z0 = <android.webkit.WebView: boolean sEnforceThreadChecking>;

        if $z0 == 0 goto label1;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r25;

     label1:
        return;
    }

    protected void onAttachedToWindow()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onAttachedToWindow()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onAttachedToWindow()>();

        return;
    }

    protected void onDetachedFromWindowInternal()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onDetachedFromWindow()>();

        specialinvoke r0.<android.widget.AbsoluteLayout: void onDetachedFromWindowInternal()>();

        return;
    }

    public void setLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.webkit.WebView r0;
        android.view.ViewGroup$LayoutParams r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        return;
    }

    public void setOverScrollMode(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void setOverScrollMode(int)>(i0);

        specialinvoke r0.<android.webkit.WebView: void ensureProviderCreated()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void setOverScrollMode(int)>(i0);

        return;
    }

    public void setScrollBarStyle(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void setScrollBarStyle(int)>(i0);

        specialinvoke r0.<android.widget.AbsoluteLayout: void setScrollBarStyle(int)>(i0);

        return;
    }

    protected int computeHorizontalScrollRange()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: int computeHorizontalScrollRange()>();

        return $i0;
    }

    protected int computeHorizontalScrollOffset()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: int computeHorizontalScrollOffset()>();

        return $i0;
    }

    protected int computeVerticalScrollRange()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: int computeVerticalScrollRange()>();

        return $i0;
    }

    protected int computeVerticalScrollOffset()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: int computeVerticalScrollOffset()>();

        return $i0;
    }

    protected int computeVerticalScrollExtent()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;
        int $i0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        $i0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: int computeVerticalScrollExtent()>();

        return $i0;
    }

    public void computeScroll()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ScrollDelegate $r2;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ScrollDelegate: void computeScroll()>();

        return;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean onGenericMotionEvent(android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean onTrackballEvent(android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.webkit.WebView r0;
        int i0;
        android.view.KeyEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onKeyDown(int,android.view.KeyEvent)>(i0, r1);

        return $z0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.webkit.WebView r0;
        int i0;
        android.view.KeyEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onKeyUp(int,android.view.KeyEvent)>(i0, r1);

        return $z0;
    }

    public boolean onKeyMultiple(int, int, android.view.KeyEvent)
    {
        android.webkit.WebView r0;
        int i0, i1;
        android.view.KeyEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean onKeyMultiple(int,int,android.view.KeyEvent)>(i0, i1, r1);

        return $z0;
    }

    public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
    {
        android.webkit.WebView r0;
        android.view.accessibility.AccessibilityNodeProvider r1, $r4;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        r1 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r1 != null goto label1;

        $r4 = specialinvoke r0.<android.widget.AbsoluteLayout: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        goto label2;

     label1:
        $r4 = r1;

     label2:
        return $r4;
    }

    public boolean shouldDelayChildPressedState()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: boolean shouldDelayChildPressedState()>();

        return $z0;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.webkit.WebView r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.webkit.WebViewProvider $r4;
        android.webkit.WebViewProvider$ViewDelegate $r5;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r2 = class "android/webkit/WebView";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r3);

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r5 = interfaceinvoke $r4.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r5.<android.webkit.WebViewProvider$ViewDelegate: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.webkit.WebView r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.webkit.WebViewProvider $r4;
        android.webkit.WebViewProvider$ViewDelegate $r5;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $r2 = class "android/webkit/WebView";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r3);

        $r4 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r5 = interfaceinvoke $r4.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r5.<android.webkit.WebViewProvider$ViewDelegate: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        android.webkit.WebView r0;
        int i0;
        android.os.Bundle r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        return $z0;
    }

    protected void onDrawVerticalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.webkit.WebView r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;
        android.webkit.WebViewProvider $r3;
        android.webkit.WebViewProvider$ViewDelegate $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r4 = interfaceinvoke $r3.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r4.<android.webkit.WebViewProvider$ViewDelegate: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r2, i0, i1, i2, i3);

        return;
    }

    protected void onOverScrolled(int, int, boolean, boolean)
    {
        android.webkit.WebView r0;
        int i0, i1;
        boolean z0, z1;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onOverScrolled(int,int,boolean,boolean)>(i0, i1, z0, z1);

        return;
    }

    protected void onWindowVisibilityChanged(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onWindowVisibilityChanged(int)>(i0);

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onWindowVisibilityChanged(int)>(i0);

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.webkit.WebView r0;
        android.graphics.Canvas r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void onDraw(android.graphics.Canvas)>(r1);

        return;
    }

    public boolean performLongClick()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: boolean performLongClick()>();

        return $z0;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        android.webkit.WebView r0;
        android.content.res.Configuration r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        android.webkit.WebView r0;
        android.view.inputmethod.EditorInfo r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        android.view.inputmethod.InputConnection $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $r4 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>(r1);

        return $r4;
    }

    protected void onVisibilityChanged(android.view.View, int)
    {
        android.webkit.WebView r0;
        android.view.View r1;
        int i0;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        specialinvoke r0.<android.webkit.WebView: void ensureProviderCreated()>();

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        return;
    }

    public void onWindowFocusChanged(boolean)
    {
        android.webkit.WebView r0;
        boolean z0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onWindowFocusChanged(boolean)>(z0);

        specialinvoke r0.<android.widget.AbsoluteLayout: void onWindowFocusChanged(boolean)>(z0);

        return;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.webkit.WebView r0;
        boolean z0;
        int i0;
        android.graphics.Rect r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        specialinvoke r0.<android.widget.AbsoluteLayout: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        return;
    }

    protected boolean setFrame(int, int, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1, i2, i3;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: boolean setFrame(int,int,int,int)>(i0, i1, i2, i3);

        return $z0;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1, i2, i3;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1, i2, i3;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onScrollChanged(int,int,int,int)>(i0, i1, i2, i3);

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onScrollChanged(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.webkit.WebView r0;
        android.view.KeyEvent r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.webkit.WebView r0;
        int i0;
        android.graphics.Rect r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;
        boolean $z0;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z0 = interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        return $z0;
    }

    protected void onMeasure(int, int)
    {
        android.webkit.WebView r0;
        int i0, i1;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onMeasure(int,int)>(i0, i1);

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onMeasure(int,int)>(i0, i1);

        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.webkit.WebView r0;
        android.view.View r1;
        android.graphics.Rect r2;
        boolean z0, $z1;
        android.webkit.WebViewProvider $r3;
        android.webkit.WebViewProvider$ViewDelegate $r4;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        $r3 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r4 = interfaceinvoke $r3.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        $z1 = interfaceinvoke $r4.<android.webkit.WebViewProvider$ViewDelegate: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>(r1, r2, z0);

        return $z1;
    }

    public void setBackgroundColor(int)
    {
        android.webkit.WebView r0;
        int i0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void setBackgroundColor(int)>(i0);

        return;
    }

    public void setLayerType(int, android.graphics.Paint)
    {
        android.webkit.WebView r0;
        int i0;
        android.graphics.Paint r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Paint;

        specialinvoke r0.<android.widget.AbsoluteLayout: void setLayerType(int,android.graphics.Paint)>(i0, r1);

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void setLayerType(int,android.graphics.Paint)>(i0, r1);

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.webkit.WebView r0;
        android.graphics.Canvas r1;
        android.webkit.WebViewProvider $r2;
        android.webkit.WebViewProvider$ViewDelegate $r3;

        r0 := @this: android.webkit.WebView;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r3.<android.webkit.WebViewProvider$ViewDelegate: void preDispatchDraw(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.widget.AbsoluteLayout: void dispatchDraw(android.graphics.Canvas)>(r1);

        return;
    }

    public void onStartTemporaryDetach()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onStartTemporaryDetach()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onStartTemporaryDetach()>();

        return;
    }

    public void onFinishTemporaryDetach()
    {
        android.webkit.WebView r0;
        android.webkit.WebViewProvider $r1;
        android.webkit.WebViewProvider$ViewDelegate $r2;

        r0 := @this: android.webkit.WebView;

        specialinvoke r0.<android.widget.AbsoluteLayout: void onFinishTemporaryDetach()>();

        $r1 = r0.<android.webkit.WebView: android.webkit.WebViewProvider mProvider>;

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewProvider: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>();

        interfaceinvoke $r2.<android.webkit.WebViewProvider$ViewDelegate: void onFinishTemporaryDetach()>();

        return;
    }

    static int access$101(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        int $i0;

        r0 := @parameter0: android.webkit.WebView;

        $i0 = specialinvoke r0.<android.view.View: int getScrollBarStyle()>();

        return $i0;
    }

    static void access$201(android.webkit.WebView, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.view.View: void scrollTo(int,int)>(i0, i1);

        return;
    }

    static void access$301(android.webkit.WebView)
    {
        android.webkit.WebView r0;

        r0 := @parameter0: android.webkit.WebView;

        specialinvoke r0.<android.view.View: void computeScroll()>();

        return;
    }

    static boolean access$401(android.webkit.WebView, android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    static boolean access$501(android.webkit.WebView, int, android.os.Bundle)
    {
        android.webkit.WebView r0;
        int i0;
        android.os.Bundle r1;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        $z0 = specialinvoke r0.<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        return $z0;
    }

    static boolean access$601(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        $z0 = specialinvoke r0.<android.view.View: boolean performLongClick()>();

        return $z0;
    }

    static boolean access$701(android.webkit.WebView, int, int, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>(i0, i1, i2, i3);

        return $z0;
    }

    static boolean access$801(android.webkit.WebView, android.view.KeyEvent)
    {
        android.webkit.WebView r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    static boolean access$901(android.webkit.WebView, android.view.MotionEvent)
    {
        android.webkit.WebView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    static boolean access$1001(android.webkit.WebView, int, android.graphics.Rect)
    {
        android.webkit.WebView r0;
        int i0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        return $z0;
    }

    static void access$1101(android.webkit.WebView, android.view.ViewGroup$LayoutParams)
    {
        android.webkit.WebView r0;
        android.view.ViewGroup$LayoutParams r1;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        return;
    }

    static boolean access$1200(android.webkit.WebView, int, int, int, int, int, int, int, int, boolean)
    {
        android.webkit.WebView r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        boolean z0, $z1;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        z0 := @parameter9: boolean;

        $z1 = virtualinvoke r0.<android.webkit.WebView: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>(i0, i1, i2, i3, i4, i5, i6, i7, z0);

        return $z1;
    }

    static boolean access$1300(android.webkit.WebView, int)
    {
        android.webkit.WebView r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.webkit.WebView: boolean awakenScrollBars(int)>(i0);

        return $z0;
    }

    static boolean access$1400(android.webkit.WebView, int, boolean)
    {
        android.webkit.WebView r0;
        int i0;
        boolean z0, $z1;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<android.webkit.WebView: boolean awakenScrollBars(int,boolean)>(i0, z0);

        return $z1;
    }

    static float access$1500(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        float $f0;

        r0 := @parameter0: android.webkit.WebView;

        $f0 = virtualinvoke r0.<android.webkit.WebView: float getVerticalScrollFactor()>();

        return $f0;
    }

    static float access$1600(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        float $f0;

        r0 := @parameter0: android.webkit.WebView;

        $f0 = virtualinvoke r0.<android.webkit.WebView: float getHorizontalScrollFactor()>();

        return $f0;
    }

    static void access$1700(android.webkit.WebView, int, int)
    {
        android.webkit.WebView r0;
        int i0, i1;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<android.webkit.WebView: void setMeasuredDimension(int,int)>(i0, i1);

        return;
    }

    static int access$1800(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        int $i0;

        r0 := @parameter0: android.webkit.WebView;

        $i0 = virtualinvoke r0.<android.webkit.WebView: int getHorizontalScrollbarHeight()>();

        return $i0;
    }

    static void access$1901(android.webkit.WebView, android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.webkit.WebView r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: android.graphics.Canvas;

        r2 := @parameter2: android.graphics.drawable.Drawable;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        specialinvoke r0.<android.view.View: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r2, i0, i1, i2, i3);

        return;
    }

    static int access$2002(android.webkit.WebView, int)
    {
        android.webkit.WebView r0;
        int i0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        r0.<android.webkit.WebView: int mScrollX> = i0;

        return i0;
    }

    static int access$2102(android.webkit.WebView, int)
    {
        android.webkit.WebView r0;
        int i0;

        r0 := @parameter0: android.webkit.WebView;

        i0 := @parameter1: int;

        r0.<android.webkit.WebView: int mScrollY> = i0;

        return i0;
    }

    static void <clinit>()
    {
        <android.webkit.WebView: java.lang.String SCHEME_GEO> = "geo:0,0?q=";

        <android.webkit.WebView: java.lang.String SCHEME_MAILTO> = "mailto:";

        <android.webkit.WebView: java.lang.String SCHEME_TEL> = "tel:";

        <android.webkit.WebView: java.lang.String LOGTAG> = "WebView";

        <android.webkit.WebView: java.lang.String DATA_REDUCTION_PROXY_SETTING_CHANGED> = "android.webkit.DATA_REDUCTION_PROXY_SETTING_CHANGED";

        <android.webkit.WebView: boolean sEnforceThreadChecking> = 0;

        return;
    }
}
