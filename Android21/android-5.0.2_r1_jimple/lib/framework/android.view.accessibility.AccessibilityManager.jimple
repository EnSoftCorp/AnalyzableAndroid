public final class android.view.accessibility.AccessibilityManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    public static final int STATE_FLAG_ACCESSIBILITY_ENABLED;
    public static final int STATE_FLAG_TOUCH_EXPLORATION_ENABLED;
    public static final int STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED;
    public static final int DALTONIZER_DISABLED;
    public static final int DALTONIZER_SIMULATE_MONOCHROMACY;
    public static final int DALTONIZER_CORRECT_DEUTERANOMALY;
    static final java.lang.Object sInstanceSync;
    private static android.view.accessibility.AccessibilityManager sInstance;
    private final java.lang.Object mLock;
    private android.view.accessibility.IAccessibilityManager mService;
    final int mUserId;
    final android.os.Handler mHandler;
    boolean mIsEnabled;
    boolean mIsTouchExplorationEnabled;
    boolean mIsHighTextContrastEnabled;
    private final java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners;
    private final java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners;
    private final java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners;
    private final android.view.accessibility.IAccessibilityManagerClient$Stub mClient;

    public static android.view.accessibility.AccessibilityManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r5;
        int i0, $i1, $i2, $i3;
        android.os.IBinder r2;
        android.view.accessibility.IAccessibilityManager r3, $r8;
        java.lang.Throwable r4, $r10;
        android.view.accessibility.AccessibilityManager $r6, $r7, $r9;

        r0 := @parameter0: android.content.Context;

        $r5 = <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        if $r6 != null goto label07;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label02;

        $i2 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $i2 == 0 goto label02;

        $i3 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i3 != 0 goto label03;

     label02:
        i0 = -2;

        goto label04;

     label03:
        i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

     label04:
        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        if r2 != null goto label05;

        $r8 = null;

        goto label06;

     label05:
        $r8 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>(r2);

     label06:
        r3 = $r8;

        $r9 = new android.view.accessibility.AccessibilityManager;

        specialinvoke $r9.<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>(r0, r3, i0);

        <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance> = $r9;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label10:
        throw r4;

     label11:
        $r7 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        return $r7;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void <init>(android.content.Context, android.view.accessibility.IAccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.content.Context r1;
        android.view.accessibility.IAccessibilityManager r2;
        int i0;
        java.lang.Object r3, $r5, $r12;
        java.lang.Throwable r4, $r13;
        java.util.concurrent.CopyOnWriteArrayList $r6, $r7, $r8;
        android.view.accessibility.AccessibilityManager$1 $r9;
        android.view.accessibility.AccessibilityManager$MyHandler $r10;
        android.os.Looper $r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.accessibility.IAccessibilityManager;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock> = $r5;

        $r6 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners> = $r6;

        $r7 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners> = $r7;

        $r8 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r8.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners> = $r8;

        $r9 = new android.view.accessibility.AccessibilityManager$1;

        specialinvoke $r9.<android.view.accessibility.AccessibilityManager$1: void <init>(android.view.accessibility.AccessibilityManager)>(r0);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient> = $r9;

        $r10 = new android.view.accessibility.AccessibilityManager$MyHandler;

        $r11 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r10.<android.view.accessibility.AccessibilityManager$MyHandler: void <init>(android.view.accessibility.AccessibilityManager,android.os.Looper)>(r0, $r11);

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler> = $r10;

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService> = r2;

        r0.<android.view.accessibility.AccessibilityManager: int mUserId> = i0;

        $r12 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r3 = $r12;

        entermonitor $r12;

     label1:
        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void tryConnectToServiceLocked()>();

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.view.accessibility.IAccessibilityManagerClient getClient()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        return $r1;
    }

    public boolean isEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1, $r4;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isTouchExplorationEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1, $r4;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isHighTextContrastEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1, $r4;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.accessibility.IAccessibilityManager r2;
        int i0;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, r5, $r14, $r15;
        boolean $z0, z1;
        long $l1, l3;
        java.lang.IllegalStateException $r7;
        android.os.RemoteException $r8, r16;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;
        java.lang.String $r12;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r6 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r2 != null goto label03;

        exitmonitor r3;

     label02:
        return;

     label03:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        if $z0 != 0 goto label04;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw $r7;

     label04:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r3;

     label07:
        throw r4;

     label08:
        z1 = 0;

     label09:
        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>($l1);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        z1 = interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>(r1, i0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label10:
        if z1 == 0 goto label16;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        goto label16;

     label11:
        $r8 := @caughtexception;

        r16 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", $r12, r16);

     label12:
        if z1 == 0 goto label16;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        goto label16;

     label13:
        $r15 := @caughtexception;

        r5 = $r15;

     label14:
        if z1 == 0 goto label15;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label15:
        throw r5;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void interrupt()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManager r1;
        int i0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        android.os.RemoteException $r6, r8;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r1 != null goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        if $z0 != 0 goto label04;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw $r5;

     label04:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label07:
        throw r3;

     label08:
        interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: void interrupt(int)>(i0);

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        r8 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while requesting interrupt from all services. ", r8);

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public java.util.List getAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.util.List r1, $r5;
        java.util.ArrayList r2, $r4;
        int i0, i1;
        android.accessibilityservice.AccessibilityServiceInfo r3;
        java.lang.Object $r6;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.ServiceInfo $r8;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (android.accessibilityservice.AccessibilityServiceInfo) $r6;

        $r7 = virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r8 = $r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r5;
    }

    public java.util.List getInstalledAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManager r1;
        int i0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.List $r5, $r6, $r7, r10;
        android.os.RemoteException $r9, r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r1 != null goto label03;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r2;

     label02:
        return $r7;

     label03:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        r10 = null;

     label08:
        r10 = interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>(i0);

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        r11 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the installed AccessibilityServices. ", r11);

     label11:
        if r10 == null goto label12;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r10);

        return $r6;

     label12:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public java.util.List getEnabledAccessibilityServiceList(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, i1;
        android.view.accessibility.IAccessibilityManager r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.util.List $r5, $r6, $r7, r10;
        android.os.RemoteException $r8, r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r1 != null goto label03;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r2;

     label02:
        return $r7;

     label03:
        i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        r10 = null;

     label08:
        r10 = interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>(i0, i1);

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        r11 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the installed AccessibilityServices. ", r11);

     label11:
        if r10 == null goto label12;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r10);

        return $r6;

     label12:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    private void setStateLocked(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, z3, z4, z5, $z8, $z10, $z11;
        android.os.Handler $r1, $r2, $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $z10 = 1;

        goto label2;

     label1:
        $z10 = 0;

     label2:
        z0 = $z10;

        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        $z11 = 1;

        goto label4;

     label3:
        $z11 = 0;

     label4:
        z1 = $z11;

        $i3 = i0 & 4;

        if $i3 == 0 goto label5;

        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        z2 = $z8;

        z3 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        z4 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        z5 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled> = z0;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled> = z1;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled> = z2;

        if z3 == z0 goto label7;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

     label7:
        if z4 == z1 goto label8;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

     label8:
        if z5 == z2 goto label9;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(3);

     label9:
        return;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.view.accessibility.IAccessibilityInteractionConnection)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.IWindow r1;
        android.view.accessibility.IAccessibilityInteractionConnection r2;
        android.view.accessibility.IAccessibilityManager r3;
        int i0, $i1;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r7;
        android.os.RemoteException $r8, r9;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.accessibility.IAccessibilityInteractionConnection;

        $r6 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        r3 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r3 != null goto label3;

        exitmonitor r4;

     label2:
        return -1;

     label3:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r5 = $r7;

        exitmonitor r4;

     label6:
        throw r5;

     label7:
        $i1 = interfaceinvoke r3.<android.view.accessibility.IAccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)>(r1, r2, i0);

     label8:
        return $i1;

     label9:
        $r8 := @caughtexception;

        r9 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while adding an accessibility interaction connection. ", r9);

        return -1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch android.os.RemoteException from label7 to label8 with label9;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.IWindow r1;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r7;
        android.os.RemoteException $r6, r8;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.IWindow;

        $r5 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if r2 != null goto label03;

        exitmonitor r3;

     label02:
        return;

     label03:
        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>(r1);

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        r8 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while removing an accessibility interaction connection. ", r8);

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    private android.view.accessibility.IAccessibilityManager getServiceLocked()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManager $r1, $r2;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        if $r1 != null goto label1;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void tryConnectToServiceLocked()>();

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        return $r2;
    }

    private void tryConnectToServiceLocked()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.IBinder r1;
        android.view.accessibility.IAccessibilityManager r2;
        int i0, $i1;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r3;
        android.os.RemoteException $r4, r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>(r1);

     label2:
        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        $i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        i0 = interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>($r3, $i1);

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setStateLocked(int)>(i0);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService> = r2;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r5 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "AccessibilityManagerService is dead", r5);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleNotifyAccessibilityStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0;
        java.lang.Object r1, $r3, $r6;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener $r7;
        int i0, i1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        i0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        $r5 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        $r7 = (android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener) $r6;

        interfaceinvoke $r7.<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleNotifyTouchExplorationStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0;
        java.lang.Object r1, $r3, $r6;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener $r7;
        int i0, i1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        i0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        $r5 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        $r7 = (android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener) $r6;

        interfaceinvoke $r7.<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleNotifyHighTextContrastStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0;
        java.lang.Object r1, $r3, $r6;
        java.lang.Throwable r2, $r8;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener $r7;
        int i0, i1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners>;

        i0 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        $r5 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mHighTextContrastStateChangeListeners>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        $r7 = (android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener) $r6;

        interfaceinvoke $r7.<android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener: void onHighTextContrastStateChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void access$000(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void handleNotifyAccessibilityStateChanged()>();

        return;
    }

    static void access$100(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void handleNotifyTouchExplorationStateChanged()>();

        return;
    }

    static void access$200(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void handleNotifyHighTextContrastStateChanged()>();

        return;
    }

    static java.lang.Object access$300(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        return $r1;
    }

    static void access$400(android.view.accessibility.AccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setStateLocked(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_CORRECT_DEUTERANOMALY> = 12;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_SIMULATE_MONOCHROMACY> = 0;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_DISABLED> = -1;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED> = 4;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_TOUCH_EXPLORATION_ENABLED> = 2;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_ACCESSIBILITY_ENABLED> = 1;

        <android.view.accessibility.AccessibilityManager: java.lang.String LOG_TAG> = "AccessibilityManager";

        <android.view.accessibility.AccessibilityManager: boolean DEBUG> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync> = $r0;

        return;
    }
}
