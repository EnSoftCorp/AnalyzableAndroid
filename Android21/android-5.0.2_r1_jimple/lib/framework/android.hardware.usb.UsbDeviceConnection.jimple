public class android.hardware.usb.UsbDeviceConnection extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.hardware.usb.UsbDevice mDevice;
    private long mNativeContext;

    public void <init>(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbDevice r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbDevice mDevice> = r1;

        return;
    }

    boolean open(java.lang.String, android.os.ParcelFileDescriptor)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        java.lang.String r1;
        android.os.ParcelFileDescriptor r2;
        java.io.FileDescriptor $r3;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        $r3 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_open(java.lang.String,java.io.FileDescriptor)>(r1, $r3);

        return $z0;
    }

    public void close()
    {
        android.hardware.usb.UsbDeviceConnection r0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: void native_close()>();

        return;
    }

    public int getFileDescriptor()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int $i0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $i0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_get_fd()>();

        return $i0;
    }

    public byte[] getRawDescriptors()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        byte[] $r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: byte[] native_get_desc()>();

        return $r1;
    }

    public boolean claimInterface(android.hardware.usb.UsbInterface, boolean)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $z1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_claim_interface(int,boolean)>($i0, z0);

        return $z1;
    }

    public boolean releaseInterface(android.hardware.usb.UsbInterface)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_release_interface(int)>($i0);

        return $z0;
    }

    public boolean setInterface(android.hardware.usb.UsbInterface)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbInterface r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbInterface;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getId()>();

        $i1 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getAlternateSetting()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_set_interface(int,int)>($i0, $i1);

        return $z0;
    }

    public boolean setConfiguration(android.hardware.usb.UsbConfiguration)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbConfiguration r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbConfiguration;

        $i0 = virtualinvoke r1.<android.hardware.usb.UsbConfiguration: int getId()>();

        $z0 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: boolean native_set_configuration(int)>($i0);

        return $z0;
    }

    public int controlTransfer(int, int, int, int, byte[], int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        byte[] r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        $i6 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)>(i0, i1, i2, i3, r1, 0, i4, i5);

        return $i6;
    }

    public int controlTransfer(int, int, int, int, byte[], int, int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        byte[] r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        staticinvoke <android.hardware.usb.UsbDeviceConnection: void checkBounds(byte[],int,int)>(r1, i4, i5);

        $i7 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_control_request(int,int,int,int,byte[],int,int,int)>(i0, i1, i2, i3, r1, i4, i5, i6);

        return $i7;
    }

    public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbEndpoint r1;
        byte[] r2;
        int i0, i1, $i2;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbEndpoint;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)>(r1, r2, 0, i0, i1);

        return $i2;
    }

    public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int, int)
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbEndpoint r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 := @parameter0: android.hardware.usb.UsbEndpoint;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <android.hardware.usb.UsbDeviceConnection: void checkBounds(byte[],int,int)>(r2, i0, i1);

        $i3 = virtualinvoke r1.<android.hardware.usb.UsbEndpoint: int getAddress()>();

        $i4 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: int native_bulk_request(int,byte[],int,int,int)>($i3, r2, i0, i1, i2);

        return $i4;
    }

    public android.hardware.usb.UsbRequest requestWait()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        android.hardware.usb.UsbRequest r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest native_request_wait()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.hardware.usb.UsbRequest: void dequeue()>();

     label1:
        return r1;
    }

    public java.lang.String getSerial()
    {
        android.hardware.usb.UsbDeviceConnection r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.usb.UsbDeviceConnection;

        $r1 = specialinvoke r0.<android.hardware.usb.UsbDeviceConnection: java.lang.String native_get_serial()>();

        return $r1;
    }

    private static void checkBounds(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 == null goto label1;

        $i4 = lengthof r0;

        goto label2;

     label1:
        $i4 = 0;

     label2:
        i2 = $i4;

        if i0 < 0 goto label3;

        $i3 = i0 + i1;

        if $i3 <= i2 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer start or length out of bounds.");

        throw $r1;

     label4:
        return;
    }

    private native boolean native_open(java.lang.String, java.io.FileDescriptor);

    private native void native_close();

    private native int native_get_fd();

    private native byte[] native_get_desc();

    private native boolean native_claim_interface(int, boolean);

    private native boolean native_release_interface(int);

    private native boolean native_set_interface(int, int);

    private native boolean native_set_configuration(int);

    private native int native_control_request(int, int, int, int, byte[], int, int, int);

    private native int native_bulk_request(int, byte[], int, int, int);

    private native android.hardware.usb.UsbRequest native_request_wait();

    private native java.lang.String native_get_serial();

    public static void <clinit>()
    {
        <android.hardware.usb.UsbDeviceConnection: java.lang.String TAG> = "UsbDeviceConnection";

        return;
    }
}
