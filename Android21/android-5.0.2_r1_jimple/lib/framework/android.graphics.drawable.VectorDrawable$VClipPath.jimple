class android.graphics.drawable.VectorDrawable$VClipPath extends android.graphics.drawable.VectorDrawable$VPath
{

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>()>();

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VClipPath)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0, r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VPath: void <init>(android.graphics.drawable.VectorDrawable$VPath)>(r1);

        return;
    }

    public void inflate(android.content.res.Resources, android.util.AttributeSet, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        android.content.res.Resources r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        android.content.res.TypedArray r4;
        int[] $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.util.AttributeSet;

        r3 := @parameter2: android.content.res.Resources$Theme;

        $r5 = <com.android.internal.R$styleable: int[] VectorDrawableClipPath>;

        r4 = staticinvoke <android.graphics.drawable.Drawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r3, r2, $r5);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable$VClipPath: void updateStateFromTypedArray(android.content.res.TypedArray)>(r4);

        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray)
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;
        android.content.res.TypedArray r1;
        java.lang.String r2, r3;
        int $i0, $i1, $i2;
        android.util.PathParser$PathDataNode[] $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        r1 := @parameter0: android.content.res.TypedArray;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations> = $i2;

        r2 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r2 == null goto label1;

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String mPathName> = r2;

     label1:
        r3 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(1);

        if r3 == null goto label2;

        $r4 = staticinvoke <android.util.PathParser: android.util.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>(r3);

        r0.<android.graphics.drawable.VectorDrawable$VClipPath: android.util.PathParser$PathDataNode[] mNodes> = $r4;

     label2:
        return;
    }

    public boolean isClipPath()
    {
        android.graphics.drawable.VectorDrawable$VClipPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VClipPath;

        return 1;
    }
}
