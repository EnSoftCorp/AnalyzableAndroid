public class android.os.UpdateLock extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static android.os.IUpdateLock sService;
    android.os.IBinder mToken;
    int mCount;
    boolean mRefCounted;
    boolean mHeld;
    final java.lang.String mTag;
    public static final java.lang.String UPDATE_LOCK_CHANGED;
    public static final java.lang.String NOW_IS_CONVENIENT;
    public static final java.lang.String TIMESTAMP;

    private static void checkService()
    {
        android.os.IUpdateLock $r0, $r2;
        android.os.IBinder $r1;

        $r0 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("updatelock");

        $r2 = staticinvoke <android.os.IUpdateLock$Stub: android.os.IUpdateLock asInterface(android.os.IBinder)>($r1);

        <android.os.UpdateLock: android.os.IUpdateLock sService> = $r2;

     label1:
        return;
    }

    public void <init>(java.lang.String)
    {
        android.os.UpdateLock r0;
        java.lang.String r1;
        android.os.Binder $r2;

        r0 := @this: android.os.UpdateLock;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.UpdateLock: int mCount> = 0;

        r0.<android.os.UpdateLock: boolean mRefCounted> = 1;

        r0.<android.os.UpdateLock: boolean mHeld> = 0;

        r0.<android.os.UpdateLock: java.lang.String mTag> = r1;

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.os.UpdateLock: android.os.IBinder mToken> = $r2;

        return;
    }

    public void setReferenceCounted(boolean)
    {
        android.os.UpdateLock r0;
        boolean z0;

        r0 := @this: android.os.UpdateLock;

        z0 := @parameter0: boolean;

        r0.<android.os.UpdateLock: boolean mRefCounted> = z0;

        return;
    }

    public boolean isHeld()
    {
        android.os.UpdateLock r0;
        android.os.IBinder r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: android.os.UpdateLock;

        $r3 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<android.os.UpdateLock: boolean mHeld>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void acquire()
    {
        android.os.UpdateLock r0;
        android.os.IBinder r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.os.UpdateLock;

        staticinvoke <android.os.UpdateLock: void checkService()>();

        $r3 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.os.UpdateLock: void acquireLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void acquireLocked()
    {
        android.os.UpdateLock r0;
        boolean $z0;
        android.os.IUpdateLock $r2, $r5;
        java.lang.String $r3;
        android.os.IBinder $r4;
        int $i0, $i1;
        android.os.RemoteException $r6;

        r0 := @this: android.os.UpdateLock;

        $z0 = r0.<android.os.UpdateLock: boolean mRefCounted>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.os.UpdateLock: int mCount>;

        $i1 = $i0 + 1;

        r0.<android.os.UpdateLock: int mCount> = $i1;

        if $i0 != 0 goto label6;

     label1:
        $r2 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        if $r2 == null goto label5;

     label2:
        $r5 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        $r4 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        $r3 = r0.<android.os.UpdateLock: java.lang.String mTag>;

        interfaceinvoke $r5.<android.os.IUpdateLock: void acquireUpdateLock(android.os.IBinder,java.lang.String)>($r4, $r3);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UpdateLock", "Unable to contact service to acquire");

     label5:
        r0.<android.os.UpdateLock: boolean mHeld> = 1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void release()
    {
        android.os.UpdateLock r0;
        android.os.IBinder r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.os.UpdateLock;

        staticinvoke <android.os.UpdateLock: void checkService()>();

        $r3 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.os.UpdateLock: void releaseLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void releaseLocked()
    {
        android.os.UpdateLock r0;
        boolean $z0;
        android.os.IUpdateLock $r2, $r5;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r3;
        android.os.IBinder $r4;
        android.os.RemoteException $r6;

        r0 := @this: android.os.UpdateLock;

        $z0 = r0.<android.os.UpdateLock: boolean mRefCounted>;

        if $z0 == 0 goto label1;

        $i1 = r0.<android.os.UpdateLock: int mCount>;

        $i2 = $i1 - 1;

        r0.<android.os.UpdateLock: int mCount> = $i2;

        if $i2 != 0 goto label6;

     label1:
        $r2 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        if $r2 == null goto label5;

     label2:
        $r5 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        $r4 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        interfaceinvoke $r5.<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UpdateLock", "Unable to contact service to release");

     label5:
        r0.<android.os.UpdateLock: boolean mHeld> = 0;

     label6:
        $i0 = r0.<android.os.UpdateLock: int mCount>;

        if $i0 >= 0 goto label7;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("UpdateLock under-locked");

        throw $r3;

     label7:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.os.UpdateLock r0;
        android.os.IBinder r1, $r4, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        android.os.IUpdateLock $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.os.UpdateLock;

        $r4 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<android.os.UpdateLock: boolean mHeld>;

        if $z0 == 0 goto label5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("UpdateLock", "UpdateLock finalized while still held");

     label2:
        $r6 = <android.os.UpdateLock: android.os.IUpdateLock sService>;

        $r5 = r0.<android.os.UpdateLock: android.os.IBinder mToken>;

        interfaceinvoke $r6.<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>($r5);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UpdateLock", "Unable to contact service to release");

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static void <clinit>()
    {
        <android.os.UpdateLock: java.lang.String TIMESTAMP> = "timestamp";

        <android.os.UpdateLock: java.lang.String NOW_IS_CONVENIENT> = "nowisconvenient";

        <android.os.UpdateLock: java.lang.String UPDATE_LOCK_CHANGED> = "android.os.UpdateLock.UPDATE_LOCK_CHANGED";

        <android.os.UpdateLock: java.lang.String TAG> = "UpdateLock";

        <android.os.UpdateLock: boolean DEBUG> = 0;

        return;
    }
}
