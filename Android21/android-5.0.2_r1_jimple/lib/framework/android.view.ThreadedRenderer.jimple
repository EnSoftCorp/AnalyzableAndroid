public class android.view.ThreadedRenderer extends android.view.HardwareRenderer
{
    private static final java.lang.String LOGTAG;
    private static final int SYNC_OK;
    private static final int SYNC_INVALIDATE_REQUIRED;
    private static final java.lang.String[] VISUALIZERS;
    private int mWidth;
    private int mHeight;
    private int mSurfaceWidth;
    private int mSurfaceHeight;
    private int mInsetTop;
    private int mInsetLeft;
    private boolean mHasInsets;
    private final float mLightY;
    private final float mLightZ;
    private final float mLightRadius;
    private final int mAmbientShadowAlpha;
    private final int mSpotShadowAlpha;
    private long mNativeProxy;
    private boolean mInitialized;
    private android.view.RenderNode mRootNode;
    private android.view.Choreographer mChoreographer;
    private boolean mProfilingEnabled;
    private boolean mRootNodeNeedsUpdate;

    void <init>(android.content.Context, boolean)
    {
        android.view.ThreadedRenderer r0;
        android.content.Context r1;
        boolean z0;
        android.content.res.TypedArray r2;
        long l0, $l3, $l4, $l5, $l6;
        int[] $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int $i1, $i2;
        android.view.RenderNode $r4, $r5;
        android.view.ThreadedRenderer$AtlasInitializer $r6;
        android.view.Choreographer $r7, $r8;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.HardwareRenderer: void <init>()>();

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 0;

        $r3 = <com.android.internal.R$styleable: int[] Lighting>;

        r2 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r3, 0, 0);

        $f0 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(2, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightY> = $f0;

        $f1 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(3, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightZ> = $f1;

        $f2 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(4, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightRadius> = $f2;

        $f3 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.0F);

        $f4 = 255.0F * $f3;

        $f5 = $f4 + 0.5F;

        $i1 = (int) $f5;

        r0.<android.view.ThreadedRenderer: int mAmbientShadowAlpha> = $i1;

        $f6 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(1, 0.0F);

        $f8 = 255.0F * $f6;

        $f7 = $f8 + 0.5F;

        $i2 = (int) $f7;

        r0.<android.view.ThreadedRenderer: int mSpotShadowAlpha> = $i2;

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        l0 = staticinvoke <android.view.ThreadedRenderer: long nCreateRootRenderNode()>();

        $r5 = staticinvoke <android.view.RenderNode: android.view.RenderNode adopt(long)>(l0);

        r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode> = $r5;

        $r4 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        virtualinvoke $r4.<android.view.RenderNode: boolean setClipToBounds(boolean)>(0);

        $l3 = staticinvoke <android.view.ThreadedRenderer: long nCreateProxy(boolean,long)>(z0, l0);

        r0.<android.view.ThreadedRenderer: long mNativeProxy> = $l3;

        $r6 = <android.view.ThreadedRenderer$AtlasInitializer: android.view.ThreadedRenderer$AtlasInitializer sInstance>;

        $l4 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        virtualinvoke $r6.<android.view.ThreadedRenderer$AtlasInitializer: void init(android.content.Context,long)>(r1, $l4);

        $r8 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r0.<android.view.ThreadedRenderer: android.view.Choreographer mChoreographer> = $r8;

        $l6 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $r7 = r0.<android.view.ThreadedRenderer: android.view.Choreographer mChoreographer>;

        $l5 = virtualinvoke $r7.<android.view.Choreographer: long getFrameIntervalNanos()>();

        staticinvoke <android.view.ThreadedRenderer: void nSetFrameInterval(long,long)>($l6, $l5);

        virtualinvoke r0.<android.view.ThreadedRenderer: boolean loadSystemProperties()>();

        return;
    }

    void destroy()
    {
        android.view.ThreadedRenderer r0;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 0;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(null);

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nDestroy(long)>($l0);

        return;
    }

    private void updateEnabledState(android.view.Surface)
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        boolean $z0, $z1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.ThreadedRenderer: void setEnabled(boolean)>(0);

        goto label3;

     label2:
        $z1 = r0.<android.view.ThreadedRenderer: boolean mInitialized>;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setEnabled(boolean)>($z1);

     label3:
        return;
    }

    boolean initialize(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        boolean z0;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 1;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(r1);

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        z0 = staticinvoke <android.view.ThreadedRenderer: boolean nInitialize(long,android.view.Surface)>($l0, r1);

        virtualinvoke r1.<android.view.Surface: void allocateBuffers()>();

        return z0;
    }

    void updateSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(r1);

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nUpdateSurface(long,android.view.Surface)>($l0, r1);

        return;
    }

    void pauseSurface(android.view.Surface)
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nPauseSurface(long,android.view.Surface)>($l0, r1);

        return;
    }

    void destroyHardwareResources(android.view.View)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        staticinvoke <android.view.ThreadedRenderer: void destroyResources(android.view.View)>(r1);

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nDestroyHardwareResources(long)>($l0);

        return;
    }

    private static void destroyResources(android.view.View)
    {
        android.view.View r0, $r2;
        android.view.ViewGroup r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void destroyHardwareResources()>();

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r1 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ThreadedRenderer: void destroyResources(android.view.View)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void invalidate(android.view.Surface)
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        virtualinvoke r0.<android.view.ThreadedRenderer: void updateSurface(android.view.Surface)>(r1);

        return;
    }

    void detachSurfaceTexture(long)
    {
        android.view.ThreadedRenderer r0;
        long l0, $l1;

        r0 := @this: android.view.ThreadedRenderer;

        l0 := @parameter0: long;

        $l1 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nDetachSurfaceTexture(long,long)>($l1, l0);

        return;
    }

    void setup(int, int, android.graphics.Rect)
    {
        android.view.ThreadedRenderer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.graphics.Rect r1;
        float f0, $f1, $f2, $f3, $f4;
        android.view.RenderNode $r2;
        long $l11;
        boolean $z1;

        r0 := @this: android.view.ThreadedRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $f1 = (float) i0;

        f0 = $f1 / 2.0F;

        r0.<android.view.ThreadedRenderer: int mWidth> = i0;

        r0.<android.view.ThreadedRenderer: int mHeight> = i1;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        r0.<android.view.ThreadedRenderer: boolean mHasInsets> = 1;

        $i13 = r1.<android.graphics.Rect: int left>;

        r0.<android.view.ThreadedRenderer: int mInsetLeft> = $i13;

        $i15 = r1.<android.graphics.Rect: int top>;

        r0.<android.view.ThreadedRenderer: int mInsetTop> = $i15;

        $i14 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $i16 = i0 + $i14;

        $i17 = r1.<android.graphics.Rect: int right>;

        $i19 = $i16 + $i17;

        r0.<android.view.ThreadedRenderer: int mSurfaceWidth> = $i19;

        $i18 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $i20 = i1 + $i18;

        $i21 = r1.<android.graphics.Rect: int bottom>;

        $i22 = $i20 + $i21;

        r0.<android.view.ThreadedRenderer: int mSurfaceHeight> = $i22;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setOpaque(boolean)>(0);

        goto label2;

     label1:
        r0.<android.view.ThreadedRenderer: boolean mHasInsets> = 0;

        r0.<android.view.ThreadedRenderer: int mInsetLeft> = 0;

        r0.<android.view.ThreadedRenderer: int mInsetTop> = 0;

        r0.<android.view.ThreadedRenderer: int mSurfaceWidth> = i0;

        r0.<android.view.ThreadedRenderer: int mSurfaceHeight> = i1;

     label2:
        $r2 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        $i2 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $i7 = neg $i2;

        $i3 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $i6 = neg $i3;

        $i5 = r0.<android.view.ThreadedRenderer: int mSurfaceWidth>;

        $i4 = r0.<android.view.ThreadedRenderer: int mSurfaceHeight>;

        virtualinvoke $r2.<android.view.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>($i7, $i6, $i5, $i4);

        $l11 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $i12 = r0.<android.view.ThreadedRenderer: int mSurfaceWidth>;

        $i10 = r0.<android.view.ThreadedRenderer: int mSurfaceHeight>;

        $f4 = r0.<android.view.ThreadedRenderer: float mLightY>;

        $f2 = r0.<android.view.ThreadedRenderer: float mLightZ>;

        $f3 = r0.<android.view.ThreadedRenderer: float mLightRadius>;

        $i9 = r0.<android.view.ThreadedRenderer: int mAmbientShadowAlpha>;

        $i8 = r0.<android.view.ThreadedRenderer: int mSpotShadowAlpha>;

        staticinvoke <android.view.ThreadedRenderer: void nSetup(long,int,int,float,float,float,float,int,int)>($l11, $i12, $i10, f0, $f4, $f2, $f3, $i9, $i8);

        return;
    }

    void setOpaque(boolean)
    {
        android.view.ThreadedRenderer r0;
        boolean z0, $z1, $z2;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        if z0 == 0 goto label1;

        $z1 = r0.<android.view.ThreadedRenderer: boolean mHasInsets>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.view.ThreadedRenderer: void nSetOpaque(long,boolean)>($l0, $z2);

        return;
    }

    int getWidth()
    {
        android.view.ThreadedRenderer r0;
        int $i0;

        r0 := @this: android.view.ThreadedRenderer;

        $i0 = r0.<android.view.ThreadedRenderer: int mWidth>;

        return $i0;
    }

    int getHeight()
    {
        android.view.ThreadedRenderer r0;
        int $i0;

        r0 := @this: android.view.ThreadedRenderer;

        $i0 = r0.<android.view.ThreadedRenderer: int mHeight>;

        return $i0;
    }

    void dumpGfxInfo(java.io.PrintWriter, java.io.FileDescriptor)
    {
        android.view.ThreadedRenderer r0;
        java.io.PrintWriter r1;
        java.io.FileDescriptor r2;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.FileDescriptor;

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nDumpProfileInfo(long,java.io.FileDescriptor)>($l0, r2);

        return;
    }

    private static int search(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        $r2 = r0[i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static boolean checkIfProfilingRequested()
    {
        java.lang.String r0;
        int i0;
        java.lang.String[] $r1;
        boolean $z0, $z1;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.hwui.profile");

        $r1 = <android.view.ThreadedRenderer: java.lang.String[] VISUALIZERS>;

        i0 = staticinvoke <android.view.ThreadedRenderer: int search(java.lang.String[],java.lang.String)>($r1, r0);

        if i0 >= 0 goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    boolean loadSystemProperties()
    {
        android.view.ThreadedRenderer r0;
        boolean z0, z1, $z2;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        z0 = staticinvoke <android.view.ThreadedRenderer: boolean nLoadSystemProperties(long)>($l0);

        z1 = staticinvoke <android.view.ThreadedRenderer: boolean checkIfProfilingRequested()>();

        $z2 = r0.<android.view.ThreadedRenderer: boolean mProfilingEnabled>;

        if z1 == $z2 goto label1;

        r0.<android.view.ThreadedRenderer: boolean mProfilingEnabled> = z1;

        z0 = 1;

     label1:
        return z0;
    }

    private void updateViewTreeDisplayList(android.view.View)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 32;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r1.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -2147483648;

        if $i3 != -2147483648 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r1.<android.view.View: boolean mRecreateDisplayList> = $z0;

        $i4 = r1.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 2147483647;

        r1.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r1.<android.view.View: android.view.RenderNode getDisplayList()>();

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        return;
    }

    private void updateRootDisplayList(android.view.View, android.view.HardwareRenderer$HardwareDrawCallbacks)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        android.view.HardwareRenderer$HardwareDrawCallbacks r2;
        android.view.HardwareCanvas r3;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r4, $r10;
        boolean $z0, $z1;
        android.view.RenderNode $r5, $r6, $r7, $r8, $r9;
        float $f0, $f1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.HardwareRenderer$HardwareDrawCallbacks;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "getDisplayList");

        specialinvoke r0.<android.view.ThreadedRenderer: void updateViewTreeDisplayList(android.view.View)>(r1);

        $z0 = r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate>;

        if $z0 != 0 goto label1;

        $r8 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        $z1 = virtualinvoke $r8.<android.view.RenderNode: boolean isValid()>();

        if $z1 != 0 goto label6;

     label1:
        $r5 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        $i2 = r0.<android.view.ThreadedRenderer: int mSurfaceWidth>;

        $i1 = r0.<android.view.ThreadedRenderer: int mSurfaceHeight>;

        r3 = virtualinvoke $r5.<android.view.RenderNode: android.view.HardwareCanvas start(int,int)>($i2, $i1);

     label2:
        i0 = virtualinvoke r3.<android.view.HardwareCanvas: int save()>();

        $i3 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $f1 = (float) $i3;

        $i4 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $f0 = (float) $i4;

        virtualinvoke r3.<android.view.HardwareCanvas: void translate(float,float)>($f1, $f0);

        interfaceinvoke r2.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePreDraw(android.view.HardwareCanvas)>(r3);

        virtualinvoke r3.<android.view.HardwareCanvas: void insertReorderBarrier()>();

        $r7 = virtualinvoke r1.<android.view.View: android.view.RenderNode getDisplayList()>();

        virtualinvoke r3.<android.view.HardwareCanvas: void drawRenderNode(android.view.RenderNode)>($r7);

        virtualinvoke r3.<android.view.HardwareCanvas: void insertInorderBarrier()>();

        interfaceinvoke r2.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePostDraw(android.view.HardwareCanvas)>(r3);

        virtualinvoke r3.<android.view.HardwareCanvas: void restoreToCount(int)>(i0);

        r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate> = 0;

     label3:
        $r6 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        virtualinvoke $r6.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r3);

        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

     label5:
        $r9 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        virtualinvoke $r9.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r3);

        throw r4;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void invalidateRoot()
    {
        android.view.ThreadedRenderer r0;

        r0 := @this: android.view.ThreadedRenderer;

        r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate> = 1;

        return;
    }

    void draw(android.view.View, android.view.View$AttachInfo, android.view.HardwareRenderer$HardwareDrawCallbacks)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        android.view.View$AttachInfo r2;
        android.view.HardwareRenderer$HardwareDrawCallbacks r3;
        long l0, l1, $l4, $l5, $l7;
        int i2, i3, $i6, i8;
        android.view.Choreographer $r4;
        boolean $z0, $z1;
        java.util.List $r5, $r8, $r10, $r12;
        android.content.res.Resources $r6;
        float $f0;
        android.util.DisplayMetrics $r7;
        android.view.ViewRootImpl $r9;
        java.lang.Object $r11;
        android.view.RenderNode $r13;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View$AttachInfo;

        r3 := @parameter2: android.view.HardwareRenderer$HardwareDrawCallbacks;

        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

        $r4 = r0.<android.view.ThreadedRenderer: android.view.Choreographer mChoreographer>;

        l0 = virtualinvoke $r4.<android.view.Choreographer: long getFrameTimeNanos()>();

        $l4 = l0 / 1000000L;

        r2.<android.view.View$AttachInfo: long mDrawingTime> = $l4;

        l1 = 0L;

        $z0 = r0.<android.view.ThreadedRenderer: boolean mProfilingEnabled>;

        if $z0 == 0 goto label1;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label1:
        specialinvoke r0.<android.view.ThreadedRenderer: void updateRootDisplayList(android.view.View,android.view.HardwareRenderer$HardwareDrawCallbacks)>(r1, r3);

        $z1 = r0.<android.view.ThreadedRenderer: boolean mProfilingEnabled>;

        if $z1 == 0 goto label2;

        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = $l7 - l1;

     label2:
        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

        $r5 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r5 == null goto label5;

        $r8 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $r12 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        $r11 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i3);

        $r13 = (android.view.RenderNode) $r11;

        virtualinvoke r0.<android.view.ThreadedRenderer: void registerAnimatingRenderNode(android.view.RenderNode)>($r13);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r10 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes> = null;

     label5:
        $l5 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $r6 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r7.<android.util.DisplayMetrics: float density>;

        i8 = staticinvoke <android.view.ThreadedRenderer: int nSyncAndDrawFrame(long,long,long,float)>($l5, l0, l1, $f0);

        $i6 = i8 & 1;

        if $i6 == 0 goto label6;

        $r9 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r9.<android.view.ViewRootImpl: void invalidate()>();

     label6:
        return;
    }

    static void invokeFunctor(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <android.view.ThreadedRenderer: void nInvokeFunctor(long,boolean)>(l0, z0);

        return;
    }

    android.view.HardwareLayer createTextureLayer()
    {
        android.view.ThreadedRenderer r0;
        long l0, $l1;
        android.view.HardwareLayer $r1;

        r0 := @this: android.view.ThreadedRenderer;

        $l1 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        l0 = staticinvoke <android.view.ThreadedRenderer: long nCreateTextureLayer(long)>($l1);

        $r1 = staticinvoke <android.view.HardwareLayer: android.view.HardwareLayer adoptTextureLayer(android.view.HardwareRenderer,long)>(r0, l0);

        return $r1;
    }

    void buildLayer(android.view.RenderNode)
    {
        android.view.ThreadedRenderer r0;
        android.view.RenderNode r1;
        long $l0, $l1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.RenderNode;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.RenderNode: long getNativeDisplayList()>();

        staticinvoke <android.view.ThreadedRenderer: void nBuildLayer(long,long)>($l0, $l1);

        return;
    }

    boolean copyLayerInto(android.view.HardwareLayer, android.graphics.Bitmap)
    {
        android.view.ThreadedRenderer r0;
        android.view.HardwareLayer r1;
        android.graphics.Bitmap r2;
        long $l0, $l1, $l2;
        boolean $z0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.HardwareLayer;

        r2 := @parameter1: android.graphics.Bitmap;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.HardwareLayer: long getDeferredLayerUpdater()>();

        $l2 = r2.<android.graphics.Bitmap: long mNativeBitmap>;

        $z0 = staticinvoke <android.view.ThreadedRenderer: boolean nCopyLayerInto(long,long,long)>($l0, $l1, $l2);

        return $z0;
    }

    void pushLayerUpdate(android.view.HardwareLayer)
    {
        android.view.ThreadedRenderer r0;
        android.view.HardwareLayer r1;
        long $l0, $l1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.HardwareLayer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.HardwareLayer: long getDeferredLayerUpdater()>();

        staticinvoke <android.view.ThreadedRenderer: void nPushLayerUpdate(long,long)>($l0, $l1);

        return;
    }

    void onLayerDestroyed(android.view.HardwareLayer)
    {
        android.view.ThreadedRenderer r0;
        android.view.HardwareLayer r1;
        long $l0, $l1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.HardwareLayer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        $l1 = virtualinvoke r1.<android.view.HardwareLayer: long getDeferredLayerUpdater()>();

        staticinvoke <android.view.ThreadedRenderer: void nCancelLayerUpdate(long,long)>($l0, $l1);

        return;
    }

    void setName(java.lang.String)
    {
        android.view.ThreadedRenderer r0;
        java.lang.String r1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: java.lang.String;

        return;
    }

    void fence()
    {
        android.view.ThreadedRenderer r0;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nFence(long)>($l0);

        return;
    }

    void stopDrawing()
    {
        android.view.ThreadedRenderer r0;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nStopDrawing(long)>($l0);

        return;
    }

    public void notifyFramePending()
    {
        android.view.ThreadedRenderer r0;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nNotifyFramePending(long)>($l0);

        return;
    }

    void registerAnimatingRenderNode(android.view.RenderNode)
    {
        android.view.ThreadedRenderer r0;
        android.view.RenderNode r1, $r2;
        long $l0, $l1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.RenderNode;

        $r2 = r0.<android.view.ThreadedRenderer: android.view.RenderNode mRootNode>;

        $l1 = $r2.<android.view.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.ThreadedRenderer: void nRegisterAnimatingRenderNode(long,long)>($l1, $l0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.ThreadedRenderer r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: android.view.ThreadedRenderer;

     label1:
        $l0 = r0.<android.view.ThreadedRenderer: long mNativeProxy>;

        staticinvoke <android.view.ThreadedRenderer: void nDeleteProxy(long)>($l0);

        r0.<android.view.ThreadedRenderer: long mNativeProxy> = 0L;

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void trimMemory(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.ThreadedRenderer: void nTrimMemory(int)>(i0);

        return;
    }

    static native void setupShadersDiskCache(java.lang.String);

    private static native void nSetAtlas(long, android.view.GraphicBuffer, long[]);

    private static native long nCreateRootRenderNode();

    private static native long nCreateProxy(boolean, long);

    private static native void nDeleteProxy(long);

    private static native void nSetFrameInterval(long, long);

    private static native boolean nLoadSystemProperties(long);

    private static native boolean nInitialize(long, android.view.Surface);

    private static native void nUpdateSurface(long, android.view.Surface);

    private static native void nPauseSurface(long, android.view.Surface);

    private static native void nSetup(long, int, int, float, float, float, float, int, int);

    private static native void nSetOpaque(long, boolean);

    private static native int nSyncAndDrawFrame(long, long, long, float);

    private static native void nDestroy(long);

    private static native void nRegisterAnimatingRenderNode(long, long);

    private static native void nInvokeFunctor(long, boolean);

    private static native long nCreateTextureLayer(long);

    private static native void nBuildLayer(long, long);

    private static native boolean nCopyLayerInto(long, long, long);

    private static native void nPushLayerUpdate(long, long);

    private static native void nCancelLayerUpdate(long, long);

    private static native void nDetachSurfaceTexture(long, long);

    private static native void nDestroyHardwareResources(long);

    private static native void nTrimMemory(int);

    private static native void nFence(long);

    private static native void nStopDrawing(long);

    private static native void nNotifyFramePending(long);

    private static native void nDumpProfileInfo(long, java.io.FileDescriptor);

    static void access$000(long, android.view.GraphicBuffer, long[])
    {
        long l0;
        android.view.GraphicBuffer r0;
        long[] r1;

        l0 := @parameter0: long;

        r0 := @parameter1: android.view.GraphicBuffer;

        r1 := @parameter2: long[];

        staticinvoke <android.view.ThreadedRenderer: void nSetAtlas(long,android.view.GraphicBuffer,long[])>(l0, r0, r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.view.ThreadedRenderer: int SYNC_INVALIDATE_REQUIRED> = 1;

        <android.view.ThreadedRenderer: int SYNC_OK> = 0;

        <android.view.ThreadedRenderer: java.lang.String LOGTAG> = "ThreadedRenderer";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "visual_bars";

        <android.view.ThreadedRenderer: java.lang.String[] VISUALIZERS> = $r0;

        return;
    }
}
