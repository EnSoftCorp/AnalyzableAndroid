public abstract class android.view.Window extends java.lang.Object
{
    public static final int FEATURE_OPTIONS_PANEL;
    public static final int FEATURE_NO_TITLE;
    public static final int FEATURE_PROGRESS;
    public static final int FEATURE_LEFT_ICON;
    public static final int FEATURE_RIGHT_ICON;
    public static final int FEATURE_INDETERMINATE_PROGRESS;
    public static final int FEATURE_CONTEXT_MENU;
    public static final int FEATURE_CUSTOM_TITLE;
    public static final int FEATURE_ACTION_BAR;
    public static final int FEATURE_ACTION_BAR_OVERLAY;
    public static final int FEATURE_ACTION_MODE_OVERLAY;
    public static final int FEATURE_SWIPE_TO_DISMISS;
    public static final int FEATURE_CONTENT_TRANSITIONS;
    public static final int FEATURE_ACTIVITY_TRANSITIONS;
    public static final int FEATURE_MAX;
    public static final int PROGRESS_VISIBILITY_ON;
    public static final int PROGRESS_VISIBILITY_OFF;
    public static final int PROGRESS_INDETERMINATE_ON;
    public static final int PROGRESS_INDETERMINATE_OFF;
    public static final int PROGRESS_START;
    public static final int PROGRESS_END;
    public static final int PROGRESS_SECONDARY_START;
    public static final int PROGRESS_SECONDARY_END;
    public static final java.lang.String STATUS_BAR_BACKGROUND_TRANSITION_NAME;
    public static final java.lang.String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME;
    protected static final int DEFAULT_FEATURES;
    public static final int ID_ANDROID_CONTENT;
    private static final java.lang.String PROPERTY_HARDWARE_UI;
    private final android.content.Context mContext;
    private android.content.res.TypedArray mWindowStyle;
    private android.view.Window$Callback mCallback;
    private android.view.Window$OnWindowDismissedCallback mOnWindowDismissedCallback;
    private android.view.WindowManager mWindowManager;
    private android.os.IBinder mAppToken;
    private java.lang.String mAppName;
    private boolean mHardwareAccelerated;
    private android.view.Window mContainer;
    private android.view.Window mActiveChild;
    private boolean mIsActive;
    private boolean mHasChildren;
    private boolean mCloseOnTouchOutside;
    private boolean mSetCloseOnTouchOutside;
    private int mForcedWindowFlags;
    private int mFeatures;
    private int mLocalFeatures;
    private boolean mHaveWindowFormat;
    private boolean mHaveDimAmount;
    private int mDefaultWindowFormat;
    private boolean mHasSoftInputMode;
    private boolean mDestroyed;
    private final android.view.WindowManager$LayoutParams mWindowAttributes;

    public void <init>(android.content.Context)
    {
        android.view.Window r0;
        android.content.Context r1;
        android.view.WindowManager$LayoutParams $r2;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.Window: boolean mIsActive> = 0;

        r0.<android.view.Window: boolean mHasChildren> = 0;

        r0.<android.view.Window: boolean mCloseOnTouchOutside> = 0;

        r0.<android.view.Window: boolean mSetCloseOnTouchOutside> = 0;

        r0.<android.view.Window: int mForcedWindowFlags> = 0;

        r0.<android.view.Window: int mFeatures> = 65;

        r0.<android.view.Window: int mLocalFeatures> = 65;

        r0.<android.view.Window: boolean mHaveWindowFormat> = 0;

        r0.<android.view.Window: boolean mHaveDimAmount> = 0;

        r0.<android.view.Window: int mDefaultWindowFormat> = -1;

        r0.<android.view.Window: boolean mHasSoftInputMode> = 0;

        $r2 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r2.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes> = $r2;

        r0.<android.view.Window: android.content.Context mContext> = r1;

        return;
    }

    public final android.content.Context getContext()
    {
        android.view.Window r0;
        android.content.Context $r1;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.content.Context mContext>;

        return $r1;
    }

    public final android.content.res.TypedArray getWindowStyle()
    {
        android.view.Window r0, r1;
        java.lang.Throwable r2, $r9;
        android.content.res.TypedArray $r4, $r5, $r8;
        int[] $r6;
        android.content.Context $r7;

        r0 := @this: android.view.Window;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = r0.<android.view.Window: android.content.res.TypedArray mWindowStyle>;

        if $r4 != null goto label2;

        $r7 = r0.<android.view.Window: android.content.Context mContext>;

        $r6 = <com.android.internal.R$styleable: int[] Window>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r6);

        r0.<android.view.Window: android.content.res.TypedArray mWindowStyle> = $r8;

     label2:
        $r5 = r0.<android.view.Window: android.content.res.TypedArray mWindowStyle>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setContainer(android.view.Window)
    {
        android.view.Window r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.Window;

        r0.<android.view.Window: android.view.Window mContainer> = r1;

        if r1 == null goto label1;

        $i0 = r0.<android.view.Window: int mFeatures>;

        $i1 = $i0 | 2;

        r0.<android.view.Window: int mFeatures> = $i1;

        $i2 = r0.<android.view.Window: int mLocalFeatures>;

        $i3 = $i2 | 2;

        r0.<android.view.Window: int mLocalFeatures> = $i3;

        r1.<android.view.Window: boolean mHasChildren> = 1;

     label1:
        return;
    }

    public final android.view.Window getContainer()
    {
        android.view.Window r0, $r1;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.Window mContainer>;

        return $r1;
    }

    public final boolean hasChildren()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = r0.<android.view.Window: boolean mHasChildren>;

        return $z0;
    }

    public final void destroy()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        r0.<android.view.Window: boolean mDestroyed> = 1;

        return;
    }

    public final boolean isDestroyed()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = r0.<android.view.Window: boolean mDestroyed>;

        return $z0;
    }

    public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String)
    {
        android.view.Window r0;
        android.view.WindowManager r1;
        android.os.IBinder r2;
        java.lang.String r3;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.WindowManager;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>(r1, r2, r3, 0);

        return;
    }

    public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String, boolean)
    {
        android.view.Window r0;
        android.view.WindowManager r1;
        android.os.IBinder r2;
        java.lang.String r3;
        boolean z0, $z1, $z2;
        android.view.WindowManagerImpl $r4, $r5;
        android.content.Context $r6;
        java.lang.Object $r7;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.WindowManager;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r0.<android.view.Window: android.os.IBinder mAppToken> = r2;

        r0.<android.view.Window: java.lang.String mAppName> = r3;

        if z0 != 0 goto label1;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.ui.hw", 0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r0.<android.view.Window: boolean mHardwareAccelerated> = $z2;

        if r1 != null goto label4;

        $r6 = r0.<android.view.Window: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r1 = (android.view.WindowManager) $r7;

     label4:
        $r4 = (android.view.WindowManagerImpl) r1;

        $r5 = virtualinvoke $r4.<android.view.WindowManagerImpl: android.view.WindowManagerImpl createLocalWindowManager(android.view.Window)>(r0);

        r0.<android.view.Window: android.view.WindowManager mWindowManager> = $r5;

        return;
    }

    void adjustLayoutParamsForSubWindow(android.view.WindowManager$LayoutParams)
    {
        android.view.Window r0, $r10, $r11;
        android.view.WindowManager$LayoutParams r1;
        java.lang.CharSequence r2;
        android.view.View r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.os.IBinder $r4, $r12, $r13, $r20;
        java.lang.String $r5, $r6, $r8, $r9, $r15, $r18, r21;
        boolean $z0;
        android.content.Context $r7;
        java.lang.StringBuilder $r14, $r16, $r17, $r19;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 = virtualinvoke r1.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 < 1000 goto label10;

        $i4 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i4 > 1999 goto label10;

        $r13 = r1.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        if $r13 != null goto label01;

        r3 = virtualinvoke r0.<android.view.Window: android.view.View peekDecorView()>();

        if r3 == null goto label01;

        $r20 = virtualinvoke r3.<android.view.View: android.os.IBinder getWindowToken()>();

        r1.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r20;

     label01:
        if r2 == null goto label02;

        $i11 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i11 != 0 goto label15;

     label02:
        $i5 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 1001 goto label03;

        r21 = "Media";

        goto label08;

     label03:
        $i7 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i7 != 1004 goto label04;

        r21 = "MediaOvr";

        goto label08;

     label04:
        $i6 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i6 != 1000 goto label05;

        r21 = "Panel";

        goto label08;

     label05:
        $i9 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i9 != 1002 goto label06;

        r21 = "SubPanel";

        goto label08;

     label06:
        $i8 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i8 != 1003 goto label07;

        r21 = "AtchDlg";

        goto label08;

     label07:
        $i10 = r1.<android.view.WindowManager$LayoutParams: int type>;

        r21 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

     label08:
        $r15 = r0.<android.view.Window: java.lang.String mAppName>;

        if $r15 == null goto label09;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r18 = r0.<android.view.Window: java.lang.String mAppName>;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>(r21);

        goto label15;

     label10:
        $r4 = r1.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        if $r4 != null goto label13;

        $r11 = r0.<android.view.Window: android.view.Window mContainer>;

        if $r11 != null goto label11;

        $r12 = r0.<android.view.Window: android.os.IBinder mAppToken>;

        goto label12;

     label11:
        $r10 = r0.<android.view.Window: android.view.Window mContainer>;

        $r12 = $r10.<android.view.Window: android.os.IBinder mAppToken>;

     label12:
        r1.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r12;

     label13:
        if r2 == null goto label14;

        $i3 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i3 != 0 goto label15;

     label14:
        $r5 = r0.<android.view.Window: java.lang.String mAppName>;

        if $r5 == null goto label15;

        $r9 = r0.<android.view.Window: java.lang.String mAppName>;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r9);

     label15:
        $r6 = r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r6 != null goto label16;

        $r7 = r0.<android.view.Window: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r8;

     label16:
        $z0 = r0.<android.view.Window: boolean mHardwareAccelerated>;

        if $z0 == 0 goto label17;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 | 16777216;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i2;

     label17:
        return;
    }

    public android.view.WindowManager getWindowManager()
    {
        android.view.Window r0;
        android.view.WindowManager $r1;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.WindowManager mWindowManager>;

        return $r1;
    }

    public void setCallback(android.view.Window$Callback)
    {
        android.view.Window r0;
        android.view.Window$Callback r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.Window$Callback;

        r0.<android.view.Window: android.view.Window$Callback mCallback> = r1;

        return;
    }

    public final android.view.Window$Callback getCallback()
    {
        android.view.Window r0;
        android.view.Window$Callback $r1;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.Window$Callback mCallback>;

        return $r1;
    }

    public final void setOnWindowDismissedCallback(android.view.Window$OnWindowDismissedCallback)
    {
        android.view.Window r0;
        android.view.Window$OnWindowDismissedCallback r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.Window$OnWindowDismissedCallback;

        r0.<android.view.Window: android.view.Window$OnWindowDismissedCallback mOnWindowDismissedCallback> = r1;

        return;
    }

    public final void dispatchOnWindowDismissed()
    {
        android.view.Window r0;
        android.view.Window$OnWindowDismissedCallback $r1, $r2;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.Window$OnWindowDismissedCallback mOnWindowDismissedCallback>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.Window: android.view.Window$OnWindowDismissedCallback mOnWindowDismissedCallback>;

        interfaceinvoke $r2.<android.view.Window$OnWindowDismissedCallback: void onWindowDismissed()>();

     label1:
        return;
    }

    public abstract void takeSurface(android.view.SurfaceHolder$Callback2);

    public abstract void takeInputQueue(android.view.InputQueue$Callback);

    public abstract boolean isFloating();

    public void setLayout(int, int)
    {
        android.view.Window r0;
        int i0, i1;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: int width> = i0;

        r1.<android.view.WindowManager$LayoutParams: int height> = i1;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setGravity(int)
    {
        android.view.Window r0;
        int i0;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: int gravity> = i0;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setType(int)
    {
        android.view.Window r0;
        int i0;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: int type> = i0;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setFormat(int)
    {
        android.view.Window r0;
        int i0, $i1;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        if i0 == 0 goto label1;

        r1.<android.view.WindowManager$LayoutParams: int format> = i0;

        r0.<android.view.Window: boolean mHaveWindowFormat> = 1;

        goto label2;

     label1:
        $i1 = r0.<android.view.Window: int mDefaultWindowFormat>;

        r1.<android.view.WindowManager$LayoutParams: int format> = $i1;

        r0.<android.view.Window: boolean mHaveWindowFormat> = 0;

     label2:
        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setWindowAnimations(int)
    {
        android.view.Window r0;
        int i0;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: int windowAnimations> = i0;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setSoftInputMode(int)
    {
        android.view.Window r0;
        int i0;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        if i0 == 0 goto label1;

        r1.<android.view.WindowManager$LayoutParams: int softInputMode> = i0;

        r0.<android.view.Window: boolean mHasSoftInputMode> = 1;

        goto label2;

     label1:
        r0.<android.view.Window: boolean mHasSoftInputMode> = 0;

     label2:
        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void addFlags(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.Window: void setFlags(int,int)>(i0, i0);

        return;
    }

    public void addPrivateFlags(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.Window: void setPrivateFlags(int,int)>(i0, i0);

        return;
    }

    public void clearFlags(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.Window: void setFlags(int,int)>(0, i0);

        return;
    }

    public void setFlags(int, int)
    {
        android.view.Window r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = i1 ^ -1;

        $i5 = $i3 & $i2;

        $i4 = i0 & i1;

        $i6 = $i5 | $i4;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i6;

        $i7 = i1 & 1073741824;

        if $i7 == 0 goto label1;

        $i10 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i11 = $i10 | 8;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i11;

     label1:
        $i8 = r0.<android.view.Window: int mForcedWindowFlags>;

        $i9 = $i8 | i1;

        r0.<android.view.Window: int mForcedWindowFlags> = $i9;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    private void setPrivateFlags(int, int)
    {
        android.view.Window r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i3 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i2 = i1 ^ -1;

        $i5 = $i3 & $i2;

        $i4 = i0 & i1;

        $i6 = $i5 | $i4;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i6;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    protected void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)
    {
        android.view.Window r0;
        android.view.WindowManager$LayoutParams r1;
        android.view.Window$Callback $r2, $r3;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r3.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

     label1:
        return;
    }

    public void setDimAmount(float)
    {
        android.view.Window r0;
        float f0;
        android.view.WindowManager$LayoutParams r1;

        r0 := @this: android.view.Window;

        f0 := @parameter0: float;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: float dimAmount> = f0;

        r0.<android.view.Window: boolean mHaveDimAmount> = 1;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setAttributes(android.view.WindowManager$LayoutParams)
    {
        android.view.Window r0;
        android.view.WindowManager$LayoutParams r1, $r2, $r3;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r2.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r1);

        $r3 = r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r3);

        return;
    }

    public final android.view.WindowManager$LayoutParams getAttributes()
    {
        android.view.Window r0;
        android.view.WindowManager$LayoutParams $r1;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        return $r1;
    }

    protected final int getForcedWindowFlags()
    {
        android.view.Window r0;
        int $i0;

        r0 := @this: android.view.Window;

        $i0 = r0.<android.view.Window: int mForcedWindowFlags>;

        return $i0;
    }

    protected final boolean hasSoftInputMode()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = r0.<android.view.Window: boolean mHasSoftInputMode>;

        return $z0;
    }

    public void setCloseOnTouchOutside(boolean)
    {
        android.view.Window r0;
        boolean z0;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        r0.<android.view.Window: boolean mCloseOnTouchOutside> = z0;

        r0.<android.view.Window: boolean mSetCloseOnTouchOutside> = 1;

        return;
    }

    public void setCloseOnTouchOutsideIfNotSet(boolean)
    {
        android.view.Window r0;
        boolean z0, $z1;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.Window: boolean mSetCloseOnTouchOutside>;

        if $z1 != 0 goto label1;

        r0.<android.view.Window: boolean mCloseOnTouchOutside> = z0;

        r0.<android.view.Window: boolean mSetCloseOnTouchOutside> = 1;

     label1:
        return;
    }

    public abstract void alwaysReadCloseOnTouchAttr();

    public boolean shouldCloseOnTouch(android.content.Context, android.view.MotionEvent)
    {
        android.view.Window r0;
        android.content.Context r1;
        android.view.MotionEvent r2;
        boolean $z0, $z1;
        int $i0;
        android.view.View $r3;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.MotionEvent;

        $z0 = r0.<android.view.Window: boolean mCloseOnTouchOutside>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r2.<android.view.MotionEvent: int getAction()>();

        if $i0 != 0 goto label1;

        $z1 = specialinvoke r0.<android.view.Window: boolean isOutOfBounds(android.content.Context,android.view.MotionEvent)>(r1, r2);

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.view.Window: android.view.View peekDecorView()>();

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isOutOfBounds(android.content.Context, android.view.MotionEvent)
    {
        android.view.Window r0;
        android.content.Context r1;
        android.view.MotionEvent r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.View r3;
        float $f0, $f1;
        android.view.ViewConfiguration $r4;
        boolean $z0;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.MotionEvent;

        $f0 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();

        i0 = (int) $f0;

        $f1 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();

        i1 = (int) $f1;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        i2 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>();

        r3 = virtualinvoke r0.<android.view.Window: android.view.View getDecorView()>();

        $i3 = neg i2;

        if i0 < $i3 goto label1;

        $i4 = neg i2;

        if i1 < $i4 goto label1;

        $i5 = virtualinvoke r3.<android.view.View: int getWidth()>();

        $i6 = $i5 + i2;

        if i0 > $i6 goto label1;

        $i8 = virtualinvoke r3.<android.view.View: int getHeight()>();

        $i7 = $i8 + i2;

        if i1 <= $i7 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean requestFeature(int)
    {
        android.view.Window r0, $r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 = 1 << i0;

        $i2 = r0.<android.view.Window: int mFeatures>;

        $i3 = $i2 | i1;

        r0.<android.view.Window: int mFeatures> = $i3;

        $i4 = r0.<android.view.Window: int mLocalFeatures>;

        $r1 = r0.<android.view.Window: android.view.Window mContainer>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.Window: android.view.Window mContainer>;

        $i8 = $r2.<android.view.Window: int mFeatures>;

        $i9 = $i8 ^ -1;

        $i10 = i1 & $i9;

        goto label2;

     label1:
        $i10 = i1;

     label2:
        $i5 = $i4 | $i10;

        r0.<android.view.Window: int mLocalFeatures> = $i5;

        $i6 = r0.<android.view.Window: int mFeatures>;

        $i7 = $i6 & i1;

        if $i7 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    protected void removeFeature(int)
    {
        android.view.Window r0, $r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 = 1 << i0;

        $i3 = r0.<android.view.Window: int mFeatures>;

        $i2 = i1 ^ -1;

        $i4 = $i3 & $i2;

        r0.<android.view.Window: int mFeatures> = $i4;

        $i6 = r0.<android.view.Window: int mLocalFeatures>;

        $r1 = r0.<android.view.Window: android.view.Window mContainer>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.Window: android.view.Window mContainer>;

        $i8 = $r2.<android.view.Window: int mFeatures>;

        $i9 = $i8 ^ -1;

        $i10 = i1 & $i9;

        goto label2;

     label1:
        $i10 = i1;

     label2:
        $i5 = $i10 ^ -1;

        $i7 = $i6 & $i5;

        r0.<android.view.Window: int mLocalFeatures> = $i7;

        return;
    }

    public final void makeActive()
    {
        android.view.Window r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.view.Window;

        $r1 = r0.<android.view.Window: android.view.Window mContainer>;

        if $r1 == null goto label2;

        $r2 = r0.<android.view.Window: android.view.Window mContainer>;

        $r3 = $r2.<android.view.Window: android.view.Window mActiveChild>;

        if $r3 == null goto label1;

        $r5 = r0.<android.view.Window: android.view.Window mContainer>;

        $r6 = $r5.<android.view.Window: android.view.Window mActiveChild>;

        $r6.<android.view.Window: boolean mIsActive> = 0;

     label1:
        $r4 = r0.<android.view.Window: android.view.Window mContainer>;

        $r4.<android.view.Window: android.view.Window mActiveChild> = r0;

     label2:
        r0.<android.view.Window: boolean mIsActive> = 1;

        virtualinvoke r0.<android.view.Window: void onActive()>();

        return;
    }

    public final boolean isActive()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = r0.<android.view.Window: boolean mIsActive>;

        return $z0;
    }

    public android.view.View findViewById(int)
    {
        android.view.Window r0;
        int i0;
        android.view.View $r1, $r2;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.Window: android.view.View getDecorView()>();

        $r2 = virtualinvoke $r1.<android.view.View: android.view.View findViewById(int)>(i0);

        return $r2;
    }

    public abstract void setContentView(int);

    public abstract void setContentView(android.view.View);

    public abstract void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);

    public abstract void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);

    public abstract android.view.View getCurrentFocus();

    public abstract android.view.LayoutInflater getLayoutInflater();

    public abstract void setTitle(java.lang.CharSequence);

    public abstract void setTitleColor(int);

    public abstract void openPanel(int, android.view.KeyEvent);

    public abstract void closePanel(int);

    public abstract void togglePanel(int, android.view.KeyEvent);

    public abstract void invalidatePanelMenu(int);

    public abstract boolean performPanelShortcut(int, int, android.view.KeyEvent, int);

    public abstract boolean performPanelIdentifierAction(int, int, int);

    public abstract void closeAllPanels();

    public abstract boolean performContextMenuIdentifierAction(int, int);

    public abstract void onConfigurationChanged(android.content.res.Configuration);

    public void setBackgroundDrawableResource(int)
    {
        android.view.Window r0;
        int i0;
        android.content.Context $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.Window: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        virtualinvoke r0.<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);

    public abstract void setFeatureDrawableResource(int, int);

    public abstract void setFeatureDrawableUri(int, android.net.Uri);

    public abstract void setFeatureDrawable(int, android.graphics.drawable.Drawable);

    public abstract void setFeatureDrawableAlpha(int, int);

    public abstract void setFeatureInt(int, int);

    public abstract void takeKeyEvents(boolean);

    public abstract boolean superDispatchKeyEvent(android.view.KeyEvent);

    public abstract boolean superDispatchKeyShortcutEvent(android.view.KeyEvent);

    public abstract boolean superDispatchTouchEvent(android.view.MotionEvent);

    public abstract boolean superDispatchTrackballEvent(android.view.MotionEvent);

    public abstract boolean superDispatchGenericMotionEvent(android.view.MotionEvent);

    public abstract android.view.View getDecorView();

    public abstract android.view.View peekDecorView();

    public abstract android.os.Bundle saveHierarchyState();

    public abstract void restoreHierarchyState(android.os.Bundle);

    protected abstract void onActive();

    protected final int getFeatures()
    {
        android.view.Window r0;
        int $i0;

        r0 := @this: android.view.Window;

        $i0 = r0.<android.view.Window: int mFeatures>;

        return $i0;
    }

    public boolean hasFeature(int)
    {
        android.view.Window r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.Window: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final int getLocalFeatures()
    {
        android.view.Window r0;
        int $i0;

        r0 := @this: android.view.Window;

        $i0 = r0.<android.view.Window: int mLocalFeatures>;

        return $i0;
    }

    protected void setDefaultWindowFormat(int)
    {
        android.view.Window r0;
        int i0;
        android.view.WindowManager$LayoutParams r1;
        boolean $z0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        r0.<android.view.Window: int mDefaultWindowFormat> = i0;

        $z0 = r0.<android.view.Window: boolean mHaveWindowFormat>;

        if $z0 != 0 goto label1;

        r1 = virtualinvoke r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        r1.<android.view.WindowManager$LayoutParams: int format> = i0;

        virtualinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

     label1:
        return;
    }

    protected boolean haveDimAmount()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = r0.<android.view.Window: boolean mHaveDimAmount>;

        return $z0;
    }

    public abstract void setChildDrawable(int, android.graphics.drawable.Drawable);

    public abstract void setChildInt(int, int);

    public abstract boolean isShortcutKey(int, android.view.KeyEvent);

    public abstract void setVolumeControlStream(int);

    public abstract int getVolumeControlStream();

    public void setMediaController(android.media.session.MediaController)
    {
        android.view.Window r0;
        android.media.session.MediaController r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.media.session.MediaController;

        return;
    }

    public android.media.session.MediaController getMediaController()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setUiOptions(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        return;
    }

    public void setUiOptions(int, int)
    {
        android.view.Window r0;
        int i0, i1;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setIcon(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        return;
    }

    public void setDefaultIcon(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        return;
    }

    public void setLogo(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        return;
    }

    public void setDefaultLogo(int)
    {
        android.view.Window r0;
        int i0;

        r0 := @this: android.view.Window;

        i0 := @parameter0: int;

        return;
    }

    public void setLocalFocus(boolean, boolean)
    {
        android.view.Window r0;
        boolean z0, z1;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        return;
    }

    public void injectInputEvent(android.view.InputEvent)
    {
        android.view.Window r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.view.InputEvent;

        return;
    }

    public android.transition.TransitionManager getTransitionManager()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setTransitionManager(android.transition.TransitionManager)
    {
        android.view.Window r0;
        android.transition.TransitionManager r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.TransitionManager;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.transition.Scene getContentScene()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setEnterTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public void setReturnTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public void setExitTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public void setReenterTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public android.transition.Transition getEnterTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public android.transition.Transition getReturnTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public android.transition.Transition getExitTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public android.transition.Transition getReenterTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setSharedElementEnterTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public void setSharedElementReturnTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public android.transition.Transition getSharedElementEnterTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public android.transition.Transition getSharedElementReturnTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setSharedElementExitTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public void setSharedElementReenterTransition(android.transition.Transition)
    {
        android.view.Window r0;
        android.transition.Transition r1;

        r0 := @this: android.view.Window;

        r1 := @parameter0: android.transition.Transition;

        return;
    }

    public android.transition.Transition getSharedElementExitTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public android.transition.Transition getSharedElementReenterTransition()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return null;
    }

    public void setAllowEnterTransitionOverlap(boolean)
    {
        android.view.Window r0;
        boolean z0;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean getAllowEnterTransitionOverlap()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return 1;
    }

    public void setAllowReturnTransitionOverlap(boolean)
    {
        android.view.Window r0;
        boolean z0;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        return;
    }

    public void setAllowExitTransitionOverlap(boolean)
    {
        android.view.Window r0;
        boolean z0;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>(z0);

        return;
    }

    public boolean getAllowReturnTransitionOverlap()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return 1;
    }

    public boolean getAllowExitTransitionOverlap()
    {
        android.view.Window r0;
        boolean $z0;

        r0 := @this: android.view.Window;

        $z0 = virtualinvoke r0.<android.view.Window: boolean getAllowReturnTransitionOverlap()>();

        return $z0;
    }

    public long getTransitionBackgroundFadeDuration()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return 0L;
    }

    public void setTransitionBackgroundFadeDuration(long)
    {
        android.view.Window r0;
        long l0;

        r0 := @this: android.view.Window;

        l0 := @parameter0: long;

        return;
    }

    public boolean getSharedElementsUseOverlay()
    {
        android.view.Window r0;

        r0 := @this: android.view.Window;

        return 1;
    }

    public void setSharedElementsUseOverlay(boolean)
    {
        android.view.Window r0;
        boolean z0;

        r0 := @this: android.view.Window;

        z0 := @parameter0: boolean;

        return;
    }

    public abstract int getStatusBarColor();

    public abstract void setStatusBarColor(int);

    public abstract int getNavigationBarColor();

    public abstract void setNavigationBarColor(int);

    public static void <clinit>()
    {
        <android.view.Window: java.lang.String PROPERTY_HARDWARE_UI> = "persist.sys.ui.hw";

        <android.view.Window: int ID_ANDROID_CONTENT> = 16908290;

        <android.view.Window: int DEFAULT_FEATURES> = 65;

        <android.view.Window: java.lang.String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME> = "android:navigation:background";

        <android.view.Window: java.lang.String STATUS_BAR_BACKGROUND_TRANSITION_NAME> = "android:status:background";

        <android.view.Window: int PROGRESS_SECONDARY_END> = 30000;

        <android.view.Window: int PROGRESS_SECONDARY_START> = 20000;

        <android.view.Window: int PROGRESS_END> = 10000;

        <android.view.Window: int PROGRESS_START> = 0;

        <android.view.Window: int PROGRESS_INDETERMINATE_OFF> = -4;

        <android.view.Window: int PROGRESS_INDETERMINATE_ON> = -3;

        <android.view.Window: int PROGRESS_VISIBILITY_OFF> = -2;

        <android.view.Window: int PROGRESS_VISIBILITY_ON> = -1;

        <android.view.Window: int FEATURE_MAX> = 13;

        <android.view.Window: int FEATURE_ACTIVITY_TRANSITIONS> = 13;

        <android.view.Window: int FEATURE_CONTENT_TRANSITIONS> = 12;

        <android.view.Window: int FEATURE_SWIPE_TO_DISMISS> = 11;

        <android.view.Window: int FEATURE_ACTION_MODE_OVERLAY> = 10;

        <android.view.Window: int FEATURE_ACTION_BAR_OVERLAY> = 9;

        <android.view.Window: int FEATURE_ACTION_BAR> = 8;

        <android.view.Window: int FEATURE_CUSTOM_TITLE> = 7;

        <android.view.Window: int FEATURE_CONTEXT_MENU> = 6;

        <android.view.Window: int FEATURE_INDETERMINATE_PROGRESS> = 5;

        <android.view.Window: int FEATURE_RIGHT_ICON> = 4;

        <android.view.Window: int FEATURE_LEFT_ICON> = 3;

        <android.view.Window: int FEATURE_PROGRESS> = 2;

        <android.view.Window: int FEATURE_NO_TITLE> = 1;

        <android.view.Window: int FEATURE_OPTIONS_PANEL> = 0;

        return;
    }
}
