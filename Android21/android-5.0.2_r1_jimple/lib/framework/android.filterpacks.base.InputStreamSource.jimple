public class android.filterpacks.base.InputStreamSource extends android.filterfw.core.Filter
{
    private java.lang.String mTarget;
    private java.io.InputStream mInputStream;
    private android.filterfw.core.MutableFrameFormat mOutputFormat;

    public void <init>(java.lang.String)
    {
        android.filterpacks.base.InputStreamSource r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.base.InputStreamSource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat> = null;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.base.InputStreamSource r0;
        int i0;
        java.lang.String $r1;
        android.filterfw.core.MutableFrameFormat $r2, $r3, $r4;

        r0 := @this: android.filterpacks.base.InputStreamSource;

        $r1 = r0.<android.filterpacks.base.InputStreamSource: java.lang.String mTarget>;

        i0 = staticinvoke <android.filterfw.core.FrameFormat: int readTargetString(java.lang.String)>($r1);

        $r2 = r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int)>(i0);

        r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat> = $r4;

     label1:
        $r3 = r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        virtualinvoke r0.<android.filterpacks.base.InputStreamSource: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("data", $r3);

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.base.InputStreamSource r0;
        android.filterfw.core.FilterContext r1;
        int i0, i1, $i2;
        java.io.ByteArrayOutputStream r2, $r4;
        byte[] r3, $r6;
        java.io.InputStream $r5;
        android.filterfw.core.MutableFrameFormat $r7, $r9;
        android.filterfw.core.FrameManager $r8;
        java.io.IOException $r10, r19;
        java.lang.StringBuilder $r11, $r14, $r15, $r16;
        java.lang.RuntimeException $r12;
        java.lang.String $r13, $r17;
        java.nio.ByteBuffer r18;
        android.filterfw.core.Frame r20;

        r0 := @this: android.filterpacks.base.InputStreamSource;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        i0 = 0;

     label1:
        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r4;

        r3 = newarray (byte)[1024];

     label2:
        $r5 = r0.<android.filterpacks.base.InputStreamSource: java.io.InputStream mInputStream>;

        $i2 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r3);

        i1 = $i2;

        if $i2 <= 0 goto label3;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, i1);

        i0 = i0 + i1;

        goto label2;

     label3:
        $r6 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r18 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r6);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r19 = $r10;

        $r12 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InputStreamSource: Could not read stream: ");

        $r13 = virtualinvoke r19.<java.io.IOException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label6:
        $r7 = r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        virtualinvoke $r7.<android.filterfw.core.MutableFrameFormat: void setDimensions(int)>(i0);

        $r8 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r9 = r0.<android.filterpacks.base.InputStreamSource: android.filterfw.core.MutableFrameFormat mOutputFormat>;

        r20 = virtualinvoke $r8.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r9);

        virtualinvoke r20.<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)>(r18);

        virtualinvoke r0.<android.filterpacks.base.InputStreamSource: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("data", r20);

        virtualinvoke r20.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        virtualinvoke r0.<android.filterpacks.base.InputStreamSource: void closeOutputPort(java.lang.String)>("data");

        return;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
