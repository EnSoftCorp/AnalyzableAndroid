class android.opengl.GLSurfaceView$GLThreadManager extends java.lang.Object
{
    private static java.lang.String TAG;
    private boolean mGLESVersionCheckComplete;
    private int mGLESVersion;
    private boolean mGLESDriverCheckComplete;
    private boolean mMultipleGLESContextsAllowed;
    private boolean mLimitedGLESContexts;
    private static final int kGLES_20;
    private static final java.lang.String kMSM7K_RENDERER_PREFIX;
    private android.opengl.GLSurfaceView$GLThread mEglOwner;

    private void <init>()
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized void threadExiting(android.opengl.GLSurfaceView$GLThread)
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        android.opengl.GLSurfaceView$GLThread r1, $r2;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        r1 := @parameter0: android.opengl.GLSurfaceView$GLThread;

        staticinvoke <android.opengl.GLSurfaceView$GLThread: boolean access$1102(android.opengl.GLSurfaceView$GLThread,boolean)>(r1, 1);

        $r2 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        if $r2 != r1 goto label1;

        r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner> = null;

     label1:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public boolean tryAcquireEglContextLocked(android.opengl.GLSurfaceView$GLThread)
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        android.opengl.GLSurfaceView$GLThread r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        r1 := @parameter0: android.opengl.GLSurfaceView$GLThread;

        $r2 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        if $r2 == r1 goto label1;

        $r3 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        if $r3 != null goto label2;

     label1:
        r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner> = r1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return 1;

     label2:
        specialinvoke r0.<android.opengl.GLSurfaceView$GLThreadManager: void checkGLESVersion()>();

        $z0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mMultipleGLESContextsAllowed>;

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r4 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        if $r4 == null goto label4;

        $r5 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        virtualinvoke $r5.<android.opengl.GLSurfaceView$GLThread: void requestReleaseEglContextLocked()>();

     label4:
        return 0;
    }

    public void releaseEglContextLocked(android.opengl.GLSurfaceView$GLThread)
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        android.opengl.GLSurfaceView$GLThread r1, $r2;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        r1 := @parameter0: android.opengl.GLSurfaceView$GLThread;

        $r2 = r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner>;

        if $r2 != r1 goto label1;

        r0.<android.opengl.GLSurfaceView$GLThreadManager: android.opengl.GLSurfaceView$GLThread mEglOwner> = null;

     label1:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public synchronized boolean shouldReleaseEGLContextWhenPausing()
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        boolean $z0;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        $z0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mLimitedGLESContexts>;

        return $z0;
    }

    public synchronized boolean shouldTerminateEGLWhenPausing()
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        boolean $z0, $z1;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        specialinvoke r0.<android.opengl.GLSurfaceView$GLThreadManager: void checkGLESVersion()>();

        $z0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mMultipleGLESContextsAllowed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public synchronized void checkGLDriver(javax.microedition.khronos.opengles.GL10)
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        javax.microedition.khronos.opengles.GL10 r1;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        r1 := @parameter0: javax.microedition.khronos.opengles.GL10;

        $z0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mGLESDriverCheckComplete>;

        if $z0 != 0 goto label6;

        specialinvoke r0.<android.opengl.GLSurfaceView$GLThreadManager: void checkGLESVersion()>();

        r2 = interfaceinvoke r1.<javax.microedition.khronos.opengles.GL10: java.lang.String glGetString(int)>(7937);

        $i0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: int mGLESVersion>;

        if $i0 >= 131072 goto label3;

        $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("Q3Dimension MSM7500 ");

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mMultipleGLESContextsAllowed> = $z4;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label3:
        $z1 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mMultipleGLESContextsAllowed>;

        if $z1 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mLimitedGLESContexts> = $z2;

        r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mGLESDriverCheckComplete> = 1;

     label6:
        return;
    }

    private void checkGLESVersion()
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        $z0 = r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mGLESVersionCheckComplete>;

        if $z0 != 0 goto label2;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.opengles.version", 0);

        r0.<android.opengl.GLSurfaceView$GLThreadManager: int mGLESVersion> = $i0;

        $i1 = r0.<android.opengl.GLSurfaceView$GLThreadManager: int mGLESVersion>;

        if $i1 < 131072 goto label1;

        r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mMultipleGLESContextsAllowed> = 1;

     label1:
        r0.<android.opengl.GLSurfaceView$GLThreadManager: boolean mGLESVersionCheckComplete> = 1;

     label2:
        return;
    }

    void <init>(android.opengl.GLSurfaceView$1)
    {
        android.opengl.GLSurfaceView$GLThreadManager r0;
        android.opengl.GLSurfaceView$1 r1;

        r0 := @this: android.opengl.GLSurfaceView$GLThreadManager;

        r1 := @parameter0: android.opengl.GLSurfaceView$1;

        specialinvoke r0.<android.opengl.GLSurfaceView$GLThreadManager: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        <android.opengl.GLSurfaceView$GLThreadManager: java.lang.String kMSM7K_RENDERER_PREFIX> = "Q3Dimension MSM7500 ";

        <android.opengl.GLSurfaceView$GLThreadManager: int kGLES_20> = 131072;

        <android.opengl.GLSurfaceView$GLThreadManager: java.lang.String TAG> = "GLThreadManager";

        return;
    }
}
