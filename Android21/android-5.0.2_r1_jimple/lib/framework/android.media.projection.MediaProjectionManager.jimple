public final class android.media.projection.MediaProjectionManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final java.lang.String EXTRA_APP_TOKEN;
    public static final java.lang.String EXTRA_MEDIA_PROJECTION;
    public static final int TYPE_SCREEN_CAPTURE;
    public static final int TYPE_MIRRORING;
    public static final int TYPE_PRESENTATION;
    private android.content.Context mContext;
    private java.util.Map mCallbacks;
    private android.media.projection.IMediaProjectionManager mService;

    public void <init>(android.content.Context)
    {
        android.media.projection.MediaProjectionManager r0;
        android.content.Context r1;
        android.os.IBinder r2;
        android.media.projection.IMediaProjectionManager $r3;
        android.util.ArrayMap $r4;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.projection.MediaProjectionManager: android.content.Context mContext> = r1;

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_projection");

        $r3 = staticinvoke <android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager asInterface(android.os.IBinder)>(r2);

        r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks> = $r4;

        return;
    }

    public android.content.Intent createScreenCaptureIntent()
    {
        android.media.projection.MediaProjectionManager r0;
        android.content.Intent r1, $r2;

        r0 := @this: android.media.projection.MediaProjectionManager;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.media.MediaProjectionPermissionActivity");

        return r1;
    }

    public android.media.projection.MediaProjection getMediaProjection(int, android.content.Intent)
    {
        android.media.projection.MediaProjectionManager r0;
        int i0;
        android.content.Intent r1;
        android.os.IBinder r2;
        android.media.projection.MediaProjection $r3;
        android.content.Context $r4;
        android.media.projection.IMediaProjection $r5;

        r0 := @this: android.media.projection.MediaProjectionManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Intent;

        if i0 != -1 goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        r2 = virtualinvoke r1.<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)>("android.media.projection.extra.EXTRA_MEDIA_PROJECTION");

        if r2 != null goto label3;

        return null;

     label3:
        $r3 = new android.media.projection.MediaProjection;

        $r4 = r0.<android.media.projection.MediaProjectionManager: android.content.Context mContext>;

        $r5 = staticinvoke <android.media.projection.IMediaProjection$Stub: android.media.projection.IMediaProjection asInterface(android.os.IBinder)>(r2);

        specialinvoke $r3.<android.media.projection.MediaProjection: void <init>(android.content.Context,android.media.projection.IMediaProjection)>($r4, $r5);

        return $r3;
    }

    public android.media.projection.MediaProjectionInfo getActiveProjectionInfo()
    {
        android.media.projection.MediaProjectionManager r0;
        android.os.RemoteException r1, $r4;
        android.media.projection.IMediaProjectionManager $r2;
        android.media.projection.MediaProjectionInfo $r3;

        r0 := @this: android.media.projection.MediaProjectionManager;

     label1:
        $r2 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        $r3 = interfaceinvoke $r2.<android.media.projection.IMediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to get the active projection info", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopActiveProjection()
    {
        android.media.projection.MediaProjectionManager r0;
        android.os.RemoteException r1, $r3;
        android.media.projection.IMediaProjectionManager $r2;

        r0 := @this: android.media.projection.MediaProjectionManager;

     label1:
        $r2 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r2.<android.media.projection.IMediaProjectionManager: void stopActiveProjection()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to stop the currently active media projection", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addCallback(android.media.projection.MediaProjectionManager$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjectionManager r0;
        android.media.projection.MediaProjectionManager$Callback r1;
        android.os.Handler r2;
        android.media.projection.MediaProjectionManager$CallbackDelegate r3, $r5;
        android.os.RemoteException r4, $r10;
        java.util.Map $r6;
        android.media.projection.IMediaProjectionManager $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r1 := @parameter0: android.media.projection.MediaProjectionManager$Callback;

        r2 := @parameter1: android.os.Handler;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r9;

     label1:
        $r5 = new android.media.projection.MediaProjectionManager$CallbackDelegate;

        specialinvoke $r5.<android.media.projection.MediaProjectionManager$CallbackDelegate: void <init>(android.media.projection.MediaProjectionManager$Callback,android.os.Handler)>(r1, r2);

        r3 = $r5;

        $r6 = r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label2:
        $r8 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r8.<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>(r3);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to add callbacks to MediaProjection service", r4);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void removeCallback(android.media.projection.MediaProjectionManager$Callback)
    {
        android.media.projection.MediaProjectionManager r0;
        android.media.projection.MediaProjectionManager$Callback r1;
        android.media.projection.MediaProjectionManager$CallbackDelegate r2;
        android.os.RemoteException r3, $r8;
        java.util.Map $r4;
        java.lang.Object $r5;
        android.media.projection.IMediaProjectionManager $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r1 := @parameter0: android.media.projection.MediaProjectionManager$Callback;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r7;

     label1:
        $r4 = r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (android.media.projection.MediaProjectionManager$CallbackDelegate) $r5;

     label2:
        if r2 == null goto label3;

        $r6 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r6.<android.media.projection.IMediaProjectionManager: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>(r2);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to add callbacks to MediaProjection service", r3);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <android.media.projection.MediaProjectionManager: int TYPE_PRESENTATION> = 2;

        <android.media.projection.MediaProjectionManager: int TYPE_MIRRORING> = 1;

        <android.media.projection.MediaProjectionManager: int TYPE_SCREEN_CAPTURE> = 0;

        <android.media.projection.MediaProjectionManager: java.lang.String EXTRA_MEDIA_PROJECTION> = "android.media.projection.extra.EXTRA_MEDIA_PROJECTION";

        <android.media.projection.MediaProjectionManager: java.lang.String EXTRA_APP_TOKEN> = "android.media.projection.extra.EXTRA_APP_TOKEN";

        <android.media.projection.MediaProjectionManager: java.lang.String TAG> = "MediaProjectionManager";

        return;
    }
}
