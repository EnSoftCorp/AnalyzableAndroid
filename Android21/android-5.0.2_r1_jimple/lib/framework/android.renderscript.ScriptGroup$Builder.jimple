public final class android.renderscript.ScriptGroup$Builder extends java.lang.Object
{
    private android.renderscript.RenderScript mRS;
    private java.util.ArrayList mNodes;
    private java.util.ArrayList mLines;
    private int mKernelCount;

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.RenderScript r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines> = $r3;

        r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS> = r1;

        return;
    }

    private void validateCycle(android.renderscript.ScriptGroup$Node, android.renderscript.ScriptGroup$Node)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, r2, r4, r16;
        int i0, $i1;
        android.renderscript.ScriptGroup$ConnectLine r3;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        android.renderscript.Script$KernelID $r8, $r12;
        android.renderscript.Script$FieldID $r9, $r10;
        android.renderscript.Script $r11, $r14;
        boolean $z0, $z1;
        android.renderscript.RSInvalidStateException $r13, $r15;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        r2 := @parameter1: android.renderscript.ScriptGroup$Node;

        i0 = 0;

     label1:
        $r5 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label6;

        $r6 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (android.renderscript.ScriptGroup$ConnectLine) $r7;

        $r8 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r8 == null goto label3;

        $r12 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r14 = $r12.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r14);

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r15 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r15.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r15;

     label2:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r2);

     label3:
        $r9 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r9 == null goto label5;

        $r10 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r11 = $r10.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r16 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r11);

        $z0 = virtualinvoke r16.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r13;

     label4:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r16, r2);

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return;
    }

    private void mergeDAGs(int, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList $r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        android.renderscript.ScriptGroup$Node $r4, $r7;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = 0;

     label1:
        $r1 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i2 >= $i3 goto label3;

        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (android.renderscript.ScriptGroup$Node) $r3;

        $i4 = $r4.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i4 != i1 goto label2;

        $r5 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (android.renderscript.ScriptGroup$Node) $r6;

        $r7.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void validateDAGRecurse(android.renderscript.ScriptGroup$Node, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, r3, r13;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.renderscript.ScriptGroup$ConnectLine r2;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.renderscript.Script$KernelID $r7, $r12;
        android.renderscript.Script$FieldID $r8, $r9;
        android.renderscript.Script $r10, $r11;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        i0 := @parameter1: int;

        $i2 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i2 == 0 goto label1;

        $i4 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i4 == i0 goto label1;

        $i5 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void mergeDAGs(int,int)>($i5, i0);

        return;

     label1:
        r1.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

        i1 = 0;

     label2:
        $r4 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label5;

        $r5 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.renderscript.ScriptGroup$ConnectLine) $r6;

        $r7 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r7 == null goto label3;

        $r12 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r11 = $r12.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r3 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r11);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>(r3, i0);

     label3:
        $r8 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r8 == null goto label4;

        $r9 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r10 = $r9.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r13 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r10);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>(r13, i0);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    private void validateDAG()
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        android.renderscript.ScriptGroup$Node r1, $r5, $r9;
        java.util.ArrayList $r2, $r3, $r6, $r7, $r11, $r12, $r14, $r15;
        java.lang.Object $r4, $r8, $r13;
        android.renderscript.RSInvalidStateException $r10, $r16;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i0 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label4;

        $r11 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (android.renderscript.ScriptGroup$Node) $r13;

        $r12 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i4 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label3;

        $r14 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i6 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        if $i6 != 0 goto label2;

        $r15 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i7 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i7 <= 1 goto label2;

        $r16 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r16.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Groups cannot contain unconnected scripts");

        throw $r16;

     label2:
        $i5 = i0 + 1;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>(r1, $i5);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        i8 = $r5.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        i9 = 0;

     label5:
        $r6 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i9 >= $i2 goto label7;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        $i3 = $r9.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i3 == i8 goto label6;

        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Multiple DAGs in group not allowed.");

        throw $r10;

     label6:
        i9 = i9 + 1;

        goto label5;

     label7:
        return;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script r1, $r6;
        int i0, $i1;
        java.util.ArrayList $r2, $r3, $r7;
        java.lang.Object $r4, $r8;
        android.renderscript.ScriptGroup$Node $r5, $r9;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script;

        i0 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        $r6 = $r5.<android.renderscript.ScriptGroup$Node: android.renderscript.Script mScript>;

        if r1 != $r6 goto label2;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        return $r9;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        int i0, i1, $i2, $i3;
        android.renderscript.ScriptGroup$Node r2;
        java.util.ArrayList $r3, $r4, $r6, $r7;
        java.lang.Object $r5, $r8;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        i0 = 0;

     label1:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 >= $i2 goto label5;

        $r4 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (android.renderscript.ScriptGroup$Node) $r5;

        i1 = 0;

     label2:
        $r6 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label4;

        $r7 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        if r1 != $r8 goto label3;

        return r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return null;
    }

    public android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        android.renderscript.ScriptGroup$Node r2, $r4, $r7;
        java.util.ArrayList $r3, $r6, $r9;
        int $i0, $i1, $i2;
        android.renderscript.Script $r5, $r8;
        android.renderscript.RSInvalidStateException $r10;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 == 0 goto label1;

        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Kernels may not be added once connections exist.");

        throw $r10;

     label1:
        $r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r1);

        if $r4 == null goto label2;

        return r0;

     label2:
        $i1 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        $i2 = $i1 + 1;

        r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount> = $i2;

        $r5 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r2 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r5);

        if r2 != null goto label3;

        $r7 = new android.renderscript.ScriptGroup$Node;

        $r8 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        specialinvoke $r7.<android.renderscript.ScriptGroup$Node: void <init>(android.renderscript.Script)>($r8);

        r2 = $r7;

        $r9 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        $r6 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$FieldID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2;
        android.renderscript.Script$FieldID r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.ScriptGroup$ConnectLine r6, $r8, $r9;
        android.renderscript.Script $r7;
        java.util.ArrayList $r10, $r11, $r12;
        android.renderscript.RSInvalidStateException $r13, $r14;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$FieldID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 != null goto label1;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r13;

     label1:
        $r7 = r3.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r7);

        if r5 != null goto label2;

        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r14;

     label2:
        $r8 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r8.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        r6 = $r8;

        $r10 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r9 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r9.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r11 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r12 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2, r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.ScriptGroup$ConnectLine r6, $r7, $r8;
        java.util.ArrayList $r9, $r10, $r11;
        android.renderscript.RSInvalidStateException $r12, $r13;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$KernelID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 != null goto label1;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r13;

     label1:
        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r3);

        if r5 != null goto label2;

        $r12 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r12.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r12;

     label2:
        $r7 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r7.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        r6 = $r7;

        $r9 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r8 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r8.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r10 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r11 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;
    }

    public android.renderscript.ScriptGroup create()
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i24, $i27, $i28, $i29, i30, i31, i33;
        java.util.ArrayList r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r24, $r37, $r39, $r43, $r44, $r45, $r48, $r53, $r57, r62;
        long[] r2, r63, r64, r65, r66;
        android.renderscript.ScriptGroup$Node r3, $r55;
        android.renderscript.Script$KernelID r4, $r28, $r34, $r41, $r54, $r58;
        boolean z0, z1;
        byte $b15;
        android.renderscript.RenderScript $r15, $r18, $r29, $r32, $r36, $r40, $r47;
        android.renderscript.ScriptGroup$IO[] $r16, $r19, $r21, $r22;
        android.renderscript.ScriptGroup $r17, r68;
        android.renderscript.ScriptGroup$IO $r20, $r26, $r51, $r52;
        java.lang.Object $r23, $r27, $r30, $r38, $r46, $r50, $r56, $r60;
        android.renderscript.RSRuntimeException $r25, $r42;
        long $l21, $l22, $l23, $l25, $l26, l32;
        android.renderscript.Type $r31;
        android.renderscript.Script$FieldID $r33, $r35;
        android.renderscript.ScriptGroup$ConnectLine $r49, $r59, r67;
        android.renderscript.RSInvalidStateException $r61;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        $r5 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i6 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i6 != 0 goto label01;

        $r61 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r61.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Empty script groups are not allowed");

        throw $r61;

     label01:
        i0 = 0;

     label02:
        $r6 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i7 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i0 >= $i7 goto label03;

        $r53 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r56 = virtualinvoke $r53.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r55 = (android.renderscript.ScriptGroup$Node) $r56;

        $r55.<android.renderscript.ScriptGroup$Node: int dagNumber> = 0;

        i0 = i0 + 1;

        goto label02;

     label03:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAG()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r62 = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r1 = $r8;

        $i8 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        r2 = newarray (long)[$i8];

        i1 = 0;

        i2 = 0;

     label04:
        $r9 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i9 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i2 >= $i9 goto label15;

        $r37 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r38 = virtualinvoke $r37.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (android.renderscript.ScriptGroup$Node) $r38;

        i3 = 0;

     label05:
        $r39 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i24 = virtualinvoke $r39.<java.util.ArrayList: int size()>();

        if i3 >= $i24 goto label14;

        $r45 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r46 = virtualinvoke $r45.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (android.renderscript.Script$KernelID) $r46;

        $i28 = i1;

        i1 = i1 + 1;

        $r47 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l26 = virtualinvoke r4.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r47);

        r2[$i28] = $l26;

        z0 = 0;

        z1 = 0;

        i4 = 0;

     label06:
        $r43 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i27 = virtualinvoke $r43.<java.util.ArrayList: int size()>();

        if i4 >= $i27 goto label08;

        $r57 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $r60 = virtualinvoke $r57.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r59 = (android.renderscript.ScriptGroup$ConnectLine) $r60;

        $r54 = $r59.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r54 != r4 goto label07;

        z0 = 1;

     label07:
        i4 = i4 + 1;

        goto label06;

     label08:
        i30 = 0;

     label09:
        $r44 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i29 = virtualinvoke $r44.<java.util.ArrayList: int size()>();

        if i30 >= $i29 goto label11;

        $r48 = r3.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r50 = virtualinvoke $r48.<java.util.ArrayList: java.lang.Object get(int)>(i30);

        $r49 = (android.renderscript.ScriptGroup$ConnectLine) $r50;

        $r58 = $r49.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        if $r58 != r4 goto label10;

        z1 = 1;

     label10:
        i30 = i30 + 1;

        goto label09;

     label11:
        if z0 != 0 goto label12;

        $r52 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r52.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r4);

        virtualinvoke r62.<java.util.ArrayList: boolean add(java.lang.Object)>($r52);

     label12:
        if z1 != 0 goto label13;

        $r51 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r51.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r4);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r51);

     label13:
        i3 = i3 + 1;

        goto label05;

     label14:
        i2 = i2 + 1;

        goto label04;

     label15:
        $i10 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        if i1 == $i10 goto label16;

        $r42 = new android.renderscript.RSRuntimeException;

        specialinvoke $r42.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Count mismatch, should not happen.");

        throw $r42;

     label16:
        $r10 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i11 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        r63 = newarray (long)[$i11];

        $r11 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i12 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        r64 = newarray (long)[$i12];

        $r12 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i13 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        r65 = newarray (long)[$i13];

        $r13 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i14 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        r66 = newarray (long)[$i14];

        i31 = 0;

     label17:
        $r14 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i16 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        if i31 >= $i16 goto label20;

        $r24 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r30 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object get(int)>(i31);

        r67 = (android.renderscript.ScriptGroup$ConnectLine) $r30;

        $r28 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        $r29 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l21 = virtualinvoke $r28.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r29);

        r63[i31] = $l21;

        $r34 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r34 == null goto label18;

        $r41 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r40 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l25 = virtualinvoke $r41.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r40);

        r64[i31] = $l25;

     label18:
        $r33 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r33 == null goto label19;

        $r35 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r36 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l22 = virtualinvoke $r35.<android.renderscript.Script$FieldID: long getID(android.renderscript.RenderScript)>($r36);

        r65[i31] = $l22;

     label19:
        $r31 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Type mAllocationType>;

        $r32 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l23 = virtualinvoke $r31.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>($r32);

        r66[i31] = $l23;

        i31 = i31 + 1;

        goto label17;

     label20:
        $r15 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        l32 = virtualinvoke $r15.<android.renderscript.RenderScript: long nScriptGroupCreate(long[],long[],long[],long[],long[])>(r2, r63, r64, r65, r66);

        $b15 = l32 cmp 0L;

        if $b15 != 0 goto label21;

        $r25 = new android.renderscript.RSRuntimeException;

        specialinvoke $r25.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Object creation error, should not happen.");

        throw $r25;

     label21:
        $r17 = new android.renderscript.ScriptGroup;

        $r18 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        specialinvoke $r17.<android.renderscript.ScriptGroup: void <init>(long,android.renderscript.RenderScript)>(l32, $r18);

        r68 = $r17;

        $i17 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r16 = newarray (android.renderscript.ScriptGroup$IO)[$i17];

        r68.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs> = $r16;

        i5 = 0;

     label22:
        $i19 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i5 >= $i19 goto label23;

        $r21 = r68.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs>;

        $r27 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r26 = (android.renderscript.ScriptGroup$IO) $r27;

        $r21[i5] = $r26;

        i5 = i5 + 1;

        goto label22;

     label23:
        $i20 = virtualinvoke r62.<java.util.ArrayList: int size()>();

        $r19 = newarray (android.renderscript.ScriptGroup$IO)[$i20];

        r68.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs> = $r19;

        i33 = 0;

     label24:
        $i18 = virtualinvoke r62.<java.util.ArrayList: int size()>();

        if i33 >= $i18 goto label25;

        $r22 = r68.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs>;

        $r23 = virtualinvoke r62.<java.util.ArrayList: java.lang.Object get(int)>(i33);

        $r20 = (android.renderscript.ScriptGroup$IO) $r23;

        $r22[i33] = $r20;

        i33 = i33 + 1;

        goto label24;

     label25:
        return r68;
    }
}
