public final class android.hardware.location.GeofenceHardwareImpl extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private final android.content.Context mContext;
    private static android.hardware.location.GeofenceHardwareImpl sInstance;
    private android.os.PowerManager$WakeLock mWakeLock;
    private final android.util.SparseArray mGeofences;
    private final java.util.ArrayList[] mCallbacks;
    private final java.util.ArrayList mReapers;
    private android.location.IFusedGeofenceHardware mFusedService;
    private android.location.IGpsGeofenceHardware mGpsService;
    private int[] mSupportedMonitorTypes;
    private static final int GEOFENCE_TRANSITION_CALLBACK;
    private static final int ADD_GEOFENCE_CALLBACK;
    private static final int REMOVE_GEOFENCE_CALLBACK;
    private static final int PAUSE_GEOFENCE_CALLBACK;
    private static final int RESUME_GEOFENCE_CALLBACK;
    private static final int GEOFENCE_CALLBACK_BINDER_DIED;
    private static final int GEOFENCE_STATUS;
    private static final int CALLBACK_ADD;
    private static final int CALLBACK_REMOVE;
    private static final int MONITOR_CALLBACK_BINDER_DIED;
    private static final int REAPER_GEOFENCE_ADDED;
    private static final int REAPER_MONITOR_CALLBACK_ADDED;
    private static final int REAPER_REMOVED;
    private static final int LOCATION_INVALID;
    private static final int LOCATION_HAS_LAT_LONG;
    private static final int LOCATION_HAS_ALTITUDE;
    private static final int LOCATION_HAS_SPEED;
    private static final int LOCATION_HAS_BEARING;
    private static final int LOCATION_HAS_ACCURACY;
    private static final int RESOLUTION_LEVEL_NONE;
    private static final int RESOLUTION_LEVEL_COARSE;
    private static final int RESOLUTION_LEVEL_FINE;
    private android.os.Handler mGeofenceHandler;
    private android.os.Handler mCallbacksHandler;
    private android.os.Handler mReaperHandler;

    public static synchronized android.hardware.location.GeofenceHardwareImpl getInstance(android.content.Context)
    {
        android.content.Context r0;
        android.hardware.location.GeofenceHardwareImpl $r1, $r2, $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = <android.hardware.location.GeofenceHardwareImpl: android.hardware.location.GeofenceHardwareImpl sInstance>;

        if $r1 != null goto label1;

        $r3 = new android.hardware.location.GeofenceHardwareImpl;

        specialinvoke $r3.<android.hardware.location.GeofenceHardwareImpl: void <init>(android.content.Context)>(r0);

        <android.hardware.location.GeofenceHardwareImpl: android.hardware.location.GeofenceHardwareImpl sInstance> = $r3;

     label1:
        $r2 = <android.hardware.location.GeofenceHardwareImpl: android.hardware.location.GeofenceHardwareImpl sInstance>;

        return $r2;
    }

    private void <init>(android.content.Context)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.content.Context r1;
        android.util.SparseArray $r2;
        java.util.ArrayList[] $r3;
        java.util.ArrayList $r4;
        int[] $r5;
        android.hardware.location.GeofenceHardwareImpl$1 $r6;
        android.hardware.location.GeofenceHardwareImpl$2 $r7;
        android.hardware.location.GeofenceHardwareImpl$3 $r8;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences> = $r2;

        $r3 = newarray (java.util.ArrayList)[2];

        r0.<android.hardware.location.GeofenceHardwareImpl: java.util.ArrayList[] mCallbacks> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.location.GeofenceHardwareImpl: java.util.ArrayList mReapers> = $r4;

        $r5 = newarray (int)[2];

        r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes> = $r5;

        $r6 = new android.hardware.location.GeofenceHardwareImpl$1;

        specialinvoke $r6.<android.hardware.location.GeofenceHardwareImpl$1: void <init>(android.hardware.location.GeofenceHardwareImpl)>(r0);

        r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mGeofenceHandler> = $r6;

        $r7 = new android.hardware.location.GeofenceHardwareImpl$2;

        specialinvoke $r7.<android.hardware.location.GeofenceHardwareImpl$2: void <init>(android.hardware.location.GeofenceHardwareImpl)>(r0);

        r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler> = $r7;

        $r8 = new android.hardware.location.GeofenceHardwareImpl$3;

        specialinvoke $r8.<android.hardware.location.GeofenceHardwareImpl$3: void <init>(android.hardware.location.GeofenceHardwareImpl)>(r0);

        r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler> = $r8;

        r0.<android.hardware.location.GeofenceHardwareImpl: android.content.Context mContext> = r1;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void setMonitorAvailability(int,int)>(0, 2);

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void setMonitorAvailability(int,int)>(1, 2);

        return;
    }

    private void acquireWakeLock()
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.os.PowerManager r1;
        android.os.PowerManager$WakeLock $r2, $r3, $r6;
        android.content.Context $r4;
        java.lang.Object $r5;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.PowerManager$WakeLock mWakeLock>;

        if $r2 != null goto label1;

        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r1 = (android.os.PowerManager) $r5;

        $r6 = virtualinvoke r1.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "GeofenceHardwareImpl");

        r0.<android.hardware.location.GeofenceHardwareImpl: android.os.PowerManager$WakeLock mWakeLock> = $r6;

     label1:
        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        return;
    }

    private void releaseWakeLock()
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        return;
    }

    private void updateGpsHardwareAvailability()
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        boolean z0;
        android.location.IGpsGeofenceHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        z0 = interfaceinvoke $r2.<android.location.IGpsGeofenceHardware: boolean isHardwareGeofenceSupported()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "Remote Exception calling LocationManagerService");

        z0 = 0;

     label4:
        if z0 == 0 goto label5;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void setMonitorAvailability(int,int)>(0, 0);

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void updateFusedHardwareAvailability()
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        boolean z0, $z1;
        android.location.IFusedGeofenceHardware $r2, $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r2 == null goto label2;

        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        $z1 = interfaceinvoke $r3.<android.location.IFusedGeofenceHardware: boolean isSupported()>();

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "RemoteException calling LocationManagerService");

        z0 = 0;

     label6:
        if z0 == 0 goto label7;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void setMonitorAvailability(int,int)>(1, 0);

     label7:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    public void setGpsHardwareGeofence(android.location.IGpsGeofenceHardware)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.location.IGpsGeofenceHardware r1, $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        r1 := @parameter0: android.location.IGpsGeofenceHardware;

        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        if $r2 != null goto label1;

        r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService> = r1;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void updateGpsHardwareAvailability()>();

        goto label3;

     label1:
        if r1 != null goto label2;

        r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService> = null;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "GPS Geofence Hardware service seems to have crashed");

        goto label3;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "Error: GpsService being set again.");

     label3:
        return;
    }

    public void setFusedGeofenceHardware(android.location.IFusedGeofenceHardware)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.location.IFusedGeofenceHardware r1, $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        r1 := @parameter0: android.location.IFusedGeofenceHardware;

        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r2 != null goto label1;

        r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService> = r1;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void updateFusedHardwareAvailability()>();

        goto label3;

     label1:
        if r1 != null goto label2;

        r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService> = null;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "Fused Geofence Hardware service seems to have crashed");

        goto label3;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "Error: FusedService being set again");

     label3:
        return;
    }

    public int[] getMonitoringTypes()
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        boolean z0, z1, $z2, $z3;
        int[] r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Throwable r2, $r10;
        int $i0, $i1;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        $i0 = $r4[0];

        if $i0 == 2 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        z0 = $z3;

        $r5 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        $i1 = $r5[1];

        if $i1 == 2 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z1 = $z2;

        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label08:
        throw r2;

     label09:
        if z0 == 0 goto label11;

        if z1 == 0 goto label10;

        $r9 = newarray (int)[2];

        $r9[0] = 0;

        $r9[1] = 1;

        return $r9;

     label10:
        $r8 = newarray (int)[1];

        $r8[0] = 0;

        return $r8;

     label11:
        if z1 == 0 goto label12;

        $r7 = newarray (int)[1];

        $r7[0] = 1;

        return $r7;

     label12:
        $r6 = newarray (int)[0];

        return $r6;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public int getStatusOfMonitoringType(int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, $i1, $i2;
        int[] r1, $r3, $r4, $r6;
        java.lang.Throwable r2, $r7;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label2;

        if i0 >= 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown monitoring type");

        throw $r5;

     label3:
        $r6 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        $i2 = $r6[i0];

        exitmonitor r1;

     label4:
        return $i2;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean addCircularFence(int, android.hardware.location.GeofenceHardwareRequestParcelable, android.hardware.location.IGeofenceHardwareCallback)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        android.hardware.location.GeofenceHardwareRequestParcelable r1;
        android.hardware.location.IGeofenceHardwareCallback r2;
        java.lang.String r3, $r16;
        android.util.SparseArray r4, $r7, $r8, $r11, $r13, r31;
        java.lang.Throwable r5, r6, $r24, $r27;
        boolean $z0, $z1, z3;
        android.location.IFusedGeofenceHardware $r9, $r12;
        android.hardware.location.GeofenceHardwareRequestParcelable[] $r10;
        java.lang.StringBuilder $r14, $r15, $r17;
        android.os.Handler $r18, $r19;
        android.location.IGpsGeofenceHardware $r20, $r21;
        double $d0, $d1, $d2;
        java.lang.Object[] $r22;
        java.lang.Integer $r23;
        android.os.RemoteException $r25, $r26;
        android.os.Message r30;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.location.GeofenceHardwareRequestParcelable;

        r2 := @parameter2: android.hardware.location.IGeofenceHardwareCallback;

        i1 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getId()>();

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r22 = newarray (java.lang.Object)[2];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r22[0] = $r23;

        $r22[1] = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("addCircularFence: monitoringType=%d, %s", $r22);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", r3);

     label01:
        $r7 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        r4 = $r7;

        entermonitor $r7;

     label02:
        $r8 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r2);

        exitmonitor r4;

     label03:
        goto label06;

     label04:
        $r24 := @caughtexception;

        r5 = $r24;

        exitmonitor r4;

     label05:
        throw r5;

     label06:
        lookupswitch(i0)
        {
            case 0: goto label07;
            case 1: goto label11;
            default: goto label15;
        };

     label07:
        $r20 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        if $r20 != null goto label08;

        return 0;

     label08:
        $r21 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        $i3 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getId()>();

        $d0 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: double getLatitude()>();

        $d1 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: double getLongitude()>();

        $d2 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: double getRadius()>();

        $i6 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getLastTransition()>();

        $i4 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getMonitorTransitions()>();

        $i5 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getNotificationResponsiveness()>();

        $i7 = virtualinvoke r1.<android.hardware.location.GeofenceHardwareRequestParcelable: int getUnknownTimer()>();

        z3 = interfaceinvoke $r21.<android.location.IGpsGeofenceHardware: boolean addCircularHardwareGeofence(int,double,double,double,int,int,int,int)>($i3, $d0, $d1, $d2, $i6, $i4, $i5, $i7);

     label09:
        goto label16;

     label10:
        $r26 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "AddGeofence: Remote Exception calling LocationManagerService");

        z3 = 0;

        goto label16;

     label11:
        $r9 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r9 != null goto label12;

        return 0;

     label12:
        $r12 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        $r10 = newarray (android.hardware.location.GeofenceHardwareRequestParcelable)[1];

        $r10[0] = r1;

        interfaceinvoke $r12.<android.location.IFusedGeofenceHardware: void addGeofences(android.hardware.location.GeofenceHardwareRequestParcelable[])>($r10);

        z3 = 1;

     label13:
        goto label16;

     label14:
        $r25 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "AddGeofence: RemoteException calling LocationManagerService");

        z3 = 0;

        goto label16;

     label15:
        z3 = 0;

     label16:
        if z3 == 0 goto label17;

        $r18 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler>;

        r30 = virtualinvoke $r18.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r2);

        r30.<android.os.Message: int arg1> = i0;

        $r19 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler>;

        virtualinvoke $r19.<android.os.Handler: boolean sendMessage(android.os.Message)>(r30);

        goto label22;

     label17:
        $r11 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        r31 = $r11;

        entermonitor $r11;

     label18:
        $r13 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        virtualinvoke $r13.<android.util.SparseArray: void remove(int)>(i1);

        exitmonitor r31;

     label19:
        goto label22;

     label20:
        $r27 := @caughtexception;

        r6 = $r27;

        exitmonitor r31;

     label21:
        throw r6;

     label22:
        $z1 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z1 == 0 goto label23;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addCircularFence: Result is: ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r16);

     label23:
        return z3;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public boolean removeGeofence(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        android.util.SparseArray r1, $r3, $r4;
        java.lang.Throwable r2, $r26;
        boolean $z1, $z2, z3;
        java.lang.Object $r5;
        android.location.IFusedGeofenceHardware $r6, $r8;
        int[] $r7;
        java.lang.StringBuilder $r9, $r10, $r12, $r15, $r17, $r18, $r20, $r21, $r23, $r24;
        java.lang.String $r11, $r19, $r22;
        android.location.IGpsGeofenceHardware $r13, $r14;
        java.lang.IllegalArgumentException $r16;
        android.os.RemoteException $r25, $r27;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z1 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove Geofence: GeofenceId: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r22);

     label01:
        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r5 != null goto label03;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Geofence ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered.");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r26 := @caughtexception;

        r2 = $r26;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        lookupswitch(i1)
        {
            case 0: goto label08;
            case 1: goto label12;
            default: goto label16;
        };

     label08:
        $r13 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        if $r13 != null goto label09;

        return 0;

     label09:
        $r14 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        z3 = interfaceinvoke $r14.<android.location.IGpsGeofenceHardware: boolean removeHardwareGeofence(int)>(i0);

     label10:
        goto label17;

     label11:
        $r27 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "RemoveGeofence: Remote Exception calling LocationManagerService");

        z3 = 0;

        goto label17;

     label12:
        $r6 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r6 != null goto label13;

        return 0;

     label13:
        $r8 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        $r7 = newarray (int)[1];

        $r7[0] = i0;

        interfaceinvoke $r8.<android.location.IFusedGeofenceHardware: void removeGeofences(int[])>($r7);

        z3 = 1;

     label14:
        goto label17;

     label15:
        $r25 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "RemoveGeofence: RemoteException calling LocationManagerService");

        z3 = 0;

        goto label17;

     label16:
        z3 = 0;

     label17:
        $z2 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z2 == 0 goto label18;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeGeofence: Result is: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r11);

     label18:
        return z3;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public boolean pauseGeofence(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        boolean z0, $z1, $z2;
        android.util.SparseArray r1, $r3, $r4;
        java.lang.Throwable r2, $r26;
        java.lang.Object $r5;
        android.location.IFusedGeofenceHardware $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r19, $r21, $r23;
        java.lang.String $r11, $r20, $r24;
        android.location.IGpsGeofenceHardware $r12, $r13;
        java.lang.IllegalArgumentException $r14;
        android.os.RemoteException $r22, $r25;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z1 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pause Geofence: GeofenceId: ");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r24);

     label01:
        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r5 != null goto label03;

        $r14 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Geofence ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered.");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r26 := @caughtexception;

        r2 = $r26;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        lookupswitch(i1)
        {
            case 0: goto label08;
            case 1: goto label12;
            default: goto label16;
        };

     label08:
        $r13 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        if $r13 != null goto label09;

        return 0;

     label09:
        $r12 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        z0 = interfaceinvoke $r12.<android.location.IGpsGeofenceHardware: boolean pauseHardwareGeofence(int)>(i0);

     label10:
        goto label17;

     label11:
        $r22 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "PauseGeofence: Remote Exception calling LocationManagerService");

        z0 = 0;

        goto label17;

     label12:
        $r6 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r6 != null goto label13;

        return 0;

     label13:
        $r7 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        interfaceinvoke $r7.<android.location.IFusedGeofenceHardware: void pauseMonitoringGeofence(int)>(i0);

        z0 = 1;

     label14:
        goto label17;

     label15:
        $r25 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "PauseGeofence: RemoteException calling LocationManagerService");

        z0 = 0;

        goto label17;

     label16:
        z0 = 0;

     label17:
        $z2 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z2 == 0 goto label18;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pauseGeofence: Result is: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r11);

     label18:
        return z0;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public boolean resumeGeofence(int, int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, i2;
        boolean z0, $z1, $z2;
        android.util.SparseArray r1, $r3, $r4;
        java.lang.Throwable r2, $r25;
        java.lang.Object $r5;
        android.location.IFusedGeofenceHardware $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r14, $r16, $r17, $r19, $r20, $r22, $r23;
        java.lang.String $r10, $r18, $r21;
        android.location.IGpsGeofenceHardware $r12, $r13;
        java.lang.IllegalArgumentException $r15;
        android.os.RemoteException $r24, $r26;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z1 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resume Geofence: GeofenceId: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r21);

     label01:
        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r5 != null goto label03;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Geofence ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered.");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r25 := @caughtexception;

        r2 = $r25;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        lookupswitch(i1)
        {
            case 0: goto label08;
            case 1: goto label12;
            default: goto label16;
        };

     label08:
        $r12 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        if $r12 != null goto label09;

        return 0;

     label09:
        $r13 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IGpsGeofenceHardware mGpsService>;

        z0 = interfaceinvoke $r13.<android.location.IGpsGeofenceHardware: boolean resumeHardwareGeofence(int,int)>(i0, i2);

     label10:
        goto label17;

     label11:
        $r24 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "ResumeGeofence: Remote Exception calling LocationManagerService");

        z0 = 0;

        goto label17;

     label12:
        $r6 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        if $r6 != null goto label13;

        return 0;

     label13:
        $r7 = r0.<android.hardware.location.GeofenceHardwareImpl: android.location.IFusedGeofenceHardware mFusedService>;

        interfaceinvoke $r7.<android.location.IFusedGeofenceHardware: void resumeMonitoringGeofence(int,int)>(i0, i2);

        z0 = 1;

     label14:
        goto label17;

     label15:
        $r26 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", "ResumeGeofence: RemoteException calling LocationManagerService");

        z0 = 0;

        goto label17;

     label16:
        z0 = 0;

     label17:
        $z2 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z2 == 0 goto label18;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resumeGeofence: Result is: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r10);

     label18:
        return z0;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public boolean registerForMonitorStateChangeCallback(int, android.hardware.location.IGeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0;
        android.hardware.location.IGeofenceHardwareMonitorCallback r1;
        android.os.Message r2, r3;
        android.os.Handler $r4, $r5, $r6, $r7;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.location.IGeofenceHardwareMonitorCallback;

        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler>;

        r2 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        r2.<android.os.Message: int arg1> = i0;

        $r5 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        $r6 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        r3 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        r3.<android.os.Message: int arg1> = i0;

        $r7 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        virtualinvoke $r7.<android.os.Handler: boolean sendMessage(android.os.Message)>(r3);

        return 1;
    }

    public boolean unregisterForMonitorStateChangeCallback(int, android.hardware.location.IGeofenceHardwareMonitorCallback)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0;
        android.hardware.location.IGeofenceHardwareMonitorCallback r1;
        android.os.Message r2;
        android.os.Handler $r3, $r4;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.location.IGeofenceHardwareMonitorCallback;

        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r1);

        r2.<android.os.Message: int arg1> = i0;

        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        return 1;
    }

    public void reportGeofenceTransition(int, android.location.Location, int, long, int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, i3, i4;
        android.location.Location r1;
        long l2;
        android.hardware.location.GeofenceHardwareImpl$GeofenceTransition r2, $r4;
        android.os.Message r3;
        boolean $z0;
        android.os.Handler $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r17, $r19;
        java.lang.Object[] $r18;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.location.Location;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        if r1 != null goto label1;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r1;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid Geofence Transition: location=%p", $r18);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r19);

        return;

     label1:
        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GeofenceTransition| ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", transition:");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", transitionTimestamp:");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", monitoringType:");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sourcesUsed:");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r17);

     label2:
        $r4 = new android.hardware.location.GeofenceHardwareImpl$GeofenceTransition;

        specialinvoke $r4.<android.hardware.location.GeofenceHardwareImpl$GeofenceTransition: void <init>(android.hardware.location.GeofenceHardwareImpl,int,int,long,android.location.Location,int,int)>(r0, i0, i1, l2, r1, i3, i4);

        r2 = $r4;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void acquireWakeLock()>();

        $r5 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mGeofenceHandler>;

        r3 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r2);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void reportGeofenceMonitorStatus(int, int, android.location.Location, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, i2;
        android.location.Location r1;
        android.hardware.location.GeofenceHardwareMonitorEvent r2, $r4;
        android.os.Message r3;
        android.os.Handler $r5;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.location.Location;

        i2 := @parameter3: int;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void setMonitorAvailability(int,int)>(i0, i1);

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void acquireWakeLock()>();

        $r4 = new android.hardware.location.GeofenceHardwareMonitorEvent;

        specialinvoke $r4.<android.hardware.location.GeofenceHardwareMonitorEvent: void <init>(int,int,int,android.location.Location)>(i0, i1, i2, r1);

        r2 = $r4;

        $r5 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        r3 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r2);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void reportGeofenceOperationStatus(int, int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, i2;
        android.os.Message r1;
        android.os.Handler $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void acquireWakeLock()>();

        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mGeofenceHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(i0);

        r1.<android.os.Message: int arg1> = i1;

        r1.<android.os.Message: int arg2> = i2;

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void reportGeofenceAddStatus(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AddCallback| id:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r6);

     label1:
        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceOperationStatus(int,int,int)>(2, i0, i1);

        return;
    }

    public void reportGeofenceRemoveStatus(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoveCallback| id:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r6);

     label1:
        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceOperationStatus(int,int,int)>(3, i0, i1);

        return;
    }

    public void reportGeofencePauseStatus(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PauseCallbac| id:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r6);

     label1:
        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceOperationStatus(int,int,int)>(4, i0, i1);

        return;
    }

    public void reportGeofenceResumeStatus(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResumeCallback| id:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GeofenceHardwareImpl", $r6);

     label1:
        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceOperationStatus(int,int,int)>(5, i0, i1);

        return;
    }

    private void setMonitorAvailability(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1;
        int[] r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.hardware.location.GeofenceHardwareImpl: int[] mSupportedMonitorTypes>;

        $r4[i0] = i1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    int getMonitoringResolutionLevel(int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        return 3;

     label2:
        return 3;

     label3:
        return 1;
    }

    int getAllowedResolutionLevel(int, int)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1, $r2;

        r0 := @this: android.hardware.location.GeofenceHardwareImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_FINE_LOCATION", i0, i1);

        if $i2 != 0 goto label1;

        return 3;

     label1:
        $r2 = r0.<android.hardware.location.GeofenceHardwareImpl: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_COARSE_LOCATION", i0, i1);

        if $i3 != 0 goto label2;

        return 2;

     label2:
        return 1;
    }

    static android.util.SparseArray access$000(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.util.SparseArray mGeofences>;

        return $r1;
    }

    static void access$100(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        specialinvoke r0.<android.hardware.location.GeofenceHardwareImpl: void releaseWakeLock()>();

        return;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG>;

        return $z0;
    }

    static java.util.ArrayList[] access$800(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        java.util.ArrayList[] $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: java.util.ArrayList[] mCallbacks>;

        return $r1;
    }

    static java.util.ArrayList access$900(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: java.util.ArrayList mReapers>;

        return $r1;
    }

    static android.os.Handler access$1000(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mGeofenceHandler>;

        return $r1;
    }

    static android.os.Handler access$1100(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mCallbacksHandler>;

        return $r1;
    }

    static android.os.Handler access$1200(android.hardware.location.GeofenceHardwareImpl)
    {
        android.hardware.location.GeofenceHardwareImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.location.GeofenceHardwareImpl;

        $r1 = r0.<android.hardware.location.GeofenceHardwareImpl: android.os.Handler mReaperHandler>;

        return $r1;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.location.GeofenceHardwareImpl: int RESOLUTION_LEVEL_FINE> = 3;

        <android.hardware.location.GeofenceHardwareImpl: int RESOLUTION_LEVEL_COARSE> = 2;

        <android.hardware.location.GeofenceHardwareImpl: int RESOLUTION_LEVEL_NONE> = 1;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_HAS_ACCURACY> = 16;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_HAS_BEARING> = 8;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_HAS_SPEED> = 4;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_HAS_ALTITUDE> = 2;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_HAS_LAT_LONG> = 1;

        <android.hardware.location.GeofenceHardwareImpl: int LOCATION_INVALID> = 0;

        <android.hardware.location.GeofenceHardwareImpl: int REAPER_REMOVED> = 3;

        <android.hardware.location.GeofenceHardwareImpl: int REAPER_MONITOR_CALLBACK_ADDED> = 2;

        <android.hardware.location.GeofenceHardwareImpl: int REAPER_GEOFENCE_ADDED> = 1;

        <android.hardware.location.GeofenceHardwareImpl: int MONITOR_CALLBACK_BINDER_DIED> = 4;

        <android.hardware.location.GeofenceHardwareImpl: int CALLBACK_REMOVE> = 3;

        <android.hardware.location.GeofenceHardwareImpl: int CALLBACK_ADD> = 2;

        <android.hardware.location.GeofenceHardwareImpl: int GEOFENCE_STATUS> = 1;

        <android.hardware.location.GeofenceHardwareImpl: int GEOFENCE_CALLBACK_BINDER_DIED> = 6;

        <android.hardware.location.GeofenceHardwareImpl: int RESUME_GEOFENCE_CALLBACK> = 5;

        <android.hardware.location.GeofenceHardwareImpl: int PAUSE_GEOFENCE_CALLBACK> = 4;

        <android.hardware.location.GeofenceHardwareImpl: int REMOVE_GEOFENCE_CALLBACK> = 3;

        <android.hardware.location.GeofenceHardwareImpl: int ADD_GEOFENCE_CALLBACK> = 2;

        <android.hardware.location.GeofenceHardwareImpl: int GEOFENCE_TRANSITION_CALLBACK> = 1;

        <android.hardware.location.GeofenceHardwareImpl: java.lang.String TAG> = "GeofenceHardwareImpl";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("GeofenceHardwareImpl", 3);

        <android.hardware.location.GeofenceHardwareImpl: boolean DEBUG> = $z0;

        return;
    }
}
