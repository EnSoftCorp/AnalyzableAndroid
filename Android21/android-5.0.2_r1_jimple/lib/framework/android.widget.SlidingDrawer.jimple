public class android.widget.SlidingDrawer extends android.view.ViewGroup
{
    public static final int ORIENTATION_HORIZONTAL;
    public static final int ORIENTATION_VERTICAL;
    private static final int TAP_THRESHOLD;
    private static final float MAXIMUM_TAP_VELOCITY;
    private static final float MAXIMUM_MINOR_VELOCITY;
    private static final float MAXIMUM_MAJOR_VELOCITY;
    private static final float MAXIMUM_ACCELERATION;
    private static final int VELOCITY_UNITS;
    private static final int MSG_ANIMATE;
    private static final int ANIMATION_FRAME_DURATION;
    private static final int EXPANDED_FULL_OPEN;
    private static final int COLLAPSED_FULL_CLOSED;
    private final int mHandleId;
    private final int mContentId;
    private android.view.View mHandle;
    private android.view.View mContent;
    private final android.graphics.Rect mFrame;
    private final android.graphics.Rect mInvalidate;
    private boolean mTracking;
    private boolean mLocked;
    private android.view.VelocityTracker mVelocityTracker;
    private boolean mVertical;
    private boolean mExpanded;
    private int mBottomOffset;
    private int mTopOffset;
    private int mHandleHeight;
    private int mHandleWidth;
    private android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener;
    private android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener;
    private android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener;
    private final android.os.Handler mHandler;
    private float mAnimatedAcceleration;
    private float mAnimatedVelocity;
    private float mAnimationPosition;
    private long mAnimationLastTime;
    private long mCurrentAnimationTime;
    private int mTouchDelta;
    private boolean mAnimating;
    private boolean mAllowSingleTap;
    private boolean mAnimateOnClick;
    private final int mTapThreshold;
    private final int mMaximumTapVelocity;
    private final int mMaximumMinorVelocity;
    private final int mMaximumMajorVelocity;
    private final int mMaximumAcceleration;
    private final int mVelocityUnits;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.SlidingDrawer r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.SlidingDrawer r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.SlidingDrawer r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.content.res.TypedArray r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        android.graphics.Rect $r4, $r5;
        android.widget.SlidingDrawer$SlidingHandler $r6;
        int[] $r7;
        boolean $z0, $z1, $z2;
        android.util.DisplayMetrics $r8;
        android.content.res.Resources $r9;
        java.lang.IllegalArgumentException $r10, $r11, $r12;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate> = $r5;

        $r6 = new android.widget.SlidingDrawer$SlidingHandler;

        specialinvoke $r6.<android.widget.SlidingDrawer$SlidingHandler: void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)>(r0, null);

        r0.<android.widget.SlidingDrawer: android.os.Handler mHandler> = $r6;

        $r7 = <android.R$styleable: int[] SlidingDrawer>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r7, i0, i1);

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(0, 1);

        if i2 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<android.widget.SlidingDrawer: boolean mVertical> = $z2;

        $f1 = virtualinvoke r3.<android.content.res.TypedArray: float getDimension(int,float)>(1, 0.0F);

        $i5 = (int) $f1;

        r0.<android.widget.SlidingDrawer: int mBottomOffset> = $i5;

        $f2 = virtualinvoke r3.<android.content.res.TypedArray: float getDimension(int,float)>(2, 0.0F);

        $i6 = (int) $f2;

        r0.<android.widget.SlidingDrawer: int mTopOffset> = $i6;

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 1);

        r0.<android.widget.SlidingDrawer: boolean mAllowSingleTap> = $z1;

        $z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 1);

        r0.<android.widget.SlidingDrawer: boolean mAnimateOnClick> = $z0;

        i3 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(4, 0);

        if i3 != 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The handle attribute is required and must refer to a valid child.");

        throw $r10;

     label3:
        i4 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(5, 0);

        if i4 != 0 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content attribute is required and must refer to a valid child.");

        throw $r12;

     label4:
        if i3 != i4 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content and handle attributes must refer to different children.");

        throw $r11;

     label5:
        r0.<android.widget.SlidingDrawer: int mHandleId> = i3;

        r0.<android.widget.SlidingDrawer: int mContentId> = i4;

        $r9 = virtualinvoke r0.<android.widget.SlidingDrawer: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r9.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        f0 = $r8.<android.util.DisplayMetrics: float density>;

        $f4 = 6.0F * f0;

        $f3 = $f4 + 0.5F;

        $i7 = (int) $f3;

        r0.<android.widget.SlidingDrawer: int mTapThreshold> = $i7;

        $f5 = 100.0F * f0;

        $f6 = $f5 + 0.5F;

        $i8 = (int) $f6;

        r0.<android.widget.SlidingDrawer: int mMaximumTapVelocity> = $i8;

        $f8 = 150.0F * f0;

        $f9 = $f8 + 0.5F;

        $i9 = (int) $f9;

        r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity> = $i9;

        $f7 = 200.0F * f0;

        $f12 = $f7 + 0.5F;

        $i10 = (int) $f12;

        r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity> = $i10;

        $f10 = 2000.0F * f0;

        $f11 = $f10 + 0.5F;

        $i12 = (int) $f11;

        r0.<android.widget.SlidingDrawer: int mMaximumAcceleration> = $i12;

        $f14 = 1000.0F * f0;

        $f13 = $f14 + 0.5F;

        $i11 = (int) $f13;

        r0.<android.widget.SlidingDrawer: int mVelocityUnits> = $i11;

        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void setAlwaysDrawnWithCacheEnabled(boolean)>(0);

        return;
    }

    protected void onFinishInflate()
    {
        android.widget.SlidingDrawer r0;
        int $i0, $i1;
        android.view.View $r1, $r2, $r4, $r5, $r6, $r7;
        android.widget.SlidingDrawer$DrawerToggler $r3;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @this: android.widget.SlidingDrawer;

        $i0 = r0.<android.widget.SlidingDrawer: int mHandleId>;

        $r1 = virtualinvoke r0.<android.widget.SlidingDrawer: android.view.View findViewById(int)>($i0);

        r0.<android.widget.SlidingDrawer: android.view.View mHandle> = $r1;

        $r2 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        if $r2 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The handle attribute is must refer to an existing child.");

        throw $r9;

     label1:
        $r4 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $r3 = new android.widget.SlidingDrawer$DrawerToggler;

        specialinvoke $r3.<android.widget.SlidingDrawer$DrawerToggler: void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)>(r0, null);

        virtualinvoke $r4.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r3);

        $i1 = r0.<android.widget.SlidingDrawer: int mContentId>;

        $r5 = virtualinvoke r0.<android.widget.SlidingDrawer: android.view.View findViewById(int)>($i1);

        r0.<android.widget.SlidingDrawer: android.view.View mContent> = $r5;

        $r6 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        if $r6 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content attribute is must refer to an existing child.");

        throw $r8;

     label2:
        $r7 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r7.<android.view.View: void setVisibility(int)>(8);

        return;
    }

    protected void onMeasure(int, int)
    {
        android.widget.SlidingDrawer r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        android.view.View r1, $r3, $r4;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        if i2 == 0 goto label1;

        if i4 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("SlidingDrawer cannot have UNSPECIFIED dimensions");

        throw $r2;

     label2:
        r1 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke r0.<android.widget.SlidingDrawer: void measureChild(android.view.View,int,int)>(r1, i0, i1);

        $z0 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label3;

        $i11 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i13 = i5 - $i11;

        $i14 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i6 = $i13 - $i14;

        $r4 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i15 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i3, 1073741824);

        $i16 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i6, 1073741824);

        virtualinvoke $r4.<android.view.View: void measure(int,int)>($i15, $i16);

        goto label4;

     label3:
        $i7 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i8 = i3 - $i7;

        $i9 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i17 = $i8 - $i9;

        $r3 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i10 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i17, 1073741824);

        $i12 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i5, 1073741824);

        virtualinvoke $r3.<android.view.View: void measure(int,int)>($i10, $i12);

     label4:
        virtualinvoke r0.<android.widget.SlidingDrawer: void setMeasuredDimension(int,int)>(i3, i5);

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.widget.SlidingDrawer r0;
        android.graphics.Canvas r1;
        long l0;
        android.view.View r2, $r4, $r5, $r6;
        boolean z0, $z2, $z4, $z5;
        android.graphics.Bitmap r3;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.graphics.Canvas;

        l0 = virtualinvoke r0.<android.widget.SlidingDrawer: long getDrawingTime()>();

        r2 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        z0 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        virtualinvoke r0.<android.widget.SlidingDrawer: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r2, l0);

        $z2 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z2 != 0 goto label01;

        $z5 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z5 == 0 goto label09;

     label01:
        $r4 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        r3 = virtualinvoke $r4.<android.view.View: android.graphics.Bitmap getDrawingCache()>();

        if r3 == null goto label03;

        if z0 == 0 goto label02;

        $i9 = virtualinvoke r2.<android.view.View: int getBottom()>();

        $f3 = (float) $i9;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r3, 0.0F, $f3, null);

        goto label08;

     label02:
        $i8 = virtualinvoke r2.<android.view.View: int getRight()>();

        $f2 = (float) $i8;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r3, $f2, 0.0F, null);

        goto label08;

     label03:
        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        if z0 == 0 goto label04;

        $f0 = 0.0F;

        goto label05;

     label04:
        $i2 = virtualinvoke r2.<android.view.View: int getLeft()>();

        $i3 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i4 = $i2 - $i3;

        $f0 = (float) $i4;

     label05:
        if z0 == 0 goto label06;

        $i5 = virtualinvoke r2.<android.view.View: int getTop()>();

        $i7 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i6 = $i5 - $i7;

        $f1 = (float) $i6;

        goto label07;

     label06:
        $f1 = 0.0F;

     label07:
        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r5 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke r0.<android.widget.SlidingDrawer: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, $r5, l0);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label08:
        goto label10;

     label09:
        $z4 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z4 == 0 goto label10;

        $r6 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke r0.<android.widget.SlidingDrawer: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, $r6, l0);

     label10:
        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.widget.SlidingDrawer r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        android.view.View r1, r2;

        r0 := @this: android.widget.SlidingDrawer;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z1 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z1 == 0 goto label1;

        return;

     label1:
        i4 = i2 - i0;

        i5 = i3 - i1;

        r1 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i6 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i7 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        r2 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $z2 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z2 == 0 goto label4;

        $i23 = i4 - i6;

        i8 = $i23 / 2;

        $z4 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z4 == 0 goto label2;

        $i33 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        goto label3;

     label2:
        $i26 = i5 - i7;

        $i28 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i33 = $i26 + $i28;

     label3:
        i9 = $i33;

        $i27 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i31 = $i27 + i7;

        $i29 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i30 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i34 = $i30 + i7;

        $i35 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        $i32 = $i34 + $i35;

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>(0, $i31, $i29, $i32);

        goto label7;

     label4:
        $z3 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z3 == 0 goto label5;

        $i22 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        goto label6;

     label5:
        $i12 = i4 - i6;

        $i10 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i22 = $i12 + $i10;

     label6:
        i8 = $i22;

        $i11 = i5 - i7;

        i9 = $i11 / 2;

        $i14 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i15 = $i14 + i6;

        $i13 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i17 = $i13 + i6;

        $i16 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i19 = $i17 + $i16;

        $i18 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r2.<android.view.View: void layout(int,int,int,int)>($i15, 0, $i19, $i18);

     label7:
        $i20 = i8 + i6;

        $i21 = i9 + i7;

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(i8, i9, $i20, $i21);

        $i24 = virtualinvoke r1.<android.view.View: int getHeight()>();

        r0.<android.widget.SlidingDrawer: int mHandleHeight> = $i24;

        $i25 = virtualinvoke r1.<android.view.View: int getWidth()>();

        r0.<android.widget.SlidingDrawer: int mHandleWidth> = $i25;

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        android.widget.SlidingDrawer r0;
        android.view.MotionEvent r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        float f0, f1;
        android.graphics.Rect r2;
        android.view.View r3, $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r4, $r8;
        android.view.VelocityTracker $r6;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mLocked>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        r3 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke r3.<android.view.View: void getHitRect(android.graphics.Rect)>(r2);

        $z1 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z1 != 0 goto label2;

        $i7 = (int) f0;

        $i6 = (int) f1;

        $z3 = virtualinvoke r2.<android.graphics.Rect: boolean contains(int,int)>($i7, $i6);

        if $z3 != 0 goto label2;

        return 0;

     label2:
        if i0 != 0 goto label6;

        r0.<android.widget.SlidingDrawer: boolean mTracking> = 1;

        virtualinvoke r3.<android.view.View: void setPressed(boolean)>(1);

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareContent()>();

        $r4 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r4 == null goto label3;

        $r8 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        interfaceinvoke $r8.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label3:
        $z2 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z2 == 0 goto label4;

        $r7 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i1 = virtualinvoke $r7.<android.view.View: int getTop()>();

        $i5 = (int) f1;

        $i4 = $i5 - i1;

        r0.<android.widget.SlidingDrawer: int mTouchDelta> = $i4;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareTracking(int)>(i1);

        goto label5;

     label4:
        $r5 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i8 = virtualinvoke $r5.<android.view.View: int getLeft()>();

        $i2 = (int) f0;

        $i3 = $i2 - i8;

        r0.<android.widget.SlidingDrawer: int mTouchDelta> = $i3;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareTracking(int)>(i8);

     label5:
        $r6 = r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r6.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

     label6:
        return 1;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.widget.SlidingDrawer r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i44, $i46;
        android.view.VelocityTracker r2, $r3;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        byte $b7, $b8, $b10, $b11, $b43, $b45, $b47;
        double $d0, $d1, $d2;
        android.view.View $r4, $r5;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.view.MotionEvent;

        $z2 = r0.<android.widget.SlidingDrawer: boolean mLocked>;

        if $z2 == 0 goto label01;

        return 1;

     label01:
        $z3 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z3 == 0 goto label33;

        $r3 = r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r3.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch(i0)
        {
            case 1: goto label05;
            case 2: goto label02;
            case 3: goto label05;
            default: goto label33;
        };

     label02:
        $z8 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z8 == 0 goto label03;

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        goto label04;

     label03:
        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

     label04:
        $i5 = (int) $f3;

        $i3 = r0.<android.widget.SlidingDrawer: int mTouchDelta>;

        $i4 = $i5 - $i3;

        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i4);

        goto label33;

     label05:
        r2 = r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        $i6 = r0.<android.widget.SlidingDrawer: int mVelocityUnits>;

        virtualinvoke r2.<android.view.VelocityTracker: void computeCurrentVelocity(int)>($i6);

        f0 = virtualinvoke r2.<android.view.VelocityTracker: float getYVelocity()>();

        f1 = virtualinvoke r2.<android.view.VelocityTracker: float getXVelocity()>();

        z1 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if z1 == 0 goto label09;

        $b45 = f0 cmpg 0.0F;

        if $b45 >= 0 goto label06;

        $z15 = 1;

        goto label07;

     label06:
        $z15 = 0;

     label07:
        z0 = $z15;

        $b47 = f1 cmpg 0.0F;

        if $b47 >= 0 goto label08;

        f1 = neg f1;

     label08:
        $i46 = r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f7 = (float) $i46;

        $b43 = f1 cmpl $f7;

        if $b43 <= 0 goto label13;

        $i44 = r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        f1 = (float) $i44;

        goto label13;

     label09:
        $b8 = f1 cmpg 0.0F;

        if $b8 >= 0 goto label10;

        $z16 = 1;

        goto label11;

     label10:
        $z16 = 0;

     label11:
        z0 = $z16;

        $b7 = f0 cmpg 0.0F;

        if $b7 >= 0 goto label12;

        f0 = neg f0;

     label12:
        $i9 = r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f4 = (float) $i9;

        $b10 = f0 cmpl $f4;

        if $b10 <= 0 goto label13;

        $i38 = r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        f0 = (float) $i38;

     label13:
        $d0 = (double) f1;

        $d2 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double hypot(double,double)>($d0, $d2);

        f2 = (float) $d1;

        if z0 == 0 goto label14;

        f2 = neg f2;

     label14:
        $r5 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i1 = virtualinvoke $r5.<android.view.View: int getTop()>();

        $r4 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i2 = virtualinvoke $r4.<android.view.View: int getLeft()>();

        $f6 = staticinvoke <java.lang.Math: float abs(float)>(f2);

        $i12 = r0.<android.widget.SlidingDrawer: int mMaximumTapVelocity>;

        $f5 = (float) $i12;

        $b11 = $f6 cmpg $f5;

        if $b11 >= 0 goto label30;

        if z1 == 0 goto label16;

        $z13 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z13 == 0 goto label15;

        $i36 = r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i35 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i37 = $i36 + $i35;

        if i1 < $i37 goto label18;

     label15:
        $z14 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z14 != 0 goto label27;

        $i29 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i34 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i31 = $i29 + $i34;

        $i30 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i39 = $i31 - $i30;

        $i32 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i41 = $i39 - $i32;

        $i40 = r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i42 = $i41 - $i40;

        if i1 <= $i42 goto label27;

        goto label18;

     label16:
        $z10 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z10 == 0 goto label17;

        $i25 = r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i26 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i33 = $i25 + $i26;

        if i2 < $i33 goto label18;

     label17:
        $z9 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z9 != 0 goto label27;

        $i17 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i18 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i15 = $i17 + $i18;

        $i16 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i21 = $i15 - $i16;

        $i22 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i19 = $i21 - $i22;

        $i20 = r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i24 = $i19 - $i20;

        if i2 <= $i24 goto label27;

     label18:
        $z12 = r0.<android.widget.SlidingDrawer: boolean mAllowSingleTap>;

        if $z12 == 0 goto label24;

        virtualinvoke r0.<android.widget.SlidingDrawer: void playSoundEffect(int)>(0);

        $z11 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z11 == 0 goto label21;

        if z1 == 0 goto label19;

        $i27 = i1;

        goto label20;

     label19:
        $i27 = i2;

     label20:
        specialinvoke r0.<android.widget.SlidingDrawer: void animateClose(int)>($i27);

        goto label33;

     label21:
        if z1 == 0 goto label22;

        $i28 = i1;

        goto label23;

     label22:
        $i28 = i2;

     label23:
        specialinvoke r0.<android.widget.SlidingDrawer: void animateOpen(int)>($i28);

        goto label33;

     label24:
        if z1 == 0 goto label25;

        $i23 = i1;

        goto label26;

     label25:
        $i23 = i2;

     label26:
        specialinvoke r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i23, f2, 0);

        goto label33;

     label27:
        if z1 == 0 goto label28;

        $i13 = i1;

        goto label29;

     label28:
        $i13 = i2;

     label29:
        specialinvoke r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i13, f2, 0);

        goto label33;

     label30:
        if z1 == 0 goto label31;

        $i14 = i1;

        goto label32;

     label31:
        $i14 = i2;

     label32:
        specialinvoke r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i14, f2, 0);

     label33:
        $z4 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z4 != 0 goto label34;

        $z5 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z5 != 0 goto label34;

        $z6 = specialinvoke r0.<android.view.ViewGroup: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z6 == 0 goto label35;

     label34:
        $z7 = 1;

        goto label36;

     label35:
        $z7 = 0;

     label36:
        return $z7;
    }

    private void animateClose(int)
    {
        android.widget.SlidingDrawer r0;
        int i0, $i1;
        float $f0;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareTracking(int)>(i0);

        $i1 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f0 = (float) $i1;

        specialinvoke r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>(i0, $f0, 1);

        return;
    }

    private void animateOpen(int)
    {
        android.widget.SlidingDrawer r0;
        int i0, $i1, $i2;
        float $f0;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareTracking(int)>(i0);

        $i1 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i2 = neg $i1;

        $f0 = (float) $i2;

        specialinvoke r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>(i0, $f0, 1);

        return;
    }

    private void performFling(int, float, boolean)
    {
        android.widget.SlidingDrawer r0;
        int i0, $i2, $i3, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i19, $i20, $i21, $i22, $i24, $i25, $i27, $i28;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        boolean z0, $z1, $z3, $z4;
        long l1, $l5, $l6;
        byte $b4, $b9, $b10, $b16, $b17, $b18, $b23, $b26;
        android.os.Handler $r1, $r2, $r4;
        android.os.Message $r3;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        $f1 = (float) i0;

        r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f1;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = f0;

        $z1 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 == 0 goto label05;

        if z0 != 0 goto label03;

        $i19 = r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f7 = (float) $i19;

        $b17 = f0 cmpl $f7;

        if $b17 > 0 goto label03;

        $i20 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $z4 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z4 == 0 goto label01;

        $i22 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        goto label02;

     label01:
        $i22 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

     label02:
        $i21 = $i20 + $i22;

        if i0 <= $i21 goto label04;

        $i28 = r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $i27 = neg $i28;

        $f9 = (float) $i27;

        $b26 = f0 cmpl $f9;

        if $b26 <= 0 goto label04;

     label03:
        $i15 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f6 = (float) $i15;

        r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f6;

        $b18 = f0 cmpg 0.0F;

        if $b18 >= 0 goto label10;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label10;

     label04:
        $i24 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i25 = neg $i24;

        $f8 = (float) $i25;

        r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f8;

        $b23 = f0 cmpl 0.0F;

        if $b23 <= 0 goto label10;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label10;

     label05:
        if z0 != 0 goto label09;

        $i7 = r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f3 = (float) $i7;

        $b9 = f0 cmpl $f3;

        if $b9 > 0 goto label08;

        $z3 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z3 == 0 goto label06;

        $i11 = virtualinvoke r0.<android.widget.SlidingDrawer: int getHeight()>();

        goto label07;

     label06:
        $i11 = virtualinvoke r0.<android.widget.SlidingDrawer: int getWidth()>();

     label07:
        $i13 = $i11 / 2;

        if i0 <= $i13 goto label09;

        $i12 = r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $i14 = neg $i12;

        $f5 = (float) $i14;

        $b16 = f0 cmpl $f5;

        if $b16 <= 0 goto label09;

     label08:
        $i8 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f4 = (float) $i8;

        r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f4;

        $b10 = f0 cmpg 0.0F;

        if $b10 >= 0 goto label10;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label10;

     label09:
        $i2 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i3 = neg $i2;

        $f2 = (float) $i3;

        r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f2;

        $b4 = f0 cmpl 0.0F;

        if $b4 <= 0 goto label10;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

     label10:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = l1;

        $l5 = l1 + 16L;

        r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l5;

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        $r1 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(1000);

        $r4 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r2 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1000);

        $l6 = r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r3, $l6);

        specialinvoke r0.<android.widget.SlidingDrawer: void stopTracking()>();

        return;
    }

    private void prepareTracking(int)
    {
        android.widget.SlidingDrawer r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        boolean z0, $z1, $z2, $z3, $z4;
        long l1, $l11;
        android.view.VelocityTracker $r1;
        android.os.Handler $r2, $r3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        r0.<android.widget.SlidingDrawer: boolean mTracking> = 1;

        $r1 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker> = $r1;

        $z1 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 == 0 goto label5;

        $i2 = r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f0 = (float) $i2;

        r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f0;

        $i3 = r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f1 = (float) $i3;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = $f1;

        $i4 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $z3 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z3 == 0 goto label3;

        $i10 = virtualinvoke r0.<android.widget.SlidingDrawer: int getHeight()>();

        $i12 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i6 = $i10 - $i12;

        goto label4;

     label3:
        $i5 = virtualinvoke r0.<android.widget.SlidingDrawer: int getWidth()>();

        $i7 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i6 = $i5 - $i7;

     label4:
        $i8 = $i4 + $i6;

        $f2 = (float) $i8;

        r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f2;

        $f3 = r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i9 = (int) $f3;

        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i9);

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        $r3 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(1000);

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = l1;

        $l11 = l1 + 16L;

        r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l11;

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        goto label7;

     label5:
        $z2 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z2 == 0 goto label6;

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        $r2 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(1000);

     label6:
        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>(i0);

     label7:
        return;
    }

    private void moveHandle(int)
    {
        android.widget.SlidingDrawer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, i87, i88;
        android.view.View r1, $r4, $r5;
        android.graphics.Rect r2, r3, r6, r7;
        boolean $z0;

        r0 := @this: android.widget.SlidingDrawer;

        i0 := @parameter0: int;

        r1 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label05;

        if i0 != -10001 goto label01;

        $i79 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i85 = virtualinvoke r1.<android.view.View: int getTop()>();

        $i86 = $i79 - $i85;

        virtualinvoke r1.<android.view.View: void offsetTopAndBottom(int)>($i86);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        goto label10;

     label01:
        if i0 != -10002 goto label02;

        $i71 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i72 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i81 = $i71 + $i72;

        $i82 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i83 = $i81 - $i82;

        $i84 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i78 = $i83 - $i84;

        $i77 = virtualinvoke r1.<android.view.View: int getTop()>();

        $i80 = $i78 - $i77;

        virtualinvoke r1.<android.view.View: void offsetTopAndBottom(int)>($i80);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        goto label10;

     label02:
        i1 = virtualinvoke r1.<android.view.View: int getTop()>();

        i2 = i0 - i1;

        $i45 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        if i0 >= $i45 goto label03;

        $i69 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i2 = $i69 - i1;

        goto label04;

     label03:
        $i50 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i44 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i48 = $i50 + $i44;

        $i49 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i54 = $i48 - $i49;

        $i47 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i53 = $i54 - $i47;

        $i52 = $i53 - i1;

        if i2 <= $i52 goto label04;

        $i65 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i64 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i73 = $i65 + $i64;

        $i74 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i75 = $i73 - $i74;

        $i76 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i70 = $i75 - $i76;

        i2 = $i70 - i1;

     label04:
        virtualinvoke r1.<android.view.View: void offsetTopAndBottom(int)>(i2);

        r2 = r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        r3 = r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate>;

        virtualinvoke r1.<android.view.View: void getHitRect(android.graphics.Rect)>(r2);

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        $i55 = r2.<android.graphics.Rect: int left>;

        $i51 = r2.<android.graphics.Rect: int top>;

        $i61 = $i51 - i2;

        $i60 = r2.<android.graphics.Rect: int right>;

        $i58 = r2.<android.graphics.Rect: int bottom>;

        $i59 = $i58 - i2;

        virtualinvoke r3.<android.graphics.Rect: void union(int,int,int,int)>($i55, $i61, $i60, $i59);

        $i56 = r2.<android.graphics.Rect: int bottom>;

        $i57 = $i56 - i2;

        $i66 = virtualinvoke r0.<android.widget.SlidingDrawer: int getWidth()>();

        $i67 = r2.<android.graphics.Rect: int bottom>;

        $i68 = $i67 - i2;

        $r5 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i62 = virtualinvoke $r5.<android.view.View: int getHeight()>();

        $i63 = $i68 + $i62;

        virtualinvoke r3.<android.graphics.Rect: void union(int,int,int,int)>(0, $i57, $i66, $i63);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate(android.graphics.Rect)>(r3);

        goto label10;

     label05:
        if i0 != -10001 goto label06;

        $i41 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i40 = virtualinvoke r1.<android.view.View: int getLeft()>();

        $i46 = $i41 - $i40;

        virtualinvoke r1.<android.view.View: void offsetLeftAndRight(int)>($i46);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        goto label10;

     label06:
        if i0 != -10002 goto label07;

        $i32 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i35 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i38 = $i32 + $i35;

        $i33 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i36 = $i38 - $i33;

        $i39 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i37 = $i36 - $i39;

        $i43 = virtualinvoke r1.<android.view.View: int getLeft()>();

        $i42 = $i37 - $i43;

        virtualinvoke r1.<android.view.View: void offsetLeftAndRight(int)>($i42);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        goto label10;

     label07:
        i87 = virtualinvoke r1.<android.view.View: int getLeft()>();

        i88 = i0 - i87;

        $i3 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        if i0 >= $i3 goto label08;

        $i34 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i88 = $i34 - i87;

        goto label09;

     label08:
        $i5 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i4 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i7 = $i5 + $i4;

        $i6 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i9 = $i7 - $i6;

        $i8 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i11 = $i9 - $i8;

        $i10 = $i11 - i87;

        if i88 <= $i10 goto label09;

        $i24 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i27 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i30 = $i24 + $i27;

        $i25 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i28 = $i30 - $i25;

        $i31 = r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i29 = $i28 - $i31;

        i88 = $i29 - i87;

     label09:
        virtualinvoke r1.<android.view.View: void offsetLeftAndRight(int)>(i88);

        r6 = r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        r7 = r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate>;

        virtualinvoke r1.<android.view.View: void getHitRect(android.graphics.Rect)>(r6);

        virtualinvoke r7.<android.graphics.Rect: void set(android.graphics.Rect)>(r6);

        $i13 = r6.<android.graphics.Rect: int left>;

        $i16 = $i13 - i88;

        $i17 = r6.<android.graphics.Rect: int top>;

        $i12 = r6.<android.graphics.Rect: int right>;

        $i14 = $i12 - i88;

        $i15 = r6.<android.graphics.Rect: int bottom>;

        virtualinvoke r7.<android.graphics.Rect: void union(int,int,int,int)>($i16, $i17, $i14, $i15);

        $i19 = r6.<android.graphics.Rect: int right>;

        $i20 = $i19 - i88;

        $i18 = r6.<android.graphics.Rect: int right>;

        $i21 = $i18 - i88;

        $r4 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i23 = virtualinvoke $r4.<android.view.View: int getWidth()>();

        $i22 = $i21 + $i23;

        $i26 = virtualinvoke r0.<android.widget.SlidingDrawer: int getHeight()>();

        virtualinvoke r7.<android.graphics.Rect: void union(int,int,int,int)>($i20, 0, $i22, $i26);

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate(android.graphics.Rect)>(r7);

     label10:
        return;
    }

    private void prepareContent()
    {
        android.widget.SlidingDrawer r0;
        android.view.View r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, i37;
        boolean $z0, $z1, $z3, $z4;
        android.view.ViewTreeObserver $r2;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $z1 = virtualinvoke r1.<android.view.View: boolean isLayoutRequested()>();

        if $z1 == 0 goto label3;

        $z4 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z4 == 0 goto label2;

        i0 = r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i19 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i20 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i23 = $i19 - $i20;

        $i21 = $i23 - i0;

        $i24 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i1 = $i21 - $i24;

        $i27 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i22 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i28 = $i27 - $i22;

        $i25 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i28, 1073741824);

        $i26 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i25, $i26);

        $i31 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i29 = $i31 + i0;

        $i30 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i34 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i35 = $i34 + i0;

        $i32 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i33 = $i35 + $i32;

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(0, $i29, $i30, $i33);

        goto label3;

     label2:
        $r3 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        i36 = virtualinvoke $r3.<android.view.View: int getWidth()>();

        $i3 = r0.<android.widget.SlidingDrawer: int mRight>;

        $i2 = r0.<android.widget.SlidingDrawer: int mLeft>;

        $i4 = $i3 - $i2;

        $i7 = $i4 - i36;

        $i5 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        i37 = $i7 - $i5;

        $i6 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i37, 1073741824);

        $i8 = r0.<android.widget.SlidingDrawer: int mBottom>;

        $i9 = r0.<android.widget.SlidingDrawer: int mTop>;

        $i11 = $i8 - $i9;

        $i10 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i11, 1073741824);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i6, $i10);

        $i13 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i14 = i36 + $i13;

        $i12 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i16 = $i12 + i36;

        $i15 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i18 = $i16 + $i15;

        $i17 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>($i14, 0, $i18, $i17);

     label3:
        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        virtualinvoke $r2.<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>();

        $z3 = virtualinvoke r1.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 != 0 goto label4;

        virtualinvoke r1.<android.view.View: void buildDrawingCache()>();

     label4:
        virtualinvoke r1.<android.view.View: void setVisibility(int)>(8);

        return;
    }

    private void stopTracking()
    {
        android.widget.SlidingDrawer r0;
        android.view.View $r1;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r2, $r5;
        android.view.VelocityTracker $r3, $r4;

        r0 := @this: android.widget.SlidingDrawer;

        $r1 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke $r1.<android.view.View: void setPressed(boolean)>(0);

        r0.<android.widget.SlidingDrawer: boolean mTracking> = 0;

        $r2 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r2 == null goto label1;

        $r5 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        interfaceinvoke $r5.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

     label1:
        $r3 = r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        if $r3 == null goto label2;

        $r4 = r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r4.<android.view.VelocityTracker: void recycle()>();

        r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker> = null;

     label2:
        return;
    }

    private void doAnimation()
    {
        android.widget.SlidingDrawer r0;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        byte $b4, $b6;
        long $l8, $l9, $l10;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label5;

        specialinvoke r0.<android.widget.SlidingDrawer: void incrementAnimation()>();

        $f0 = r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i0 = r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $z1 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<android.widget.SlidingDrawer: int getHeight()>();

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<android.widget.SlidingDrawer: int getWidth()>();

     label2:
        $i2 = $i0 + $i1;

        $i3 = $i2 - 1;

        $f1 = (float) $i3;

        $b4 = $f0 cmpl $f1;

        if $b4 < 0 goto label3;

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        specialinvoke r0.<android.widget.SlidingDrawer: void closeDrawer()>();

        goto label5;

     label3:
        $f3 = r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i5 = r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $f2 = (float) $i5;

        $b6 = $f3 cmpg $f2;

        if $b6 >= 0 goto label4;

        r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        specialinvoke r0.<android.widget.SlidingDrawer: void openDrawer()>();

        goto label5;

     label4:
        $f4 = r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i7 = (int) $f4;

        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i7);

        $l9 = r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        $l8 = $l9 + 16L;

        r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l8;

        $r1 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r2 = r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1000);

        $l10 = r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        virtualinvoke $r1.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r3, $l10);

     label5:
        return;
    }

    private void incrementAnimation()
    {
        android.widget.SlidingDrawer r0;
        long l0, $l1, $l2;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;

        r0 := @this: android.widget.SlidingDrawer;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<android.widget.SlidingDrawer: long mAnimationLastTime>;

        $l2 = l0 - $l1;

        $f4 = (float) $l2;

        f0 = $f4 / 1000.0F;

        f1 = r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        f2 = r0.<android.widget.SlidingDrawer: float mAnimatedVelocity>;

        f3 = r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration>;

        $f5 = f2 * f0;

        $f9 = f1 + $f5;

        $f6 = 0.5F * f3;

        $f7 = $f6 * f0;

        $f8 = $f7 * f0;

        $f11 = $f9 + $f8;

        r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f11;

        $f10 = f3 * f0;

        $f12 = f2 + $f10;

        r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = $f12;

        r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = l0;

        return;
    }

    public void toggle()
    {
        android.widget.SlidingDrawer r0;
        boolean $z0;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.widget.SlidingDrawer: void openDrawer()>();

        goto label2;

     label1:
        specialinvoke r0.<android.widget.SlidingDrawer: void closeDrawer()>();

     label2:
        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void requestLayout()>();

        return;
    }

    public void animateToggle()
    {
        android.widget.SlidingDrawer r0;
        boolean $z0;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.widget.SlidingDrawer: void animateOpen()>();

        goto label2;

     label1:
        virtualinvoke r0.<android.widget.SlidingDrawer: void animateClose()>();

     label2:
        return;
    }

    public void open()
    {
        android.widget.SlidingDrawer r0;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void openDrawer()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void requestLayout()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void sendAccessibilityEvent(int)>(32);

        return;
    }

    public void close()
    {
        android.widget.SlidingDrawer r0;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void closeDrawer()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void invalidate()>();

        virtualinvoke r0.<android.widget.SlidingDrawer: void requestLayout()>();

        return;
    }

    public void animateClose()
    {
        android.widget.SlidingDrawer r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener r1;
        boolean $z0;
        android.view.View $r2, $r3;
        int $i0;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareContent()>();

        r1 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label1:
        $z0 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label2;

        $r3 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getTop()>();

        goto label3;

     label2:
        $r2 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getLeft()>();

     label3:
        specialinvoke r0.<android.widget.SlidingDrawer: void animateClose(int)>($i0);

        if r1 == null goto label4;

        interfaceinvoke r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

     label4:
        return;
    }

    public void animateOpen()
    {
        android.widget.SlidingDrawer r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener r1;
        boolean $z0;
        android.view.View $r2, $r3;
        int $i0;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void prepareContent()>();

        r1 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label1:
        $z0 = r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label2;

        $r3 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getTop()>();

        goto label3;

     label2:
        $r2 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getLeft()>();

     label3:
        specialinvoke r0.<android.widget.SlidingDrawer: void animateOpen(int)>($i0);

        virtualinvoke r0.<android.widget.SlidingDrawer: void sendAccessibilityEvent(int)>(32);

        if r1 == null goto label4;

        interfaceinvoke r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

     label4:
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.widget.SlidingDrawer r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $r2 = class "android/widget/SlidingDrawer";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.widget.SlidingDrawer r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r2 = class "android/widget/SlidingDrawer";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    private void closeDrawer()
    {
        android.widget.SlidingDrawer r0;
        android.view.View $r1, $r2;
        boolean $z0;
        android.widget.SlidingDrawer$OnDrawerCloseListener $r3, $r4;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>(-10002);

        $r1 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(8);

        $r2 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r2.<android.view.View: void destroyDrawingCache()>();

        $z0 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<android.widget.SlidingDrawer: boolean mExpanded> = 0;

        $r3 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener>;

        if $r3 == null goto label2;

        $r4 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener>;

        interfaceinvoke $r4.<android.widget.SlidingDrawer$OnDrawerCloseListener: void onDrawerClosed()>();

     label2:
        return;
    }

    private void openDrawer()
    {
        android.widget.SlidingDrawer r0;
        android.view.View $r1;
        boolean $z0;
        android.widget.SlidingDrawer$OnDrawerOpenListener $r2, $r3;

        r0 := @this: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void moveHandle(int)>(-10001);

        $r1 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(0);

        $z0 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<android.widget.SlidingDrawer: boolean mExpanded> = 1;

        $r2 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener>;

        if $r2 == null goto label2;

        $r3 = r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener>;

        interfaceinvoke $r3.<android.widget.SlidingDrawer$OnDrawerOpenListener: void onDrawerOpened()>();

     label2:
        return;
    }

    public void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)
    {
        android.widget.SlidingDrawer r0;
        android.widget.SlidingDrawer$OnDrawerOpenListener r1;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerOpenListener;

        r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener> = r1;

        return;
    }

    public void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)
    {
        android.widget.SlidingDrawer r0;
        android.widget.SlidingDrawer$OnDrawerCloseListener r1;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerCloseListener;

        r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener> = r1;

        return;
    }

    public void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)
    {
        android.widget.SlidingDrawer r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener r1;

        r0 := @this: android.widget.SlidingDrawer;

        r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerScrollListener;

        r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener> = r1;

        return;
    }

    public android.view.View getHandle()
    {
        android.widget.SlidingDrawer r0;
        android.view.View $r1;

        r0 := @this: android.widget.SlidingDrawer;

        $r1 = r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        return $r1;
    }

    public android.view.View getContent()
    {
        android.widget.SlidingDrawer r0;
        android.view.View $r1;

        r0 := @this: android.widget.SlidingDrawer;

        $r1 = r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        return $r1;
    }

    public void unlock()
    {
        android.widget.SlidingDrawer r0;

        r0 := @this: android.widget.SlidingDrawer;

        r0.<android.widget.SlidingDrawer: boolean mLocked> = 0;

        return;
    }

    public void lock()
    {
        android.widget.SlidingDrawer r0;

        r0 := @this: android.widget.SlidingDrawer;

        r0.<android.widget.SlidingDrawer: boolean mLocked> = 1;

        return;
    }

    public boolean isOpened()
    {
        android.widget.SlidingDrawer r0;
        boolean $z0;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        return $z0;
    }

    public boolean isMoving()
    {
        android.widget.SlidingDrawer r0;
        boolean $z0, $z1, $z2;

        r0 := @this: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 != 0 goto label1;

        $z1 = r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static boolean access$200(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer r0;
        boolean $z0;

        r0 := @parameter0: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mLocked>;

        return $z0;
    }

    static boolean access$300(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer r0;
        boolean $z0;

        r0 := @parameter0: android.widget.SlidingDrawer;

        $z0 = r0.<android.widget.SlidingDrawer: boolean mAnimateOnClick>;

        return $z0;
    }

    static void access$400(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer r0;

        r0 := @parameter0: android.widget.SlidingDrawer;

        specialinvoke r0.<android.widget.SlidingDrawer: void doAnimation()>();

        return;
    }

    public static void <clinit>()
    {
        <android.widget.SlidingDrawer: int COLLAPSED_FULL_CLOSED> = -10002;

        <android.widget.SlidingDrawer: int EXPANDED_FULL_OPEN> = -10001;

        <android.widget.SlidingDrawer: int ANIMATION_FRAME_DURATION> = 16;

        <android.widget.SlidingDrawer: int MSG_ANIMATE> = 1000;

        <android.widget.SlidingDrawer: int VELOCITY_UNITS> = 1000;

        <android.widget.SlidingDrawer: float MAXIMUM_ACCELERATION> = 2000.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_MAJOR_VELOCITY> = 200.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_MINOR_VELOCITY> = 150.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_TAP_VELOCITY> = 100.0F;

        <android.widget.SlidingDrawer: int TAP_THRESHOLD> = 6;

        <android.widget.SlidingDrawer: int ORIENTATION_VERTICAL> = 1;

        <android.widget.SlidingDrawer: int ORIENTATION_HORIZONTAL> = 0;

        return;
    }
}
