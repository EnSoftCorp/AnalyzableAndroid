public class android.filterfw.core.VertexFrame extends android.filterfw.core.Frame
{
    private int vertexFrameId;

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager)
    {
        android.filterfw.core.VertexFrame r0;
        android.filterfw.core.FrameFormat r1, $r3, $r4;
        android.filterfw.core.FrameManager r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        specialinvoke r0.<android.filterfw.core.Frame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager)>(r1, r2);

        r0.<android.filterfw.core.VertexFrame: int vertexFrameId> = -1;

        $r3 = virtualinvoke r0.<android.filterfw.core.VertexFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initializing vertex frame with zero size!");

        throw $r6;

     label1:
        $r4 = virtualinvoke r0.<android.filterfw.core.VertexFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r4.<android.filterfw.core.FrameFormat: int getSize()>();

        $z0 = specialinvoke r0.<android.filterfw.core.VertexFrame: boolean nativeAllocate(int)>($i1);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not allocate vertex frame!");

        throw $r5;

     label2:
        return;
    }

    protected synchronized boolean hasNativeAllocation()
    {
        android.filterfw.core.VertexFrame r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.filterfw.core.VertexFrame;

        $i0 = r0.<android.filterfw.core.VertexFrame: int vertexFrameId>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected synchronized void releaseNativeAllocation()
    {
        android.filterfw.core.VertexFrame r0;

        r0 := @this: android.filterfw.core.VertexFrame;

        specialinvoke r0.<android.filterfw.core.VertexFrame: boolean nativeDeallocate()>();

        r0.<android.filterfw.core.VertexFrame: int vertexFrameId> = -1;

        return;
    }

    public java.lang.Object getObjectValue()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Vertex frames do not support reading data!");

        throw $r1;
    }

    public void setInts(int[])
    {
        android.filterfw.core.VertexFrame r0;
        int[] r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.filterfw.core.VertexFrame: void assertFrameMutable()>();

        $z0 = specialinvoke r0.<android.filterfw.core.VertexFrame: boolean setNativeInts(int[])>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for vertex frame!");

        throw $r2;

     label1:
        return;
    }

    public int[] getInts()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Vertex frames do not support reading data!");

        throw $r1;
    }

    public void setFloats(float[])
    {
        android.filterfw.core.VertexFrame r0;
        float[] r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: float[];

        virtualinvoke r0.<android.filterfw.core.VertexFrame: void assertFrameMutable()>();

        $z0 = specialinvoke r0.<android.filterfw.core.VertexFrame: boolean setNativeFloats(float[])>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for vertex frame!");

        throw $r2;

     label1:
        return;
    }

    public float[] getFloats()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Vertex frames do not support reading data!");

        throw $r1;
    }

    public void setData(java.nio.ByteBuffer, int, int)
    {
        android.filterfw.core.VertexFrame r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i2, $i3;
        byte[] r2;
        android.filterfw.core.FrameFormat $r3;
        boolean $z0;
        java.lang.RuntimeException $r4, $r5;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<android.filterfw.core.VertexFrame: void assertFrameMutable()>();

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.VertexFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        $i3 = lengthof r2;

        if $i2 == $i3 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Data size in setData does not match vertex frame size!");

        throw $r5;

     label1:
        $z0 = specialinvoke r0.<android.filterfw.core.VertexFrame: boolean setNativeData(byte[],int,int)>(r2, i0, i1);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set vertex frame data!");

        throw $r4;

     label2:
        return;
    }

    public java.nio.ByteBuffer getData()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Vertex frames do not support reading data!");

        throw $r1;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.filterfw.core.VertexFrame r0;
        android.graphics.Bitmap r1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unsupported: Cannot set vertex frame bitmap value!");

        throw $r2;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Vertex frames do not support reading data!");

        throw $r1;
    }

    public void setDataFromFrame(android.filterfw.core.Frame)
    {
        android.filterfw.core.VertexFrame r0;
        android.filterfw.core.Frame r1;

        r0 := @this: android.filterfw.core.VertexFrame;

        r1 := @parameter0: android.filterfw.core.Frame;

        specialinvoke r0.<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)>(r1);

        return;
    }

    public int getVboId()
    {
        android.filterfw.core.VertexFrame r0;
        int $i0;

        r0 := @this: android.filterfw.core.VertexFrame;

        $i0 = specialinvoke r0.<android.filterfw.core.VertexFrame: int getNativeVboId()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        android.filterfw.core.VertexFrame r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        android.filterfw.core.FrameFormat $r3;
        int $i0;
        java.lang.String $r7;

        r0 := @this: android.filterfw.core.VertexFrame;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VertexFrame (");

        $r3 = virtualinvoke r0.<android.filterfw.core.VertexFrame: android.filterfw.core.FrameFormat getFormat()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") with VBO ID ");

        $i0 = virtualinvoke r0.<android.filterfw.core.VertexFrame: int getVboId()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private native boolean nativeAllocate(int);

    private native boolean nativeDeallocate();

    private native boolean setNativeData(byte[], int, int);

    private native boolean setNativeInts(int[]);

    private native boolean setNativeFloats(float[]);

    private native int getNativeVboId();

    static void <clinit>()
    {
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("filterfw");

        return;
    }
}
