class android.text.MeasuredText extends java.lang.Object
{
    private static final boolean localLOGV;
    java.lang.CharSequence mText;
    int mTextStart;
    float[] mWidths;
    char[] mChars;
    byte[] mLevels;
    int mDir;
    boolean mEasy;
    int mLen;
    private int mPos;
    private android.text.TextPaint mWorkPaint;
    private static final java.lang.Object[] sLock;
    private static final android.text.MeasuredText[] sCached;

    private void <init>()
    {
        android.text.MeasuredText r0;
        android.text.TextPaint $r1;

        r0 := @this: android.text.MeasuredText;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.text.TextPaint;

        specialinvoke $r1.<android.text.TextPaint: void <init>()>();

        r0.<android.text.MeasuredText: android.text.TextPaint mWorkPaint> = $r1;

        return;
    }

    static android.text.MeasuredText obtain()
    {
        android.text.MeasuredText r0, $r5, $r7, r11;
        java.lang.Object[] r1, $r3;
        int i0;
        java.lang.Throwable r2, $r10;
        android.text.MeasuredText[] $r4, $r6, $r8, $r9;

        $r3 = <android.text.MeasuredText: java.lang.Object[] sLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        i0 = lengthof $r4;

     label2:
        i0 = i0 + -1;

        if i0 < 0 goto label4;

        $r6 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        $r7 = $r6[i0];

        if $r7 == null goto label2;

        $r8 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        r0 = $r8[i0];

        $r9 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        $r9[i0] = null;

        exitmonitor r1;

     label3:
        return r0;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        $r5 = new android.text.MeasuredText;

        specialinvoke $r5.<android.text.MeasuredText: void <init>()>();

        r11 = $r5;

        return r11;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static android.text.MeasuredText recycle(android.text.MeasuredText)
    {
        android.text.MeasuredText r0, $r6;
        java.lang.Object[] r1, $r3;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r8;
        android.text.MeasuredText[] $r4, $r5, $r7;

        r0 := @parameter0: android.text.MeasuredText;

        r0.<android.text.MeasuredText: java.lang.CharSequence mText> = null;

        $i1 = r0.<android.text.MeasuredText: int mLen>;

        if $i1 >= 1000 goto label8;

        $r3 = <android.text.MeasuredText: java.lang.Object[] sLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = 0;

     label2:
        $r4 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        $i2 = lengthof $r4;

        if i0 >= $i2 goto label4;

        $r5 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        $r6 = $r5[i0];

        if $r6 != null goto label3;

        $r7 = <android.text.MeasuredText: android.text.MeasuredText[] sCached>;

        $r7[i0] = r0;

        r0.<android.text.MeasuredText: java.lang.CharSequence mText> = null;

        goto label4;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return null;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void setPos(int)
    {
        android.text.MeasuredText r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.MeasuredText;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.MeasuredText: int mTextStart>;

        $i2 = i0 - $i1;

        r0.<android.text.MeasuredText: int mPos> = $i2;

        return;
    }

    void setPara(java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)
    {
        android.text.MeasuredText r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14;
        android.text.TextDirectionHeuristic r2, $r11, $r13, $r15, $r16, $r18, $r21, $r24;
        android.text.Spanned r3;
        android.text.style.ReplacementSpan[] r4;
        float[] $r5, $r6, $r28;
        char[] $r7, $r8, $r9, $r10, $r17, $r20, $r26, $r29;
        boolean $z0, $z1, z2;
        byte[] $r12, $r14, $r19, $r22;
        byte $b9, b15;
        android.text.style.ReplacementSpan $r23, $r27;
        java.lang.Object[] $r25;

        r0 := @this: android.text.MeasuredText;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.text.TextDirectionHeuristic;

        r0.<android.text.MeasuredText: java.lang.CharSequence mText> = r1;

        r0.<android.text.MeasuredText: int mTextStart> = i0;

        i2 = i1 - i0;

        r0.<android.text.MeasuredText: int mLen> = i2;

        r0.<android.text.MeasuredText: int mPos> = 0;

        $r5 = r0.<android.text.MeasuredText: float[] mWidths>;

        if $r5 == null goto label01;

        $r28 = r0.<android.text.MeasuredText: float[] mWidths>;

        $i13 = lengthof $r28;

        if $i13 >= i2 goto label02;

     label01:
        $r6 = staticinvoke <com.android.internal.util.ArrayUtils: float[] newUnpaddedFloatArray(int)>(i2);

        r0.<android.text.MeasuredText: float[] mWidths> = $r6;

     label02:
        $r7 = r0.<android.text.MeasuredText: char[] mChars>;

        if $r7 == null goto label03;

        $r29 = r0.<android.text.MeasuredText: char[] mChars>;

        $i14 = lengthof $r29;

        if $i14 >= i2 goto label04;

     label03:
        $r8 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>(i2);

        r0.<android.text.MeasuredText: char[] mChars> = $r8;

     label04:
        $r9 = r0.<android.text.MeasuredText: char[] mChars>;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, i1, $r9, 0);

        $z0 = r1 instanceof android.text.Spanned;

        if $z0 == 0 goto label10;

        r3 = (android.text.Spanned) r1;

        $r25 = interfaceinvoke r3.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, class "android/text/style/ReplacementSpan");

        r4 = (android.text.style.ReplacementSpan[]) $r25;

        i3 = 0;

     label05:
        $i10 = lengthof r4;

        if i3 >= $i10 goto label10;

        $r23 = r4[i3];

        $i12 = interfaceinvoke r3.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r23);

        i4 = $i12 - i0;

        $r27 = r4[i3];

        $i11 = interfaceinvoke r3.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r27);

        i5 = $i11 - i0;

        if i4 >= 0 goto label06;

        i4 = 0;

     label06:
        if i5 <= i2 goto label07;

        i5 = i2;

     label07:
        i6 = i4;

     label08:
        if i6 >= i5 goto label09;

        $r26 = r0.<android.text.MeasuredText: char[] mChars>;

        $r26[i6] = 65532;

        i6 = i6 + 1;

        goto label08;

     label09:
        i3 = i3 + 1;

        goto label05;

     label10:
        $r11 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic LTR>;

        if r2 == $r11 goto label11;

        $r21 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        if r2 == $r21 goto label11;

        $r24 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic ANYRTL_LTR>;

        if r2 != $r24 goto label12;

     label11:
        $r10 = r0.<android.text.MeasuredText: char[] mChars>;

        $z1 = staticinvoke <android.text.TextUtils: boolean doesNotNeedBidi(char[],int,int)>($r10, 0, i2);

        if $z1 == 0 goto label12;

        r0.<android.text.MeasuredText: int mDir> = 1;

        r0.<android.text.MeasuredText: boolean mEasy> = 1;

        goto label22;

     label12:
        $r12 = r0.<android.text.MeasuredText: byte[] mLevels>;

        if $r12 == null goto label13;

        $r22 = r0.<android.text.MeasuredText: byte[] mLevels>;

        $i8 = lengthof $r22;

        if $i8 >= i2 goto label14;

     label13:
        $r14 = staticinvoke <com.android.internal.util.ArrayUtils: byte[] newUnpaddedByteArray(int)>(i2);

        r0.<android.text.MeasuredText: byte[] mLevels> = $r14;

     label14:
        $r13 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic LTR>;

        if r2 != $r13 goto label15;

        b15 = 1;

        goto label21;

     label15:
        $r16 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic RTL>;

        if r2 != $r16 goto label16;

        b15 = -1;

        goto label21;

     label16:
        $r15 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        if r2 != $r15 goto label17;

        b15 = 2;

        goto label21;

     label17:
        $r18 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_RTL>;

        if r2 != $r18 goto label18;

        b15 = -2;

        goto label21;

     label18:
        $r17 = r0.<android.text.MeasuredText: char[] mChars>;

        z2 = interfaceinvoke r2.<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>($r17, 0, i2);

        if z2 == 0 goto label19;

        $b9 = -1;

        goto label20;

     label19:
        $b9 = 1;

     label20:
        b15 = $b9;

     label21:
        $r20 = r0.<android.text.MeasuredText: char[] mChars>;

        $r19 = r0.<android.text.MeasuredText: byte[] mLevels>;

        $i7 = staticinvoke <android.text.AndroidBidi: int bidi(int,char[],byte[],int,boolean)>(b15, $r20, $r19, i2, 0);

        r0.<android.text.MeasuredText: int mDir> = $i7;

        r0.<android.text.MeasuredText: boolean mEasy> = 0;

     label22:
        return;
    }

    float addStyleRun(android.text.TextPaint, int, android.graphics.Paint$FontMetricsInt)
    {
        android.text.MeasuredText r0;
        android.text.TextPaint r1;
        int i0, i1, i3, i4, i5, $i6, $i8, $i9, $i11;
        android.graphics.Paint$FontMetricsInt r2;
        boolean z0, z1, $z2, $z3, $z4;
        byte b2, $b7, $b10;
        byte[] $r3, $r6, $r7;
        float[] $r4, $r8;
        float $f0, $f1, f2;
        char[] $r5, $r9;

        r0 := @this: android.text.MeasuredText;

        r1 := @parameter0: android.text.TextPaint;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Paint$FontMetricsInt;

        if r2 == null goto label01;

        virtualinvoke r1.<android.text.TextPaint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>(r2);

     label01:
        i1 = r0.<android.text.MeasuredText: int mPos>;

        $i6 = i1 + i0;

        r0.<android.text.MeasuredText: int mPos> = $i6;

        $z2 = r0.<android.text.MeasuredText: boolean mEasy>;

        if $z2 == 0 goto label04;

        $i11 = r0.<android.text.MeasuredText: int mDir>;

        if $i11 == 1 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z0 = $z4;

        $r9 = r0.<android.text.MeasuredText: char[] mChars>;

        $r8 = r0.<android.text.MeasuredText: float[] mWidths>;

        $f1 = virtualinvoke r1.<android.text.TextPaint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>($r9, i1, i0, i1, i0, z0, $r8, i1);

        return $f1;

     label04:
        f2 = 0.0F;

        $r3 = r0.<android.text.MeasuredText: byte[] mLevels>;

        b2 = $r3[i1];

        i3 = i1;

        i4 = i1 + 1;

        i5 = i1 + i0;

     label05:
        if i4 == i5 goto label06;

        $r7 = r0.<android.text.MeasuredText: byte[] mLevels>;

        $b10 = $r7[i4];

        if $b10 == b2 goto label10;

     label06:
        $b7 = b2 & 1;

        if $b7 == 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        z1 = $z3;

        $r5 = r0.<android.text.MeasuredText: char[] mChars>;

        $i8 = i4 - i3;

        $i9 = i4 - i3;

        $r4 = r0.<android.text.MeasuredText: float[] mWidths>;

        $f0 = virtualinvoke r1.<android.text.TextPaint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>($r5, i3, $i8, i3, $i9, z1, $r4, i3);

        f2 = f2 + $f0;

        if i4 != i5 goto label09;

        goto label11;

     label09:
        i3 = i4;

        $r6 = r0.<android.text.MeasuredText: byte[] mLevels>;

        b2 = $r6[i4];

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        return f2;
    }

    float addStyleRun(android.text.TextPaint, android.text.style.MetricAffectingSpan[], int, android.graphics.Paint$FontMetricsInt)
    {
        android.text.MeasuredText r0;
        android.text.TextPaint r1, r4;
        android.text.style.MetricAffectingSpan[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        android.graphics.Paint$FontMetricsInt r3;
        android.text.style.ReplacementSpan r5;
        android.text.style.MetricAffectingSpan r6;
        java.lang.CharSequence $r7;
        boolean $z0;
        float f0;
        float[] r8;

        r0 := @this: android.text.MeasuredText;

        r1 := @parameter0: android.text.TextPaint;

        r2 := @parameter1: android.text.style.MetricAffectingSpan[];

        i0 := @parameter2: int;

        r3 := @parameter3: android.graphics.Paint$FontMetricsInt;

        r4 = r0.<android.text.MeasuredText: android.text.TextPaint mWorkPaint>;

        virtualinvoke r4.<android.text.TextPaint: void set(android.text.TextPaint)>(r1);

        r4.<android.text.TextPaint: int baselineShift> = 0;

        r5 = null;

        i1 = 0;

     label01:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label04;

        r6 = r2[i1];

        $z0 = r6 instanceof android.text.style.ReplacementSpan;

        if $z0 == 0 goto label02;

        r5 = (android.text.style.ReplacementSpan) r6;

        goto label03;

     label02:
        virtualinvoke r6.<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>(r4);

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        if r5 != null goto label05;

        f0 = virtualinvoke r0.<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)>(r4, i0, r3);

        goto label08;

     label05:
        $r7 = r0.<android.text.MeasuredText: java.lang.CharSequence mText>;

        $i6 = r0.<android.text.MeasuredText: int mTextStart>;

        $i5 = r0.<android.text.MeasuredText: int mPos>;

        $i11 = $i6 + $i5;

        $i8 = r0.<android.text.MeasuredText: int mTextStart>;

        $i7 = r0.<android.text.MeasuredText: int mPos>;

        $i10 = $i8 + $i7;

        $i9 = $i10 + i0;

        $i13 = virtualinvoke r5.<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)>(r4, $r7, $i11, $i9, r3);

        f0 = (float) $i13;

        r8 = r0.<android.text.MeasuredText: float[] mWidths>;

        $i12 = r0.<android.text.MeasuredText: int mPos>;

        r8[$i12] = f0;

        $i15 = r0.<android.text.MeasuredText: int mPos>;

        i2 = $i15 + 1;

        $i14 = r0.<android.text.MeasuredText: int mPos>;

        i3 = $i14 + i0;

     label06:
        if i2 >= i3 goto label07;

        r8[i2] = 0.0F;

        i2 = i2 + 1;

        goto label06;

     label07:
        $i17 = r0.<android.text.MeasuredText: int mPos>;

        $i16 = $i17 + i0;

        r0.<android.text.MeasuredText: int mPos> = $i16;

     label08:
        if r3 == null goto label10;

        $i19 = r4.<android.text.TextPaint: int baselineShift>;

        if $i19 >= 0 goto label09;

        $i24 = r3.<android.graphics.Paint$FontMetricsInt: int ascent>;

        $i27 = r4.<android.text.TextPaint: int baselineShift>;

        $i25 = $i24 + $i27;

        r3.<android.graphics.Paint$FontMetricsInt: int ascent> = $i25;

        $i30 = r3.<android.graphics.Paint$FontMetricsInt: int top>;

        $i29 = r4.<android.text.TextPaint: int baselineShift>;

        $i28 = $i30 + $i29;

        r3.<android.graphics.Paint$FontMetricsInt: int top> = $i28;

        goto label10;

     label09:
        $i21 = r3.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i18 = r4.<android.text.TextPaint: int baselineShift>;

        $i20 = $i21 + $i18;

        r3.<android.graphics.Paint$FontMetricsInt: int descent> = $i20;

        $i22 = r3.<android.graphics.Paint$FontMetricsInt: int bottom>;

        $i23 = r4.<android.text.TextPaint: int baselineShift>;

        $i26 = $i22 + $i23;

        r3.<android.graphics.Paint$FontMetricsInt: int bottom> = $i26;

     label10:
        return f0;
    }

    int breakText(int, boolean, float)
    {
        android.text.MeasuredText r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i8, i11;
        boolean z0;
        float f0, $f1, $f2;
        float[] r1;
        char[] $r2, $r3;
        char $c6, $c9;
        byte $b7, $b10;

        r0 := @this: android.text.MeasuredText;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        r1 = r0.<android.text.MeasuredText: float[] mWidths>;

        if z0 == 0 goto label5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $f2 = r1[i1];

        f0 = f0 - $f2;

        $b10 = f0 cmpg 0.0F;

        if $b10 >= 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if i1 <= 0 goto label4;

        $r3 = r0.<android.text.MeasuredText: char[] mChars>;

        $i8 = i1 - 1;

        $c9 = $r3[$i8];

        if $c9 != 32 goto label4;

        i1 = i1 + -1;

        goto label3;

     label4:
        return i1;

     label5:
        i11 = i0 - 1;

     label6:
        if i11 < 0 goto label8;

        $f1 = r1[i11];

        f0 = f0 - $f1;

        $b7 = f0 cmpg 0.0F;

        if $b7 >= 0 goto label7;

        goto label8;

     label7:
        i11 = i11 + -1;

        goto label6;

     label8:
        $i2 = i0 - 1;

        if i11 >= $i2 goto label9;

        $r2 = r0.<android.text.MeasuredText: char[] mChars>;

        $i5 = i11 + 1;

        $c6 = $r2[$i5];

        if $c6 != 32 goto label9;

        i11 = i11 + 1;

        goto label8;

     label9:
        $i3 = i0 - i11;

        $i4 = $i3 - 1;

        return $i4;
    }

    float measure(int, int)
    {
        android.text.MeasuredText r0;
        int i0, i1, i2;
        float f0, $f1;
        float[] r1;

        r0 := @this: android.text.MeasuredText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 = 0.0F;

        r1 = r0.<android.text.MeasuredText: float[] mWidths>;

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        $f1 = r1[i2];

        f0 = f0 + $f1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return f0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        android.text.MeasuredText[] $r1;

        <android.text.MeasuredText: boolean localLOGV> = 0;

        $r0 = newarray (java.lang.Object)[0];

        <android.text.MeasuredText: java.lang.Object[] sLock> = $r0;

        $r1 = newarray (android.text.MeasuredText)[3];

        <android.text.MeasuredText: android.text.MeasuredText[] sCached> = $r1;

        return;
    }
}
