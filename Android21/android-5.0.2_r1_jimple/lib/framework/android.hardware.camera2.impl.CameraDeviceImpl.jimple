public class android.hardware.camera2.impl.CameraDeviceImpl extends android.hardware.camera2.CameraDevice
{
    private final java.lang.String TAG;
    private final boolean DEBUG;
    private static final int REQUEST_ID_NONE;
    private android.hardware.camera2.ICameraDeviceUser mRemoteDevice;
    final java.lang.Object mInterfaceLock;
    private final android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks;
    private final android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback;
    private volatile android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback;
    private final android.os.Handler mDeviceHandler;
    private volatile boolean mClosing;
    private boolean mInError;
    private boolean mIdle;
    private final android.util.SparseArray mCaptureCallbackMap;
    private int mRepeatingRequestId;
    private final java.util.ArrayList mRepeatingRequestIdDeletedList;
    private final android.util.SparseArray mConfiguredOutputs;
    private final java.lang.String mCameraId;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final int mTotalPartialCount;
    private final java.util.List mFrameNumberRequestPairs;
    private final android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker mFrameNumberTracker;
    private android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession;
    private int mNextSessionId;
    private final java.lang.Runnable mCallOnOpened;
    private final java.lang.Runnable mCallOnUnconfigured;
    private final java.lang.Runnable mCallOnActive;
    private final java.lang.Runnable mCallOnBusy;
    private final java.lang.Runnable mCallOnClosed;
    private final java.lang.Runnable mCallOnIdle;
    private final java.lang.Runnable mCallOnDisconnected;

    public void <init>(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler, android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String r1, r5, $r23, $r24;
        android.hardware.camera2.CameraDevice$StateCallback r2;
        android.os.Handler r3;
        android.hardware.camera2.CameraCharacteristics r4, $r27;
        java.lang.Integer r6;
        java.lang.Object $r7, $r26;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks $r8;
        android.util.SparseArray $r9, $r11;
        java.util.ArrayList $r10, $r12;
        android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker $r13;
        android.hardware.camera2.impl.CameraDeviceImpl$1 $r14;
        android.hardware.camera2.impl.CameraDeviceImpl$3 $r15;
        android.hardware.camera2.impl.CameraDeviceImpl$2 $r16;
        android.hardware.camera2.impl.CameraDeviceImpl$5 $r17;
        android.hardware.camera2.impl.CameraDeviceImpl$4 $r18;
        android.hardware.camera2.impl.CameraDeviceImpl$7 $r19;
        android.hardware.camera2.impl.CameraDeviceImpl$6 $r20;
        java.lang.Object[] $r21;
        java.lang.IllegalArgumentException $r22;
        int $i1, $i2;
        android.hardware.camera2.CameraCharacteristics$Key $r25;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: android.hardware.camera2.CameraCharacteristics;

        specialinvoke r0.<android.hardware.camera2.CameraDevice: void <init>()>();

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock> = $r7;

        $r8 = new android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks> = $r8;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mClosing> = 0;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 0;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 1;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap> = $r9;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.ArrayList mRepeatingRequestIdDeletedList> = $r10;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mFrameNumberRequestPairs> = $r12;

        $r13 = new android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker;

        specialinvoke $r13.<android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker mFrameNumberTracker> = $r13;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId> = 0;

        $r14 = new android.hardware.camera2.impl.CameraDeviceImpl$1;

        specialinvoke $r14.<android.hardware.camera2.impl.CameraDeviceImpl$1: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnOpened> = $r14;

        $r16 = new android.hardware.camera2.impl.CameraDeviceImpl$2;

        specialinvoke $r16.<android.hardware.camera2.impl.CameraDeviceImpl$2: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured> = $r16;

        $r15 = new android.hardware.camera2.impl.CameraDeviceImpl$3;

        specialinvoke $r15.<android.hardware.camera2.impl.CameraDeviceImpl$3: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnActive> = $r15;

        $r18 = new android.hardware.camera2.impl.CameraDeviceImpl$4;

        specialinvoke $r18.<android.hardware.camera2.impl.CameraDeviceImpl$4: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy> = $r18;

        $r17 = new android.hardware.camera2.impl.CameraDeviceImpl$5;

        specialinvoke $r17.<android.hardware.camera2.impl.CameraDeviceImpl$5: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnClosed> = $r17;

        $r20 = new android.hardware.camera2.impl.CameraDeviceImpl$6;

        specialinvoke $r20.<android.hardware.camera2.impl.CameraDeviceImpl$6: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle> = $r20;

        $r19 = new android.hardware.camera2.impl.CameraDeviceImpl$7;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraDeviceImpl$7: void <init>(android.hardware.camera2.impl.CameraDeviceImpl)>(r0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnDisconnected> = $r19;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 == null goto label1;

        if r4 != null goto label2;

     label1:
        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument given");

        throw $r22;

     label2:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId> = r1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback> = r2;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler> = r3;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r4;

        $r21 = newarray (java.lang.Object)[1];

        $r23 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId>;

        $r21[0] = $r23;

        r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice-JV-%s", $r21);

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i1 <= 23 goto label3;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, 23);

     label3:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG> = r5;

        $r24 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>($r24, 3);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG> = $z0;

        $r27 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r25 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r26 = virtualinvoke $r27.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r25);

        r6 = (java.lang.Integer) $r26;

        if r6 != null goto label4;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount> = 1;

        goto label5;

     label4:
        $i2 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount> = $i2;

     label5:
        return;
    }

    public android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks getCallbacks()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks mCallbacks>;

        return $r1;
    }

    public void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.ICameraDeviceUser r1, $r6;
        java.lang.Object r2, $r4, $r5;
        java.lang.Throwable r3, $r11;
        boolean $z0;
        java.lang.Runnable $r7, $r9;
        android.os.Handler $r8, $r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.ICameraDeviceUser;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 = staticinvoke <android.hardware.camera2.utils.CameraBinderDecorator: java.lang.Object newInstance(java.lang.Object)>(r1);

        $r6 = (android.hardware.camera2.ICameraDeviceUser) $r5;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice> = $r6;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnOpened>;

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r9);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setRemoteFailure(android.hardware.camera2.utils.CameraRuntimeException)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.utils.CameraRuntimeException r1;
        byte b0, b1;
        boolean z0, z1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r12;
        int $i2, $i3;
        android.hardware.camera2.impl.CameraDeviceImpl$8 $r5;
        android.os.Handler $r6;
        java.lang.StringBuilder $r7, $r9, $r11;
        java.lang.String $r8, $r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.utils.CameraRuntimeException;

        b0 = 4;

        z0 = 1;

        $i2 = virtualinvoke r1.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        tableswitch($i2)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label01;
            case 5: goto label02;
            default: goto label06;
        };

     label01:
        b0 = 1;

        goto label07;

     label02:
        b0 = 2;

        goto label07;

     label03:
        b0 = 3;

        goto label07;

     label04:
        z0 = 0;

        goto label07;

     label05:
        b0 = 4;

        goto label07;

     label06:
        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown failure in opening camera device: ");

        $i3 = virtualinvoke r1.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>($r8, $r10);

     label07:
        b1 = b0;

        z1 = z0;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r2 = $r4;

        entermonitor $r4;

     label08:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 1;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r5 = new android.hardware.camera2.impl.CameraDeviceImpl$8;

        specialinvoke $r5.<android.hardware.camera2.impl.CameraDeviceImpl$8: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,boolean,int)>(r0, z1, b1);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label11:
        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public java.lang.String getId()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String mCameraId>;

        return $r1;
    }

    public void configureOutputs(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean configureOutputsChecked(java.util.List)>(r1);

        return;
    }

    public boolean configureOutputsChecked(java.util.List) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        boolean z0, $z2, $z3, $z7, z15, z16, z17;
        java.lang.Object r2, $r8, $r18, $r22, $r29;
        java.util.HashSet r3, $r9;
        java.util.ArrayList r4, $r10, $r32;
        int i0, i1, $i2, $i5, $i7, $i8, $i9, $i10, $i12, $i13, i14;
        android.view.Surface r5, r54;
        java.lang.Throwable r6, r7, $r34, $r39;
        android.util.SparseArray $r11, $r21, $r24, $r26, $r27;
        android.os.Handler $r12, $r17, $r20, $r33, $r35, $r38, $r41, $r43, $r50;
        java.lang.Runnable $r13, $r16, $r19, $r30, $r36, $r37, $r40, $r42, $r49;
        android.hardware.camera2.ICameraDeviceUser $r14, $r15, $r23, $r25;
        java.lang.Integer $r28, r52;
        android.os.RemoteException $r31;
        java.lang.IllegalArgumentException $r44;
        java.lang.String $r45;
        android.hardware.camera2.utils.CameraRuntimeException $r46, r56;
        java.lang.IllegalStateException $r47;
        android.hardware.camera2.CameraAccessException $r48;
        java.util.Iterator r51, r53;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        if r1 != null goto label01;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        r1 = $r32;

     label01:
        z0 = 0;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r2 = $r8;

        entermonitor $r8;

     label02:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        r3 = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r4 = $r10;

        i0 = 0;

     label03:
        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i2 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        if i0 >= $i2 goto label06;

        $r27 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        i1 = virtualinvoke $r27.<android.util.SparseArray: int keyAt(int)>(i0);

        $r26 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $r29 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r5 = (android.view.Surface) $r29;

        $z7 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z7 != 0 goto label04;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label05;

     label04:
        virtualinvoke r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r5);

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy>;

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label07:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void waitUntilIdle()>();

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r14.<android.hardware.camera2.ICameraDeviceUser: int beginConfigure()>();

        r51 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r22 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.lang.Integer) $r22;

        $r25 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        $i7 = virtualinvoke r52.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r25.<android.hardware.camera2.ICameraDeviceUser: int deleteStream(int)>($i7);

        $r24 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        $i8 = virtualinvoke r52.<java.lang.Integer: int intValue()>();

        virtualinvoke $r24.<android.util.SparseArray: void delete(int)>($i8);

        goto label08;

     label09:
        r53 = virtualinvoke r3.<java.util.HashSet: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r18 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (android.view.Surface) $r18;

        $r23 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i14 = interfaceinvoke $r23.<android.hardware.camera2.ICameraDeviceUser: int createStream(int,int,int,android.view.Surface)>(0, 0, 0, r54);

        $r21 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mConfiguredOutputs>;

        virtualinvoke $r21.<android.util.SparseArray: void put(int,java.lang.Object)>(i14, r54);

        goto label10;

     label11:
        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r15.<android.hardware.camera2.ICameraDeviceUser: int endConfigure()>();

     label12:
        goto label18;

     label13:
        $r44 := @caughtexception;

        $r45 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r45, "Stream configuration failed");

        z15 = 0;

     label14:
        if z0 == 0 goto label15;

        $i13 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i13 <= 0 goto label15;

        $r50 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r49 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r50.<android.os.Handler: boolean post(java.lang.Runnable)>($r49);

        goto label16;

     label15:
        $r43 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r42 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r43.<android.os.Handler: boolean post(java.lang.Runnable)>($r42);

     label16:
        exitmonitor r2;

     label17:
        return z15;

     label18:
        z16 = 1;

     label19:
        if z16 == 0 goto label20;

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i5 <= 0 goto label20;

        $r20 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r19 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r20.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

        goto label32;

     label20:
        $r17 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r16 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        goto label32;

     label21:
        $r46 := @caughtexception;

        r56 = $r46;

        $i12 = virtualinvoke r56.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i12 != 4 goto label22;

        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The camera is currently busy. You must wait until the previous operation completes.");

        throw $r47;

     label22:
        $r48 = virtualinvoke r56.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r48;

     label23:
        $r31 := @caughtexception;

        z17 = 0;

     label24:
        if z0 == 0 goto label25;

        $i9 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i9 <= 0 goto label25;

        $r35 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r36 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r35.<android.os.Handler: boolean post(java.lang.Runnable)>($r36);

        goto label26;

     label25:
        $r33 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r30 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r33.<android.os.Handler: boolean post(java.lang.Runnable)>($r30);

     label26:
        exitmonitor r2;

     label27:
        return z17;

     label28:
        $r34 := @caughtexception;

        r6 = $r34;

     label29:
        if z0 == 0 goto label30;

        $i10 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i10 <= 0 goto label30;

        $r38 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r37 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r38.<android.os.Handler: boolean post(java.lang.Runnable)>($r37);

        goto label31;

     label30:
        $r41 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r40 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnUnconfigured>;

        virtualinvoke $r41.<android.os.Handler: boolean post(java.lang.Runnable)>($r40);

     label31:
        throw r6;

     label32:
        exitmonitor r2;

     label33:
        goto label36;

     label34:
        $r39 := @caughtexception;

        r7 = $r39;

        exitmonitor r2;

     label35:
        throw r7;

     label36:
        return z16;

        catch java.lang.IllegalArgumentException from label11 to label12 with label13;
        catch android.hardware.camera2.utils.CameraRuntimeException from label07 to label14 with label21;
        catch android.hardware.camera2.utils.CameraRuntimeException from label18 to label19 with label21;
        catch android.os.RemoteException from label07 to label14 with label23;
        catch android.os.RemoteException from label18 to label19 with label23;
        catch java.lang.Throwable from label07 to label14 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label21 to label24 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
        catch java.lang.Throwable from label02 to label17 with label34;
        catch java.lang.Throwable from label18 to label27 with label34;
        catch java.lang.Throwable from label28 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    public void createCaptureSession(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.os.Handler r3, $r12;
        java.lang.Object r4, $r8;
        android.hardware.camera2.CameraAccessException r5, r6, $r16;
        java.lang.Throwable r7, $r18;
        boolean $z1, $z2, z3;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r9, $r10, $r11, $r15, r19;
        int $i0, $i1;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK $r13;
        java.lang.String $r14, $r17;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter2: android.os.Handler;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r4 = $r8;

        entermonitor $r8;

     label01:
        $z1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z1 == 0 goto label02;

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r14, "createCaptureSession");

     label02:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession>;

        if $r9 == null goto label03;

        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession>;

        virtualinvoke $r15.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void replaceSessionClose()>();

     label03:
        r5 = null;

     label04:
        z3 = virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean configureOutputsChecked(java.util.List)>(r1);

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        r6 = $r16;

        z3 = 0;

        r5 = r6;

        $z2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z2 == 0 goto label07;

        $r17 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r17, "createCaptureSession - failed with exception ", r6);

     label07:
        $r10 = new android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId>;

        $i1 = $i0 + 1;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mNextSessionId> = $i1;

        $r12 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        specialinvoke $r10.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void <init>(int,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler,android.hardware.camera2.impl.CameraDeviceImpl,android.os.Handler,boolean)>($i0, r1, r2, r3, r0, $r12, z3);

        r19 = $r10;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession> = r19;

        if r5 == null goto label08;

        throw r5;

     label08:
        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession>;

        $r13 = virtualinvoke $r11.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()>();

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback> = $r13;

        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r4;

     label11:
        throw r7;

     label12:
        return;

        catch android.hardware.camera2.CameraAccessException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void setSessionListener(android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0;
        java.lang.Object r1, $r5;
        android.hardware.camera2.impl.CameraMetadataNative r2, $r6;
        android.hardware.camera2.utils.CameraRuntimeException r3, $r9;
        java.lang.Throwable r4, $r12;
        android.hardware.camera2.ICameraDeviceUser $r7;
        android.hardware.camera2.CaptureRequest$Builder $r8, r14;
        android.hardware.camera2.CameraAccessException $r10;
        android.os.RemoteException $r11;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r6 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r6.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r2 = $r6;

     label02:
        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r7.<android.hardware.camera2.ICameraDeviceUser: int createDefaultRequest(int,android.hardware.camera2.impl.CameraMetadataNative)>(i0, r2);

     label03:
        goto label07;

     label04:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = virtualinvoke r3.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r10;

     label05:
        $r11 := @caughtexception;

        exitmonitor r1;

     label06:
        return null;

     label07:
        $r8 = new android.hardware.camera2.CaptureRequest$Builder;

        specialinvoke $r8.<android.hardware.camera2.CaptureRequest$Builder: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r2);

        r14 = $r8;

        exitmonitor r1;

     label08:
        return r14;

     label09:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r1;

     label10:
        throw r4;

        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label04;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback r2;
        android.os.Handler r3;
        java.util.ArrayList r4, $r5;
        boolean $z0;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, "calling capture");

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r4 = $r5;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler,boolean)>(r4, r2, r3, 0);

        return $i0;
    }

    public int captureBurst(java.util.List, android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one request must be given");

        throw $r4;

     label2:
        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler,boolean)>(r1, r2, r3, 0);

        return $i0;
    }

    private void checkEarlyTriggerSequenceComplete(int, long)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int i0, i2;
        long l1;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder r1, $r23;
        android.hardware.camera2.impl.CameraDeviceImpl$9 r2, $r12;
        byte $b3;
        java.util.AbstractMap$SimpleEntry $r3;
        java.util.List $r4;
        java.lang.Long $r5, $r20;
        java.lang.Integer $r6, $r10, $r18;
        android.util.SparseArray $r7, $r15, $r19;
        java.lang.Object[] $r8, $r17;
        java.lang.String $r9, $r11, $r14, $r16, $r21;
        boolean $z1, $z3;
        android.os.Handler $r13;
        java.lang.Object $r22;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $b3 = l1 cmp -1L;

        if $b3 != 0 goto label7;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i2 = virtualinvoke $r7.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if i2 < 0 goto label1;

        $r19 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r22 = virtualinvoke $r19.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r23 = (android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder) $r22;

        goto label2;

     label1:
        $r23 = null;

     label2:
        r1 = $r23;

        if r1 == null goto label3;

        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r15.<android.util.SparseArray: void removeAt(int)>(i2);

        $z3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z3 == 0 goto label3;

        $r16 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r17 = newarray (java.lang.Object)[2];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[0] = $r18;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r17[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("remove holder for requestId %d, because lastFrame is %d.", $r17);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r16, $r21);

     label3:
        if r1 == null goto label5;

        $z1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z1 == 0 goto label4;

        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r14, "immediately trigger onCaptureSequenceAborted because request did not reach HAL");

     label4:
        $r12 = new android.hardware.camera2.impl.CameraDeviceImpl$9;

        specialinvoke $r12.<android.hardware.camera2.impl.CameraDeviceImpl$9: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,int,long,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder)>(r0, i0, l1, r1);

        r2 = $r12;

        $r13 = virtualinvoke r1.<android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder: android.os.Handler getHandler()>();

        virtualinvoke $r13.<android.os.Handler: boolean post(java.lang.Runnable)>(r2);

        goto label6;

     label5:
        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("did not register callback to request %d", $r8);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r9, $r11);

     label6:
        goto label8;

     label7:
        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mFrameNumberRequestPairs>;

        $r3 = new java.util.AbstractMap$SimpleEntry;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkAndFireSequenceComplete()>();

     label8:
        return;
    }

    private int submitCaptureRequest(java.util.List, android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback, android.os.Handler, boolean) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1, $r14;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback r2;
        android.os.Handler r3, $r16, r41;
        boolean z0, $z1, $z2, $z3, $z5, $z7, $z8;
        java.util.Iterator r4, r6;
        android.hardware.camera2.CaptureRequest r5;
        android.view.Surface r7;
        java.lang.Throwable r8, $r38;
        java.lang.Object $r9, $r32, $r33, r42;
        android.hardware.camera2.utils.LongParcelable $r10, r43;
        android.hardware.camera2.ICameraDeviceUser $r11;
        java.util.AbstractMap$SimpleEntry $r12;
        java.lang.Long $r13;
        java.lang.Integer $r15;
        java.lang.Runnable $r17;
        int $i0, $i1, i5;
        java.lang.String $r18, $r21, $r25, $r29;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r24, $r28, $r30;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder $r26;
        android.util.SparseArray $r27;
        long $l3, l6;
        java.util.Collection $r31, $r34;
        android.os.RemoteException $r35;
        java.lang.IllegalArgumentException $r36, $r37;
        android.hardware.camera2.CameraAccessException $r39;
        android.hardware.camera2.utils.CameraRuntimeException $r40, r44;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        z0 := @parameter3: boolean;

        r41 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r3, r2);

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r32 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CaptureRequest) $r32;

        $r31 = virtualinvoke r5.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $z7 = interfaceinvoke $r31.<java.util.Collection: boolean isEmpty()>();

        if $z7 == 0 goto label02;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Each request must have at least one Surface target");

        throw $r36;

     label02:
        $r34 = virtualinvoke r5.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        r6 = interfaceinvoke $r34.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z8 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label05;

        $r33 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.view.Surface) $r33;

        if r7 != null goto label04;

        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null Surface targets are not allowed");

        throw $r37;

     label04:
        goto label03;

     label05:
        goto label01;

     label06:
        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r42 = $r9;

        entermonitor $r9;

     label07:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        if z0 == 0 goto label08;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label08:
        $r10 = new android.hardware.camera2.utils.LongParcelable;

        specialinvoke $r10.<android.hardware.camera2.utils.LongParcelable: void <init>()>();

        r43 = $r10;

     label09:
        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        i5 = interfaceinvoke $r11.<android.hardware.camera2.ICameraDeviceUser: int submitRequestList(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>(r1, z0, r43);

        $z3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z3 == 0 goto label10;

        $r25 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("last frame number ");

        $l3 = virtualinvoke r43.<android.hardware.camera2.utils.LongParcelable: long getNumber()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r25, $r29);

     label10:
        goto label14;

     label11:
        $r40 := @caughtexception;

        r44 = $r40;

        $r39 = virtualinvoke r44.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r39;

     label12:
        $r35 := @caughtexception;

        exitmonitor r42;

     label13:
        return -1;

     label14:
        if r2 == null goto label15;

        $r27 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r26 = new android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder;

        specialinvoke $r26.<android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder: void <init>(android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,java.util.List,android.os.Handler,boolean)>(r2, r1, r41, z0);

        virtualinvoke $r27.<android.util.SparseArray: void put(int,java.lang.Object)>(i5, $r26);

        goto label16;

     label15:
        $z2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z2 == 0 goto label16;

        $r18 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listen for request ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null");

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r18, $r21);

     label16:
        l6 = virtualinvoke r43.<android.hardware.camera2.utils.LongParcelable: long getNumber()>();

        if z0 == 0 goto label18;

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i0 == -1 goto label17;

        $i1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceComplete(int,long)>($i1, l6);

     label17:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = i5;

        goto label19;

     label18:
        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mFrameNumberRequestPairs>;

        $r12 = new java.util.AbstractMap$SimpleEntry;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        specialinvoke $r12.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>($r13, $r15);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r12);

     label19:
        $z5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        if $z5 == 0 goto label20;

        $r16 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r17 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnActive>;

        virtualinvoke $r16.<android.os.Handler: boolean post(java.lang.Runnable)>($r17);

     label20:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = 0;

        exitmonitor r42;

     label21:
        return i5;

     label22:
        $r38 := @caughtexception;

        r8 = $r38;

        exitmonitor r42;

     label23:
        throw r8;

        catch android.hardware.camera2.utils.CameraRuntimeException from label09 to label10 with label11;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch java.lang.Throwable from label07 to label13 with label22;
        catch java.lang.Throwable from label14 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback r2;
        android.os.Handler r3;
        java.util.ArrayList r4, $r5;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r4 = $r5;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler,boolean)>(r4, r2, r3, 1);

        return $i0;
    }

    public int setRepeatingBurst(java.util.List, android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.util.List r1;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback r2;
        android.os.Handler r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        int $i0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one request must be given");

        throw $r4;

     label2:
        $i0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler,boolean)>(r1, r2, r3, 1);

        return $i0;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r4, $r6;
        int i0, $i2;
        android.hardware.camera2.utils.LongParcelable r2, $r7;
        long l1;
        java.lang.Throwable r3, $r14;
        android.util.SparseArray $r5;
        android.hardware.camera2.ICameraDeviceUser $r8;
        java.lang.Integer $r9;
        java.util.ArrayList $r10;
        android.hardware.camera2.utils.CameraRuntimeException $r11, r15;
        android.os.RemoteException $r12;
        android.hardware.camera2.CameraAccessException $r13;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $i2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i2 == -1 goto label07;

        i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r6 == null goto label02;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.ArrayList mRepeatingRequestIdDeletedList>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label02:
        $r7 = new android.hardware.camera2.utils.LongParcelable;

        specialinvoke $r7.<android.hardware.camera2.utils.LongParcelable: void <init>()>();

        r2 = $r7;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r8.<android.hardware.camera2.ICameraDeviceUser: int cancelRequest(int,android.hardware.camera2.utils.LongParcelable)>(i0, r2);

        l1 = virtualinvoke r2.<android.hardware.camera2.utils.LongParcelable: long getNumber()>();

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceComplete(int,long)>(i0, l1);

     label03:
        goto label07;

     label04:
        $r11 := @caughtexception;

        r15 = $r11;

        $r13 = virtualinvoke r15.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r13;

     label05:
        $r12 := @caughtexception;

        exitmonitor r1;

     label06:
        return;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label04;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void waitUntilIdle() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r4;
        android.hardware.camera2.utils.CameraRuntimeException r2, $r8;
        java.lang.Throwable r3, $r7;
        int $i0;
        android.hardware.camera2.ICameraDeviceUser $r5;
        java.lang.IllegalStateException $r6;
        android.hardware.camera2.CameraAccessException $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i0 == -1 goto label02;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Active repeating request ongoing");

        throw $r6;

     label02:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r5.<android.hardware.camera2.ICameraDeviceUser: int waitUntilIdle()>();

     label03:
        goto label07;

     label04:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r9;

     label05:
        $r10 := @caughtexception;

        exitmonitor r1;

     label06:
        return;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label02 to label03 with label04;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void flush() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r4;
        android.hardware.camera2.utils.LongParcelable r2, $r7;
        long l0;
        java.lang.Throwable r3, $r11;
        java.lang.Runnable $r5, $r10;
        android.os.Handler $r6, $r9;
        boolean $z1;
        android.hardware.camera2.ICameraDeviceUser $r8;
        int $i2, $i3;
        android.hardware.camera2.CameraAccessException $r12;
        android.hardware.camera2.utils.CameraRuntimeException $r13, r15;
        android.os.RemoteException $r14;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkIfCameraClosedOrInError()>();

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnBusy>;

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        $z1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        if $z1 == 0 goto label03;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r10 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = new android.hardware.camera2.utils.LongParcelable;

        specialinvoke $r7.<android.hardware.camera2.utils.LongParcelable: void <init>()>();

        r2 = $r7;

        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r8.<android.hardware.camera2.ICameraDeviceUser: int flush(android.hardware.camera2.utils.LongParcelable)>(r2);

        $i2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        if $i2 == -1 goto label04;

        l0 = virtualinvoke r2.<android.hardware.camera2.utils.LongParcelable: long getNumber()>();

        $i3 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId>;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkEarlyTriggerSequenceComplete(int,long)>($i3, l0);

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mRepeatingRequestId> = -1;

     label04:
        goto label08;

     label05:
        $r13 := @caughtexception;

        r15 = $r13;

        $r12 = virtualinvoke r15.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r12;

     label06:
        $r14 := @caughtexception;

        exitmonitor r1;

     label07:
        return;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label11:
        throw r3;

     label12:
        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label03 to label04 with label05;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void close()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Object r1, $r4;
        android.hardware.camera2.utils.CameraRuntimeException r2, $r10;
        java.lang.Throwable r3, $r13;
        android.hardware.camera2.ICameraDeviceUser $r5, $r6, $r9;
        java.lang.Runnable $r7;
        android.os.Handler $r8;
        boolean $z1;
        java.lang.String $r11;
        android.hardware.camera2.CameraAccessException $r12;
        android.os.RemoteException $r14;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r4 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r5 == null goto label02;

        $r9 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        interfaceinvoke $r9.<android.hardware.camera2.ICameraDeviceUser: void disconnect()>();

     label02:
        goto label05;

     label03:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r12 = virtualinvoke r2.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Exception while closing: ", $r12);

        goto label05;

     label04:
        $r14 := @caughtexception;

     label05:
        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r6 != null goto label06;

        $z1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z1 == 0 goto label07;

     label06:
        $r8 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnClosed>;

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

     label07:
        r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice> = null;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = 0;

        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label01 to label02 with label03;
        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

     label1:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkAndFireSequenceComplete()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        long l0, $l4;
        java.util.Iterator r1;
        java.util.AbstractMap$SimpleEntry r2;
        int i1, i2;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder r3, $r25;
        java.lang.Object r4, $r8, $r10, $r12, $r13, $r21, $r28;
        java.lang.Throwable r5, $r29;
        android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker $r6;
        java.util.List $r7;
        boolean $z0, $z2;
        java.lang.Long $r9, $r24;
        byte $b3;
        java.lang.Integer $r11, $r22;
        android.util.SparseArray $r14, $r18, $r27;
        android.hardware.camera2.ICameraDeviceUser $r15;
        android.os.Handler $r16;
        android.hardware.camera2.impl.CameraDeviceImpl$10 $r17, r30;
        java.lang.String $r19, $r23, $r26;
        java.lang.Object[] $r20;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r6 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker mFrameNumberTracker>;

        l0 = virtualinvoke $r6.<android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker: long getCompletedFrameNumber()>();

        $r7 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.util.List mFrameNumberRequestPairs>;

        r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.AbstractMap$SimpleEntry) $r8;

        $r10 = virtualinvoke r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>();

        $r9 = (java.lang.Long) $r10;

        $l4 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $b3 = $l4 cmp l0;

        if $b3 > 0 goto label12;

        $r12 = virtualinvoke r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>();

        $r11 = (java.lang.Integer) $r12;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Object mInterfaceLock>;

        r4 = $r13;

        entermonitor $r13;

     label02:
        $r15 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r15 != null goto label04;

        $r26 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r26, "Camera closed while checking sequences");

        exitmonitor r4;

     label03:
        return;

     label04:
        $r14 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        i2 = virtualinvoke $r14.<android.util.SparseArray: int indexOfKey(int)>(i1);

        if i2 < 0 goto label05;

        $r27 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        $r28 = virtualinvoke $r27.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r25 = (android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder) $r28;

        goto label06;

     label05:
        $r25 = null;

     label06:
        r3 = $r25;

        if r3 == null goto label07;

        $r18 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        virtualinvoke $r18.<android.util.SparseArray: void removeAt(int)>(i2);

        $z2 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        if $z2 == 0 goto label07;

        $r19 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        $r20 = newarray (java.lang.Object)[3];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r20[0] = $r22;

        $r21 = virtualinvoke r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>();

        $r20[1] = $r21;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r20[2] = $r24;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("remove holder for requestId %d, because lastFrame %d is <= %d", $r20);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r19, $r23);

     label07:
        exitmonitor r4;

     label08:
        goto label11;

     label09:
        $r29 := @caughtexception;

        r5 = $r29;

        exitmonitor r4;

     label10:
        throw r5;

     label11:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        if r3 == null goto label12;

        $r17 = new android.hardware.camera2.impl.CameraDeviceImpl$10;

        specialinvoke $r17.<android.hardware.camera2.impl.CameraDeviceImpl$10: void <init>(android.hardware.camera2.impl.CameraDeviceImpl,int,java.util.AbstractMap$SimpleEntry,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder)>(r0, i1, r2, r3);

        r30 = $r17;

        $r16 = virtualinvoke r3.<android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallbackHolder: android.os.Handler getHandler()>();

        virtualinvoke $r16.<android.os.Handler: boolean post(java.lang.Runnable)>(r30);

     label12:
        goto label01;

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    static android.os.Handler checkHandler(android.os.Handler)
    {
        android.os.Handler r0, $r2;
        android.os.Looper r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.os.Handler;

        if r0 != null goto label2;

        r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No handler given, and current thread has no looper!");

        throw $r3;

     label1:
        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r0 = $r2;

     label2:
        return r0;
    }

    static android.os.Handler checkHandler(android.os.Handler, java.lang.Object)
    {
        android.os.Handler r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: android.os.Handler;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler)>(r0);

        return $r2;

     label1:
        return r0;
    }

    private void checkIfCameraClosedOrInError() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;
        android.hardware.camera2.ICameraDeviceUser $r1;
        java.lang.IllegalStateException $r2;
        android.hardware.camera2.CameraAccessException $r3;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError>;

        if $z0 == 0 goto label1;

        $r3 = new android.hardware.camera2.CameraAccessException;

        specialinvoke $r3.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(3, "The camera device has encountered a serious error");

        throw $r3;

     label1:
        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CameraDevice was already closed");

        throw $r2;

     label2:
        return;
    }

    private boolean isClosed()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mClosing>;

        return $z0;
    }

    private android.hardware.camera2.CameraCharacteristics getCharacteristics()
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @this: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        return $r1;
    }

    static android.hardware.camera2.ICameraDeviceUser access$000(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.ICameraDeviceUser $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.ICameraDeviceUser mRemoteDevice>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK access$100(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK mSessionStateCallback>;

        return $r1;
    }

    static android.hardware.camera2.CameraDevice$StateCallback access$200(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraDevice$StateCallback $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraDevice$StateCallback mDeviceCallback>;

        return $r1;
    }

    static boolean access$300(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean isClosed()>();

        return $z0;
    }

    static boolean access$400(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean DEBUG>;

        return $z0;
    }

    static java.lang.String access$500(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String TAG>;

        return $r1;
    }

    static java.lang.Runnable access$600(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnDisconnected>;

        return $r1;
    }

    static android.os.Handler access$700(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler mDeviceHandler>;

        return $r1;
    }

    static boolean access$802(android.hardware.camera2.impl.CameraDeviceImpl, boolean)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mInError> = z0;

        return z0;
    }

    static boolean access$900(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle>;

        return $z0;
    }

    static java.lang.Runnable access$1000(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.Runnable mCallOnIdle>;

        return $r1;
    }

    static boolean access$902(android.hardware.camera2.impl.CameraDeviceImpl, boolean)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.impl.CameraDeviceImpl: boolean mIdle> = z0;

        return z0;
    }

    static android.util.SparseArray access$1100(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.util.SparseArray mCaptureCallbackMap>;

        return $r1;
    }

    static android.hardware.camera2.CameraCharacteristics access$1200(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.CameraCharacteristics getCharacteristics()>();

        return $r1;
    }

    static int access$1300(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        int $i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $i0 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: int mTotalPartialCount>;

        return $i0;
    }

    static android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker access$1400(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$FrameNumberTracker mFrameNumberTracker>;

        return $r1;
    }

    static void access$1500(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraDeviceImpl: void checkAndFireSequenceComplete()>();

        return;
    }

    static android.hardware.camera2.impl.CameraCaptureSessionImpl access$1600(android.hardware.camera2.impl.CameraDeviceImpl)
    {
        android.hardware.camera2.impl.CameraDeviceImpl r0;
        android.hardware.camera2.impl.CameraCaptureSessionImpl $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraDeviceImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraCaptureSessionImpl mCurrentSession>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.impl.CameraDeviceImpl: int REQUEST_ID_NONE> = -1;

        return;
    }
}
