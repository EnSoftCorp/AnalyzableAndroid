public class android.hardware.camera2.legacy.LegacyResultMapper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean VERBOSE;
    private android.hardware.camera2.legacy.LegacyRequest mCachedRequest;
    private android.hardware.camera2.impl.CameraMetadataNative mCachedResult;

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyResultMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyResultMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest> = null;

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult> = null;

        return;
    }

    public android.hardware.camera2.impl.CameraMetadataNative cachedConvertResultMetadata(android.hardware.camera2.legacy.LegacyRequest, long)
    {
        android.hardware.camera2.legacy.LegacyResultMapper r0;
        android.hardware.camera2.legacy.LegacyRequest r1, $r3, $r14;
        long l0;
        android.hardware.camera2.impl.CameraMetadataNative r2, $r4, $r16, $r17;
        boolean z0, $z1, $z2;
        android.hardware.camera2.CaptureResult$Key $r5;
        java.lang.Long $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        android.hardware.Camera$Parameters $r13, $r15;

        r0 := @this: android.hardware.camera2.legacy.LegacyResultMapper;

        r1 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        l0 := @parameter1: long;

        $r3 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest>;

        if $r3 == null goto label1;

        $r15 = r1.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r14 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest>;

        $r13 = $r14.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $z2 = virtualinvoke $r15.<android.hardware.Camera$Parameters: boolean same(android.hardware.Camera$Parameters)>($r13);

        if $z2 == 0 goto label1;

        $r17 = new android.hardware.camera2.impl.CameraMetadataNative;

        $r16 = r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult>;

        specialinvoke $r17.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>($r16);

        r2 = $r17;

        z0 = 1;

        goto label2;

     label1:
        r2 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative convertResultMetadata(android.hardware.camera2.legacy.LegacyRequest)>(r1);

        z0 = 0;

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.legacy.LegacyRequest mCachedRequest> = r1;

        $r4 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r4.<android.hardware.camera2.impl.CameraMetadataNative: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r2);

        r0.<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative mCachedResult> = $r4;

     label2:
        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r2.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, $r6);

        $z1 = <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cachedConvertResultMetadata - cached? ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timestamp = ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", $r12);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", "----- beginning of result dump ------");

        virtualinvoke r2.<android.hardware.camera2.impl.CameraMetadataNative: void dumpToLog()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", "----- end of result dump ------");

     label3:
        return r2;
    }

    private static android.hardware.camera2.impl.CameraMetadataNative convertResultMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyRequest r0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.camera2.CaptureRequest r2;
        android.util.Size r3, $r67;
        android.hardware.Camera$Parameters r4;
        android.hardware.camera2.impl.CameraMetadataNative r5, $r8;
        android.graphics.Rect r6, $r13;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r7;
        int i0, i1, $i4, $i7, i10, i11, i12;
        android.hardware.camera2.CameraCharacteristics$Key $r9, $r52;
        java.lang.Object $r10, $r12, $r17, $r23, $r54, $r57, $r60;
        android.hardware.camera2.CaptureRequest$Key $r11, $r15, $r21, $r49, $r58;
        android.hardware.camera2.CaptureResult$Key $r14, $r20, $r26, $r31, $r40, $r44, $r45, $r47, $r50, $r53, $r55, $r59, $r62, $r63, $r66, $r68, $r70, $r71, $r73;
        java.lang.Integer $r16, $r18, $r19, $r22, $r24, $r25, $r27, $r35, $r39, $r43, $r48, $r61, $r65, $r72, $r74;
        java.lang.StringBuilder $r28, $r29, $r30, $r32, $r34, $r36, $r37, $r38;
        java.lang.String $r33, $r41, $r42, $r46, r75, r76;
        boolean $z0, $z1, $z2;
        float $f0;
        java.lang.Float $r51, $r69;
        byte $b5, $b8, $b9, b13;
        java.lang.Byte $r56, $r64;
        android.hardware.Camera$Size r77;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        r1 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r2 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r3 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r4 = r0.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r8 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r5 = $r8;

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r10 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r9);

        r6 = (android.graphics.Rect) $r10;

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r12 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r11);

        $r13 = (android.graphics.Rect) $r12;

        r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect,android.graphics.Rect,android.util.Size,android.hardware.Camera$Parameters)>(r6, $r13, r3, r4);

        $r14 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r14, $r16);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAe(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureRequest,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>(r5, r1, r2, r6, r7, r4);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAf(android.hardware.camera2.impl.CameraMetadataNative,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>(r5, r6, r7, r4);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAwb(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r5, r4);

        $r15 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r17 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r15, $r18);

        $r19 = (java.lang.Integer) $r17;

        i0 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        i10 = staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: int filterSupportedCaptureIntent(int)>(i0);

        $r20 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_CAPTURE_INTENT>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r20, $r22);

        $r21 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r23 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r2, $r21, $r24);

        $r25 = (java.lang.Integer) $r23;

        i11 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        if i11 != 2 goto label01;

        $r71 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r71, $r72);

        goto label02;

     label01:
        $r26 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r26, $r27);

     label02:
        r75 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>();

        i1 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertSceneModeFromLegacy(java.lang.String)>(r75);

        if i1 == -1 goto label03;

        $r73 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r73, $r74);

        goto label04;

     label03:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown scene mode ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned by camera HAL, setting to disabled.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r33);

        $r31 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r31, $r35);

     label04:
        r76 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>();

        i12 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertEffectModeFromLegacy(java.lang.String)>(r76);

        if i12 == -1 goto label05;

        $r66 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE>;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r66, $r65);

        goto label06;

     label05:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown effect mode ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned by camera HAL, setting to off.");

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r41);

        $r40 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE>;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r40, $r39);

     label06:
        $z0 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        if $z0 == 0 goto label07;

        $z2 = virtualinvoke r4.<android.hardware.Camera$Parameters: boolean getVideoStabilization()>();

        if $z2 == 0 goto label07;

        $b9 = 1;

        goto label08;

     label07:
        $b9 = 0;

     label08:
        b13 = $b9;

        $r44 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b13);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r44, $r43);

        $r42 = "infinity";

        $r46 = virtualinvoke r4.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $z1 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r46);

        if $z1 == 0 goto label09;

        $r70 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCUS_DISTANCE>;

        $r69 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r70, $r69);

     label09:
        $r45 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH>;

        $f0 = virtualinvoke r4.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $r51 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r45, $r51);

        $r53 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH>;

        $r52 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r54 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r52);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r53, $r54);

        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapScaler(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Parameters)>(r5, r7, r4);

        $r47 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_MODE>;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r47, $r48);

        $r50 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION>;

        $r49 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION>;

        $r57 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r49);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r50, $r57);

        $r59 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION>;

        $r58 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r60 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r58);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r59, $r60);

        $r55 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_QUALITY>;

        $i4 = virtualinvoke r4.<android.hardware.Camera$Parameters: int getJpegQuality()>();

        $b5 = (byte) $i4;

        $r56 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b5);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r55, $r56);

        $r63 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY>;

        $i7 = virtualinvoke r4.<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>();

        $b8 = (byte) $i7;

        $r64 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b8);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r63, $r64);

        r77 = virtualinvoke r4.<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>();

        if r77 == null goto label10;

        $r68 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_SIZE>;

        $r67 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size convertSize(android.hardware.Camera$Size)>(r77);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r68, $r67);

        goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", "Null thumbnail size received from parameters.");

     label11:
        $r62 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE>;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r5.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r62, $r61);

        return r5;
    }

    private static void mapAe(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.CaptureRequest, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.camera2.CaptureRequest r2;
        android.graphics.Rect r3;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r4;
        android.hardware.Camera$Parameters r5;
        int i0, $i1, $i2;
        java.lang.Boolean r6, $r12;
        java.lang.String $r7, $r20, $r28, $r32, r34;
        android.hardware.camera2.CaptureResult$Key $r8, $r10, $r13, $r17;
        java.lang.Integer $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.hardware.camera2.CaptureRequest$Key $r14;
        java.lang.Object $r15;
        java.util.List $r16;
        java.lang.StringBuilder $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r33;
        android.hardware.camera2.params.MeteringRectangle[] r35;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r2 := @parameter2: android.hardware.camera2.CaptureRequest;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r5 := @parameter5: android.hardware.Camera$Parameters;

        $r7 = virtualinvoke r5.<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>();

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingModeOrDefault(java.lang.String)>($r7);

        $r8 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r8, $r9);

        $r10 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $i1 = virtualinvoke r5.<android.hardware.Camera$Parameters: int getExposureCompensation()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r10, $r11);

        $z0 = virtualinvoke r5.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        if $z0 == 0 goto label1;

        $z5 = virtualinvoke r5.<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>();

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z6 = $z5;

        $r13 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK>;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r13, $r12);

        $z1 = <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAe - android.control.aeLock = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z6);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supported = ");

        $z4 = virtualinvoke r5.<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", $r32);

     label3:
        $r14 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r15 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r14);

        r6 = (java.lang.Boolean) $r15;

        if r6 == null goto label4;

        $z3 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == z6 goto label4;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAe - android.control.aeLock was requested to ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but resulted in ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z6);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r28);

     label4:
        staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: void mapAeAndFlashMode(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.CameraCharacteristics,android.hardware.Camera$Parameters)>(r0, r1, r5);

        $i2 = virtualinvoke r5.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i2 <= 0 goto label6;

        $z2 = <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE>;

        if $z2 == 0 goto label5;

        r34 = virtualinvoke r5.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("metering-areas");

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAe - parameter dump; metering-areas: ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", $r20);

     label5:
        $r16 = virtualinvoke r5.<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>();

        r35 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,java.util.List,java.lang.String)>(r3, r4, $r16, "AE");

        $r17 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r17, r35);

     label6:
        return;
    }

    private static void mapAf(android.hardware.camera2.impl.CameraMetadataNative, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.graphics.Rect r1;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r2;
        android.hardware.Camera$Parameters r3;
        java.lang.String r4, $r6, $r12;
        android.hardware.camera2.CaptureResult$Key $r5, $r9;
        int $i0, $i1;
        java.lang.Integer $r7;
        boolean $z0;
        java.util.List $r8;
        java.lang.StringBuilder $r10, $r11, $r13;
        android.hardware.camera2.params.MeteringRectangle[] r14;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r3 := @parameter3: android.hardware.Camera$Parameters;

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r6 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: int convertLegacyAfMode(java.lang.String)>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, $r7);

        $i1 = virtualinvoke r3.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i1 <= 0 goto label2;

        $z0 = <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>("focus-areas");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAe - parameter dump; focus-areas: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", $r12);

     label1:
        $r8 = virtualinvoke r3.<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>();

        r14 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,java.util.List,java.lang.String)>(r1, r2, $r8, "AF");

        $r9 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r9, r14);

     label2:
        return;
    }

    private static void mapAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        boolean z0, $z1, $z2;
        android.hardware.camera2.CaptureResult$Key $r2, $r5;
        java.lang.Boolean $r3;
        java.lang.String $r4;
        java.lang.Integer $r6;
        int i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $z1 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>();

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r2 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r2, $r3);

        $r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>();

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyResultMapper: int convertLegacyAwbMode(java.lang.String)>($r4);

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r5, $r6);

        return;
    }

    private static android.hardware.camera2.params.MeteringRectangle[] getMeteringRectangles(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, java.util.List, java.lang.String)
    {
        android.graphics.Rect r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        java.util.List r2;
        java.lang.String r3, $r17, $r18;
        java.util.ArrayList r4, $r8;
        java.util.Iterator r5;
        android.hardware.Camera$Area r6;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r7;
        boolean $z0, $z1;
        android.hardware.camera2.params.MeteringRectangle[] $r9, $r11;
        java.lang.Object[] $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        java.lang.Object $r19;
        android.hardware.camera2.params.MeteringRectangle $r20;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.lang.String;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r4 = $r8;

        if r2 == null goto label2;

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.hardware.Camera$Area) $r19;

        r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area)>(r0, r1, r6);

        $r20 = virtualinvoke r7.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.MeteringRectangle toMetering()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label1;

     label2:
        $z0 = <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE>;

        if $z0 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Metering rectangles for ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r17 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r4);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyResultMapper", $r18);

     label3:
        $r9 = newarray (android.hardware.camera2.params.MeteringRectangle)[0];

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (android.hardware.camera2.params.MeteringRectangle[]) $r10;

        return $r11;
    }

    private static void mapAeAndFlashMode(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.CameraCharacteristics, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.Camera$Parameters r2;
        byte b0, b1, b2;
        java.lang.Integer r3, $r9, $r11, $r13;
        java.lang.String r4, r5, $r16, $r18;
        android.hardware.camera2.CameraCharacteristics$Key $r6;
        java.lang.Object $r7;
        java.lang.Boolean $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.hardware.camera2.CaptureResult$Key $r10, $r12, $r14;
        int $i3;
        java.lang.StringBuilder $r15, $r17, $r19;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r2 := @parameter2: android.hardware.Camera$Parameters;

        b0 = 0;

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r7 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r6);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label01;

        $r9 = null;

        goto label02;

     label01:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label02:
        r3 = $r9;

        b1 = 1;

        r4 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>();

        if r4 == null goto label15;

        r5 = r4;

        b2 = -1;

        $i3 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        lookupswitch($i3)
        {
            case 3551: goto label05;
            case 109935: goto label03;
            case 3005871: goto label04;
            case 110547964: goto label07;
            case 1081542389: goto label06;
            default: goto label08;
        };

     label03:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z5 == 0 goto label08;

        b2 = 0;

        goto label08;

     label04:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z4 == 0 goto label08;

        b2 = 1;

        goto label08;

     label05:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z3 == 0 goto label08;

        b2 = 2;

        goto label08;

     label06:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("red-eye");

        if $z1 == 0 goto label08;

        b2 = 3;

        goto label08;

     label07:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("torch");

        if $z2 == 0 goto label08;

        b2 = 4;

     label08:
        tableswitch(b2)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label13;
            default: goto label14;
        };

     label09:
        goto label15;

     label10:
        b1 = 2;

        goto label15;

     label11:
        b0 = 1;

        b1 = 3;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        goto label15;

     label12:
        b1 = 4;

        goto label15;

     label13:
        b0 = 2;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        goto label15;

     label14:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapAeAndFlashMode - Ignoring unknown flash mode ");

        $r16 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r18);

     label15:
        $r10 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_STATE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r10, r3);

        $r12 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_MODE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r12, $r11);

        $r14 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r14, $r13);

        return;
    }

    private static int convertLegacyAfMode(java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        byte b0;
        int $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", "convertLegacyAfMode - no AF mode, default to OFF");

        return 0;

     label01:
        r1 = r0;

        b0 = -1;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -194628547: goto label04;
            case 3005871: goto label02;
            case 3108534: goto label05;
            case 97445748: goto label07;
            case 103652300: goto label06;
            case 173173288: goto label08;
            case 910005312: goto label03;
            default: goto label09;
        };

     label02:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z6 == 0 goto label09;

        b0 = 0;

        goto label09;

     label03:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("continuous-picture");

        if $z0 == 0 goto label09;

        b0 = 1;

        goto label09;

     label04:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("continuous-video");

        if $z5 == 0 goto label09;

        b0 = 2;

        goto label09;

     label05:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("edof");

        if $z4 == 0 goto label09;

        b0 = 3;

        goto label09;

     label06:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("macro");

        if $z2 == 0 goto label09;

        b0 = 4;

        goto label09;

     label07:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("fixed");

        if $z3 == 0 goto label09;

        b0 = 5;

        goto label09;

     label08:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("infinity");

        if $z1 == 0 goto label09;

        b0 = 6;

     label09:
        tableswitch(b0)
        {
            case 0: goto label10;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label15;
            case 6: goto label16;
            default: goto label17;
        };

     label10:
        return 1;

     label11:
        return 4;

     label12:
        return 3;

     label13:
        return 5;

     label14:
        return 2;

     label15:
        return 0;

     label16:
        return 0;

     label17:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertLegacyAfMode - unknown mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , ignoring");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r6);

        return 0;
    }

    private static int convertLegacyAwbMode(java.lang.String)
    {
        java.lang.String r0, r1, $r5;
        byte b0;
        int $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return 1;

     label01:
        r1 = r0;

        b0 = -1;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -939299377: goto label03;
            case -719316704: goto label05;
            case 3005871: goto label02;
            case 109399597: goto label09;
            case 474934723: goto label07;
            case 1650323088: goto label08;
            case 1902580840: goto label04;
            case 1942983418: goto label06;
            default: goto label10;
        };

     label02:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z5 == 0 goto label10;

        b0 = 0;

        goto label10;

     label03:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("incandescent");

        if $z6 == 0 goto label10;

        b0 = 1;

        goto label10;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("fluorescent");

        if $z1 == 0 goto label10;

        b0 = 2;

        goto label10;

     label05:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("warm-fluorescent");

        if $z7 == 0 goto label10;

        b0 = 3;

        goto label10;

     label06:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("daylight");

        if $z0 == 0 goto label10;

        b0 = 4;

        goto label10;

     label07:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("cloudy-daylight");

        if $z3 == 0 goto label10;

        b0 = 5;

        goto label10;

     label08:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("twilight");

        if $z2 == 0 goto label10;

        b0 = 6;

        goto label10;

     label09:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shade");

        if $z4 == 0 goto label10;

        b0 = 7;

     label10:
        tableswitch(b0)
        {
            case 0: goto label11;
            case 1: goto label12;
            case 2: goto label13;
            case 3: goto label14;
            case 4: goto label15;
            case 5: goto label16;
            case 6: goto label17;
            case 7: goto label18;
            default: goto label19;
        };

     label11:
        return 1;

     label12:
        return 2;

     label13:
        return 3;

     label14:
        return 4;

     label15:
        return 5;

     label16:
        return 6;

     label17:
        return 7;

     label18:
        return 8;

     label19:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAwbMode - unrecognized WB mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyResultMapper", $r5);

        return 1;
    }

    private static void mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Parameters r2;
        android.graphics.Rect $r3;
        android.hardware.camera2.CaptureResult$Key $r4;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.Camera$Parameters;

        $r4 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION>;

        $r3 = r1.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect reportedCrop>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r4, $r3);

        return;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.camera2.legacy.LegacyResultMapper: java.lang.String TAG> = "LegacyResultMapper";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LegacyResultMapper", 2);

        <android.hardware.camera2.legacy.LegacyResultMapper: boolean VERBOSE> = $z0;

        return;
    }
}
