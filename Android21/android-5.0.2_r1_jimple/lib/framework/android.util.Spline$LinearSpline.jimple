public class android.util.Spline$LinearSpline extends android.util.Spline
{
    private final float[] mX;
    private final float[] mY;
    private final float[] mM;

    public void <init>(float[], float[])
    {
        android.util.Spline$LinearSpline r0;
        float[] r1, r2, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IllegalArgumentException $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: android.util.Spline$LinearSpline;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        specialinvoke r0.<android.util.Spline: void <init>()>();

        if r1 == null goto label1;

        if r2 == null goto label1;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label1;

        $i4 = lengthof r1;

        if $i4 >= 2 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least two control points and the arrays must be of equal length.");

        throw $r3;

     label2:
        i0 = lengthof r1;

        $i5 = i0 - 1;

        $r4 = newarray (float)[$i5];

        r0.<android.util.Spline$LinearSpline: float[] mM> = $r4;

        i1 = 0;

     label3:
        $i6 = i0 - 1;

        if i1 >= $i6 goto label4;

        $r5 = r0.<android.util.Spline$LinearSpline: float[] mM>;

        $i7 = i1 + 1;

        $f1 = r2[$i7];

        $f0 = r2[i1];

        $f4 = $f1 - $f0;

        $i8 = i1 + 1;

        $f2 = r1[$i8];

        $f3 = r1[i1];

        $f5 = $f2 - $f3;

        $f6 = $f4 / $f5;

        $r5[i1] = $f6;

        i1 = i1 + 1;

        goto label3;

     label4:
        r0.<android.util.Spline$LinearSpline: float[] mX> = r1;

        r0.<android.util.Spline$LinearSpline: float[] mY> = r2;

        return;
    }

    public float interpolate(float)
    {
        android.util.Spline$LinearSpline r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        int i0, i1, $i3, $i5, $i8;
        float[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        byte $b2, $b4, $b6, $b7;

        r0 := @this: android.util.Spline$LinearSpline;

        f0 := @parameter0: float;

        $r1 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        i0 = lengthof $r1;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return f0;

     label1:
        $r2 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $f1 = $r2[0];

        $b2 = f0 cmpg $f1;

        if $b2 > 0 goto label2;

        $r10 = r0.<android.util.Spline$LinearSpline: float[] mY>;

        $f12 = $r10[0];

        return $f12;

     label2:
        $r3 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $i3 = i0 - 1;

        $f2 = $r3[$i3];

        $b4 = f0 cmpl $f2;

        if $b4 < 0 goto label3;

        $r11 = r0.<android.util.Spline$LinearSpline: float[] mY>;

        $i8 = i0 - 1;

        $f13 = $r11[$i8];

        return $f13;

     label3:
        i1 = 0;

     label4:
        $r4 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $i5 = i1 + 1;

        $f3 = $r4[$i5];

        $b6 = f0 cmpl $f3;

        if $b6 < 0 goto label5;

        i1 = i1 + 1;

        $r8 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $f10 = $r8[i1];

        $b7 = f0 cmpl $f10;

        if $b7 != 0 goto label4;

        $r9 = r0.<android.util.Spline$LinearSpline: float[] mY>;

        $f11 = $r9[i1];

        return $f11;

     label5:
        $r5 = r0.<android.util.Spline$LinearSpline: float[] mY>;

        $f9 = $r5[i1];

        $r7 = r0.<android.util.Spline$LinearSpline: float[] mM>;

        $f7 = $r7[i1];

        $r6 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $f5 = $r6[i1];

        $f4 = f0 - $f5;

        $f6 = $f7 * $f4;

        $f8 = $f9 + $f6;

        return $f8;
    }

    public java.lang.String toString()
    {
        android.util.Spline$LinearSpline r0;
        java.lang.StringBuilder r1, $r2, $r7, $r10, $r13;
        int i0, i1, $i2;
        float[] $r3, $r8, $r11, $r15;
        java.lang.String $r6;
        float $f0, $f1, $f2;

        r0 := @this: android.util.Spline$LinearSpline;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        i0 = lengthof $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LinearSpline{[");

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        if i1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r8 = r0.<android.util.Spline$LinearSpline: float[] mX>;

        $f0 = $r8[i1];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = r0.<android.util.Spline$LinearSpline: float[] mY>;

        $f1 = $r11[i1];

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $i2 = i0 - 1;

        if i1 >= $i2 goto label3;

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = r0.<android.util.Spline$LinearSpline: float[] mM>;

        $f2 = $r15[i1];

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]}");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
