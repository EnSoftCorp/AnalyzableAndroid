public class android.hardware.location.ActivityRecognitionHardware extends android.hardware.location.IActivityRecognitionHardware$Stub
{
    private static final java.lang.String TAG;
    private static final java.lang.String HARDWARE_PERMISSION;
    private static final int INVALID_ACTIVITY_TYPE;
    private static final int NATIVE_SUCCESS_RESULT;
    private static android.hardware.location.ActivityRecognitionHardware sSingletonInstance;
    private static final java.lang.Object sSingletonInstanceLock;
    private final android.content.Context mContext;
    private final java.lang.String[] mSupportedActivities;
    private final android.os.RemoteCallbackList mSinks;

    private void <init>(android.content.Context)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        android.content.Context r1;
        android.os.RemoteCallbackList $r2;
        java.lang.String[] $r3;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.location.IActivityRecognitionHardware$Stub: void <init>()>();

        $r2 = new android.os.RemoteCallbackList;

        specialinvoke $r2.<android.os.RemoteCallbackList: void <init>()>();

        r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks> = $r2;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void nativeInitialize()>();

        r0.<android.hardware.location.ActivityRecognitionHardware: android.content.Context mContext> = r1;

        $r3 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] fetchSupportedActivities()>();

        r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities> = $r3;

        return;
    }

    public static android.hardware.location.ActivityRecognitionHardware getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        android.hardware.location.ActivityRecognitionHardware $r4, $r5, $r6;

        r0 := @parameter0: android.content.Context;

        $r3 = <android.hardware.location.ActivityRecognitionHardware: java.lang.Object sSingletonInstanceLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware sSingletonInstance>;

        if $r4 != null goto label2;

        $r6 = new android.hardware.location.ActivityRecognitionHardware;

        specialinvoke $r6.<android.hardware.location.ActivityRecognitionHardware: void <init>(android.content.Context)>(r0);

        <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware sSingletonInstance> = $r6;

     label2:
        $r5 = <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware sSingletonInstance>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean isSupported()
    {
        boolean $z0;

        $z0 = staticinvoke <android.hardware.location.ActivityRecognitionHardware: boolean nativeIsSupported()>();

        return $z0;
    }

    public java.lang.String[] getSupportedActivities()
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String[] $r1;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        $r1 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        return $r1;
    }

    public boolean isActivitySupported(java.lang.String)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        i0 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int getActivityType(java.lang.String)>(r1);

        if i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        android.hardware.location.IActivityRecognitionHardwareSink r1;
        android.os.RemoteCallbackList $r2;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: android.hardware.location.IActivityRecognitionHardwareSink;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        $r2 = r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks>;

        $z0 = virtualinvoke $r2.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return $z0;
    }

    public boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        android.hardware.location.IActivityRecognitionHardwareSink r1;
        android.os.RemoteCallbackList $r2;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: android.hardware.location.IActivityRecognitionHardwareSink;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        $r2 = r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks>;

        $z0 = virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return $z0;
    }

    public boolean enableActivityEvent(java.lang.String, int, long)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String r1;
        int i0, i2, i3;
        long l1;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        i2 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int getActivityType(java.lang.String)>(r1);

        if i2 != -1 goto label1;

        return 0;

     label1:
        i3 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int nativeEnableActivityEvent(int,int,long)>(i2, i0, l1);

        if i3 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean disableActivityEvent(java.lang.String, int)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        i1 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int getActivityType(java.lang.String)>(r1);

        if i1 != -1 goto label1;

        return 0;

     label1:
        i2 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int nativeDisableActivityEvent(int,int)>(i1, i0);

        if i2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean flush()
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        int i0;
        boolean $z0;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: void checkPermissions()>();

        i0 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: int nativeFlush()>();

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void onActivityChanged(android.hardware.location.ActivityRecognitionHardware$Event[])
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        android.hardware.location.ActivityRecognitionHardware$Event[] r1;
        int i0, i1, $i3, $i4, $i5, i8, i9;
        android.hardware.location.ActivityRecognitionEvent[] r2;
        android.hardware.location.ActivityRecognitionHardware$Event r3;
        java.lang.String r4;
        android.hardware.location.IActivityRecognitionHardwareSink r5;
        android.os.RemoteException r6, $r13;
        android.hardware.location.ActivityChangedEvent $r7, r14;
        android.os.RemoteCallbackList $r8, $r9, $r10;
        android.os.IInterface $r11;
        android.hardware.location.ActivityRecognitionEvent $r12;
        long $l6;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: android.hardware.location.ActivityRecognitionHardware$Event[];

        if r1 == null goto label01;

        $i3 = lengthof r1;

        if $i3 != 0 goto label02;

     label01:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ActivityRecognitionHardware", "No events to broadcast for onActivityChanged.");

        return;

     label02:
        i0 = lengthof r1;

        r2 = newarray (android.hardware.location.ActivityRecognitionEvent)[i0];

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        r3 = r1[i1];

        $i4 = r3.<android.hardware.location.ActivityRecognitionHardware$Event: int activity>;

        r4 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String getActivityName(int)>($i4);

        $r12 = new android.hardware.location.ActivityRecognitionEvent;

        $i5 = r3.<android.hardware.location.ActivityRecognitionHardware$Event: int type>;

        $l6 = r3.<android.hardware.location.ActivityRecognitionHardware$Event: long timestamp>;

        specialinvoke $r12.<android.hardware.location.ActivityRecognitionEvent: void <init>(java.lang.String,int,long)>(r4, $i5, $l6);

        r2[i1] = $r12;

        i1 = i1 + 1;

        goto label03;

     label04:
        $r7 = new android.hardware.location.ActivityChangedEvent;

        specialinvoke $r7.<android.hardware.location.ActivityChangedEvent: void <init>(android.hardware.location.ActivityRecognitionEvent[])>(r2);

        r14 = $r7;

        $r8 = r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks>;

        i8 = virtualinvoke $r8.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i9 = 0;

     label05:
        if i9 >= i8 goto label10;

        $r10 = r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks>;

        $r11 = virtualinvoke $r10.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i9);

        r5 = (android.hardware.location.IActivityRecognitionHardwareSink) $r11;

     label06:
        interfaceinvoke r5.<android.hardware.location.IActivityRecognitionHardwareSink: void onActivityChanged(android.hardware.location.ActivityChangedEvent)>(r14);

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        r6 = $r13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityRecognitionHardware", "Error delivering activity changed event.", r6);

     label09:
        i9 = i9 + 1;

        goto label05;

     label10:
        $r9 = r0.<android.hardware.location.ActivityRecognitionHardware: android.os.RemoteCallbackList mSinks>;

        virtualinvoke $r9.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch android.os.RemoteException from label06 to label07 with label08;
    }

    private java.lang.String getActivityName(int)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        int i0, $i1, $i3;
        java.lang.String r1, $r8;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r5;
        java.lang.String[] $r4, $r6, $r7;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        $i3 = lengthof $r6;

        if i0 < $i3 goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        $i1 = lengthof $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r5;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid ActivityType: %d, SupportedActivities: %d", $r2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ActivityRecognitionHardware", r1);

        return null;

     label2:
        $r7 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        $r8 = $r7[i0];

        return $r8;
    }

    private int getActivityType(java.lang.String)
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String r1, $r4;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.String[] $r2, $r3;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $r2 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r3 = r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] mSupportedActivities>;

        $r4 = $r3[i1];

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return -1;
    }

    private void checkPermissions()
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.content.Context $r3;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "android.permission.LOCATION_HARDWARE";

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission \'%s\' not granted to access ActivityRecognitionHardware", $r2);

        $r3 = r0.<android.hardware.location.ActivityRecognitionHardware: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.LOCATION_HARDWARE", r1);

        return;
    }

    private java.lang.String[] fetchSupportedActivities()
    {
        android.hardware.location.ActivityRecognitionHardware r0;
        java.lang.String[] r1, $r2;

        r0 := @this: android.hardware.location.ActivityRecognitionHardware;

        r1 = specialinvoke r0.<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] nativeGetSupportedActivities()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = newarray (java.lang.String)[0];

        return $r2;
    }

    private static native void nativeClassInit();

    private static native boolean nativeIsSupported();

    private native void nativeInitialize();

    private native void nativeRelease();

    private native java.lang.String[] nativeGetSupportedActivities();

    private native int nativeEnableActivityEvent(int, int, long);

    private native int nativeDisableActivityEvent(int, int);

    private native int nativeFlush();

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.hardware.location.ActivityRecognitionHardware: int NATIVE_SUCCESS_RESULT> = 0;

        <android.hardware.location.ActivityRecognitionHardware: int INVALID_ACTIVITY_TYPE> = -1;

        <android.hardware.location.ActivityRecognitionHardware: java.lang.String HARDWARE_PERMISSION> = "android.permission.LOCATION_HARDWARE";

        <android.hardware.location.ActivityRecognitionHardware: java.lang.String TAG> = "ActivityRecognitionHardware";

        <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware sSingletonInstance> = null;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.hardware.location.ActivityRecognitionHardware: java.lang.Object sSingletonInstanceLock> = $r0;

        staticinvoke <android.hardware.location.ActivityRecognitionHardware: void nativeClassInit()>();

        return;
    }
}
