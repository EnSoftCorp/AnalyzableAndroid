public class android.hardware.camera2.legacy.LegacyMetadataMapper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean VERBOSE;
    private static final long NS_PER_MS;
    public static final int HAL_PIXEL_FORMAT_RGBA_8888;
    public static final int HAL_PIXEL_FORMAT_BGRA_8888;
    public static final int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
    public static final int HAL_PIXEL_FORMAT_BLOB;
    private static final float LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC;
    private static final int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL;
    private static final int REQUEST_MAX_NUM_INPUT_STREAMS_COUNT;
    private static final int REQUEST_PIPELINE_MAX_DEPTH_HAL1;
    private static final int REQUEST_PIPELINE_MAX_DEPTH_OURS;
    private static final long APPROXIMATE_CAPTURE_DELAY_MS;
    private static final long APPROXIMATE_SENSOR_AREA_PX;
    private static final long APPROXIMATE_JPEG_ENCODE_TIME_MS;
    static final int UNKNOWN_MODE;
    private static final float PREVIEW_ASPECT_RATIO_TOLERANCE;
    static final boolean LIE_ABOUT_AE_STATE;
    static final boolean LIE_ABOUT_AE_MAX_REGIONS;
    static final boolean LIE_ABOUT_AF;
    static final boolean LIE_ABOUT_AF_MAX_REGIONS;
    static final boolean LIE_ABOUT_AWB_STATE;
    static final boolean LIE_ABOUT_AWB;
    private static final java.lang.String[] sLegacySceneModes;
    private static final int[] sSceneModes;
    private static final java.lang.String[] sLegacyEffectMode;
    private static final int[] sEffectModes;
    private static final int[] sAllowedTemplates;

    public void <init>()
    {
        android.hardware.camera2.legacy.LegacyMetadataMapper r0;

        r0 := @this: android.hardware.camera2.legacy.LegacyMetadataMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.hardware.camera2.CameraCharacteristics createCharacteristics(android.hardware.Camera$Parameters, android.hardware.Camera$CameraInfo)
    {
        android.hardware.Camera$Parameters r0;
        android.hardware.Camera$CameraInfo r1;
        java.lang.String r2;
        android.hardware.CameraInfo r3, $r6;
        android.hardware.camera2.CameraCharacteristics $r7;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.hardware.Camera$CameraInfo;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "parameters must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "info must not be null");

        r2 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.lang.String flatten()>();

        $r6 = new android.hardware.CameraInfo;

        specialinvoke $r6.<android.hardware.CameraInfo: void <init>()>();

        r3 = $r6;

        r3.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info> = r1;

        $r7 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String,android.hardware.CameraInfo)>(r2, r3);

        return $r7;
    }

    public static android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String, android.hardware.CameraInfo)
    {
        java.lang.String r0;
        android.hardware.CameraInfo r1;
        android.hardware.camera2.impl.CameraMetadataNative r2, $r8;
        android.hardware.Camera$Parameters r3;
        android.hardware.Camera$CameraInfo $r6, $r9;
        boolean $z0;
        android.hardware.camera2.CameraCharacteristics $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.hardware.CameraInfo;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "parameters must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "info must not be null");

        $r6 = r1.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "info.info must not be null");

        $r8 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r2 = $r8;

        $r9 = r1.<android.hardware.CameraInfo: android.hardware.Camera$CameraInfo info>;

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapCharacteristicsFromInfo(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$CameraInfo)>(r2, $r9);

        r3 = staticinvoke <android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()>();

        virtualinvoke r3.<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>(r0);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapCharacteristicsFromParameters(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r2, r3);

        $z0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "createCharacteristics metadata:");

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "--------------------------------------------------- (start)");

        virtualinvoke r2.<android.hardware.camera2.impl.CameraMetadataNative: void dumpToLog()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "--------------------------------------------------- (end)");

     label1:
        $r10 = new android.hardware.camera2.CameraCharacteristics;

        specialinvoke $r10.<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r2);

        return $r10;
    }

    private static void mapCharacteristicsFromInfo(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$CameraInfo)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$CameraInfo r1;
        int $i0, $i1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4;
        java.lang.Integer $r3, $r5;
        byte $b2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$CameraInfo;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $i0 = r1.<android.hardware.Camera$CameraInfo: int facing>;

        if $i0 != 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, $r3);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $i1 = r1.<android.hardware.Camera$CameraInfo: int orientation>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, $r5);

        return;
    }

    private static void mapCharacteristicsFromParameters(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int[] $r2, $r4;
        android.hardware.camera2.CameraCharacteristics$Key $r3, $r5, $r6;
        java.lang.Integer $r7;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES>;

        $r2 = newarray (int)[1];

        $r2[0] = 1;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, $r2);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAe(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAf(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAwb(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlOther(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapLens(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapFlash(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapJpeg(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES>;

        $r4 = newarray (int)[1];

        $r4[0] = 1;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, $r4);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapScaler(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapSensor(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapStatistics(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapSync(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, $r7);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void mapRequest(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>(r0, r1);

        return;
    }

    private static void mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.ArrayList r2, $r8;
        java.util.List r3, r4, $r10, $r12;
        android.hardware.camera2.legacy.SizeAreaComparator r5, $r9;
        android.hardware.Camera$Size r6, r7, r47;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int i0, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i11, $i14, $i15, $i16, $i18, $i19, i21, i22;
        long l1, l23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Comparator $r11;
        java.lang.Object[] $r13, $r25, $r35, $r36;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r14, r45;
        android.hardware.camera2.params.StreamConfiguration[] $r15;
        android.hardware.camera2.CameraCharacteristics$Key $r16, $r17, $r20, $r21;
        java.lang.Long $r18;
        java.lang.Object $r19, $r24, $r30;
        android.hardware.camera2.params.StreamConfigurationDuration $r22;
        java.lang.Integer $r23, $r27, $r34, $r37, $r41, $r42;
        byte $b7, $b13;
        java.lang.String $r26, $r32, $r38, $r43;
        java.lang.StringBuilder $r28, $r29, $r31;
        java.lang.Float $r39, $r40;
        java.util.Iterator r44, r46;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        r3 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        $r9 = new android.hardware.camera2.legacy.SizeAreaComparator;

        specialinvoke $r9.<android.hardware.camera2.legacy.SizeAreaComparator: void <init>()>();

        r5 = $r9;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, r5);

        r6 = staticinvoke <android.hardware.camera2.legacy.SizeAreaComparator: android.hardware.Camera$Size findLargestByArea(java.util.List)>(r4);

        $i2 = r6.<android.hardware.Camera$Size: int width>;

        $f2 = (float) $i2;

        $f4 = $f2 * 1.0F;

        $i3 = r6.<android.hardware.Camera$Size: int height>;

        $f3 = (float) $i3;

        f0 = $f4 / $f3;

        $z0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z0 == 0 goto label01;

        $r36 = newarray (java.lang.Object)[3];

        $i18 = r6.<android.hardware.Camera$Size: int width>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r36[0] = $r42;

        $i19 = r6.<android.hardware.Camera$Size: int height>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19);

        $r36[1] = $r41;

        $r40 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r36[2] = $r40;

        $r43 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("mapScalerStreamConfigs - largest JPEG area %dx%d, AR=%f", $r36);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r43);

     label01:
        $z2 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $i10 = interfaceinvoke r3.<java.util.List: int size()>();

        i0 = $i10 - 1;

        $r30 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        r7 = (android.hardware.Camera$Size) $r30;

        $i11 = r7.<android.hardware.Camera$Size: int width>;

        $f5 = (float) $i11;

        $f8 = $f5 * 1.0F;

        $i14 = r7.<android.hardware.Camera$Size: int height>;

        $f7 = (float) $i14;

        f1 = $f8 / $f7;

        $f9 = f0 - f1;

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f9);

        $b13 = $f6 cmpl 0.01F;

        if $b13 < 0 goto label03;

        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i0);

        $z6 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z6 == 0 goto label02;

        $r35 = newarray (java.lang.Object)[3];

        $i16 = r7.<android.hardware.Camera$Size: int width>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r35[0] = $r34;

        $i15 = r7.<android.hardware.Camera$Size: int height>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r35[1] = $r37;

        $r39 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r35[2] = $r39;

        $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("mapScalerStreamConfigs - removed preview size %dx%d, AR=%f was not the same", $r35);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r38);

     label02:
        goto label01;

     label03:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapScalerStreamConfigs - failed to find any preview size matching JPEG aspect ratio ");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r32);

        r3 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

     label04:
        $r11 = staticinvoke <java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>(r5);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r3, $r11);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>(r2, 34, r3);

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>(r2, 35, r3);

        $r10 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>();

        r44 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r24 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.Integer) $r24;

        i21 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $z5 = staticinvoke <android.graphics.ImageFormat: boolean isPublicFormat(int)>(i21);

        if $z5 == 0 goto label06;

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>(r2, i21, r3);

        goto label07;

     label06:
        $r25 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i21);

        $r25[0] = $r27;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("mapStreamConfigs - Skipping non-public format %x", $r25);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r26);

     label07:
        goto label05;

     label08:
        $r12 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: void appendStreamConfig(java.util.ArrayList,int,java.util.List)>(r2, 33, $r12);

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STREAM_CONFIGURATIONS>;

        $r15 = newarray (android.hardware.camera2.params.StreamConfiguration)[0];

        $r13 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r16, $r13);

        $r17 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MIN_FRAME_DURATIONS>;

        $r14 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[0];

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r17, $r14);

        $i4 = interfaceinvoke r4.<java.util.List: int size()>();

        r45 = newarray (android.hardware.camera2.params.StreamConfigurationDuration)[$i4];

        i22 = 0;

        l23 = -1L;

        r46 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r19 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (android.hardware.Camera$Size) $r19;

        l1 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: long calculateJpegStallDuration(android.hardware.Camera$Size)>(r47);

        $i6 = i22;

        i22 = i22 + 1;

        $r22 = new android.hardware.camera2.params.StreamConfigurationDuration;

        $i8 = r47.<android.hardware.Camera$Size: int width>;

        $i5 = r47.<android.hardware.Camera$Size: int height>;

        specialinvoke $r22.<android.hardware.camera2.params.StreamConfigurationDuration: void <init>(int,int,int,long)>(33, $i8, $i5, l1);

        r45[$i6] = $r22;

        $b7 = l23 cmp l1;

        if $b7 >= 0 goto label10;

        l23 = l1;

     label10:
        goto label09;

     label11:
        $r20 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STALL_DURATIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r20, r45);

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_MAX_FRAME_DURATION>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l23);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r21, $r18);

        return;
    }

    private static void mapControlAe(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.List r2, r36, r39;
        int[] r3, r6, $r7, $r10, $r12, $r27, r41, r42;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13;
        java.util.Iterator r4, r38;
        java.lang.String r5, $r34, $r35;
        android.hardware.camera2.CameraCharacteristics$Key $r8, $r9, $r13, $r14, $r19, $r26;
        boolean $z0, $z1;
        java.lang.String[] $r11, r40;
        java.lang.Integer $r15, $r16, $r21, $r23;
        android.util.Range $r17, $r22;
        android.util.Rational $r18;
        java.lang.Object $r20, $r29;
        java.lang.AssertionError $r24, $r25;
        java.lang.StringBuilder $r28, $r30, $r31, $r32;
        android.util.Range[] r37;
        float f0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>();

        if r2 == null goto label07;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i6 <= 0 goto label07;

        $i7 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (int)[$i7];

        i0 = 0;

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r29 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r29;

        i1 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingMode(java.lang.String)>(r5);

        if i1 != -1 goto label04;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Antibanding mode ");

        if r5 != null goto label02;

        $r34 = "NULL";

        goto label03;

     label02:
        $r34 = r5;

     label03:
        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported, skipping...");

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r35);

        goto label05;

     label04:
        $i8 = i0;

        i0 = i0 + 1;

        r3[$i8] = i1;

     label05:
        goto label01;

     label06:
        $r26 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r27 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r3, i0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r26, $r27);

        goto label08;

     label07:
        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r7 = newarray (int)[0];

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r8, $r7);

     label08:
        r36 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        if r36 != null goto label09;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("Supported FPS ranges cannot be null.");

        throw $r25;

     label09:
        i10 = interfaceinvoke r36.<java.util.List: int size()>();

        if i10 > 0 goto label10;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>("At least one FPS range must be supported.");

        throw $r24;

     label10:
        r37 = newarray (android.util.Range)[i10];

        i11 = 0;

        r38 = interfaceinvoke r36.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r20 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r6 = (int[]) $r20;

        $i2 = i11;

        i11 = i11 + 1;

        $i3 = r6[0];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i5 = r6[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r22 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r23, $r21);

        r37[$i2] = $r22;

        goto label11;

     label12:
        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r9, r37);

        r39 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        $r11 = newarray (java.lang.String)[5];

        $r11[0] = "off";

        $r11[1] = "auto";

        $r11[2] = "on";

        $r11[3] = "red-eye";

        $r11[4] = "torch";

        r40 = $r11;

        $r10 = newarray (int)[4];

        $r10[0] = 1;

        $r10[1] = 2;

        $r10[2] = 3;

        $r10[3] = 4;

        r41 = $r10;

        r42 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] convertStringListToIntArray(java.util.List,java.lang.String[],int[])>(r39, r40, r41);

        if r42 == null goto label13;

        $i4 = lengthof r42;

        if $i4 != 0 goto label14;

     label13:
        $r12 = newarray (int)[1];

        $r12[0] = 1;

        r42 = $r12;

     label14:
        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r13, r42);

        i12 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMinExposureCompensation()>();

        i13 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>();

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r17 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r16, $r15);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r14, $r17);

        f0 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getExposureCompensationStep()>();

        $r19 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP>;

        $r18 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.util.Rational createRational(float)>(f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r19, $r18);

        return;
    }

    private static void mapControlAf(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.List r2, r5;
        java.lang.String[] r3, $r6;
        int[] r4, $r7, $r11;
        java.util.ArrayList $r8;
        java.lang.Integer $r9;
        android.hardware.camera2.CameraCharacteristics$Key $r10;
        java.lang.StringBuilder $r12, $r13, $r14;
        boolean $z1;
        java.lang.String $r15, $r16;
        int $i2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>();

        $r6 = newarray (java.lang.String)[7];

        $r6[0] = "auto";

        $r6[1] = "continuous-picture";

        $r6[2] = "continuous-video";

        $r6[3] = "edof";

        $r6[4] = "infinity";

        $r6[5] = "macro";

        $r6[6] = "fixed";

        r3 = $r6;

        $r7 = newarray (int)[7];

        $r7[0] = 1;

        $r7[1] = 4;

        $r7[2] = 3;

        $r7[3] = 5;

        $r7[4] = 0;

        $r7[5] = 2;

        $r7[6] = 0;

        r4 = $r7;

        r5 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>(r2, r3, r4);

        if r5 == null goto label1;

        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i2 != 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No AF modes supported (HAL bug); defaulting to AF_MODE_OFF only");

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        r5 = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r11 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r5);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r11);

        $z1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapControlAf - control.afAvailableModes set to ");

        $r15 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r16);

     label3:
        return;
    }

    private static void mapControlAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.List r2, r5;
        java.lang.String[] r3, $r6;
        int[] r4, $r7, $r11;
        java.util.ArrayList $r8;
        java.lang.Integer $r9;
        android.hardware.camera2.CameraCharacteristics$Key $r10;
        java.lang.StringBuilder $r12, $r13, $r14;
        boolean $z1;
        java.lang.String $r15, $r16;
        int $i2;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>();

        $r6 = newarray (java.lang.String)[8];

        $r6[0] = "auto";

        $r6[1] = "incandescent";

        $r6[2] = "fluorescent";

        $r6[3] = "warm-fluorescent";

        $r6[4] = "daylight";

        $r6[5] = "cloudy-daylight";

        $r6[6] = "twilight";

        $r6[7] = "shade";

        r3 = $r6;

        $r7 = newarray (int)[8];

        $r7[0] = 1;

        $r7[1] = 2;

        $r7[2] = 3;

        $r7[3] = 4;

        $r7[4] = 5;

        $r7[5] = 6;

        $r7[6] = 7;

        $r7[7] = 8;

        r4 = $r7;

        r5 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>(r2, r3, r4);

        if r5 == null goto label1;

        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i2 != 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No AWB modes supported (HAL bug); defaulting to AWB_MODE_AUTO only");

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        r5 = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>;

        $r11 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r5);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r11);

        $z1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapControlAwb - control.awbAvailableModes set to ");

        $r15 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r16);

     label3:
        return;
    }

    private static void mapControlOther(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int[] r2, r3, r5, $r8, $r11, $r12, $r16, $r17;
        java.util.List r4, r6, r7;
        boolean $z1;
        android.hardware.camera2.CameraCharacteristics$Key $r9, $r10, $r14, $r18;
        int $i1, $i2, $i3;
        java.lang.String[] $r13, $r15;
        java.lang.Integer $r19, $r21;
        java.util.ArrayList $r20;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $z1 = virtualinvoke r1.<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>();

        if $z1 == 0 goto label1;

        $r8 = newarray (int)[2];

        $r8[0] = 0;

        $r8[1] = 1;

        goto label2;

     label1:
        $r8 = newarray (int)[1];

        $r8[0] = 0;

     label2:
        r2 = $r8;

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r9, r2);

        r3 = newarray (int)[3];

        $i1 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        r3[0] = $i1;

        r3[1] = 0;

        $i2 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        r3[2] = $i2;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, r3);

        r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>();

        if r4 != null goto label3;

        $r12 = newarray (int)[0];

        goto label4;

     label3:
        $r13 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        $r11 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        $r12 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] convertStringListToIntArray(java.util.List,java.lang.String[],int[])>(r4, $r13, $r11);

     label4:
        r5 = $r12;

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r14, r5);

        r6 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>();

        $r15 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        $r16 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        r7 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>(r6, $r15, $r16);

        if r7 != null goto label5;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r7 = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r21);

     label5:
        $i3 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        if $i3 <= 0 goto label6;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r19);

     label6:
        $r18 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>;

        $r17 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>(r7);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r18, $r17);

        return;
    }

    private static void mapLens(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        float[] r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4, $r12, $r13;
        float $f0;
        android.hardware.camera2.CameraCharacteristics$Key $r6, $r7;
        java.lang.Float $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r14;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $z0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapLens - focus-mode=\'");

        $r12 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r13);

     label1:
        $r3 = "fixed";

        $r4 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, $r8);

        $z3 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z3 == 0 goto label3;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "mapLens - lens.info.minimumFocusDistance = 0");

        goto label3;

     label2:
        $z2 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z2 == 0 goto label3;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "mapLens - lens.info.minimumFocusDistance is unknown");

     label3:
        $r5 = newarray (float)[1];

        $f0 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $r5[0] = $f0;

        r2 = $r5;

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, r2);

        return;
    }

    private static void mapFlash(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        boolean z0, $z1, $z2;
        java.util.List r2;
        android.hardware.camera2.CameraCharacteristics$Key $r3;
        java.lang.Boolean $r4;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        z0 = 0;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>();

        if r2 == null goto label3;

        $z1 = staticinvoke <android.hardware.camera2.utils.ListUtils: boolean listElementsEqualTo(java.util.List,java.lang.Object)>(r2, "off");

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

     label3:
        $r3 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r3, $r4);

        return;
    }

    private static void mapJpeg(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        java.util.List r2;
        android.util.Size[] r3;
        android.hardware.camera2.utils.SizeAreaComparator $r4;
        android.hardware.camera2.CameraCharacteristics$Key $r5;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = virtualinvoke r1.<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>();

        if r2 == null goto label1;

        r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size[] convertSizeListToArray(java.util.List)>(r2);

        $r4 = new android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke $r4.<android.hardware.camera2.utils.SizeAreaComparator: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r3, $r4);

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, r3);

     label1:
        return;
    }

    private static void mapRequest(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int[] r2, $r6, $r49, $r83, $r109, $r110, r131;
        android.hardware.camera2.CameraCharacteristics$Key[] r3, $r8, $r44, $r50;
        java.util.ArrayList r4, $r40, $r75, $r102, r127, r129;
        android.hardware.camera2.CaptureRequest$Key[] r5, $r48, r126;
        android.hardware.camera2.CameraCharacteristics$Key $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r42, $r43, $r45, $r46, $r80, $r111, $r116, $r118, $r120, $r121, $r125;
        java.util.List $r41, $r84, $r113;
        java.lang.Object $r47;
        java.lang.Object[] $r51;
        android.hardware.camera2.CaptureRequest$Key $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r76, $r77, $r78, $r79, $r123, $r124;
        android.hardware.camera2.CaptureResult$Key[] $r82, r128, r130;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.camera2.CaptureResult$Key $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r103, $r104, $r105, $r106, $r107, $r108, $r114, $r122;
        java.lang.Byte $r115;
        java.lang.Integer $r117, $r119;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        r2 = $r6;

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, r2);

        $r8 = newarray (android.hardware.camera2.CameraCharacteristics$Key)[33];

        $r9 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES>;

        $r8[0] = $r9;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>;

        $r8[1] = $r10;

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>;

        $r8[2] = $r11;

        $r12 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        $r8[3] = $r12;

        $r13 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>;

        $r8[4] = $r13;

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP>;

        $r8[5] = $r14;

        $r15 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r8[6] = $r15;

        $r17 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS>;

        $r8[7] = $r17;

        $r16 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>;

        $r8[8] = $r16;

        $r19 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES>;

        $r8[9] = $r19;

        $r18 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>;

        $r8[10] = $r18;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS>;

        $r8[11] = $r21;

        $r20 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>;

        $r8[12] = $r20;

        $r23 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r8[13] = $r23;

        $r22 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        $r8[14] = $r22;

        $r25 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r8[15] = $r25;

        $r24 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        $r8[16] = $r24;

        $r27 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES>;

        $r8[17] = $r27;

        $r26 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>;

        $r8[18] = $r26;

        $r29 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_STREAMS>;

        $r8[19] = $r29;

        $r28 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r8[20] = $r28;

        $r31 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r8[21] = $r31;

        $r30 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r8[22] = $r30;

        $r34 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE>;

        $r8[23] = $r34;

        $r35 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES>;

        $r8[24] = $r35;

        $r32 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r8[25] = $r32;

        $r33 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE>;

        $r8[26] = $r33;

        $r38 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>;

        $r8[27] = $r38;

        $r39 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE>;

        $r8[28] = $r39;

        $r36 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r8[29] = $r36;

        $r37 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        $r8[30] = $r37;

        $r42 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT>;

        $r8[31] = $r42;

        $r43 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY>;

        $r8[32] = $r43;

        r3 = $r8;

        $r40 = new java.util.ArrayList;

        $r41 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        specialinvoke $r40.<java.util.ArrayList: void <init>(java.util.Collection)>($r41);

        r4 = $r40;

        $r46 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r47 = virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r46);

        if $r47 == null goto label1;

        $r125 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r125);

     label1:
        $r45 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CHARACTERISTICS_KEYS>;

        $r44 = newarray (android.hardware.camera2.CameraCharacteristics$Key)[0];

        $r51 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r44);

        $r50 = (android.hardware.camera2.CameraCharacteristics$Key[]) $r51;

        $r49 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CameraCharacteristics$Key[])>($r50);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r45, $r49);

        $r48 = newarray (android.hardware.camera2.CaptureRequest$Key)[27];

        $r55 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r48[0] = $r55;

        $r54 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r48[1] = $r54;

        $r53 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r48[2] = $r53;

        $r52 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r48[3] = $r52;

        $r59 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r48[4] = $r59;

        $r58 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        $r48[5] = $r58;

        $r57 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r48[6] = $r57;

        $r56 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r48[7] = $r56;

        $r63 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r48[8] = $r63;

        $r62 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r48[9] = $r62;

        $r61 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r48[10] = $r61;

        $r60 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE>;

        $r48[11] = $r60;

        $r68 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r48[12] = $r68;

        $r69 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r48[13] = $r69;

        $r70 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE>;

        $r48[14] = $r70;

        $r71 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r48[15] = $r71;

        $r64 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_COORDINATES>;

        $r48[16] = $r64;

        $r65 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_PROCESSING_METHOD>;

        $r48[17] = $r65;

        $r66 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_TIMESTAMP>;

        $r48[18] = $r66;

        $r67 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $r48[19] = $r67;

        $r76 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>;

        $r48[20] = $r76;

        $r77 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY>;

        $r48[21] = $r77;

        $r78 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $r48[22] = $r78;

        $r79 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH>;

        $r48[23] = $r79;

        $r72 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r48[24] = $r72;

        $r73 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r48[25] = $r73;

        $r74 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r48[26] = $r74;

        r126 = $r48;

        $r75 = new java.util.ArrayList;

        $r84 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r126);

        specialinvoke $r75.<java.util.ArrayList: void <init>(java.util.Collection)>($r84);

        r127 = $r75;

        $i0 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i0 <= 0 goto label2;

        $r124 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        virtualinvoke r127.<java.util.ArrayList: boolean add(java.lang.Object)>($r124);

     label2:
        $i2 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i2 <= 0 goto label3;

        $r123 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        virtualinvoke r127.<java.util.ArrayList: boolean add(java.lang.Object)>($r123);

     label3:
        $i1 = virtualinvoke r127.<java.util.ArrayList: int size()>();

        r5 = newarray (android.hardware.camera2.CaptureRequest$Key)[$i1];

        virtualinvoke r127.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        $r80 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_REQUEST_KEYS>;

        $r83 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureRequest$Key[])>(r5);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r80, $r83);

        $r82 = newarray (android.hardware.camera2.CaptureResult$Key)[23];

        $r90 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE>;

        $r82[0] = $r90;

        $r89 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r82[1] = $r89;

        $r92 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r82[2] = $r92;

        $r91 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK>;

        $r82[3] = $r91;

        $r86 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>;

        $r82[4] = $r86;

        $r85 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r82[5] = $r85;

        $r88 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r82[6] = $r88;

        $r87 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>;

        $r82[7] = $r87;

        $r99 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK>;

        $r82[8] = $r99;

        $r100 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>;

        $r82[9] = $r100;

        $r97 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_MODE>;

        $r82[10] = $r97;

        $r98 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_COORDINATES>;

        $r82[11] = $r98;

        $r95 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_PROCESSING_METHOD>;

        $r82[12] = $r95;

        $r96 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_TIMESTAMP>;

        $r82[13] = $r96;

        $r93 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION>;

        $r82[14] = $r93;

        $r94 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_QUALITY>;

        $r82[15] = $r94;

        $r107 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY>;

        $r82[16] = $r107;

        $r108 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH>;

        $r82[17] = $r108;

        $r105 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE>;

        $r82[18] = $r105;

        $r106 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH>;

        $r82[19] = $r106;

        $r103 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION>;

        $r82[20] = $r103;

        $r104 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r82[21] = $r104;

        $r101 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>;

        $r82[22] = $r101;

        r128 = $r82;

        $r102 = new java.util.ArrayList;

        $r113 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r128);

        specialinvoke $r102.<java.util.ArrayList: void <init>(java.util.Collection)>($r113);

        r129 = $r102;

        $i5 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>();

        if $i5 <= 0 goto label4;

        $r122 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS>;

        interfaceinvoke r129.<java.util.List: boolean add(java.lang.Object)>($r122);

     label4:
        $i4 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>();

        if $i4 <= 0 goto label5;

        $r114 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS>;

        interfaceinvoke r129.<java.util.List: boolean add(java.lang.Object)>($r114);

     label5:
        $i3 = interfaceinvoke r129.<java.util.List: int size()>();

        r130 = newarray (android.hardware.camera2.CaptureResult$Key)[$i3];

        interfaceinvoke r129.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r130);

        $r111 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_RESULT_KEYS>;

        $r110 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureResult$Key[])>(r130);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r111, $r110);

        $r109 = newarray (int)[3];

        $r109[0] = 0;

        $r109[1] = 3;

        $r109[2] = 1;

        r131 = $r109;

        $r121 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_STREAMS>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r121, r131);

        $r120 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_INPUT_STREAMS>;

        $r119 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r120, $r119);

        $r118 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>;

        $r117 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r118, $r117);

        $r116 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>;

        $r115 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(6);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r116, $r115);

        return;
    }

    private static void mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2, $r4;
        float $f0;
        java.lang.Float $r3;
        java.lang.Integer $r5;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $f0 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: float getMaxZoomRatio(android.hardware.Camera$Parameters)>(r1);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, $r3);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, $r5);

        return;
    }

    private static void mapSensor(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.util.Size r2;
        android.graphics.Rect r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        float f0, f1, $f2, $f3, $f4, $f5, f6;
        android.hardware.camera2.CameraCharacteristics$Key $r4, $r6, $r7, $r10, $r11;
        int[] $r5;
        android.util.SizeF $r8;
        java.lang.Integer $r9;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r2 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)>(r1);

        r3 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.util.Size)>(r2);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, r3);

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES>;

        $r5 = newarray (int)[1];

        $r5[0] = 0;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r6, $r5);

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r7, r2);

        f6 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getFocalLength()>();

        $f2 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>();

        $d3 = (double) $f2;

        $d2 = $d3 * 3.141592653589793;

        d0 = $d2 / 180.0;

        $f3 = virtualinvoke r1.<android.hardware.Camera$Parameters: float getVerticalViewAngle()>();

        $d4 = (double) $f3;

        $d5 = $d4 * 3.141592653589793;

        d1 = $d5 / 180.0;

        $f4 = 2.0F * f6;

        $d6 = (double) $f4;

        $d7 = d1 / 2.0;

        $d9 = staticinvoke <java.lang.Math: double tan(double)>($d7);

        $d8 = $d6 * $d9;

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        f0 = (float) $d10;

        $f5 = 2.0F * f6;

        $d11 = (double) $f5;

        $d12 = d0 / 2.0;

        $d14 = staticinvoke <java.lang.Math: double tan(double)>($d12);

        $d15 = $d11 * $d14;

        $d13 = staticinvoke <java.lang.Math: double abs(double)>($d15);

        f1 = (float) $d13;

        $r10 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE>;

        $r8 = new android.util.SizeF;

        specialinvoke $r8.<android.util.SizeF: void <init>(float,float)>(f1, f0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r10, $r8);

        $r11 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r11, $r9);

        return;
    }

    private static void mapStatistics(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        int[] r2, $r3, $r7;
        int $i0, $i1;
        android.hardware.camera2.CameraCharacteristics$Key $r4, $r5;
        java.lang.Integer $r6;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $i0 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        if $i0 <= 0 goto label1;

        $r7 = newarray (int)[2];

        $r7[0] = 0;

        $r7[1] = 1;

        r2 = $r7;

        goto label2;

     label1:
        $r3 = newarray (int)[1];

        $r3[0] = 0;

        r2 = $r3;

     label2:
        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r4, r2);

        $r5 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT>;

        $i1 = virtualinvoke r1.<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r5, $r6);

        return;
    }

    private static void mapSync(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.impl.CameraMetadataNative r0;
        android.hardware.Camera$Parameters r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke r0.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CameraCharacteristics$Key,java.lang.Object)>($r2, $r3);

        return;
    }

    private static void appendStreamConfig(java.util.ArrayList, int, java.util.List)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2;
        java.util.List r1;
        java.util.Iterator r2;
        android.hardware.Camera$Size r3;
        android.hardware.camera2.params.StreamConfiguration r4, $r6;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.Camera$Size) $r5;

        $r6 = new android.hardware.camera2.params.StreamConfiguration;

        $i2 = r3.<android.hardware.Camera$Size: int width>;

        $i1 = r3.<android.hardware.Camera$Size: int height>;

        specialinvoke $r6.<android.hardware.camera2.params.StreamConfiguration: void <init>(int,int,int,boolean)>(i0, $i2, $i1, 0);

        r4 = $r6;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        return;
    }

    static int convertSceneModeFromLegacy(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.String[] $r1;
        int[] $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        i0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(java.lang.Object[],java.lang.Object)>($r1, r0);

        if i0 >= 0 goto label2;

        return -1;

     label2:
        $r2 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        $i1 = $r2[i0];

        return $i1;
    }

    static java.lang.String convertSceneModeToLegacy(int)
    {
        int i0, i1;
        int[] $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "auto";

     label1:
        $r0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes>;

        i1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(int[],int)>($r0, i0);

        if i1 >= 0 goto label2;

        return null;

     label2:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes>;

        $r2 = $r1[i1];

        return $r2;
    }

    static int convertEffectModeFromLegacy(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.String[] $r1;
        int[] $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        i0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(java.lang.Object[],java.lang.Object)>($r1, r0);

        if i0 >= 0 goto label2;

        return -1;

     label2:
        $r2 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        $i1 = $r2[i0];

        return $i1;
    }

    static java.lang.String convertEffectModeToLegacy(int)
    {
        int i0, i1;
        int[] $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r0 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes>;

        i1 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: int getArrayIndex(int[],int)>($r0, i0);

        if i1 >= 0 goto label1;

        return null;

     label1:
        $r1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode>;

        $r2 = $r1[i1];

        return $r2;
    }

    private static int convertAntiBandingMode(java.lang.String)
    {
        java.lang.String r0, r1, $r5;
        byte b0;
        int $i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return -1;

     label01:
        r1 = r0;

        b0 = -1;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case 109935: goto label02;
            case 1628397: goto label03;
            case 1658188: goto label04;
            case 3005871: goto label05;
            default: goto label06;
        };

     label02:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z3 == 0 goto label06;

        b0 = 0;

        goto label06;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("50hz");

        if $z2 == 0 goto label06;

        b0 = 1;

        goto label06;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("60hz");

        if $z1 == 0 goto label06;

        b0 = 2;

        goto label06;

     label05:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("auto");

        if $z0 == 0 goto label06;

        b0 = 3;

     label06:
        tableswitch(b0)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            default: goto label11;
        };

     label07:
        return 0;

     label08:
        return 1;

     label09:
        return 2;

     label10:
        return 3;

     label11:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertAntiBandingMode - Unknown antibanding mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r5);

        return -1;
    }

    static int convertAntiBandingModeOrDefault(java.lang.String)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: int convertAntiBandingMode(java.lang.String)>(r0);

        if i0 != -1 goto label1;

        return 0;

     label1:
        return i0;
    }

    private static int[] convertAeFpsRangeToLegacy(android.util.Range)
    {
        android.util.Range r0;
        int[] r1;
        java.lang.Comparable $r2, $r4;
        java.lang.Integer $r3, $r5;
        int $i0, $i1;

        r0 := @parameter0: android.util.Range;

        r1 = newarray (int)[2];

        $r2 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r1[0] = $i0;

        $r4 = virtualinvoke r0.<android.util.Range: java.lang.Comparable getUpper()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[1] = $i1;

        return r1;
    }

    private static long calculateJpegStallDuration(android.hardware.Camera$Size)
    {
        android.hardware.Camera$Size r0;
        long l0, l1, l2, $l5, $l6, $l7, $l8;
        int $i3, $i4;

        r0 := @parameter0: android.hardware.Camera$Size;

        l0 = 200000000L;

        $i3 = r0.<android.hardware.Camera$Size: int width>;

        $l6 = (long) $i3;

        $i4 = r0.<android.hardware.Camera$Size: int height>;

        $l5 = (long) $i4;

        l1 = $l6 * $l5;

        l2 = 71L;

        $l7 = l1 * l2;

        $l8 = l0 + $l7;

        return $l8;
    }

    public static void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyRequest r0;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyRequest;

        staticinvoke <android.hardware.camera2.legacy.LegacyRequestMapper: void convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)>(r0);

        return;
    }

    public static android.hardware.camera2.impl.CameraMetadataNative createRequestTemplate(android.hardware.camera2.CameraCharacteristics, int)
    {
        android.hardware.camera2.CameraCharacteristics r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.hardware.camera2.impl.CameraMetadataNative r1, $r7;
        android.graphics.Rect r2;
        android.hardware.camera2.params.MeteringRectangle[] r3, $r27;
        android.util.Range[] r4, r89;
        android.util.Range r5, r90;
        int[] $r6, $r42, $r85;
        boolean $z0, $z1, $z2, $z3;
        android.hardware.camera2.CaptureRequest$Key $r8, $r10, $r13, $r15, $r17, $r19, $r21, $r23, $r28, $r29, $r31, $r32, $r33, $r35, $r41, $r43, $r48, $r50, $r52, $r55, $r57, $r60;
        java.lang.Integer $r9, $r11, $r12, $r16, $r18, $r20, $r30, $r34, $r36, $r46, $r47, $r49, $r56, $r58, $r68, $r69, $r73, $r74;
        java.lang.Boolean $r14, $r22;
        java.lang.Object $r24, $r37, $r39, $r44, $r53, $r64, $r87;
        android.hardware.camera2.CameraCharacteristics$Key $r25, $r38, $r40, $r45, $r51, $r63, $r86;
        android.hardware.camera2.params.MeteringRectangle $r26;
        float[] $r54;
        android.util.Size $r59;
        java.lang.Comparable $r61, $r65, $r66, $r67, $r70, $r75;
        float $f0, $f1;
        java.lang.Float $r62, r88;
        java.lang.StringBuilder $r71, $r72, $r77, $r78, $r79, $r80, $r81, $r82;
        java.lang.String $r76;
        java.lang.AssertionError $r83;
        java.lang.IllegalArgumentException $r84;
        byte $b13, b14, b15;
        android.util.Size[] r91;

        r0 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        i0 := @parameter1: int;

        $r6 = <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sAllowedTemplates>;

        $z0 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r6, i0);

        if $z0 != 0 goto label01;

        $r84 = new java.lang.IllegalArgumentException;

        specialinvoke $r84.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("templateId out of range");

        throw $r84;

     label01:
        $r7 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r7.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r1 = $r7;

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r11);

        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r13, $r12);

        $r15 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r15, $r14);

        $r17 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r17, $r16);

        $r19 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r19, $r18);

        $r21 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r21, $r20);

        $r23 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r23, $r22);

        $r25 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r24 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r25);

        r2 = (android.graphics.Rect) $r24;

        $r27 = newarray (android.hardware.camera2.params.MeteringRectangle)[1];

        $r26 = new android.hardware.camera2.params.MeteringRectangle;

        $i3 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i5 = $i3 - 1;

        $i6 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i4 = $i6 - 1;

        specialinvoke $r26.<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>(0, 0, $i5, $i4, 0);

        $r27[0] = $r26;

        r3 = $r27;

        $r28 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r28, r3);

        $r31 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>;

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r31, r3);

        $r32 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r32, r3);

        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            default: goto label05;
        };

     label02:
        b14 = 1;

        goto label06;

     label03:
        b14 = 2;

        goto label06;

     label04:
        b14 = 3;

        goto label06;

     label05:
        $r83 = new java.lang.AssertionError;

        specialinvoke $r83.<java.lang.AssertionError: void <init>(java.lang.Object)>("Impossible; keep in sync with sAllowedTemplates");

        throw $r83;

     label06:
        $r29 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b14);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r29, $r30);

        $r35 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r35, $r36);

        $r33 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r33, $r34);

        $r40 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>;

        $r39 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r40);

        r88 = (java.lang.Float) $r39;

        if r88 == null goto label07;

        $f1 = virtualinvoke r88.<java.lang.Float: float floatValue()>();

        $b13 = $f1 cmpl 0.0F;

        if $b13 != 0 goto label07;

        b15 = 0;

        goto label11;

     label07:
        b15 = 1;

        if i0 == 3 goto label08;

        if i0 != 4 goto label09;

     label08:
        $r38 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r37 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r38);

        $r42 = (int[]) $r37;

        $z2 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r42, 3);

        if $z2 == 0 goto label11;

        b15 = 3;

        goto label11;

     label09:
        if i0 == 1 goto label10;

        if i0 != 2 goto label11;

     label10:
        $r86 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>;

        $r87 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r86);

        $r85 = (int[]) $r87;

        $z3 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(int[],int)>($r85, 4);

        if $z3 == 0 goto label11;

        b15 = 4;

     label11:
        $z1 = <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE>;

        if $z1 == 0 goto label12;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createRequestTemplate (templateId=");

        $r81 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("),");

        $r79 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" afMode=");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b15);

        $r77 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", minimumFocusDistance=");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r88);

        $r76 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r76);

     label12:
        $r41 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b15);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r41, $r46);

        $r45 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>;

        $r44 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r45);

        r89 = (android.util.Range[]) $r44;

        r90 = r89[0];

        r4 = r89;

        i1 = lengthof r4;

        i2 = 0;

     label13:
        if i2 >= i1 goto label16;

        r5 = r4[i2];

        $r61 = virtualinvoke r90.<android.util.Range: java.lang.Comparable getUpper()>();

        $r68 = (java.lang.Integer) $r61;

        $i9 = virtualinvoke $r68.<java.lang.Integer: int intValue()>();

        $r70 = virtualinvoke r5.<android.util.Range: java.lang.Comparable getUpper()>();

        $r69 = (java.lang.Integer) $r70;

        $i8 = virtualinvoke $r69.<java.lang.Integer: int intValue()>();

        if $i9 >= $i8 goto label14;

        r90 = r5;

        goto label15;

     label14:
        $r65 = virtualinvoke r90.<android.util.Range: java.lang.Comparable getUpper()>();

        $r67 = virtualinvoke r5.<android.util.Range: java.lang.Comparable getUpper()>();

        if $r65 != $r67 goto label15;

        $r66 = virtualinvoke r90.<android.util.Range: java.lang.Comparable getLower()>();

        $r73 = (java.lang.Integer) $r66;

        $i11 = virtualinvoke $r73.<java.lang.Integer: int intValue()>();

        $r75 = virtualinvoke r5.<android.util.Range: java.lang.Comparable getLower()>();

        $r74 = (java.lang.Integer) $r75;

        $i10 = virtualinvoke $r74.<java.lang.Integer: int intValue()>();

        if $i11 >= $i10 goto label15;

        r90 = r5;

     label15:
        i2 = i2 + 1;

        goto label13;

     label16:
        $r43 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>;

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r43, r90);

        $r50 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r50, $r49);

        $r48 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r48, $r47);

        $r55 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r55, $r56);

        $r57 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r57, $r58);

        $r52 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH>;

        $r51 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>;

        $r53 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r51);

        $r54 = (float[]) $r53;

        $f0 = $r54[0];

        $r62 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r52, $r62);

        $r63 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>;

        $r64 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r63);

        r91 = (android.util.Size[]) $r64;

        $r60 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>;

        $i7 = lengthof r91;

        if $i7 <= 1 goto label17;

        $r59 = r91[1];

        goto label18;

     label17:
        $r59 = r91[0];

     label18:
        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r60, $r59);

        return r1;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CameraCharacteristics$Key[])
    {
        android.hardware.camera2.CameraCharacteristics$Key[] r0;
        int[] r1;
        int i0, $i1, $i2, $i3;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CameraCharacteristics$Key[];

        $i1 = lengthof r0;

        r1 = newarray (int)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i3 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i0] = $i3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CaptureRequest$Key[])
    {
        android.hardware.camera2.CaptureRequest$Key[] r0;
        int[] r1;
        int i0, $i1, $i2, $i3;
        android.hardware.camera2.CaptureRequest$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CaptureRequest$Key[];

        $i1 = lengthof r0;

        r1 = newarray (int)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i3 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i0] = $i3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static int[] getTagsForKeys(android.hardware.camera2.CaptureResult$Key[])
    {
        android.hardware.camera2.CaptureResult$Key[] r0;
        int[] r1;
        int i0, $i1, $i2, $i3;
        android.hardware.camera2.CaptureResult$Key $r2;
        android.hardware.camera2.impl.CameraMetadataNative$Key $r3;

        r0 := @parameter0: android.hardware.camera2.CaptureResult$Key[];

        $i1 = lengthof r0;

        r1 = newarray (int)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()>();

        $i3 = virtualinvoke $r3.<android.hardware.camera2.impl.CameraMetadataNative$Key: int getTag()>();

        r1[i0] = $i3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    static java.lang.String convertAfModeToLegacy(int, java.util.List)
    {
        int i0;
        java.util.List r0;
        java.lang.String r1, r2, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        if r0 == null goto label01;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", "No focus modes supported; API1 bug");

        return null;

     label02:
        r1 = null;

        tableswitch(i0)
        {
            case 0: goto label08;
            case 1: goto label03;
            case 2: goto label07;
            case 3: goto label05;
            case 4: goto label04;
            case 5: goto label06;
            default: goto label10;
        };

     label03:
        r1 = "auto";

        goto label10;

     label04:
        r1 = "continuous-picture";

        goto label10;

     label05:
        r1 = "continuous-video";

        goto label10;

     label06:
        r1 = "edof";

        goto label10;

     label07:
        r1 = "macro";

        goto label10;

     label08:
        $z2 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("fixed");

        if $z2 == 0 goto label09;

        r1 = "fixed";

        goto label10;

     label09:
        r1 = "infinity";

     label10:
        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label11;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.lang.String) $r3;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r4[1] = r2;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("convertAfModeToLegacy - ignoring unsupported mode %d, defaulting to %s", $r4);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LegacyMetadataMapper", $r6);

        r1 = r2;

     label11:
        return r1;
    }

    static void <clinit>()
    {
        boolean $z0;
        java.lang.String[] $r0, $r2;
        int[] $r1, $r3, $r4;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AWB> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AWB_STATE> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AF_MAX_REGIONS> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AF> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AE_MAX_REGIONS> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean LIE_ABOUT_AE_STATE> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: float PREVIEW_ASPECT_RATIO_TOLERANCE> = 0.01F;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int UNKNOWN_MODE> = -1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_JPEG_ENCODE_TIME_MS> = 600L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_SENSOR_AREA_PX> = 8388608L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long APPROXIMATE_CAPTURE_DELAY_MS> = 200L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_PIPELINE_MAX_DEPTH_OURS> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_PIPELINE_MAX_DEPTH_HAL1> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_INPUT_STREAMS_COUNT> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL> = 1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC> = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW> = 0;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: float LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS> = 0.0F;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_BLOB> = 33;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED> = 34;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_BGRA_8888> = 5;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int HAL_PIXEL_FORMAT_RGBA_8888> = 1;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: long NS_PER_MS> = 1000000L;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String TAG> = "LegacyMetadataMapper";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LegacyMetadataMapper", 2);

        <android.hardware.camera2.legacy.LegacyMetadataMapper: boolean VERBOSE> = $z0;

        $r0 = newarray (java.lang.String)[17];

        $r0[0] = "auto";

        $r0[1] = "action";

        $r0[2] = "portrait";

        $r0[3] = "landscape";

        $r0[4] = "night";

        $r0[5] = "night-portrait";

        $r0[6] = "theatre";

        $r0[7] = "beach";

        $r0[8] = "snow";

        $r0[9] = "sunset";

        $r0[10] = "steadyphoto";

        $r0[11] = "fireworks";

        $r0[12] = "sports";

        $r0[13] = "party";

        $r0[14] = "candlelight";

        $r0[15] = "barcode";

        $r0[16] = "hdr";

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacySceneModes> = $r0;

        $r1 = newarray (int)[17];

        $r1[0] = 0;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 4;

        $r1[4] = 5;

        $r1[5] = 6;

        $r1[6] = 7;

        $r1[7] = 8;

        $r1[8] = 9;

        $r1[9] = 10;

        $r1[10] = 11;

        $r1[11] = 12;

        $r1[12] = 13;

        $r1[13] = 14;

        $r1[14] = 15;

        $r1[15] = 16;

        $r1[16] = 18;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sSceneModes> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "none";

        $r2[1] = "mono";

        $r2[2] = "negative";

        $r2[3] = "solarize";

        $r2[4] = "sepia";

        $r2[5] = "posterize";

        $r2[6] = "whiteboard";

        $r2[7] = "blackboard";

        $r2[8] = "aqua";

        <android.hardware.camera2.legacy.LegacyMetadataMapper: java.lang.String[] sLegacyEffectMode> = $r2;

        $r3 = newarray (int)[9];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 3;

        $r3[4] = 4;

        $r3[5] = 5;

        $r3[6] = 6;

        $r3[7] = 7;

        $r3[8] = 8;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sEffectModes> = $r3;

        $r4 = newarray (int)[3];

        $r4[0] = 1;

        $r4[1] = 2;

        $r4[2] = 3;

        <android.hardware.camera2.legacy.LegacyMetadataMapper: int[] sAllowedTemplates> = $r4;

        return;
    }
}
