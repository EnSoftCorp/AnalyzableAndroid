public final class android.graphics.pdf.PdfEditor extends java.lang.Object
{
    private final dalvik.system.CloseGuard mCloseGuard;
    private final long mNativeDocument;
    private int mPageCount;
    private android.os.ParcelFileDescriptor mInput;

    public void <init>(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfEditor r0;
        android.os.ParcelFileDescriptor r1, $r9;
        long l0, $l4, $l6;
        dalvik.system.CloseGuard $r3, $r11;
        libcore.io.Os $r4, $r6;
        java.io.FileDescriptor $r5, $r7;
        int $i1, $i3, $i5;
        android.system.StructStat $r8;
        java.lang.NullPointerException $r10;
        java.lang.IllegalArgumentException $r12;
        android.system.ErrnoException $r13;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard> = $r3;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("input cannot be null");

        throw $r10;

     label1:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r5 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i1 = <android.system.OsConstants: int SEEK_SET>;

        interfaceinvoke $r4.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>($r5, 0L, $i1);

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r7 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r8 = interfaceinvoke $r6.<libcore.io.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r7);

        l0 = $r8.<android.system.StructStat: long st_size>;

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file descriptor not seekable");

        throw $r12;

     label4:
        r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput> = r1;

        $r9 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        $i3 = virtualinvoke $r9.<android.os.ParcelFileDescriptor: int getFd()>();

        $l4 = staticinvoke <android.graphics.pdf.PdfEditor: long nativeOpen(int,long)>($i3, l0);

        r0.<android.graphics.pdf.PdfEditor: long mNativeDocument> = $l4;

        $l6 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $i5 = staticinvoke <android.graphics.pdf.PdfEditor: int nativeGetPageCount(long)>($l6);

        r0.<android.graphics.pdf.PdfEditor: int mPageCount> = $i5;

        $r11 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r11.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public int getPageCount()
    {
        android.graphics.pdf.PdfEditor r0;
        int $i0;

        r0 := @this: android.graphics.pdf.PdfEditor;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        $i0 = r0.<android.graphics.pdf.PdfEditor: int mPageCount>;

        return $i0;
    }

    public void removePage(int)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0, $i2;
        long $l1;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfPageNotInDocument(int)>(i0);

        $l1 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $i2 = staticinvoke <android.graphics.pdf.PdfEditor: int nativeRemovePage(long,int)>($l1, i0);

        r0.<android.graphics.pdf.PdfEditor: int mPageCount> = $i2;

        return;
    }

    public void write(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfEditor r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.Throwable r2, $r3;
        long $l0;
        int $i1;

        r0 := @this: android.graphics.pdf.PdfEditor;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

     label1:
        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        $l0 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        $i1 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int getFd()>();

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeWrite(long,int)>($l0, $i1);

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void close()
    {
        android.graphics.pdf.PdfEditor r0;

        r0 := @this: android.graphics.pdf.PdfEditor;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void doClose()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.pdf.PdfEditor r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.graphics.pdf.PdfEditor;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        $r3 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        if $r3 == null goto label2;

        specialinvoke r0.<android.graphics.pdf.PdfEditor: void doClose()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void doClose()
    {
        android.graphics.pdf.PdfEditor r0;
        long $l0;
        android.os.ParcelFileDescriptor $r1;
        dalvik.system.CloseGuard $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        $l0 = r0.<android.graphics.pdf.PdfEditor: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfEditor: void nativeClose(long)>($l0);

        $r1 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r1);

        r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput> = null;

        $r2 = r0.<android.graphics.pdf.PdfEditor: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    private void throwIfClosed()
    {
        android.graphics.pdf.PdfEditor r0;
        android.os.ParcelFileDescriptor $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfEditor;

        $r1 = r0.<android.graphics.pdf.PdfEditor: android.os.ParcelFileDescriptor mInput>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already closed");

        throw $r2;

     label1:
        return;
    }

    private void throwIfPageNotInDocument(int)
    {
        android.graphics.pdf.PdfEditor r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.graphics.pdf.PdfEditor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.graphics.pdf.PdfEditor: int mPageCount>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid page index");

        throw $r1;

     label2:
        return;
    }

    private static native long nativeOpen(int, long);

    private static native void nativeClose(long);

    private static native int nativeGetPageCount(long);

    private static native int nativeRemovePage(long, int);

    private static native void nativeWrite(long, int);
}
