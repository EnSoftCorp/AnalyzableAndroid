public final class android.content.res.AssetManager extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int ACCESS_UNKNOWN;
    public static final int ACCESS_RANDOM;
    public static final int ACCESS_STREAMING;
    public static final int ACCESS_BUFFER;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    private static final boolean DEBUG_REFS;
    private static final java.lang.Object sSync;
    static android.content.res.AssetManager sSystem;
    private final android.util.TypedValue mValue;
    private final long[] mOffsets;
    private long mObject;
    private android.content.res.StringBlock[] mStringBlocks;
    private int mNumRefs;
    private boolean mOpen;
    private java.util.HashMap mRefStacks;
    static final int STYLE_NUM_ENTRIES;
    static final int STYLE_TYPE;
    static final int STYLE_DATA;
    static final int STYLE_ASSET_COOKIE;
    static final int STYLE_RESOURCE_ID;
    static final int STYLE_CHANGING_CONFIGURATIONS;
    static final int STYLE_DENSITY;

    public void <init>()
    {
        android.content.res.AssetManager r0, r1;
        java.lang.Throwable r2, $r6;
        android.util.TypedValue $r3;
        long[] $r4;

        r0 := @this: android.content.res.AssetManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        r0.<android.content.res.AssetManager: android.util.TypedValue mValue> = $r3;

        $r4 = newarray (long)[2];

        r0.<android.content.res.AssetManager: long[] mOffsets> = $r4;

        r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = null;

        r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        r1 = r0;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void init(boolean)>(0);

        staticinvoke <android.content.res.AssetManager: void ensureSystemAssets()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static void ensureSystemAssets()
    {
        java.lang.Object r0, $r3;
        android.content.res.AssetManager r1, $r4, $r5;
        java.lang.Throwable r2, $r6;

        $r3 = <android.content.res.AssetManager: java.lang.Object sSync>;

        r0 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        if $r4 != null goto label2;

        $r5 = new android.content.res.AssetManager;

        specialinvoke $r5.<android.content.res.AssetManager: void <init>(boolean)>(1);

        r1 = $r5;

        virtualinvoke r1.<android.content.res.AssetManager: void makeStringBlocks(android.content.res.StringBlock[])>(null);

        <android.content.res.AssetManager: android.content.res.AssetManager sSystem> = r1;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void <init>(boolean)
    {
        android.content.res.AssetManager r0;
        boolean z0;
        android.util.TypedValue $r1;
        long[] $r2;

        r0 := @this: android.content.res.AssetManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.TypedValue;

        specialinvoke $r1.<android.util.TypedValue: void <init>()>();

        r0.<android.content.res.AssetManager: android.util.TypedValue mValue> = $r1;

        $r2 = newarray (long)[2];

        r0.<android.content.res.AssetManager: long[] mOffsets> = $r2;

        r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = null;

        r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        specialinvoke r0.<android.content.res.AssetManager: void init(boolean)>(1);

        return;
    }

    public static android.content.res.AssetManager getSystem()
    {
        android.content.res.AssetManager $r0;

        staticinvoke <android.content.res.AssetManager: void ensureSystemAssets()>();

        $r0 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        return $r0;
    }

    public void close()
    {
        android.content.res.AssetManager r0, r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        int $i0;
        long $l1;

        r0 := @this: android.content.res.AssetManager;

        r1 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 == 0 goto label2;

        r0.<android.content.res.AssetManager: boolean mOpen> = 0;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $l1 = (long) $i0;

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>($l1);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final java.lang.CharSequence getResourceText(int)
    {
        android.content.res.AssetManager r0, r1;
        int i0, i1, $i2, $i3;
        android.util.TypedValue r2;
        java.lang.Throwable r3, $r9;
        java.lang.CharSequence $r5, $r8;
        android.content.res.StringBlock[] $r6;
        android.content.res.StringBlock $r7;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        r2 = r0.<android.content.res.AssetManager: android.util.TypedValue mValue>;

        i1 = specialinvoke r0.<android.content.res.AssetManager: int loadResourceValue(int,short,android.util.TypedValue,boolean)>(i0, 0, r2, 1);

        if i1 < 0 goto label5;

        $i2 = r2.<android.util.TypedValue: int type>;

        if $i2 != 3 goto label3;

        $r6 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r7 = $r6[i1];

        $i3 = r2.<android.util.TypedValue: int data>;

        $r8 = virtualinvoke $r7.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i3);

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        $r5 = virtualinvoke r2.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor r1;

     label4:
        return $r5;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    final java.lang.CharSequence getResourceBagText(int, int)
    {
        android.content.res.AssetManager r0, r1;
        int i0, i1, i2, $i3, $i4;
        android.util.TypedValue r2;
        java.lang.Throwable r3, $r9;
        java.lang.CharSequence $r5, $r8;
        android.content.res.StringBlock[] $r6;
        android.content.res.StringBlock $r7;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0;

        entermonitor r0;

     label1:
        r2 = r0.<android.content.res.AssetManager: android.util.TypedValue mValue>;

        i2 = specialinvoke r0.<android.content.res.AssetManager: int loadResourceBagValue(int,int,android.util.TypedValue,boolean)>(i0, i1, r2, 1);

        if i2 < 0 goto label5;

        $i3 = r2.<android.util.TypedValue: int type>;

        if $i3 != 3 goto label3;

        $r6 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r7 = $r6[i2];

        $i4 = r2.<android.util.TypedValue: int data>;

        $r8 = virtualinvoke $r7.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i4);

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        $r5 = virtualinvoke r2.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor r1;

     label4:
        return $r5;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    final java.lang.String[] getResourceStringArray(int)
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.String[] r1;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.AssetManager: java.lang.String[] getArrayStringResource(int)>(i0);

        return r1;
    }

    final boolean getResourceValue(int, int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager r0;
        int i0, i1, i2, $i4, $i5;
        android.util.TypedValue r1;
        boolean z0;
        short $s3;
        android.content.res.StringBlock[] $r2;
        android.content.res.StringBlock $r3;
        java.lang.CharSequence $r4;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        $s3 = (short) i1;

        i2 = specialinvoke r0.<android.content.res.AssetManager: int loadResourceValue(int,short,android.util.TypedValue,boolean)>(i0, $s3, r1, z0);

        if i2 < 0 goto label2;

        $i4 = r1.<android.util.TypedValue: int type>;

        if $i4 == 3 goto label1;

        return 1;

     label1:
        $r2 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r3 = $r2[i2];

        $i5 = r1.<android.util.TypedValue: int data>;

        $r4 = virtualinvoke $r3.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i5);

        r1.<android.util.TypedValue: java.lang.CharSequence string> = $r4;

        return 1;

     label2:
        return 0;
    }

    final java.lang.CharSequence[] getResourceTextArray(int)
    {
        android.content.res.AssetManager r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7;
        int[] r1;
        java.lang.CharSequence[] r2;
        android.content.res.StringBlock[] $r3;
        android.content.res.StringBlock $r4;
        java.lang.CharSequence $r5;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.content.res.AssetManager: int[] getArrayStringInfo(int)>(i0);

        i1 = lengthof r1;

        i2 = i1 / 2;

        r2 = newarray (java.lang.CharSequence)[i2];

        i5 = 0;

        i6 = 0;

     label1:
        if i5 >= i1 goto label4;

        i3 = r1[i5];

        $i7 = i5 + 1;

        i4 = r1[$i7];

        if i4 < 0 goto label2;

        $r3 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = $r3[i3];

        $r5 = virtualinvoke $r4.<android.content.res.StringBlock: java.lang.CharSequence get(int)>(i4);

        goto label3;

     label2:
        $r5 = null;

     label3:
        r2[i6] = $r5;

        i5 = i5 + 2;

        i6 = i6 + 1;

        goto label1;

     label4:
        return r2;
    }

    final boolean getThemeValue(long, int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager r0;
        long l0;
        int i1, i2, $i3, $i4;
        android.util.TypedValue r1;
        boolean z0;
        android.content.res.StringBlock[] r2;
        android.content.res.StringBlock $r3;
        java.lang.CharSequence $r4;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.TypedValue;

        z0 := @parameter3: boolean;

        i2 = staticinvoke <android.content.res.AssetManager: int loadThemeAttributeValue(long,int,android.util.TypedValue,boolean)>(l0, i1, r1, z0);

        if i2 < 0 goto label3;

        $i3 = r1.<android.util.TypedValue: int type>;

        if $i3 == 3 goto label1;

        return 1;

     label1:
        r2 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if r2 != null goto label2;

        virtualinvoke r0.<android.content.res.AssetManager: void ensureStringBlocks()>();

        r2 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

     label2:
        $r3 = r2[i2];

        $i4 = r1.<android.util.TypedValue: int data>;

        $r4 = virtualinvoke $r3.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i4);

        r1.<android.util.TypedValue: java.lang.CharSequence string> = $r4;

        return 1;

     label3:
        return 0;
    }

    final void ensureStringBlocks()
    {
        android.content.res.AssetManager r0, r1, $r6;
        java.lang.Throwable r2, $r8;
        android.content.res.StringBlock[] $r3, $r5, $r7;

        r0 := @this: android.content.res.AssetManager;

        $r3 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if $r3 != null goto label6;

        r1 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if $r5 != null goto label2;

        $r6 = <android.content.res.AssetManager: android.content.res.AssetManager sSystem>;

        $r7 = $r6.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        virtualinvoke r0.<android.content.res.AssetManager: void makeStringBlocks(android.content.res.StringBlock[])>($r7);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final void makeStringBlocks(android.content.res.StringBlock[])
    {
        android.content.res.AssetManager r0;
        android.content.res.StringBlock[] r1, $r2, $r4, $r6;
        int i0, i1, i2, $i4;
        android.content.res.StringBlock $r3, $r5;
        long $l3;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: android.content.res.StringBlock[];

        if r1 == null goto label1;

        $i4 = lengthof r1;

        goto label2;

     label1:
        $i4 = 0;

     label2:
        i0 = $i4;

        i1 = specialinvoke r0.<android.content.res.AssetManager: int getStringBlockCount()>();

        $r2 = newarray (android.content.res.StringBlock)[i1];

        r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = $r2;

        i2 = 0;

     label3:
        if i2 >= i1 goto label6;

        if i2 >= i0 goto label4;

        $r6 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r5 = r1[i2];

        $r6[i2] = $r5;

        goto label5;

     label4:
        $r4 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r3 = new android.content.res.StringBlock;

        $l3 = specialinvoke r0.<android.content.res.AssetManager: long getNativeStringBlock(int)>(i2);

        specialinvoke $r3.<android.content.res.StringBlock: void <init>(long,boolean)>($l3, 1);

        $r4[i2] = $r3;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return;
    }

    final java.lang.CharSequence getPooledStringForCookie(int, int)
    {
        android.content.res.AssetManager r0;
        int i0, i1, $i2;
        android.content.res.StringBlock[] $r1;
        android.content.res.StringBlock $r2;
        java.lang.CharSequence $r3;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $i2 = i0 - 1;

        $r2 = $r1[$i2];

        $r3 = virtualinvoke $r2.<android.content.res.StringBlock: java.lang.CharSequence get(int)>(i1);

        return $r3;
    }

    public final java.io.InputStream open(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>(r1, 2);

        return $r2;
    }

    public final java.io.InputStream open(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0, r2;
        java.lang.String r1, $r9;
        int i0, $i3;
        long l1, $l4;
        android.content.res.AssetManager$AssetInputStream r3, $r11;
        java.lang.Throwable r4, $r12;
        boolean $z0;
        byte $b2;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.RuntimeException $r13;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r13;

     label2:
        l1 = specialinvoke r0.<android.content.res.AssetManager: long openAsset(java.lang.String,int)>(r1, i0);

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label4;

        $r11 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke $r11.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,long,android.content.res.AssetManager$1)>(r0, l1, null);

        r3 = $r11;

        $i3 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $l4 = (long) $i3;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l4);

        exitmonitor r2;

     label3:
        return r3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final android.content.res.AssetFileDescriptor openFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0, r2;
        java.lang.String r1, $r11;
        android.os.ParcelFileDescriptor r3;
        java.lang.Throwable r4, $r16;
        boolean $z0;
        long[] $r6, $r13, $r14;
        java.io.FileNotFoundException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        android.content.res.AssetFileDescriptor $r12;
        long $l0, $l1;
        java.lang.RuntimeException $r15;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r15;

     label2:
        $r6 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        r3 = specialinvoke r0.<android.content.res.AssetManager: android.os.ParcelFileDescriptor openAssetFd(java.lang.String,long[])>(r1, $r6);

        if r3 == null goto label4;

        $r12 = new android.content.res.AssetFileDescriptor;

        $r14 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l0 = $r14[0];

        $r13 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l1 = $r13[1];

        specialinvoke $r12.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r3, $l0, $l1);

        exitmonitor r2;

     label3:
        return $r12;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r7 = new java.io.FileNotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final native java.lang.String[] list(java.lang.String) throws java.io.IOException;

    public final java.io.InputStream openNonAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, r1, 2);

        return $r2;
    }

    public final java.io.InputStream openNonAsset(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        int i0;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, r1, i0);

        return $r2;
    }

    public final java.io.InputStream openNonAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(i0, r1, 2);

        return $r2;
    }

    public final java.io.InputStream openNonAsset(int, java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager r0, r2;
        int i0, i1, $i5;
        java.lang.String r1, $r11;
        long l2, $l4;
        android.content.res.AssetManager$AssetInputStream r3, $r10;
        java.lang.Throwable r4, $r13;
        boolean $z0;
        byte $b3;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.RuntimeException $r12;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r12;

     label2:
        l2 = specialinvoke r0.<android.content.res.AssetManager: long openNonAssetNative(int,java.lang.String,int)>(i0, r1, i1);

        $b3 = l2 cmp 0L;

        if $b3 == 0 goto label4;

        $r10 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke $r10.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,long,android.content.res.AssetManager$1)>(r0, l2, null);

        r3 = $r10;

        $i5 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $l4 = (long) $i5;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l4);

        exitmonitor r2;

     label3:
        return r3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.AssetFileDescriptor $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>(0, r1);

        return $r2;
    }

    public final android.content.res.AssetFileDescriptor openNonAssetFd(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0, r2;
        int i0;
        java.lang.String r1, $r11;
        android.os.ParcelFileDescriptor r3;
        java.lang.Throwable r4, $r15;
        boolean $z0;
        long[] $r6, $r12, $r14;
        java.io.FileNotFoundException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        android.content.res.AssetFileDescriptor $r13;
        long $l1, $l2;
        java.lang.RuntimeException $r16;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r16;

     label2:
        $r6 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        r3 = specialinvoke r0.<android.content.res.AssetManager: android.os.ParcelFileDescriptor openNonAssetFdNative(int,java.lang.String,long[])>(i0, r1, $r6);

        if r3 == null goto label4;

        $r13 = new android.content.res.AssetFileDescriptor;

        $r12 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l2 = $r12[0];

        $r14 = r0.<android.content.res.AssetManager: long[] mOffsets>;

        $l1 = $r14[1];

        specialinvoke $r13.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r3, $l2, $l1);

        exitmonitor r2;

     label3:
        return $r13;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r7 = new java.io.FileNotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.XmlResourceParser $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>(0, r1);

        return $r2;
    }

    public final android.content.res.XmlResourceParser openXmlResourceParser(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        int i0;
        java.lang.String r1;
        android.content.res.XmlBlock r2;
        android.content.res.XmlResourceParser r3;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(i0, r1);

        r3 = virtualinvoke r2.<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser()>();

        virtualinvoke r2.<android.content.res.XmlBlock: void close()>();

        return r3;
    }

    final android.content.res.XmlBlock openXmlBlockAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0;
        java.lang.String r1;
        android.content.res.XmlBlock $r2;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(0, r1);

        return $r2;
    }

    final android.content.res.XmlBlock openXmlBlockAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager r0, r2;
        int i0, $i3;
        java.lang.String r1, $r9;
        long l1, $l4;
        android.content.res.XmlBlock r3, $r11;
        java.lang.Throwable r4, $r12;
        boolean $z0;
        byte $b2;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.RuntimeException $r13;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r13;

     label2:
        l1 = specialinvoke r0.<android.content.res.AssetManager: long openXmlAssetNative(int,java.lang.String)>(i0, r1);

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label4;

        $r11 = new android.content.res.XmlBlock;

        specialinvoke $r11.<android.content.res.XmlBlock: void <init>(android.content.res.AssetManager,long)>(r0, l1);

        r3 = $r11;

        $i3 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $l4 = (long) $i3;

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>($l4);

        exitmonitor r2;

     label3:
        return r3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset XML file: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void xmlBlockGone(int)
    {
        android.content.res.AssetManager r0, r1;
        int i0;
        java.lang.Throwable r2, $r4;
        long $l1;

        r0 := @this: android.content.res.AssetManager;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $l1 = (long) i0;

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>($l1);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    final long createTheme()
    {
        android.content.res.AssetManager r0, r1;
        long l0;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.res.AssetManager;

        r1 = r0;

        entermonitor r0;

     label1:
        $z0 = r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r4;

     label2:
        l0 = specialinvoke r0.<android.content.res.AssetManager: long newTheme()>();

        specialinvoke r0.<android.content.res.AssetManager: void incRefsLocked(long)>(l0);

        exitmonitor r1;

     label3:
        return l0;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final void releaseTheme(long)
    {
        android.content.res.AssetManager r0, r1;
        long l0;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        r1 = r0;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void deleteTheme(long)>(l0);

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>(l0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.content.res.AssetManager r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.content.res.AssetManager;

     label1:
        specialinvoke r0.<android.content.res.AssetManager: void destroy()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final int addAssetPath(java.lang.String)
    {
        android.content.res.AssetManager r0, r2;
        java.lang.String r1;
        int i0;
        java.lang.Throwable r3, $r6;
        android.content.res.StringBlock[] $r5;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

        entermonitor r0;

     label1:
        i0 = specialinvoke r0.<android.content.res.AssetManager: int addAssetPathNative(java.lang.String)>(r1);

        $r5 = r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        virtualinvoke r0.<android.content.res.AssetManager: void makeStringBlocks(android.content.res.StringBlock[])>($r5);

        exitmonitor r2;

     label2:
        return i0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final native int addAssetPathNative(java.lang.String);

    public final native int addOverlayPath(java.lang.String);

    public final int[] addAssetPaths(java.lang.String[])
    {
        android.content.res.AssetManager r0;
        java.lang.String[] r1;
        int[] r2;
        int i0, $i1, $i2, $i3;
        java.lang.String $r3;

        r0 := @this: android.content.res.AssetManager;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r1;

        r2 = newarray (int)[$i1];

        i0 = 0;

     label2:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label3;

        $r3 = r1[i0];

        $i3 = virtualinvoke r0.<android.content.res.AssetManager: int addAssetPath(java.lang.String)>($r3);

        r2[i0] = $i3;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r2;
    }

    public final native boolean isUpToDate();

    public final native void setLocale(java.lang.String);

    public final native java.lang.String[] getLocales();

    public final native void setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int);

    final native int getResourceIdentifier(java.lang.String, java.lang.String, java.lang.String);

    final native java.lang.String getResourceName(int);

    final native java.lang.String getResourcePackageName(int);

    final native java.lang.String getResourceTypeName(int);

    final native java.lang.String getResourceEntryName(int);

    private final native long openAsset(java.lang.String, int);

    private final native android.os.ParcelFileDescriptor openAssetFd(java.lang.String, long[]) throws java.io.IOException;

    private final native long openNonAssetNative(int, java.lang.String, int);

    private native android.os.ParcelFileDescriptor openNonAssetFdNative(int, java.lang.String, long[]) throws java.io.IOException;

    private final native void destroyAsset(long);

    private final native int readAssetChar(long);

    private final native int readAsset(long, byte[], int, int);

    private final native long seekAsset(long, long, int);

    private final native long getAssetLength(long);

    private final native long getAssetRemainingLength(long);

    private final native int loadResourceValue(int, short, android.util.TypedValue, boolean);

    private final native int loadResourceBagValue(int, int, android.util.TypedValue, boolean);

    static final native boolean applyStyle(long, int, int, long, int[], int[], int[]);

    static final native boolean resolveAttrs(long, int, int, int[], int[], int[], int[]);

    final native boolean retrieveAttributes(long, int[], int[], int[]);

    final native int getArraySize(int);

    final native int retrieveArray(int, int[]);

    private final native int getStringBlockCount();

    private final native long getNativeStringBlock(int);

    public final native java.lang.String getCookieName(int);

    public final native android.util.SparseArray getAssignedPackageIdentifiers();

    public static final native int getGlobalAssetCount();

    public static final native java.lang.String getAssetAllocations();

    public static final native int getGlobalAssetManagerCount();

    private final native long newTheme();

    private final native void deleteTheme(long);

    static final native void applyThemeStyle(long, int, boolean);

    static final native void copyTheme(long, long);

    static final native int loadThemeAttributeValue(long, int, android.util.TypedValue, boolean);

    static final native void dumpTheme(long, int, java.lang.String, java.lang.String);

    private final native long openXmlAssetNative(int, java.lang.String);

    private final native java.lang.String[] getArrayStringResource(int);

    private final native int[] getArrayStringInfo(int);

    final native int[] getArrayIntResource(int);

    final native int[] getStyleAttributes(int);

    private final native void init(boolean);

    private final native void destroy();

    private final void incRefsLocked(long)
    {
        int $i0, $i2;
        android.content.res.AssetManager r0;
        long l1;

        r0 := @this: android.content.res.AssetManager;

        l1 := @parameter0: long;

        $i2 = r0.<android.content.res.AssetManager: int mNumRefs>;

        $i0 = $i2 + 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = $i0;

        return;
    }

    private final void decRefsLocked(long)
    {
        android.content.res.AssetManager r0;
        long l0;
        int $i1, $i2, $i3;

        r0 := @this: android.content.res.AssetManager;

        l0 := @parameter0: long;

        $i1 = r0.<android.content.res.AssetManager: int mNumRefs>;

        $i2 = $i1 - 1;

        r0.<android.content.res.AssetManager: int mNumRefs> = $i2;

        $i3 = r0.<android.content.res.AssetManager: int mNumRefs>;

        if $i3 != 0 goto label1;

        specialinvoke r0.<android.content.res.AssetManager: void destroy()>();

     label1:
        return;
    }

    static long access$100(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0, $l1;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        $l1 = specialinvoke r0.<android.content.res.AssetManager: long getAssetLength(long)>(l0);

        return $l1;
    }

    static int access$200(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0;
        int $i1;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        $i1 = specialinvoke r0.<android.content.res.AssetManager: int readAssetChar(long)>(l0);

        return $i1;
    }

    static long access$300(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0, $l1;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        $l1 = specialinvoke r0.<android.content.res.AssetManager: long getAssetRemainingLength(long)>(l0);

        return $l1;
    }

    static void access$400(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        specialinvoke r0.<android.content.res.AssetManager: void destroyAsset(long)>(l0);

        return;
    }

    static void access$500(android.content.res.AssetManager, long)
    {
        android.content.res.AssetManager r0;
        long l0;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        specialinvoke r0.<android.content.res.AssetManager: void decRefsLocked(long)>(l0);

        return;
    }

    static long access$600(android.content.res.AssetManager, long, long, int)
    {
        android.content.res.AssetManager r0;
        long l0, l1, $l3;
        int i2;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        $l3 = specialinvoke r0.<android.content.res.AssetManager: long seekAsset(long,long,int)>(l0, l1, i2);

        return $l3;
    }

    static int access$700(android.content.res.AssetManager, long, byte[], int, int)
    {
        android.content.res.AssetManager r0;
        long l0;
        byte[] r1;
        int i1, i2, $i3;

        r0 := @parameter0: android.content.res.AssetManager;

        l0 := @parameter1: long;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = specialinvoke r0.<android.content.res.AssetManager: int readAsset(long,byte[],int,int)>(l0, r1, i1, i2);

        return $i3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.content.res.AssetManager: int STYLE_DENSITY> = 5;

        <android.content.res.AssetManager: int STYLE_CHANGING_CONFIGURATIONS> = 4;

        <android.content.res.AssetManager: int STYLE_RESOURCE_ID> = 3;

        <android.content.res.AssetManager: int STYLE_ASSET_COOKIE> = 2;

        <android.content.res.AssetManager: int STYLE_DATA> = 1;

        <android.content.res.AssetManager: int STYLE_TYPE> = 0;

        <android.content.res.AssetManager: int STYLE_NUM_ENTRIES> = 6;

        <android.content.res.AssetManager: boolean DEBUG_REFS> = 0;

        <android.content.res.AssetManager: boolean localLOGV> = 0;

        <android.content.res.AssetManager: java.lang.String TAG> = "AssetManager";

        <android.content.res.AssetManager: int ACCESS_BUFFER> = 3;

        <android.content.res.AssetManager: int ACCESS_STREAMING> = 2;

        <android.content.res.AssetManager: int ACCESS_RANDOM> = 1;

        <android.content.res.AssetManager: int ACCESS_UNKNOWN> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.content.res.AssetManager: java.lang.Object sSync> = $r0;

        <android.content.res.AssetManager: android.content.res.AssetManager sSystem> = null;

        return;
    }
}
