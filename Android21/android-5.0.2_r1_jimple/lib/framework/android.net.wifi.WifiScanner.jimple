public class android.net.wifi.WifiScanner extends java.lang.Object
{
    public static final int WIFI_BAND_UNSPECIFIED;
    public static final int WIFI_BAND_24_GHZ;
    public static final int WIFI_BAND_5_GHZ;
    public static final int WIFI_BAND_5_GHZ_DFS_ONLY;
    public static final int WIFI_BAND_5_GHZ_WITH_DFS;
    public static final int WIFI_BAND_BOTH;
    public static final int WIFI_BAND_BOTH_WITH_DFS;
    public static final int MIN_SCAN_PERIOD_MS;
    public static final int MAX_SCAN_PERIOD_MS;
    public static final int REASON_SUCCEEDED;
    public static final int REASON_UNSPECIFIED;
    public static final int REASON_INVALID_LISTENER;
    public static final int REASON_INVALID_REQUEST;
    public static final int REASON_NOT_AUTHORIZED;
    public static final java.lang.String GET_AVAILABLE_CHANNELS_EXTRA;
    public static final int REPORT_EVENT_AFTER_BUFFER_FULL;
    public static final int REPORT_EVENT_AFTER_EACH_SCAN;
    public static final int REPORT_EVENT_FULL_SCAN_RESULT;
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final int BASE;
    public static final int CMD_SCAN;
    public static final int CMD_START_BACKGROUND_SCAN;
    public static final int CMD_STOP_BACKGROUND_SCAN;
    public static final int CMD_GET_SCAN_RESULTS;
    public static final int CMD_SCAN_RESULT;
    public static final int CMD_SET_HOTLIST;
    public static final int CMD_RESET_HOTLIST;
    public static final int CMD_AP_FOUND;
    public static final int CMD_AP_LOST;
    public static final int CMD_START_TRACKING_CHANGE;
    public static final int CMD_STOP_TRACKING_CHANGE;
    public static final int CMD_CONFIGURE_WIFI_CHANGE;
    public static final int CMD_WIFI_CHANGE_DETECTED;
    public static final int CMD_WIFI_CHANGES_STABILIZED;
    public static final int CMD_OP_SUCCEEDED;
    public static final int CMD_OP_FAILED;
    public static final int CMD_PERIOD_CHANGED;
    public static final int CMD_FULL_SCAN_RESULT;
    private android.content.Context mContext;
    private android.net.wifi.IWifiScanner mService;
    private static final int INVALID_KEY;
    private static int sListenerKey;
    private static final android.util.SparseArray sListenerMap;
    private static final java.lang.Object sListenerMapLock;
    private static com.android.internal.util.AsyncChannel sAsyncChannel;
    private static java.util.concurrent.CountDownLatch sConnected;
    private static final java.lang.Object sThreadRefLock;
    private static int sThreadRefCount;
    private static android.os.HandlerThread sHandlerThread;

    public java.util.List getAvailableChannels(int)
    {
        android.net.wifi.WifiScanner r0;
        int i0;
        android.os.Bundle r1;
        android.net.wifi.IWifiScanner $r2;
        java.util.ArrayList $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.wifi.WifiScanner;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.wifi.WifiScanner: android.net.wifi.IWifiScanner mService>;

        r1 = interfaceinvoke $r2.<android.net.wifi.IWifiScanner: android.os.Bundle getAvailableChannels(int)>(i0);

        $r3 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>("Channels");

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBackgroundScan(android.net.wifi.WifiScanner$ScanSettings, android.net.wifi.WifiScanner$ScanListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$ScanSettings r1;
        android.net.wifi.WifiScanner$ScanListener r2;
        com.android.internal.util.AsyncChannel $r3;
        int $i0;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$ScanSettings;

        r2 := @parameter1: android.net.wifi.WifiScanner$ScanListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r3 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiScanner: int putListener(java.lang.Object)>(r2);

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(159746, 0, $i0, r1);

        return;
    }

    public void stopBackgroundScan(android.net.wifi.WifiScanner$ScanListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$ScanListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$ScanListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r2 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiScanner: int removeListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(159747, 0, $i0);

        return;
    }

    public android.net.wifi.ScanResult[] getScanResults()
    {
        android.net.wifi.WifiScanner r0;
        android.os.Message r1;
        android.net.wifi.ScanResult[] r2, $r5;
        com.android.internal.util.AsyncChannel $r3;
        java.lang.Object $r4;

        r0 := @this: android.net.wifi.WifiScanner;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r3 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        r1 = virtualinvoke $r3.<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>(159748, 0);

        $r4 = r1.<android.os.Message: java.lang.Object obj>;

        $r5 = (android.net.wifi.ScanResult[]) $r4;

        r2 = (android.net.wifi.ScanResult[]) $r5;

        return r2;
    }

    public void configureWifiChange(int, int, int, int, int, android.net.wifi.WifiScanner$BssidInfo[])
    {
        android.net.wifi.WifiScanner r0;
        int i0, i1, i2, i3, i4;
        android.net.wifi.WifiScanner$BssidInfo[] r1;
        android.net.wifi.WifiScanner$WifiChangeSettings r2, $r3;

        r0 := @this: android.net.wifi.WifiScanner;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: android.net.wifi.WifiScanner$BssidInfo[];

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r3 = new android.net.wifi.WifiScanner$WifiChangeSettings;

        specialinvoke $r3.<android.net.wifi.WifiScanner$WifiChangeSettings: void <init>()>();

        r2 = $r3;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: int rssiSampleSize> = i0;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: int lostApSampleSize> = i1;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: int unchangedSampleSize> = i2;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: int minApsBreachingThreshold> = i3;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: int periodInMs> = i4;

        r2.<android.net.wifi.WifiScanner$WifiChangeSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos> = r1;

        virtualinvoke r0.<android.net.wifi.WifiScanner: void configureWifiChange(android.net.wifi.WifiScanner$WifiChangeSettings)>(r2);

        return;
    }

    public void startTrackingWifiChange(android.net.wifi.WifiScanner$WifiChangeListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$WifiChangeListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$WifiChangeListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r2 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiScanner: int putListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(159755, 0, $i0);

        return;
    }

    public void stopTrackingWifiChange(android.net.wifi.WifiScanner$WifiChangeListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$WifiChangeListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$WifiChangeListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r2 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiScanner: int removeListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(159756, 0, $i0);

        return;
    }

    public void configureWifiChange(android.net.wifi.WifiScanner$WifiChangeSettings)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$WifiChangeSettings r1;
        com.android.internal.util.AsyncChannel $r2;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$WifiChangeSettings;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r2 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(159757, 0, 0, r1);

        return;
    }

    public void startTrackingBssids(android.net.wifi.WifiScanner$BssidInfo[], int, android.net.wifi.WifiScanner$BssidListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$BssidInfo[] r1;
        int i0, $i1;
        android.net.wifi.WifiScanner$BssidListener r2;
        android.net.wifi.WifiScanner$HotlistSettings r3, $r4;
        com.android.internal.util.AsyncChannel $r5;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$BssidInfo[];

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.wifi.WifiScanner$BssidListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r4 = new android.net.wifi.WifiScanner$HotlistSettings;

        specialinvoke $r4.<android.net.wifi.WifiScanner$HotlistSettings: void <init>()>();

        r3 = $r4;

        r3.<android.net.wifi.WifiScanner$HotlistSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos> = r1;

        $r5 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i1 = staticinvoke <android.net.wifi.WifiScanner: int putListener(java.lang.Object)>(r2);

        virtualinvoke $r5.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(159750, 0, $i1, r3);

        return;
    }

    public void stopTrackingBssids(android.net.wifi.WifiScanner$BssidListener)
    {
        android.net.wifi.WifiScanner r0;
        android.net.wifi.WifiScanner$BssidListener r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.net.wifi.WifiScanner$BssidListener;

        specialinvoke r0.<android.net.wifi.WifiScanner: void validateChannel()>();

        $r2 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $i0 = staticinvoke <android.net.wifi.WifiScanner: int removeListener(java.lang.Object)>(r1);

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(159751, 0, $i0);

        return;
    }

    public void <init>(android.content.Context, android.net.wifi.IWifiScanner)
    {
        android.net.wifi.WifiScanner r0;
        android.content.Context r1;
        android.net.wifi.IWifiScanner r2;

        r0 := @this: android.net.wifi.WifiScanner;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.wifi.IWifiScanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.wifi.WifiScanner: android.content.Context mContext> = r1;

        r0.<android.net.wifi.WifiScanner: android.net.wifi.IWifiScanner mService> = r2;

        specialinvoke r0.<android.net.wifi.WifiScanner: void init()>();

        return;
    }

    private void init()
    {
        android.net.wifi.WifiScanner r0;
        java.lang.Object r1, $r6;
        android.os.Messenger r2;
        java.lang.Throwable r5, $r18;
        int $i0, $i1;
        android.net.wifi.IWifiScanner $r7;
        android.os.HandlerThread $r8, $r11, $r12;
        com.android.internal.util.AsyncChannel $r9, $r17;
        java.util.concurrent.CountDownLatch $r10, $r16;
        android.net.wifi.WifiScanner$ServiceHandler $r13, r23;
        android.content.Context $r14;
        android.os.Looper $r15;
        java.lang.SecurityException $r19;
        java.lang.InterruptedException $r20;
        android.os.RemoteException $r21;

        r0 := @this: android.net.wifi.WifiScanner;

        $r6 = <android.net.wifi.WifiScanner: java.lang.Object sThreadRefLock>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $i0 = <android.net.wifi.WifiScanner: int sThreadRefCount>;

        $i1 = $i0 + 1;

        <android.net.wifi.WifiScanner: int sThreadRefCount> = $i1;

        if $i1 != 1 goto label12;

        r2 = null;

     label02:
        $r7 = r0.<android.net.wifi.WifiScanner: android.net.wifi.IWifiScanner mService>;

        r2 = interfaceinvoke $r7.<android.net.wifi.IWifiScanner: android.os.Messenger getMessenger()>();

     label03:
        goto label06;

     label04:
        $r21 := @caughtexception;

        goto label06;

     label05:
        $r19 := @caughtexception;

     label06:
        if r2 != null goto label08;

        <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel> = null;

        exitmonitor r1;

     label07:
        return;

     label08:
        $r8 = new android.os.HandlerThread;

        specialinvoke $r8.<android.os.HandlerThread: void <init>(java.lang.String)>("WifiScanner");

        <android.net.wifi.WifiScanner: android.os.HandlerThread sHandlerThread> = $r8;

        $r9 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r9.<com.android.internal.util.AsyncChannel: void <init>()>();

        <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel> = $r9;

        $r10 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r10.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        <android.net.wifi.WifiScanner: java.util.concurrent.CountDownLatch sConnected> = $r10;

        $r11 = <android.net.wifi.WifiScanner: android.os.HandlerThread sHandlerThread>;

        virtualinvoke $r11.<android.os.HandlerThread: void start()>();

        $r13 = new android.net.wifi.WifiScanner$ServiceHandler;

        $r12 = <android.net.wifi.WifiScanner: android.os.HandlerThread sHandlerThread>;

        $r15 = virtualinvoke $r12.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r13.<android.net.wifi.WifiScanner$ServiceHandler: void <init>(android.os.Looper)>($r15);

        r23 = $r13;

        $r17 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        $r14 = r0.<android.net.wifi.WifiScanner: android.content.Context mContext>;

        virtualinvoke $r17.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r14, r23, r2);

     label09:
        $r16 = <android.net.wifi.WifiScanner: java.util.concurrent.CountDownLatch sConnected>;

        virtualinvoke $r16.<java.util.concurrent.CountDownLatch: void await()>();

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiScanner", "interrupted wait at init");

     label12:
        exitmonitor r1;

     label13:
        goto label16;

     label14:
        $r18 := @caughtexception;

        r5 = $r18;

        exitmonitor r1;

     label15:
        throw r5;

     label16:
        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.SecurityException from label02 to label03 with label05;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label01 to label07 with label14;
        catch java.lang.Throwable from label08 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void validateChannel()
    {
        android.net.wifi.WifiScanner r0;
        com.android.internal.util.AsyncChannel $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.net.wifi.WifiScanner;

        $r1 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No permission to access and change wifi or a bad initialization");

        throw $r2;

     label1:
        return;
    }

    private static int putListener(java.lang.Object)
    {
        java.lang.Object r0, r1, $r3;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r5;
        android.util.SparseArray $r4;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r3 = <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $i1 = <android.net.wifi.WifiScanner: int sListenerKey>;

        $i2 = $i1 + 1;

        <android.net.wifi.WifiScanner: int sListenerKey> = $i2;

        i0 = $i1;

        if i0 == 0 goto label2;

        $r4 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r0);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return i0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static java.lang.Object getListener(int)
    {
        int i0;
        java.lang.Object r0, r1, $r3;
        java.lang.Throwable r2, $r5;
        android.util.SparseArray $r4;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r3 = <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock>;

        r0 = $r3;

        entermonitor $r3;

     label2:
        $r4 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        r1 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        exitmonitor r0;

     label3:
        return r1;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static int getListenerKey(java.lang.Object)
    {
        java.lang.Object r0, r1, $r3;
        int i0, $i1;
        java.lang.Throwable r2, $r6;
        android.util.SparseArray $r4, $r5;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r3 = <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        i0 = virtualinvoke $r4.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r0);

        if i0 != -1 goto label4;

        exitmonitor r1;

     label3:
        return 0;

     label4:
        $r5 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        $i1 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i0);

        exitmonitor r1;

     label5:
        return $i1;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static java.lang.Object removeListener(int)
    {
        int i0;
        java.lang.Object r0, r1, $r3;
        java.lang.Throwable r2, $r6;
        android.util.SparseArray $r4, $r5;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r3 = <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock>;

        r0 = $r3;

        entermonitor $r3;

     label2:
        $r4 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        r1 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r0;

     label3:
        return r1;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static int removeListener(java.lang.Object)
    {
        java.lang.Object r0, r1, $r3;
        int i0;
        java.lang.Throwable r2, $r5;
        android.util.SparseArray $r4;

        r0 := @parameter0: java.lang.Object;

        i0 = staticinvoke <android.net.wifi.WifiScanner: int getListenerKey(java.lang.Object)>(r0);

        if i0 != 0 goto label1;

        return i0;

     label1:
        $r3 = <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label3:
        return i0;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static com.android.internal.util.AsyncChannel access$000()
    {
        com.android.internal.util.AsyncChannel $r0;

        $r0 = <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel>;

        return $r0;
    }

    static com.android.internal.util.AsyncChannel access$002(com.android.internal.util.AsyncChannel)
    {
        com.android.internal.util.AsyncChannel r0;

        r0 := @parameter0: com.android.internal.util.AsyncChannel;

        <android.net.wifi.WifiScanner: com.android.internal.util.AsyncChannel sAsyncChannel> = r0;

        return r0;
    }

    static java.util.concurrent.CountDownLatch access$100()
    {
        java.util.concurrent.CountDownLatch $r0;

        $r0 = <android.net.wifi.WifiScanner: java.util.concurrent.CountDownLatch sConnected>;

        return $r0;
    }

    static java.lang.Object access$200(int)
    {
        int i0;
        java.lang.Object $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.net.wifi.WifiScanner: java.lang.Object getListener(int)>(i0);

        return $r0;
    }

    static java.lang.Object access$300(int)
    {
        int i0;
        java.lang.Object $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.net.wifi.WifiScanner: java.lang.Object removeListener(int)>(i0);

        return $r0;
    }

    static void <clinit>()
    {
        android.util.SparseArray $r0;
        java.lang.Object $r1, $r2;

        <android.net.wifi.WifiScanner: int INVALID_KEY> = 0;

        <android.net.wifi.WifiScanner: int CMD_FULL_SCAN_RESULT> = 159764;

        <android.net.wifi.WifiScanner: int CMD_PERIOD_CHANGED> = 159763;

        <android.net.wifi.WifiScanner: int CMD_OP_FAILED> = 159762;

        <android.net.wifi.WifiScanner: int CMD_OP_SUCCEEDED> = 159761;

        <android.net.wifi.WifiScanner: int CMD_WIFI_CHANGES_STABILIZED> = 159760;

        <android.net.wifi.WifiScanner: int CMD_WIFI_CHANGE_DETECTED> = 159759;

        <android.net.wifi.WifiScanner: int CMD_CONFIGURE_WIFI_CHANGE> = 159757;

        <android.net.wifi.WifiScanner: int CMD_STOP_TRACKING_CHANGE> = 159756;

        <android.net.wifi.WifiScanner: int CMD_START_TRACKING_CHANGE> = 159755;

        <android.net.wifi.WifiScanner: int CMD_AP_LOST> = 159754;

        <android.net.wifi.WifiScanner: int CMD_AP_FOUND> = 159753;

        <android.net.wifi.WifiScanner: int CMD_RESET_HOTLIST> = 159751;

        <android.net.wifi.WifiScanner: int CMD_SET_HOTLIST> = 159750;

        <android.net.wifi.WifiScanner: int CMD_SCAN_RESULT> = 159749;

        <android.net.wifi.WifiScanner: int CMD_GET_SCAN_RESULTS> = 159748;

        <android.net.wifi.WifiScanner: int CMD_STOP_BACKGROUND_SCAN> = 159747;

        <android.net.wifi.WifiScanner: int CMD_START_BACKGROUND_SCAN> = 159746;

        <android.net.wifi.WifiScanner: int CMD_SCAN> = 159744;

        <android.net.wifi.WifiScanner: int BASE> = 159744;

        <android.net.wifi.WifiScanner: boolean DBG> = 1;

        <android.net.wifi.WifiScanner: java.lang.String TAG> = "WifiScanner";

        <android.net.wifi.WifiScanner: int REPORT_EVENT_FULL_SCAN_RESULT> = 2;

        <android.net.wifi.WifiScanner: int REPORT_EVENT_AFTER_EACH_SCAN> = 1;

        <android.net.wifi.WifiScanner: int REPORT_EVENT_AFTER_BUFFER_FULL> = 0;

        <android.net.wifi.WifiScanner: java.lang.String GET_AVAILABLE_CHANNELS_EXTRA> = "Channels";

        <android.net.wifi.WifiScanner: int REASON_NOT_AUTHORIZED> = -4;

        <android.net.wifi.WifiScanner: int REASON_INVALID_REQUEST> = -3;

        <android.net.wifi.WifiScanner: int REASON_INVALID_LISTENER> = -2;

        <android.net.wifi.WifiScanner: int REASON_UNSPECIFIED> = -1;

        <android.net.wifi.WifiScanner: int REASON_SUCCEEDED> = 0;

        <android.net.wifi.WifiScanner: int MAX_SCAN_PERIOD_MS> = 1024000;

        <android.net.wifi.WifiScanner: int MIN_SCAN_PERIOD_MS> = 1000;

        <android.net.wifi.WifiScanner: int WIFI_BAND_BOTH_WITH_DFS> = 7;

        <android.net.wifi.WifiScanner: int WIFI_BAND_BOTH> = 3;

        <android.net.wifi.WifiScanner: int WIFI_BAND_5_GHZ_WITH_DFS> = 6;

        <android.net.wifi.WifiScanner: int WIFI_BAND_5_GHZ_DFS_ONLY> = 4;

        <android.net.wifi.WifiScanner: int WIFI_BAND_5_GHZ> = 2;

        <android.net.wifi.WifiScanner: int WIFI_BAND_24_GHZ> = 1;

        <android.net.wifi.WifiScanner: int WIFI_BAND_UNSPECIFIED> = 0;

        <android.net.wifi.WifiScanner: int sListenerKey> = 1;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        <android.net.wifi.WifiScanner: android.util.SparseArray sListenerMap> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.net.wifi.WifiScanner: java.lang.Object sListenerMapLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.net.wifi.WifiScanner: java.lang.Object sThreadRefLock> = $r2;

        return;
    }
}
