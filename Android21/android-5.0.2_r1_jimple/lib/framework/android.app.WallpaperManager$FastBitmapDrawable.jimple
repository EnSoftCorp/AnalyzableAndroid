class android.app.WallpaperManager$FastBitmapDrawable extends android.graphics.drawable.Drawable
{
    private final android.graphics.Bitmap mBitmap;
    private final int mWidth;
    private final int mHeight;
    private int mDrawLeft;
    private int mDrawTop;
    private final android.graphics.Paint mPaint;

    private void <init>(android.graphics.Bitmap)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        android.graphics.Bitmap r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Paint $r2, $r5;
        android.graphics.PorterDuffXfermode $r3;
        android.graphics.PorterDuff$Mode $r4;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.app.WallpaperManager$FastBitmapDrawable: android.graphics.Bitmap mBitmap> = r1;

        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        r0.<android.app.WallpaperManager$FastBitmapDrawable: int mWidth> = $i0;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        r0.<android.app.WallpaperManager$FastBitmapDrawable: int mHeight> = $i1;

        $i3 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mWidth>;

        $i2 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mHeight>;

        virtualinvoke r0.<android.app.WallpaperManager$FastBitmapDrawable: void setBounds(int,int,int,int)>(0, 0, $i3, $i2);

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        r0.<android.app.WallpaperManager$FastBitmapDrawable: android.graphics.Paint mPaint> = $r2;

        $r5 = r0.<android.app.WallpaperManager$FastBitmapDrawable: android.graphics.Paint mPaint>;

        $r3 = new android.graphics.PorterDuffXfermode;

        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC>;

        specialinvoke $r3.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r4);

        virtualinvoke $r5.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>($r3);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        android.graphics.Canvas r1;
        int $i0, $i1;
        android.graphics.Paint $r2;
        float $f0, $f1;
        android.graphics.Bitmap $r3;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r3 = r0.<android.app.WallpaperManager$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mDrawLeft>;

        $f1 = (float) $i0;

        $i1 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mDrawTop>;

        $f0 = (float) $i1;

        $r2 = r0.<android.app.WallpaperManager$FastBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r3, $f1, $f0, $r2);

        return;
    }

    public int getOpacity()
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        return -1;
    }

    public void setBounds(int, int, int, int)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i5 = i2 - i0;

        $i4 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mWidth>;

        $i6 = $i5 - $i4;

        $i7 = $i6 / 2;

        $i8 = i0 + $i7;

        r0.<android.app.WallpaperManager$FastBitmapDrawable: int mDrawLeft> = $i8;

        $i10 = i3 - i1;

        $i9 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mHeight>;

        $i11 = $i10 - $i9;

        $i12 = $i11 / 2;

        $i13 = i1 + $i12;

        r0.<android.app.WallpaperManager$FastBitmapDrawable: int mDrawTop> = $i13;

        return;
    }

    public void setAlpha(int)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported with this drawable");

        throw $r1;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        android.graphics.ColorFilter r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported with this drawable");

        throw $r2;
    }

    public void setDither(boolean)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported with this drawable");

        throw $r1;
    }

    public void setFilterBitmap(boolean)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported with this drawable");

        throw $r1;
    }

    public int getIntrinsicWidth()
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int $i0;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        $i0 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mWidth>;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int $i0;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        $i0 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mHeight>;

        return $i0;
    }

    public int getMinimumWidth()
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int $i0;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        $i0 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mWidth>;

        return $i0;
    }

    public int getMinimumHeight()
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        int $i0;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        $i0 = r0.<android.app.WallpaperManager$FastBitmapDrawable: int mHeight>;

        return $i0;
    }

    void <init>(android.graphics.Bitmap, android.app.WallpaperManager$1)
    {
        android.app.WallpaperManager$FastBitmapDrawable r0;
        android.graphics.Bitmap r1;
        android.app.WallpaperManager$1 r2;

        r0 := @this: android.app.WallpaperManager$FastBitmapDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.app.WallpaperManager$1;

        specialinvoke r0.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap)>(r1);

        return;
    }
}
