public class android.app.WallpaperManager extends java.lang.Object
{
    private static java.lang.String TAG;
    private static boolean DEBUG;
    private float mWallpaperXStep;
    private float mWallpaperYStep;
    private static final java.lang.String PROP_WALLPAPER;
    private static final java.lang.String PROP_WALLPAPER_COMPONENT;
    public static final java.lang.String ACTION_CROP_AND_SET_WALLPAPER;
    public static final java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER;
    public static final java.lang.String ACTION_CHANGE_LIVE_WALLPAPER;
    public static final java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT;
    public static final java.lang.String WALLPAPER_PREVIEW_META_DATA;
    public static final java.lang.String COMMAND_TAP;
    public static final java.lang.String COMMAND_SECONDARY_TAP;
    public static final java.lang.String COMMAND_DROP;
    private final android.content.Context mContext;
    private static final java.lang.Object sSync;
    private static android.app.WallpaperManager$Globals sGlobals;

    static void initGlobals(android.os.Looper)
    {
        android.os.Looper r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.app.WallpaperManager$Globals $r4, $r5;

        r0 := @parameter0: android.os.Looper;

        $r3 = <android.app.WallpaperManager: java.lang.Object sSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        if $r4 != null goto label2;

        $r5 = new android.app.WallpaperManager$Globals;

        specialinvoke $r5.<android.app.WallpaperManager$Globals: void <init>(android.os.Looper)>(r0);

        <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals> = $r5;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.WallpaperManager r0;
        android.content.Context r1;
        android.os.Handler r2;
        android.os.Looper $r3;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = -1.0F;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = -1.0F;

        r0.<android.app.WallpaperManager: android.content.Context mContext> = r1;

        $r3 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        staticinvoke <android.app.WallpaperManager: void initGlobals(android.os.Looper)>($r3);

        return;
    }

    public static android.app.WallpaperManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.WallpaperManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wallpaper");

        $r2 = (android.app.WallpaperManager) $r1;

        return $r2;
    }

    public android.app.IWallpaperManager getIWallpaperManager()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;
        android.app.IWallpaperManager $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r1);

        return $r2;
    }

    public android.graphics.drawable.Drawable getDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable r2, $r5;
        android.content.Context $r3, $r6;
        android.app.WallpaperManager$Globals $r4;
        android.content.res.Resources $r7;

        r0 := @this: android.app.WallpaperManager;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r3, 1);

        if r1 == null goto label1;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r6 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r7, r1);

        r2 = $r5;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return r2;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = virtualinvoke r0.<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)>(0, 0, 0, 0.0F, 0.0F);

        return $r1;
    }

    public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float)
    {
        android.app.WallpaperManager r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, i29, i30, i31, i32;
        boolean z0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, f18, f19;
        android.content.res.Resources r1;
        java.io.BufferedInputStream r2, $r14, $r21, $r38, r45, r51;
        android.graphics.Bitmap r3, r9, r50, r52;
        android.graphics.BitmapFactory$Options r4, r5, r7, $r19, $r39, $r40;
        android.graphics.RectF r6, $r25, $r27, $r31, r46, r54;
        android.graphics.Canvas r8, $r33;
        android.app.WallpaperManager$Globals $r10;
        android.graphics.Paint r11, $r32;
        android.content.Context $r12, $r16, $r22, $r36;
        android.app.IWallpaperManager $r13;
        android.graphics.drawable.BitmapDrawable $r15, $r28;
        java.io.InputStream $r17, $r23, $r35;
        java.lang.String $r18, $r26, $r37, $r42, $r43, $r44;
        android.graphics.Rect $r24, r47;
        android.graphics.Matrix $r29, r53;
        android.graphics.Matrix$ScaleToFit $r30;
        android.graphics.Bitmap$Config $r34;
        java.io.IOException $r41;
        android.graphics.BitmapRegionDecoder r48;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        $r10 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r13 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r10);

        if $r13 != null goto label01;

        $r43 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r43, "WallpaperService not running");

        return null;

     label01:
        $r12 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        $f6 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f0);

        f18 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f6);

        $f7 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, f1);

        f19 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f7);

        $r14 = new java.io.BufferedInputStream;

        $r16 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r17 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context)>($r16);

        specialinvoke $r14.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17);

        r2 = $r14;

        if r2 != null goto label02;

        $r44 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r44, "default wallpaper input stream is null");

        return null;

     label02:
        if i0 <= 0 goto label03;

        if i1 > 0 goto label04;

     label03:
        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, null);

        $r15 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r15.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, r3);

        return $r15;

     label04:
        $r19 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r19.<android.graphics.BitmapFactory$Options: void <init>()>();

        r4 = $r19;

        r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, r4);

        $i3 = r4.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i3 == 0 goto label05;

        $i5 = r4.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i5 == 0 goto label05;

        i29 = r4.<android.graphics.BitmapFactory$Options: int outWidth>;

        i2 = r4.<android.graphics.BitmapFactory$Options: int outHeight>;

        goto label06;

     label05:
        $r18 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r18, "default wallpaper dimensions are 0");

        return null;

     label06:
        $r21 = new java.io.BufferedInputStream;

        $r22 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r23 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context)>($r22);

        specialinvoke $r21.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r23);

        r45 = $r21;

        i30 = staticinvoke <java.lang.Math: int min(int,int)>(i29, i0);

        i31 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i1);

        if z0 == 0 goto label07;

        r46 = staticinvoke <android.app.WallpaperManager: android.graphics.RectF getMaxCropRect(int,int,int,int,float,float)>(i29, i2, i30, i31, f18, f19);

        goto label08;

     label07:
        $i6 = i29 - i30;

        $f10 = (float) $i6;

        f2 = $f10 * f18;

        $f9 = (float) i30;

        f3 = f2 + $f9;

        $i7 = i2 - i31;

        $f8 = (float) $i7;

        f4 = $f8 * f19;

        $f11 = (float) i31;

        f5 = f4 + $f11;

        $r25 = new android.graphics.RectF;

        specialinvoke $r25.<android.graphics.RectF: void <init>(float,float,float,float)>(f2, f4, f3, f5);

        r46 = $r25;

     label08:
        $r24 = new android.graphics.Rect;

        specialinvoke $r24.<android.graphics.Rect: void <init>()>();

        r47 = $r24;

        virtualinvoke r46.<android.graphics.RectF: void roundOut(android.graphics.Rect)>(r47);

        $i8 = virtualinvoke r47.<android.graphics.Rect: int width()>();

        if $i8 <= 0 goto label09;

        $i10 = virtualinvoke r47.<android.graphics.Rect: int height()>();

        if $i10 > 0 goto label10;

     label09:
        $r26 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r26, "crop has bad values for full size image");

        return null;

     label10:
        $i9 = virtualinvoke r47.<android.graphics.Rect: int width()>();

        $i14 = $i9 / i30;

        $i13 = virtualinvoke r47.<android.graphics.Rect: int height()>();

        $i12 = $i13 / i31;

        i32 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i12);

        r48 = null;

     label11:
        r48 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>(r45, 1);

     label12:
        goto label14;

     label13:
        $r41 := @caughtexception;

        $r42 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r42, "cannot open region decoder for default wallpaper");

     label14:
        r50 = null;

        if r48 == null goto label16;

        $r39 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r39.<android.graphics.BitmapFactory$Options: void <init>()>();

        r5 = $r39;

        if i32 <= 1 goto label15;

        r5.<android.graphics.BitmapFactory$Options: int inSampleSize> = i32;

     label15:
        r50 = virtualinvoke r48.<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r47, r5);

        virtualinvoke r48.<android.graphics.BitmapRegionDecoder: void recycle()>();

     label16:
        if r50 != null goto label19;

        $r38 = new java.io.BufferedInputStream;

        $r36 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r35 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context)>($r36);

        specialinvoke $r38.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r35);

        r51 = $r38;

        r52 = null;

        if r51 == null goto label18;

        $r40 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r40.<android.graphics.BitmapFactory$Options: void <init>()>();

        r7 = $r40;

        if i32 <= 1 goto label17;

        r7.<android.graphics.BitmapFactory$Options: int inSampleSize> = i32;

     label17:
        r52 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r51, null, r7);

     label18:
        if r52 == null goto label19;

        $i21 = r47.<android.graphics.Rect: int left>;

        $i20 = r47.<android.graphics.Rect: int top>;

        $i24 = virtualinvoke r47.<android.graphics.Rect: int width()>();

        $i25 = virtualinvoke r47.<android.graphics.Rect: int height()>();

        r50 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r52, $i21, $i20, $i24, $i25);

     label19:
        if r50 != null goto label20;

        $r37 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r37, "cannot decode default wallpaper");

        return null;

     label20:
        if i30 <= 0 goto label22;

        if i31 <= 0 goto label22;

        $i16 = virtualinvoke r50.<android.graphics.Bitmap: int getWidth()>();

        if $i16 != i30 goto label21;

        $i22 = virtualinvoke r50.<android.graphics.Bitmap: int getHeight()>();

        if $i22 == i31 goto label22;

     label21:
        $r29 = new android.graphics.Matrix;

        specialinvoke $r29.<android.graphics.Matrix: void <init>()>();

        r53 = $r29;

        $r27 = new android.graphics.RectF;

        $i15 = virtualinvoke r50.<android.graphics.Bitmap: int getWidth()>();

        $f14 = (float) $i15;

        $i17 = virtualinvoke r50.<android.graphics.Bitmap: int getHeight()>();

        $f15 = (float) $i17;

        specialinvoke $r27.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f14, $f15);

        r54 = $r27;

        $r31 = new android.graphics.RectF;

        $f13 = (float) i30;

        $f12 = (float) i31;

        specialinvoke $r31.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f13, $f12);

        r6 = $r31;

        $r30 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r53.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r54, r6, $r30);

        $f16 = virtualinvoke r6.<android.graphics.RectF: float width()>();

        $i19 = (int) $f16;

        $f17 = virtualinvoke r6.<android.graphics.RectF: float height()>();

        $i18 = (int) $f17;

        $r34 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r9 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i19, $i18, $r34);

        if r9 == null goto label22;

        $r33 = new android.graphics.Canvas;

        specialinvoke $r33.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r9);

        r8 = $r33;

        $r32 = new android.graphics.Paint;

        specialinvoke $r32.<android.graphics.Paint: void <init>()>();

        r11 = $r32;

        virtualinvoke r11.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        virtualinvoke r8.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r50, r53, r11);

        r50 = r9;

     label22:
        $r28 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r28.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r1, r50);

        return $r28;

        catch java.io.IOException from label11 to label12 with label13;
    }

    private static android.graphics.RectF getMaxCropRect(int, int, int, int, float, float)
    {
        int i0, i1, i2, i3;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, f29;
        android.graphics.RectF r0, $r1;
        byte $b4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>()>();

        r0 = $r1;

        $f4 = (float) i0;

        $f3 = (float) i1;

        $f8 = $f4 / $f3;

        $f6 = (float) i2;

        $f5 = (float) i3;

        $f7 = $f6 / $f5;

        $b4 = $f8 cmpl $f7;

        if $b4 <= 0 goto label1;

        r0.<android.graphics.RectF: float top> = 0.0F;

        $f20 = (float) i1;

        r0.<android.graphics.RectF: float bottom> = $f20;

        $f24 = (float) i2;

        $f22 = (float) i1;

        $f19 = (float) i3;

        $f21 = $f22 / $f19;

        f2 = $f24 * $f21;

        $f23 = (float) i0;

        $f27 = $f23 - f2;

        $f28 = $f27 * f0;

        r0.<android.graphics.RectF: float left> = $f28;

        $f25 = r0.<android.graphics.RectF: float left>;

        $f26 = $f25 + f2;

        r0.<android.graphics.RectF: float right> = $f26;

        goto label2;

     label1:
        r0.<android.graphics.RectF: float left> = 0.0F;

        $f10 = (float) i0;

        r0.<android.graphics.RectF: float right> = $f10;

        $f14 = (float) i3;

        $f12 = (float) i0;

        $f9 = (float) i2;

        $f11 = $f12 / $f9;

        f29 = $f14 * $f11;

        $f13 = (float) i1;

        $f16 = $f13 - f29;

        $f15 = $f16 * f1;

        r0.<android.graphics.RectF: float top> = $f15;

        $f18 = r0.<android.graphics.RectF: float top>;

        $f17 = $f18 + f29;

        r0.<android.graphics.RectF: float bottom> = $f17;

     label2:
        return r0;
    }

    public android.graphics.drawable.Drawable peekDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.BitmapDrawable r2, $r5;
        android.content.Context $r3, $r6;
        android.app.WallpaperManager$Globals $r4;
        android.content.res.Resources $r7;

        r0 := @this: android.app.WallpaperManager;

        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r3, 0);

        if r1 == null goto label1;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r6 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r7, r1);

        r2 = $r5;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(0);

        return r2;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable getFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;
        android.app.WallpaperManager$FastBitmapDrawable $r4;

        r0 := @this: android.app.WallpaperManager;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r2, 1);

        if r1 == null goto label1;

        $r4 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r4.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r1, null);

        return $r4;

     label1:
        return null;
    }

    public android.graphics.drawable.Drawable peekFastDrawable()
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.app.WallpaperManager$Globals $r3;
        android.app.WallpaperManager$FastBitmapDrawable $r4;

        r0 := @this: android.app.WallpaperManager;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r2 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r2, 0);

        if r1 == null goto label1;

        $r4 = new android.app.WallpaperManager$FastBitmapDrawable;

        specialinvoke $r4.<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>(r1, null);

        return $r4;

     label1:
        return null;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        android.app.WallpaperManager$Globals $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.app.WallpaperManager$Globals: android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)>($r1, 1);

        return $r3;
    }

    public void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r1;

        r0 := @this: android.app.WallpaperManager;

        $r1 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        virtualinvoke $r1.<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>();

        return;
    }

    public android.app.WallpaperInfo getWallpaperInfo()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        android.app.WallpaperInfo $r6;
        java.lang.String $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.app.WallpaperManager;

     label1:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label3;

        $r7 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "WallpaperService not running");

     label2:
        return null;

     label3:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r4);

        $r6 = interfaceinvoke $r5.<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>();

     label4:
        return $r6;

     label5:
        $r8 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)
    {
        android.app.WallpaperManager r0;
        android.net.Uri r1;
        android.content.pm.PackageManager r2;
        android.content.Intent r3, r4, $r10, $r12;
        android.content.pm.ResolveInfo r5;
        java.util.List r6, r20;
        java.lang.String $r7, $r8, $r17;
        boolean $z0;
        android.content.Context $r9;
        int $i0, $i1;
        android.content.pm.ActivityInfo $r14;
        java.lang.IllegalArgumentException $r15, $r18, $r19;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.net.Uri;

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image URI must not be null");

        throw $r18;

     label1:
        $r7 = "content";

        $r8 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image URI must be of the content scheme type");

        throw $r19;

     label2:
        $r9 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r2 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.service.wallpaper.CROP_AND_SET_WALLPAPER", r1);

        r3 = $r10;

        virtualinvoke r3.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        $r12 = new android.content.Intent;

        specialinvoke $r12.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        r4 = virtualinvoke $r12.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        r5 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r4, 65536);

        if r5 == null goto label3;

        $r14 = r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r17 = $r14.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r17);

        r6 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r3, 0);

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 <= 0 goto label3;

        return r3;

     label3:
        virtualinvoke r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("com.android.wallpapercropper");

        r20 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>(r3, 0);

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        return r3;

     label4:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use passed URI to set wallpaper; check that the type returned by ContentProvider matches image/*");

        throw $r15;
    }

    public void setResource(int) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        int i0;
        android.content.res.Resources r1;
        android.os.ParcelFileDescriptor r2;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r3, $r16;
        java.lang.Throwable r4, $r19;
        android.app.WallpaperManager$Globals $r5, $r8;
        android.app.IWallpaperManager $r6, $r9;
        android.content.Context $r7;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.String $r12, $r14, $r17;
        java.io.InputStream $r15;
        android.os.RemoteException $r18;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r5);

        if $r6 != null goto label1;

        $r17 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r17, "WallpaperService not running");

        return;

     label1:
        $r7 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r9 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r8);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r12 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = interfaceinvoke $r9.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>($r14);

        if r2 == null goto label7;

        r3 = null;

     label2:
        $r16 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r16.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

        r3 = $r16;

        $r15 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        specialinvoke r0.<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>($r15, r3);

     label3:
        if r3 == null goto label7;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        goto label7;

     label4:
        $r19 := @caughtexception;

        r4 = $r19;

     label5:
        if r3 == null goto label6;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label6:
        throw r4;

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch android.os.RemoteException from label1 to label7 with label8;
    }

    public void setBitmap(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.graphics.Bitmap r1;
        android.os.ParcelFileDescriptor r2;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r3, $r9;
        java.lang.Throwable r4, $r13;
        android.app.WallpaperManager$Globals $r5, $r7;
        android.app.IWallpaperManager $r6, $r8;
        android.graphics.Bitmap$CompressFormat $r10;
        java.lang.String $r11;
        android.os.RemoteException $r12;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Bitmap;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r5);

        if $r6 != null goto label01;

        $r11 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r11, "WallpaperService not running");

        return;

     label01:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r7);

        r2 = interfaceinvoke $r8.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>(null);

        if r2 != null goto label03;

     label02:
        return;

     label03:
        r3 = null;

     label04:
        $r9 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r9.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

        r3 = $r9;

        $r10 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r1.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r10, 90, r3);

     label05:
        if r3 == null goto label09;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        goto label09;

     label06:
        $r13 := @caughtexception;

        r4 = $r13;

     label07:
        if r3 == null goto label08;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label08:
        throw r4;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label09 with label10;
    }

    public void setStream(java.io.InputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        android.os.ParcelFileDescriptor r2;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r3, $r9;
        java.lang.Throwable r4, $r12;
        android.app.WallpaperManager$Globals $r5, $r7;
        android.app.IWallpaperManager $r6, $r8;
        java.lang.String $r10;
        android.os.RemoteException $r11;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r5);

        if $r6 != null goto label01;

        $r10 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r10, "WallpaperService not running");

        return;

     label01:
        $r7 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r8 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r7);

        r2 = interfaceinvoke $r8.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>(null);

        if r2 != null goto label03;

     label02:
        return;

     label03:
        r3 = null;

     label04:
        $r9 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r9.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

        r3 = $r9;

        specialinvoke r0.<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>(r1, r3);

     label05:
        if r3 == null goto label09;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        goto label09;

     label06:
        $r12 := @caughtexception;

        r4 = $r12;

     label07:
        if r3 == null goto label08;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label08:
        throw r4;

     label09:
        goto label11;

     label10:
        $r11 := @caughtexception;

     label11:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label09 with label10;
    }

    private void setWallpaper(java.io.InputStream, java.io.FileOutputStream) throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        java.io.InputStream r1;
        java.io.FileOutputStream r2;
        byte[] r3;
        int i0, $i1;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.FileOutputStream;

        r3 = newarray (byte)[32768];

     label1:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3);

        i0 = $i1;

        if $i1 <= 0 goto label2;

        virtualinvoke r2.<java.io.FileOutputStream: void write(byte[],int,int)>(r3, 0, i0);

        goto label1;

     label2:
        return;
    }

    public boolean hasResourceWallpaper(int)
    {
        android.app.WallpaperManager r0;
        int i0;
        android.content.res.Resources r1;
        java.lang.String r2, $r8, $r12;
        android.app.WallpaperManager$Globals $r3, $r10;
        android.app.IWallpaperManager $r4, $r11;
        android.content.Context $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        boolean $z0;
        android.os.RemoteException $r13;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r4 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r3);

        if $r4 != null goto label1;

        $r12 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r12, "WallpaperService not running");

        return 0;

     label1:
        $r5 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("res:");

        $r8 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r11 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r10);

        $z0 = interfaceinvoke $r11.<android.app.IWallpaperManager: boolean hasNamedWallpaper(java.lang.String)>(r2);

     label2:
        return $z0;

     label3:
        $r13 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDesiredMinimumWidth()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        int $i0;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label1;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        return 0;

     label1:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r4);

        $i0 = interfaceinvoke $r5.<android.app.IWallpaperManager: int getWidthHint()>();

     label2:
        return $i0;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDesiredMinimumHeight()
    {
        android.app.WallpaperManager r0;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        int $i0;
        java.lang.String $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label1;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        return 0;

     label1:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r4);

        $i0 = interfaceinvoke $r5.<android.app.IWallpaperManager: int getHeightHint()>();

     label2:
        return $i0;

     label3:
        $r7 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void suggestDesiredDimensions(int, int)
    {
        android.app.WallpaperManager r0;
        int i0, i1, i2;
        android.app.WallpaperManager$Globals $r2, $r4;
        android.app.IWallpaperManager $r3, $r5;
        java.lang.String $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6;
        double $d0, $d1, $d2, $d3;
        android.os.RemoteException $r7;
        java.lang.Exception $r8;

        r0 := @this: android.app.WallpaperManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label01:
        i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("sys.max_texture_size", 0);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        i2 = 0;

     label04:
        if i2 <= 0 goto label07;

        if i0 > i2 goto label05;

        if i1 <= i2 goto label07;

     label05:
        $f1 = (float) i1;

        $f0 = (float) i0;

        f6 = $f1 / $f0;

        if i0 <= i1 goto label06;

        i0 = i2;

        $f5 = (float) i0;

        $f4 = $f5 * f6;

        $d3 = (double) $f4;

        $d2 = $d3 + 0.5;

        i1 = (int) $d2;

        goto label07;

     label06:
        i1 = i2;

        $f2 = (float) i1;

        $f3 = $f2 / f6;

        $d1 = (double) $f3;

        $d0 = $d1 + 0.5;

        i0 = (int) $d0;

     label07:
        $r2 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r3 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r2);

        if $r3 != null goto label08;

        $r6 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r6, "WallpaperService not running");

        goto label09;

     label08:
        $r4 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r5 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r4);

        interfaceinvoke $r5.<android.app.IWallpaperManager: void setDimensionHints(int,int)>(i0, i1);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

     label11:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch android.os.RemoteException from label01 to label09 with label10;
    }

    public void setDisplayPadding(android.graphics.Rect)
    {
        android.app.WallpaperManager r0;
        android.graphics.Rect r1;
        android.app.WallpaperManager$Globals $r3, $r5;
        android.app.IWallpaperManager $r4, $r6;
        java.lang.String $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.graphics.Rect;

     label1:
        $r3 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r4 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r3);

        if $r4 != null goto label2;

        $r7 = <android.app.WallpaperManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "WallpaperService not running");

        goto label3;

     label2:
        $r5 = <android.app.WallpaperManager: android.app.WallpaperManager$Globals sGlobals>;

        $r6 = staticinvoke <android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)>($r5);

        interfaceinvoke $r6.<android.app.IWallpaperManager: void setDisplayPadding(android.graphics.Rect)>(r1);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void setDisplayOffset(android.os.IBinder, int, int)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        int i0, i1;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r3.<android.view.IWindowSession: void setWallpaperDisplayOffset(android.os.IBinder,int,int)>(r1, i0, i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWallpaperOffsets(android.os.IBinder, float, float)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        float f0, f1, $f2, $f3;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        $f3 = r0.<android.app.WallpaperManager: float mWallpaperXStep>;

        $f2 = r0.<android.app.WallpaperManager: float mWallpaperYStep>;

        interfaceinvoke $r3.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r1, f0, f1, $f3, $f2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setWallpaperOffsetSteps(float, float)
    {
        android.app.WallpaperManager r0;
        float f0, f1;

        r0 := @this: android.app.WallpaperManager;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.app.WallpaperManager: float mWallpaperXStep> = f0;

        r0.<android.app.WallpaperManager: float mWallpaperYStep> = f1;

        return;
    }

    public void sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.os.Bundle r3;
        android.view.IWindowSession $r5;
        android.os.RemoteException $r7;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

     label1:
        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r5.<android.view.IWindowSession: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>(r1, r2, i0, i1, i2, r3, 0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearWallpaperOffsets(android.os.IBinder)
    {
        android.app.WallpaperManager r0;
        android.os.IBinder r1;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.WallpaperManager;

        r1 := @parameter0: android.os.IBinder;

     label1:
        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        interfaceinvoke $r3.<android.view.IWindowSession: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>(r1, -1.0F, -1.0F, -1.0F, -1.0F);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clear() throws java.io.IOException
    {
        android.app.WallpaperManager r0;
        android.content.Context $r1;
        java.io.InputStream $r2;

        r0 := @this: android.app.WallpaperManager;

        $r1 = r0.<android.app.WallpaperManager: android.content.Context mContext>;

        $r2 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context)>($r1);

        virtualinvoke r0.<android.app.WallpaperManager: void setStream(java.io.InputStream)>($r2);

        return;
    }

    public static java.io.InputStream openDefaultWallpaper(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.File r2, $r6;
        boolean $z0, $z1;
        android.content.res.Resources $r4;
        java.io.InputStream $r5;
        java.io.FileInputStream $r7;
        java.io.IOException $r8;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.wallpaper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label4;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r6;

        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

     label1:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        $r4 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302161);

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static android.content.ComponentName getDefaultWallpaperComponent(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, r3;
        android.content.ComponentName r2, r4;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.wallpaper_component");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r0.<android.content.Context: java.lang.String getString(int)>(17039390);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label2;

        r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r3);

        if r4 == null goto label2;

        return r4;

     label2:
        return null;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <android.app.WallpaperManager: java.lang.String TAG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        <android.app.WallpaperManager: java.lang.String COMMAND_DROP> = "android.home.drop";

        <android.app.WallpaperManager: java.lang.String COMMAND_SECONDARY_TAP> = "android.wallpaper.secondaryTap";

        <android.app.WallpaperManager: java.lang.String COMMAND_TAP> = "android.wallpaper.tap";

        <android.app.WallpaperManager: java.lang.String WALLPAPER_PREVIEW_META_DATA> = "android.wallpaper.preview";

        <android.app.WallpaperManager: java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT> = "android.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT";

        <android.app.WallpaperManager: java.lang.String ACTION_CHANGE_LIVE_WALLPAPER> = "android.service.wallpaper.CHANGE_LIVE_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER> = "android.service.wallpaper.LIVE_WALLPAPER_CHOOSER";

        <android.app.WallpaperManager: java.lang.String ACTION_CROP_AND_SET_WALLPAPER> = "android.service.wallpaper.CROP_AND_SET_WALLPAPER";

        <android.app.WallpaperManager: java.lang.String PROP_WALLPAPER_COMPONENT> = "ro.config.wallpaper_component";

        <android.app.WallpaperManager: java.lang.String PROP_WALLPAPER> = "ro.config.wallpaper";

        <android.app.WallpaperManager: java.lang.String TAG> = "WallpaperManager";

        <android.app.WallpaperManager: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.Object)[0];

        <android.app.WallpaperManager: java.lang.Object sSync> = $r0;

        return;
    }
}
