public class android.hardware.camera2.legacy.SizeAreaComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        android.hardware.camera2.legacy.SizeAreaComparator r0;

        r0 := @this: android.hardware.camera2.legacy.SizeAreaComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(android.hardware.Camera$Size, android.hardware.Camera$Size)
    {
        android.hardware.camera2.legacy.SizeAreaComparator r0;
        android.hardware.Camera$Size r1, r2;
        long l0, l1, l2, l3, $l6, $l8;
        boolean $z0;
        int $i4, $i5, $i7, $i9;
        byte $b10, $b11, $b12, $b13, $b14;

        r0 := @this: android.hardware.camera2.legacy.SizeAreaComparator;

        r1 := @parameter0: android.hardware.Camera$Size;

        r2 := @parameter1: android.hardware.Camera$Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "size must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "size2 must not be null");

        $z0 = virtualinvoke r1.<android.hardware.Camera$Size: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i4 = r1.<android.hardware.Camera$Size: int width>;

        l0 = (long) $i4;

        $i5 = r2.<android.hardware.Camera$Size: int width>;

        l1 = (long) $i5;

        $i7 = r1.<android.hardware.Camera$Size: int height>;

        $l6 = (long) $i7;

        l2 = l0 * $l6;

        $i9 = r2.<android.hardware.Camera$Size: int height>;

        $l8 = (long) $i9;

        l3 = l1 * $l8;

        $b11 = l2 cmp l3;

        if $b11 != 0 goto label4;

        $b12 = l0 cmp l1;

        if $b12 <= 0 goto label2;

        $b14 = 1;

        goto label3;

     label2:
        $b14 = -1;

     label3:
        return $b14;

     label4:
        $b10 = l2 cmp l3;

        if $b10 <= 0 goto label5;

        $b13 = 1;

        goto label6;

     label5:
        $b13 = -1;

     label6:
        return $b13;
    }

    public static android.hardware.Camera$Size findLargestByArea(java.util.List)
    {
        java.util.List r0;
        android.hardware.camera2.legacy.SizeAreaComparator $r2;
        java.lang.Object $r3;
        android.hardware.Camera$Size $r4;

        r0 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "sizes must not be null");

        $r2 = new android.hardware.camera2.legacy.SizeAreaComparator;

        specialinvoke $r2.<android.hardware.camera2.legacy.SizeAreaComparator: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r0, $r2);

        $r4 = (android.hardware.Camera$Size) $r3;

        return $r4;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        android.hardware.camera2.legacy.SizeAreaComparator r0;
        java.lang.Object r1, r2;
        android.hardware.Camera$Size $r3, $r4;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.SizeAreaComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (android.hardware.Camera$Size) r1;

        $r3 = (android.hardware.Camera$Size) r2;

        $i0 = virtualinvoke r0.<android.hardware.camera2.legacy.SizeAreaComparator: int compare(android.hardware.Camera$Size,android.hardware.Camera$Size)>($r4, $r3);

        return $i0;
    }
}
