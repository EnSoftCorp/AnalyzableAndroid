class android.app.WallpaperManager$Globals extends android.app.IWallpaperManagerCallback$Stub
{
    private android.app.IWallpaperManager mService;
    private android.graphics.Bitmap mWallpaper;
    private android.graphics.Bitmap mDefaultWallpaper;
    private static final int MSG_CLEAR_WALLPAPER;

    void <init>(android.os.Looper)
    {
        android.app.WallpaperManager$Globals r0;
        android.os.Looper r1;
        android.os.IBinder r2;
        android.app.IWallpaperManager $r3;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<android.app.IWallpaperManagerCallback$Stub: void <init>()>();

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wallpaper");

        $r3 = staticinvoke <android.app.IWallpaperManager$Stub: android.app.IWallpaperManager asInterface(android.os.IBinder)>(r2);

        r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService> = $r3;

        return;
    }

    public void onWallpaperChanged()
    {
        android.app.WallpaperManager$Globals r0, r1;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 = r0;

        entermonitor r0;

     label1:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = null;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.graphics.Bitmap peekWallpaperBitmap(android.content.Context, boolean)
    {
        android.app.WallpaperManager$Globals r0, r2;
        android.content.Context r1;
        boolean z0;
        java.lang.OutOfMemoryError r3, $r16;
        java.lang.Throwable r4, $r17;
        android.graphics.Bitmap $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r2 = r0;

        entermonitor r0;

     label01:
        $r6 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        if $r6 == null goto label03;

        $r14 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        exitmonitor r2;

     label02:
        return $r14;

     label03:
        $r7 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        if $r7 == null goto label05;

        $r13 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        exitmonitor r2;

     label04:
        return $r13;

     label05:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = null;

     label06:
        $r8 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context)>(r1);

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = $r8;

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

        r3 = $r16;

        $r15 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "No memory load current wallpaper", r3);

     label09:
        if z0 == 0 goto label12;

        $r10 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        if $r10 != null goto label11;

        $r11 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getDefaultWallpaperLocked(android.content.Context)>(r1);

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = $r11;

        $r12 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        exitmonitor r2;

     label10:
        return $r12;

     label11:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

     label12:
        $r9 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        exitmonitor r2;

     label13:
        return $r9;

     label14:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r2;

     label15:
        throw r4;

        catch java.lang.OutOfMemoryError from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label10 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager$Globals r0, r1;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 = r0;

        entermonitor r0;

     label1:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = null;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        android.os.Bundle r2, $r10;
        android.os.ParcelFileDescriptor r3;
        android.graphics.BitmapFactory$Options r4, $r12;
        android.graphics.Bitmap r5;
        java.lang.Throwable r7, $r15;
        android.app.IWallpaperManager $r9, $r11;
        java.io.FileDescriptor $r13;
        java.lang.String $r14, $r19;
        android.os.RemoteException $r16;
        java.lang.OutOfMemoryError $r17, r22;
        java.io.IOException $r18, $r20, $r21;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

        $r9 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        if $r9 != null goto label01;

        $r14 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r14, "WallpaperService not running");

        return null;

     label01:
        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        r2 = $r10;

        $r11 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        r3 = interfaceinvoke $r11.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)>(r0, r2);

        if r3 == null goto label16;

     label02:
        $r12 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r12.<android.graphics.BitmapFactory$Options: void <init>()>();

        r4 = $r12;

        $r13 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r5 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r13, null, r4);

     label03:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

     label06:
        return r5;

     label07:
        $r17 := @caughtexception;

        r22 = $r17;

        $r19 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r19, "Can\'t decode file", r22);

     label08:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label09:
        goto label16;

     label10:
        $r21 := @caughtexception;

        goto label16;

     label11:
        $r15 := @caughtexception;

        r7 = $r15;

     label12:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label13:
        goto label15;

     label14:
        $r20 := @caughtexception;

     label15:
        throw r7;

     label16:
        goto label18;

     label17:
        $r16 := @caughtexception;

     label18:
        return null;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.OutOfMemoryError from label02 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch android.os.RemoteException from label01 to label06 with label17;
        catch android.os.RemoteException from label07 to label16 with label17;
    }

    private android.graphics.Bitmap getDefaultWallpaperLocked(android.content.Context)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        java.io.InputStream r2;
        android.graphics.BitmapFactory$Options r3, $r8;
        android.graphics.Bitmap r4;
        java.lang.Throwable r6, $r12;
        java.io.IOException $r9, $r13, $r14;
        java.lang.OutOfMemoryError $r10, r15;
        java.lang.String $r11;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

        r2 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context)>(r1);

        if r2 == null goto label15;

     label01:
        $r8 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r8.<android.graphics.BitmapFactory$Options: void <init>()>();

        r3 = $r8;

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, r3);

     label02:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

     label05:
        return r4;

     label06:
        $r10 := @caughtexception;

        r15 = $r10;

        $r11 = staticinvoke <android.app.WallpaperManager: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Can\'t decode stream", r15);

     label07:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label08:
        goto label15;

     label09:
        $r9 := @caughtexception;

        goto label15;

     label10:
        $r12 := @caughtexception;

        r6 = $r12;

     label11:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r14 := @caughtexception;

     label14:
        throw r6;

     label15:
        return null;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.OutOfMemoryError from label01 to label02 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    static android.app.IWallpaperManager access$100(android.app.WallpaperManager$Globals)
    {
        android.app.WallpaperManager$Globals r0;
        android.app.IWallpaperManager $r1;

        r0 := @parameter0: android.app.WallpaperManager$Globals;

        $r1 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.app.WallpaperManager$Globals: int MSG_CLEAR_WALLPAPER> = 1;

        return;
    }
}
