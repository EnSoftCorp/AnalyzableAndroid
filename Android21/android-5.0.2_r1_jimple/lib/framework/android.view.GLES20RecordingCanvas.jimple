class android.view.GLES20RecordingCanvas extends android.view.GLES20Canvas
{
    private static final int POOL_LIMIT;
    private static final android.util.Pools$SynchronizedPool sPool;
    android.view.RenderNode mNode;

    private void <init>()
    {
        android.view.GLES20RecordingCanvas r0;

        r0 := @this: android.view.GLES20RecordingCanvas;

        specialinvoke r0.<android.view.GLES20Canvas: void <init>()>();

        return;
    }

    static android.view.GLES20RecordingCanvas obtain(android.view.RenderNode)
    {
        android.view.RenderNode r0;
        android.view.GLES20RecordingCanvas r1, $r4;
        android.util.Pools$SynchronizedPool $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: android.view.RenderNode;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("node cannot be null");

        throw $r5;

     label1:
        $r2 = <android.view.GLES20RecordingCanvas: android.util.Pools$SynchronizedPool sPool>;

        $r3 = virtualinvoke $r2.<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r1 = (android.view.GLES20RecordingCanvas) $r3;

        if r1 != null goto label2;

        $r4 = new android.view.GLES20RecordingCanvas;

        specialinvoke $r4.<android.view.GLES20RecordingCanvas: void <init>()>();

        r1 = $r4;

     label2:
        r1.<android.view.GLES20RecordingCanvas: android.view.RenderNode mNode> = r0;

        return r1;
    }

    void recycle()
    {
        android.view.GLES20RecordingCanvas r0;
        android.util.Pools$SynchronizedPool $r1;

        r0 := @this: android.view.GLES20RecordingCanvas;

        r0.<android.view.GLES20RecordingCanvas: android.view.RenderNode mNode> = null;

        $r1 = <android.view.GLES20RecordingCanvas: android.util.Pools$SynchronizedPool sPool>;

        virtualinvoke $r1.<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0);

        return;
    }

    long finishRecording()
    {
        android.view.GLES20RecordingCanvas r0;
        long $l0, $l1;

        r0 := @this: android.view.GLES20RecordingCanvas;

        $l0 = r0.<android.view.GLES20RecordingCanvas: long mRenderer>;

        $l1 = staticinvoke <android.view.GLES20RecordingCanvas: long nFinishRecording(long)>($l0);

        return $l1;
    }

    public boolean isRecordingFor(java.lang.Object)
    {
        android.view.GLES20RecordingCanvas r0;
        java.lang.Object r1;
        android.view.RenderNode $r2;
        boolean $z0;

        r0 := @this: android.view.GLES20RecordingCanvas;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.view.GLES20RecordingCanvas: android.view.RenderNode mNode>;

        if r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        android.util.Pools$SynchronizedPool $r0;

        <android.view.GLES20RecordingCanvas: int POOL_LIMIT> = 25;

        $r0 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r0.<android.util.Pools$SynchronizedPool: void <init>(int)>(25);

        <android.view.GLES20RecordingCanvas: android.util.Pools$SynchronizedPool sPool> = $r0;

        return;
    }
}
