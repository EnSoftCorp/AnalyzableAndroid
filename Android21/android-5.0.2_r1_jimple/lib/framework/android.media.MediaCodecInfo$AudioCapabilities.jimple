public final class android.media.MediaCodecInfo$AudioCapabilities extends java.lang.Object
{
    private static final java.lang.String TAG;
    private android.media.MediaCodecInfo$CodecCapabilities mParent;
    private android.util.Range mBitrateRange;
    private int[] mSampleRates;
    private android.util.Range[] mSampleRateRanges;
    private int mMaxInputChannelCount;
    private static final int MAX_INPUT_CHANNEL_COUNT;

    public android.util.Range getBitrateRange()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range $r1;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        return $r1;
    }

    public int[] getSupportedSampleRates()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int[] $r1, $r2, $r3;
        int $i0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        return $r3;
    }

    public android.util.Range[] getSupportedSampleRateRanges()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range[] $r1, $r2, $r4;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0);

        $r4 = (android.util.Range[]) $r3;

        return $r4;
    }

    public int getMaxInputChannelCount()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int $i0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $i0 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        return $i0;
    }

    private void <init>()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.media.MediaCodecInfo$AudioCapabilities create(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaFormat r0;
        android.media.MediaCodecInfo$CodecCapabilities r1;
        android.media.MediaCodecInfo$AudioCapabilities r2, $r3;

        r0 := @parameter0: android.media.MediaFormat;

        r1 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        $r3 = new android.media.MediaCodecInfo$AudioCapabilities;

        specialinvoke $r3.<android.media.MediaCodecInfo$AudioCapabilities: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<android.media.MediaCodecInfo$AudioCapabilities: void init(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r0, r1);

        return r2;
    }

    public void init(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecInfo$CodecCapabilities r2;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent> = r2;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void initWithPlatformLimits()>();

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLevelLimits()>();

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void parseFromInfo(android.media.MediaFormat)>(r1);

        return;
    }

    private void initWithPlatformLimits()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        java.lang.Integer $r1, $r2, $r5, $r6;
        android.util.Range $r3, $r7;
        android.util.Range[] $r4;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange> = $r3;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount> = 30;

        $r4 = newarray (android.util.Range)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8000);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(96000);

        $r7 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

        $r4[0] = $r7;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = $r4;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = null;

        return;
    }

    private boolean supports(java.lang.Integer, java.lang.Integer)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        java.lang.Integer r1, r2;
        int i0, $i1, $i2, $i3;
        android.util.Range[] $r3;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Integer;

        if r2 == null goto label2;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i1 < 1 goto label1;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        if $i2 <= $i3 goto label2;

     label1:
        return 0;

     label2:
        if r1 == null goto label3;

        $r3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        i0 = staticinvoke <android.media.Utils: int binarySearchDistinctRanges(android.util.Range[],java.lang.Comparable)>($r3, r1);

        if i0 >= 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public boolean isSampleRateSupported(int)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0;
        java.lang.Integer $r1;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>($r1, null);

        return $z0;
    }

    private void limitSampleRates(int[])
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int[] r1, r3;
        java.util.ArrayList r2, $r4;
        int i0, i1, i2, $i3;
        android.util.Range[] $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.Integer $r8, $r9, $r10;
        boolean $z0;
        android.util.Range $r11;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: int[];

        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        i2 = r3[i1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>($r8, null);

        if $z0 == 0 goto label2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r11 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r9, $r10);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r5 = newarray (android.util.Range)[$i3];

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (android.util.Range[]) $r6;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = $r7;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void createDiscreteSampleRates()>();

        return;
    }

    private void createDiscreteSampleRates()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0, $i1, $i2, $i3;
        android.util.Range[] $r1, $r3, $r4;
        int[] $r2, $r6;
        android.util.Range $r5;
        java.lang.Comparable $r7;
        java.lang.Integer $r8;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i1 = lengthof $r1;

        $r2 = newarray (int)[$i1];

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = $r2;

        i0 = 0;

     label1:
        $r3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i2 = lengthof $r3;

        if i0 >= $i2 goto label2;

        $r6 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $r4 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $r5 = $r4[i0];

        $r7 = virtualinvoke $r5.<android.util.Range: java.lang.Comparable getLower()>();

        $r8 = (java.lang.Integer) $r7;

        $i3 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r6[i0] = $i3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void limitSampleRates(android.util.Range[])
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range[] r1, r2, $r4, $r5;
        int i0, i1;
        android.util.Range r3;
        java.lang.Comparable $r6, $r8;
        java.lang.Integer $r7;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.util.Range[];

        staticinvoke <android.media.Utils: void sortDistinctRanges(android.util.Range[])>(r1);

        $r4 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $r5 = staticinvoke <android.media.Utils: android.util.Range[] intersectSortedDistinctRanges(android.util.Range[],android.util.Range[])>($r4, r1);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = $r5;

        r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r6 = virtualinvoke r3.<android.util.Range: java.lang.Comparable getLower()>();

        $r7 = (java.lang.Integer) $r6;

        $r8 = virtualinvoke r3.<android.util.Range: java.lang.Comparable getUpper()>();

        $z0 = virtualinvoke $r7.<java.lang.Integer: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = null;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void createDiscreteSampleRates()>();

        return;
    }

    private void applyLevelLimits()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int[] r1, $r6, $r17, $r28, $r30, $r31, $r33, $r36, $r40;
        android.util.Range r2, r3;
        short s0;
        java.lang.String r4, $r13;
        android.media.MediaCodecInfo$CodecCapabilities $r5, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Integer $r7, $r8, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r32, $r34, $r35, $r37, $r38, $r39, $r41;
        android.util.Range[] $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        int $i2, $i3;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 = null;

        r2 = null;

        r3 = null;

        s0 = 0;

        $r5 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        r4 = virtualinvoke $r5.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/mpeg");

        if $z0 == 0 goto label01;

        $r40 = newarray (int)[9];

        $r40[0] = 8000;

        $r40[1] = 11025;

        $r40[2] = 12000;

        $r40[3] = 16000;

        $r40[4] = 22050;

        $r40[5] = 24000;

        $r40[6] = 32000;

        $r40[7] = 44100;

        $r40[8] = 48000;

        r1 = $r40;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8000);

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(320000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r41, $r38);

        s0 = 2;

        goto label12;

     label01:
        $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/3gpp");

        if $z1 == 0 goto label02;

        $r36 = newarray (int)[1];

        $r36[0] = 8000;

        r1 = $r36;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4750);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12200);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r35, $r39);

        s0 = 1;

        goto label12;

     label02:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/amr-wb");

        if $z2 == 0 goto label03;

        $r33 = newarray (int)[1];

        $r33[0] = 16000;

        r1 = $r33;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6600);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23850);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r32, $r37);

        s0 = 1;

        goto label12;

     label03:
        $z3 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/mp4a-latm");

        if $z3 == 0 goto label04;

        $r30 = newarray (int)[13];

        $r30[0] = 7350;

        $r30[1] = 8000;

        $r30[2] = 11025;

        $r30[3] = 12000;

        $r30[4] = 16000;

        $r30[5] = 22050;

        $r30[6] = 24000;

        $r30[7] = 32000;

        $r30[8] = 44100;

        $r30[9] = 48000;

        $r30[10] = 64000;

        $r30[11] = 88200;

        $r30[12] = 96000;

        r1 = $r30;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8000);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(510000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r29, $r34);

        s0 = 48;

        goto label12;

     label04:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/vorbis");

        if $z4 == 0 goto label05;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32000);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(500000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r27, $r26);

        $r31 = newarray (int)[6];

        $r31[0] = 8000;

        $r31[1] = 12000;

        $r31[2] = 16000;

        $r31[3] = 24000;

        $r31[4] = 48000;

        $r31[5] = 192000;

        r1 = $r31;

        s0 = 255;

        goto label12;

     label05:
        $z5 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/opus");

        if $z5 == 0 goto label06;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6000);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(510000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r23, $r24);

        $r28 = newarray (int)[5];

        $r28[0] = 8000;

        $r28[1] = 12000;

        $r28[2] = 16000;

        $r28[3] = 24000;

        $r28[4] = 48000;

        r1 = $r28;

        s0 = 255;

        goto label12;

     label06:
        $z6 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/raw");

        if $z6 == 0 goto label07;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(96000);

        r2 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r21, $r22);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10000000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r20, $r25);

        s0 = 8;

        goto label12;

     label07:
        $z7 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/flac");

        if $z7 == 0 goto label08;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(655350);

        r2 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r19, $r18);

        s0 = 255;

        goto label12;

     label08:
        $z8 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-alaw");

        if $z8 != 0 goto label09;

        $z10 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-mlaw");

        if $z10 == 0 goto label10;

     label09:
        $r6 = newarray (int)[1];

        $r6[0] = 8000;

        r1 = $r6;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64000);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r8, $r7);

        goto label12;

     label10:
        $z9 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/gsm");

        if $z9 == 0 goto label11;

        $r17 = newarray (int)[1];

        $r17[0] = 8000;

        r1 = $r17;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13000);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13000);

        r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r15, $r16);

        s0 = 1;

        goto label12;

     label11:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported mime ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioCapabilities", $r13);

        $r14 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        $i2 = $r14.<android.media.MediaCodecInfo$CodecCapabilities: int mError>;

        $i3 = $i2 | 2;

        $r14.<android.media.MediaCodecInfo$CodecCapabilities: int mError> = $i3;

     label12:
        if r1 == null goto label13;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(int[])>(r1);

        goto label14;

     label13:
        if r2 == null goto label14;

        $r9 = newarray (android.util.Range)[1];

        $r9[0] = r2;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(android.util.Range[])>($r9);

     label14:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLimits(int,android.util.Range)>(s0, r3);

        return;
    }

    private void applyLimits(int, android.util.Range)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0, $i1, $i2;
        android.util.Range r1, $r4, $r8, $r9;
        java.lang.Integer $r2, $r3, $r5, $r7;
        java.lang.Comparable $r6;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Range;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $i1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount> = $i2;

        if r1 == null goto label1;

        $r8 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r9 = virtualinvoke $r8.<android.util.Range: android.util.Range intersect(android.util.Range)>(r1);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange> = $r9;

     label1:
        return;
    }

    private void parseFromInfo(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        int i0, i1, $i2, $i3;
        android.util.Range r2, $r6, $r9;
        java.lang.String[] r3;
        android.util.Range[] r4;
        boolean $z0, $z1, $z2;
        java.lang.String $r5, $r7, $r8, $r10;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        i0 = 30;

        r2 = staticinvoke <android.media.MediaCodecInfo: android.util.Range access$000()>();

        $z0 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("sample-rate-ranges");

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("sample-rate-ranges");

        r3 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i3 = lengthof r3;

        r4 = newarray (android.util.Range)[$i3];

        i1 = 0;

     label1:
        $i2 = lengthof r3;

        if i1 >= $i2 goto label2;

        $r10 = r3[i1];

        $r9 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r10, null);

        r4[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(android.util.Range[])>(r4);

     label3:
        $z1 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("max-channel-count");

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("max-channel-count");

        i0 = staticinvoke <android.media.Utils: int parseIntSafely(java.lang.Object,int)>($r7, i0);

     label4:
        $z2 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("bitrate-range");

        if $z2 == 0 goto label5;

        $r5 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("bitrate");

        $r6 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r5, r2);

        r2 = virtualinvoke r2.<android.util.Range: android.util.Range intersect(android.util.Range)>($r6);

     label5:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLimits(int,android.util.Range)>(i0, r2);

        return;
    }

    public void setDefaultFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        android.util.Range $r2, $r4, $r10;
        java.lang.Comparable $r3, $r6, $r12;
        java.lang.Integer $r5, $r11;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        int[] $r7, $r8, $r9;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        $r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r3 = virtualinvoke $r2.<android.util.Range: java.lang.Comparable getLower()>();

        $r5 = (java.lang.Integer) $r3;

        $r4 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r6 = virtualinvoke $r4.<android.util.Range: java.lang.Comparable getUpper()>();

        $z0 = virtualinvoke $r5.<java.lang.Integer: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r10 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r12 = virtualinvoke $r10.<android.util.Range: java.lang.Comparable getLower()>();

        $r11 = (java.lang.Integer) $r12;

        $i3 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i3);

     label1:
        $i0 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        if $i0 != 1 goto label2;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", 1);

     label2:
        $r7 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        if $r7 == null goto label3;

        $r8 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $i1 = lengthof $r8;

        if $i1 != 1 goto label3;

        $r9 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $i2 = $r9[0];

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", $i2);

     label3:
        return;
    }

    public boolean supportsFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        java.util.Map r2;
        java.lang.Integer r3, r4;
        java.lang.Object $r5, $r6;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("sample-rate");

        r3 = (java.lang.Integer) $r5;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("channel-count");

        r4 = (java.lang.Integer) $r6;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>(r3, r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static void <clinit>()
    {
        <android.media.MediaCodecInfo$AudioCapabilities: int MAX_INPUT_CHANNEL_COUNT> = 30;

        <android.media.MediaCodecInfo$AudioCapabilities: java.lang.String TAG> = "AudioCapabilities";

        return;
    }
}
