public class android.renderscript.Program$BaseProgramBuilder extends java.lang.Object
{
    android.renderscript.RenderScript mRS;
    android.renderscript.Element[] mInputs;
    android.renderscript.Element[] mOutputs;
    android.renderscript.Type[] mConstants;
    android.renderscript.Type[] mTextures;
    android.renderscript.Program$TextureType[] mTextureTypes;
    java.lang.String[] mTextureNames;
    int mInputCount;
    int mOutputCount;
    int mConstantCount;
    int mTextureCount;
    java.lang.String mShader;

    protected void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.renderscript.RenderScript r1;
        android.renderscript.Element[] $r2, $r3;
        android.renderscript.Type[] $r4;
        android.renderscript.Program$TextureType[] $r5;
        java.lang.String[] $r6;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.RenderScript mRS> = r1;

        $r2 = newarray (android.renderscript.Element)[8];

        r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Element[] mInputs> = $r2;

        $r3 = newarray (android.renderscript.Element)[8];

        r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Element[] mOutputs> = $r3;

        $r4 = newarray (android.renderscript.Type)[8];

        r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Type[] mConstants> = $r4;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mInputCount> = 0;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mOutputCount> = 0;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount> = 0;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount> = 0;

        $r5 = newarray (android.renderscript.Program$TextureType)[8];

        r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$TextureType[] mTextureTypes> = $r5;

        $r6 = newarray (java.lang.String)[8];

        r0.<android.renderscript.Program$BaseProgramBuilder: java.lang.String[] mTextureNames> = $r6;

        return;
    }

    public android.renderscript.Program$BaseProgramBuilder setShader(java.lang.String)
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        java.lang.String r1;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<android.renderscript.Program$BaseProgramBuilder: java.lang.String mShader> = r1;

        return r0;
    }

    public android.renderscript.Program$BaseProgramBuilder setShader(android.content.res.Resources, int)
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.content.res.Resources r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i9;
        byte[] r2, r4;
        java.io.InputStream r3;
        java.lang.Throwable r5, $r8;
        java.lang.String $r6;
        java.io.IOException $r7;
        android.content.res.Resources$NotFoundException $r9;
        java.io.UnsupportedEncodingException $r10;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        r3 = virtualinvoke r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

     label01:
        r2 = newarray (byte)[1024];

        i1 = 0;

     label02:
        $i3 = lengthof r2;

        i2 = $i3 - i1;

        if i2 != 0 goto label03;

        $i4 = lengthof r2;

        $i5 = $i4 * 2;

        r4 = newarray (byte)[$i5];

        $i6 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, r4, 0, $i6);

        r2 = r4;

        $i7 = lengthof r2;

        i2 = $i7 - i1;

     label03:
        i9 = virtualinvoke r3.<java.io.InputStream: int read(byte[],int,int)>(r2, i1, i2);

        if i9 > 0 goto label04;

        goto label05;

     label04:
        i1 = i1 + i9;

        goto label02;

     label05:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        goto label08;

     label06:
        $r8 := @caughtexception;

        r5 = $r8;

     label07:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw r5;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r9 = new android.content.res.Resources$NotFoundException;

        specialinvoke $r9.<android.content.res.Resources$NotFoundException: void <init>()>();

        throw $r9;

     label10:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r2, 0, i1, "UTF-8");

        r0.<android.renderscript.Program$BaseProgramBuilder: java.lang.String mShader> = $r6;

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RenderScript shader creation", "Could not decode shader string");

     label13:
        return r0;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label01 to label08 with label09;
        catch java.io.UnsupportedEncodingException from label10 to label11 with label12;
    }

    public int getCurrentConstantIndex()
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        int $i0, $i1;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public int getCurrentTextureIndex()
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        int $i0, $i1;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public android.renderscript.Program$BaseProgramBuilder addConstant(android.renderscript.Type) throws java.lang.IllegalStateException
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.renderscript.Type r1;
        int $i0, $i1, $i2, $i3;
        android.renderscript.Element $r2;
        boolean $z0;
        android.renderscript.Type[] $r3;
        android.renderscript.RSIllegalArgumentException $r4, $r5;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.renderscript.Type;

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        if $i0 < 8 goto label1;

        $r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Max input count exceeded.");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r2.<android.renderscript.Element: boolean isComplex()>();

        if $z0 == 0 goto label2;

        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Complex elements not allowed.");

        throw $r4;

     label2:
        $r3 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Type[] mConstants>;

        $i1 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        $r3[$i1] = r1;

        $i2 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        $i3 = $i2 + 1;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount> = $i3;

        return r0;
    }

    public android.renderscript.Program$BaseProgramBuilder addTexture(android.renderscript.Program$TextureType) throws java.lang.IllegalArgumentException
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.renderscript.Program$TextureType r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.renderscript.Program$TextureType;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tex");

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$BaseProgramBuilder addTexture(android.renderscript.Program$TextureType,java.lang.String)>(r1, $r5);

        return r0;
    }

    public android.renderscript.Program$BaseProgramBuilder addTexture(android.renderscript.Program$TextureType, java.lang.String) throws java.lang.IllegalArgumentException
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.renderscript.Program$TextureType r1;
        java.lang.String r2;
        int $i0, $i1, $i2, $i3, $i4;
        android.renderscript.Program$TextureType[] $r3;
        java.lang.String[] $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.renderscript.Program$TextureType;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        if $i0 < 8 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max texture count exceeded.");

        throw $r5;

     label1:
        $r3 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$TextureType[] mTextureTypes>;

        $i1 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $r3[$i1] = r1;

        $r4 = r0.<android.renderscript.Program$BaseProgramBuilder: java.lang.String[] mTextureNames>;

        $i2 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $r4[$i2] = r2;

        $i3 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $i4 = $i3 + 1;

        r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount> = $i4;

        return r0;
    }

    protected void initProgram(android.renderscript.Program)
    {
        android.renderscript.Program$BaseProgramBuilder r0;
        android.renderscript.Program r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.renderscript.Element[] $r2, $r3, $r4, $r5, $r6, $r7;
        android.renderscript.Type[] $r8, $r9, $r10;
        android.renderscript.Program$TextureType[] $r11, $r12, $r13;
        java.lang.String[] $r14, $r15, $r16;

        r0 := @this: android.renderscript.Program$BaseProgramBuilder;

        r1 := @parameter0: android.renderscript.Program;

        $i0 = r0.<android.renderscript.Program$BaseProgramBuilder: int mInputCount>;

        $r2 = newarray (android.renderscript.Element)[$i0];

        r1.<android.renderscript.Program: android.renderscript.Element[] mInputs> = $r2;

        $r4 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Element[] mInputs>;

        $r3 = r1.<android.renderscript.Program: android.renderscript.Element[] mInputs>;

        $i1 = r0.<android.renderscript.Program$BaseProgramBuilder: int mInputCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i1);

        $i2 = r0.<android.renderscript.Program$BaseProgramBuilder: int mOutputCount>;

        $r5 = newarray (android.renderscript.Element)[$i2];

        r1.<android.renderscript.Program: android.renderscript.Element[] mOutputs> = $r5;

        $r7 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Element[] mOutputs>;

        $r6 = r1.<android.renderscript.Program: android.renderscript.Element[] mOutputs>;

        $i3 = r0.<android.renderscript.Program$BaseProgramBuilder: int mOutputCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i3);

        $i4 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        $r8 = newarray (android.renderscript.Type)[$i4];

        r1.<android.renderscript.Program: android.renderscript.Type[] mConstants> = $r8;

        $r10 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Type[] mConstants>;

        $r9 = r1.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $i5 = r0.<android.renderscript.Program$BaseProgramBuilder: int mConstantCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i5);

        $i6 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        r1.<android.renderscript.Program: int mTextureCount> = $i6;

        $i7 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $r11 = newarray (android.renderscript.Program$TextureType)[$i7];

        r1.<android.renderscript.Program: android.renderscript.Program$TextureType[] mTextures> = $r11;

        $r13 = r0.<android.renderscript.Program$BaseProgramBuilder: android.renderscript.Program$TextureType[] mTextureTypes>;

        $r12 = r1.<android.renderscript.Program: android.renderscript.Program$TextureType[] mTextures>;

        $i8 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, 0, $i8);

        $i9 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        $r14 = newarray (java.lang.String)[$i9];

        r1.<android.renderscript.Program: java.lang.String[] mTextureNames> = $r14;

        $r15 = r0.<android.renderscript.Program$BaseProgramBuilder: java.lang.String[] mTextureNames>;

        $r16 = r1.<android.renderscript.Program: java.lang.String[] mTextureNames>;

        $i10 = r0.<android.renderscript.Program$BaseProgramBuilder: int mTextureCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r16, 0, $i10);

        return;
    }
}
