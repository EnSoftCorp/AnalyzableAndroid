public class android.media.MediaPlayer extends java.lang.Object implements android.media.SubtitleController$Listener
{
    public static final boolean METADATA_UPDATE_ONLY;
    public static final boolean METADATA_ALL;
    public static final boolean APPLY_METADATA_FILTER;
    public static final boolean BYPASS_METADATA_FILTER;
    private static final java.lang.String TAG;
    private static final java.lang.String IMEDIA_PLAYER;
    private long mNativeContext;
    private long mNativeSurfaceTexture;
    private int mListenerContext;
    private android.view.SurfaceHolder mSurfaceHolder;
    private android.media.MediaPlayer$EventHandler mEventHandler;
    private android.os.PowerManager$WakeLock mWakeLock;
    private boolean mScreenOnWhilePlaying;
    private boolean mStayAwake;
    private final com.android.internal.app.IAppOpsService mAppOps;
    private int mStreamType;
    private int mUsage;
    private static final int INVOKE_ID_GET_TRACK_INFO;
    private static final int INVOKE_ID_ADD_EXTERNAL_SOURCE;
    private static final int INVOKE_ID_ADD_EXTERNAL_SOURCE_FD;
    private static final int INVOKE_ID_SELECT_TRACK;
    private static final int INVOKE_ID_DESELECT_TRACK;
    private static final int INVOKE_ID_SET_VIDEO_SCALE_MODE;
    private static final int INVOKE_ID_GET_SELECTED_TRACK;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
    private static final int KEY_PARAMETER_AUDIO_ATTRIBUTES;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_VTT;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_CEA_608;
    private android.media.SubtitleController mSubtitleController;
    private final java.lang.Object mInbandSubtitleLock;
    private android.media.SubtitleTrack[] mInbandSubtitleTracks;
    private int mSelectedSubtitleTrackIndex;
    private java.util.Vector mOutOfBandSubtitleTracks;
    private java.util.Vector mOpenSubtitleSources;
    private android.media.MediaPlayer$OnSubtitleDataListener mSubtitleDataListener;
    private static final int MEDIA_NOP;
    private static final int MEDIA_PREPARED;
    private static final int MEDIA_PLAYBACK_COMPLETE;
    private static final int MEDIA_BUFFERING_UPDATE;
    private static final int MEDIA_SEEK_COMPLETE;
    private static final int MEDIA_SET_VIDEO_SIZE;
    private static final int MEDIA_STARTED;
    private static final int MEDIA_PAUSED;
    private static final int MEDIA_STOPPED;
    private static final int MEDIA_SKIPPED;
    private static final int MEDIA_TIMED_TEXT;
    private static final int MEDIA_ERROR;
    private static final int MEDIA_INFO;
    private static final int MEDIA_SUBTITLE_DATA;
    private android.media.MediaPlayer$TimeProvider mTimeProvider;
    private android.media.MediaPlayer$OnPreparedListener mOnPreparedListener;
    private android.media.MediaPlayer$OnCompletionListener mOnCompletionListener;
    private android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener;
    private android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener;
    private android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener;
    private android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener;
    private android.media.MediaPlayer$OnSubtitleDataListener mOnSubtitleDataListener;
    public static final int MEDIA_ERROR_UNKNOWN;
    public static final int MEDIA_ERROR_SERVER_DIED;
    public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK;
    public static final int MEDIA_ERROR_IO;
    public static final int MEDIA_ERROR_MALFORMED;
    public static final int MEDIA_ERROR_UNSUPPORTED;
    public static final int MEDIA_ERROR_TIMED_OUT;
    private android.media.MediaPlayer$OnErrorListener mOnErrorListener;
    public static final int MEDIA_INFO_UNKNOWN;
    public static final int MEDIA_INFO_STARTED_AS_NEXT;
    public static final int MEDIA_INFO_VIDEO_RENDERING_START;
    public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING;
    public static final int MEDIA_INFO_BUFFERING_START;
    public static final int MEDIA_INFO_BUFFERING_END;
    public static final int MEDIA_INFO_BAD_INTERLEAVING;
    public static final int MEDIA_INFO_NOT_SEEKABLE;
    public static final int MEDIA_INFO_METADATA_UPDATE;
    public static final int MEDIA_INFO_EXTERNAL_METADATA_UPDATE;
    public static final int MEDIA_INFO_TIMED_TEXT_ERROR;
    public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE;
    public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT;
    private android.media.MediaPlayer$OnInfoListener mOnInfoListener;

    public void <init>()
    {
        android.media.MediaPlayer r0;
        android.os.Looper r1, $r5, $r6, r15;
        android.os.IBinder r2;
        java.lang.Object $r3;
        android.media.MediaPlayer$1 $r4;
        android.media.MediaPlayer$TimeProvider $r7;
        java.util.Vector $r8, $r9;
        android.media.SubtitleTrack[] $r10;
        com.android.internal.app.IAppOpsService $r11;
        java.lang.ref.WeakReference $r12;
        android.media.MediaPlayer$EventHandler $r13, $r14;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

        r0.<android.media.MediaPlayer: int mStreamType> = -2147483648;

        r0.<android.media.MediaPlayer: int mUsage> = -1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaPlayer: java.lang.Object mInbandSubtitleLock> = $r3;

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

        $r4 = new android.media.MediaPlayer$1;

        specialinvoke $r4.<android.media.MediaPlayer$1: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mSubtitleDataListener> = $r4;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r1 = $r5;

        if $r5 == null goto label1;

        $r14 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r14.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>(r0, r0, r1);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r14;

        goto label3;

     label1:
        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r15 = $r6;

        if $r6 == null goto label2;

        $r13 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r13.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>(r0, r0, r15);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r13;

        goto label3;

     label2:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = null;

     label3:
        $r7 = new android.media.MediaPlayer$TimeProvider;

        specialinvoke $r7.<android.media.MediaPlayer$TimeProvider: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = $r7;

        $r8 = new java.util.Vector;

        specialinvoke $r8.<java.util.Vector: void <init>()>();

        r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks> = $r8;

        $r9 = new java.util.Vector;

        specialinvoke $r9.<java.util.Vector: void <init>()>();

        r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources> = $r9;

        $r10 = newarray (android.media.SubtitleTrack)[0];

        r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks> = $r10;

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r11 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>(r2);

        r0.<android.media.MediaPlayer: com.android.internal.app.IAppOpsService mAppOps> = $r11;

        $r12 = new java.lang.ref.WeakReference;

        specialinvoke $r12.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        specialinvoke r0.<android.media.MediaPlayer: void native_setup(java.lang.Object)>($r12);

        return;
    }

    private native void _setVideoSurface(android.view.Surface);

    public android.os.Parcel newRequest()
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1;

        r0 := @this: android.media.MediaPlayer;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        return r1;
    }

    public void invoke(android.os.Parcel, android.os.Parcel)
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1, r2;
        int i0;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.os.Parcel;

        i0 = specialinvoke r0.<android.media.MediaPlayer: int native_invoke(android.os.Parcel,android.os.Parcel)>(r1, r2);

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        if i0 == 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failure code: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public void setDisplay(android.view.SurfaceHolder)
    {
        android.media.MediaPlayer r0;
        android.view.SurfaceHolder r1;
        android.view.Surface r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.view.SurfaceHolder;

        r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder> = r1;

        if r1 == null goto label1;

        r2 = interfaceinvoke r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>(r2);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    public void setSurface(android.view.Surface)
    {
        android.media.MediaPlayer r0;
        android.view.Surface r1;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.view.Surface;

        $z0 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "setScreenOnWhilePlaying(true) is ineffective for Surface");

     label1:
        r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder> = null;

        specialinvoke r0.<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>(r1);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    public void setVideoScalingMode(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        java.lang.String r1;
        android.os.Parcel r2, r10;
        java.lang.Throwable r3, $r9;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean isVideoScalingModeSupported(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scaling mode ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r8;

     label1:
        r10 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label2:
        virtualinvoke r10.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r10.<android.os.Parcel: void writeInt(int)>(6);

        virtualinvoke r10.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r10, r2);

     label3:
        virtualinvoke r10.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

     label5:
        virtualinvoke r10.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.media.MediaPlayer $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r2 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>(r0, r1, null);

        return $r2;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.view.SurfaceHolder r2;
        int i0, $i1;
        android.media.MediaPlayer $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.view.SurfaceHolder;

        i0 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i0 <= 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $r3 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>(r0, r1, r2, null, $i1);

        return $r3;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder, android.media.AudioAttributes, int)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.view.SurfaceHolder r2;
        android.media.AudioAttributes r3, r5, $r8;
        int i0;
        android.media.MediaPlayer r4, $r6;
        android.media.AudioAttributes$Builder $r7;
        java.lang.IllegalArgumentException $r9, r13;
        java.lang.SecurityException $r10, r14;
        java.io.IOException $r11, r12;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.view.SurfaceHolder;

        r3 := @parameter3: android.media.AudioAttributes;

        i0 := @parameter4: int;

     label1:
        $r6 = new android.media.MediaPlayer;

        specialinvoke $r6.<android.media.MediaPlayer: void <init>()>();

        r4 = $r6;

        if r3 == null goto label2;

        $r8 = r3;

        goto label3;

     label2:
        $r7 = new android.media.AudioAttributes$Builder;

        specialinvoke $r7.<android.media.AudioAttributes$Builder: void <init>()>();

        $r8 = virtualinvoke $r7.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label3:
        r5 = $r8;

        virtualinvoke r4.<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>(r5);

        virtualinvoke r4.<android.media.MediaPlayer: void setAudioSessionId(int)>(i0);

        virtualinvoke r4.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>(r0, r1);

        if r2 == null goto label4;

        virtualinvoke r4.<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>(r2);

     label4:
        virtualinvoke r4.<android.media.MediaPlayer: void prepare()>();

     label5:
        return r4;

     label6:
        $r11 := @caughtexception;

        r12 = $r11;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r12);

        goto label9;

     label7:
        $r9 := @caughtexception;

        r13 = $r9;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r13);

        goto label9;

     label8:
        $r10 := @caughtexception;

        r14 = $r10;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r14);

     label9:
        return null;

        catch java.io.IOException from label1 to label5 with label6;
        catch java.lang.IllegalArgumentException from label1 to label5 with label7;
        catch java.lang.SecurityException from label1 to label5 with label8;
    }

    public static android.media.MediaPlayer create(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, i1, $i2;
        android.media.MediaPlayer $r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i1 <= 0 goto label1;

        $i2 = i1;

        goto label2;

     label1:
        $i2 = 0;

     label2:
        $r1 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>(r0, i0, null, $i2);

        return $r1;
    }

    public static android.media.MediaPlayer create(android.content.Context, int, android.media.AudioAttributes, int)
    {
        android.content.Context r0;
        int i0, i1;
        android.media.AudioAttributes r1, r4, $r8;
        android.content.res.AssetFileDescriptor r2;
        android.media.MediaPlayer r3, $r6;
        android.content.res.Resources $r5;
        android.media.AudioAttributes$Builder $r7;
        java.io.FileDescriptor $r9;
        long $l2, $l3;
        java.lang.SecurityException $r10, r15;
        java.io.IOException $r11, r13;
        java.lang.IllegalArgumentException $r12, r14;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.AudioAttributes;

        i1 := @parameter3: int;

     label01:
        $r5 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>(i0);

        if r2 != null goto label03;

     label02:
        return null;

     label03:
        $r6 = new android.media.MediaPlayer;

        specialinvoke $r6.<android.media.MediaPlayer: void <init>()>();

        r3 = $r6;

        if r1 == null goto label04;

        $r8 = r1;

        goto label05;

     label04:
        $r7 = new android.media.AudioAttributes$Builder;

        specialinvoke $r7.<android.media.AudioAttributes$Builder: void <init>()>();

        $r8 = virtualinvoke $r7.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label05:
        r4 = $r8;

        virtualinvoke r3.<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>(r4);

        virtualinvoke r3.<android.media.MediaPlayer: void setAudioSessionId(int)>(i1);

        $r9 = virtualinvoke r2.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r2.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l3 = virtualinvoke r2.<android.content.res.AssetFileDescriptor: long getLength()>();

        virtualinvoke r3.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r9, $l2, $l3);

        virtualinvoke r2.<android.content.res.AssetFileDescriptor: void close()>();

        virtualinvoke r3.<android.media.MediaPlayer: void prepare()>();

     label06:
        return r3;

     label07:
        $r11 := @caughtexception;

        r13 = $r11;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r13);

        goto label10;

     label08:
        $r12 := @caughtexception;

        r14 = $r12;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r14);

        goto label10;

     label09:
        $r10 := @caughtexception;

        r15 = $r10;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", r15);

     label10:
        return null;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.io.IOException from label03 to label06 with label07;
        catch java.lang.IllegalArgumentException from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label03 to label06 with label08;
        catch java.lang.SecurityException from label01 to label02 with label09;
        catch java.lang.SecurityException from label03 to label06 with label09;
    }

    public void setDataSource(android.content.Context, android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        android.net.Uri r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.Uri;

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>(r1, r2, null);

        return;
    }

    public void setDataSource(android.content.Context, android.net.Uri, java.util.Map) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        android.net.Uri r2;
        java.util.Map r3;
        java.lang.String r4, $r8, $r12;
        android.content.res.AssetFileDescriptor r5;
        android.content.ContentResolver r6;
        java.lang.Throwable r7, $r14;
        boolean $z0;
        long $l0, $l2, $l3;
        byte $b1;
        java.io.FileDescriptor $r9, $r11;
        java.io.IOException $r10;
        java.lang.SecurityException $r13;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.util.Map;

        r4 = virtualinvoke r2.<android.net.Uri: java.lang.String getScheme()>();

        if r4 == null goto label01;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label02;

     label01:
        $r8 = virtualinvoke r2.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r8);

        return;

     label02:
        r5 = null;

     label03:
        r6 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = virtualinvoke r6.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r2, "r");

        if r5 != null goto label06;

     label04:
        if r5 == null goto label05;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label05:
        return;

     label06:
        $l0 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label07;

        $r11 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>($r11);

        goto label08;

     label07:
        $r9 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l3 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l2 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r9, $l3, $l2);

     label08:
        if r5 == null goto label09;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label09:
        return;

     label10:
        $r13 := @caughtexception;

     label11:
        if r5 == null goto label17;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

        goto label17;

     label12:
        $r10 := @caughtexception;

     label13:
        if r5 == null goto label17;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

        goto label17;

     label14:
        $r14 := @caughtexception;

        r7 = $r14;

     label15:
        if r5 == null goto label16;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label16:
        throw r7;

     label17:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaPlayer", "Couldn\'t open file on client side, trying server side");

        $r12 = virtualinvoke r2.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>($r12, r3);

        return;

        catch java.lang.SecurityException from label03 to label04 with label10;
        catch java.lang.SecurityException from label06 to label08 with label10;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label06 to label08 with label12;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void setDataSource(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>(r1, null, null);

        return;
    }

    public void setDataSource(java.lang.String, java.util.Map) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1, $r10, $r11;
        java.util.Map r2;
        java.lang.String[] r3, r4;
        int i0, $i1, $i2;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r12;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 = null;

        r4 = null;

        if r2 == null goto label2;

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        r3 = newarray (java.lang.String)[$i1];

        $i2 = interfaceinvoke r2.<java.util.Map: int size()>();

        r4 = newarray (java.lang.String)[$i2];

        i0 = 0;

        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        r3[i0] = $r10;

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r12;

        r4[i0] = $r11;

        i0 = i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>(r1, r3, r4);

        return;
    }

    private void setDataSource(java.lang.String, java.lang.String[], java.lang.String[]) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1, r5, $r9;
        java.lang.String[] r2, r3;
        android.net.Uri r4;
        java.io.File r6, $r10;
        java.io.FileInputStream r7, $r12;
        java.io.FileDescriptor r8;
        boolean $z0, $z1;
        java.io.IOException $r11;
        android.os.IBinder $r13;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1);

        r5 = virtualinvoke r4.<android.net.Uri: java.lang.String getScheme()>();

        $r9 = "file";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r4.<android.net.Uri: java.lang.String getPath()>();

        goto label2;

     label1:
        if r5 == null goto label2;

        $r13 = staticinvoke <android.media.MediaHTTPService: android.os.IBinder createHttpServiceBinderIfNecessary(java.lang.String)>(r1);

        specialinvoke r0.<android.media.MediaPlayer: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])>($r13, r1, r2, r3);

        return;

     label2:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r1);

        r6 = $r10;

        $z1 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r6);

        r7 = $r12;

        r8 = virtualinvoke r7.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>(r8);

        virtualinvoke r7.<java.io.FileInputStream: void close()>();

        goto label4;

     label3:
        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("setDataSource failed.");

        throw $r11;

     label4:
        return;
    }

    private native void nativeSetDataSource(android.os.IBinder, java.lang.String, java.lang.String[], java.lang.String[]) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException;

    public void setDataSource(java.io.FileDescriptor) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>(r1, 0L, 576460752303423487L);

        return;
    }

    public void setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;
        long l0, l1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<android.media.MediaPlayer: void _setDataSource(java.io.FileDescriptor,long,long)>(r1, l0, l1);

        return;
    }

    private native void _setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    public void prepare() throws java.io.IOException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void _prepare()>();

        specialinvoke r0.<android.media.MediaPlayer: void scanInternalSubtitleTracks()>();

        return;
    }

    private native void _prepare() throws java.io.IOException, java.lang.IllegalStateException;

    public native void prepareAsync() throws java.lang.IllegalStateException;

    public void start() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void _setVolume(float,float)>(0.0F, 0.0F);

     label1:
        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(1);

        specialinvoke r0.<android.media.MediaPlayer: void _start()>();

        return;
    }

    private native void _start() throws java.lang.IllegalStateException;

    private boolean isRestricted()
    {
        android.media.MediaPlayer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.internal.app.IAppOpsService $r1;
        java.lang.String $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.media.MediaPlayer;

     label1:
        $i2 = r0.<android.media.MediaPlayer: int mUsage>;

        if $i2 == -1 goto label2;

        $i4 = r0.<android.media.MediaPlayer: int mUsage>;

        goto label3;

     label2:
        $i3 = specialinvoke r0.<android.media.MediaPlayer: int getAudioStreamType()>();

        $i4 = staticinvoke <android.media.AudioAttributes: int usageForLegacyStreamType(int)>($i3);

     label3:
        i0 = $i4;

        $r1 = r0.<android.media.MediaPlayer: com.android.internal.app.IAppOpsService mAppOps>;

        $i5 = staticinvoke <android.os.Process: int myUid()>();

        $r2 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        i1 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>(28, i0, $i5, $r2);

        if i1 == 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;

     label6:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label5 with label6;
    }

    private int getAudioStreamType()
    {
        android.media.MediaPlayer r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.MediaPlayer;

        $i0 = r0.<android.media.MediaPlayer: int mStreamType>;

        if $i0 != -2147483648 goto label1;

        $i2 = specialinvoke r0.<android.media.MediaPlayer: int _getAudioStreamType()>();

        r0.<android.media.MediaPlayer: int mStreamType> = $i2;

     label1:
        $i1 = r0.<android.media.MediaPlayer: int mStreamType>;

        return $i1;
    }

    private native int _getAudioStreamType() throws java.lang.IllegalStateException;

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _stop()>();

        return;
    }

    private native void _stop() throws java.lang.IllegalStateException;

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _pause()>();

        return;
    }

    private native void _pause() throws java.lang.IllegalStateException;

    public void setWakeMode(android.content.Context, int)
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        int i0, $i1;
        boolean z0, $z1;
        android.os.PowerManager r2;
        android.os.PowerManager$WakeLock $r3, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z0 = 0;

        $r3 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if $r3 == null goto label2;

        $r10 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r10.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label1;

        z0 = 1;

        $r11 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

     label2:
        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r2 = (android.os.PowerManager) $r4;

        $i1 = i0 | 536870912;

        $r5 = class "android/media/MediaPlayer";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke r2.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>($i1, $r6);

        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = $r7;

        $r8 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        if z0 == 0 goto label3;

        $r9 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r9.<android.os.PowerManager$WakeLock: void acquire()>();

     label3:
        return;
    }

    public void setScreenOnWhilePlaying(boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, $z1;
        android.view.SurfaceHolder $r1;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        $r1 = r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "setScreenOnWhilePlaying(true) is ineffective without a SurfaceHolder");

     label1:
        r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying> = z0;

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

     label2:
        return;
    }

    private void stayAwake(boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, $z1, $z2;
        android.os.PowerManager$WakeLock $r1, $r2, $r3, $r4, $r5;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if $r1 == null goto label2;

        if z0 == 0 goto label1;

        $r4 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z2 = virtualinvoke $r4.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 != 0 goto label1;

        $r5 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void acquire()>();

        goto label2;

     label1:
        if z0 != 0 goto label2;

        $r2 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        r0.<android.media.MediaPlayer: boolean mStayAwake> = z0;

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    private void updateSurfaceScreenOn()
    {
        android.media.MediaPlayer r0;
        android.view.SurfaceHolder $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        if $r1 == null goto label3;

        $r2 = r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        $z0 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.media.MediaPlayer: boolean mStayAwake>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        interfaceinvoke $r2.<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>($z2);

     label3:
        return;
    }

    public native int getVideoWidth();

    public native int getVideoHeight();

    public native boolean isPlaying();

    public native void seekTo(int) throws java.lang.IllegalStateException;

    public native int getCurrentPosition();

    public native int getDuration();

    public android.media.Metadata getMetadata(boolean, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, z1, $z2, $z3;
        android.os.Parcel r1;
        android.media.Metadata r2, $r3;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r3 = new android.media.Metadata;

        specialinvoke $r3.<android.media.Metadata: void <init>()>();

        r2 = $r3;

        $z2 = specialinvoke r0.<android.media.MediaPlayer: boolean native_getMetadata(boolean,boolean,android.os.Parcel)>(z0, z1, r1);

        if $z2 != 0 goto label1;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return null;

     label1:
        $z3 = virtualinvoke r2.<android.media.Metadata: boolean parse(android.os.Parcel)>(r1);

        if $z3 != 0 goto label2;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return null;

     label2:
        return r2;
    }

    public int setMetadataFilter(java.util.Set, java.util.Set)
    {
        android.media.MediaPlayer r0;
        java.util.Set r1, r2;
        android.os.Parcel r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.util.Iterator r4, r8;
        java.lang.Integer r5, r9;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        r3 = virtualinvoke r0.<android.media.MediaPlayer: android.os.Parcel newRequest()>();

        $i1 = virtualinvoke r3.<android.os.Parcel: int dataSize()>();

        $i2 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i3 = 1 + $i2;

        $i4 = $i3 + 1;

        $i5 = interfaceinvoke r2.<java.util.Set: int size()>();

        $i6 = $i4 + $i5;

        $i8 = 4 * $i6;

        i0 = $i1 + $i8;

        $i7 = virtualinvoke r3.<android.os.Parcel: int dataCapacity()>();

        if $i7 >= i0 goto label1;

        virtualinvoke r3.<android.os.Parcel: void setDataCapacity(int)>(i0);

     label1:
        $i9 = interfaceinvoke r1.<java.util.Set: int size()>();

        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>($i9);

        r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r7;

        $i13 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>($i13);

        goto label2;

     label3:
        $i10 = interfaceinvoke r2.<java.util.Set: int size()>();

        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>($i10);

        r8 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.Integer) $r6;

        $i12 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>($i12);

        goto label4;

     label5:
        $i11 = specialinvoke r0.<android.media.MediaPlayer: int native_setMetadataFilter(android.os.Parcel)>(r3);

        return $i11;
    }

    public native void setNextMediaPlayer(android.media.MediaPlayer);

    public void release()
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider $r1, $r2;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener> = null;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        virtualinvoke $r2.<android.media.MediaPlayer$TimeProvider: void close()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = null;

     label1:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mOnSubtitleDataListener> = null;

        specialinvoke r0.<android.media.MediaPlayer: void _release()>();

        return;
    }

    private native void _release();

    public void reset()
    {
        android.media.MediaPlayer r0;
        java.util.Vector r1, $r6, $r7, $r8, $r9;
        java.util.Iterator r2;
        java.io.InputStream r3;
        java.lang.Throwable r5, $r19;
        boolean $z0;
        android.media.SubtitleTrack[] $r10;
        android.media.SubtitleController $r11, $r15;
        android.media.MediaPlayer$TimeProvider $r12, $r16;
        android.media.MediaPlayer$EventHandler $r13, $r14;
        java.io.IOException $r17;
        java.lang.Object $r18;

        r0 := @this: android.media.MediaPlayer;

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

        $r6 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        r2 = virtualinvoke $r7.<java.util.Vector: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r18 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.io.InputStream) $r18;

     label03:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r17 := @caughtexception;

     label06:
        goto label02;

     label07:
        $r8 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        virtualinvoke $r8.<java.util.Vector: void clear()>();

        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r1;

     label10:
        throw r5;

     label11:
        $r9 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        virtualinvoke $r9.<java.util.Vector: void clear()>();

        $r10 = newarray (android.media.SubtitleTrack)[0];

        r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks> = $r10;

        $r11 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r11 == null goto label12;

        $r15 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r15.<android.media.SubtitleController: void reset()>();

     label12:
        $r12 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r12 == null goto label13;

        $r16 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        virtualinvoke $r16.<android.media.MediaPlayer$TimeProvider: void close()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = null;

     label13:
        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _reset()>();

        $r14 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        if $r14 == null goto label14;

        $r13 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        virtualinvoke $r13.<android.media.MediaPlayer$EventHandler: void removeCallbacksAndMessages(java.lang.Object)>(null);

     label14:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private native void _reset();

    public void setAudioStreamType(int)
    {
        android.media.MediaPlayer r0;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.MediaPlayer: void _setAudioStreamType(int)>(i0);

        r0.<android.media.MediaPlayer: int mStreamType> = i0;

        return;
    }

    private native void _setAudioStreamType(int);

    private native boolean setParameter(int, android.os.Parcel);

    public void setAudioAttributes(android.media.AudioAttributes) throws java.lang.IllegalArgumentException
    {
        android.media.MediaPlayer r0;
        android.media.AudioAttributes r1;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        android.os.Parcel r4;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.AudioAttributes;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set AudioAttributes to null");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<android.media.AudioAttributes: int getUsage()>();

        r0.<android.media.MediaPlayer: int mUsage> = $i0;

        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>(r4, 1);

        specialinvoke r0.<android.media.MediaPlayer: boolean setParameter(int,android.os.Parcel)>(1400, r4);

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        return;
    }

    public native void setLooping(boolean);

    public native boolean isLooping();

    public void setVolume(float, float)
    {
        android.media.MediaPlayer r0;
        float f0, f1;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.media.MediaPlayer: void _setVolume(float,float)>(f0, f1);

        return;
    }

    private native void _setVolume(float, float);

    public void setVolume(float)
    {
        android.media.MediaPlayer r0;
        float f0;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.media.MediaPlayer: void setVolume(float,float)>(f0, f0);

        return;
    }

    public native void setAudioSessionId(int) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    public native int getAudioSessionId();

    public native void attachAuxEffect(int);

    public void setAuxEffectSendLevel(float)
    {
        android.media.MediaPlayer r0;
        float f0;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.media.MediaPlayer: void _setAuxEffectSendLevel(float)>(f0);

        return;
    }

    private native void _setAuxEffectSendLevel(float);

    private final native int native_invoke(android.os.Parcel, android.os.Parcel);

    private final native boolean native_getMetadata(boolean, boolean, android.os.Parcel);

    private final native int native_setMetadataFilter(android.os.Parcel);

    private static final native void native_init();

    private final native void native_setup(java.lang.Object);

    private final native void native_finalize();

    public android.media.MediaPlayer$TrackInfo[] getTrackInfo() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TrackInfo[] r1, r2;
        int i0, $i2, $i3, $i4, $i5;
        java.util.Iterator r3;
        android.media.SubtitleTrack r4;
        byte b1, $b6;
        java.util.Vector $r5, $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        android.media.MediaFormat $r8;
        android.media.MediaPlayer$TrackInfo $r9;

        r0 := @this: android.media.MediaPlayer;

        r1 = specialinvoke r0.<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo()>();

        $i2 = lengthof r1;

        $r5 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        $i3 = virtualinvoke $r5.<java.util.Vector: int size()>();

        $i4 = $i2 + $i3;

        r2 = newarray (android.media.MediaPlayer$TrackInfo)[$i4];

        $i5 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

        i0 = lengthof r1;

        $r6 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        r3 = virtualinvoke $r6.<java.util.Vector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.SubtitleTrack) $r7;

        $z1 = virtualinvoke r4.<android.media.SubtitleTrack: boolean isTimedText()>();

        if $z1 == 0 goto label2;

        $b6 = 3;

        goto label3;

     label2:
        $b6 = 4;

     label3:
        b1 = $b6;

        $r9 = new android.media.MediaPlayer$TrackInfo;

        $r8 = virtualinvoke r4.<android.media.SubtitleTrack: android.media.MediaFormat getFormat()>();

        specialinvoke $r9.<android.media.MediaPlayer$TrackInfo: void <init>(int,android.media.MediaFormat)>(b1, $r8);

        r2[i0] = $r9;

        i0 = i0 + 1;

        goto label1;

     label4:
        return r2;
    }

    private android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1, r2;
        android.media.MediaPlayer$TrackInfo[] r3, r4;
        java.lang.Throwable r5, $r8;
        android.os.Parcelable$Creator $r6;
        java.lang.Object[] $r7;

        r0 := @this: android.media.MediaPlayer;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r1, r2);

        $r6 = <android.media.MediaPlayer$TrackInfo: android.os.Parcelable$Creator CREATOR>;

        $r7 = virtualinvoke r2.<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>($r6);

        r3 = (android.media.MediaPlayer$TrackInfo[]) $r7;

        r4 = r3;

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return r4;

     label3:
        $r8 := @caughtexception;

        r5 = $r8;

     label4:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static boolean availableMimeTypeForExternalSource(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "application/x-subrip";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setSubtitleAnchor(android.media.SubtitleController, android.media.SubtitleController$Anchor)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController r1, $r3;
        android.media.SubtitleController$Anchor r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.SubtitleController;

        r2 := @parameter1: android.media.SubtitleController$Anchor;

        r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController> = r1;

        $r3 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r3.<android.media.SubtitleController: void setAnchor(android.media.SubtitleController$Anchor)>(r2);

        return;
    }

    public void onSubtitleTrackSelected(android.media.SubtitleTrack)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleTrack r1, $r6;
        int $i0, $i1, $i3, $i4, i5;
        android.media.SubtitleTrack[] $r4, $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        android.media.MediaPlayer$OnSubtitleDataListener $r11;
        java.lang.IllegalStateException $r12, $r13;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.SubtitleTrack;

        $i0 = r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex>;

        if $i0 < 0 goto label05;

     label01:
        $i4 = r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex>;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>($i4, 0);

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

     label04:
        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

     label05:
        virtualinvoke r0.<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>(null);

        if r1 != null goto label06;

        return;

     label06:
        i5 = 0;

     label07:
        $r4 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i1 = lengthof $r4;

        if i5 >= $i1 goto label13;

        $r5 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $r6 = $r5[i5];

        if $r6 != r1 goto label12;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selecting subtitle track ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r10);

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = i5;

     label08:
        $i3 = r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex>;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>($i3, 1);

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        $r11 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mSubtitleDataListener>;

        virtualinvoke r0.<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>($r11);

        goto label13;

     label12:
        i5 = i5 + 1;

        goto label07;

     label13:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label08 to label09 with label10;
    }

    public void addSubtitleSource(java.io.InputStream, android.media.MediaFormat) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.InputStream r1, r3;
        android.media.MediaFormat r2, r4;
        java.util.Vector r5, $r7, $r8;
        java.lang.Throwable r6, $r13;
        android.os.HandlerThread $r9, r14;
        android.os.Handler $r10, r15;
        android.os.Looper $r11;
        android.media.MediaPlayer$2 $r12;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: android.media.MediaFormat;

        r3 = r1;

        r4 = r2;

        $r7 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        r5 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        exitmonitor r5;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r5;

     label4:
        throw r6;

     label5:
        $r9 = new android.os.HandlerThread;

        specialinvoke $r9.<android.os.HandlerThread: void <init>(java.lang.String,int)>("SubtitleReadThread", 9);

        r14 = $r9;

        virtualinvoke r14.<android.os.HandlerThread: void start()>();

        $r10 = new android.os.Handler;

        $r11 = virtualinvoke r14.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<android.os.Handler: void <init>(android.os.Looper)>($r11);

        r15 = $r10;

        $r12 = new android.media.MediaPlayer$2;

        specialinvoke $r12.<android.media.MediaPlayer$2: void <init>(android.media.MediaPlayer,java.io.InputStream,android.media.MediaFormat,android.os.HandlerThread)>(r0, r3, r4, r14);

        virtualinvoke r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void scanInternalSubtitleTracks()
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TrackInfo[] r1;
        java.lang.Object r2, $r7;
        android.media.SubtitleTrack[] r3, $r10, $r15;
        int i0, $i1, $i2, $i3, $i4;
        android.media.SubtitleTrack r4, $r14;
        java.lang.Throwable r5, $r16;
        android.media.SubtitleController $r6, $r8, $r11;
        android.media.MediaPlayer$TrackInfo $r9, $r12;
        android.media.MediaFormat $r13;

        r0 := @this: android.media.MediaPlayer;

        $r6 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r6 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "Should have subtitle controller already set");

        return;

     label01:
        r1 = specialinvoke r0.<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo()>();

        $r7 = r0.<android.media.MediaPlayer: java.lang.Object mInbandSubtitleLock>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        $i1 = lengthof r1;

        r3 = newarray (android.media.SubtitleTrack)[$i1];

        i0 = 0;

     label03:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label06;

        $r9 = r1[i0];

        $i3 = virtualinvoke $r9.<android.media.MediaPlayer$TrackInfo: int getTrackType()>();

        if $i3 != 4 goto label05;

        $r10 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i4 = lengthof $r10;

        if i0 >= $i4 goto label04;

        $r15 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $r14 = $r15[i0];

        r3[i0] = $r14;

        goto label05;

     label04:
        $r11 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r12 = r1[i0];

        $r13 = virtualinvoke $r12.<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>();

        r4 = virtualinvoke $r11.<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>($r13);

        r3[i0] = r4;

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks> = r3;

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        $r8 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r8.<android.media.SubtitleController: void selectDefaultTrack()>();

        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void addTimedTextSource(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1, r2, r3;
        java.io.FileInputStream r4, $r8;
        java.io.FileDescriptor r5;
        boolean $z0, $z1;
        java.io.File $r6, r13;
        java.io.IOException $r7;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.media.MediaPlayer: boolean availableMimeTypeForExternalSource(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mimeType for timed text source: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r12;

     label1:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        r13 = $r6;

        $z1 = virtualinvoke r13.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

        r4 = $r8;

        r5 = virtualinvoke r4.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>(r5, r2);

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

        goto label3;

     label2:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>(r1);

        throw $r7;

     label3:
        return;
    }

    public void addTimedTextSource(android.content.Context, android.net.Uri, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        android.net.Uri r2;
        java.lang.String r3, r4, $r8;
        android.content.res.AssetFileDescriptor r5;
        android.content.ContentResolver r6;
        java.lang.Throwable r7, $r11;
        boolean $z0;
        java.io.FileDescriptor $r9;
        java.lang.SecurityException $r10;
        java.io.IOException $r12;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r2.<android.net.Uri: java.lang.String getScheme()>();

        if r4 == null goto label01;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label02;

     label01:
        $r8 = virtualinvoke r2.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>($r8, r3);

        return;

     label02:
        r5 = null;

     label03:
        r6 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = virtualinvoke r6.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r2, "r");

        if r5 != null goto label06;

     label04:
        if r5 == null goto label05;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label05:
        return;

     label06:
        $r9 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>($r9, r3);

     label07:
        if r5 == null goto label08;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label08:
        return;

     label09:
        $r10 := @caughtexception;

     label10:
        if r5 == null goto label16;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

        goto label16;

     label11:
        $r12 := @caughtexception;

     label12:
        if r5 == null goto label16;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

        goto label16;

     label13:
        $r11 := @caughtexception;

        r7 = $r11;

     label14:
        if r5 == null goto label15;

        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label15:
        throw r7;

     label16:
        return;

        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.lang.SecurityException from label06 to label07 with label09;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void addTimedTextSource(java.io.FileDescriptor, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;
        java.lang.String r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>(r1, 0L, 576460752303423487L, r2);

        return;
    }

    public void addTimedTextSource(java.io.FileDescriptor, long, long, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1, r3, r7;
        long l0, l1, l2, l3;
        java.lang.String r2, $r29, $r34;
        android.system.ErrnoException r4, $r30;
        android.app.Application r5;
        android.media.SubtitleTrack r6;
        android.os.Handler r8, $r16;
        android.os.HandlerThread r9, $r17;
        libcore.io.Os $r10;
        boolean $z0, $z1;
        android.media.MediaFormat $r11, r35;
        android.media.SubtitleController $r12, $r13, $r14, $r21, $r24, $r28;
        java.util.Vector $r15;
        android.media.SRTRenderer $r18;
        android.os.Looper $r19;
        android.media.MediaPlayer$4 $r20;
        android.media.MediaPlayer$TimeProvider $r22;
        android.media.MediaPlayer$EventHandler $r23;
        java.lang.IllegalArgumentException $r25;
        java.lang.StringBuilder $r26, $r31, $r32;
        android.media.MediaPlayer$3 $r27;
        java.lang.RuntimeException $r33;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.media.MediaPlayer: boolean availableMimeTypeForExternalSource(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mimeType for timed text source: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label1:
        $r10 = <libcore.io.Libcore: libcore.io.Os os>;

        r3 = interfaceinvoke $r10.<libcore.io.Os: java.io.FileDescriptor dup(java.io.FileDescriptor)>(r1);

     label2:
        goto label4;

     label3:
        $r30 := @caughtexception;

        r4 = $r30;

        $r34 = virtualinvoke r4.<android.system.ErrnoException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", $r34, r4);

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r33;

     label4:
        $r11 = new android.media.MediaFormat;

        specialinvoke $r11.<android.media.MediaFormat: void <init>()>();

        r35 = $r11;

        virtualinvoke r35.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r2);

        virtualinvoke r35.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("is-timed-text", 1);

        r5 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        $r12 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r12 != null goto label5;

        $r21 = new android.media.SubtitleController;

        $r22 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        specialinvoke $r21.<android.media.SubtitleController: void <init>(android.content.Context,android.media.MediaTimeProvider,android.media.SubtitleController$Listener)>(r5, $r22, r0);

        r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController> = $r21;

        $r28 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r27 = new android.media.MediaPlayer$3;

        specialinvoke $r27.<android.media.MediaPlayer$3: void <init>(android.media.MediaPlayer)>(r0);

        virtualinvoke $r28.<android.media.SubtitleController: void setAnchor(android.media.SubtitleController$Anchor)>($r27);

     label5:
        $r13 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $z1 = virtualinvoke $r13.<android.media.SubtitleController: boolean hasRendererFor(android.media.MediaFormat)>(r35);

        if $z1 != 0 goto label6;

        $r24 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r18 = new android.media.SRTRenderer;

        $r23 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        specialinvoke $r18.<android.media.SRTRenderer: void <init>(android.content.Context,android.os.Handler)>(r5, $r23);

        virtualinvoke $r24.<android.media.SubtitleController: void registerRenderer(android.media.SubtitleController$Renderer)>($r18);

     label6:
        $r14 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        r6 = virtualinvoke $r14.<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>(r35);

        $r15 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        virtualinvoke $r15.<java.util.Vector: boolean add(java.lang.Object)>(r6);

        r7 = r3;

        l2 = l0;

        l3 = l1;

        $r17 = new android.os.HandlerThread;

        specialinvoke $r17.<android.os.HandlerThread: void <init>(java.lang.String,int)>("TimedTextReadThread", 9);

        r9 = $r17;

        virtualinvoke r9.<android.os.HandlerThread: void start()>();

        $r16 = new android.os.Handler;

        $r19 = virtualinvoke r9.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r16.<android.os.Handler: void <init>(android.os.Looper)>($r19);

        r8 = $r16;

        $r20 = new android.media.MediaPlayer$4;

        specialinvoke $r20.<android.media.MediaPlayer$4: void <init>(android.media.MediaPlayer,java.io.FileDescriptor,long,long,android.media.SubtitleTrack,android.os.HandlerThread)>(r0, r7, l2, l3, r6, r9);

        virtualinvoke r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r20);

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public int getSelectedTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.media.SubtitleTrack r1;
        java.lang.Throwable r2, $r7;
        android.media.SubtitleController $r3, $r4;
        java.util.Vector $r5;
        android.media.SubtitleTrack[] $r6;
        android.os.Parcel r8, r9;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        if i0 != 4 goto label1;

        $r3 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r3 == null goto label1;

        $r4 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        r1 = virtualinvoke $r4.<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()>();

        if r1 == null goto label1;

        $r5 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        i1 = virtualinvoke $r5.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        if i1 < 0 goto label1;

        $r6 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i5 = lengthof $r6;

        $i4 = $i5 + i1;

        return $i4;

     label1:
        r8 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r9 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label2:
        virtualinvoke r8.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r8.<android.os.Parcel: void writeInt(int)>(7);

        virtualinvoke r8.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r8, r9);

        i2 = virtualinvoke r9.<android.os.Parcel: int readInt()>();

        i3 = i2;

     label3:
        virtualinvoke r8.<android.os.Parcel: void recycle()>();

        virtualinvoke r9.<android.os.Parcel: void recycle()>();

        return i3;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        virtualinvoke r8.<android.os.Parcel: void recycle()>();

        virtualinvoke r9.<android.os.Parcel: void recycle()>();

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void selectTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectTrack(int,boolean)>(i0, 1);

        return;
    }

    public void deselectTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectTrack(int,boolean)>(i0, 0);

        return;
    }

    private void selectOrDeselectTrack(int, boolean) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        boolean z0, $z1;
        android.media.SubtitleTrack r1, $r11, $r24;
        java.lang.Object r2, $r5, $r18;
        android.media.MediaPlayer$TrackInfo[] r3;
        java.lang.Throwable r4, $r27;
        android.media.SubtitleTrack[] $r6, $r7, $r8, $r15, $r16, $r19, $r20, $r25;
        java.util.Vector $r9, $r17;
        android.media.SubtitleController $r10, $r12, $r13, $r14, $r26;
        android.media.MediaPlayer$TrackInfo $r21, $r22;
        android.media.MediaFormat $r23;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = null;

        $r5 = r0.<android.media.MediaPlayer: java.lang.Object mInbandSubtitleLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i2 = lengthof $r6;

        if $i2 != 0 goto label04;

        r3 = specialinvoke r0.<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo()>();

        $i11 = lengthof r3;

        $r19 = newarray (android.media.SubtitleTrack)[$i11];

        r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks> = $r19;

        i1 = 0;

     label02:
        $i13 = lengthof r3;

        if i1 >= $i13 goto label04;

        $r22 = r3[i1];

        $i12 = virtualinvoke $r22.<android.media.MediaPlayer$TrackInfo: int getTrackType()>();

        if $i12 != 4 goto label03;

        $r25 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $r26 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r21 = r3[i1];

        $r23 = virtualinvoke $r21.<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>();

        $r24 = virtualinvoke $r26.<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>($r23);

        $r25[i1] = $r24;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r27 := @caughtexception;

        r4 = $r27;

        exitmonitor r2;

     label07:
        throw r4;

     label08:
        $r7 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i3 = lengthof $r7;

        if i0 >= $i3 goto label09;

        $r20 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        r1 = $r20[i0];

        goto label10;

     label09:
        $r8 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i5 = lengthof $r8;

        $r9 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        $i4 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i6 = $i5 + $i4;

        if i0 >= $i6 goto label10;

        $r17 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        $r16 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i9 = lengthof $r16;

        $i10 = i0 - $i9;

        $r18 = virtualinvoke $r17.<java.util.Vector: java.lang.Object get(int)>($i10);

        r1 = (android.media.SubtitleTrack) $r18;

     label10:
        $r10 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r10 == null goto label15;

        if r1 == null goto label15;

        if z0 == 0 goto label12;

        $z1 = virtualinvoke r1.<android.media.SubtitleTrack: boolean isTimedText()>();

        if $z1 == 0 goto label11;

        i14 = virtualinvoke r0.<android.media.MediaPlayer: int getSelectedTrack(int)>(3);

        if i14 < 0 goto label11;

        $r15 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        $i8 = lengthof $r15;

        if i14 >= $i8 goto label11;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>(i14, 0);

     label11:
        $r14 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r14.<android.media.SubtitleController: boolean selectTrack(android.media.SubtitleTrack)>(r1);

        goto label14;

     label12:
        $r12 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r11 = virtualinvoke $r12.<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()>();

        if $r11 != r1 goto label13;

        $r13 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r13.<android.media.SubtitleController: boolean selectTrack(android.media.SubtitleTrack)>(null);

        goto label14;

     label13:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "trying to deselect track that was not selected");

     label14:
        return;

     label15:
        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>(i0, z0);

        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private void selectOrDeselectInbandTrack(int, boolean) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;
        boolean z0;
        android.os.Parcel r1, r2;
        java.lang.Throwable r3, $r4;
        byte $b1;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        if z0 == 0 goto label2;

        $b1 = 4;

        goto label3;

     label2:
        $b1 = 5;

     label3:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($b1);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r1, r2);

     label4:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        goto label7;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

     label6:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static native int native_pullBatteryData(android.os.Parcel);

    public void setRetransmitEndpoint(java.net.InetSocketAddress) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException
    {
        android.media.MediaPlayer r0;
        java.net.InetSocketAddress r1;
        java.lang.String r2, $r7;
        int i0, i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.net.InetAddress $r8;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.net.InetSocketAddress;

        r2 = null;

        i0 = 0;

        if null == r1 goto label1;

        $r8 = virtualinvoke r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r2 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        i0 = virtualinvoke r1.<java.net.InetSocketAddress: int getPort()>();

     label1:
        i1 = specialinvoke r0.<android.media.MediaPlayer: int native_setRetransmitEndpoint(java.lang.String,int)>(r2, i0);

        if i1 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal re-transmit endpoint; native ret ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        return;
    }

    private final native int native_setRetransmitEndpoint(java.lang.String, int);

    protected void finalize()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void native_finalize()>();

        return;
    }

    public android.media.MediaTimeProvider getMediaTimeProvider()
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider $r1, $r2, $r3;

        r0 := @this: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r1 != null goto label1;

        $r3 = new android.media.MediaPlayer$TimeProvider;

        specialinvoke $r3.<android.media.MediaPlayer$TimeProvider: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = $r3;

     label1:
        $r2 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        return $r2;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        java.lang.Object r0, r1, $r5;
        int i0, i1, i2;
        android.media.MediaPlayer r2;
        android.os.Message r3;
        java.lang.ref.WeakReference $r4;
        android.media.MediaPlayer$EventHandler $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $r4 = (java.lang.ref.WeakReference) r0;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.MediaPlayer) $r5;

        if r2 != null goto label1;

        return;

     label1:
        if i0 != 200 goto label2;

        if i1 != 2 goto label2;

        virtualinvoke r2.<android.media.MediaPlayer: void start()>();

     label2:
        $r6 = r2.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        if $r6 == null goto label3;

        $r7 = r2.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        r3 = virtualinvoke $r7.<android.media.MediaPlayer$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        $r8 = r2.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        virtualinvoke $r8.<android.media.MediaPlayer$EventHandler: boolean sendMessage(android.os.Message)>(r3);

     label3:
        return;
    }

    public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnPreparedListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnPreparedListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = r1;

        return;
    }

    public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnCompletionListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnCompletionListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = r1;

        return;
    }

    public void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnBufferingUpdateListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnBufferingUpdateListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = r1;

        return;
    }

    public void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSeekCompleteListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnSeekCompleteListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = r1;

        return;
    }

    public void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnVideoSizeChangedListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = r1;

        return;
    }

    public void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedTextListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnTimedTextListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener> = r1;

        return;
    }

    public void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnSubtitleDataListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mOnSubtitleDataListener> = r1;

        return;
    }

    public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnErrorListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnErrorListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = r1;

        return;
    }

    public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnInfoListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnInfoListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = r1;

        return;
    }

    private boolean isVideoScalingModeSupported(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static android.media.SubtitleTrack[] access$000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleTrack[] $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.SubtitleTrack[] mInbandSubtitleTracks>;

        return $r1;
    }

    static android.media.SubtitleController access$100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        return $r1;
    }

    static java.util.Vector access$200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.util.Vector $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        return $r1;
    }

    static java.util.Vector access$300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.util.Vector $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.util.Vector mOutOfBandSubtitleTracks>;

        return $r1;
    }

    static android.media.MediaPlayer$EventHandler access$400(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$EventHandler $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        return $r1;
    }

    static long access$500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        long $l0;

        r0 := @parameter0: android.media.MediaPlayer;

        $l0 = r0.<android.media.MediaPlayer: long mNativeContext>;

        return $l0;
    }

    static void access$600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;

        r0 := @parameter0: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void scanInternalSubtitleTracks()>();

        return;
    }

    static android.media.MediaPlayer$OnPreparedListener access$700(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnPreparedListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnCompletionListener access$800(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnCompletionListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener>;

        return $r1;
    }

    static void access$900(android.media.MediaPlayer, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0;

        r0 := @parameter0: android.media.MediaPlayer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(z0);

        return;
    }

    static android.media.MediaPlayer$TimeProvider access$1000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        return $r1;
    }

    static android.media.MediaPlayer$OnBufferingUpdateListener access$1100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnBufferingUpdateListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnSeekCompleteListener access$1200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSeekCompleteListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnVideoSizeChangedListener access$1300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnErrorListener access$1400(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnErrorListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnInfoListener access$1500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnInfoListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnTimedTextListener access$1600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedTextListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnSubtitleDataListener access$1700(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mOnSubtitleDataListener>;

        return $r1;
    }

    static void <clinit>()
    {
        <android.media.MediaPlayer: int MEDIA_INFO_SUBTITLE_TIMED_OUT> = 902;

        <android.media.MediaPlayer: int MEDIA_INFO_UNSUPPORTED_SUBTITLE> = 901;

        <android.media.MediaPlayer: int MEDIA_INFO_TIMED_TEXT_ERROR> = 900;

        <android.media.MediaPlayer: int MEDIA_INFO_EXTERNAL_METADATA_UPDATE> = 803;

        <android.media.MediaPlayer: int MEDIA_INFO_METADATA_UPDATE> = 802;

        <android.media.MediaPlayer: int MEDIA_INFO_NOT_SEEKABLE> = 801;

        <android.media.MediaPlayer: int MEDIA_INFO_BAD_INTERLEAVING> = 800;

        <android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_END> = 702;

        <android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_START> = 701;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_TRACK_LAGGING> = 700;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_RENDERING_START> = 3;

        <android.media.MediaPlayer: int MEDIA_INFO_STARTED_AS_NEXT> = 2;

        <android.media.MediaPlayer: int MEDIA_INFO_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_ERROR_TIMED_OUT> = -110;

        <android.media.MediaPlayer: int MEDIA_ERROR_UNSUPPORTED> = -1010;

        <android.media.MediaPlayer: int MEDIA_ERROR_MALFORMED> = -1007;

        <android.media.MediaPlayer: int MEDIA_ERROR_IO> = -1004;

        <android.media.MediaPlayer: int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR_SERVER_DIED> = 100;

        <android.media.MediaPlayer: int MEDIA_ERROR_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_SUBTITLE_DATA> = 201;

        <android.media.MediaPlayer: int MEDIA_INFO> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR> = 100;

        <android.media.MediaPlayer: int MEDIA_TIMED_TEXT> = 99;

        <android.media.MediaPlayer: int MEDIA_SKIPPED> = 9;

        <android.media.MediaPlayer: int MEDIA_STOPPED> = 8;

        <android.media.MediaPlayer: int MEDIA_PAUSED> = 7;

        <android.media.MediaPlayer: int MEDIA_STARTED> = 6;

        <android.media.MediaPlayer: int MEDIA_SET_VIDEO_SIZE> = 5;

        <android.media.MediaPlayer: int MEDIA_SEEK_COMPLETE> = 4;

        <android.media.MediaPlayer: int MEDIA_BUFFERING_UPDATE> = 3;

        <android.media.MediaPlayer: int MEDIA_PLAYBACK_COMPLETE> = 2;

        <android.media.MediaPlayer: int MEDIA_PREPARED> = 1;

        <android.media.MediaPlayer: int MEDIA_NOP> = 0;

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_CEA_608> = "text/cea-608";

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_VTT> = "text/vtt";

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP> = "application/x-subrip";

        <android.media.MediaPlayer: int KEY_PARAMETER_AUDIO_ATTRIBUTES> = 1400;

        <android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING> = 2;

        <android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT> = 1;

        <android.media.MediaPlayer: int INVOKE_ID_GET_SELECTED_TRACK> = 7;

        <android.media.MediaPlayer: int INVOKE_ID_SET_VIDEO_SCALE_MODE> = 6;

        <android.media.MediaPlayer: int INVOKE_ID_DESELECT_TRACK> = 5;

        <android.media.MediaPlayer: int INVOKE_ID_SELECT_TRACK> = 4;

        <android.media.MediaPlayer: int INVOKE_ID_ADD_EXTERNAL_SOURCE_FD> = 3;

        <android.media.MediaPlayer: int INVOKE_ID_ADD_EXTERNAL_SOURCE> = 2;

        <android.media.MediaPlayer: int INVOKE_ID_GET_TRACK_INFO> = 1;

        <android.media.MediaPlayer: java.lang.String IMEDIA_PLAYER> = "android.media.IMediaPlayer";

        <android.media.MediaPlayer: java.lang.String TAG> = "MediaPlayer";

        <android.media.MediaPlayer: boolean BYPASS_METADATA_FILTER> = 0;

        <android.media.MediaPlayer: boolean APPLY_METADATA_FILTER> = 1;

        <android.media.MediaPlayer: boolean METADATA_ALL> = 0;

        <android.media.MediaPlayer: boolean METADATA_UPDATE_ONLY> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaPlayer: void native_init()>();

        return;
    }
}
