public final class android.app.UiAutomationConnection extends android.app.IUiAutomationConnection$Stub
{
    private static final int INITIAL_FROZEN_ROTATION_UNSPECIFIED;
    private final android.view.IWindowManager mWindowManager;
    private final android.view.accessibility.IAccessibilityManager mAccessibilityManager;
    private final java.lang.Object mLock;
    private final android.os.Binder mToken;
    private int mInitialFrozenRotation;
    private android.accessibilityservice.IAccessibilityServiceClient mClient;
    private boolean mIsShutdown;
    private int mOwningUid;

    public void <init>()
    {
        android.app.UiAutomationConnection r0;
        android.os.IBinder $r1, $r3;
        android.view.IWindowManager $r2;
        android.view.accessibility.IAccessibilityManager $r4;
        java.lang.Object $r5;
        android.os.Binder $r6;

        r0 := @this: android.app.UiAutomationConnection;

        specialinvoke r0.<android.app.IUiAutomationConnection$Stub: void <init>()>();

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager> = $r2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        $r4 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r3);

        r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.app.UiAutomationConnection: java.lang.Object mLock> = $r5;

        $r6 = new android.os.Binder;

        specialinvoke $r6.<android.os.Binder: void <init>()>();

        r0.<android.app.UiAutomationConnection: android.os.Binder mToken> = $r6;

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = -1;

        return;
    }

    public void connect(android.accessibilityservice.IAccessibilityServiceClient)
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        int $i0;
        java.lang.IllegalStateException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client cannot be null!");

        throw $r6;

     label1:
        $r4 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected.");

        throw $r5;

     label3:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r0.<android.app.UiAutomationConnection: int mOwningUid> = $i0;

        specialinvoke r0.<android.app.UiAutomationConnection: void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)>(r1);

        specialinvoke r0.<android.app.UiAutomationConnection: void storeRotationStateLocked()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void disconnect()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.app.UiAutomationConnection;

        $r3 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already disconnected.");

        throw $r4;

     label2:
        r0.<android.app.UiAutomationConnection: int mOwningUid> = -1;

        specialinvoke r0.<android.app.UiAutomationConnection: void unregisterUiTestAutomationServiceLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void restoreRotationStateLocked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        android.app.UiAutomationConnection r0;
        android.view.InputEvent r1;
        boolean z0, z1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, r4, $r7, $r8;
        android.hardware.input.InputManager $r6;
        byte $b0, b1;
        long l2;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        $r5 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        if z0 == 0 goto label06;

        $b0 = 2;

        goto label07;

     label06:
        $b0 = 0;

     label07:
        b1 = $b0;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        $r6 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        z1 = virtualinvoke $r6.<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r1, b1);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z1;

     label10:
        $r8 := @caughtexception;

        r4 = $r8;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean setRotation(int)
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r8, $r9;
        boolean z0;
        android.view.IWindowManager $r5, $r6;
        android.os.RemoteException $r7;
        long l1;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        $r4 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label04:
        throw r2;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        if i0 != -2 goto label07;

        $r6 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r6.<android.view.IWindowManager: void thawRotation()>();

        goto label08;

     label07:
        $r5 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r5.<android.view.IWindowManager: void freezeRotation(int)>(i0);

     label08:
        z0 = 1;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label10:
        $r7 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label14;

     label12:
        $r8 := @caughtexception;

        r3 = $r8;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label14:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.os.RemoteException from label06 to label09 with label10;
        catch java.lang.Throwable from label06 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public android.graphics.Bitmap takeScreenshot(int, int)
    {
        android.app.UiAutomationConnection r0;
        int i0, i1;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, r4, $r6, $r7;
        android.graphics.Bitmap r3;
        long l2;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label6:
        r3 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(int,int)>(i0, i1);

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r3;

     label8:
        $r7 := @caughtexception;

        r4 = $r7;

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean clearWindowContentFrameStats(int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, r4, $r8, $r9;
        android.os.IBinder r3;
        boolean z0, z1;
        android.view.accessibility.IAccessibilityManager $r6;
        android.view.IWindowManager $r7;
        long l1;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        $r5 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label04:
        throw r2;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r6 = r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager>;

        r3 = interfaceinvoke $r6.<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int)>(i0);

        if r3 != null goto label08;

        z0 = 0;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label08:
        $r7 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        z1 = interfaceinvoke $r7.<android.view.IWindowManager: boolean clearWindowContentFrameStats(android.os.IBinder)>(r3);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(int) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, r4, $r8, $r9;
        android.os.IBinder r3;
        android.view.accessibility.IAccessibilityManager $r6;
        android.view.IWindowManager $r7;
        long l1;
        android.view.WindowContentFrameStats r10;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        $r5 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label04:
        throw r2;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r6 = r0.<android.app.UiAutomationConnection: android.view.accessibility.IAccessibilityManager mAccessibilityManager>;

        r3 = interfaceinvoke $r6.<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int)>(i0);

        if r3 != null goto label08;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label08:
        $r7 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        r10 = interfaceinvoke $r7.<android.view.IWindowManager: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>(r3);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r10;

     label10:
        $r8 := @caughtexception;

        r4 = $r8;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void clearWindowAnimationFrameStats()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r5, $r6;
        long l0;

        r0 := @this: android.app.UiAutomationConnection;

        $r4 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label04:
        throw r2;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        staticinvoke <android.view.SurfaceControl: boolean clearAnimationFrameStats()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label10;

     label08:
        $r5 := @caughtexception;

        r3 = $r5;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, r5, $r8, $r9;
        android.view.WindowAnimationFrameStats r3, r4, $r7;
        long l0;

        r0 := @this: android.app.UiAutomationConnection;

        $r6 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label6:
        $r7 = new android.view.WindowAnimationFrameStats;

        specialinvoke $r7.<android.view.WindowAnimationFrameStats: void <init>()>();

        r3 = $r7;

        staticinvoke <android.view.SurfaceControl: boolean getAnimationFrameStats(android.view.WindowAnimationFrameStats)>(r3);

        r4 = r3;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r4;

     label8:
        $r9 := @caughtexception;

        r5 = $r9;

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void executeShellCommand(java.lang.String, android.os.ParcelFileDescriptor) throws android.os.RemoteException
    {
        android.app.UiAutomationConnection r0;
        java.lang.String r1;
        android.os.ParcelFileDescriptor r2;
        java.lang.Object r3, $r8;
        java.lang.Throwable r4, r7, $r13, $r15;
        java.lang.Process r5;
        byte[] r6;
        int i0;
        java.lang.Runtime $r9;
        java.io.FileOutputStream $r10, r17;
        java.io.FileDescriptor $r11;
        java.io.IOException $r12, r18;
        java.lang.RuntimeException $r14;
        java.io.InputStream r16;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        $r8 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r3 = $r8;

        entermonitor $r8;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r3;

     label04:
        throw r4;

     label05:
        r16 = null;

        r17 = null;

     label06:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        r5 = virtualinvoke $r9.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r1);

        r16 = virtualinvoke r5.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r10 = new java.io.FileOutputStream;

        $r11 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r11);

        r17 = $r10;

        r6 = newarray (byte)[8192];

     label07:
        i0 = virtualinvoke r16.<java.io.InputStream: int read(byte[])>(r6);

        if i0 >= 0 goto label08;

        goto label09;

     label08:
        virtualinvoke r17.<java.io.OutputStream: void write(byte[],int,int)>(r6, 0, i0);

        goto label07;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label13;

     label10:
        $r12 := @caughtexception;

        r18 = $r12;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error running shell command", r18);

        throw $r14;

     label11:
        $r15 := @caughtexception;

        r7 = $r15;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r7;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.io.IOException from label06 to label09 with label10;
        catch java.lang.Throwable from label06 to label09 with label11;
        catch java.lang.Throwable from label10 to label12 with label11;
    }

    public void shutdown()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;

        r0 := @this: android.app.UiAutomationConnection;

        $r3 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

     label2:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        r0.<android.app.UiAutomationConnection: boolean mIsShutdown> = 1;

        $z1 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<android.app.UiAutomationConnection: void disconnect()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        android.view.accessibility.IAccessibilityManager r2;
        android.accessibilityservice.AccessibilityServiceInfo r3, $r6;
        android.os.RemoteException r4, $r8;
        android.os.IBinder $r5;
        int $i0, $i1;
        android.os.Binder $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r2 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r5);

        $r6 = new android.accessibilityservice.AccessibilityServiceInfo;

        specialinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>();

        r3 = $r6;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int eventTypes> = -1;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType> = 16;

        $i0 = r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 | 18;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

        virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: void setCapabilities(int)>(15);

     label1:
        $r7 = r0.<android.app.UiAutomationConnection: android.os.Binder mToken>;

        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)>($r7, r1, r3);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = r1;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while registering UiTestAutomationService.", r4);

        throw $r9;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void unregisterUiTestAutomationServiceLocked()
    {
        android.app.UiAutomationConnection r0;
        android.view.accessibility.IAccessibilityManager r1;
        android.os.RemoteException r2, $r5;
        android.os.IBinder $r3;
        android.accessibilityservice.IAccessibilityServiceClient $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.app.UiAutomationConnection;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r1 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r3);

     label1:
        $r4 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>($r4);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = null;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while unregistering UiTestAutomationService", r2);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void storeRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        android.view.IWindowManager $r2, $r3;
        boolean $z0;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isRotationFrozen()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i0 = interfaceinvoke $r3.<android.view.IWindowManager: int getRotation()>();

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = $i0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void restoreRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        int $i0, $i1;
        android.view.IWindowManager $r2, $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $i0 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        if $i0 == -1 goto label2;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i1 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        interfaceinvoke $r3.<android.view.IWindowManager: void freezeRotation(int)>($i1);

        goto label3;

     label2:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void thawRotation()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    private boolean isConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient $r1;
        boolean $z0;

        r0 := @this: android.app.UiAutomationConnection;

        $r1 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void throwIfShutdownLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = r0.<android.app.UiAutomationConnection: boolean mIsShutdown>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection shutdown!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfNotConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not connected!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfCalledByNotTrustedUidLocked()
    {
        android.app.UiAutomationConnection r0;
        int i0, $i1, $i2;
        java.lang.SecurityException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<android.app.UiAutomationConnection: int mOwningUid>;

        if i0 == $i1 goto label1;

        $i2 = r0.<android.app.UiAutomationConnection: int mOwningUid>;

        if $i2 == 1000 goto label1;

        if i0 == 0 goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling from not trusted UID!");

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.app.UiAutomationConnection: int INITIAL_FROZEN_ROTATION_UNSPECIFIED> = -1;

        return;
    }
}
