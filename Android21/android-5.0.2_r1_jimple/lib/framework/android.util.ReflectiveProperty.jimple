class android.util.ReflectiveProperty extends android.util.Property
{
    private static final java.lang.String PREFIX_GET;
    private static final java.lang.String PREFIX_IS;
    private static final java.lang.String PREFIX_SET;
    private java.lang.reflect.Method mSetter;
    private java.lang.reflect.Method mGetter;
    private java.lang.reflect.Field mField;

    public void <init>(java.lang.Class, java.lang.Class, java.lang.String)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Class r1, r2, r9, r60;
        java.lang.String r3, r4, r5, r6, $r34, $r36, $r52, r58, r61;
        char c0, $c1;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r23, $r24, $r27, $r28, $r29, $r30, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r48, $r49, $r50, $r54, $r55, $r56, $r57;
        java.lang.reflect.Method $r16, $r18, $r25, $r44;
        java.lang.Class[] $r17, $r22, $r45;
        boolean $z0, $z1;
        android.util.NoSuchPropertyException $r26, $r32, $r51;
        java.lang.NoSuchFieldException $r31;
        java.lang.NoSuchMethodException $r42, $r43, $r53;
        java.lang.reflect.Field $r46, $r47;

        r0 := @this: android.util.ReflectiveProperty;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.util.Property: void <init>(java.lang.Class,java.lang.String)>(r2, r3);

        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r17 = (java.lang.Class[]) null;

        $r16 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r6, $r17);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter> = $r16;

     label02:
        goto label10;

     label03:
        $r42 := @caughtexception;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r58 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r45 = (java.lang.Class[]) null;

        $r44 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r58, $r45);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter> = $r44;

     label05:
        goto label10;

     label06:
        $r43 := @caughtexception;

     label07:
        $r47 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r3);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField> = $r47;

        $r46 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        r9 = virtualinvoke $r46.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = specialinvoke r0.<android.util.ReflectiveProperty: boolean typesMatch(java.lang.Class,java.lang.Class)>(r2, r9);

        if $z1 != 0 goto label08;

        $r51 = new android.util.NoSuchPropertyException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Underlying type (");

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("does not match Property type (");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r52 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r52);

        throw $r51;

     label08:
        return;

     label09:
        $r31 := @caughtexception;

        $r32 = new android.util.NoSuchPropertyException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No accessor method or field found for property with name ");

        $r35 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r36);

        throw $r32;

     label10:
        $r18 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter>;

        r60 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = specialinvoke r0.<android.util.ReflectiveProperty: boolean typesMatch(java.lang.Class,java.lang.Class)>(r2, r60);

        if $z0 != 0 goto label11;

        $r26 = new android.util.NoSuchPropertyException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Underlying type (");

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r60);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("does not match Property type (");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r34);

        throw $r26;

     label11:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r61 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        $r22 = newarray (java.lang.Class)[1];

        $r22[0] = r60;

        $r25 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r61, $r22);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter> = $r25;

     label13:
        goto label15;

     label14:
        $r53 := @caughtexception;

     label15:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label04 to label05 with label06;
        catch java.lang.NoSuchFieldException from label07 to label08 with label09;
        catch java.lang.NoSuchMethodException from label12 to label13 with label14;
    }

    private boolean typesMatch(java.lang.Class, java.lang.Class)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Class r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: android.util.ReflectiveProperty;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        if r2 == r1 goto label12;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label11;

        $r3 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 != $r3 goto label01;

        if r1 == class "java/lang/Float" goto label08;

     label01:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 != $r4 goto label02;

        if r1 == class "java/lang/Integer" goto label08;

     label02:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r2 != $r5 goto label03;

        if r1 == class "java/lang/Boolean" goto label08;

     label03:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 != $r6 goto label04;

        if r1 == class "java/lang/Long" goto label08;

     label04:
        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 != $r7 goto label05;

        if r1 == class "java/lang/Double" goto label08;

     label05:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r2 != $r8 goto label06;

        if r1 == class "java/lang/Short" goto label08;

     label06:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        if r2 != $r9 goto label07;

        if r1 == class "java/lang/Byte" goto label08;

     label07:
        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        if r2 != $r10 goto label09;

        if r1 != class "java/lang/Character" goto label09;

     label08:
        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        return $z1;

     label11:
        return 0;

     label12:
        return 1;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r4, $r15;
        java.lang.reflect.Field $r5, $r13;
        java.lang.UnsupportedOperationException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r9, $r12;
        java.lang.Object[] $r14;
        java.lang.IllegalAccessException $r16, $r23;
        java.lang.reflect.InvocationTargetException $r18, r24;
        java.lang.AssertionError $r19, $r22;
        java.lang.Throwable $r20;
        java.lang.RuntimeException $r21;

        r0 := @this: android.util.ReflectiveProperty;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter>;

        if $r4 == null goto label05;

     label01:
        $r15 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r2;

        virtualinvoke $r15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r14);

     label02:
        goto label10;

     label03:
        $r16 := @caughtexception;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label04:
        $r18 := @caughtexception;

        r24 = $r18;

        $r21 = new java.lang.RuntimeException;

        $r20 = virtualinvoke r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label05:
        $r5 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if $r5 == null goto label09;

     label06:
        $r13 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        virtualinvoke $r13.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r2);

     label07:
        goto label10;

     label08:
        $r23 := @caughtexception;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label09:
        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property ");

        $r9 = virtualinvoke r0.<android.util.ReflectiveProperty: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is read-only");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label10:
        return;

        catch java.lang.IllegalAccessException from label01 to label02 with label03;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label06 to label07 with label08;
    }

    public java.lang.Object get(java.lang.Object)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Object r1, $r7, $r10;
        java.lang.reflect.Method $r3, $r9;
        java.lang.reflect.Field $r4, $r6;
        java.lang.AssertionError $r5, $r12, $r14;
        java.lang.Object[] $r8;
        java.lang.IllegalAccessException $r11, $r13;
        java.lang.reflect.InvocationTargetException $r15, r18;
        java.lang.Throwable $r16;
        java.lang.RuntimeException $r17;

        r0 := @this: android.util.ReflectiveProperty;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter>;

        if $r3 == null goto label5;

     label1:
        $r9 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter>;

        $r8 = (java.lang.Object[]) null;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r8);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        $r15 := @caughtexception;

        r18 = $r15;

        $r17 = new java.lang.RuntimeException;

        $r16 = virtualinvoke r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label5:
        $r4 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if $r4 == null goto label9;

     label6:
        $r6 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label7:
        return $r7;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label9:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label6 to label7 with label8;
    }

    public boolean isReadOnly()
    {
        android.util.ReflectiveProperty r0;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: android.util.ReflectiveProperty;

        $r1 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter>;

        if $r1 != null goto label1;

        $r2 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <android.util.ReflectiveProperty: java.lang.String PREFIX_SET> = "set";

        <android.util.ReflectiveProperty: java.lang.String PREFIX_IS> = "is";

        <android.util.ReflectiveProperty: java.lang.String PREFIX_GET> = "get";

        return;
    }
}
