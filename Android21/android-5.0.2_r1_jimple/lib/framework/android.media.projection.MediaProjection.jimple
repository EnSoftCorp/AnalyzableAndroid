public final class android.media.projection.MediaProjection extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.media.projection.IMediaProjection mImpl;
    private final android.content.Context mContext;
    private final java.util.Map mCallbacks;

    public void <init>(android.content.Context, android.media.projection.IMediaProjection)
    {
        android.media.projection.MediaProjection r0;
        android.content.Context r1;
        android.media.projection.IMediaProjection r2, $r6;
        android.os.RemoteException r3, $r7;
        android.util.ArrayMap $r4;
        android.media.projection.MediaProjection$MediaProjectionCallback $r5;
        java.lang.RuntimeException $r8;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.projection.IMediaProjection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks> = $r4;

        r0.<android.media.projection.MediaProjection: android.content.Context mContext> = r1;

        r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl> = r2;

     label1:
        $r6 = r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl>;

        $r5 = new android.media.projection.MediaProjection$MediaProjectionCallback;

        specialinvoke $r5.<android.media.projection.MediaProjection$MediaProjectionCallback: void <init>(android.media.projection.MediaProjection,android.media.projection.MediaProjection$1)>(r0, null);

        interfaceinvoke $r6.<android.media.projection.IMediaProjection: void start(android.media.projection.IMediaProjectionCallback)>($r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to start media projection", r3);

        throw $r8;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerCallback(android.media.projection.MediaProjection$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.MediaProjection$Callback r1;
        android.os.Handler r2;
        android.media.projection.MediaProjection$CallbackRecord $r3;
        java.util.Map $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.media.projection.MediaProjection$Callback;

        r2 := @parameter1: android.os.Handler;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback should not be null");

        throw $r6;

     label1:
        $r4 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        $r3 = new android.media.projection.MediaProjection$CallbackRecord;

        specialinvoke $r3.<android.media.projection.MediaProjection$CallbackRecord: void <init>(android.media.projection.MediaProjection$Callback,android.os.Handler)>(r1, r2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public void unregisterCallback(android.media.projection.MediaProjection$Callback)
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.MediaProjection$Callback r1;
        java.util.Map $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.media.projection.MediaProjection$Callback;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback should not be null");

        throw $r4;

     label1:
        $r2 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, boolean, android.view.Surface, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        java.lang.String r1;
        int i0, i1, i2;
        boolean z0;
        android.view.Surface r2;
        android.hardware.display.VirtualDisplay$Callback r3;
        android.os.Handler r4;
        android.hardware.display.DisplayManager r5;
        byte b3, $b4, $b5, $b6;
        android.content.Context $r6;
        java.lang.Object $r7;
        android.hardware.display.VirtualDisplay $r8;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r2 := @parameter5: android.view.Surface;

        r3 := @parameter6: android.hardware.display.VirtualDisplay$Callback;

        r4 := @parameter7: android.os.Handler;

        $r6 = r0.<android.media.projection.MediaProjection: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        r5 = (android.hardware.display.DisplayManager) $r7;

        if z0 == 0 goto label1;

        $b6 = 4;

        goto label2;

     label1:
        $b6 = 0;

     label2:
        b3 = $b6;

        $b4 = b3 | 16;

        $b5 = $b4 | 2;

        $r8 = virtualinvoke r5.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r0, r1, i0, i1, i2, r2, $b5, r3, r4);

        return $r8;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.view.Surface r2;
        android.hardware.display.VirtualDisplay$Callback r3;
        android.os.Handler r4;
        android.hardware.display.DisplayManager r5;
        android.content.Context $r6;
        java.lang.Object $r7;
        android.hardware.display.VirtualDisplay $r8;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.view.Surface;

        r3 := @parameter6: android.hardware.display.VirtualDisplay$Callback;

        r4 := @parameter7: android.os.Handler;

        $r6 = r0.<android.media.projection.MediaProjection: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        r5 = (android.hardware.display.DisplayManager) $r7;

        $r8 = virtualinvoke r5.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r0, r1, i0, i1, i2, r2, i3, r3, r4);

        return $r8;
    }

    public android.media.AudioRecord createAudioRecord(int, int, int, int)
    {
        android.media.projection.MediaProjection r0;
        int i0, i1, i2, i3;

        r0 := @this: android.media.projection.MediaProjection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return null;
    }

    public void stop()
    {
        android.media.projection.MediaProjection r0;
        android.os.RemoteException r1, $r3;
        android.media.projection.IMediaProjection $r2;

        r0 := @this: android.media.projection.MediaProjection;

     label1:
        $r2 = r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl>;

        interfaceinvoke $r2.<android.media.projection.IMediaProjection: void stop()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjection", "Unable to stop projection", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.projection.IMediaProjection getProjection()
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.IMediaProjection $r1;

        r0 := @this: android.media.projection.MediaProjection;

        $r1 = r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl>;

        return $r1;
    }

    static java.util.Map access$100(android.media.projection.MediaProjection)
    {
        android.media.projection.MediaProjection r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.projection.MediaProjection;

        $r1 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.media.projection.MediaProjection: java.lang.String TAG> = "MediaProjection";

        return;
    }
}
