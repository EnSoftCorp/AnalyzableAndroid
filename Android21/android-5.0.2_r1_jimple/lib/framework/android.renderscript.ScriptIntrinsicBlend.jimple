public class android.renderscript.ScriptIntrinsicBlend extends android.renderscript.ScriptIntrinsic
{

    void <init>(long, android.renderscript.RenderScript)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        long l0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.ScriptIntrinsic: void <init>(long,android.renderscript.RenderScript)>(l0, r1);

        return;
    }

    public static android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript, android.renderscript.Element)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1;
        long l0, $l1;
        android.renderscript.ScriptIntrinsicBlend $r2;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        $l1 = virtualinvoke r1.<android.renderscript.Element: long getID(android.renderscript.RenderScript)>(r0);

        l0 = virtualinvoke r0.<android.renderscript.RenderScript: long nScriptIntrinsicCreate(int,long)>(7, $l1);

        $r2 = new android.renderscript.ScriptIntrinsicBlend;

        specialinvoke $r2.<android.renderscript.ScriptIntrinsicBlend: void <init>(long,android.renderscript.RenderScript)>(l0, r0);

        return $r2;
    }

    private void blend(int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        int i0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;
        android.renderscript.Element $r4, $r6, $r7, $r9;
        android.renderscript.RenderScript $r5, $r8;
        boolean $z0, $z1;
        android.renderscript.RSIllegalArgumentException $r10, $r11;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Allocation;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Script$LaunchOptions;

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Element getElement()>();

        $r5 = r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r5);

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r6);

        if $z0 != 0 goto label1;

        $r11 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r11.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input is not of expected format.");

        throw $r11;

     label1:
        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Element getElement()>();

        $r8 = r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.RenderScript mRS>;

        $r9 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r8);

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r9);

        if $z1 != 0 goto label2;

        $r10 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r10.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output is not of expected format.");

        throw $r10;

     label2:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>(i0, r1, r2, null, r3);

        return;
    }

    public void forEachClear(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachClear(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(0, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDClear()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(0, 3, null, null);

        return $r1;
    }

    public void forEachSrc(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSrc(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(1, r1, r2, null);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSrc()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(1, 3, null, null);

        return $r1;
    }

    public void forEachDst(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        return;
    }

    public void forEachDst(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDDst()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(2, 3, null, null);

        return $r1;
    }

    public void forEachSrcOver(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSrcOver(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(3, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSrcOver()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(3, 3, null, null);

        return $r1;
    }

    public void forEachDstOver(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachDstOver(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(4, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDDstOver()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(4, 3, null, null);

        return $r1;
    }

    public void forEachSrcIn(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSrcIn(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(5, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSrcIn()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(5, 3, null, null);

        return $r1;
    }

    public void forEachDstIn(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachDstIn(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(6, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDDstIn()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(6, 3, null, null);

        return $r1;
    }

    public void forEachSrcOut(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSrcOut(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(7, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSrcOut()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(7, 3, null, null);

        return $r1;
    }

    public void forEachDstOut(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachDstOut(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(8, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDDstOut()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(8, 3, null, null);

        return $r1;
    }

    public void forEachSrcAtop(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSrcAtop(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(9, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSrcAtop()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(9, 3, null, null);

        return $r1;
    }

    public void forEachDstAtop(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachDstAtop(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(10, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDDstAtop()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(10, 3, null, null);

        return $r1;
    }

    public void forEachXor(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachXor(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(11, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDXor()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(11, 3, null, null);

        return $r1;
    }

    public void forEachMultiply(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachMultiply(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(14, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDMultiply()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(14, 3, null, null);

        return $r1;
    }

    public void forEachAdd(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachAdd(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(34, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDAdd()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(34, 3, null, null);

        return $r1;
    }

    public void forEachSubtract(android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, r2, null);

        return;
    }

    public void forEachSubtract(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Script$LaunchOptions r3;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Allocation;

        r3 := @parameter2: android.renderscript.Script$LaunchOptions;

        specialinvoke r0.<android.renderscript.ScriptIntrinsicBlend: void blend(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(35, r1, r2, r3);

        return;
    }

    public android.renderscript.Script$KernelID getKernelIDSubtract()
    {
        android.renderscript.ScriptIntrinsicBlend r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(35, 3, null, null);

        return $r1;
    }
}
