public class android.provider.CallLog$Calls extends java.lang.Object implements android.provider.BaseColumns
{
    public static final android.net.Uri CONTENT_URI;
    public static final android.net.Uri CONTENT_FILTER_URI;
    public static final java.lang.String LIMIT_PARAM_KEY;
    public static final java.lang.String OFFSET_PARAM_KEY;
    public static final java.lang.String ALLOW_VOICEMAILS_PARAM_KEY;
    public static final java.lang.String EXTRA_CALL_TYPE_FILTER;
    public static final android.net.Uri CONTENT_URI_WITH_VOICEMAIL;
    public static final java.lang.String DEFAULT_SORT_ORDER;
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String CONTENT_ITEM_TYPE;
    public static final java.lang.String TYPE;
    public static final int INCOMING_TYPE;
    public static final int OUTGOING_TYPE;
    public static final int MISSED_TYPE;
    public static final int VOICEMAIL_TYPE;
    public static final java.lang.String FEATURES;
    public static final int FEATURES_VIDEO;
    public static final java.lang.String NUMBER;
    public static final java.lang.String NUMBER_PRESENTATION;
    public static final int PRESENTATION_ALLOWED;
    public static final int PRESENTATION_RESTRICTED;
    public static final int PRESENTATION_UNKNOWN;
    public static final int PRESENTATION_PAYPHONE;
    public static final java.lang.String COUNTRY_ISO;
    public static final java.lang.String DATE;
    public static final java.lang.String DURATION;
    public static final java.lang.String DATA_USAGE;
    public static final java.lang.String NEW;
    public static final java.lang.String CACHED_NAME;
    public static final java.lang.String CACHED_NUMBER_TYPE;
    public static final java.lang.String CACHED_NUMBER_LABEL;
    public static final java.lang.String VOICEMAIL_URI;
    public static final java.lang.String TRANSCRIPTION;
    public static final java.lang.String IS_READ;
    public static final java.lang.String GEOCODED_LOCATION;
    public static final java.lang.String CACHED_LOOKUP_URI;
    public static final java.lang.String CACHED_MATCHED_NUMBER;
    public static final java.lang.String CACHED_NORMALIZED_NUMBER;
    public static final java.lang.String CACHED_PHOTO_ID;
    public static final java.lang.String CACHED_FORMATTED_NUMBER;
    public static final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME;
    public static final java.lang.String PHONE_ACCOUNT_ID;
    public static final java.lang.String SUB_ID;
    private static final int MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS;

    public void <init>()
    {
        android.provider.CallLog$Calls r0;

        r0 := @this: android.provider.CallLog$Calls;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.net.Uri addCall(com.android.internal.telephony.CallerInfo, android.content.Context, java.lang.String, int, int, int, android.telecom.PhoneAccountHandle, long, int, java.lang.Long)
    {
        com.android.internal.telephony.CallerInfo r0;
        android.content.Context r1;
        java.lang.String r2;
        int i0, i1, i2, i4;
        android.telecom.PhoneAccountHandle r3;
        long l3;
        java.lang.Long r4;
        android.net.Uri $r5;

        r0 := @parameter0: com.android.internal.telephony.CallerInfo;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r3 := @parameter6: android.telecom.PhoneAccountHandle;

        l3 := @parameter7: long;

        i4 := @parameter8: int;

        r4 := @parameter9: java.lang.Long;

        $r5 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean)>(r0, r1, r2, i0, i1, i2, r3, l3, i4, r4, 0);

        return $r5;
    }

    public static android.net.Uri addCall(com.android.internal.telephony.CallerInfo, android.content.Context, java.lang.String, int, int, int, android.telecom.PhoneAccountHandle, long, int, java.lang.Long, boolean)
    {
        com.android.internal.telephony.CallerInfo r0;
        android.content.Context r1;
        java.lang.String r2, r6, r7, r11, $r27, $r29, $r30, $r31, $r35, $r38, $r39, $r40, $r45, r47, r48;
        int i0, i1, i2, i4, i6, i7, i8, $i10, $i13, $i15, $i16;
        android.telecom.PhoneAccountHandle r3;
        long l3, $l9, $l12, $l14, $l17;
        java.lang.Long r4, $r19, $r20;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.content.ContentResolver r5;
        byte b5, $b11;
        android.database.Cursor r8;
        android.content.ContentValues r9, $r15;
        java.lang.Throwable r10, $r46;
        android.content.pm.UserInfo r12;
        android.net.Uri r13, $r21, $r25, $r26, $r28, $r32, $r41, r49;
        android.os.UserHandle r14;
        java.lang.Integer $r16, $r17, $r18, $r22, $r43, $r44;
        java.lang.Object $r23, $r24;
        java.lang.String[] $r33, $r34, $r36, $r37;
        android.content.ComponentName $r42;
        android.os.UserManager r50;
        java.util.List r51;

        r0 := @parameter0: com.android.internal.telephony.CallerInfo;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r3 := @parameter6: android.telecom.PhoneAccountHandle;

        l3 := @parameter7: long;

        i4 := @parameter8: int;

        r4 := @parameter9: java.lang.Long;

        z0 := @parameter10: boolean;

        r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        b5 = 1;

        if i0 != 2 goto label01;

        b5 = 2;

        goto label04;

     label01:
        if i0 != 4 goto label02;

        b5 = 4;

        goto label04;

     label02:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 != 0 goto label03;

        if i0 != 3 goto label04;

     label03:
        b5 = 3;

     label04:
        if b5 == 1 goto label05;

        r2 = "";

        if r0 == null goto label05;

        r0.<com.android.internal.telephony.CallerInfo: java.lang.String name> = "";

     label05:
        r6 = null;

        r7 = null;

        if r3 == null goto label06;

        $r42 = virtualinvoke r3.<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>();

        r6 = virtualinvoke $r42.<android.content.ComponentName: java.lang.String flattenToString()>();

        r7 = virtualinvoke r3.<android.telecom.PhoneAccountHandle: java.lang.String getId()>();

     label06:
        $r15 = new android.content.ContentValues;

        specialinvoke $r15.<android.content.ContentValues: void <init>(int)>(6);

        r9 = $r15;

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("number", r2);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b5);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("presentation", $r16);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("type", $r18);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("features", $r17);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date", $r20);

        $l9 = (long) i4;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("duration", $r19);

        if r4 == null goto label07;

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("data_usage", r4);

     label07:
        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subscription_component_name", r6);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subscription_id", r7);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("new", $r22);

        if i1 != 3 goto label08;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_read", $r43);

     label08:
        if r0 == null goto label09;

        $r40 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String name>;

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r40);

        $i16 = r0.<com.android.internal.telephony.CallerInfo: int numberType>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("numbertype", $r44);

        $r45 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String numberLabel>;

        virtualinvoke r9.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("numberlabel", $r45);

     label09:
        if r0 == null goto label18;

        $l12 = r0.<com.android.internal.telephony.CallerInfo: long contactIdOrZero>;

        $b11 = $l12 cmp 0L;

        if $b11 <= 0 goto label18;

        $r30 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String normalizedNumber>;

        if $r30 == null goto label10;

        r11 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String normalizedNumber>;

        $r41 = <android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI>;

        $r36 = newarray (java.lang.String)[1];

        $r36[0] = "_id";

        $r37 = newarray (java.lang.String)[2];

        $l17 = r0.<com.android.internal.telephony.CallerInfo: long contactIdOrZero>;

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l17);

        $r37[0] = $r39;

        $r37[1] = r11;

        r8 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r41, $r36, "contact_id =? AND data4 =?", $r37, null);

        goto label13;

     label10:
        $r29 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String phoneNumber>;

        if $r29 == null goto label11;

        $r35 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String phoneNumber>;

        goto label12;

     label11:
        $r35 = r2;

     label12:
        r47 = $r35;

        $r28 = <android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_FILTER_URI>;

        $r27 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>(r47);

        $r32 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r28, $r27);

        $r33 = newarray (java.lang.String)[1];

        $r33[0] = "_id";

        $r34 = newarray (java.lang.String)[1];

        $l14 = r0.<com.android.internal.telephony.CallerInfo: long contactIdOrZero>;

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l14);

        $r34[0] = $r31;

        r8 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r32, $r33, "contact_id =?", $r34, null);

     label13:
        if r8 == null goto label18;

     label14:
        $i15 = interfaceinvoke r8.<android.database.Cursor: int getCount()>();

        if $i15 <= 0 goto label15;

        $z6 = interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z6 == 0 goto label15;

        r48 = interfaceinvoke r8.<android.database.Cursor: java.lang.String getString(int)>(0);

        staticinvoke <android.provider.CallLog$Calls: void updateDataUsageStatForData(android.content.ContentResolver,java.lang.String)>(r5, r48);

        if i4 < 10000 goto label15;

        if i1 != 2 goto label15;

        $r38 = r0.<com.android.internal.telephony.CallerInfo: java.lang.String normalizedNumber>;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r38);

        if $z5 == 0 goto label15;

        staticinvoke <android.provider.CallLog$Calls: void updateNormalizedNumber(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)>(r1, r5, r48, r2);

     label15:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        goto label18;

     label16:
        $r46 := @caughtexception;

        r10 = $r46;

     label17:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

        throw r10;

     label18:
        r49 = null;

        if z0 == 0 goto label22;

        $r23 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r50 = (android.os.UserManager) $r23;

        r51 = virtualinvoke r50.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i7 = virtualinvoke r50.<android.os.UserManager: int getUserHandle()>();

        i6 = interfaceinvoke r51.<java.util.List: int size()>();

        i8 = 0;

     label19:
        if i8 >= i6 goto label21;

        $r24 = interfaceinvoke r51.<java.util.List: java.lang.Object get(int)>(i8);

        r12 = (android.content.pm.UserInfo) $r24;

        r14 = virtualinvoke r12.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z3 = virtualinvoke r50.<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>(r14);

        if $z3 == 0 goto label20;

        $z2 = virtualinvoke r50.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_outgoing_calls", r14);

        if $z2 != 0 goto label20;

        $z4 = virtualinvoke r12.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z4 != 0 goto label20;

        $r26 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        $i10 = r12.<android.content.pm.UserInfo: int id>;

        $r25 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r26, $i10);

        r13 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context,android.net.Uri,android.content.ContentValues)>(r1, $r25, r9);

        $i13 = r12.<android.content.pm.UserInfo: int id>;

        if $i13 != i7 goto label20;

        r49 = r13;

     label20:
        i8 = i8 + 1;

        goto label19;

     label21:
        goto label23;

     label22:
        $r21 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        r49 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context,android.net.Uri,android.content.ContentValues)>(r1, $r21, r9);

     label23:
        return r49;

        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public static java.lang.String getLastOutgoingCall(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        android.database.Cursor r2;
        java.lang.String r3, r8;
        java.lang.Throwable r4, $r7;
        java.lang.String[] $r5;
        android.net.Uri $r6;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = null;

     label01:
        $r6 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "number";

        r2 = virtualinvoke r1.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r6, $r5, "type = 2", null, "date DESC LIMIT 1");

        if r2 == null goto label02;

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 != 0 goto label05;

     label02:
        r3 = "";

     label03:
        if r2 == null goto label04;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label04:
        return r3;

     label05:
        r8 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

     label06:
        if r2 == null goto label07;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label07:
        return r8;

     label08:
        $r7 := @caughtexception;

        r4 = $r7;

     label09:
        if r2 == null goto label10;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label10:
        throw r4;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private static android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context, android.net.Uri, android.content.ContentValues)
    {
        android.content.Context r0;
        android.net.Uri r1, r4;
        android.content.ContentValues r2;
        android.content.ContentResolver r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.content.ContentValues;

        r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r4 = virtualinvoke r3.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r1, r2);

        virtualinvoke r3.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r1, "_id IN (SELECT _id FROM calls ORDER BY date DESC LIMIT -1 OFFSET 500)", null);

        return r4;
    }

    private static void updateDataUsageStatForData(android.content.ContentResolver, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.net.Uri r2, $r3;
        android.net.Uri$Builder $r4, $r5, $r6;
        android.content.ContentValues $r7;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $r3 = <android.provider.ContactsContract$DataUsageFeedback: android.net.Uri FEEDBACK_URI>;

        $r4 = virtualinvoke $r3.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("type", "call");

        r2 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri build()>();

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        virtualinvoke r0.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(r2, $r7, null, null);

        return;
    }

    private static void updateNormalizedNumber(android.content.Context, android.content.ContentResolver, java.lang.String, java.lang.String)
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        java.lang.String r2, r3, r4, r5, $r7;
        android.content.ContentValues r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String[] $r9;
        android.net.Uri $r10;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ContentResolver;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        r4 = staticinvoke <android.provider.CallLog$Calls: java.lang.String getCurrentCountryIso(android.content.Context)>(r0);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z2 == 0 goto label3;

        return;

     label3:
        $r7 = staticinvoke <android.provider.CallLog$Calls: java.lang.String getCurrentCountryIso(android.content.Context)>(r0);

        r5 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)>(r3, $r7);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z3 == 0 goto label4;

        return;

     label4:
        $r8 = new android.content.ContentValues;

        specialinvoke $r8.<android.content.ContentValues: void <init>()>();

        r6 = $r8;

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("data4", r5);

        $r10 = <android.provider.ContactsContract$Data: android.net.Uri CONTENT_URI>;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r2;

        virtualinvoke r1.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r10, r6, "_id=?", $r9);

        return;
    }

    private static java.lang.String getCurrentCountryIso(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1;
        android.location.CountryDetector r2;
        android.location.Country r3;
        java.lang.Object $r4;

        r0 := @parameter0: android.content.Context;

        r1 = null;

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("country_detector");

        r2 = (android.location.CountryDetector) $r4;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.location.CountryDetector: android.location.Country detectCountry()>();

        if r3 == null goto label1;

        r1 = virtualinvoke r3.<android.location.Country: java.lang.String getCountryIso()>();

     label1:
        return r1;
    }

    static void <clinit>()
    {
        android.net.Uri $r0, $r1, $r2, $r5;
        android.net.Uri$Builder $r3, $r4;

        <android.provider.CallLog$Calls: int MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS> = 10000;

        <android.provider.CallLog$Calls: java.lang.String SUB_ID> = "sub_id";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_ID> = "subscription_id";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_COMPONENT_NAME> = "subscription_component_name";

        <android.provider.CallLog$Calls: java.lang.String CACHED_FORMATTED_NUMBER> = "formatted_number";

        <android.provider.CallLog$Calls: java.lang.String CACHED_PHOTO_ID> = "photo_id";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NORMALIZED_NUMBER> = "normalized_number";

        <android.provider.CallLog$Calls: java.lang.String CACHED_MATCHED_NUMBER> = "matched_number";

        <android.provider.CallLog$Calls: java.lang.String CACHED_LOOKUP_URI> = "lookup_uri";

        <android.provider.CallLog$Calls: java.lang.String GEOCODED_LOCATION> = "geocoded_location";

        <android.provider.CallLog$Calls: java.lang.String IS_READ> = "is_read";

        <android.provider.CallLog$Calls: java.lang.String TRANSCRIPTION> = "transcription";

        <android.provider.CallLog$Calls: java.lang.String VOICEMAIL_URI> = "voicemail_uri";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_LABEL> = "numberlabel";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_TYPE> = "numbertype";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NAME> = "name";

        <android.provider.CallLog$Calls: java.lang.String NEW> = "new";

        <android.provider.CallLog$Calls: java.lang.String DATA_USAGE> = "data_usage";

        <android.provider.CallLog$Calls: java.lang.String DURATION> = "duration";

        <android.provider.CallLog$Calls: java.lang.String DATE> = "date";

        <android.provider.CallLog$Calls: java.lang.String COUNTRY_ISO> = "countryiso";

        <android.provider.CallLog$Calls: int PRESENTATION_PAYPHONE> = 4;

        <android.provider.CallLog$Calls: int PRESENTATION_UNKNOWN> = 3;

        <android.provider.CallLog$Calls: int PRESENTATION_RESTRICTED> = 2;

        <android.provider.CallLog$Calls: int PRESENTATION_ALLOWED> = 1;

        <android.provider.CallLog$Calls: java.lang.String NUMBER_PRESENTATION> = "presentation";

        <android.provider.CallLog$Calls: java.lang.String NUMBER> = "number";

        <android.provider.CallLog$Calls: int FEATURES_VIDEO> = 1;

        <android.provider.CallLog$Calls: java.lang.String FEATURES> = "features";

        <android.provider.CallLog$Calls: int VOICEMAIL_TYPE> = 4;

        <android.provider.CallLog$Calls: int MISSED_TYPE> = 3;

        <android.provider.CallLog$Calls: int OUTGOING_TYPE> = 2;

        <android.provider.CallLog$Calls: int INCOMING_TYPE> = 1;

        <android.provider.CallLog$Calls: java.lang.String TYPE> = "type";

        <android.provider.CallLog$Calls: java.lang.String CONTENT_ITEM_TYPE> = "vnd.android.cursor.item/calls";

        <android.provider.CallLog$Calls: java.lang.String CONTENT_TYPE> = "vnd.android.cursor.dir/calls";

        <android.provider.CallLog$Calls: java.lang.String DEFAULT_SORT_ORDER> = "date DESC";

        <android.provider.CallLog$Calls: java.lang.String EXTRA_CALL_TYPE_FILTER> = "android.provider.extra.CALL_TYPE_FILTER";

        <android.provider.CallLog$Calls: java.lang.String ALLOW_VOICEMAILS_PARAM_KEY> = "allow_voicemails";

        <android.provider.CallLog$Calls: java.lang.String OFFSET_PARAM_KEY> = "offset";

        <android.provider.CallLog$Calls: java.lang.String LIMIT_PARAM_KEY> = "limit";

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://call_log/calls");

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI> = $r0;

        $r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://call_log/calls/filter");

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_FILTER_URI> = $r1;

        $r2 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        $r3 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("allow_voicemails", "true");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>();

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI_WITH_VOICEMAIL> = $r5;

        return;
    }
}
