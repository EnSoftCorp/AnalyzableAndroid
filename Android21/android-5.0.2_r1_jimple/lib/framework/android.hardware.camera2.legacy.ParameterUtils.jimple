public class android.hardware.camera2.legacy.ParameterUtils extends java.lang.Object
{
    public static final int NORMALIZED_RECTANGLE_MIN;
    public static final int NORMALIZED_RECTANGLE_MAX;
    public static final android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT;
    public static final android.hardware.Camera$Area CAMERA_AREA_DEFAULT;
    public static final android.graphics.Rect RECTANGLE_EMPTY;
    private static final java.lang.String TAG;
    private static final boolean VERBOSE;
    private static final int ZOOM_RATIO_MULTIPLIER;

    public static android.util.Size convertSize(android.hardware.Camera$Size)
    {
        android.hardware.Camera$Size r0;
        android.util.Size $r2;
        int $i0, $i1;

        r0 := @parameter0: android.hardware.Camera$Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "size must not be null");

        $r2 = new android.util.Size;

        $i1 = r0.<android.hardware.Camera$Size: int width>;

        $i0 = r0.<android.hardware.Camera$Size: int height>;

        specialinvoke $r2.<android.util.Size: void <init>(int,int)>($i1, $i0);

        return $r2;
    }

    public static java.util.List convertSizeList(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.hardware.Camera$Size r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r6;
        android.util.Size $r7;

        r0 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "sizeList must not be null");

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = $r5;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.Camera$Size) $r6;

        $r7 = new android.util.Size;

        $i2 = r3.<android.hardware.Camera$Size: int width>;

        $i1 = r3.<android.hardware.Camera$Size: int height>;

        specialinvoke $r7.<android.util.Size: void <init>(int,int)>($i2, $i1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return r1;
    }

    public static android.util.Size[] convertSizeListToArray(java.util.List)
    {
        java.util.List r0;
        android.util.Size[] r1;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        android.hardware.Camera$Size r3;
        boolean $z0;
        java.lang.Object $r5;
        android.util.Size $r6;

        r0 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "sizeList must not be null");

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (android.util.Size)[$i1];

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.Camera$Size) $r5;

        $i2 = i0;

        i0 = i0 + 1;

        $r6 = new android.util.Size;

        $i4 = r3.<android.hardware.Camera$Size: int width>;

        $i3 = r3.<android.hardware.Camera$Size: int height>;

        specialinvoke $r6.<android.util.Size: void <init>(int,int)>($i4, $i3);

        r1[$i2] = $r6;

        goto label1;

     label2:
        return r1;
    }

    public static boolean containsSize(java.util.List, int, int)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3;
        java.util.Iterator r1;
        android.hardware.Camera$Size r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "sizeList must not be null");

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.Camera$Size) $r4;

        $i2 = r2.<android.hardware.Camera$Size: int height>;

        if $i2 != i1 goto label2;

        $i3 = r2.<android.hardware.Camera$Size: int width>;

        if $i3 != i0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera$Parameters r0;
        java.util.List r1, $r3;
        android.util.Size $r4;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        $r3 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        r1 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r3);

        $r4 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>(r1);

        return $r4;
    }

    public static java.lang.String stringFromArea(android.hardware.Camera$Area)
    {
        android.hardware.Camera$Area r0;
        java.lang.StringBuilder r1, $r3;
        android.graphics.Rect r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r15;

        r0 := @parameter0: android.hardware.Camera$Area;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        r2 = r0.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("([");

        $i0 = r2.<android.graphics.Rect: int left>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i1 = r2.<android.graphics.Rect: int top>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("][");

        $i2 = r2.<android.graphics.Rect: int right>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i3 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i4 = r0.<android.hardware.Camera$Area: int weight>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public static java.lang.String stringFromAreaList(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder r1, $r4;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        android.hardware.Camera$Area r3;
        boolean $z0;
        java.lang.String $r5, $r7;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.Camera$Area) $r6;

        if r3 != null goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label4;

     label3:
        $r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromArea(android.hardware.Camera$Area)>(r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label4:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i0 == $i2 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static int getClosestAvailableZoomCrop(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1, r3, r4, r5, r6, r7, r8, r9, r10, r13, r14, $r19;
        android.util.Size r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.List r11, r12;
        boolean z0, $z1, $z2, $z3;
        java.lang.AssertionError $r21, $r25;
        java.lang.Object $r22, $r23;
        java.lang.StringBuilder $r24, $r26, $r28, $r30, $r31, $r33, $r35, $r36, $r37, $r38, $r40, $r41, $r42, $r43, $r44;
        java.lang.String $r27, $r29, $r32, $r34, $r39, $r45, $r46;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.util.Size;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "streamSize must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "reportedCropRegion must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "previewCropRegion must not be null");

        $r19 = new android.graphics.Rect;

        specialinvoke $r19.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r3);

        r6 = $r19;

        $z1 = virtualinvoke r6.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r1);

        if $z1 != 0 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", "getClosestAvailableZoomCrop - Crop region out of range; setting to active array size");

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

     label01:
        r7 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect,android.util.Size)>(r1, r2);

        r8 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect shrinkToSameAspectRatioCentered(android.graphics.Rect,android.graphics.Rect)>(r7, r6);

        $z2 = <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE>;

        if $z2 == 0 goto label02;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getClosestAvailableZoomCrop - actualCrop = ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r39);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getClosestAvailableZoomCrop - previewCrop = ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r45);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getClosestAvailableZoomCrop - cropRegionAsPreview = ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r46);

     label02:
        r9 = null;

        r10 = null;

        i0 = -1;

        r11 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect)>(r0, r1);

        r12 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r0, r1, r2);

        $z3 = <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE>;

        if $z3 == 0 goto label03;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getClosestAvailableZoomCrop - availableReportedCropRegions = ");

        $r29 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r11);

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r27);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getClosestAvailableZoomCrop - availablePreviewCropRegions = ");

        $r34 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r12);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r32);

     label03:
        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        $i3 = interfaceinvoke r12.<java.util.List: int size()>();

        if $i2 == $i3 goto label04;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("available reported/preview crop region size mismatch");

        throw $r25;

     label04:
        i1 = 0;

     label05:
        $i4 = interfaceinvoke r11.<java.util.List: int size()>();

        if i1 >= $i4 goto label09;

        $r22 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i1);

        r13 = (android.graphics.Rect) $r22;

        $r23 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i1);

        r14 = (android.graphics.Rect) $r23;

        if i0 != -1 goto label06;

        z0 = 1;

        goto label08;

     label06:
        $i7 = virtualinvoke r13.<android.graphics.Rect: int width()>();

        $i5 = virtualinvoke r8.<android.graphics.Rect: int width()>();

        if $i7 < $i5 goto label07;

        $i6 = virtualinvoke r13.<android.graphics.Rect: int height()>();

        $i8 = virtualinvoke r8.<android.graphics.Rect: int height()>();

        if $i6 < $i8 goto label07;

        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        if z0 == 0 goto label09;

        r10 = r13;

        r9 = r14;

        i0 = i1;

        i1 = i1 + 1;

        goto label05;

     label09:
        if i0 != -1 goto label10;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should\'ve found at least one valid zoom index");

        throw $r21;

     label10:
        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r9);

        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r10);

        return i0;
    }

    private static android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect, android.util.Size)
    {
        android.graphics.Rect r0, $r6;
        android.util.Size r1;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.graphics.Matrix r2, $r5;
        android.graphics.RectF r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        byte $b9;
        java.lang.IllegalArgumentException $r7, $r8;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.util.Size;

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        if $i0 <= $i1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("previewSize must not be wider than activeArray");

        throw $r8;

     label1:
        $i2 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $i3 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        if $i2 <= $i3 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("previewSize must not be taller than activeArray");

        throw $r7;

     label2:
        $i4 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f4 = (float) $i4;

        $f5 = $f4 * 1.0F;

        $i5 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f6 = (float) $i5;

        f0 = $f5 / $f6;

        $i6 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f8 = (float) $i6;

        $f7 = $f8 * 1.0F;

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f9 = (float) $i7;

        f1 = $f7 / $f9;

        $b9 = f1 cmpg f0;

        if $b9 >= 0 goto label3;

        $i10 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        f2 = (float) $i10;

        f3 = f2 * f1;

        goto label4;

     label3:
        $i8 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        f3 = (float) $i8;

        f2 = f3 / f1;

     label4:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r2 = $r5;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, f3, f2);

        r3 = $r4;

        $f11 = virtualinvoke r0.<android.graphics.Rect: float exactCenterX()>();

        $f10 = virtualinvoke r0.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r2.<android.graphics.Matrix: void setTranslate(float,float)>($f11, $f10);

        $f13 = virtualinvoke r3.<android.graphics.RectF: float centerX()>();

        $f12 = neg $f13;

        $f15 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        $f14 = neg $f15;

        virtualinvoke r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f12, $f14);

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r3);

        $r6 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>(r3);

        return $r6;
    }

    private static android.graphics.Rect shrinkToSameAspectRatioCentered(android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1, $r6;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.graphics.Matrix r2, $r5;
        android.graphics.RectF r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8;
        byte $b5;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f4 = (float) $i0;

        $f5 = $f4 * 1.0F;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f6 = (float) $i1;

        f0 = $f5 / $f6;

        $i2 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f7 = (float) $i2;

        $f8 = $f7 * 1.0F;

        $i3 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f9 = (float) $i3;

        f1 = $f8 / $f9;

        $b5 = f1 cmpg f0;

        if $b5 >= 0 goto label1;

        $i8 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        f2 = (float) $i8;

        f3 = f2 * f1;

        goto label2;

     label1:
        $i4 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        f3 = (float) $i4;

        f2 = f3 / f1;

     label2:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r2 = $r5;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>(android.graphics.Rect)>(r1);

        r3 = $r4;

        $i6 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $f10 = (float) $i6;

        $f11 = f3 / $f10;

        $i7 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $f13 = (float) $i7;

        $f12 = f2 / $f13;

        $f15 = virtualinvoke r1.<android.graphics.Rect: float exactCenterX()>();

        $f14 = virtualinvoke r1.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r2.<android.graphics.Matrix: void setScale(float,float,float,float)>($f11, $f12, $f15, $f14);

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r3);

        $r6 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>(r3);

        return $r6;
    }

    public static java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1;
        android.util.Size $r4;
        java.util.List $r5;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        $r4 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.util.Size createSize(android.graphics.Rect)>(r1);

        $r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r0, r1, $r4);

        return $r5;
    }

    public static java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1;
        android.util.Size r2;
        java.util.List $r6;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "previewSize must not be null");

        $r6 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>(r0, r1, r2);

        return $r6;
    }

    private static java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters, android.graphics.Rect, android.util.Size)
    {
        android.hardware.Camera$Parameters r0;
        android.graphics.Rect r1, r3, r8;
        android.util.Size r2;
        java.util.ArrayList r4, $r12, $r20;
        android.graphics.Matrix r5, $r13;
        android.graphics.RectF r6, $r15;
        java.util.Iterator r7;
        int i0, $i1, $i2;
        float f0, $f1, $f2, $f3;
        boolean $z0, $z1;
        java.util.List $r14, $r19;
        java.lang.Integer $r16;
        java.lang.Object $r17;
        android.graphics.Rect[] $r18;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "params must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "activeArray must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "streamSize must not be null");

        r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect getPreviewCropRectangleUnzoomed(android.graphics.Rect,android.util.Size)>(r1, r2);

        $z0 = virtualinvoke r0.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 != 0 goto label1;

        $r20 = new java.util.ArrayList;

        $r18 = newarray (android.graphics.Rect)[1];

        $r18[0] = r3;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        specialinvoke $r20.<java.util.ArrayList: void <init>(java.util.Collection)>($r19);

        return $r20;

     label1:
        $r12 = new java.util.ArrayList;

        $i1 = virtualinvoke r0.<android.hardware.Camera$Parameters: int getMaxZoom()>();

        $i2 = $i1 + 1;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i2);

        r4 = $r12;

        $r13 = new android.graphics.Matrix;

        specialinvoke $r13.<android.graphics.Matrix: void <init>()>();

        r5 = $r13;

        $r15 = new android.graphics.RectF;

        specialinvoke $r15.<android.graphics.RectF: void <init>()>();

        r6 = $r15;

        $r14 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>();

        r7 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r17 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.lang.Integer) $r17;

        i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $f1 = (float) i0;

        f0 = 100.0F / $f1;

        staticinvoke <android.hardware.camera2.utils.ParamsUtils: void convertRectF(android.graphics.Rect,android.graphics.RectF)>(r3, r6);

        $f3 = virtualinvoke r1.<android.graphics.Rect: float exactCenterX()>();

        $f2 = virtualinvoke r1.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r5.<android.graphics.Matrix: void setScale(float,float,float,float)>(f0, f0, $f3, $f2);

        virtualinvoke r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r6);

        r8 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect createRect(android.graphics.RectF)>(r6);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label2;

     label3:
        return r4;
    }

    public static float getMaxZoomRatio(android.hardware.Camera$Parameters)
    {
        android.hardware.Camera$Parameters r0;
        java.util.List r1;
        int i0, $i1, $i2;
        float f0, $f1, $f2;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: android.hardware.Camera$Parameters;

        $z0 = virtualinvoke r0.<android.hardware.Camera$Parameters: boolean isZoomSupported()>();

        if $z0 != 0 goto label1;

        return 1.0F;

     label1:
        r1 = virtualinvoke r0.<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $f1 = (float) i0;

        $f2 = $f1 * 1.0F;

        f0 = $f2 / 100.0F;

        return f0;
    }

    private static android.util.SizeF getZoomRatio(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i2, $i4, $i5, $i6, $i7;
        android.util.SizeF $r4;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "activeArraySize must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "cropSize must not be null");

        $i0 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>($i0, "cropSize.width must be positive");

        $i2 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>($i2, "cropSize.height must be positive");

        $i4 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f2 = (float) $i4;

        $f3 = $f2 * 1.0F;

        $i5 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f4 = (float) $i5;

        f0 = $f3 / $f4;

        $i6 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f6 = (float) $i6;

        $f5 = $f6 * 1.0F;

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f7 = (float) $i7;

        f1 = $f5 / $f7;

        $r4 = new android.util.SizeF;

        specialinvoke $r4.<android.util.SizeF: void <init>(float,float)>(f0, f1);

        return $r4;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect, android.graphics.Rect, android.util.Size, android.hardware.Camera$Parameters)
    {
        android.graphics.Rect r0, r1, r4, r5, r6, r7, $r8, $r9, $r10;
        android.util.Size r2;
        android.hardware.Camera$Parameters r3;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r22, $r23;
        java.lang.String $r19, $r21;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.util.Size;

        r3 := @parameter3: android.hardware.Camera$Parameters;

        $r8 = new android.graphics.Rect;

        $i1 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $i2 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i2);

        r4 = $r8;

        r5 = r1;

        if r5 != null goto label1;

        r5 = r4;

     label1:
        $z0 = <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE>;

        if $z0 == 0 goto label2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertScalerCropRegion - user crop region was ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r21);

     label2:
        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r6 = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r7 = $r10;

        i0 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: int getClosestAvailableZoomCrop(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r3, r4, r2, r5, r6, r7);

        $z1 = <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertScalerCropRegion - zoom calculated to: zoomIndex = ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reported crop region = ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", preview crop region = ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r19);

     label3:
        $r11 = new android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        specialinvoke $r11.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: void <init>(int,android.graphics.Rect,android.graphics.Rect)>(i0, r7, r6);

        return $r11;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$MeteringData convertMeteringRectangleToLegacy(android.graphics.Rect, android.hardware.camera2.params.MeteringRectangle, android.hardware.camera2.legacy.ParameterUtils$ZoomData)
    {
        android.graphics.Rect r0, r3, r5, r6, r8, r9, $r13, $r14, $r16, $r21, $r23, $r25;
        android.hardware.camera2.params.MeteringRectangle r1;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.Matrix r4, $r12;
        android.hardware.Camera$Area r7, r10, $r15, $r17, $r24;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z2, $z3, $z4;
        android.hardware.camera2.legacy.ParameterUtils$MeteringData $r18;
        java.lang.Object[] $r19;
        java.lang.String $r20, $r22;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle;

        r2 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r3 = r2.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect previewCrop>;

        $i0 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        f0 = 2000.0F / $f2;

        $i1 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f1 = 2000.0F / $f3;

        $r12 = new android.graphics.Matrix;

        specialinvoke $r12.<android.graphics.Matrix: void <init>()>();

        r4 = $r12;

        $i2 = r3.<android.graphics.Rect: int left>;

        $i4 = neg $i2;

        $f5 = (float) $i4;

        $i3 = r3.<android.graphics.Rect: int top>;

        $i5 = neg $i3;

        $f4 = (float) $i5;

        virtualinvoke r4.<android.graphics.Matrix: void setTranslate(float,float)>($f5, $f4);

        virtualinvoke r4.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f1);

        virtualinvoke r4.<android.graphics.Matrix: boolean postTranslate(float,float)>(-1000.0F, -1000.0F);

        $r13 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>();

        r5 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect mapRect(android.graphics.Matrix,android.graphics.Rect)>(r4, $r13);

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r5);

        r6 = $r14;

        $r16 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT>;

        $z2 = virtualinvoke r6.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r16);

        if $z2 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", "convertMeteringRectangleToLegacy - metering rectangle too small, no metering will be done");

        $r25 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r25);

        $r24 = new android.hardware.Camera$Area;

        $r23 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        specialinvoke $r24.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r23, 0);

        r7 = $r24;

        goto label2;

     label1:
        $r15 = new android.hardware.Camera$Area;

        $i6 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        specialinvoke $r15.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>(r6, $i6);

        r7 = $r15;

     label2:
        r8 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>();

        $z3 = virtualinvoke r8.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r3);

        if $z3 != 0 goto label3;

        $r21 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r21);

     label3:
        $r17 = new android.hardware.Camera$Area;

        $i7 = virtualinvoke r1.<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>();

        specialinvoke $r17.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>(r5, $i7);

        r10 = $r17;

        r11 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r0, r2, r10, 0);

        r9 = r11.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        $z4 = <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE>;

        if $z4 == 0 goto label4;

        $r19 = newarray (java.lang.Object)[7];

        $r19[0] = r0;

        $r19[1] = r1;

        $r19[2] = r3;

        $r20 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromArea(android.hardware.Camera$Area)>(r7);

        $r19[3] = $r20;

        $r19[4] = r8;

        $r19[5] = r9;

        $r19[6] = r5;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("convertMeteringRectangleToLegacy - activeArray = %s, meteringRect = %s, previewCrop = %s, meteringArea = %s, previewMetering = %s, reportedMetering = %s, normalizedRegionUnbounded = %s", $r19);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ParameterUtils", $r22);

     label4:
        $r18 = new android.hardware.camera2.legacy.ParameterUtils$MeteringData;

        specialinvoke $r18.<android.hardware.camera2.legacy.ParameterUtils$MeteringData: void <init>(android.hardware.Camera$Area,android.graphics.Rect,android.graphics.Rect)>(r7, r8, r9);

        return $r18;
    }

    public static android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Area)
    {
        android.graphics.Rect r0;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Area r2;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r3;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.Camera$Area;

        $r3 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r0, r1, r2, 1);

        return $r3;
    }

    public static android.hardware.camera2.params.Face convertFaceFromLegacy(android.hardware.Camera$Face, android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData)
    {
        android.hardware.Camera$Face r0;
        android.graphics.Rect r1, $r11;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r2;
        android.hardware.camera2.params.Face r3;
        android.hardware.Camera$Area r4, $r10;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r5;
        android.graphics.Point r6, r7, r8, r12, r13, r14;
        int $i0;

        r0 := @parameter0: android.hardware.Camera$Face;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "face must not be null");

        $r10 = new android.hardware.Camera$Area;

        $r11 = r0.<android.hardware.Camera$Face: android.graphics.Rect rect>;

        specialinvoke $r10.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r11, 1);

        r4 = $r10;

        r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area)>(r1, r2, r4);

        r6 = r0.<android.hardware.Camera$Face: android.graphics.Point leftEye>;

        r7 = r0.<android.hardware.Camera$Face: android.graphics.Point rightEye>;

        r8 = r0.<android.hardware.Camera$Face: android.graphics.Point mouth>;

        if r6 == null goto label1;

        if r7 == null goto label1;

        if r8 == null goto label1;

        r12 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r1, r2, r6, 1);

        r13 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r1, r2, r12, 1);

        r14 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.graphics.Point,boolean)>(r1, r2, r12, 1);

        $i0 = r0.<android.hardware.Camera$Face: int id>;

        r3 = virtualinvoke r5.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.Face toFace(int,android.graphics.Point,android.graphics.Point,android.graphics.Point)>($i0, r12, r13, r14);

        goto label2;

     label1:
        r3 = virtualinvoke r5.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.hardware.camera2.params.Face toFace()>();

     label2:
        return r3;
    }

    private static android.graphics.Point convertCameraPointToActiveArrayPoint(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.graphics.Point, boolean)
    {
        android.graphics.Rect r0, r3, $r7, $r10, $r11;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.graphics.Point r2, r6, $r9;
        boolean z0;
        android.hardware.Camera$Area r4, $r8;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.graphics.Point;

        z0 := @parameter3: boolean;

        $r7 = new android.graphics.Rect;

        $i3 = r2.<android.graphics.Point: int x>;

        $i2 = r2.<android.graphics.Point: int y>;

        $i1 = r2.<android.graphics.Point: int x>;

        $i0 = r2.<android.graphics.Point: int y>;

        specialinvoke $r7.<android.graphics.Rect: void <init>(int,int,int,int)>($i3, $i2, $i1, $i0);

        r3 = $r7;

        $r8 = new android.hardware.Camera$Area;

        specialinvoke $r8.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>(r3, 1);

        r4 = $r8;

        r5 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.Camera$Area,boolean)>(r0, r1, r4, z0);

        $r9 = new android.graphics.Point;

        $r11 = r5.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        $i4 = $r11.<android.graphics.Rect: int left>;

        $r10 = r5.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: android.graphics.Rect rect>;

        $i5 = $r10.<android.graphics.Rect: int top>;

        specialinvoke $r9.<android.graphics.Point: void <init>(int,int)>($i4, $i5);

        r6 = $r9;

        return r6;
    }

    private static android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle convertCameraAreaToActiveArrayRectangle(android.graphics.Rect, android.hardware.camera2.legacy.ParameterUtils$ZoomData, android.hardware.Camera$Area, boolean)
    {
        android.graphics.Rect r0, r3, r4, r6, r7, $r9, $r16, $r17;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r1;
        android.hardware.Camera$Area r2;
        boolean z0, $z3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.Matrix r5, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15, $r18;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.hardware.camera2.legacy.ParameterUtils$ZoomData;

        r2 := @parameter2: android.hardware.Camera$Area;

        z0 := @parameter3: boolean;

        r3 = r1.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect previewCrop>;

        r4 = r1.<android.hardware.camera2.legacy.ParameterUtils$ZoomData: android.graphics.Rect reportedCrop>;

        $i1 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f2 = (float) $i1;

        $f3 = $f2 * 1.0F;

        f0 = $f3 / 2000.0F;

        $i2 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f5 = (float) $i2;

        $f4 = $f5 * 1.0F;

        f1 = $f4 / 2000.0F;

        $r8 = new android.graphics.Matrix;

        specialinvoke $r8.<android.graphics.Matrix: void <init>()>();

        r5 = $r8;

        virtualinvoke r5.<android.graphics.Matrix: void setTranslate(float,float)>(1000.0F, 1000.0F);

        virtualinvoke r5.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f1);

        $i4 = r3.<android.graphics.Rect: int left>;

        $f6 = (float) $i4;

        $i3 = r3.<android.graphics.Rect: int top>;

        $f7 = (float) $i3;

        virtualinvoke r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f6, $f7);

        if z0 == 0 goto label1;

        $r17 = r3;

        goto label2;

     label1:
        $r17 = r4;

     label2:
        r6 = $r17;

        $r9 = r2.<android.hardware.Camera$Area: android.graphics.Rect rect>;

        r7 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: android.graphics.Rect mapRect(android.graphics.Matrix,android.graphics.Rect)>(r5, $r9);

        $z3 = virtualinvoke r7.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r6);

        if $z3 != 0 goto label3;

        $r16 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY>;

        virtualinvoke r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r16);

     label3:
        i0 = r2.<android.hardware.Camera$Area: int weight>;

        if i0 >= 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("convertCameraAreaToMeteringRectangle - rectangle ");

        $r15 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromArea(android.hardware.Camera$Area)>(r2);

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has too small weight, clip to 0");

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ParameterUtils", $r18);

     label4:
        $r10 = new android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle;

        $i5 = r2.<android.hardware.Camera$Area: int weight>;

        specialinvoke $r10.<android.hardware.camera2.legacy.ParameterUtils$WeightedRectangle: void <init>(android.graphics.Rect,int)>(r7, $i5);

        return $r10;
    }

    private void <init>()
    {
        android.hardware.camera2.legacy.ParameterUtils r0;
        java.lang.AssertionError $r1;

        r0 := @this: android.hardware.camera2.legacy.ParameterUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    static void <clinit>()
    {
        android.graphics.Rect $r0, $r2, $r3, $r4;
        android.hardware.Camera$Area $r1;
        boolean $z0;

        <android.hardware.camera2.legacy.ParameterUtils: int ZOOM_RATIO_MULTIPLIER> = 100;

        <android.hardware.camera2.legacy.ParameterUtils: java.lang.String TAG> = "ParameterUtils";

        <android.hardware.camera2.legacy.ParameterUtils: int NORMALIZED_RECTANGLE_MAX> = 1000;

        <android.hardware.camera2.legacy.ParameterUtils: int NORMALIZED_RECTANGLE_MIN> = -1000;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>(int,int,int,int)>(-1000, -1000, 1000, 1000);

        <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT> = $r0;

        $r1 = new android.hardware.Camera$Area;

        $r2 = new android.graphics.Rect;

        $r3 = <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect NORMALIZED_RECTANGLE_DEFAULT>;

        specialinvoke $r2.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r3);

        specialinvoke $r1.<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>($r2, 1);

        <android.hardware.camera2.legacy.ParameterUtils: android.hardware.Camera$Area CAMERA_AREA_DEFAULT> = $r1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <android.hardware.camera2.legacy.ParameterUtils: android.graphics.Rect RECTANGLE_EMPTY> = $r4;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ParameterUtils", 2);

        <android.hardware.camera2.legacy.ParameterUtils: boolean VERBOSE> = $z0;

        return;
    }
}
