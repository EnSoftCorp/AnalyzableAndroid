class android.os.FileObserver$ObserverThread extends java.lang.Thread
{
    private java.util.HashMap m_observers;
    private int m_fd;

    public void <init>()
    {
        android.os.FileObserver$ObserverThread r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: android.os.FileObserver$ObserverThread;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("FileObserver");

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers> = $r1;

        $i0 = specialinvoke r0.<android.os.FileObserver$ObserverThread: int init()>();

        r0.<android.os.FileObserver$ObserverThread: int m_fd> = $i0;

        return;
    }

    public void run()
    {
        android.os.FileObserver$ObserverThread r0;
        int $i0;

        r0 := @this: android.os.FileObserver$ObserverThread;

        $i0 = r0.<android.os.FileObserver$ObserverThread: int m_fd>;

        specialinvoke r0.<android.os.FileObserver$ObserverThread: void observe(int)>($i0);

        return;
    }

    public int startWatching(java.lang.String, int, android.os.FileObserver)
    {
        android.os.FileObserver$ObserverThread r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3;
        android.os.FileObserver r2;
        java.lang.Integer r3, $r6;
        java.util.HashMap r4, $r7, $r9;
        java.lang.Throwable r5, $r11;
        java.lang.ref.WeakReference $r8;

        r0 := @this: android.os.FileObserver$ObserverThread;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.FileObserver;

        $i2 = r0.<android.os.FileObserver$ObserverThread: int m_fd>;

        i1 = specialinvoke r0.<android.os.FileObserver$ObserverThread: int startWatching(int,java.lang.String,int)>($i2, r1, i0);

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i1);

        r3 = $r6;

        if i1 < 0 goto label5;

        $r7 = r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r9 = r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>;

        $r8 = new java.lang.ref.WeakReference;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r8);

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void stopWatching(int)
    {
        android.os.FileObserver$ObserverThread r0;
        int i0, $i1;

        r0 := @this: android.os.FileObserver$ObserverThread;

        i0 := @parameter0: int;

        $i1 = r0.<android.os.FileObserver$ObserverThread: int m_fd>;

        specialinvoke r0.<android.os.FileObserver$ObserverThread: void stopWatching(int,int)>($i1, i0);

        return;
    }

    public void onEvent(int, int, java.lang.String)
    {
        android.os.FileObserver$ObserverThread r0;
        int i0, i1;
        java.lang.String r1, $r19;
        android.os.FileObserver r2;
        java.util.HashMap r3, $r6, $r7, $r11;
        java.lang.ref.WeakReference r4;
        java.lang.Throwable r5, $r13, $r15, r20;
        java.lang.Integer $r8, $r12;
        java.lang.Object $r9, $r10;
        java.lang.StringBuilder $r16, $r17, $r18;

        r0 := @this: android.os.FileObserver$ObserverThread;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = null;

        $r6 = r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r4 = (java.lang.ref.WeakReference) $r9;

        if r4 == null goto label02;

        $r10 = virtualinvoke r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.os.FileObserver) $r10;

        if r2 != null goto label02;

        $r11 = r0.<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r12);

     label02:
        exitmonitor r3;

     label03:
        goto label06;

     label04:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r3;

     label05:
        throw r5;

     label06:
        if r2 == null goto label10;

     label07:
        virtualinvoke r2.<android.os.FileObserver: void onEvent(int,java.lang.String)>(i1, r1);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        r20 = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled exception in FileObserver ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("FileObserver", $r19, r20);

     label10:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private native int init();

    private native void observe(int);

    private native int startWatching(int, java.lang.String, int);

    private native void stopWatching(int, int);
}
