public class android.hardware.SerialManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.hardware.ISerialManager mService;

    public void <init>(android.content.Context, android.hardware.ISerialManager)
    {
        android.hardware.SerialManager r0;
        android.content.Context r1;
        android.hardware.ISerialManager r2;

        r0 := @this: android.hardware.SerialManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.ISerialManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.SerialManager: android.content.Context mContext> = r1;

        r0.<android.hardware.SerialManager: android.hardware.ISerialManager mService> = r2;

        return;
    }

    public java.lang.String[] getSerialPorts()
    {
        android.hardware.SerialManager r0;
        android.os.RemoteException r1, $r4;
        android.hardware.ISerialManager $r2;
        java.lang.String[] $r3;

        r0 := @this: android.hardware.SerialManager;

     label1:
        $r2 = r0.<android.hardware.SerialManager: android.hardware.ISerialManager mService>;

        $r3 = interfaceinvoke $r2.<android.hardware.ISerialManager: java.lang.String[] getSerialPorts()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SerialManager", "RemoteException in getSerialPorts", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.SerialPort openSerialPort(java.lang.String, int) throws java.io.IOException
    {
        android.hardware.SerialManager r0;
        java.lang.String r1, $r9;
        int i0;
        android.os.ParcelFileDescriptor r2;
        android.hardware.SerialPort r3, $r10;
        android.hardware.ISerialManager $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        android.os.RemoteException $r11, r12;

        r0 := @this: android.hardware.SerialManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r4 = r0.<android.hardware.SerialManager: android.hardware.ISerialManager mService>;

        r2 = interfaceinvoke $r4.<android.hardware.ISerialManager: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>(r1);

        if r2 == null goto label3;

        $r10 = new android.hardware.SerialPort;

        specialinvoke $r10.<android.hardware.SerialPort: void <init>(java.lang.String)>(r1);

        r3 = $r10;

        virtualinvoke r3.<android.hardware.SerialPort: void open(android.os.ParcelFileDescriptor,int)>(r2, i0);

     label2:
        return r3;

     label3:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open serial port ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        $r11 := @caughtexception;

        r12 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SerialManager", "exception in UsbManager.openDevice", r12);

        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public static void <clinit>()
    {
        <android.hardware.SerialManager: java.lang.String TAG> = "SerialManager";

        return;
    }
}
