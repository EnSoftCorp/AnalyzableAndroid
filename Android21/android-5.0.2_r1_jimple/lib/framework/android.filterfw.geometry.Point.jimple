public class android.filterfw.geometry.Point extends java.lang.Object
{
    public float x;
    public float y;

    public void <init>()
    {
        android.filterfw.geometry.Point r0;

        r0 := @this: android.filterfw.geometry.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(float, float)
    {
        android.filterfw.geometry.Point r0;
        float f0, f1;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.filterfw.geometry.Point: float x> = f0;

        r0.<android.filterfw.geometry.Point: float y> = f1;

        return;
    }

    public void set(float, float)
    {
        android.filterfw.geometry.Point r0;
        float f0, f1;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.filterfw.geometry.Point: float x> = f0;

        r0.<android.filterfw.geometry.Point: float y> = f1;

        return;
    }

    public boolean IsInUnitRange()
    {
        android.filterfw.geometry.Point r0;
        float $f0, $f1, $f2, $f3;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: android.filterfw.geometry.Point;

        $f0 = r0.<android.filterfw.geometry.Point: float x>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $f1 = r0.<android.filterfw.geometry.Point: float x>;

        $b1 = $f1 cmpg 1.0F;

        if $b1 > 0 goto label1;

        $f2 = r0.<android.filterfw.geometry.Point: float y>;

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        $f3 = r0.<android.filterfw.geometry.Point: float y>;

        $b3 = $f3 cmpg 1.0F;

        if $b3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.filterfw.geometry.Point plus(float, float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = new android.filterfw.geometry.Point;

        $f2 = r0.<android.filterfw.geometry.Point: float x>;

        $f5 = $f2 + f0;

        $f3 = r0.<android.filterfw.geometry.Point: float y>;

        $f4 = $f3 + f1;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>($f5, $f4);

        return $r1;
    }

    public android.filterfw.geometry.Point plus(android.filterfw.geometry.Point)
    {
        android.filterfw.geometry.Point r0, r1, $r2;
        float $f0, $f1;

        r0 := @this: android.filterfw.geometry.Point;

        r1 := @parameter0: android.filterfw.geometry.Point;

        $f1 = r1.<android.filterfw.geometry.Point: float x>;

        $f0 = r1.<android.filterfw.geometry.Point: float y>;

        $r2 = virtualinvoke r0.<android.filterfw.geometry.Point: android.filterfw.geometry.Point plus(float,float)>($f1, $f0);

        return $r2;
    }

    public android.filterfw.geometry.Point minus(float, float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = new android.filterfw.geometry.Point;

        $f2 = r0.<android.filterfw.geometry.Point: float x>;

        $f5 = $f2 - f0;

        $f3 = r0.<android.filterfw.geometry.Point: float y>;

        $f4 = $f3 - f1;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>($f5, $f4);

        return $r1;
    }

    public android.filterfw.geometry.Point minus(android.filterfw.geometry.Point)
    {
        android.filterfw.geometry.Point r0, r1, $r2;
        float $f0, $f1;

        r0 := @this: android.filterfw.geometry.Point;

        r1 := @parameter0: android.filterfw.geometry.Point;

        $f1 = r1.<android.filterfw.geometry.Point: float x>;

        $f0 = r1.<android.filterfw.geometry.Point: float y>;

        $r2 = virtualinvoke r0.<android.filterfw.geometry.Point: android.filterfw.geometry.Point minus(float,float)>($f1, $f0);

        return $r2;
    }

    public android.filterfw.geometry.Point times(float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        $r1 = new android.filterfw.geometry.Point;

        $f1 = r0.<android.filterfw.geometry.Point: float x>;

        $f4 = $f1 * f0;

        $f2 = r0.<android.filterfw.geometry.Point: float y>;

        $f3 = $f2 * f0;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>($f4, $f3);

        return $r1;
    }

    public android.filterfw.geometry.Point mult(float, float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = new android.filterfw.geometry.Point;

        $f2 = r0.<android.filterfw.geometry.Point: float x>;

        $f5 = $f2 * f0;

        $f3 = r0.<android.filterfw.geometry.Point: float y>;

        $f4 = $f3 * f1;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>($f5, $f4);

        return $r1;
    }

    public float length()
    {
        android.filterfw.geometry.Point r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        double $d0, $d1;

        r0 := @this: android.filterfw.geometry.Point;

        $f1 = r0.<android.filterfw.geometry.Point: float x>;

        $f0 = r0.<android.filterfw.geometry.Point: float x>;

        $f5 = $f1 * $f0;

        $f3 = r0.<android.filterfw.geometry.Point: float y>;

        $f2 = r0.<android.filterfw.geometry.Point: float y>;

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d1;

        return $f7;
    }

    public float distanceTo(android.filterfw.geometry.Point)
    {
        android.filterfw.geometry.Point r0, r1, $r2;
        float $f0;

        r0 := @this: android.filterfw.geometry.Point;

        r1 := @parameter0: android.filterfw.geometry.Point;

        $r2 = virtualinvoke r1.<android.filterfw.geometry.Point: android.filterfw.geometry.Point minus(android.filterfw.geometry.Point)>(r0);

        $f0 = virtualinvoke $r2.<android.filterfw.geometry.Point: float length()>();

        return $f0;
    }

    public android.filterfw.geometry.Point scaledTo(float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, $f1, $f2;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.filterfw.geometry.Point: float length()>();

        $f2 = f0 / $f1;

        $r1 = virtualinvoke r0.<android.filterfw.geometry.Point: android.filterfw.geometry.Point times(float)>($f2);

        return $r1;
    }

    public android.filterfw.geometry.Point normalize()
    {
        android.filterfw.geometry.Point r0, $r1;

        r0 := @this: android.filterfw.geometry.Point;

        $r1 = virtualinvoke r0.<android.filterfw.geometry.Point: android.filterfw.geometry.Point scaledTo(float)>(1.0F);

        return $r1;
    }

    public android.filterfw.geometry.Point rotated90(int)
    {
        android.filterfw.geometry.Point r0, $r1;
        int i0, i1;
        float f0, f1, f2;

        r0 := @this: android.filterfw.geometry.Point;

        i0 := @parameter0: int;

        f0 = r0.<android.filterfw.geometry.Point: float x>;

        f1 = r0.<android.filterfw.geometry.Point: float y>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        f2 = f0;

        f0 = f1;

        f1 = neg f2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = new android.filterfw.geometry.Point;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>(f0, f1);

        return $r1;
    }

    public android.filterfw.geometry.Point rotated(float)
    {
        android.filterfw.geometry.Point r0, $r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;

        r0 := @this: android.filterfw.geometry.Point;

        f0 := @parameter0: float;

        $r1 = new android.filterfw.geometry.Point;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f1 = r0.<android.filterfw.geometry.Point: float x>;

        $d2 = (double) $f1;

        $d4 = $d1 * $d2;

        $d3 = (double) f0;

        $d5 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $f2 = r0.<android.filterfw.geometry.Point: float y>;

        $d6 = (double) $f2;

        $d7 = $d5 * $d6;

        $d8 = $d4 - $d7;

        $f3 = (float) $d8;

        $d9 = (double) f0;

        $d10 = staticinvoke <java.lang.Math: double sin(double)>($d9);

        $f4 = r0.<android.filterfw.geometry.Point: float x>;

        $d12 = (double) $f4;

        $d14 = $d10 * $d12;

        $d11 = (double) f0;

        $d13 = staticinvoke <java.lang.Math: double cos(double)>($d11);

        $f5 = r0.<android.filterfw.geometry.Point: float y>;

        $d15 = (double) $f5;

        $d17 = $d13 * $d15;

        $d16 = $d14 + $d17;

        $f6 = (float) $d16;

        specialinvoke $r1.<android.filterfw.geometry.Point: void <init>(float,float)>($f3, $f6);

        return $r1;
    }

    public android.filterfw.geometry.Point rotatedAround(android.filterfw.geometry.Point, float)
    {
        android.filterfw.geometry.Point r0, r1, $r2, $r3, $r4;
        float f0;

        r0 := @this: android.filterfw.geometry.Point;

        r1 := @parameter0: android.filterfw.geometry.Point;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r0.<android.filterfw.geometry.Point: android.filterfw.geometry.Point minus(android.filterfw.geometry.Point)>(r1);

        $r3 = virtualinvoke $r2.<android.filterfw.geometry.Point: android.filterfw.geometry.Point rotated(float)>(f0);

        $r4 = virtualinvoke $r3.<android.filterfw.geometry.Point: android.filterfw.geometry.Point plus(android.filterfw.geometry.Point)>(r1);

        return $r4;
    }

    public java.lang.String toString()
    {
        android.filterfw.geometry.Point r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        float $f0, $f1;
        java.lang.String $r7;

        r0 := @this: android.filterfw.geometry.Point;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $f0 = r0.<android.filterfw.geometry.Point: float x>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $f1 = r0.<android.filterfw.geometry.Point: float y>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
