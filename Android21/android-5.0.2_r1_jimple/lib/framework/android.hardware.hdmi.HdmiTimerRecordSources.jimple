public class android.hardware.hdmi.HdmiTimerRecordSources extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final int RECORDING_SEQUENCE_REPEAT_ONCE_ONLY;
    public static final int RECORDING_SEQUENCE_REPEAT_SUNDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_MONDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_TUESDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_WEDNESDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_THURSDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_FRIDAY;
    public static final int RECORDING_SEQUENCE_REPEAT_SATUREDAY;
    private static final int RECORDING_SEQUENCE_REPEAT_MASK;
    private static final int EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG;
    private static final int EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS;

    private void <init>()
    {
        android.hardware.hdmi.HdmiTimerRecordSources r0;

        r0 := @this: android.hardware.hdmi.HdmiTimerRecordSources;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource ofDigitalSource(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo, android.hardware.hdmi.HdmiRecordSources$DigitalServiceSource)
    {
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo r0;
        android.hardware.hdmi.HdmiRecordSources$DigitalServiceSource r1;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource $r2;

        r0 := @parameter0: android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$DigitalServiceSource;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource)>(r0, r1);

        $r2 = new android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        specialinvoke $r2.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: void <init>(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r0, r1, null);

        return $r2;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource ofAnalogueSource(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo, android.hardware.hdmi.HdmiRecordSources$AnalogueServiceSource)
    {
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo r0;
        android.hardware.hdmi.HdmiRecordSources$AnalogueServiceSource r1;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource $r2;

        r0 := @parameter0: android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$AnalogueServiceSource;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource)>(r0, r1);

        $r2 = new android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        specialinvoke $r2.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: void <init>(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r0, r1, null);

        return $r2;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource ofExternalPlug(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo, android.hardware.hdmi.HdmiRecordSources$ExternalPlugData)
    {
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo r0;
        android.hardware.hdmi.HdmiRecordSources$ExternalPlugData r1;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource $r2;
        android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator $r3;

        r0 := @parameter0: android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$ExternalPlugData;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource)>(r0, r1);

        $r2 = new android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        $r3 = new android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator;

        specialinvoke $r3.<android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator: void <init>(android.hardware.hdmi.HdmiRecordSources$RecordSource,int,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r1, 4, null);

        specialinvoke $r2.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: void <init>(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r0, $r3, null);

        return $r2;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource ofExternalPhysicalAddress(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo, android.hardware.hdmi.HdmiRecordSources$ExternalPhysicalAddress)
    {
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo r0;
        android.hardware.hdmi.HdmiRecordSources$ExternalPhysicalAddress r1;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource $r2;
        android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator $r3;

        r0 := @parameter0: android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$ExternalPhysicalAddress;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource)>(r0, r1);

        $r2 = new android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        $r3 = new android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator;

        specialinvoke $r3.<android.hardware.hdmi.HdmiTimerRecordSources$ExternalSourceDecorator: void <init>(android.hardware.hdmi.HdmiRecordSources$RecordSource,int,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r1, 5, null);

        specialinvoke $r2.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: void <init>(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo,android.hardware.hdmi.HdmiRecordSources$RecordSource,android.hardware.hdmi.HdmiTimerRecordSources$1)>(r0, $r3, null);

        return $r2;
    }

    private static void checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo, android.hardware.hdmi.HdmiRecordSources$RecordSource)
    {
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo r0;
        android.hardware.hdmi.HdmiRecordSources$RecordSource r1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @parameter0: android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$RecordSource;

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HdmiTimerRecordingSources", "TimerInfo should not be null.");

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TimerInfo should not be null.");

        throw $r3;

     label1:
        if r1 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HdmiTimerRecordingSources", "source should not be null.");

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source should not be null.");

        throw $r2;

     label2:
        return;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$Time timeOf(int, int)
    {
        int i0, i1;
        android.hardware.hdmi.HdmiTimerRecordSources$Time $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimeValue(int,int)>(i0, i1);

        $r0 = new android.hardware.hdmi.HdmiTimerRecordSources$Time;

        specialinvoke $r0.<android.hardware.hdmi.HdmiTimerRecordSources$Time: void <init>(int,int,android.hardware.hdmi.HdmiTimerRecordSources$1)>(i0, i1, null);

        return $r0;
    }

    private static void checkTimeValue(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8;
        java.lang.String $r4, $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 23 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hour should be in rage of [0, 23]:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        if i1 < 0 goto label3;

        if i1 <= 59 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minute should be in rage of [0, 59]:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        return;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$Duration durationOf(int, int)
    {
        int i0, i1;
        android.hardware.hdmi.HdmiTimerRecordSources$Duration $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkDurationValue(int,int)>(i0, i1);

        $r0 = new android.hardware.hdmi.HdmiTimerRecordSources$Duration;

        specialinvoke $r0.<android.hardware.hdmi.HdmiTimerRecordSources$Duration: void <init>(int,int,android.hardware.hdmi.HdmiTimerRecordSources$1)>(i0, i1, null);

        return $r0;
    }

    private static void checkDurationValue(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8;
        java.lang.String $r4, $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 99 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hour should be in rage of [0, 99]:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        if i1 < 0 goto label3;

        if i1 <= 59 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minute should be in rage of [0, 59]:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        return;
    }

    public static android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo timerInfoOf(int, int, android.hardware.hdmi.HdmiTimerRecordSources$Time, android.hardware.hdmi.HdmiTimerRecordSources$Duration, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.hardware.hdmi.HdmiTimerRecordSources$Time r0;
        android.hardware.hdmi.HdmiTimerRecordSources$Duration r1;
        java.lang.IllegalArgumentException $r2, $r7, $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r14, $r15, $r17;
        java.lang.String $r6, $r11, $r16;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.hardware.hdmi.HdmiTimerRecordSources$Time;

        r1 := @parameter3: android.hardware.hdmi.HdmiTimerRecordSources$Duration;

        i2 := @parameter4: int;

        if i0 < 0 goto label1;

        if i0 <= 31 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Day of month should be in range of [0, 31]:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        if i1 < 1 goto label3;

        if i1 <= 12 goto label4;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Month of year should be in range of [1, 12]:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label4:
        $i5 = r0.<android.hardware.hdmi.HdmiTimerRecordSources$Time: int mHour>;

        $i3 = r0.<android.hardware.hdmi.HdmiTimerRecordSources$Time: int mMinute>;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkTimeValue(int,int)>($i5, $i3);

        $i6 = r1.<android.hardware.hdmi.HdmiTimerRecordSources$Duration: int mHour>;

        $i4 = r1.<android.hardware.hdmi.HdmiTimerRecordSources$Duration: int mMinute>;

        staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: void checkDurationValue(int,int)>($i6, $i4);

        if i2 == 0 goto label5;

        $i7 = i2 & -128;

        if $i7 == 0 goto label5;

        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid reecording sequence value:");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label5:
        $r12 = new android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo;

        specialinvoke $r12.<android.hardware.hdmi.HdmiTimerRecordSources$TimerInfo: void <init>(int,int,android.hardware.hdmi.HdmiTimerRecordSources$Time,android.hardware.hdmi.HdmiTimerRecordSources$Duration,int,android.hardware.hdmi.HdmiTimerRecordSources$1)>(i0, i1, r0, r1, i2, null);

        return $r12;
    }

    public static boolean checkTimerRecordSource(int, byte[])
    {
        int i0, i1, $i3;
        byte[] r0;
        byte b2;
        boolean $z0, $z1, $z2, $z3;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        $i3 = lengthof r0;

        i1 = $i3 - 7;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label07;
            default: goto label14;
        };

     label01:
        if 7 != i1 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        return $z0;

     label04:
        if 4 != i1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        return $z3;

     label07:
        b2 = r0[7];

        if b2 != 4 goto label10;

        if 2 != i1 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        return $z2;

     label10:
        if b2 != 5 goto label13;

        if 3 != i1 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        return $z1;

     label13:
        return 0;

     label14:
        return 0;
    }

    public static void <clinit>()
    {
        <android.hardware.hdmi.HdmiTimerRecordSources: int EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS> = 5;

        <android.hardware.hdmi.HdmiTimerRecordSources: int EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG> = 4;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_MASK> = 127;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_SATUREDAY> = 64;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_FRIDAY> = 32;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_THURSDAY> = 16;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_WEDNESDAY> = 8;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_TUESDAY> = 4;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_MONDAY> = 2;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_SUNDAY> = 1;

        <android.hardware.hdmi.HdmiTimerRecordSources: int RECORDING_SEQUENCE_REPEAT_ONCE_ONLY> = 0;

        <android.hardware.hdmi.HdmiTimerRecordSources: java.lang.String TAG> = "HdmiTimerRecordingSources";

        return;
    }
}
