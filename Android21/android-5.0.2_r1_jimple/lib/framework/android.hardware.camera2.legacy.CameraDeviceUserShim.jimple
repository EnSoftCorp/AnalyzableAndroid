public class android.hardware.camera2.legacy.CameraDeviceUserShim extends java.lang.Object implements android.hardware.camera2.ICameraDeviceUser
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final int OPEN_CAMERA_TIMEOUT_MS;
    private final android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice;
    private final java.lang.Object mConfigureLock;
    private int mSurfaceIdCounter;
    private boolean mConfiguring;
    private final android.util.SparseArray mSurfaces;
    private final android.hardware.camera2.CameraCharacteristics mCameraCharacteristics;
    private final android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit;
    private final android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks;

    protected void <init>(int, android.hardware.camera2.legacy.LegacyCameraDevice, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper, android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.legacy.LegacyCameraDevice r1;
        android.hardware.camera2.CameraCharacteristics r2;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r3;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread r4;
        java.lang.Object $r5;
        android.util.SparseArray $r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.legacy.LegacyCameraDevice;

        r2 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter3: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        r4 := @parameter4: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock> = $r5;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice> = r1;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces> = $r6;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.CameraCharacteristics mCameraCharacteristics> = r2;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit> = r3;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks> = r4;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter> = 0;

        return;
    }

    private static int translateErrorsFromCamera1(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case -13: goto label1;
            default: goto label2;
        };

     label1:
        return -1;

     label2:
        return i0;
    }

    public static android.hardware.camera2.legacy.CameraDeviceUserShim connectBinderShim(android.hardware.camera2.ICameraDeviceCallbacks, int)
    {
        android.hardware.camera2.ICameraDeviceCallbacks r0;
        int i0, i1;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper r1, $r7;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread r2, $r8;
        android.hardware.Camera r3;
        android.hardware.Camera$CameraInfo r4, $r9;
        java.lang.RuntimeException r5, $r13;
        android.hardware.camera2.legacy.LegacyCameraDevice r6, $r10;
        boolean $z0;
        android.hardware.camera2.legacy.CameraDeviceUserShim $r11;
        android.hardware.camera2.utils.CameraRuntimeException $r12;
        android.hardware.Camera$Parameters r14;
        android.hardware.camera2.CameraCharacteristics r15;

        r0 := @parameter0: android.hardware.camera2.ICameraDeviceCallbacks;

        i0 := @parameter1: int;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Opening shim Camera device");

     label1:
        $r7 = new android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper;

        specialinvoke $r7.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void <init>(int)>(i0);

        r1 = $r7;

        $r8 = new android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread;

        specialinvoke $r8.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void <init>(android.hardware.camera2.ICameraDeviceCallbacks)>(r0);

        r2 = $r8;

        i1 = virtualinvoke r1.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: int waitForOpen(int)>(5000);

        r3 = virtualinvoke r1.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera getCamera()>();

        staticinvoke <android.hardware.camera2.utils.CameraBinderDecorator: void throwOnError(int)>(i1);

        virtualinvoke r3.<android.hardware.Camera: boolean disableShutterSound()>();

        $r9 = new android.hardware.Camera$CameraInfo;

        specialinvoke $r9.<android.hardware.Camera$CameraInfo: void <init>()>();

        r4 = $r9;

        staticinvoke <android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>(i0, r4);

     label2:
        r14 = virtualinvoke r3.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        r5 = $r13;

        $r12 = new android.hardware.camera2.utils.CameraRuntimeException;

        specialinvoke $r12.<android.hardware.camera2.utils.CameraRuntimeException: void <init>(int,java.lang.String,java.lang.Throwable)>(3, "Unable to get initial parameters", r5);

        throw $r12;

     label5:
        r15 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(android.hardware.Camera$Parameters,android.hardware.Camera$CameraInfo)>(r14, r4);

        $r10 = new android.hardware.camera2.legacy.LegacyCameraDevice;

        specialinvoke $r10.<android.hardware.camera2.legacy.LegacyCameraDevice: void <init>(int,android.hardware.Camera,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.ICameraDeviceCallbacks)>(i0, r3, r15, r2);

        r6 = $r10;

        $r11 = new android.hardware.camera2.legacy.CameraDeviceUserShim;

        specialinvoke $r11.<android.hardware.camera2.legacy.CameraDeviceUserShim: void <init>(int,android.hardware.camera2.legacy.LegacyCameraDevice,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper,android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread)>(i0, r6, r15, r1, r2);

        return $r11;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    public void disconnect()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Throwable r1, $r6;
        boolean $z0, $z1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r2, $r3;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper $r4, $r7;
        android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread $r5, $r8;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "disconnect called.");

     label1:
        $r2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r2.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot disconnect, device has already been closed.");

     label2:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: void close()>();

     label3:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit>;

        virtualinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void close()>();

        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void close()>();

        goto label6;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

     label5:
        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper mCameraInit>;

        virtualinvoke $r7.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: void close()>();

        $r8 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread mCameraCallbacks>;

        virtualinvoke $r8.<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraCallbackThread: void close()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int submitRequest(android.hardware.camera2.CaptureRequest, boolean, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.CaptureRequest r1;
        boolean z0, $z1, $z2, $z3;
        android.hardware.camera2.utils.LongParcelable r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r8;
        android.hardware.camera2.legacy.LegacyCameraDevice $r5, $r7;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.hardware.camera2.utils.LongParcelable;

        $z1 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "submitRequest called.");

     label1:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z2 = virtualinvoke $r5.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z2 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, device has been closed.");

        return -19;

     label2:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r3 = $r6;

        entermonitor $r6;

     label3:
        $z3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z3 == 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, configuration change in progress.");

        exitmonitor r3;

     label4:
        return -38;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $i0 = virtualinvoke $r7.<android.hardware.camera2.legacy.LegacyCameraDevice: int submitRequest(android.hardware.camera2.CaptureRequest,boolean,android.hardware.camera2.utils.LongParcelable)>(r1, z0, r2);

        return $i0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int submitRequestList(java.util.List, boolean, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.util.List r1;
        boolean z0, $z1, $z2, $z3;
        android.hardware.camera2.utils.LongParcelable r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r8;
        android.hardware.camera2.legacy.LegacyCameraDevice $r5, $r7;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.hardware.camera2.utils.LongParcelable;

        $z1 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "submitRequestList called.");

     label1:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z2 = virtualinvoke $r5.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z2 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request list, device has been closed.");

        return -19;

     label2:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r3 = $r6;

        entermonitor $r6;

     label3:
        $z3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z3 == 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot submit request, configuration change in progress.");

        exitmonitor r3;

     label4:
        return -38;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $i0 = virtualinvoke $r7.<android.hardware.camera2.legacy.LegacyCameraDevice: int submitRequestList(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>(r1, z0, r2);

        return $i0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int cancelRequest(int, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.utils.LongParcelable r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r4, $r6;
        long l4;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.utils.LongParcelable;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "cancelRequest called.");

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot cancel request, device has been closed.");

        return -19;

     label2:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r2 = $r5;

        entermonitor $r5;

     label3:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot cancel request, configuration change in progress.");

        exitmonitor r2;

     label4:
        return -38;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        l4 = virtualinvoke $r6.<android.hardware.camera2.legacy.LegacyCameraDevice: long cancelRequest(int)>(i0);

        virtualinvoke r1.<android.hardware.camera2.utils.LongParcelable: void setNumber(long)>(l4);

        return 0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int beginConfigure()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r3;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "beginConfigure called.");

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot begin configure, device has been closed.");

        return -19;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r1 = $r4;

        entermonitor $r4;

     label3:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot begin configure, configuration change already in progress.");

        exitmonitor r1;

     label4:
        return -38;

     label5:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 1;

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return 0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int endConfigure()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.util.ArrayList r1, $r9;
        java.lang.Object r2, $r5, $r10;
        int i0, i1, $i2;
        java.lang.Throwable r3, $r11;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r4, $r7;
        android.util.SparseArray $r6, $r8;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "endConfigure called.");

     label01:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot end configure, device has been closed.");

        return -19;

     label02:
        r1 = null;

        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r2 = $r5;

        entermonitor $r5;

     label03:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 != 0 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot end configure, no configuration change in progress.");

        exitmonitor r2;

     label04:
        return -38;

     label05:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if i0 <= 0 goto label07;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1 = $r9;

        i1 = 0;

     label06:
        if i1 >= i0 goto label07;

        $r8 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        $r10 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        i1 = i1 + 1;

        goto label06;

     label07:
        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring> = 0;

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r7 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $i2 = virtualinvoke $r7.<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(java.util.List)>(r1);

        return $i2;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int deleteStream(int)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0, i1;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r12;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r3;
        android.util.SparseArray $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "deleteStream called.");

     label01:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot delete stream, device has been closed.");

        return -19;

     label02:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r1 = $r4;

        entermonitor $r4;

     label03:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 != 0 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot delete stream, beginConfigure hasn\'t been called yet.");

        exitmonitor r1;

     label04:
        return -38;

     label05:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        i1 = virtualinvoke $r5.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if i1 >= 0 goto label07;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete stream, stream id ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist.");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", $r10);

        exitmonitor r1;

     label06:
        return -22;

     label07:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        virtualinvoke $r6.<android.util.SparseArray: void removeAt(int)>(i1);

        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int createStream(int, int, int, android.view.Surface)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.Surface r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r4;
        android.util.SparseArray $r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.view.Surface;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "createStream called.");

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create stream, device has been closed.");

        return -19;

     label2:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r2 = $r5;

        entermonitor $r5;

     label3:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 != 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create stream, beginConfigure hasn\'t been called yet.");

        exitmonitor r2;

     label4:
        return -38;

     label5:
        $i4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter>;

        $i5 = $i4 + 1;

        r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: int mSurfaceIdCounter> = $i5;

        i3 = $i5;

        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.util.SparseArray mSurfaces>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r1);

        exitmonitor r2;

     label6:
        return i3;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int createDefaultRequest(int, android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        int i0;
        android.hardware.camera2.impl.CameraMetadataNative r1, r2;
        boolean $z0, $z1;
        android.hardware.camera2.legacy.LegacyCameraDevice $r4;
        android.hardware.camera2.CameraCharacteristics $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.impl.CameraMetadataNative;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "createDefaultRequest called.");

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot create default request, device has been closed.");

        return -19;

     label2:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.CameraCharacteristics mCameraCharacteristics>;

        r2 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.impl.CameraMetadataNative createRequestTemplate(android.hardware.camera2.CameraCharacteristics,int)>($r5, i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "createDefaultRequest - invalid templateId specified");

        return -22;

     label5:
        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void swap(android.hardware.camera2.impl.CameraMetadataNative)>(r2);

        return 0;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public int getCameraInfo(android.hardware.camera2.impl.CameraMetadataNative)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.impl.CameraMetadataNative r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "getCameraInfo called.");

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "getCameraInfo unimplemented.");

        return 0;
    }

    public int waitUntilIdle() throws android.os.RemoteException
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r3, $r5;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "waitUntilIdle called.");

     label1:
        $r3 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r3.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot wait until idle, device has been closed.");

        return -19;

     label2:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r1 = $r4;

        entermonitor $r4;

     label3:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot wait until idle, configuration change in progress.");

        exitmonitor r1;

     label4:
        return -38;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.LegacyCameraDevice: void waitUntilIdle()>();

        return 0;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int flush(android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;
        android.hardware.camera2.utils.LongParcelable r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.legacy.LegacyCameraDevice $r4, $r6;
        long l3;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        r1 := @parameter0: android.hardware.camera2.utils.LongParcelable;

        $z0 = <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "flush called.");

     label01:
        $r4 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        $z1 = virtualinvoke $r4.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()>();

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot flush, device has been closed.");

        return -19;

     label02:
        $r5 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.Object mConfigureLock>;

        r2 = $r5;

        entermonitor $r5;

     label03:
        $z2 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean mConfiguring>;

        if $z2 == 0 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraDeviceUserShim", "Cannot flush, configuration change in progress.");

        exitmonitor r2;

     label04:
        return -38;

     label05:
        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label08:
        throw r3;

     label09:
        $r6 = r0.<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.LegacyCameraDevice mLegacyDevice>;

        l3 = virtualinvoke $r6.<android.hardware.camera2.legacy.LegacyCameraDevice: long flush()>();

        if r1 == null goto label10;

        virtualinvoke r1.<android.hardware.camera2.utils.LongParcelable: void setNumber(long)>(l3);

     label10:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public android.os.IBinder asBinder()
    {
        android.hardware.camera2.legacy.CameraDeviceUserShim r0;

        r0 := @this: android.hardware.camera2.legacy.CameraDeviceUserShim;

        return null;
    }

    static int access$000(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.hardware.camera2.legacy.CameraDeviceUserShim: int translateErrorsFromCamera1(int)>(i0);

        return $i1;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.camera2.legacy.CameraDeviceUserShim: int OPEN_CAMERA_TIMEOUT_MS> = 5000;

        <android.hardware.camera2.legacy.CameraDeviceUserShim: java.lang.String TAG> = "CameraDeviceUserShim";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("HAL1ShimLogging", 3);

        <android.hardware.camera2.legacy.CameraDeviceUserShim: boolean DEBUG> = $z0;

        return;
    }
}
