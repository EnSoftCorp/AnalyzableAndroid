public class android.hardware.camera2.legacy.LegacyFaceDetectMapper extends java.lang.Object
{
    private static java.lang.String TAG;
    private static final boolean VERBOSE;
    private final android.hardware.Camera mCamera;
    private final boolean mFaceDetectSupported;
    private boolean mFaceDetectEnabled;
    private boolean mFaceDetectScenePriority;
    private boolean mFaceDetectReporting;
    private final java.lang.Object mLock;
    private android.hardware.Camera$Face[] mFaces;
    private android.hardware.Camera$Face[] mFacesPrev;

    public void <init>(android.hardware.Camera, android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.Camera r1, $r5, $r11;
        android.hardware.camera2.CameraCharacteristics r2;
        java.lang.Object $r3, $r4, $r8;
        android.hardware.camera2.CameraCharacteristics$Key $r7;
        int[] $r9;
        boolean $z0, $z1;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper$1 $r10;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter0: android.hardware.Camera;

        r2 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled> = 0;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority> = 0;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock> = $r3;

        $r4 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "camera must not be null");

        $r5 = (android.hardware.Camera) $r4;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera> = $r5;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "characteristics must not be null");

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>;

        $r8 = virtualinvoke r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        $r9 = (int[]) $r8;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r9, 1);

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported> = $z0;

        $z1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r11 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        $r10 = new android.hardware.camera2.legacy.LegacyFaceDetectMapper$1;

        specialinvoke $r10.<android.hardware.camera2.legacy.LegacyFaceDetectMapper$1: void <init>(android.hardware.camera2.legacy.LegacyFaceDetectMapper)>(r0);

        virtualinvoke $r11.<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>($r10);

        return;
    }

    public void processFaceDetectMode(android.hardware.camera2.CaptureRequest, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.Camera$Parameters r2;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object r3, $r8, $r13, $r14;
        java.lang.Throwable r4, $r26;
        android.hardware.camera2.CaptureRequest$Key $r6, $r10;
        java.lang.Integer $r7, $r9, $r11, $r12;
        android.hardware.Camera $r15, $r17;
        java.lang.String $r16, $r18, $r20, $r22, $r23, $r25, $r27;
        java.lang.StringBuilder $r19, $r21, $r24;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.Camera$Parameters;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "captureRequest must not be null");

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r6, $r7);

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label01;

        $z8 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported>;

        if $z8 != 0 goto label01;

        $r27 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r27, "processFaceDetectMode - Ignoring statistics.faceDetectMode; face detection is not available");

        return;

     label01:
        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <android.hardware.camera2.utils.ParamsUtils: java.lang.Object getOrDefault(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>(r1, $r10, $r11);

        $r12 = (java.lang.Integer) $r13;

        i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if i1 != 1 goto label02;

        $z7 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectSupported>;

        if $z7 != 0 goto label02;

        $r25 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r25, "processFaceDetectMode - ignoring control.sceneMode == FACE_PRIORITY; face detection is not available");

        return;

     label02:
        tableswitch(i0)
        {
            case 0: goto label03;
            case 1: goto label03;
            case 2: goto label04;
            default: goto label05;
        };

     label03:
        goto label06;

     label04:
        $r20 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r20, "processFaceDetectMode - statistics.faceDetectMode == FULL unsupported, downgrading to SIMPLE");

        goto label06;

     label05:
        $r23 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processFaceDetectMode - ignoring unknown statistics.faceDetectMode = ");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r23, $r22);

        return;

     label06:
        if i0 != 0 goto label07;

        if i1 != 1 goto label08;

     label07:
        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        z0 = $z6;

        $r14 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        r3 = $r14;

        entermonitor $r14;

     label10:
        $z1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled>;

        if z0 == $z1 goto label18;

        if z0 == 0 goto label11;

        $r17 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        virtualinvoke $r17.<android.hardware.Camera: void startFaceDetection()>();

        $z5 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean VERBOSE>;

        if $z5 == 0 goto label13;

        $r18 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r18, "processFaceDetectMode - start face detection");

        goto label13;

     label11:
        $r15 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera mCamera>;

        virtualinvoke $r15.<android.hardware.Camera: void stopFaceDetection()>();

        $z2 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean VERBOSE>;

        if $z2 == 0 goto label12;

        $r16 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r16, "processFaceDetectMode - stop face detection");

     label12:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces> = null;

     label13:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled> = z0;

        if i1 != 1 goto label14;

        $z3 = 1;

        goto label15;

     label14:
        $z3 = 0;

     label15:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority> = $z3;

        if i0 == 0 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting> = $z4;

     label18:
        exitmonitor r3;

     label19:
        goto label22;

     label20:
        $r26 := @caughtexception;

        r4 = $r26;

        exitmonitor r3;

     label21:
        throw r4;

     label22:
        return;

        catch java.lang.Throwable from label10 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public void mapResultFaces(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.camera2.impl.CameraMetadataNative r1;
        android.hardware.camera2.legacy.LegacyRequest r2;
        android.hardware.Camera$Face[] r3, r4, r12;
        byte b0, $b5;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r5, $r16, $r17, $r19;
        java.lang.Throwable r6, $r37;
        android.util.Size r7;
        android.hardware.Camera$Parameters r8;
        android.graphics.Rect r9, $r21;
        android.hardware.camera2.legacy.ParameterUtils$ZoomData r10;
        java.util.ArrayList r11, $r22;
        int i1, i2;
        android.hardware.Camera$Face r13;
        android.hardware.camera2.CameraCharacteristics$Key $r18;
        android.hardware.camera2.CaptureRequest$Key $r20;
        java.lang.Object[] $r23;
        android.hardware.camera2.CaptureResult$Key $r24, $r26, $r30;
        android.hardware.camera2.params.Face[] $r25;
        java.lang.Integer $r27, $r29;
        java.lang.StringBuilder $r28, $r32, $r34;
        java.lang.String $r31, $r33, $r35, $r36;
        android.hardware.camera2.params.Face $r38;
        android.hardware.camera2.CameraCharacteristics r39;
        android.hardware.camera2.CaptureRequest r40;

        r0 := @this: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter0: android.hardware.camera2.impl.CameraMetadataNative;

        r2 := @parameter1: android.hardware.camera2.legacy.LegacyRequest;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "result must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "legacyRequest must not be null");

        $r16 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        r5 = $r16;

        entermonitor $r16;

     label01:
        $z1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting>;

        if $z1 == 0 goto label02;

        $b5 = 1;

        goto label03;

     label02:
        $b5 = 0;

     label03:
        b0 = $b5;

        $z2 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectReporting>;

        if $z2 == 0 goto label04;

        r3 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces>;

        goto label05;

     label04:
        r3 = null;

     label05:
        z0 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectScenePriority>;

        r4 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFacesPrev>;

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFacesPrev> = r3;

        exitmonitor r5;

     label06:
        goto label09;

     label07:
        $r37 := @caughtexception;

        r6 = $r37;

        exitmonitor r5;

     label08:
        throw r6;

     label09:
        r39 = r2.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CameraCharacteristics characteristics>;

        r40 = r2.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.camera2.CaptureRequest captureRequest>;

        r7 = r2.<android.hardware.camera2.legacy.LegacyRequest: android.util.Size previewSize>;

        r8 = r2.<android.hardware.camera2.legacy.LegacyRequest: android.hardware.Camera$Parameters parameters>;

        $r18 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r17 = virtualinvoke r39.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r18);

        r9 = (android.graphics.Rect) $r17;

        $r20 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r19 = virtualinvoke r40.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r20);

        $r21 = (android.graphics.Rect) $r19;

        r10 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.legacy.ParameterUtils$ZoomData convertScalerCropRegion(android.graphics.Rect,android.graphics.Rect,android.util.Size,android.hardware.Camera$Parameters)>(r9, $r21, r7, r8);

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r11 = $r22;

        if r3 == null goto label13;

        r12 = r3;

        i1 = lengthof r12;

        i2 = 0;

     label10:
        if i2 >= i1 goto label13;

        r13 = r12[i2];

        if r13 == null goto label11;

        $r38 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.hardware.camera2.params.Face convertFaceFromLegacy(android.hardware.Camera$Face,android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData)>(r13, r9, r10);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label12;

     label11:
        $r35 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r35, "mapResultFaces - read NULL face from camera1 device");

     label12:
        i2 = i2 + 1;

        goto label10;

     label13:
        $z3 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean VERBOSE>;

        if $z3 == 0 goto label14;

        if r4 == r3 goto label14;

        $r33 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mapResultFaces - changed to ");

        $r31 = staticinvoke <android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)>(r11);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r33, $r36);

     label14:
        $r26 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACES>;

        $r25 = newarray (android.hardware.camera2.params.Face)[0];

        $r23 = interfaceinvoke r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r25);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r26, $r23);

        $r24 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r24, $r29);

        if z0 == 0 goto label15;

        $r30 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.impl.CameraMetadataNative: void set(android.hardware.camera2.CaptureResult$Key,java.lang.Object)>($r30, $r27);

     label15:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    static java.lang.Object access$000(android.hardware.camera2.legacy.LegacyFaceDetectMapper)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100(android.hardware.camera2.legacy.LegacyFaceDetectMapper)
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $z0 = r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean mFaceDetectEnabled>;

        return $z0;
    }

    static android.hardware.Camera$Face[] access$202(android.hardware.camera2.legacy.LegacyFaceDetectMapper, android.hardware.Camera$Face[])
    {
        android.hardware.camera2.legacy.LegacyFaceDetectMapper r0;
        android.hardware.Camera$Face[] r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        r1 := @parameter1: android.hardware.Camera$Face[];

        r0.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: android.hardware.Camera$Face[] mFaces> = r1;

        return r1;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        return $r0;
    }

    static boolean access$400()
    {
        boolean $z0;

        $z0 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean VERBOSE>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        boolean $z0;

        <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG> = "LegacyFaceDetectMapper";

        $r0 = <android.hardware.camera2.legacy.LegacyFaceDetectMapper: java.lang.String TAG>;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>($r0, 2);

        <android.hardware.camera2.legacy.LegacyFaceDetectMapper: boolean VERBOSE> = $z0;

        return;
    }
}
