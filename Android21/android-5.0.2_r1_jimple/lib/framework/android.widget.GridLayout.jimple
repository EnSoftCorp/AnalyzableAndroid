public class android.widget.GridLayout extends android.view.ViewGroup
{
    public static final int HORIZONTAL;
    public static final int VERTICAL;
    public static final int UNDEFINED;
    public static final int ALIGN_BOUNDS;
    public static final int ALIGN_MARGINS;
    static final int MAX_SIZE;
    static final int DEFAULT_CONTAINER_MARGIN;
    static final int UNINITIALIZED_HASH;
    static final android.util.Printer LOG_PRINTER;
    static final android.util.Printer NO_PRINTER;
    private static final int DEFAULT_ORIENTATION;
    private static final int DEFAULT_COUNT;
    private static final boolean DEFAULT_USE_DEFAULT_MARGINS;
    private static final boolean DEFAULT_ORDER_PRESERVED;
    private static final int DEFAULT_ALIGNMENT_MODE;
    private static final int ORIENTATION;
    private static final int ROW_COUNT;
    private static final int COLUMN_COUNT;
    private static final int USE_DEFAULT_MARGINS;
    private static final int ALIGNMENT_MODE;
    private static final int ROW_ORDER_PRESERVED;
    private static final int COLUMN_ORDER_PRESERVED;
    final android.widget.GridLayout$Axis mHorizontalAxis;
    final android.widget.GridLayout$Axis mVerticalAxis;
    int mOrientation;
    boolean mUseDefaultMargins;
    int mAlignmentMode;
    int mDefaultGap;
    int mLastLayoutParamsHashCode;
    android.util.Printer mPrinter;
    static final android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT;
    private static final android.widget.GridLayout$Alignment LEADING;
    private static final android.widget.GridLayout$Alignment TRAILING;
    public static final android.widget.GridLayout$Alignment TOP;
    public static final android.widget.GridLayout$Alignment BOTTOM;
    public static final android.widget.GridLayout$Alignment START;
    public static final android.widget.GridLayout$Alignment END;
    public static final android.widget.GridLayout$Alignment LEFT;
    public static final android.widget.GridLayout$Alignment RIGHT;
    public static final android.widget.GridLayout$Alignment CENTER;
    public static final android.widget.GridLayout$Alignment BASELINE;
    public static final android.widget.GridLayout$Alignment FILL;
    private static final int INFLEXIBLE;
    private static final int CAN_STRETCH;

    public void <init>(android.content.Context)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.content.res.TypedArray r3;
        java.lang.Throwable r4, $r10;
        android.widget.GridLayout$Axis $r5, $r6;
        android.util.Printer $r7;
        android.content.res.Resources $r8;
        int[] $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        $r5 = new android.widget.GridLayout$Axis;

        specialinvoke $r5.<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean,android.widget.GridLayout$1)>(r0, 1, null);

        r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis> = $r5;

        $r6 = new android.widget.GridLayout$Axis;

        specialinvoke $r6.<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean,android.widget.GridLayout$1)>(r0, 0, null);

        r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis> = $r6;

        r0.<android.widget.GridLayout: int mOrientation> = 0;

        r0.<android.widget.GridLayout: boolean mUseDefaultMargins> = 0;

        r0.<android.widget.GridLayout: int mAlignmentMode> = 1;

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = 0;

        $r7 = <android.widget.GridLayout: android.util.Printer LOG_PRINTER>;

        r0.<android.widget.GridLayout: android.util.Printer mPrinter> = $r7;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r8.<android.content.res.Resources: int getDimensionPixelOffset(int)>(17104966);

        r0.<android.widget.GridLayout: int mDefaultGap> = $i2;

        $r9 = <com.android.internal.R$styleable: int[] GridLayout>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r9, i0, i1);

     label1:
        $i3 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(1, -2147483648);

        virtualinvoke r0.<android.widget.GridLayout: void setRowCount(int)>($i3);

        $i4 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(3, -2147483648);

        virtualinvoke r0.<android.widget.GridLayout: void setColumnCount(int)>($i4);

        $i5 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(0, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setOrientation(int)>($i5);

        $z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setUseDefaultMargins(boolean)>($z0);

        $i6 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(6, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setAlignmentMode(int)>($i6);

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setRowOrderPreserved(boolean)>($z1);

        $z2 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setColumnOrderPreserved(boolean)>($z2);

     label2:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label5;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getOrientation()
    {
        android.widget.GridLayout r0;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $i0 = r0.<android.widget.GridLayout: int mOrientation>;

        return $i0;
    }

    public void setOrientation(int)
    {
        android.widget.GridLayout r0;
        int i0, $i1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i1 == i0 goto label1;

        r0.<android.widget.GridLayout: int mOrientation> = i0;

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

     label1:
        return;
    }

    public int getRowCount()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $i0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getCount()>();

        return $i0;
    }

    public void setRowCount(int)
    {
        android.widget.GridLayout r0;
        int i0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setCount(int)>(i0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public int getColumnCount()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $i0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getCount()>();

        return $i0;
    }

    public void setColumnCount(int)
    {
        android.widget.GridLayout r0;
        int i0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setCount(int)>(i0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public boolean getUseDefaultMargins()
    {
        android.widget.GridLayout r0;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $z0 = r0.<android.widget.GridLayout: boolean mUseDefaultMargins>;

        return $z0;
    }

    public void setUseDefaultMargins(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        r0.<android.widget.GridLayout: boolean mUseDefaultMargins> = z0;

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public int getAlignmentMode()
    {
        android.widget.GridLayout r0;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $i0 = r0.<android.widget.GridLayout: int mAlignmentMode>;

        return $i0;
    }

    public void setAlignmentMode(int)
    {
        android.widget.GridLayout r0;
        int i0;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        r0.<android.widget.GridLayout: int mAlignmentMode> = i0;

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public boolean isRowOrderPreserved()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $z0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: boolean isOrderPreserved()>();

        return $z0;
    }

    public void setRowOrderPreserved(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setOrderPreserved(boolean)>(z0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public boolean isColumnOrderPreserved()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $z0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: boolean isOrderPreserved()>();

        return $z0;
    }

    public void setColumnOrderPreserved(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setOrderPreserved(boolean)>(z0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public android.util.Printer getPrinter()
    {
        android.widget.GridLayout r0;
        android.util.Printer $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.util.Printer mPrinter>;

        return $r1;
    }

    public void setPrinter(android.util.Printer)
    {
        android.widget.GridLayout r0;
        android.util.Printer r1, $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.Printer;

        if r1 != null goto label1;

        $r2 = <android.widget.GridLayout: android.util.Printer NO_PRINTER>;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        r0.<android.widget.GridLayout: android.util.Printer mPrinter> = $r2;

        return;
    }

    static int max2(int[], int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = i0;

        i2 = 0;

        i3 = lengthof r0;

     label1:
        if i2 >= i3 goto label2;

        $i4 = r0[i2];

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return i1;
    }

    static java.lang.Object[] append(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2, $r6;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i2);

        $r6 = (java.lang.Object[]) $r5;

        r2 = (java.lang.Object[]) $r6;

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    static android.widget.GridLayout$Alignment getAlignment(int, boolean)
    {
        int i0, i3, $i4;
        boolean z0;
        byte b1, b2, $b5, $b6;
        android.widget.GridLayout$Alignment $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        $b6 = 7;

        goto label02;

     label01:
        $b6 = 112;

     label02:
        b1 = $b6;

        if z0 == 0 goto label03;

        $b5 = 0;

        goto label04;

     label03:
        $b5 = 4;

     label04:
        b2 = $b5;

        $i4 = i0 & b1;

        i3 = $i4 >> b2;

        lookupswitch(i3)
        {
            case 1: goto label12;
            case 3: goto label05;
            case 5: goto label08;
            case 7: goto label11;
            case 8388611: goto label13;
            case 8388613: goto label14;
            default: goto label15;
        };

     label05:
        if z0 == 0 goto label06;

        $r4 = <android.widget.GridLayout: android.widget.GridLayout$Alignment LEFT>;

        goto label07;

     label06:
        $r4 = <android.widget.GridLayout: android.widget.GridLayout$Alignment TOP>;

     label07:
        return $r4;

     label08:
        if z0 == 0 goto label09;

        $r3 = <android.widget.GridLayout: android.widget.GridLayout$Alignment RIGHT>;

        goto label10;

     label09:
        $r3 = <android.widget.GridLayout: android.widget.GridLayout$Alignment BOTTOM>;

     label10:
        return $r3;

     label11:
        $r2 = <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL>;

        return $r2;

     label12:
        $r5 = <android.widget.GridLayout: android.widget.GridLayout$Alignment CENTER>;

        return $r5;

     label13:
        $r1 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        return $r1;

     label14:
        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment END>;

        return $r0;

     label15:
        $r6 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        return $r6;
    }

    private int getDefaultMargin(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1;
        java.lang.Class $r2;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "android/widget/Space" goto label1;

        return 0;

     label1:
        $i0 = r0.<android.widget.GridLayout: int mDefaultGap>;

        $i1 = $i0 / 2;

        return $i1;
    }

    private int getDefaultMargin(android.view.View, boolean, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1, z2;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $i0 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean)>(r1, z1, z2);

        return $i0;
    }

    private int getDefaultMargin(android.view.View, android.widget.GridLayout$LayoutParams, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        android.widget.GridLayout$LayoutParams r2;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        android.widget.GridLayout$Spec r3, $r6;
        android.widget.GridLayout$Axis r4, $r7;
        android.widget.GridLayout$Interval r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.widget.GridLayout$LayoutParams;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z4 = r0.<android.widget.GridLayout: boolean mUseDefaultMargins>;

        if $z4 != 0 goto label01;

        return 0;

     label01:
        if z0 == 0 goto label02;

        $r6 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label03;

     label02:
        $r6 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label03:
        r3 = $r6;

        if z0 == 0 goto label04;

        $r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label05;

     label04:
        $r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label05:
        r4 = $r7;

        r5 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z0 == 0 goto label07;

        $z7 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z7 == 0 goto label07;

        if z1 != 0 goto label06;

        $z6 = 1;

        goto label08;

     label06:
        $z6 = 0;

        goto label08;

     label07:
        $z6 = z1;

     label08:
        z2 = $z6;

        if z2 == 0 goto label10;

        $i3 = r5.<android.widget.GridLayout$Interval: int min>;

        if $i3 != 0 goto label09;

        $z5 = 1;

        goto label12;

     label09:
        $z5 = 0;

        goto label12;

     label10:
        $i0 = r5.<android.widget.GridLayout$Interval: int max>;

        $i1 = virtualinvoke r4.<android.widget.GridLayout$Axis: int getCount()>();

        if $i0 != $i1 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        z3 = $z5;

        $i2 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean,boolean)>(r1, z3, z0, z1);

        return $i2;
    }

    int getMargin1(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1;
        android.widget.GridLayout$LayoutParams r2;
        int i0, $i1, $i2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $i2 = r2.<android.widget.GridLayout$LayoutParams: int leftMargin>;

        goto label4;

     label1:
        $i2 = r2.<android.widget.GridLayout$LayoutParams: int rightMargin>;

        goto label4;

     label2:
        if z1 == 0 goto label3;

        $i2 = r2.<android.widget.GridLayout$LayoutParams: int topMargin>;

        goto label4;

     label3:
        $i2 = r2.<android.widget.GridLayout$LayoutParams: int bottomMargin>;

     label4:
        i0 = $i2;

        if i0 != -2147483648 goto label5;

        $i1 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,android.widget.GridLayout$LayoutParams,boolean,boolean)>(r1, r2, z0, z1);

        goto label6;

     label5:
        $i1 = i0;

     label6:
        return $i1;
    }

    private int getMargin(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1;
        android.widget.GridLayout$Axis r2, $r10;
        int[] r3, $r6;
        android.widget.GridLayout$LayoutParams r4;
        android.widget.GridLayout$Spec r5, $r9;
        int i0, $i1, $i2, $i3, $i4;
        android.widget.GridLayout$Interval $r7, $r8;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i1 = r0.<android.widget.GridLayout: int mAlignmentMode>;

        if $i1 != 1 goto label1;

        $i4 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r1, z0, z1);

        return $i4;

     label1:
        if z0 == 0 goto label2;

        $r10 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label3;

     label2:
        $r10 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label3:
        r2 = $r10;

        if z1 == 0 goto label4;

        $r6 = virtualinvoke r2.<android.widget.GridLayout$Axis: int[] getLeadingMargins()>();

        goto label5;

     label4:
        $r6 = virtualinvoke r2.<android.widget.GridLayout$Axis: int[] getTrailingMargins()>();

     label5:
        r3 = $r6;

        r4 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label6;

        $r9 = r4.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label7;

     label6:
        $r9 = r4.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label7:
        r5 = $r9;

        if z1 == 0 goto label8;

        $r8 = r5.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i3 = $r8.<android.widget.GridLayout$Interval: int min>;

        goto label9;

     label8:
        $r7 = r5.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i3 = $r7.<android.widget.GridLayout$Interval: int max>;

     label9:
        i0 = $i3;

        $i2 = r3[i0];

        return $i2;
    }

    private int getTotalMargin(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0, $i1, $i2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r1, z0, 1);

        $i1 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r1, z0, 0);

        $i2 = $i0 + $i1;

        return $i2;
    }

    private static boolean fits(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i4 = lengthof r0;

        if i2 <= $i4 goto label1;

        return 0;

     label1:
        i3 = i1;

     label2:
        if i3 >= i2 goto label4;

        $i5 = r0[i3];

        if $i5 <= i0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static void procrusteanFill(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = lengthof r0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i3);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, $i4, $i5, i2);

        return;
    }

    private static void setCellGroup(android.widget.GridLayout$LayoutParams, int, int, int, int)
    {
        android.widget.GridLayout$LayoutParams r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.widget.GridLayout$Interval $r1, $r2;

        r0 := @parameter0: android.widget.GridLayout$LayoutParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = new android.widget.GridLayout$Interval;

        $i4 = i0 + i1;

        specialinvoke $r1.<android.widget.GridLayout$Interval: void <init>(int,int)>(i0, $i4);

        virtualinvoke r0.<android.widget.GridLayout$LayoutParams: void setRowSpecSpan(android.widget.GridLayout$Interval)>($r1);

        $r2 = new android.widget.GridLayout$Interval;

        $i5 = i2 + i3;

        specialinvoke $r2.<android.widget.GridLayout$Interval: void <init>(int,int)>(i2, $i5);

        virtualinvoke r0.<android.widget.GridLayout$LayoutParams: void setColumnSpecSpan(android.widget.GridLayout$Interval)>($r2);

        return;
    }

    private static int clip(android.widget.GridLayout$Interval, boolean, int)
    {
        android.widget.GridLayout$Interval r0;
        boolean z0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: android.widget.GridLayout$Interval;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<android.widget.GridLayout$Interval: int size()>();

        if i0 != 0 goto label1;

        return i1;

     label1:
        if z0 == 0 goto label2;

        $i5 = r0.<android.widget.GridLayout$Interval: int min>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i0);

        goto label3;

     label2:
        $i6 = 0;

     label3:
        i2 = $i6;

        $i3 = i0 - i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i3);

        return $i4;
    }

    private void validateLayoutParams()
    {
        android.widget.GridLayout r0;
        boolean z0, z1, z2, $z3, $z4;
        android.widget.GridLayout$Axis r1, $r12;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r2;
        android.widget.GridLayout$LayoutParams r3;
        android.widget.GridLayout$Spec r4, r6, $r10, $r11;
        android.widget.GridLayout$Interval r5, r7;
        android.view.View $r8;
        android.view.ViewGroup$LayoutParams $r9;

        r0 := @this: android.widget.GridLayout;

        $i8 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i8 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z0 = $z4;

        if z0 == 0 goto label03;

        $r12 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label04;

     label03:
        $r12 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label04:
        r1 = $r12;

        $i7 = r1.<android.widget.GridLayout$Axis: int definedCount>;

        if $i7 == -2147483648 goto label05;

        $i13 = r1.<android.widget.GridLayout$Axis: int definedCount>;

        goto label06;

     label05:
        $i13 = 0;

     label06:
        i0 = $i13;

        i1 = 0;

        i2 = 0;

        r2 = newarray (int)[i0];

        i3 = 0;

        i4 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label07:
        if i3 >= i4 goto label21;

        $r8 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i3);

        $r9 = virtualinvoke $r8.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r3 = (android.widget.GridLayout$LayoutParams) $r9;

        if z0 == 0 goto label08;

        $r10 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label09;

     label08:
        $r10 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label09:
        r4 = $r10;

        r5 = r4.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        z1 = r4.<android.widget.GridLayout$Spec: boolean startDefined>;

        i5 = virtualinvoke r5.<android.widget.GridLayout$Interval: int size()>();

        if z1 == 0 goto label10;

        i1 = r5.<android.widget.GridLayout$Interval: int min>;

     label10:
        if z0 == 0 goto label11;

        $r11 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label12;

     label11:
        $r11 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label12:
        r6 = $r11;

        r7 = r6.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        z2 = r6.<android.widget.GridLayout$Spec: boolean startDefined>;

        i6 = staticinvoke <android.widget.GridLayout: int clip(android.widget.GridLayout$Interval,boolean,int)>(r7, z2, i0);

        if z2 == 0 goto label13;

        i2 = r7.<android.widget.GridLayout$Interval: int min>;

     label13:
        if i0 == 0 goto label18;

        if z1 == 0 goto label14;

        if z2 != 0 goto label17;

     label14:
        $i9 = i2 + i6;

        $z3 = staticinvoke <android.widget.GridLayout: boolean fits(int[],int,int,int)>(r2, i1, i2, $i9);

        if $z3 != 0 goto label17;

        if z2 == 0 goto label15;

        i1 = i1 + 1;

        goto label14;

     label15:
        $i11 = i2 + i6;

        if $i11 > i0 goto label16;

        i2 = i2 + 1;

        goto label14;

     label16:
        i2 = 0;

        i1 = i1 + 1;

        goto label14;

     label17:
        $i12 = i2 + i6;

        $i10 = i1 + i5;

        staticinvoke <android.widget.GridLayout: void procrusteanFill(int[],int,int,int)>(r2, i2, $i12, $i10);

     label18:
        if z0 == 0 goto label19;

        staticinvoke <android.widget.GridLayout: void setCellGroup(android.widget.GridLayout$LayoutParams,int,int,int,int)>(r3, i1, i5, i2, i6);

        goto label20;

     label19:
        staticinvoke <android.widget.GridLayout: void setCellGroup(android.widget.GridLayout$LayoutParams,int,int,int,int)>(r3, i2, i6, i1, i5);

     label20:
        i2 = i2 + i6;

        i3 = i3 + 1;

        goto label07;

     label21:
        return;
    }

    private void invalidateStructure()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1, $r2;

        r0 := @this: android.widget.GridLayout;

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = 0;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void invalidateStructure()>();

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r2.<android.widget.GridLayout$Axis: void invalidateStructure()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        return;
    }

    private void invalidateValues()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1, $r2, $r3, $r4;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        if $r2 == null goto label1;

        $r3 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r3.<android.widget.GridLayout$Axis: void invalidateValues()>();

        $r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r4.<android.widget.GridLayout$Axis: void invalidateValues()>();

     label1:
        return;
    }

    protected void onSetLayoutParams(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.ViewGroup: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        $z0 = virtualinvoke r0.<android.widget.GridLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        if $z0 != 0 goto label1;

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>("supplied LayoutParams are of the wrong type");

     label1:
        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    final android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.widget.GridLayout$LayoutParams $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.widget.GridLayout$LayoutParams) $r2;

        return $r3;
    }

    private static void handleInvalidParams(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private void checkLayoutParams(android.widget.GridLayout$LayoutParams, boolean)
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$LayoutParams r1;
        boolean z0;
        java.lang.String r2, $r12, $r18, $r23, $r24;
        android.widget.GridLayout$Spec r3, $r22;
        android.widget.GridLayout$Interval r4;
        android.widget.GridLayout$Axis r5, $r17;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r19, $r20, $r21;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.widget.GridLayout$LayoutParams;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r24 = "column";

        goto label2;

     label1:
        $r24 = "row";

     label2:
        r2 = $r24;

        if z0 == 0 goto label3;

        $r22 = r1.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label4;

     label3:
        $r22 = r1.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label4:
        r3 = $r22;

        r4 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i1 = r4.<android.widget.GridLayout$Interval: int min>;

        if $i1 == -2147483648 goto label5;

        $i4 = r4.<android.widget.GridLayout$Interval: int min>;

        if $i4 >= 0 goto label5;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" indices must be positive");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r23);

     label5:
        if z0 == 0 goto label6;

        $r17 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label7;

     label6:
        $r17 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label7:
        r5 = $r17;

        i0 = r5.<android.widget.GridLayout$Axis: int definedCount>;

        if i0 == -2147483648 goto label9;

        $i2 = r4.<android.widget.GridLayout$Interval: int max>;

        if $i2 <= i0 goto label8;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" indices (start + span) mustn\'t exceed the ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r18);

     label8:
        $i3 = virtualinvoke r4.<android.widget.GridLayout$Interval: int size()>();

        if $i3 <= i0 goto label9;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" span mustn\'t exceed the ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r12);

     label9:
        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        android.widget.GridLayout$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof android.widget.GridLayout$LayoutParams;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.widget.GridLayout$LayoutParams) r1;

        specialinvoke r0.<android.widget.GridLayout: void checkLayoutParams(android.widget.GridLayout$LayoutParams,boolean)>(r2, 1);

        specialinvoke r0.<android.widget.GridLayout: void checkLayoutParams(android.widget.GridLayout$LayoutParams,boolean)>(r2, 0);

        return 1;
    }

    protected android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$LayoutParams $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r1.<android.widget.GridLayout$LayoutParams: void <init>()>();

        return $r1;
    }

    public android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.util.AttributeSet r1;
        android.widget.GridLayout$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.widget.GridLayout$LayoutParams;

        $r3 = virtualinvoke r0.<android.widget.GridLayout: android.content.Context getContext()>();

        specialinvoke $r2.<android.widget.GridLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        android.widget.GridLayout$LayoutParams $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r2 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r2.<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    private void drawLine(android.graphics.Canvas, int, int, int, int, android.graphics.Paint)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        android.graphics.Paint r2;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.graphics.Paint;

        $z0 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z0 == 0 goto label1;

        i4 = virtualinvoke r0.<android.widget.GridLayout: int getWidth()>();

        $i5 = i4 - i0;

        $f6 = (float) $i5;

        $f7 = (float) i1;

        $i6 = i4 - i2;

        $f4 = (float) $i6;

        $f5 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f6, $f7, $f4, $f5, r2);

        goto label2;

     label1:
        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

     label2:
        return;
    }

    protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        android.widget.GridLayout$LayoutParams r3, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View r4;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        $r5 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r5.<android.widget.GridLayout$LayoutParams: void <init>()>();

        r3 = $r5;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

        if i0 >= $i1 goto label2;

        r4 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i0);

        $i2 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 1, 1);

        $i3 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 0, 1);

        $i4 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 1, 0);

        $i5 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 0, 0);

        virtualinvoke r3.<android.widget.GridLayout$LayoutParams: void setMargins(int,int,int,int)>($i2, $i3, $i4, $i5);

        virtualinvoke r3.<android.widget.GridLayout$LayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)>(r4, r1, r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    protected void onDebugDraw(android.graphics.Canvas)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2, $r5;
        android.graphics.Insets r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        int[] r4, r9;
        android.graphics.Paint$Style $r6;
        android.widget.GridLayout$Axis $r7, $r8;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        $r5 = new android.graphics.Paint;

        specialinvoke $r5.<android.graphics.Paint: void <init>()>();

        r2 = $r5;

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        $i8 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(50, 255, 255, 255);

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i8);

        r3 = virtualinvoke r0.<android.widget.GridLayout: android.graphics.Insets getOpticalInsets()>();

        $i9 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        $i11 = r3.<android.graphics.Insets: int top>;

        i0 = $i9 + $i11;

        $i10 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        $i13 = r3.<android.graphics.Insets: int left>;

        i1 = $i10 + $i13;

        $i12 = virtualinvoke r0.<android.widget.GridLayout: int getWidth()>();

        $i15 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        $i17 = $i12 - $i15;

        $i14 = r3.<android.graphics.Insets: int right>;

        i2 = $i17 - $i14;

        $i16 = virtualinvoke r0.<android.widget.GridLayout: int getHeight()>();

        $i19 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        $i20 = $i16 - $i19;

        $i18 = r3.<android.graphics.Insets: int bottom>;

        i3 = $i20 - $i18;

        $r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        r4 = $r7.<android.widget.GridLayout$Axis: int[] locations>;

        if r4 == null goto label2;

        i4 = 0;

        i5 = lengthof r4;

     label1:
        if i4 >= i5 goto label2;

        $i22 = r4[i4];

        i6 = i1 + $i22;

        specialinvoke r0.<android.widget.GridLayout: void drawLine(android.graphics.Canvas,int,int,int,int,android.graphics.Paint)>(r1, i6, i0, i6, i3, r2);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        r9 = $r8.<android.widget.GridLayout$Axis: int[] locations>;

        if r9 == null goto label4;

        i23 = 0;

        i24 = lengthof r9;

     label3:
        if i23 >= i24 goto label4;

        $i21 = r9[i23];

        i7 = i0 + $i21;

        specialinvoke r0.<android.widget.GridLayout: void drawLine(android.graphics.Canvas,int,int,int,int,android.graphics.Paint)>(r1, i1, i7, i2, i7, r2);

        i23 = i23 + 1;

        goto label3;

     label4:
        specialinvoke r0.<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>(r1);

        return;
    }

    protected void onViewAdded(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onViewAdded(android.view.View)>(r1);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    protected void onViewRemoved(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r1);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    protected void onChildVisibilityChanged(android.view.View, int, int)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        int i0, i1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int,int)>(r1, i0, i1);

        if i0 == 8 goto label1;

        if i1 != 8 goto label2;

     label1:
        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

     label2:
        return;
    }

    private int computeLayoutParamsHashCode()
    {
        android.widget.GridLayout r0;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.View r1;
        android.widget.GridLayout$LayoutParams r2;
        android.view.ViewGroup$LayoutParams $r3;

        r0 := @this: android.widget.GridLayout;

        i0 = 1;

        i1 = 0;

        i2 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label1:
        if i1 >= i2 goto label4;

        r1 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i1);

        $i3 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i3 != 8 goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.widget.GridLayout$LayoutParams) $r3;

        $i4 = 31 * i0;

        $i5 = virtualinvoke r2.<android.widget.GridLayout$LayoutParams: int hashCode()>();

        i0 = $i4 + $i5;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    private void consistencyCheck()
    {
        android.widget.GridLayout r0;
        int $i0, $i1, $i2, $i3;
        android.util.Printer $r1;

        r0 := @this: android.widget.GridLayout;

        $i0 = r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.widget.GridLayout: void validateLayoutParams()>();

        $i3 = specialinvoke r0.<android.widget.GridLayout: int computeLayoutParamsHashCode()>();

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = $i3;

        goto label2;

     label1:
        $i1 = r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode>;

        $i2 = specialinvoke r0.<android.widget.GridLayout: int computeLayoutParamsHashCode()>();

        if $i1 == $i2 goto label2;

        $r1 = r0.<android.widget.GridLayout: android.util.Printer mPrinter>;

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>("The fields of some layout parameters were modified in between layout operations. Check the javadoc for GridLayout.LayoutParams#rowSpec.");

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

     label2:
        return;
    }

    private void measureChildWithMargins2(android.view.View, int, int, int, int)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i6 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, 1);

        i4 = staticinvoke <android.widget.GridLayout: int getChildMeasureSpec(int,int,int)>(i0, $i6, i2);

        $i7 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, 0);

        i5 = staticinvoke <android.widget.GridLayout: int getChildMeasureSpec(int,int,int)>(i1, $i7, i3);

        virtualinvoke r1.<android.view.View: void measure(int,int)>(i4, i5);

        return;
    }

    private void measureChildrenWithMargins(int, int, boolean)
    {
        android.widget.GridLayout r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, z1, $z2;
        android.view.View r1;
        android.widget.GridLayout$LayoutParams r2;
        android.widget.GridLayout$Spec r3, $r9;
        android.widget.GridLayout$Interval r4;
        android.widget.GridLayout$Axis r5, $r10, $r11, $r12;
        int[] r6;
        android.widget.GridLayout$Alignment $r7, $r8;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 = 0;

        i3 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label01:
        if i2 >= i3 goto label12;

        r1 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i2);

        $i6 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i6 != 8 goto label02;

        goto label11;

     label02:
        r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label03;

        $i15 = r2.<android.widget.GridLayout$LayoutParams: int width>;

        $i16 = r2.<android.widget.GridLayout$LayoutParams: int height>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, $i15, $i16);

        $r11 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        staticinvoke <android.widget.GridLayout$Axis: void access$100(android.widget.GridLayout$Axis,int)>($r11, i2);

        $r12 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        staticinvoke <android.widget.GridLayout$Axis: void access$100(android.widget.GridLayout$Axis,int)>($r12, i2);

        goto label11;

     label03:
        $i7 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i7 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z1 = $z2;

        if z1 == 0 goto label06;

        $r9 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label07;

     label06:
        $r9 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label07:
        r3 = $r9;

        $r7 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment alignment>;

        $r8 = <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL>;

        if $r7 != $r8 goto label11;

        r4 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z1 == 0 goto label08;

        $r10 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label09;

     label08:
        $r10 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label09:
        r5 = $r10;

        r6 = virtualinvoke r5.<android.widget.GridLayout$Axis: int[] getLocations()>();

        $i8 = r4.<android.widget.GridLayout$Interval: int max>;

        $i12 = r6[$i8];

        $i10 = r4.<android.widget.GridLayout$Interval: int min>;

        $i9 = r6[$i10];

        i4 = $i12 - $i9;

        $i11 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, z1);

        i5 = i4 - $i11;

        if z1 == 0 goto label10;

        $i13 = r2.<android.widget.GridLayout$LayoutParams: int height>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, i5, $i13);

        goto label11;

     label10:
        $i14 = r2.<android.widget.GridLayout$LayoutParams: int width>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, $i14, i5);

     label11:
        i2 = i2 + 1;

        goto label01;

     label12:
        return;
    }

    static int adjust(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 + i1;

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i2);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i3, $i4);

        return $i5;
    }

    protected void onMeasure(int, int)
    {
        android.widget.GridLayout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.widget.GridLayout$Axis $r1, $r2, $r3, $r4;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        $i10 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        $i11 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        i2 = $i10 + $i11;

        $i12 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        $i13 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        i3 = $i12 + $i13;

        $i14 = neg i2;

        i4 = staticinvoke <android.widget.GridLayout: int adjust(int,int)>(i0, $i14);

        $i15 = neg i3;

        i5 = staticinvoke <android.widget.GridLayout: int adjust(int,int)>(i1, $i15);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 1);

        $i16 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i16 != 0 goto label1;

        $r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        i6 = virtualinvoke $r4.<android.widget.GridLayout$Axis: int getMeasure(int)>(i4);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 0);

        $r3 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        i7 = virtualinvoke $r3.<android.widget.GridLayout$Axis: int getMeasure(int)>(i5);

        goto label2;

     label1:
        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        i7 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getMeasure(int)>(i5);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 0);

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        i6 = virtualinvoke $r2.<android.widget.GridLayout$Axis: int getMeasure(int)>(i4);

     label2:
        $i18 = i6 + i2;

        $i17 = virtualinvoke r0.<android.widget.GridLayout: int getSuggestedMinimumWidth()>();

        i8 = staticinvoke <java.lang.Math: int max(int,int)>($i18, $i17);

        $i19 = i7 + i3;

        $i20 = virtualinvoke r0.<android.widget.GridLayout: int getSuggestedMinimumHeight()>();

        i9 = staticinvoke <java.lang.Math: int max(int,int)>($i19, $i20);

        $i22 = staticinvoke <android.widget.GridLayout: int resolveSizeAndState(int,int,int)>(i8, i0, 0);

        $i21 = staticinvoke <android.widget.GridLayout: int resolveSizeAndState(int,int,int)>(i9, i1, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setMeasuredDimension(int,int)>($i22, $i21);

        return;
    }

    private int getMeasurement(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

     label2:
        return $i0;
    }

    final int getMeasurementIncludingMargin(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i0 != 8 goto label1;

        return 0;

     label1:
        $i1 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r1, z0);

        $i2 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, z0);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public void requestLayout()
    {
        android.widget.GridLayout r0;

        r0 := @this: android.widget.GridLayout;

        specialinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        return;
    }

    final android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment, boolean)
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Alignment r1, $r2, $r3;
        boolean z0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.widget.GridLayout$Alignment;

        z0 := @parameter1: boolean;

        $r2 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        if r1 == $r2 goto label1;

        $r3 = r1;

        goto label3;

     label1:
        if z0 == 0 goto label2;

        $r3 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        goto label3;

     label2:
        $r3 = <android.widget.GridLayout: android.widget.GridLayout$Alignment BASELINE>;

     label3:
        return $r3;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.widget.GridLayout r0;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66;
        int[] r1, r2;
        android.widget.GridLayout$LayoutParams r3;
        android.view.View r4;
        android.widget.GridLayout$Spec r5, r6;
        android.widget.GridLayout$Interval r7, r8;
        android.widget.GridLayout$Alignment r9, r10, $r20, $r21;
        android.widget.GridLayout$Bounds r11, r12;
        android.widget.GridLayout$Axis $r13, $r14, $r15, $r16, $r17, $r23;
        android.widget.GridLayout$PackedMap $r18, $r22;
        java.lang.Object $r19, $r24;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

        i4 = i2 - i0;

        i5 = i3 - i1;

        i6 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        i7 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        i8 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        i9 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        $r13 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $i36 = i4 - i6;

        $i35 = $i36 - i8;

        virtualinvoke $r13.<android.widget.GridLayout$Axis: void layout(int)>($i35);

        $r15 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $i38 = i5 - i7;

        $i37 = $i38 - i9;

        virtualinvoke $r15.<android.widget.GridLayout$Axis: void layout(int)>($i37);

        $r14 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        r1 = virtualinvoke $r14.<android.widget.GridLayout$Axis: int[] getLocations()>();

        $r16 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        r2 = virtualinvoke $r16.<android.widget.GridLayout$Axis: int[] getLocations()>();

        i10 = 0;

        i11 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label1:
        if i10 >= i11 goto label8;

        r4 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i10);

        $i42 = virtualinvoke r4.<android.view.View: int getVisibility()>();

        if $i42 != 8 goto label2;

        goto label7;

     label2:
        r3 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r4);

        r6 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        r5 = r3.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        r8 = r6.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        r7 = r5.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i43 = r8.<android.widget.GridLayout$Interval: int min>;

        i13 = r1[$i43];

        $i39 = r7.<android.widget.GridLayout$Interval: int min>;

        i12 = r2[$i39];

        $i40 = r8.<android.widget.GridLayout$Interval: int max>;

        i15 = r1[$i40];

        $i41 = r7.<android.widget.GridLayout$Interval: int max>;

        i14 = r2[$i41];

        i17 = i15 - i13;

        i16 = i14 - i12;

        i19 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r4, 1);

        i18 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r4, 0);

        $r20 = r6.<android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment alignment>;

        r10 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)>($r20, 1);

        $r21 = r5.<android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment alignment>;

        r9 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)>($r21, 0);

        $r17 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $r18 = virtualinvoke $r17.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r19 = virtualinvoke $r18.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i10);

        r11 = (android.widget.GridLayout$Bounds) $r19;

        $r23 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $r22 = virtualinvoke $r23.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r24 = virtualinvoke $r22.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i10);

        r12 = (android.widget.GridLayout$Bounds) $r24;

        $i47 = virtualinvoke r11.<android.widget.GridLayout$Bounds: int size(boolean)>(1);

        $i44 = i17 - $i47;

        i20 = virtualinvoke r10.<android.widget.GridLayout$Alignment: int getGravityOffset(android.view.View,int)>(r4, $i44);

        $i46 = virtualinvoke r12.<android.widget.GridLayout$Bounds: int size(boolean)>(1);

        $i45 = i16 - $i46;

        i21 = virtualinvoke r9.<android.widget.GridLayout$Alignment: int getGravityOffset(android.view.View,int)>(r4, $i45);

        i24 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r4, 1, 1);

        i25 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r4, 0, 1);

        i22 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r4, 1, 0);

        i23 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r4, 0, 0);

        i28 = i24 + i22;

        i29 = i25 + i23;

        $i48 = i19 + i28;

        i26 = virtualinvoke r11.<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)>(r0, r4, r10, $i48, 1);

        $i49 = i18 + i29;

        i27 = virtualinvoke r12.<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)>(r0, r4, r9, $i49, 0);

        $i53 = i17 - i28;

        i32 = virtualinvoke r10.<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)>(r4, i19, $i53);

        $i52 = i16 - i29;

        i33 = virtualinvoke r9.<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)>(r4, i18, $i52);

        $i51 = i13 + i20;

        i30 = $i51 + i26;

        $z1 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z1 != 0 goto label3;

        $i63 = i6 + i24;

        $i62 = $i63 + i30;

        goto label4;

     label3:
        $i50 = i4 - i32;

        $i60 = $i50 - i8;

        $i61 = $i60 - i22;

        $i62 = $i61 - i30;

     label4:
        i31 = $i62;

        $i58 = i7 + i12;

        $i59 = $i58 + i21;

        $i56 = $i59 + i27;

        i34 = $i56 + i25;

        $i57 = virtualinvoke r4.<android.view.View: int getMeasuredWidth()>();

        if i32 != $i57 goto label5;

        $i64 = virtualinvoke r4.<android.view.View: int getMeasuredHeight()>();

        if i33 == $i64 goto label6;

     label5:
        $i54 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i32, 1073741824);

        $i55 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i33, 1073741824);

        virtualinvoke r4.<android.view.View: void measure(int,int)>($i54, $i55);

     label6:
        $i65 = i31 + i32;

        $i66 = i34 + i33;

        virtualinvoke r4.<android.view.View: void layout(int,int,int,int)>(i31, i34, $i65, $i66);

     label7:
        i10 = i10 + 1;

        goto label1;

     label8:
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.widget.GridLayout r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $r2 = class "android/widget/GridLayout";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.widget.GridLayout r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r2 = class "android/widget/GridLayout";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment, float)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment r0;
        float f0;
        android.widget.GridLayout$Spec $r1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.widget.GridLayout$Alignment;

        f0 := @parameter3: float;

        $r1 = new android.widget.GridLayout$Spec;

        if i0 == -2147483648 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r1.<android.widget.GridLayout$Spec: void <init>(boolean,int,int,android.widget.GridLayout$Alignment,float,android.widget.GridLayout$1)>($z0, i0, i1, r0, f0, null);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment, float)
    {
        int i0;
        android.widget.GridLayout$Alignment r0;
        float f0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.widget.GridLayout$Alignment;

        f0 := @parameter2: float;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, 1, r0, f0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, int, float)
    {
        int i0, i1;
        float f0;
        android.widget.GridLayout$Alignment $r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, i1, $r0, f0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, float)
    {
        int i0;
        float f0;
        android.widget.GridLayout$Spec $r0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r0 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,float)>(i0, 1, f0);

        return $r0;
    }

    public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.widget.GridLayout$Alignment;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, i1, r0, 0.0F);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment)
    {
        int i0;
        android.widget.GridLayout$Alignment r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.widget.GridLayout$Alignment;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>(i0, 1, r0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, int)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment $r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>(i0, i1, $r0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int)
    {
        int i0;
        android.widget.GridLayout$Spec $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int)>(i0, 1);

        return $r0;
    }

    private static android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment, android.widget.GridLayout$Alignment)
    {
        android.widget.GridLayout$Alignment r0, r1;
        android.widget.GridLayout$5 $r2;

        r0 := @parameter0: android.widget.GridLayout$Alignment;

        r1 := @parameter1: android.widget.GridLayout$Alignment;

        $r2 = new android.widget.GridLayout$5;

        specialinvoke $r2.<android.widget.GridLayout$5: void <init>(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>(r0, r1);

        return $r2;
    }

    static boolean canStretch(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$LayoutParams $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()>();

        return $r1;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        android.widget.GridLayout$LayoutParams $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    public volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.util.AttributeSet r1;
        android.widget.GridLayout$LayoutParams $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>(r1);

        return $r2;
    }

    static void access$200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>(r0);

        return;
    }

    static int access$300(android.widget.GridLayout, android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0;

        r0 := @parameter0: android.widget.GridLayout;

        r1 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        $i0 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r1, z0);

        return $i0;
    }

    static void <clinit>()
    {
        android.util.LogPrinter $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        android.widget.GridLayout$1 $r3;
        android.widget.GridLayout$2 $r4;
        android.widget.GridLayout$3 $r5;
        android.widget.GridLayout$4 $r6;
        android.widget.GridLayout$Alignment $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        android.widget.GridLayout$7 $r17;
        android.widget.GridLayout$6 $r18;
        android.widget.GridLayout$8 $r19;

        <android.widget.GridLayout: int CAN_STRETCH> = 2;

        <android.widget.GridLayout: int INFLEXIBLE> = 0;

        <android.widget.GridLayout: int COLUMN_ORDER_PRESERVED> = 4;

        <android.widget.GridLayout: int ROW_ORDER_PRESERVED> = 2;

        <android.widget.GridLayout: int ALIGNMENT_MODE> = 6;

        <android.widget.GridLayout: int USE_DEFAULT_MARGINS> = 5;

        <android.widget.GridLayout: int COLUMN_COUNT> = 3;

        <android.widget.GridLayout: int ROW_COUNT> = 1;

        <android.widget.GridLayout: int ORIENTATION> = 0;

        <android.widget.GridLayout: int DEFAULT_ALIGNMENT_MODE> = 1;

        <android.widget.GridLayout: boolean DEFAULT_ORDER_PRESERVED> = 1;

        <android.widget.GridLayout: boolean DEFAULT_USE_DEFAULT_MARGINS> = 0;

        <android.widget.GridLayout: int DEFAULT_COUNT> = -2147483648;

        <android.widget.GridLayout: int DEFAULT_ORIENTATION> = 0;

        <android.widget.GridLayout: int UNINITIALIZED_HASH> = 0;

        <android.widget.GridLayout: int DEFAULT_CONTAINER_MARGIN> = 0;

        <android.widget.GridLayout: int MAX_SIZE> = 100000;

        <android.widget.GridLayout: int ALIGN_MARGINS> = 1;

        <android.widget.GridLayout: int ALIGN_BOUNDS> = 0;

        <android.widget.GridLayout: int UNDEFINED> = -2147483648;

        <android.widget.GridLayout: int VERTICAL> = 1;

        <android.widget.GridLayout: int HORIZONTAL> = 0;

        $r0 = new android.util.LogPrinter;

        $r1 = class "android/widget/GridLayout";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<android.util.LogPrinter: void <init>(int,java.lang.String)>(3, $r2);

        <android.widget.GridLayout: android.util.Printer LOG_PRINTER> = $r0;

        $r3 = new android.widget.GridLayout$1;

        specialinvoke $r3.<android.widget.GridLayout$1: void <init>()>();

        <android.widget.GridLayout: android.util.Printer NO_PRINTER> = $r3;

        $r4 = new android.widget.GridLayout$2;

        specialinvoke $r4.<android.widget.GridLayout$2: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT> = $r4;

        $r5 = new android.widget.GridLayout$3;

        specialinvoke $r5.<android.widget.GridLayout$3: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment LEADING> = $r5;

        $r6 = new android.widget.GridLayout$4;

        specialinvoke $r6.<android.widget.GridLayout$4: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment TRAILING> = $r6;

        $r7 = <android.widget.GridLayout: android.widget.GridLayout$Alignment LEADING>;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment TOP> = $r7;

        $r8 = <android.widget.GridLayout: android.widget.GridLayout$Alignment TRAILING>;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment BOTTOM> = $r8;

        $r9 = <android.widget.GridLayout: android.widget.GridLayout$Alignment LEADING>;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment START> = $r9;

        $r10 = <android.widget.GridLayout: android.widget.GridLayout$Alignment TRAILING>;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment END> = $r10;

        $r12 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        $r11 = <android.widget.GridLayout: android.widget.GridLayout$Alignment END>;

        $r13 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>($r12, $r11);

        <android.widget.GridLayout: android.widget.GridLayout$Alignment LEFT> = $r13;

        $r16 = <android.widget.GridLayout: android.widget.GridLayout$Alignment END>;

        $r14 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        $r15 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>($r16, $r14);

        <android.widget.GridLayout: android.widget.GridLayout$Alignment RIGHT> = $r15;

        $r18 = new android.widget.GridLayout$6;

        specialinvoke $r18.<android.widget.GridLayout$6: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment CENTER> = $r18;

        $r17 = new android.widget.GridLayout$7;

        specialinvoke $r17.<android.widget.GridLayout$7: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment BASELINE> = $r17;

        $r19 = new android.widget.GridLayout$8;

        specialinvoke $r19.<android.widget.GridLayout$8: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL> = $r19;

        return;
    }
}
