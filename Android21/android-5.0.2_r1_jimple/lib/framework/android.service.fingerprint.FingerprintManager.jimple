public class android.service.fingerprint.FingerprintManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final int MSG_ENROLL_RESULT;
    private static final int MSG_ACQUIRED;
    private static final int MSG_PROCESSED;
    private static final int MSG_ERROR;
    private static final int MSG_REMOVED;
    public static final int FINGERPRINT_ERROR_NO_RECEIVER;
    public static final int FINGERPRINT_ERROR;
    public static final int FINGERPRINT_ACQUIRED;
    public static final int FINGERPRINT_PROCESSED;
    public static final int FINGERPRINT_TEMPLATE_ENROLLING;
    public static final int FINGERPRINT_TEMPLATE_REMOVED;
    public static final int FINGERPRINT_ERROR_HW_UNAVAILABLE;
    public static final int FINGERPRINT_ERROR_UNABLE_TO_PROCESS;
    public static final int FINGERPRINT_ERROR_TIMEOUT;
    public static final int FINGERPRINT_ERROR_NO_SPACE;
    public static final int FINGERPRINT_ACQUIRED_GOOD;
    public static final int FINGERPRINT_ACQUIRED_PARTIAL;
    public static final int FINGERPRINT_ACQUIRED_INSUFFICIENT;
    public static final int FINGERPRINT_ACQUIRED_IMAGER_DIRTY;
    public static final int FINGERPRINT_ACQUIRED_TOO_SLOW;
    public static final int FINGERPRINT_ACQUIRED_TOO_FAST;
    private android.service.fingerprint.IFingerprintService mService;
    private android.service.fingerprint.FingerprintManagerReceiver mClientReceiver;
    private android.content.Context mContext;
    private android.os.IBinder mToken;
    private android.os.Handler mHandler;
    private android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver;

    public void <init>(android.content.Context, android.service.fingerprint.IFingerprintService)
    {
        android.service.fingerprint.FingerprintManager r0;
        android.content.Context r1;
        android.service.fingerprint.IFingerprintService r2, $r6;
        android.os.Binder $r3;
        android.service.fingerprint.FingerprintManager$1 $r4;
        android.service.fingerprint.FingerprintManager$2 $r5;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.service.fingerprint.IFingerprintService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken> = $r3;

        $r4 = new android.service.fingerprint.FingerprintManager$1;

        specialinvoke $r4.<android.service.fingerprint.FingerprintManager$1: void <init>(android.service.fingerprint.FingerprintManager)>(r0);

        r0.<android.service.fingerprint.FingerprintManager: android.os.Handler mHandler> = $r4;

        $r5 = new android.service.fingerprint.FingerprintManager$2;

        specialinvoke $r5.<android.service.fingerprint.FingerprintManager$2: void <init>(android.service.fingerprint.FingerprintManager)>(r0);

        r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver> = $r5;

        r0.<android.service.fingerprint.FingerprintManager: android.content.Context mContext> = r1;

        r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService> = r2;

        $r6 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r6 != null goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintManager", "FingerprintManagerService was null");

     label1:
        return;
    }

    public boolean enrolledAndEnabled()
    {
        android.service.fingerprint.FingerprintManager r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0, $i1, $i2;
        int[] $r3;
        boolean $z0;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        $r2 = r0.<android.service.fingerprint.FingerprintManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "fingerprint_enabled", 0);

        if $i0 == 0 goto label1;

        $i1 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        $r3 = staticinvoke <android.service.fingerprint.FingerprintUtils: int[] getFingerprintIdsForUser(android.content.ContentResolver,int)>(r1, $i1);

        $i2 = lengthof $r3;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void enroll(long)
    {
        android.service.fingerprint.FingerprintManager r0;
        long l0;
        android.os.RemoteException r1, $r6;
        android.service.fingerprint.IFingerprintServiceReceiver $r2;
        android.service.fingerprint.IFingerprintService $r3, $r4;
        android.os.IBinder $r5;
        int $i1;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        l0 := @parameter0: long;

        $r2 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(-10, 0, 0);

        return;

     label1:
        $r3 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r3 == null goto label5;

     label2:
        $r4 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        $r5 = r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $i1 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        interfaceinvoke $r4.<android.service.fingerprint.IFingerprintService: void enroll(android.os.IBinder,long,int)>($r5, l0, $i1);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception while enrolling: ", r1);

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(1, 0, 0);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void remove(int)
    {
        android.service.fingerprint.FingerprintManager r0;
        int i0, $i2;
        android.os.RemoteException r1, $r6;
        android.service.fingerprint.IFingerprintServiceReceiver $r2;
        android.service.fingerprint.IFingerprintService $r3, $r4;
        android.os.IBinder $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        $r2 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(-10, 0, 0);

        return;

     label1:
        $r3 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r3 == null goto label5;

     label2:
        $r4 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        $r5 = r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $i2 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        interfaceinvoke $r4.<android.service.fingerprint.IFingerprintService: void remove(android.os.IBinder,int,int)>($r5, i0, $i2);

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception during remove of fingerprintId: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", $r10, r1);

        goto label6;

     label5:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintManager", "remove(): Service not connected!");

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(1, 0, 0);

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void startListening(android.service.fingerprint.FingerprintManagerReceiver)
    {
        android.service.fingerprint.FingerprintManager r0;
        android.service.fingerprint.FingerprintManagerReceiver r1;
        android.os.RemoteException r2, $r7;
        android.service.fingerprint.IFingerprintService $r3, $r4;
        android.os.IBinder $r5;
        android.service.fingerprint.IFingerprintServiceReceiver $r6;
        int $i1;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        r1 := @parameter0: android.service.fingerprint.FingerprintManagerReceiver;

        r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.FingerprintManagerReceiver mClientReceiver> = r1;

        $r3 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        $r5 = r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $r6 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        $i1 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        interfaceinvoke $r4.<android.service.fingerprint.IFingerprintService: void startListening(android.os.IBinder,android.service.fingerprint.IFingerprintServiceReceiver,int)>($r5, $r6, $i1);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in startListening(): ", r2);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintManager", "startListening(): Service not connected!");

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(1, 0, 0);

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int getCurrentUserId()
    {
        android.service.fingerprint.FingerprintManager r0;
        android.app.IActivityManager $r2;
        android.content.pm.UserInfo $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.service.fingerprint.FingerprintManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        $i0 = $r3.<android.content.pm.UserInfo: int id>;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintManager", "Failed to get current user id\n");

        return -10000;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopListening()
    {
        android.service.fingerprint.FingerprintManager r0;
        android.os.RemoteException r1, $r5;
        android.service.fingerprint.IFingerprintService $r2, $r3;
        android.os.IBinder $r4;
        int $i1;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        $r2 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        $r4 = r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $i1 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        interfaceinvoke $r3.<android.service.fingerprint.IFingerprintService: void stopListening(android.os.IBinder,int)>($r4, $i1);

        r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.FingerprintManagerReceiver mClientReceiver> = null;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in stopListening(): ", r1);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintManager", "stopListening(): Service not connected!");

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(1, 0, 0);

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void enrollCancel()
    {
        android.service.fingerprint.FingerprintManager r0;
        android.os.RemoteException r1, $r6;
        android.service.fingerprint.IFingerprintServiceReceiver $r2;
        android.service.fingerprint.IFingerprintService $r3, $r4;
        android.os.IBinder $r5;
        int $i1;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        $r2 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintServiceReceiver mServiceReceiver>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(-10, 0, 0);

        return;

     label1:
        $r3 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        if $r3 == null goto label5;

     label2:
        $r4 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.IFingerprintService mService>;

        $r5 = r0.<android.service.fingerprint.FingerprintManager: android.os.IBinder mToken>;

        $i1 = specialinvoke r0.<android.service.fingerprint.FingerprintManager: int getCurrentUserId()>();

        interfaceinvoke $r4.<android.service.fingerprint.IFingerprintService: void enrollCancel(android.os.IBinder,int)>($r5, $i1);

        r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.FingerprintManagerReceiver mClientReceiver> = null;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintManager", "Remote exception in enrollCancel(): ", r1);

        specialinvoke r0.<android.service.fingerprint.FingerprintManager: void sendError(int,int,int)>(1, 0, 0);

        goto label6;

     label5:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FingerprintManager", "enrollCancel(): Service not connected!");

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void sendError(int, int, int)
    {
        android.service.fingerprint.FingerprintManager r0;
        int i0, i1, i2;
        android.os.Handler $r1;

        r0 := @this: android.service.fingerprint.FingerprintManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<android.service.fingerprint.FingerprintManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(i0, i1, i2);

        return;
    }

    static android.service.fingerprint.FingerprintManagerReceiver access$000(android.service.fingerprint.FingerprintManager)
    {
        android.service.fingerprint.FingerprintManager r0;
        android.service.fingerprint.FingerprintManagerReceiver $r1;

        r0 := @parameter0: android.service.fingerprint.FingerprintManager;

        $r1 = r0.<android.service.fingerprint.FingerprintManager: android.service.fingerprint.FingerprintManagerReceiver mClientReceiver>;

        return $r1;
    }

    static android.os.Handler access$100(android.service.fingerprint.FingerprintManager)
    {
        android.service.fingerprint.FingerprintManager r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.service.fingerprint.FingerprintManager;

        $r1 = r0.<android.service.fingerprint.FingerprintManager: android.os.Handler mHandler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_TOO_FAST> = 16;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_TOO_SLOW> = 8;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_IMAGER_DIRTY> = 4;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_INSUFFICIENT> = 2;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_PARTIAL> = 1;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_GOOD> = 0;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_NO_SPACE> = 4;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_TIMEOUT> = 3;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_UNABLE_TO_PROCESS> = 2;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_HW_UNAVAILABLE> = 1;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_TEMPLATE_REMOVED> = 4;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_TEMPLATE_ENROLLING> = 3;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_PROCESSED> = 2;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED> = 1;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR> = -1;

        <android.service.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_NO_RECEIVER> = -10;

        <android.service.fingerprint.FingerprintManager: int MSG_REMOVED> = 104;

        <android.service.fingerprint.FingerprintManager: int MSG_ERROR> = 103;

        <android.service.fingerprint.FingerprintManager: int MSG_PROCESSED> = 102;

        <android.service.fingerprint.FingerprintManager: int MSG_ACQUIRED> = 101;

        <android.service.fingerprint.FingerprintManager: int MSG_ENROLL_RESULT> = 100;

        <android.service.fingerprint.FingerprintManager: boolean DEBUG> = 1;

        <android.service.fingerprint.FingerprintManager: java.lang.String TAG> = "FingerprintManager";

        return;
    }
}
