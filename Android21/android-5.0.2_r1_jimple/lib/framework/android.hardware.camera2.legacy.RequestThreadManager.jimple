public class android.hardware.camera2.legacy.RequestThreadManager extends java.lang.Object
{
    private final java.lang.String TAG;
    private final int mCameraId;
    private final android.hardware.camera2.legacy.RequestHandlerThread mRequestThread;
    private static final boolean DEBUG;
    private static final boolean VERBOSE;
    private final android.hardware.Camera mCamera;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final android.hardware.camera2.legacy.CameraDeviceState mDeviceState;
    private final android.hardware.camera2.legacy.CaptureCollector mCaptureCollector;
    private final android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper;
    private final android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper;
    private static final int MSG_CONFIGURE_OUTPUTS;
    private static final int MSG_SUBMIT_CAPTURE_REQUEST;
    private static final int MSG_CLEANUP;
    private static final int MAX_IN_FLIGHT_REQUESTS;
    private static final int PREVIEW_FRAME_TIMEOUT;
    private static final int JPEG_FRAME_TIMEOUT;
    private static final int REQUEST_COMPLETE_TIMEOUT;
    private static final float ASPECT_RATIO_TOLERANCE;
    private boolean mPreviewRunning;
    private final java.util.List mPreviewOutputs;
    private final java.util.List mCallbackOutputs;
    private android.hardware.camera2.legacy.GLThreadManager mGLThreadManager;
    private android.graphics.SurfaceTexture mPreviewTexture;
    private android.hardware.Camera$Parameters mParams;
    private final java.util.List mJpegSurfaceIds;
    private android.util.Size mIntermediateBufferSize;
    private final android.hardware.camera2.legacy.RequestQueue mRequestQueue;
    private android.hardware.camera2.legacy.LegacyRequest mLastRequest;
    private android.graphics.SurfaceTexture mDummyTexture;
    private android.view.Surface mDummySurface;
    private final java.lang.Object mIdleLock;
    private final android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mPrevCounter;
    private final android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mRequestCounter;
    private static final boolean USE_BLOB_FORMAT_OVERRIDE;
    private final android.hardware.Camera$ErrorCallback mErrorCallback;
    private final android.os.ConditionVariable mReceivedJpeg;
    private final android.hardware.Camera$PictureCallback mJpegCallback;
    private final android.hardware.Camera$ShutterCallback mJpegShutterCallback;
    private final android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback;
    private final android.os.Handler$Callback mRequestHandlerCb;

    private void createDummySurface()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.graphics.SurfaceTexture $r1, $r2, $r3, $r5;
        android.view.Surface $r4, $r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        if $r1 == null goto label1;

        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.view.Surface mDummySurface>;

        if $r6 != null goto label2;

     label1:
        $r2 = new android.graphics.SurfaceTexture;

        specialinvoke $r2.<android.graphics.SurfaceTexture: void <init>(int)>(0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture> = $r2;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>(640, 480);

        $r4 = new android.view.Surface;

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        specialinvoke $r4.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>($r5);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.view.Surface mDummySurface> = $r4;

     label2:
        return;
    }

    private void stopPreview()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean $z0, $z1, $z2;
        android.hardware.Camera $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopPreview - preview running? ");

        $z2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r3, $r6);

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z1 == 0 goto label2;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r1.<android.hardware.Camera: void stopPreview()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

     label2:
        return;
    }

    private void startPreview()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        boolean $z0, $z1, $z2;
        android.hardware.Camera $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPreview - preview running? ");

        $z2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r3, $r6);

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z1 != 0 goto label2;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r1.<android.hardware.Camera: void startPreview()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 1;

     label2:
        return;
    }

    private void doJpegCapturePrepare(android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.SurfaceTexture $r2;
        android.hardware.Camera $r3;
        java.lang.String $r4, $r6, $r9;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doJpegCapturePrepare - preview running? ");

        $z3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, $r9);

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z1 != 0 goto label3;

        $z2 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z2 == 0 goto label2;

        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "doJpegCapture - create fake surface");

     label2:
        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void createDummySurface()>();

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mDummyTexture>;

        virtualinvoke $r3.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>($r2);

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void startPreview()>();

     label3:
        return;
    }

    private void doJpegCapture(android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        boolean $z0;
        android.hardware.Camera$PictureCallback $r2;
        android.hardware.Camera$ShutterCallback $r3;
        android.hardware.Camera $r4;
        java.lang.String $r5;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "doJpegCapturePrepare");

     label1:
        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ShutterCallback mJpegShutterCallback>;

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$PictureCallback mJpegCallback>;

        virtualinvoke $r4.<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>($r3, null, $r2);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

        return;
    }

    private void doPreviewCapture(android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        boolean $z0, $z1, $z2;
        android.graphics.SurfaceTexture $r2, $r4, $r6;
        android.util.Size $r3, $r5;
        int $i0, $i1;
        android.hardware.Camera $r7;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.String $r10, $r13;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r10 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doPreviewCapture - preview running? ");

        $z2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r10, $r13);

     label1:
        $z1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning>;

        if $z1 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        if $r2 != null goto label3;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Preview capture called with no preview surfaces configured.");

        throw $r8;

     label3:
        $r4 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i0 = virtualinvoke $r3.<android.util.Size: int getWidth()>();

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i1 = virtualinvoke $r5.<android.util.Size: int getHeight()>();

        virtualinvoke $r4.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i0, $i1);

        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        virtualinvoke $r7.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>($r6);

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void startPreview()>();

        return;
    }

    private void configureOutputs(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;
        java.lang.String r2, $r46, $r52, $r54, $r65, $r66, $r68, $r72, $r82, $r84, $r86, $r89, $r96, $r100, $r102, $r104;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i15, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i34, i39;
        java.util.Iterator r3, r5, r9;
        android.view.Surface r4, r6;
        android.util.Size r7, r8, r10, $r61, $r63, r112, r113, r115;
        long l2, l3, l4, $l14, $l16, $l30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z10;
        android.hardware.camera2.legacy.GLThreadManager $r11, $r30, $r33, $r36, $r39, $r40, $r49, $r51, $r91, $r92, $r93;
        android.hardware.Camera $r12, $r26, $r43;
        java.util.List $r13, $r14, $r15, $r16, $r29, $r31, $r34, $r58, $r59, $r76, $r78, $r90, r108, r114;
        android.hardware.camera2.CameraCharacteristics $r17, $r23;
        android.hardware.camera2.CameraCharacteristics$Key $r18, $r21;
        java.lang.Integer $r19, $r22;
        java.lang.Object $r20, $r24, $r64, $r74, $r75;
        android.hardware.Camera$Parameters $r25, $r27, $r28, $r32, $r44, $r55, $r56, $r57, $r62;
        android.hardware.camera2.legacy.CaptureCollector $r35;
        android.graphics.SurfaceTexture $r37, $r38, $r41;
        android.graphics.SurfaceTexture$OnFrameAvailableListener $r42;
        java.lang.StringBuilder $r45, $r47, $r48, $r60, $r67, $r69, $r70, $r71, $r73, $r79, $r80, $r81, $r83, $r85, $r87, $r88, $r94, $r95;
        android.hardware.camera2.legacy.CameraDeviceState $r50, $r98;
        java.util.ArrayList $r53, r110;
        byte $b22, $b23;
        java.lang.Long $r77;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r97, $r101, r106, r111;
        java.io.IOException $r99, r105;
        java.lang.RuntimeException $r103, r107;
        int[] r109;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.Collection;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z0 == 0 goto label03;

        if r1 != null goto label01;

        $r84 = "null";

        goto label02;

     label01:
        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $i34 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r83 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surfaces");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        r2 = $r84;

        $r86 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("configureOutputs with ");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r86, $r89);

     label03:
        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void stopPreview()>();

     label04:
        $r12 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        virtualinvoke $r12.<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>(null);

     label05:
        goto label07;

     label06:
        $r99 := @caughtexception;

        r105 = $r99;

        $r104 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r104, "Failed to clear prior SurfaceTexture, may cause GL deadlock: ", r105);

     label07:
        $r11 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        if $r11 == null goto label08;

        $r91 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r91.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilStarted()>();

        $r92 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r92.<android.hardware.camera2.legacy.GLThreadManager: void ignoreNewFrames()>();

        $r93 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r93.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilIdle()>();

     label08:
        $r14 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void resetJpegSurfaceFormats(java.util.Collection)>($r14);

        $r13 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        interfaceinvoke $r13.<java.util.List: void clear()>();

        $r16 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        interfaceinvoke $r16.<java.util.List: void clear()>();

        $r15 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        interfaceinvoke $r15.<java.util.List: void clear()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture> = null;

        $r17 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r18 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r20 = virtualinvoke $r17.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r18);

        $r19 = (java.lang.Integer) $r20;

        i39 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r23 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r21 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r24 = virtualinvoke $r23.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r21);

        $r22 = (java.lang.Integer) $r24;

        i0 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        if r1 == null goto label16;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z10 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label16;

        $r75 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.Surface) $r75;

     label10:
        i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r4);

        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceOrientation(android.view.Surface,int,int)>(r4, i39, i0);

        lookupswitch(i1)
        {
            case 33: goto label11;
            default: goto label12;
        };

     label11:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceFormat(android.view.Surface,int)>(r4, 1);

        $r76 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        $l30 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r4);

        $r77 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l30);

        interfaceinvoke $r76.<java.util.List: boolean add(java.lang.Object)>($r77);

        $r78 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        interfaceinvoke $r78.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label13;

     label12:
        $r90 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        interfaceinvoke $r90.<java.util.List: boolean add(java.lang.Object)>(r4);

     label13:
        goto label15;

     label14:
        $r101 := @caughtexception;

        r106 = $r101;

        $r100 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r100, "Surface abandoned, skipping...", r106);

     label15:
        goto label09;

     label16:
        $r26 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r27 = virtualinvoke $r26.<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams> = $r27;

     label17:
        goto label19;

     label18:
        $r103 := @caughtexception;

        r107 = $r103;

        $r102 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r102, "Received device exception: ", r107);

        $r98 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        virtualinvoke $r98.<android.hardware.camera2.legacy.CameraDeviceState: void setError(int)>(1);

        return;

     label19:
        $r25 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        r108 = virtualinvoke $r25.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>();

        r109 = specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: int[] getPhotoPreviewFpsRange(java.util.List)>(r108);

        $z1 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z1 == 0 goto label20;

        $r72 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doPreviewCapture - Selected range [");

        $i29 = r109[0];

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r79 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i31 = r109[1];

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r80 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r72, $r82);

     label20:
        $r28 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $i6 = r109[0];

        $i5 = r109[1];

        virtualinvoke $r28.<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>($i6, $i5);

        $r29 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        $i7 = interfaceinvoke $r29.<java.util.List: int size()>();

        if $i7 <= 0 goto label31;

        $r53 = new java.util.ArrayList;

        $i13 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r53.<java.util.ArrayList: void <init>(int)>($i13);

        r110 = $r53;

        $r58 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        r5 = interfaceinvoke $r58.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label26;

        $r74 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.view.Surface) $r74;

     label22:
        r7 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)>(r6);

        interfaceinvoke r110.<java.util.List: boolean add(java.lang.Object)>(r7);

     label23:
        goto label25;

     label24:
        $r97 := @caughtexception;

        r111 = $r97;

        $r96 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r96, "Surface abandoned, skipping...", r111);

     label25:
        goto label21;

     label26:
        r112 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>(r110);

        $r56 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        r113 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: android.util.Size getLargestSupportedJpegSizeByArea(android.hardware.Camera$Parameters)>($r56);

        $r57 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $r59 = virtualinvoke $r57.<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>();

        r114 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r59);

        $i17 = virtualinvoke r112.<android.util.Size: int getHeight()>();

        $l16 = (long) $i17;

        $i15 = virtualinvoke r112.<android.util.Size: int getWidth()>();

        $l14 = (long) $i15;

        l2 = $l16 * $l14;

        r8 = staticinvoke <android.hardware.camera2.utils.SizeAreaComparator: android.util.Size findLargestByArea(java.util.List)>(r114);

        r9 = interfaceinvoke r114.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z5 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label29;

        $r64 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.util.Size) $r64;

        $i20 = virtualinvoke r10.<android.util.Size: int getWidth()>();

        $i28 = virtualinvoke r10.<android.util.Size: int getHeight()>();

        $i27 = $i20 * $i28;

        l3 = (long) $i27;

        $i26 = virtualinvoke r8.<android.util.Size: int getWidth()>();

        $i25 = virtualinvoke r8.<android.util.Size: int getHeight()>();

        $i24 = $i26 * $i25;

        l4 = (long) $i24;

        $z6 = staticinvoke <android.hardware.camera2.legacy.RequestThreadManager: boolean checkAspectRatiosMatch(android.util.Size,android.util.Size)>(r113, r10);

        if $z6 == 0 goto label28;

        $b23 = l3 cmp l4;

        if $b23 >= 0 goto label28;

        $b22 = l3 cmp l2;

        if $b22 < 0 goto label28;

        r8 = r10;

     label28:
        goto label27;

     label29:
        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize> = r8;

        $r62 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $r63 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i19 = virtualinvoke $r63.<android.util.Size: int getWidth()>();

        $r61 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize>;

        $i18 = virtualinvoke $r61.<android.util.Size: int getHeight()>();

        virtualinvoke $r62.<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>($i19, $i18);

        $z4 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z4 == 0 goto label30;

        $r68 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Intermediate buffer selected with dimens: ");

        $r66 = virtualinvoke r8.<android.util.Size: java.lang.String toString()>();

        $r67 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r65 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r68, $r65);

     label30:
        goto label32;

     label31:
        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size mIntermediateBufferSize> = null;

        $z2 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        if $z2 == 0 goto label32;

        $r52 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r52, "No Intermediate buffer selected, no preview outputs were configured");

     label32:
        $r31 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        $r32 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        r115 = specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: android.util.Size calculatePictureSize(java.util.Collection,android.hardware.Camera$Parameters)>($r31, $r32);

        if r115 == null goto label33;

        $r46 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("configureOutputs - set take picture size to ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r115);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r46, $r54);

        $r55 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        $i12 = virtualinvoke r115.<android.util.Size: int getWidth()>();

        $i9 = virtualinvoke r115.<android.util.Size: int getHeight()>();

        virtualinvoke $r55.<android.hardware.Camera$Parameters: void setPictureSize(int,int)>($i12, $i9);

     label33:
        $r30 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        if $r30 != null goto label34;

        $r49 = new android.hardware.camera2.legacy.GLThreadManager;

        $i8 = r0.<android.hardware.camera2.legacy.RequestThreadManager: int mCameraId>;

        $r50 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r49.<android.hardware.camera2.legacy.GLThreadManager: void <init>(int,int,android.hardware.camera2.legacy.CameraDeviceState)>($i8, i39, $r50);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager> = $r49;

        $r51 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r51.<android.hardware.camera2.legacy.GLThreadManager: void start()>();

     label34:
        $r36 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r36.<android.hardware.camera2.legacy.GLThreadManager: void waitUntilStarted()>();

        $r33 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        $r34 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs>;

        $r35 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        virtualinvoke $r33.<android.hardware.camera2.legacy.GLThreadManager: void setConfigurationAndWait(java.util.Collection,android.hardware.camera2.legacy.CaptureCollector)>($r34, $r35);

        $r40 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        virtualinvoke $r40.<android.hardware.camera2.legacy.GLThreadManager: void allowNewFrames()>();

        $r39 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        $r38 = virtualinvoke $r39.<android.hardware.camera2.legacy.GLThreadManager: android.graphics.SurfaceTexture getCurrentSurfaceTexture()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture> = $r38;

        $r37 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        if $r37 == null goto label35;

        $r41 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture mPreviewTexture>;

        $r42 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback>;

        virtualinvoke $r41.<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>($r42);

     label35:
        $r43 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r44 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        virtualinvoke $r43.<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>($r44);

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label10 to label13 with label14;
        catch java.lang.RuntimeException from label16 to label17 with label18;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label22 to label23 with label24;
    }

    private void resetJpegSurfaceFormats(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        android.view.Surface r3;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException r4, $r6;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.Collection;

        if r1 != null goto label1;

        return;

     label1:
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.view.Surface) $r5;

     label3:
        staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: void setSurfaceFormat(android.view.Surface,int)>(r3, 33);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Surface abandoned, skipping...", r4);

     label6:
        goto label2;

     label7:
        return;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label3 to label4 with label5;
    }

    private android.util.Size calculatePictureSize(java.util.Collection, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;
        android.hardware.Camera$Parameters r2;
        java.util.ArrayList r3, r8, $r11, $r14;
        java.util.Iterator r4, r9, r32;
        android.view.Surface r5;
        android.util.Size r6, r7, r10, $r12, r33, r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7;
        java.util.List $r13, $r27, r34;
        java.lang.Object $r15, $r25, $r26, $r28;
        android.hardware.camera2.utils.SizeAreaComparator $r16;
        java.lang.Object[] $r17;
        java.lang.String $r18, $r19, $r22, $r29;
        java.lang.AssertionError $r20;
        java.lang.StringBuilder $r21, $r23, $r24;
        int $i1, $i2, $i3, $i4, $i5, $i6, i8, i9;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r30, r31;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: android.hardware.Camera$Parameters;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r3 = $r11;

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r28 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.view.Surface) $r28;

     label02:
        $r27 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        $z7 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean containsSurfaceId(android.view.Surface,java.util.Collection)>(r5, $r27);

        if $z7 != 0 goto label04;

     label03:
        goto label01;

     label04:
        r6 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)>(r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r6);

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

        r31 = $r30;

        $r29 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r29, "Surface abandoned, skipping...", r31);

     label07:
        goto label01;

     label08:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label20;

        i8 = -1;

        i9 = -1;

        r32 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r26 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.util.Size) $r26;

        $i5 = virtualinvoke r7.<android.util.Size: int getWidth()>();

        if $i5 <= i8 goto label10;

        $i6 = virtualinvoke r7.<android.util.Size: int getWidth()>();

        goto label11;

     label10:
        $i6 = i8;

     label11:
        i8 = $i6;

        $i3 = virtualinvoke r7.<android.util.Size: int getHeight()>();

        if $i3 <= i9 goto label12;

        $i4 = virtualinvoke r7.<android.util.Size: int getHeight()>();

        goto label13;

     label12:
        $i4 = i9;

     label13:
        i9 = $i4;

        goto label09;

     label14:
        $r12 = new android.util.Size;

        specialinvoke $r12.<android.util.Size: void <init>(int,int)>(i8, i9);

        r33 = $r12;

        $r13 = virtualinvoke r2.<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>();

        r34 = staticinvoke <android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>($r13);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r8 = $r14;

        r9 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z4 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.util.Size) $r25;

        $i2 = virtualinvoke r10.<android.util.Size: int getWidth()>();

        if $i2 < i8 goto label16;

        $i1 = virtualinvoke r10.<android.util.Size: int getHeight()>();

        if $i1 < i9 goto label16;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r10);

     label16:
        goto label15;

     label17:
        $z3 = interfaceinvoke r8.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label18;

        $r20 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find any supported JPEG sizes large enough to fit ");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r20;

     label18:
        $r16 = new android.hardware.camera2.utils.SizeAreaComparator;

        specialinvoke $r16.<android.hardware.camera2.utils.SizeAreaComparator: void <init>()>();

        $r15 = staticinvoke <java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>(r8, $r16);

        r35 = (android.util.Size) $r15;

        $z5 = virtualinvoke r35.<android.util.Size: boolean equals(java.lang.Object)>(r33);

        if $z5 != 0 goto label19;

        $r19 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r35;

        $r17[1] = r33;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("configureOutputs - Will need to crop picture %s into smallest bound size %s", $r17);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r19, $r18);

     label19:
        return r35;

     label20:
        return null;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label02 to label03 with label06;
        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label04 to label05 with label06;
    }

    private static boolean checkAspectRatiosMatch(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i2, $i3;
        byte $b4;
        boolean $z0;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $f2 = (float) $i0;

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $f3 = (float) $i1;

        f0 = $f2 / $f3;

        $i2 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f4 = (float) $i2;

        $i3 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f5 = (float) $i3;

        f1 = $f4 / $f5;

        $f6 = f0 - f1;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $b4 = $f7 cmpg 0.01F;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int[] getPhotoPreviewFpsRange(java.util.List)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List r1;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.util.Iterator r2;
        int[] r3, $r5;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.lang.String $r7;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.List;

        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i6 != 0 goto label1;

        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, "No supported frame rates returned!");

        return null;

     label1:
        i0 = 0;

        i1 = 0;

        i2 = 0;

        i3 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (int[]) $r6;

        i4 = r3[0];

        i5 = r3[1];

        if i5 > i1 goto label3;

        if i5 != i1 goto label4;

        if i4 <= i0 goto label4;

     label3:
        i0 = i4;

        i1 = i5;

        i2 = i3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (int[]) $r4;

        return $r5;
    }

    public void <init>(int, android.hardware.Camera, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.legacy.CameraDeviceState)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0;
        android.hardware.Camera r1, $r19, $r29, $r30, $r37;
        android.hardware.camera2.CameraCharacteristics r2, $r21, $r28;
        android.hardware.camera2.legacy.CameraDeviceState r3, $r27, $r35;
        java.lang.String r4;
        java.util.ArrayList $r5, $r6, $r7;
        android.hardware.camera2.legacy.RequestQueue $r8;
        java.util.List $r9;
        java.lang.Object $r10, $r20, $r22, $r25;
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter $r11, $r12;
        android.hardware.camera2.legacy.RequestThreadManager$1 $r13;
        android.os.ConditionVariable $r14;
        android.hardware.camera2.legacy.RequestThreadManager$3 $r15;
        android.hardware.camera2.legacy.RequestThreadManager$2 $r16;
        android.hardware.camera2.legacy.RequestThreadManager$5 $r17;
        android.hardware.camera2.legacy.RequestThreadManager$4 $r18;
        java.lang.Object[] $r23;
        java.lang.Integer $r24;
        android.hardware.camera2.legacy.LegacyFocusStateMapper $r26;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper $r31;
        android.hardware.camera2.legacy.RequestHandlerThread $r32;
        android.os.Handler$Callback $r33;
        android.hardware.camera2.legacy.CaptureCollector $r34;
        android.hardware.Camera$ErrorCallback $r36;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.Camera;

        r2 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter3: android.hardware.camera2.legacy.CameraDeviceState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: boolean mPreviewRunning> = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mPreviewOutputs> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds> = $r7;

        $r8 = new android.hardware.camera2.legacy.RequestQueue;

        $r9 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        specialinvoke $r8.<android.hardware.camera2.legacy.RequestQueue: void <init>(java.util.List)>($r9);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue> = $r8;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest> = null;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock> = $r10;

        $r11 = new android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        specialinvoke $r11.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void <init>(java.lang.String)>("Incoming Preview");

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mPrevCounter> = $r11;

        $r12 = new android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        specialinvoke $r12.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void <init>(java.lang.String)>("Incoming Requests");

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mRequestCounter> = $r12;

        $r13 = new android.hardware.camera2.legacy.RequestThreadManager$1;

        specialinvoke $r13.<android.hardware.camera2.legacy.RequestThreadManager$1: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ErrorCallback mErrorCallback> = $r13;

        $r14 = new android.os.ConditionVariable;

        specialinvoke $r14.<android.os.ConditionVariable: void <init>(boolean)>(0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.ConditionVariable mReceivedJpeg> = $r14;

        $r16 = new android.hardware.camera2.legacy.RequestThreadManager$2;

        specialinvoke $r16.<android.hardware.camera2.legacy.RequestThreadManager$2: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$PictureCallback mJpegCallback> = $r16;

        $r15 = new android.hardware.camera2.legacy.RequestThreadManager$3;

        specialinvoke $r15.<android.hardware.camera2.legacy.RequestThreadManager$3: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ShutterCallback mJpegShutterCallback> = $r15;

        $r18 = new android.hardware.camera2.legacy.RequestThreadManager$4;

        specialinvoke $r18.<android.hardware.camera2.legacy.RequestThreadManager$4: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.graphics.SurfaceTexture$OnFrameAvailableListener mPreviewCallback> = $r18;

        $r17 = new android.hardware.camera2.legacy.RequestThreadManager$5;

        specialinvoke $r17.<android.hardware.camera2.legacy.RequestThreadManager$5: void <init>(android.hardware.camera2.legacy.RequestThreadManager)>(r0);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.Handler$Callback mRequestHandlerCb> = $r17;

        $r20 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "camera must not be null");

        $r19 = (android.hardware.Camera) $r20;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera> = $r19;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: int mCameraId> = i0;

        $r22 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "characteristics must not be null");

        $r21 = (android.hardware.camera2.CameraCharacteristics) $r22;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics> = $r21;

        $r23 = newarray (java.lang.Object)[1];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r23[0] = $r24;

        r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RequestThread-%d", $r23);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG> = r4;

        $r25 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "deviceState must not be null");

        $r27 = (android.hardware.camera2.legacy.CameraDeviceState) $r25;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState> = $r27;

        $r26 = new android.hardware.camera2.legacy.LegacyFocusStateMapper;

        $r30 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        specialinvoke $r26.<android.hardware.camera2.legacy.LegacyFocusStateMapper: void <init>(android.hardware.Camera)>($r30);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper> = $r26;

        $r31 = new android.hardware.camera2.legacy.LegacyFaceDetectMapper;

        $r29 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r28 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        specialinvoke $r31.<android.hardware.camera2.legacy.LegacyFaceDetectMapper: void <init>(android.hardware.Camera,android.hardware.camera2.CameraCharacteristics)>($r29, $r28);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper> = $r31;

        $r34 = new android.hardware.camera2.legacy.CaptureCollector;

        $r35 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r34.<android.hardware.camera2.legacy.CaptureCollector: void <init>(int,android.hardware.camera2.legacy.CameraDeviceState)>(2, $r35);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector> = $r34;

        $r32 = new android.hardware.camera2.legacy.RequestHandlerThread;

        $r33 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.Handler$Callback mRequestHandlerCb>;

        specialinvoke $r32.<android.hardware.camera2.legacy.RequestHandlerThread: void <init>(java.lang.String,android.os.Handler$Callback)>(r4, $r33);

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread> = $r32;

        $r37 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        $r36 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$ErrorCallback mErrorCallback>;

        virtualinvoke $r37.<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>($r36);

        return;
    }

    public void start()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHandlerThread $r1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r1.<android.hardware.camera2.legacy.RequestHandlerThread: void start()>();

        return;
    }

    public long flush()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        long l0;
        java.lang.String $r1;
        android.hardware.camera2.legacy.RequestQueue $r2;
        android.hardware.camera2.legacy.CaptureCollector $r3;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r1, "Flushing all pending requests.");

        $r2 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        l0 = virtualinvoke $r2.<android.hardware.camera2.legacy.RequestQueue: long stopRepeating()>();

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        virtualinvoke $r3.<android.hardware.camera2.legacy.CaptureCollector: void failAll()>();

        return l0;
    }

    public void quit()
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.os.Handler r1;
        android.hardware.camera2.legacy.RequestHandlerThread $r3, $r5, $r6, $r9, $r11;
        android.os.Message $r4;
        java.lang.InterruptedException $r7;
        java.lang.Object[] $r8;
        java.lang.String $r10, $r12, $r13;
        long $l0;
        java.lang.Long $r14;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        $r4 = virtualinvoke r1.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke r1.<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r4);

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r5.<android.hardware.camera2.legacy.RequestHandlerThread: boolean quitSafely()>();

     label1:
        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        virtualinvoke $r6.<android.hardware.camera2.legacy.RequestHandlerThread: void join()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r10 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        $r12 = virtualinvoke $r9.<android.hardware.camera2.legacy.RequestHandlerThread: java.lang.String getName()>();

        $r8[0] = $r12;

        $r11 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        $l0 = virtualinvoke $r11.<android.hardware.camera2.legacy.RequestHandlerThread: long getId()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[1] = $r14;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r8);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r10, $r13);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public int submitCaptureRequests(java.util.List, boolean, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List r1;
        boolean z0;
        android.hardware.camera2.utils.LongParcelable r2;
        android.os.Handler r3;
        int i0;
        java.lang.Object r4, $r7;
        java.lang.Throwable r5, $r9;
        android.hardware.camera2.legacy.RequestHandlerThread $r6;
        android.hardware.camera2.legacy.RequestQueue $r8;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.hardware.camera2.utils.LongParcelable;

        $r6 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r3 = virtualinvoke $r6.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        $r7 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        i0 = virtualinvoke $r8.<android.hardware.camera2.legacy.RequestQueue: int submit(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>(r1, z0, r2);

        virtualinvoke r3.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long cancelRepeating(int)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        int i0;
        android.hardware.camera2.legacy.RequestQueue $r1;
        long $l1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        $l1 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestQueue: long stopRepeating(int)>(i0);

        return $l1;
    }

    public void configure(java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;
        android.os.Handler r2;
        android.os.ConditionVariable r3, $r6;
        android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder r4, $r7;
        android.hardware.camera2.legacy.RequestHandlerThread $r5;
        android.os.Message $r8;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter0: java.util.Collection;

        $r5 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        r2 = virtualinvoke $r5.<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler waitAndGetHandler()>();

        $r6 = new android.os.ConditionVariable;

        specialinvoke $r6.<android.os.ConditionVariable: void <init>(boolean)>(0);

        r3 = $r6;

        $r7 = new android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder;

        specialinvoke $r7.<android.hardware.camera2.legacy.RequestThreadManager$ConfigureHolder: void <init>(android.os.ConditionVariable,java.util.Collection)>(r3, r1);

        r4 = $r7;

        $r8 = virtualinvoke r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(1, 0, 0, r4);

        virtualinvoke r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

        virtualinvoke r3.<android.os.ConditionVariable: void block()>();

        return;
    }

    static java.lang.String access$000(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.String TAG>;

        return $r1;
    }

    static android.hardware.camera2.legacy.CameraDeviceState access$100(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.CameraDeviceState $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        return $r1;
    }

    static android.hardware.camera2.legacy.CaptureCollector access$200(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.CaptureCollector $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.CaptureCollector mCaptureCollector>;

        return $r1;
    }

    static java.util.List access$300(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mJpegSurfaceIds>;

        return $r1;
    }

    static android.os.ConditionVariable access$400(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.os.ConditionVariable mReceivedJpeg>;

        return $r1;
    }

    static boolean access$500()
    {
        boolean $z0;

        $z0 = <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG>;

        return $z0;
    }

    static android.hardware.camera2.legacy.RequestThreadManager$FpsCounter access$600(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mPrevCounter>;

        return $r1;
    }

    static android.hardware.camera2.legacy.GLThreadManager access$700(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.GLThreadManager $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.GLThreadManager mGLThreadManager>;

        return $r1;
    }

    static void access$800(android.hardware.camera2.legacy.RequestThreadManager, java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: java.util.Collection;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void configureOutputs(java.util.Collection)>(r1);

        return;
    }

    static android.hardware.camera2.legacy.RequestHandlerThread access$900(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHandlerThread $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestHandlerThread mRequestThread>;

        return $r1;
    }

    static android.hardware.camera2.legacy.RequestQueue access$1000(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestQueue $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestQueue mRequestQueue>;

        return $r1;
    }

    static java.lang.Object access$1100(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.lang.Object mIdleLock>;

        return $r1;
    }

    static android.hardware.camera2.legacy.LegacyRequest access$1200(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyRequest $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest>;

        return $r1;
    }

    static android.hardware.Camera$Parameters access$1300(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera$Parameters $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams>;

        return $r1;
    }

    static android.hardware.camera2.CameraCharacteristics access$1400(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.CameraCharacteristics $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        return $r1;
    }

    static android.hardware.Camera access$1500(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera mCamera>;

        return $r1;
    }

    static android.hardware.Camera$Parameters access$1302(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.Camera$Parameters)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.Camera$Parameters r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.Camera$Parameters;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.Camera$Parameters mParams> = r1;

        return r1;
    }

    static android.hardware.camera2.legacy.LegacyRequest access$1202(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.LegacyRequest)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyRequest r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.LegacyRequest;

        r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyRequest mLastRequest> = r1;

        return r1;
    }

    static void access$1600(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doPreviewCapture(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static void access$1700(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder) throws java.io.IOException
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doJpegCapturePrepare(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static android.hardware.camera2.legacy.LegacyFaceDetectMapper access$1800(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyFaceDetectMapper $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFaceDetectMapper mFaceDetectMapper>;

        return $r1;
    }

    static android.hardware.camera2.legacy.LegacyFocusStateMapper access$1900(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.LegacyFocusStateMapper $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.LegacyFocusStateMapper mFocusStateMapper>;

        return $r1;
    }

    static void access$2000(android.hardware.camera2.legacy.RequestThreadManager, android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestHolder r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void doJpegCapture(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return;
    }

    static android.hardware.camera2.legacy.RequestThreadManager$FpsCounter access$2100(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter mRequestCounter>;

        return $r1;
    }

    static java.util.List access$2200(android.hardware.camera2.legacy.RequestThreadManager)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        $r1 = r0.<android.hardware.camera2.legacy.RequestThreadManager: java.util.List mCallbackOutputs>;

        return $r1;
    }

    static void access$2300(android.hardware.camera2.legacy.RequestThreadManager, java.util.Collection)
    {
        android.hardware.camera2.legacy.RequestThreadManager r0;
        java.util.Collection r1;

        r0 := @parameter0: android.hardware.camera2.legacy.RequestThreadManager;

        r1 := @parameter1: java.util.Collection;

        specialinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager: void resetJpegSurfaceFormats(java.util.Collection)>(r1);

        return;
    }

    static void <clinit>()
    {
        boolean $z0, $z1;

        <android.hardware.camera2.legacy.RequestThreadManager: boolean USE_BLOB_FORMAT_OVERRIDE> = 1;

        <android.hardware.camera2.legacy.RequestThreadManager: float ASPECT_RATIO_TOLERANCE> = 0.01F;

        <android.hardware.camera2.legacy.RequestThreadManager: int REQUEST_COMPLETE_TIMEOUT> = 3000;

        <android.hardware.camera2.legacy.RequestThreadManager: int JPEG_FRAME_TIMEOUT> = 3000;

        <android.hardware.camera2.legacy.RequestThreadManager: int PREVIEW_FRAME_TIMEOUT> = 1000;

        <android.hardware.camera2.legacy.RequestThreadManager: int MAX_IN_FLIGHT_REQUESTS> = 2;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_CLEANUP> = 3;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_SUBMIT_CAPTURE_REQUEST> = 2;

        <android.hardware.camera2.legacy.RequestThreadManager: int MSG_CONFIGURE_OUTPUTS> = 1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("HAL1ShimLogging", 3);

        <android.hardware.camera2.legacy.RequestThreadManager: boolean DEBUG> = $z0;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("HAL1ShimLogging", 2);

        <android.hardware.camera2.legacy.RequestThreadManager: boolean VERBOSE> = $z1;

        return;
    }
}
