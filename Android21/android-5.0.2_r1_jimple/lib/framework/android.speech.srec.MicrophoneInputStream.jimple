public final class android.speech.srec.MicrophoneInputStream extends java.io.InputStream
{
    private static final java.lang.String TAG;
    private long mAudioRecord;
    private byte[] mOneByte;

    public void <init>(int, int) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream r0;
        int i0, i1, i2;
        byte[] $r1;
        long $l3, $l4, $l6;
        byte $b5;
        java.io.IOException $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = 0L;

        $r1 = newarray (byte)[1];

        r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte> = $r1;

        $l3 = staticinvoke <android.speech.srec.MicrophoneInputStream: long AudioRecordNew(int,int)>(i0, i1);

        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = $l3;

        $l4 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("AudioRecord constructor failed - busy?");

        throw $r7;

     label1:
        $l6 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        i2 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordStart(long)>($l6);

        if i2 == 0 goto label2;

        virtualinvoke r0.<android.speech.srec.MicrophoneInputStream: void close()>();

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioRecord start failed: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public int read() throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream r0;
        int i0;
        long $l1, $l3;
        byte $b2, $b4;
        byte[] $r1, $r2;
        short $s5;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        $l1 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r3;

     label1:
        $l3 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $r1 = r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte>;

        i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(long,byte[],int,int)>($l3, $r1, 0, 1);

        if i0 != 1 goto label2;

        $r2 = r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte>;

        $b4 = $r2[0];

        $s5 = $b4 & 255;

        goto label3;

     label2:
        $s5 = -1;

     label3:
        return $s5;
    }

    public int read(byte[]) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream r0;
        byte[] r1;
        long $l0, $l3;
        byte $b1;
        int $i2, $i4;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        r1 := @parameter0: byte[];

        $l0 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r2;

     label1:
        $l3 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $i2 = lengthof r1;

        $i4 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(long,byte[],int,int)>($l3, r1, 0, $i2);

        return $i4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream r0;
        byte[] r1;
        int i0, i1, $i5;
        long $l2, $l4;
        byte $b3;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r2;

     label1:
        $l4 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $i5 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(long,byte[],int,int)>($l4, r1, i0, i1);

        return $i5;
    }

    public void close() throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream r0;
        java.lang.Throwable r1, r2, r3, $r4, $r5, $r6;
        long $l0, $l2, $l3, $l4;
        byte $b1;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        $l0 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label13;

     label01:
        $l2 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordStop(long)>($l2);

     label02:
        $l3 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordDelete(long)>($l3);

     label03:
        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = 0L;

        goto label06;

     label04:
        $r5 := @caughtexception;

        r1 = $r5;

     label05:
        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = 0L;

        throw r1;

     label06:
        goto label13;

     label07:
        $r4 := @caughtexception;

        r2 = $r4;

     label08:
        $l4 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordDelete(long)>($l4);

     label09:
        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = 0L;

        goto label12;

     label10:
        $r6 := @caughtexception;

        r3 = $r6;

     label11:
        r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord> = 0L;

        throw r3;

     label12:
        throw r2;

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.speech.srec.MicrophoneInputStream r0;
        long $l0;
        byte $b1;
        java.io.IOException $r1;

        r0 := @this: android.speech.srec.MicrophoneInputStream;

        $l0 = r0.<android.speech.srec.MicrophoneInputStream: long mAudioRecord>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.speech.srec.MicrophoneInputStream: void close()>();

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("someone forgot to close MicrophoneInputStream");

        throw $r1;

     label1:
        return;
    }

    private static native long AudioRecordNew(int, int);

    private static native int AudioRecordStart(long);

    private static native int AudioRecordRead(long, byte[], int, int) throws java.io.IOException;

    private static native void AudioRecordStop(long) throws java.io.IOException;

    private static native void AudioRecordDelete(long) throws java.io.IOException;

    static void <clinit>()
    {
        <android.speech.srec.MicrophoneInputStream: java.lang.String TAG> = "MicrophoneInputStream";

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("srec_jni");

        return;
    }
}
