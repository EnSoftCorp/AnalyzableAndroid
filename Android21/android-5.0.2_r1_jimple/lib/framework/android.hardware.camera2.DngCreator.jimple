public final class android.hardware.camera2.DngCreator extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final java.lang.String TAG;
    public static final int MAX_THUMBNAIL_DIMENSION;
    private static final java.lang.String GPS_LAT_REF_NORTH;
    private static final java.lang.String GPS_LAT_REF_SOUTH;
    private static final java.lang.String GPS_LONG_REF_EAST;
    private static final java.lang.String GPS_LONG_REF_WEST;
    private static final java.lang.String GPS_DATE_FORMAT_STR;
    private static final java.lang.String TIFF_DATETIME_FORMAT;
    private static final java.text.DateFormat sExifGPSDateStamp;
    private static final java.text.DateFormat sDateTimeStampFormat;
    private final java.util.Calendar mGPSTimeStampCalendar;
    private static final int DEFAULT_PIXEL_STRIDE;
    private static final int BYTES_PER_RGB_PIX;
    private long mNativeContext;

    public void <init>(android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.CaptureResult)
    {
        android.hardware.camera2.DngCreator r0;
        android.hardware.camera2.CameraCharacteristics r1;
        android.hardware.camera2.CaptureResult r2;
        long l0, l1, l2, $l3, $l4, $l5;
        java.lang.Long r3, $r10;
        java.lang.String r4;
        java.util.TimeZone $r5;
        java.util.Calendar $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object $r8;
        android.hardware.camera2.CaptureResult$Key $r9;
        java.text.DateFormat $r11;
        android.hardware.camera2.impl.CameraMetadataNative $r12, $r13;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        r2 := @parameter1: android.hardware.camera2.CaptureResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        $r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r5);

        r0.<android.hardware.camera2.DngCreator: java.util.Calendar mGPSTimeStampCalendar> = $r6;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument to DngCreator constructor");

        throw $r7;

     label2:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l1 = l0 - $l3;

        $r9 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r8 = virtualinvoke r2.<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r9);

        r3 = (java.lang.Long) $r8;

        l2 = l0;

        if r3 == null goto label3;

        $l4 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        $l5 = $l4 / 1000000L;

        l2 = $l5 + l1;

     label3:
        $r11 = <android.hardware.camera2.DngCreator: java.text.DateFormat sDateTimeStampFormat>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        r4 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.lang.Object)>($r10);

        $r12 = virtualinvoke r1.<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        $r13 = virtualinvoke r2.<android.hardware.camera2.CaptureResult: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()>();

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeInit(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.camera2.impl.CameraMetadataNative,java.lang.String)>($r12, $r13, r4);

        return;
    }

    public android.hardware.camera2.DngCreator setOrientation(int)
    {
        android.hardware.camera2.DngCreator r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.DngCreator;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 8 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Orientation ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid EXIF orientation value");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeSetOrientation(int)>(i0);

        return r0;
    }

    public android.hardware.camera2.DngCreator setThumbnail(android.graphics.Bitmap)
    {
        android.hardware.camera2.DngCreator r0;
        android.graphics.Bitmap r1;
        int i0, i1;
        java.nio.ByteBuffer r2;
        java.lang.IllegalArgumentException $r3, $r12;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: android.graphics.Bitmap;

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument to setThumbnail");

        throw $r12;

     label1:
        i0 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if i0 > 256 goto label2;

        if i1 <= 256 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thumbnail dimensions width,height (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") too large, dimensions must be smaller than ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(256);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label3:
        r2 = staticinvoke <android.hardware.camera2.DngCreator: java.nio.ByteBuffer convertToRGB(android.graphics.Bitmap)>(r1);

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeSetThumbnail(java.nio.ByteBuffer,int,int)>(r2, i0, i1);

        return r0;
    }

    public android.hardware.camera2.DngCreator setThumbnail(android.media.Image)
    {
        android.hardware.camera2.DngCreator r0;
        android.media.Image r1;
        int i0, i1, i2;
        java.nio.ByteBuffer r2;
        java.lang.IllegalArgumentException $r3, $r12, $r17;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r16;
        java.lang.String $r10, $r15;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: android.media.Image;

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument to setThumbnail");

        throw $r17;

     label1:
        i0 = virtualinvoke r1.<android.media.Image: int getFormat()>();

        if i0 == 35 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Image format ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label2:
        i1 = virtualinvoke r1.<android.media.Image: int getWidth()>();

        i2 = virtualinvoke r1.<android.media.Image: int getHeight()>();

        if i1 > 256 goto label3;

        if i2 <= 256 goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thumbnail dimensions width,height (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") too large, dimensions must be smaller than ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(256);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label4:
        r2 = staticinvoke <android.hardware.camera2.DngCreator: java.nio.ByteBuffer convertToRGB(android.media.Image)>(r1);

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeSetThumbnail(java.nio.ByteBuffer,int,int)>(r2, i1, i2);

        return r0;
    }

    public android.hardware.camera2.DngCreator setLocation(android.location.Location)
    {
        android.hardware.camera2.DngCreator r0;
        android.location.Location r1;
        double d0, d1;
        long l0;
        int[] r2, r3, r7, $r10;
        java.lang.String r4, r5, r6, $r14, $r16;
        byte $b1, $b2;
        java.text.DateFormat $r8;
        java.lang.Long $r9;
        java.util.Calendar $r11, $r12, $r13, $r15;
        int $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: android.location.Location;

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null location passed to setLocation");

        throw $r17;

     label1:
        d0 = virtualinvoke r1.<android.location.Location: double getLatitude()>();

        d1 = virtualinvoke r1.<android.location.Location: double getLongitude()>();

        l0 = virtualinvoke r1.<android.location.Location: long getTime()>();

        r2 = staticinvoke <android.hardware.camera2.DngCreator: int[] toExifLatLong(double)>(d0);

        r3 = staticinvoke <android.hardware.camera2.DngCreator: int[] toExifLatLong(double)>(d1);

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label2;

        $r16 = "N";

        goto label3;

     label2:
        $r16 = "S";

     label3:
        r4 = $r16;

        $b2 = d1 cmpl 0.0;

        if $b2 < 0 goto label4;

        $r14 = "E";

        goto label5;

     label4:
        $r14 = "W";

     label5:
        r5 = $r14;

        $r8 = <android.hardware.camera2.DngCreator: java.text.DateFormat sExifGPSDateStamp>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r6 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.lang.Object)>($r9);

        $r11 = r0.<android.hardware.camera2.DngCreator: java.util.Calendar mGPSTimeStampCalendar>;

        virtualinvoke $r11.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $r10 = newarray (int)[6];

        $r12 = r0.<android.hardware.camera2.DngCreator: java.util.Calendar mGPSTimeStampCalendar>;

        $i3 = virtualinvoke $r12.<java.util.Calendar: int get(int)>(11);

        $r10[0] = $i3;

        $r10[1] = 1;

        $r13 = r0.<android.hardware.camera2.DngCreator: java.util.Calendar mGPSTimeStampCalendar>;

        $i4 = virtualinvoke $r13.<java.util.Calendar: int get(int)>(12);

        $r10[2] = $i4;

        $r10[3] = 1;

        $r15 = r0.<android.hardware.camera2.DngCreator: java.util.Calendar mGPSTimeStampCalendar>;

        $i5 = virtualinvoke $r15.<java.util.Calendar: int get(int)>(13);

        $r10[4] = $i5;

        $r10[5] = 1;

        r7 = $r10;

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeSetGpsTags(int[],java.lang.String,int[],java.lang.String,java.lang.String,int[])>(r2, r4, r3, r5, r6, r7);

        return r0;
    }

    public android.hardware.camera2.DngCreator setDescription(java.lang.String)
    {
        android.hardware.camera2.DngCreator r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null description passed to setDescription.");

        throw $r2;

     label1:
        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeSetDescription(java.lang.String)>(r1);

        return r0;
    }

    public void writeInputStream(java.io.OutputStream, android.util.Size, java.io.InputStream, long) throws java.io.IOException
    {
        android.hardware.camera2.DngCreator r0;
        java.io.OutputStream r1;
        android.util.Size r2;
        java.io.InputStream r3;
        long l0;
        int i1, i2;
        byte $b3;
        java.lang.IllegalArgumentException $r4, $r11, $r13, $r14, $r15;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r12;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: android.util.Size;

        r3 := @parameter2: java.io.InputStream;

        l0 := @parameter3: long;

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null dngOutput passed to writeInputStream");

        throw $r15;

     label1:
        if r2 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null size passed to writeInputStream");

        throw $r13;

     label2:
        if r3 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null pixels passed to writeInputStream");

        throw $r14;

     label3:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label4;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative offset passed to writeInputStream");

        throw $r11;

     label4:
        i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        if i1 <= 0 goto label5;

        if i2 > 0 goto label6;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size with invalid width, height: (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") passed to writeInputStream");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label6:
        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeWriteInputStream(java.io.OutputStream,java.io.InputStream,int,int,long)>(r1, r3, i1, i2, l0);

        return;
    }

    public void writeByteBuffer(java.io.OutputStream, android.util.Size, java.nio.ByteBuffer, long) throws java.io.IOException
    {
        android.hardware.camera2.DngCreator r0;
        java.io.OutputStream r1;
        android.util.Size r2;
        java.nio.ByteBuffer r3;
        long l0;
        int i1, i2, $i4;
        byte $b3;
        java.lang.IllegalArgumentException $r4, $r5, $r6, $r7;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: android.util.Size;

        r3 := @parameter2: java.nio.ByteBuffer;

        l0 := @parameter3: long;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null dngOutput passed to writeByteBuffer");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null size passed to writeByteBuffer");

        throw $r6;

     label2:
        if r3 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null pixels passed to writeByteBuffer");

        throw $r5;

     label3:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative offset passed to writeByteBuffer");

        throw $r4;

     label4:
        i1 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        i2 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        $i4 = i1 * 2;

        specialinvoke r0.<android.hardware.camera2.DngCreator: void writeByteBuffer(int,int,java.nio.ByteBuffer,java.io.OutputStream,int,int,long)>(i1, i2, r3, r1, 2, $i4, l0);

        return;
    }

    public void writeImage(java.io.OutputStream, android.media.Image) throws java.io.IOException
    {
        android.hardware.camera2.DngCreator r0;
        java.io.OutputStream r1;
        android.media.Image r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.media.Image$Plane[] r3;
        java.nio.ByteBuffer r4;
        java.lang.IllegalArgumentException $r5, $r10, $r13, $r15;
        android.media.Image$Plane $r6, $r7, $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.String $r14;

        r0 := @this: android.hardware.camera2.DngCreator;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: android.media.Image;

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null dngOutput to writeImage");

        throw $r15;

     label1:
        if r2 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null pixels to writeImage");

        throw $r13;

     label2:
        i0 = virtualinvoke r2.<android.media.Image: int getFormat()>();

        if i0 == 32 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported image format ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        r3 = virtualinvoke r2.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        if r3 == null goto label4;

        $i1 = lengthof r3;

        if $i1 > 0 goto label5;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image with no planes passed to writeImage");

        throw $r5;

     label5:
        $r6 = r3[0];

        r4 = virtualinvoke $r6.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        $i2 = virtualinvoke r2.<android.media.Image: int getWidth()>();

        $i3 = virtualinvoke r2.<android.media.Image: int getHeight()>();

        $r7 = r3[0];

        $i4 = virtualinvoke $r7.<android.media.Image$Plane: int getPixelStride()>();

        $r8 = r3[0];

        $i5 = virtualinvoke $r8.<android.media.Image$Plane: int getRowStride()>();

        specialinvoke r0.<android.hardware.camera2.DngCreator: void writeByteBuffer(int,int,java.nio.ByteBuffer,java.io.OutputStream,int,int,long)>($i2, $i3, r4, r1, $i4, $i5, 0L);

        return;
    }

    public void close()
    {
        android.hardware.camera2.DngCreator r0;

        r0 := @this: android.hardware.camera2.DngCreator;

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeDestroy()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.DngCreator r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.hardware.camera2.DngCreator;

     label1:
        virtualinvoke r0.<android.hardware.camera2.DngCreator: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void writeByteBuffer(int, int, java.nio.ByteBuffer, java.io.OutputStream, int, int, long) throws java.io.IOException
    {
        android.hardware.camera2.DngCreator r0;
        int i0, i1, i2, i3, i7, $i8, $i9;
        java.nio.ByteBuffer r1;
        java.io.OutputStream r2;
        long l4, l5, l6, $l11;
        java.lang.IllegalArgumentException $r3, $r12, $r22;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r26, $r27;
        java.lang.String $r9, $r17, $r25;
        byte $b10;
        boolean $z0;

        r0 := @this: android.hardware.camera2.DngCreator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteBuffer;

        r2 := @parameter3: java.io.OutputStream;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        l4 := @parameter6: long;

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Image with invalid width, height: (");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") passed to write");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        l5 = (long) $i9;

        $i8 = i3 * i1;

        $l11 = (long) $i8;

        l6 = $l11 + l4;

        $b10 = l5 cmp l6;

        if $b10 >= 0 goto label3;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Image size ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too small (must be larger than ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r22;

     label3:
        i7 = i2 * i0;

        if i7 <= i3 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid image pixel stride, row byte width ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large, expecting ");

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        specialinvoke r0.<android.hardware.camera2.DngCreator: void nativeWriteImage(java.io.OutputStream,int,int,java.nio.ByteBuffer,int,int,long,boolean)>(r2, i0, i1, r1, i3, i2, l4, $z0);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        return;
    }

    private static void yuvToRgb(byte[], int, byte[])
    {
        byte[] r0, r1;
        int i0, $i9, $i10, $i11, $i13, $i14;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        byte $b2, $b4, $b6, $b8, $b12, $b15;
        short $s3, $s5, $s7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        $b2 = r0[0];

        $s3 = $b2 & 255;

        f0 = (float) $s3;

        $b4 = r0[1];

        $s5 = $b4 & 255;

        f1 = (float) $s5;

        $b6 = r0[2];

        $s7 = $b6 & 255;

        f2 = (float) $s7;

        $f7 = f2 - 128.0F;

        $f6 = 1.402F * $f7;

        f3 = f0 + $f6;

        $f9 = f1 - 128.0F;

        $f8 = 0.34414F * $f9;

        $f13 = f0 - $f8;

        $f11 = f2 - 128.0F;

        $f10 = 0.71414F * $f11;

        f4 = $f13 - $f10;

        $f12 = f1 - 128.0F;

        $f14 = 1.772F * $f12;

        f5 = f0 + $f14;

        $f16 = staticinvoke <java.lang.Math: float min(float,float)>(255.0F, f3);

        $f15 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f16);

        $i9 = (int) $f15;

        $b8 = (byte) $i9;

        r1[i0] = $b8;

        $i10 = i0 + 1;

        $f17 = staticinvoke <java.lang.Math: float min(float,float)>(255.0F, f4);

        $f18 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f17);

        $i11 = (int) $f18;

        $b12 = (byte) $i11;

        r1[$i10] = $b12;

        $i13 = i0 + 2;

        $f19 = staticinvoke <java.lang.Math: float min(float,float)>(255.0F, f5);

        $f20 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f19);

        $i14 = (int) $f20;

        $b15 = (byte) $i14;

        r1[$i13] = $b15;

        return;
    }

    private static void colorToRgb(int, int, byte[])
    {
        int i0, i1, $i2, $i4, $i5, $i7, $i8;
        byte[] r0;
        byte $b3, $b6, $b9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: byte[];

        $i2 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        $b3 = (byte) $i2;

        r0[i1] = $b3;

        $i4 = i1 + 1;

        $i5 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        $b6 = (byte) $i5;

        r0[$i4] = $b6;

        $i7 = i1 + 2;

        $i8 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        $b9 = (byte) $i8;

        r0[$i7] = $b9;

        return;
    }

    private static java.nio.ByteBuffer convertToRGB(android.media.Image)
    {
        android.media.Image r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i27, $i29;
        java.nio.ByteBuffer r1, r5, r6, r7;
        android.media.Image$Plane r2, r3, r4;
        byte[] r8, r9, r10, r11, r12, $r19;
        android.media.Image$Plane[] $r13, $r14, $r15;
        byte $b24, $b26, $b28;

        r0 := @parameter0: android.media.Image;

        i0 = virtualinvoke r0.<android.media.Image: int getWidth()>();

        i1 = virtualinvoke r0.<android.media.Image: int getHeight()>();

        $i12 = 3 * i0;

        $i13 = $i12 * i1;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i13);

        $r14 = virtualinvoke r0.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r2 = $r14[0];

        $r13 = virtualinvoke r0.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r3 = $r13[1];

        $r15 = virtualinvoke r0.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r4 = $r15[2];

        r5 = virtualinvoke r2.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        r6 = virtualinvoke r3.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        r7 = virtualinvoke r4.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        i2 = virtualinvoke r2.<android.media.Image$Plane: int getRowStride()>();

        i3 = virtualinvoke r4.<android.media.Image$Plane: int getRowStride()>();

        i4 = virtualinvoke r3.<android.media.Image$Plane: int getRowStride()>();

        i5 = virtualinvoke r2.<android.media.Image$Plane: int getPixelStride()>();

        i6 = virtualinvoke r4.<android.media.Image$Plane: int getPixelStride()>();

        i7 = virtualinvoke r3.<android.media.Image$Plane: int getPixelStride()>();

        $r19 = newarray (byte)[3];

        $r19[0] = 0;

        $r19[1] = 0;

        $r19[2] = 0;

        r9 = $r19;

        $i14 = i5 * i0;

        r8 = newarray (byte)[$i14];

        $i15 = i7 * i0;

        $i19 = $i15 / 2;

        r11 = newarray (byte)[$i19];

        $i18 = i6 * i0;

        $i17 = $i18 / 2;

        r10 = newarray (byte)[$i17];

        $i16 = 3 * i0;

        r12 = newarray (byte)[$i16];

        i8 = 0;

     label1:
        if i8 >= i1 goto label4;

        i10 = i8 / 2;

        $i21 = i2 * i8;

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i21);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r8);

        $i20 = i4 * i10;

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i20);

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r11);

        $i22 = i3 * i10;

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i22);

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r10);

        i9 = 0;

     label2:
        if i9 >= i0 goto label3;

        i11 = i9 / 2;

        $i27 = i5 * i9;

        $b28 = r8[$i27];

        r9[0] = $b28;

        $i23 = i7 * i11;

        $b24 = r11[$i23];

        r9[1] = $b24;

        $i25 = i6 * i11;

        $b26 = r10[$i25];

        r9[2] = $b26;

        $i29 = i9 * 3;

        staticinvoke <android.hardware.camera2.DngCreator: void yuvToRgb(byte[],int,byte[])>(r9, $i29, r12);

        i9 = i9 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r12);

        i8 = i8 + 1;

        goto label1;

     label4:
        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r7.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r1;
    }

    private static java.nio.ByteBuffer convertToRGB(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteBuffer r1;
        int[] r2;
        byte[] r3;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i4 = 3 * i0;

        $i5 = $i4 * i1;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i5);

        r2 = newarray (int)[i0];

        $i6 = 3 * i0;

        r3 = newarray (byte)[$i6];

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        virtualinvoke r0.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>(r2, 0, i0, 0, i2, i0, 1);

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $i7 = r2[i3];

        $i8 = i3 * 3;

        staticinvoke <android.hardware.camera2.DngCreator: void colorToRgb(int,int,byte[])>($i7, $i8, r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r3);

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r1;
    }

    private static int[] toExifLatLong(double)
    {
        double d0, $d1, $d2, $d3, $d4, d5, d6, d7;
        int i0, i1, i2;
        int[] $r0;

        d0 := @parameter0: double;

        d5 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        i0 = (int) d5;

        $d1 = (double) i0;

        $d2 = d5 - $d1;

        d6 = $d2 * 60.0;

        i1 = (int) d6;

        $d3 = (double) i1;

        $d4 = d6 - $d3;

        d7 = $d4 * 6000.0;

        i2 = (int) d7;

        $r0 = newarray (int)[6];

        $r0[0] = i0;

        $r0[1] = 1;

        $r0[2] = i1;

        $r0[3] = 1;

        $r0[4] = i2;

        $r0[5] = 100;

        return $r0;
    }

    private static native void nativeClassInit();

    private synchronized native void nativeInit(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.impl.CameraMetadataNative, java.lang.String);

    private synchronized native void nativeDestroy();

    private synchronized native void nativeSetOrientation(int);

    private synchronized native void nativeSetDescription(java.lang.String);

    private synchronized native void nativeSetGpsTags(int[], java.lang.String, int[], java.lang.String, java.lang.String, int[]);

    private synchronized native void nativeSetThumbnail(java.nio.ByteBuffer, int, int);

    private synchronized native void nativeWriteImage(java.io.OutputStream, int, int, java.nio.ByteBuffer, int, int, long, boolean) throws java.io.IOException;

    private synchronized native void nativeWriteInputStream(java.io.OutputStream, java.io.InputStream, int, int, long) throws java.io.IOException;

    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0, $r1;
        java.text.DateFormat $r2, $r4;
        java.util.TimeZone $r3, $r5;

        <android.hardware.camera2.DngCreator: int BYTES_PER_RGB_PIX> = 3;

        <android.hardware.camera2.DngCreator: int DEFAULT_PIXEL_STRIDE> = 2;

        <android.hardware.camera2.DngCreator: java.lang.String TIFF_DATETIME_FORMAT> = "yyyy:MM:dd kk:mm:ss";

        <android.hardware.camera2.DngCreator: java.lang.String GPS_DATE_FORMAT_STR> = "yyyy:MM:dd";

        <android.hardware.camera2.DngCreator: java.lang.String GPS_LONG_REF_WEST> = "W";

        <android.hardware.camera2.DngCreator: java.lang.String GPS_LONG_REF_EAST> = "E";

        <android.hardware.camera2.DngCreator: java.lang.String GPS_LAT_REF_SOUTH> = "S";

        <android.hardware.camera2.DngCreator: java.lang.String GPS_LAT_REF_NORTH> = "N";

        <android.hardware.camera2.DngCreator: int MAX_THUMBNAIL_DIMENSION> = 256;

        <android.hardware.camera2.DngCreator: java.lang.String TAG> = "DngCreator";

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy:MM:dd");

        <android.hardware.camera2.DngCreator: java.text.DateFormat sExifGPSDateStamp> = $r0;

        $r1 = new java.text.SimpleDateFormat;

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy:MM:dd kk:mm:ss");

        <android.hardware.camera2.DngCreator: java.text.DateFormat sDateTimeStampFormat> = $r1;

        $r2 = <android.hardware.camera2.DngCreator: java.text.DateFormat sDateTimeStampFormat>;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke $r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r3);

        $r4 = <android.hardware.camera2.DngCreator: java.text.DateFormat sExifGPSDateStamp>;

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r4.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        staticinvoke <android.hardware.camera2.DngCreator: void nativeClassInit()>();

        return;
    }
}
