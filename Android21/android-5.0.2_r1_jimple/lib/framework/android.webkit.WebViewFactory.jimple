public final class android.webkit.WebViewFactory extends java.lang.Object
{
    private static final java.lang.String CHROMIUM_WEBVIEW_FACTORY;
    private static final java.lang.String NULL_WEBVIEW_FACTORY;
    private static final java.lang.String CHROMIUM_WEBVIEW_NATIVE_RELRO_32;
    private static final java.lang.String CHROMIUM_WEBVIEW_NATIVE_RELRO_64;
    public static final java.lang.String CHROMIUM_WEBVIEW_VMSIZE_SIZE_PROPERTY;
    private static final long CHROMIUM_WEBVIEW_DEFAULT_VMSIZE_BYTES;
    private static final java.lang.String LOGTAG;
    private static final boolean DEBUG;
    private static android.webkit.WebViewFactoryProvider sProviderInstance;
    private static final java.lang.Object sProviderLock;
    private static boolean sAddressSpaceReserved;
    private static android.content.pm.PackageInfo sPackageInfo;

    public void <init>()
    {
        android.webkit.WebViewFactory r0;

        r0 := @this: android.webkit.WebViewFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getWebViewPackageName()
    {
        android.app.Application $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r1 = virtualinvoke $r0.<android.app.Application: java.lang.String getString(int)>(17039430);

        return $r1;
    }

    public static android.content.pm.PackageInfo getLoadedPackageInfo()
    {
        android.content.pm.PackageInfo $r0;

        $r0 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        return $r0;
    }

    static android.webkit.WebViewFactoryProvider getProvider()
    {
        java.lang.Object r0, $r7, $r9;
        java.lang.Class r1;
        java.lang.ClassNotFoundException r2, $r18;
        java.lang.Throwable r3, r4, r5, r6, $r12, $r13, $r14, $r16;
        android.webkit.WebViewFactoryProvider $r8, $r10, $r11, r21;
        java.lang.Exception $r15, r22;
        android.util.AndroidRuntimeException $r17, $r19;
        android.os.StrictMode$ThreadPolicy r20;

        $r7 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        r0 = $r7;

        entermonitor $r7;

     label01:
        $r8 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        if $r8 == null goto label03;

        $r11 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        exitmonitor r0;

     label02:
        return $r11;

     label03:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.getProvider()");

     label04:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.loadNativeLibrary()");

        staticinvoke <android.webkit.WebViewFactory: void loadNativeLibrary()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.getFactoryClass()");

     label05:
        r1 = staticinvoke <android.webkit.WebViewFactory: java.lang.Class getFactoryClass()>();

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        goto label10;

     label07:
        $r18 := @caughtexception;

        r2 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error loading provider", r2);

        $r19 = new android.util.AndroidRuntimeException;

        specialinvoke $r19.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>(r2);

        throw $r19;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        throw r3;

     label10:
        r20 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "providerClass.newInstance()");

     label11:
        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (android.webkit.WebViewFactoryProvider) $r9;

        <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance> = $r10;

        r21 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r20);

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        exitmonitor r0;

     label14:
        return r21;

     label15:
        $r15 := @caughtexception;

        r22 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error instantiating provider", r22);

        $r17 = new android.util.AndroidRuntimeException;

        specialinvoke $r17.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>(r22);

        throw $r17;

     label16:
        $r12 := @caughtexception;

        r4 = $r12;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r20);

        throw r4;

     label18:
        $r16 := @caughtexception;

        r5 = $r16;

     label19:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        throw r5;

     label20:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r0;

     label21:
        throw r6;

        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label15 to label17 with label16;
        catch java.lang.Throwable from label04 to label13 with label18;
        catch java.lang.Throwable from label15 to label19 with label18;
        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label14 with label20;
        catch java.lang.Throwable from label15 to label21 with label20;
    }

    private static java.lang.Class getFactoryClass() throws java.lang.ClassNotFoundException
    {
        android.app.Application r0;
        java.lang.String r1, $r14, $r18, $r22;
        android.content.Context r2;
        java.lang.ClassLoader r3;
        java.lang.Class r4, $r27;
        java.lang.Throwable r5, $r24;
        android.content.pm.PackageManager $r6;
        android.content.pm.PackageInfo $r7, $r12, $r15;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r19;
        int $i0;
        android.content.pm.ApplicationInfo $r20;
        android.content.res.AssetManager $r21;
        android.util.AndroidRuntimeException $r23;
        java.lang.ClassNotFoundException $r25;
        android.content.pm.PackageManager$NameNotFoundException $r26, r28;

        r0 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

     label01:
        r1 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewPackageName()>();

        $r6 = virtualinvoke r0.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        $r7 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

        <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $r12 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $r14 = $r12.<android.content.pm.PackageInfo: java.lang.String versionName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (code ");

        $r15 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $i0 = $r15.<android.content.pm.PackageInfo: int versionCode>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WebViewFactory", $r18);

        r2 = virtualinvoke r0.<android.app.Application: android.content.Context createPackageContext(java.lang.String,int)>(r1, 3);

        $r21 = virtualinvoke r0.<android.app.Application: android.content.res.AssetManager getAssets()>();

        $r20 = virtualinvoke r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r22 = $r20.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r21.<android.content.res.AssetManager: int addAssetPath(java.lang.String)>($r22);

        r3 = virtualinvoke r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "Class.forName()");

     label02:
        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.android.webview.chromium.WebViewChromiumFactoryProvider", 1, r3);

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label04:
        return r4;

     label05:
        $r24 := @caughtexception;

        r5 = $r24;

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        throw r5;

     label07:
        $r26 := @caughtexception;

        r28 = $r26;

     label08:
        $r27 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.android.webview.nullwebview.NullWebViewFactoryProvider");

     label09:
        return $r27;

     label10:
        $r25 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "Chromium WebView package does not exist", r28);

        $r23 = new android.util.AndroidRuntimeException;

        specialinvoke $r23.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>(r28);

        throw $r23;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label04 with label07;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label07 with label07;
        catch java.lang.ClassNotFoundException from label08 to label09 with label10;
    }

    public static void prepareWebViewInZygote()
    {
        long l0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, r6;

     label1:
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("webviewchromium_loader");

        l0 = staticinvoke <android.os.SystemProperties: long getLong(java.lang.String,long)>("persist.sys.webview.vmsize", 104857600L);

        $z0 = staticinvoke <android.webkit.WebViewFactory: boolean nativeReserveAddressSpace(long)>(l0);

        <android.webkit.WebViewFactory: boolean sAddressSpaceReserved> = $z0;

        $z1 = <android.webkit.WebViewFactory: boolean sAddressSpaceReserved>;

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reserving ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes of address space failed");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WebViewFactory", $r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error preparing native loader", r6);

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public static void prepareWebViewInSystemServer()
    {
        java.lang.String[] r0;
        java.lang.Throwable r1, $r2;

        r0 = null;

     label1:
        r0 = staticinvoke <android.webkit.WebViewFactory: java.lang.String[] getWebViewNativeLibraryPaths()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error preparing webview native library", r1);

     label4:
        staticinvoke <android.webkit.WebViewFactory: void prepareWebViewInSystemServer(java.lang.String[])>(r0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void prepareWebViewInSystemServer(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String[];

        $r1 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        staticinvoke <android.webkit.WebViewFactory: void createRelroFile(boolean,java.lang.String[])>(0, r0);

     label1:
        $r2 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i1 = lengthof $r2;

        if $i1 <= 0 goto label2;

        staticinvoke <android.webkit.WebViewFactory: void createRelroFile(boolean,java.lang.String[])>(1, r0);

     label2:
        return;
    }

    public static void onWebViewUpdateInstalled()
    {
        java.lang.String[] r0, r1;
        long l0, l3, $l4, l8;
        int i1, i2;
        java.lang.String r2, $r6, $r9;
        java.io.File r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r7;
        boolean $z0;
        java.lang.Throwable $r10, r11;
        byte $b6;

        r0 = null;

     label1:
        r0 = staticinvoke <android.webkit.WebViewFactory: java.lang.String[] getWebViewNativeLibraryPaths()>();

        if r0 == null goto label6;

        l0 = 0L;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        r2 = r1[i2];

        if r2 != null goto label3;

        goto label4;

     label3:
        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r2);

        r3 = $r8;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        l3 = virtualinvoke r3.<java.io.File: long length()>();

        $b6 = l3 cmp l0;

        if $b6 <= 0 goto label4;

        l0 = l3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $l4 = 2L * l0;

        l8 = staticinvoke <java.lang.Math: long max(long,long)>($l4, 104857600L);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting new address space to ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l8);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebViewFactory", $r6);

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l8);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.webview.vmsize", $r9);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        r11 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error preparing webview native library", r11);

     label8:
        staticinvoke <android.webkit.WebViewFactory: void prepareWebViewInSystemServer(java.lang.String[])>(r0);

        return;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    private static java.lang.String[] getWebViewNativeLibraryPaths() throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageManager r1;
        android.content.pm.ApplicationInfo r2;
        java.lang.String r3, r4, $r6, $r7, $r8;
        boolean z0, $z1, $z2, $z3;
        android.app.Application $r5;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15;
        java.lang.String[] $r10;

        $r5 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        r1 = virtualinvoke $r5.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        $r6 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewPackageName()>();

        r2 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r6, 0);

        $r7 = r2.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>($r7);

        $r8 = r2.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

        if $z1 != 0 goto label2;

        if z0 == 0 goto label1;

        r4 = r2.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        r3 = r2.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir>;

        goto label4;

     label1:
        r4 = r2.<android.content.pm.ApplicationInfo: java.lang.String secondaryNativeLibraryDir>;

        r3 = r2.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        goto label4;

     label2:
        if z0 == 0 goto label3;

        r4 = r2.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        r3 = "";

        goto label4;

     label3:
        r3 = r2.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        r4 = "";

     label4:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z2 != 0 goto label5;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/libwebviewchromium.so");

        r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z3 != 0 goto label6;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/libwebviewchromium.so");

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r10 = newarray (java.lang.String)[2];

        $r10[0] = r3;

        $r10[1] = r4;

        return $r10;
    }

    private static void createRelroFile(boolean, java.lang.String[])
    {
        boolean z0;
        java.lang.String[] r0, $r3, $r18;
        java.lang.String r1, $r6, $r7, $r11, $r14, $r17, $r22;
        android.webkit.WebViewFactory$1 r2, $r4;
        int i0;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r8;
        java.lang.Class $r9;
        android.app.ActivityManagerInternal $r10;
        java.lang.StringBuilder $r12, $r13, $r15, $r19, $r21, $r23;
        java.lang.Exception $r16;
        java.lang.Throwable $r20, r24;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String[];

        if z0 == 0 goto label1;

        $r18 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r17 = $r18[0];

        goto label2;

     label1:
        $r3 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r17 = $r3[0];

     label2:
        r1 = $r17;

        $r4 = new android.webkit.WebViewFactory$1;

        specialinvoke $r4.<android.webkit.WebViewFactory$1: void <init>(java.lang.String,boolean)>(r1, z0);

        r2 = $r4;

     label3:
        if r0 == null goto label4;

        $r6 = r0[0];

        if $r6 == null goto label4;

        $r7 = r0[1];

        if $r7 != null goto label5;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Native library paths to the WebView RelRo process must not be null!");

        throw $r5;

     label5:
        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/app/ActivityManagerInternal");

        $r10 = (android.app.ActivityManagerInternal) $r8;

        $r9 = class "android/webkit/WebViewFactory$RelroFileCreator";

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WebViewLoader-");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = virtualinvoke $r10.<android.app.ActivityManagerInternal: int startIsolatedProcess(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,int,java.lang.Runnable)>($r11, r0, $r14, r1, 1037, r2);

        if i0 > 0 goto label6;

        $r16 = new java.lang.Exception;

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>("Failed to start the relro file creator process");

        throw $r16;

     label6:
        goto label8;

     label7:
        $r20 := @caughtexception;

        r24 = $r20;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error starting relro file creator for abi ");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", $r22, r24);

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

     label8:
        return;

        catch java.lang.Throwable from label3 to label6 with label7;
    }

    private static void loadNativeLibrary()
    {
        android.os.RemoteException r0, $r5;
        boolean z0, $z1, $z2;
        android.webkit.IWebViewUpdateService $r1;
        dalvik.system.VMRuntime $r2;
        java.lang.String $r3, $r4;
        android.content.pm.PackageManager$NameNotFoundException $r6, r8;
        java.lang.String[] r7;

        $z1 = <android.webkit.WebViewFactory: boolean sAddressSpaceReserved>;

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WebViewFactory", "can\'t load with relro file; address space not reserved");

        return;

     label1:
        $r1 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()>();

        $r2 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z2 = virtualinvoke $r2.<dalvik.system.VMRuntime: boolean is64Bit()>();

        interfaceinvoke $r1.<android.webkit.IWebViewUpdateService: void waitForRelroCreationCompleted(boolean)>($z2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error waiting for relro creation, proceeding without", r0);

        return;

     label4:
        r7 = staticinvoke <android.webkit.WebViewFactory: java.lang.String[] getWebViewNativeLibraryPaths()>();

        $r4 = r7[0];

        $r3 = r7[1];

        z0 = staticinvoke <android.webkit.WebViewFactory: boolean nativeLoadWithRelroFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r4, $r3, "/data/misc/shared_relro/libwebviewchromium32.relro", "/data/misc/shared_relro/libwebviewchromium64.relro");

        if z0 != 0 goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WebViewFactory", "failed to load with relro file, proceeding without");

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        r8 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "Failed to list WebView package libraries for loadNativeLibrary", r8);

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label6;
    }

    private static android.webkit.IWebViewUpdateService getUpdateService()
    {
        android.os.IBinder $r0;
        android.webkit.IWebViewUpdateService $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("webviewupdate");

        $r1 = staticinvoke <android.webkit.IWebViewUpdateService$Stub: android.webkit.IWebViewUpdateService asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    private static native boolean nativeReserveAddressSpace(long);

    private static native boolean nativeCreateRelroFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    private static native boolean nativeLoadWithRelroFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

    static android.webkit.IWebViewUpdateService access$000()
    {
        android.webkit.IWebViewUpdateService $r0;

        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()>();

        return $r0;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <android.webkit.WebViewFactory: boolean sAddressSpaceReserved>;

        return $z0;
    }

    static boolean access$200(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.webkit.WebViewFactory: boolean nativeCreateRelroFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2, r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.webkit.WebViewFactory: boolean DEBUG> = 0;

        <android.webkit.WebViewFactory: java.lang.String LOGTAG> = "WebViewFactory";

        <android.webkit.WebViewFactory: long CHROMIUM_WEBVIEW_DEFAULT_VMSIZE_BYTES> = 104857600L;

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_VMSIZE_SIZE_PROPERTY> = "persist.sys.webview.vmsize";

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_NATIVE_RELRO_64> = "/data/misc/shared_relro/libwebviewchromium64.relro";

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_NATIVE_RELRO_32> = "/data/misc/shared_relro/libwebviewchromium32.relro";

        <android.webkit.WebViewFactory: java.lang.String NULL_WEBVIEW_FACTORY> = "com.android.webview.nullwebview.NullWebViewFactoryProvider";

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_FACTORY> = "com.android.webview.chromium.WebViewChromiumFactoryProvider";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.webkit.WebViewFactory: java.lang.Object sProviderLock> = $r0;

        <android.webkit.WebViewFactory: boolean sAddressSpaceReserved> = 0;

        return;
    }
}
