public final class android.database.sqlite.SQLiteConnection extends java.lang.Object implements android.os.CancellationSignal$OnCancelListener
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private static final java.util.regex.Pattern TRIM_SQL_PATTERN;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.database.sqlite.SQLiteConnectionPool mPool;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration;
    private final int mConnectionId;
    private final boolean mIsPrimaryConnection;
    private final boolean mIsReadOnlyConnection;
    private final android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache;
    private android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool;
    private final android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations;
    private long mConnectionPtr;
    private boolean mOnlyAllowReadOnlyOperations;
    private int mCancellationSignalAttachCount;
    static final boolean $assertionsDisabled;

    private static native long nativeOpen(java.lang.String, int, java.lang.String, boolean, boolean);

    private static native void nativeClose(long);

    private static native void nativeRegisterCustomFunction(long, android.database.sqlite.SQLiteCustomFunction);

    private static native void nativeRegisterLocalizedCollators(long, java.lang.String);

    private static native long nativePrepareStatement(long, java.lang.String);

    private static native void nativeFinalizeStatement(long, long);

    private static native int nativeGetParameterCount(long, long);

    private static native boolean nativeIsReadOnly(long, long);

    private static native int nativeGetColumnCount(long, long);

    private static native java.lang.String nativeGetColumnName(long, long, int);

    private static native void nativeBindNull(long, long, int);

    private static native void nativeBindLong(long, long, int, long);

    private static native void nativeBindDouble(long, long, int, double);

    private static native void nativeBindString(long, long, int, java.lang.String);

    private static native void nativeBindBlob(long, long, int, byte[]);

    private static native void nativeResetStatementAndClearBindings(long, long);

    private static native void nativeExecute(long, long);

    private static native long nativeExecuteForLong(long, long);

    private static native java.lang.String nativeExecuteForString(long, long);

    private static native int nativeExecuteForBlobFileDescriptor(long, long);

    private static native int nativeExecuteForChangedRowCount(long, long);

    private static native long nativeExecuteForLastInsertedRowId(long, long);

    private static native long nativeExecuteForCursorWindow(long, long, long, int, int, boolean);

    private static native int nativeGetDbLookaside(long);

    private static native void nativeCancel(long);

    private static native void nativeResetCancel(long, boolean);

    private void <init>(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnectionPool r1;
        android.database.sqlite.SQLiteDatabaseConfiguration r2, $r5, $r7;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1;
        dalvik.system.CloseGuard $r3, $r8;
        android.database.sqlite.SQLiteConnection$OperationLog $r4;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r6;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabaseConfiguration;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new android.database.sqlite.SQLiteConnection$OperationLog;

        specialinvoke $r4.<android.database.sqlite.SQLiteConnection$OperationLog: void <init>(android.database.sqlite.SQLiteConnection$1)>(null);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations> = $r4;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool> = r1;

        $r5 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(android.database.sqlite.SQLiteDatabaseConfiguration)>(r2);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration> = $r5;

        r0.<android.database.sqlite.SQLiteConnection: int mConnectionId> = i0;

        r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection> = z0;

        $i1 = r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection> = $z1;

        $r6 = new android.database.sqlite.SQLiteConnection$PreparedStatementCache;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i3 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        specialinvoke $r6.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void <init>(android.database.sqlite.SQLiteConnection,int)>(r0, $i3);

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache> = $r6;

        $r8 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.Throwable r1, $r4;
        android.database.sqlite.SQLiteConnectionPool $r2, $r3;
        long $l0;
        byte $b1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

     label1:
        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool>;

        if $r2 == null goto label2;

        $l0 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnectionPool mPool>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()>();

     label2:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(1);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static android.database.sqlite.SQLiteConnection open(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)
    {
        android.database.sqlite.SQLiteConnectionPool r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1;
        int i0;
        boolean z0;
        android.database.sqlite.SQLiteConnection r2, $r4;
        android.database.sqlite.SQLiteException r3, $r5;

        r0 := @parameter0: android.database.sqlite.SQLiteConnectionPool;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabaseConfiguration;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = new android.database.sqlite.SQLiteConnection;

        specialinvoke $r4.<android.database.sqlite.SQLiteConnection: void <init>(android.database.sqlite.SQLiteConnectionPool,android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)>(r0, r1, i0, z0);

        r2 = $r4;

     label1:
        specialinvoke r2.<android.database.sqlite.SQLiteConnection: void open()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        specialinvoke r2.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        throw r3;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    void close()
    {
        android.database.sqlite.SQLiteConnection r0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void dispose(boolean)>(0);

        return;
    }

    private void open()
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteCustomFunction r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2, $r3, $r4, $r7, $r10;
        boolean $z0, $z1;
        java.lang.String $r5, $r6;
        long $l3, $l4;
        java.util.ArrayList $r8, $r9;
        java.lang.Object $r11;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i2 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r5 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $z1 = <android.database.sqlite.SQLiteDebug: boolean DEBUG_SQL_STATEMENTS>;

        $z0 = <android.database.sqlite.SQLiteDebug: boolean DEBUG_SQL_TIME>;

        $l3 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeOpen(java.lang.String,int,java.lang.String,boolean,boolean)>($r6, $i2, $r5, $z1, $z0);

        r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr> = $l3;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setPageSize()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalSizeLimit()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setAutoCheckpointInterval()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r8 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r9 = $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        $r11 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (android.database.sqlite.SQLiteCustomFunction) $r11;

        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterCustomFunction(long,android.database.sqlite.SQLiteCustomFunction)>($l4, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean z0;
        int i0;
        java.lang.Throwable r1, $r8;
        dalvik.system.CloseGuard $r2, $r6, $r7;
        long $l1, $l3;
        byte $b2;
        android.database.sqlite.SQLiteConnection$OperationLog $r3, $r5, $r9;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        if z0 == 0 goto label1;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $r6 = r0.<android.database.sqlite.SQLiteConnection: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void close()>();

     label2:
        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label7;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("close", null, null);

     label3:
        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void evictAll()>();

        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeClose(long)>($l3);

        r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr> = 0L;

     label4:
        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        goto label7;

     label5:
        $r8 := @caughtexception;

        r1 = $r8;

     label6:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r1;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setPageSize()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0, $z1;
        int $i2;
        byte $b3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>();

        l0 = (long) $i2;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_size", null, null);

        $b3 = l1 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r5, null, null);

     label1:
        return;
    }

    private void setAutoCheckpointInterval()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0, $z1;
        int $i2;
        byte $b3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>();

        l0 = (long) $i2;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA wal_autocheckpoint", null, null);

        $b3 = l1 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA wal_autocheckpoint=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r5, null, null);

     label1:
        return;
    }

    private void setJournalSizeLimit()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        boolean $z0, $z1;
        int $i2;
        byte $b3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label1;

        $i2 = staticinvoke <android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>();

        l0 = (long) $i2;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA journal_size_limit", null, null);

        $b3 = l1 cmp l0;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_size_limit=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r5, null, null);

     label1:
        return;
    }

    private void setForeignKeyModeFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        long l0, l1, $l3;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        byte $b2;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z0 != 0 goto label3;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z1 == 0 goto label1;

        $l3 = 1L;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        l0 = $l3;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA foreign_keys", null, null);

        $b2 = l1 cmp l0;

        if $b2 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_keys=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r5, null, null);

     label3:
        return;
    }

    private void setWalModeFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1, $r2;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 != 0 goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>("WAL");

        $r5 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r5);

        goto label2;

     label1:
        $r3 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)>($r3);

        $r4 = staticinvoke <android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>();

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)>($r4);

     label2:
        return;
    }

    private void setSyncMode(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, r2, $r3, $r4, $r8;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA synchronous", null, null);

        $r3 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>(r2);

        $r4 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA synchronous=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r8, null, null);

     label1:
        return;
    }

    private static java.lang.String canonicalizeSyncMode(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z0 == 0 goto label1;

        return "OFF";

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 == 0 goto label2;

        return "NORMAL";

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("2");

        if $z2 == 0 goto label3;

        return "FULL";

     label3:
        return r0;
    }

    private void setJournalMode(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, r2, r3, $r7, $r12, $r21;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        android.database.sqlite.SQLiteDatabaseConfiguration $r10;
        android.database.sqlite.SQLiteDatabaseLockedException $r22;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA journal_mode", null, null);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 != 0 goto label6;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA journal_mode=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r7, null, null);

        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

     label2:
        return;

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not change the database journal mode of \'");

        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r12 = $r10.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from \'");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' because the database is locked.  This usually means that ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("there are other open connections to the database which prevents ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the database from enabling or disabling write-ahead logging mode.  ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proceeding without changing the journal mode.");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SQLiteConnection", $r21);

     label6:
        return;

        catch android.database.sqlite.SQLiteDatabaseLockedException from label1 to label2 with label4;
    }

    private void setLocaleFromConfiguration()
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, r2, $r8, $r11, $r17, $r20;
        boolean z0, $z1, $z2, z3;
        java.lang.Throwable r3, $r9;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r5, $r14;
        int $i0, $i1;
        java.util.Locale $r6;
        long $l2;
        java.lang.Object[] $r7;
        java.lang.RuntimeException $r10, r22;
        java.lang.StringBuilder $r12, $r15, $r16, $r18, $r19, $r21;
        android.database.sqlite.SQLiteException $r13;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i0 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label01;

        return;

     label01:
        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        r1 = virtualinvoke $r6.<java.util.Locale: java.lang.String toString()>();

        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterLocalizedCollators(long,java.lang.String)>($l2, r1);

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsReadOnlyConnection>;

        if $z1 == 0 goto label02;

        return;

     label02:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)", null, null);

        r2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1", null, null);

        if r2 == null goto label04;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label04;

     label03:
        return;

     label04:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("BEGIN", null, null);

        z0 = 0;

     label05:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("DELETE FROM android_metadata", null, null);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("INSERT INTO android_metadata (locale) VALUES(?)", $r7, null);

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("REINDEX LOCALIZED", null, null);

        z3 = 1;

     label06:
        if z3 == 0 goto label07;

        $r8 = "COMMIT";

        goto label08;

     label07:
        $r8 = "ROLLBACK";

     label08:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r8, null, null);

        goto label13;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

     label10:
        if z0 == 0 goto label11;

        $r11 = "COMMIT";

        goto label12;

     label11:
        $r11 = "ROLLBACK";

     label12:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r11, null, null);

        throw r3;

     label13:
        goto label15;

     label14:
        $r10 := @caughtexception;

        r22 = $r10;

        $r13 = new android.database.sqlite.SQLiteException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to change locale for db \'");

        $r14 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r17 = $r14.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r22);

        throw $r13;

     label15:
        return;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.RuntimeException from label02 to label03 with label14;
        catch java.lang.RuntimeException from label04 to label13 with label14;
    }

    void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteDatabaseConfiguration r1, $r4, $r5, $r7, $r9, $r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.database.sqlite.SQLiteCustomFunction r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        java.util.ArrayList $r3, $r12, $r13;
        java.util.Locale $r6, $r8;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r10;
        java.lang.Object $r11;
        long $l7;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabaseConfiguration;

        r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = 0;

        $r3 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        $r12 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.database.sqlite.SQLiteCustomFunction) $r11;

        $r14 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r13 = $r14.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        $z7 = virtualinvoke $r13.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        if $z7 != 0 goto label02;

        $l7 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeRegisterCustomFunction(long,android.database.sqlite.SQLiteCustomFunction)>($l7, r2);

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        $z2 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z1 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z2 == $z1 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        z8 = $z5;

        $i3 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $i2 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i4 = $i3 ^ $i2;

        $i5 = $i4 & 536870912;

        if $i5 == 0 goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        z9 = $z6;

        $r8 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r6 = $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $z3 = virtualinvoke $r8.<java.util.Locale: boolean equals(java.lang.Object)>($r6);

        if $z3 != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        z0 = $z4;

        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)>(r1);

        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i6 = r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void resize(int)>($i6);

        if z8 == 0 goto label10;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()>();

     label10:
        if z9 == 0 goto label11;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()>();

     label11:
        if z0 == 0 goto label12;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()>();

     label12:
        return;
    }

    void setOnlyAllowReadOnlyOperations(boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations> = z0;

        return;
    }

    boolean isPreparedStatementInCache(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getConnectionId()
    {
        android.database.sqlite.SQLiteConnection r0;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        return $i0;
    }

    public boolean isPrimaryConnection()
    {
        android.database.sqlite.SQLiteConnection r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        return $z0;
    }

    public void prepare(java.lang.String, android.database.sqlite.SQLiteStatementInfo)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, $r11;
        android.database.sqlite.SQLiteStatementInfo r2;
        int i0, i1, i2, $i3;
        android.database.sqlite.SQLiteConnection$PreparedStatement r3;
        java.lang.Throwable r4, r5, $r14, $r17;
        android.database.sqlite.SQLiteConnection$OperationLog $r6, $r7, $r15, $r16;
        boolean $z0;
        long $l4, $l5, $l6, $l7;
        java.lang.String[] $r8, $r9, $r10;
        java.lang.RuntimeException $r12, r18;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.database.sqlite.SQLiteStatementInfo;

        if r1 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r13;

     label01:
        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("prepare", r1, null);

     label02:
        r3 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        if r2 == null goto label06;

        $i3 = r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        r2.<android.database.sqlite.SQLiteStatementInfo: int numParameters> = $i3;

        $z0 = r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        r2.<android.database.sqlite.SQLiteStatementInfo: boolean readOnly> = $z0;

        $l5 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l4 = r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetColumnCount(long,long)>($l5, $l4);

        if i1 != 0 goto label04;

        $r10 = <android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY>;

        r2.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r10;

        goto label06;

     label04:
        $r8 = newarray (java.lang.String)[i1];

        r2.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames> = $r8;

        i2 = 0;

     label05:
        if i2 >= i1 goto label06;

        $r9 = r2.<android.database.sqlite.SQLiteStatementInfo: java.lang.String[] columnNames>;

        $l7 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l6 = r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $r11 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String nativeGetColumnName(long,long,int)>($l7, $l6, i2);

        $r9[i2] = $r11;

        i2 = i2 + 1;

        goto label05;

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

        goto label09;

     label07:
        $r14 := @caughtexception;

        r4 = $r14;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r3);

        throw r4;

     label09:
        $r7 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        goto label13;

     label10:
        $r12 := @caughtexception;

        r18 = $r12;

        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r18);

        throw r18;

     label11:
        $r17 := @caughtexception;

        r5 = $r17;

     label12:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r5;

     label13:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.RuntimeException from label02 to label09 with label10;
        catch java.lang.Throwable from label02 to label09 with label11;
        catch java.lang.Throwable from label10 to label12 with label11;
    }

    public void execute(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        java.lang.Throwable r5, r6, r7, $r11, $r12, $r15;
        android.database.sqlite.SQLiteConnection$OperationLog $r8, $r9, $r14, $r16;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r10;
        java.lang.RuntimeException $r13, r17;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r10;

     label01:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("execute", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeExecute(long,long)>($l2, $l1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        goto label08;

     label06:
        $r12 := @caughtexception;

        r5 = $r12;

     label07:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r5;

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        goto label11;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

     label10:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r6;

     label11:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        goto label15;

     label12:
        $r13 := @caughtexception;

        r17 = $r13;

        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r17);

        throw r17;

     label13:
        $r11 := @caughtexception;

        r7 = $r11;

     label14:
        $r14 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r14.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r7;

     label15:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.RuntimeException from label02 to label11 with label12;
        catch java.lang.Throwable from label02 to label11 with label13;
        catch java.lang.Throwable from label12 to label14 with label13;
    }

    public long executeForLong(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        long l1, $l2, $l3;
        java.lang.Throwable r5, r6, r7, $r10, $r14, $r16;
        android.database.sqlite.SQLiteConnection$OperationLog $r8, $r9, $r13, $r15;
        java.lang.IllegalArgumentException $r11;
        java.lang.RuntimeException $r12, r17;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r11;

     label01:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLong", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        l1 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForLong(long,long)>($l3, $l2);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

     label07:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return l1;

     label08:
        $r14 := @caughtexception;

        r5 = $r14;

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r5;

     label10:
        $r16 := @caughtexception;

        r6 = $r16;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r6;

     label12:
        $r12 := @caughtexception;

        r17 = $r12;

        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r17);

        throw r17;

     label13:
        $r10 := @caughtexception;

        r7 = $r10;

     label14:
        $r13 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r13.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r7;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
        catch java.lang.RuntimeException from label02 to label07 with label12;
        catch java.lang.RuntimeException from label08 to label12 with label12;
        catch java.lang.Throwable from label02 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public java.lang.String executeForString(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, r5;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        java.lang.Throwable r6, r7, r8, $r12, $r13, $r14;
        android.database.sqlite.SQLiteConnection$OperationLog $r9, $r11, $r15, $r16;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r10;
        java.lang.RuntimeException $r17, r18;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r10;

     label01:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForString", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l2 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l1 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        r5 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String nativeExecuteForString(long,long)>($l2, $l1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

     label07:
        $r11 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return r5;

     label08:
        $r14 := @caughtexception;

        r6 = $r14;

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r6;

     label10:
        $r13 := @caughtexception;

        r7 = $r13;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r7;

     label12:
        $r17 := @caughtexception;

        r18 = $r17;

        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r18);

        throw r18;

     label13:
        $r12 := @caughtexception;

        r8 = $r12;

     label14:
        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r8;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
        catch java.lang.RuntimeException from label02 to label07 with label12;
        catch java.lang.RuntimeException from label08 to label12 with label12;
        catch java.lang.Throwable from label02 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0, i1;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        android.os.ParcelFileDescriptor r5, $r12;
        java.lang.Throwable r6, r7, r8, $r13, $r14, $r17;
        android.database.sqlite.SQLiteConnection$OperationLog $r9, $r10, $r16, $r18;
        long $l2, $l3;
        java.lang.IllegalArgumentException $r11;
        java.lang.RuntimeException $r15, r19;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r11;

     label01:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForBlobFileDescriptor", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeExecuteForBlobFileDescriptor(long,long)>($l3, $l2);

        if i1 < 0 goto label05;

        $r12 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>(i1);

        goto label06;

     label05:
        $r12 = null;

     label06:
        r5 = $r12;

     label07:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

     label09:
        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r10.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return r5;

     label10:
        $r14 := @caughtexception;

        r6 = $r14;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r6;

     label12:
        $r17 := @caughtexception;

        r7 = $r17;

     label13:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r7;

     label14:
        $r15 := @caughtexception;

        r19 = $r15;

        $r18 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r18.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r19);

        throw r19;

     label15:
        $r13 := @caughtexception;

        r8 = $r13;

     label16:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r8;

        catch java.lang.Throwable from label04 to label07 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label03 to label08 with label12;
        catch java.lang.Throwable from label10 to label13 with label12;
        catch java.lang.RuntimeException from label02 to label09 with label14;
        catch java.lang.RuntimeException from label10 to label14 with label14;
        catch java.lang.Throwable from label02 to label09 with label15;
        catch java.lang.Throwable from label10 to label16 with label15;
    }

    public int executeForChangedRowCount(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, $r13, $r25;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0, i1, i2;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        java.lang.Throwable r5, r6, r7, $r15, $r18, $r22;
        android.database.sqlite.SQLiteConnection$OperationLog $r8, $r9, $r12, $r17, $r21, $r26;
        long $l3, $l4;
        java.lang.StringBuilder $r10, $r11, $r14, $r19, $r20, $r24;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r16;
        java.lang.RuntimeException $r23, r27;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r16;

     label01:
        i0 = 0;

        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i1 = virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForChangedRowCount", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l3 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i0 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeExecuteForChangedRowCount(long,long)>($l4, $l3);

        i2 = i0;

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

     label07:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z0 = virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i1);

        if $z0 == 0 goto label08;

        $r12 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i1, $r13);

     label08:
        return i2;

     label09:
        $r22 := @caughtexception;

        r5 = $r22;

     label10:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r5;

     label11:
        $r15 := @caughtexception;

        r6 = $r15;

     label12:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r6;

     label13:
        $r23 := @caughtexception;

        r27 = $r23;

        $r26 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r26.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i1, r27);

        throw r27;

     label14:
        $r18 := @caughtexception;

        r7 = $r18;

     label15:
        $r17 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z1 = virtualinvoke $r17.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i1);

        if $z1 == 0 goto label16;

        $r21 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changedRows=");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i1, $r25);

     label16:
        throw r7;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
        catch java.lang.RuntimeException from label02 to label07 with label13;
        catch java.lang.RuntimeException from label09 to label13 with label13;
        catch java.lang.Throwable from label02 to label07 with label14;
        catch java.lang.Throwable from label09 to label15 with label14;
    }

    public long executeForLastInsertedRowId(java.lang.String, java.lang.Object[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        android.os.CancellationSignal r3;
        int i0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r4;
        long l1, $l2, $l3;
        java.lang.Throwable r5, r6, r7, $r12, $r14, $r15;
        android.database.sqlite.SQLiteConnection$OperationLog $r8, $r9, $r13, $r16;
        java.lang.RuntimeException $r10, r17;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r11;

     label01:
        $r8 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i0 = virtualinvoke $r8.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForLastInsertedRowId", r1, r2);

     label02:
        r4 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r4, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r3);

     label04:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l2 = r4.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        l1 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForLastInsertedRowId(long,long)>($l3, $l2);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

     label06:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

     label07:
        $r9 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        return l1;

     label08:
        $r12 := @caughtexception;

        r5 = $r12;

     label09:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r3);

        throw r5;

     label10:
        $r15 := @caughtexception;

        r6 = $r15;

     label11:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r4);

        throw r6;

     label12:
        $r10 := @caughtexception;

        r17 = $r10;

        $r13 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r13.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i0, r17);

        throw r17;

     label13:
        $r14 := @caughtexception;

        r7 = $r14;

     label14:
        $r16 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r16.<android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)>(i0);

        throw r7;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
        catch java.lang.RuntimeException from label02 to label07 with label12;
        catch java.lang.RuntimeException from label08 to label12 with label12;
        catch java.lang.Throwable from label02 to label07 with label13;
        catch java.lang.Throwable from label08 to label14 with label13;
    }

    public int executeForCursorWindow(java.lang.String, java.lang.Object[], android.database.CursorWindow, int, int, boolean, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1, $r22, $r45;
        java.lang.Object[] r2;
        android.database.CursorWindow r3;
        int i0, i1, i2, i3, i4, i5, i7;
        boolean z0, $z1, $z2;
        android.os.CancellationSignal r4;
        android.database.sqlite.SQLiteConnection$PreparedStatement r5;
        long l6, $l8, $l9, $l10, $l11;
        java.lang.Throwable r6, r7, r8, r9, $r30, $r31, $r32, $r46;
        android.database.sqlite.SQLiteConnection$OperationLog $r10, $r11, $r15, $r26, $r29, $r34;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r33, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        java.lang.RuntimeException $r25, r47;
        java.lang.IllegalArgumentException $r27, $r28;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: android.database.CursorWindow;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        r4 := @parameter6: android.os.CancellationSignal;

        if r1 != null goto label01;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sql must not be null.");

        throw $r28;

     label01:
        if r3 != null goto label02;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("window must not be null.");

        throw $r27;

     label02:
        virtualinvoke r3.<android.database.CursorWindow: void acquireReference()>();

     label03:
        i2 = -1;

        i3 = -1;

        i4 = -1;

        $r10 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        i5 = virtualinvoke $r10.<android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])>("executeForCursorWindow", r1, r2);

     label04:
        r5 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)>(r1);

     label05:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r5);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])>(r5, r2);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r5);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.os.CancellationSignal)>(r4);

     label06:
        $l9 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l10 = r5.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        $l8 = r3.<android.database.CursorWindow: long mWindowPtr>;

        l6 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativeExecuteForCursorWindow(long,long,long,int,int,boolean)>($l9, $l10, $l8, i0, i1, z0);

        $l11 = l6 >> 32;

        i2 = (int) $l11;

        i3 = (int) l6;

        i4 = virtualinvoke r3.<android.database.CursorWindow: int getNumRows()>();

        virtualinvoke r3.<android.database.CursorWindow: void setStartPosition(int)>(i2);

        i7 = i3;

     label07:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r4);

     label08:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r5);

     label09:
        $r11 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z1 = virtualinvoke $r11.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i5);

        if $z1 == 0 goto label10;

        $r15 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i5, $r22);

     label10:
        virtualinvoke r3.<android.database.CursorWindow: void releaseReference()>();

        return i7;

     label11:
        $r46 := @caughtexception;

        r7 = $r46;

     label12:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.os.CancellationSignal)>(r4);

        throw r7;

     label13:
        $r31 := @caughtexception;

        r6 = $r31;

     label14:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r5);

        throw r6;

     label15:
        $r25 := @caughtexception;

        r47 = $r25;

        $r26 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r26.<android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)>(i5, r47);

        throw r47;

     label16:
        $r30 := @caughtexception;

        r9 = $r30;

     label17:
        $r29 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $z2 = virtualinvoke $r29.<android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)>(i5);

        if $z2 == 0 goto label18;

        $r34 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("window=\'");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', startPos=");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actualPos=");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filledRows=");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", countedRows=");

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)>(i5, $r45);

     label18:
        throw r9;

     label19:
        $r32 := @caughtexception;

        r8 = $r32;

     label20:
        virtualinvoke r3.<android.database.CursorWindow: void releaseReference()>();

        throw r8;

        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label05 to label08 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
        catch java.lang.RuntimeException from label04 to label09 with label15;
        catch java.lang.RuntimeException from label11 to label15 with label15;
        catch java.lang.Throwable from label04 to label09 with label16;
        catch java.lang.Throwable from label11 to label17 with label16;
        catch java.lang.Throwable from label03 to label10 with label19;
        catch java.lang.Throwable from label11 to label20 with label19;
    }

    private android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteConnection$PreparedStatement r2;
        boolean z0, z1, $z2, $z3, $z4;
        long l0, $l3, $l4, $l5, $l6;
        int i1, i2;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r3, $r6;
        java.lang.Object $r4;
        java.lang.RuntimeException $r7, r8;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.database.sqlite.SQLiteConnection$PreparedStatement) $r4;

        z0 = 0;

        if r2 == null goto label2;

        $z3 = r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse>;

        if $z3 != 0 goto label1;

        return r2;

     label1:
        z0 = 1;

     label2:
        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        l0 = staticinvoke <android.database.sqlite.SQLiteConnection: long nativePrepareStatement(long,java.lang.String)>($l3, r1);

     label3:
        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        i1 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetParameterCount(long,long)>($l4, l0);

        i2 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r1);

        $l5 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        z1 = staticinvoke <android.database.sqlite.SQLiteConnection: boolean nativeIsReadOnly(long,long)>($l5, l0);

        r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,long,int,int,boolean)>(r1, l0, i1, i2, z1);

        if z0 != 0 goto label4;

        $z2 = staticinvoke <android.database.sqlite.SQLiteConnection: boolean isCacheable(int)>(i2);

        if $z2 == 0 goto label4;

        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 1;

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

        r8 = $r7;

        if r2 == null goto label6;

        $z4 = r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if $z4 != 0 goto label7;

     label6:
        $l6 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l6, l0);

     label7:
        throw r8;

     label8:
        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 1;

        return r2;

        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    private void releasePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        boolean $z0;
        long $l0, $l1;
        android.database.sqlite.SQLiteException $r3;
        java.lang.String $r4;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r5;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInUse> = 0;

        $z0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache>;

        if $z0 == 0 goto label4;

     label1:
        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetStatementAndClearBindings(long,long)>($l1, $l0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $r4 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: java.lang.Object remove(java.lang.Object)>($r4);

        goto label5;

     label4:
        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

     label5:
        return;

        catch android.database.sqlite.SQLiteException from label1 to label2 with label3;
    }

    private void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        long $l0, $l1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $l0 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)>($l1, $l0);

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void recyclePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

        return;
    }

    private void attachCancellationSignal(android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.os.CancellationSignal;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.CancellationSignal: void throwIfCanceled()>();

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        $i1 = $i0 + 1;

        r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = $i1;

        $i2 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i2 != 1 goto label1;

        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l3, 1);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(r0);

     label1:
        return;
    }

    private void detachCancellationSignal(android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.os.CancellationSignal r1;
        boolean $z0;
        int $i0, $i1, $i2, $i4;
        long $l3;
        java.lang.AssertionError $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.os.CancellationSignal;

        if r1 == null goto label2;

        $z0 = <android.database.sqlite.SQLiteConnection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i4 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        $i1 = $i0 - 1;

        r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount> = $i1;

        $i2 = r0.<android.database.sqlite.SQLiteConnection: int mCancellationSignalAttachCount>;

        if $i2 != 0 goto label2;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

        $l3 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)>($l3, 0);

     label2:
        return;
    }

    public void onCancel()
    {
        android.database.sqlite.SQLiteConnection r0;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $l0 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeCancel(long)>($l0);

        return;
    }

    private void bindArguments(android.database.sqlite.SQLiteConnection$PreparedStatement, java.lang.Object[])
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        java.lang.Object[] r2;
        int i0, i2, $i3, $i4, $i5, $i7, $i10, $i13, $i15, $i17, $i19, $i20;
        long l1, $l6, $l8, $l9, $l11, $l12, $l14, $l16, $l18;
        java.lang.Object r3;
        byte[] $r4, $r5;
        java.lang.Number $r6, $r7;
        double $d0;
        boolean $z0, $z1;
        java.lang.String $r8, $r17;
        java.lang.Boolean $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16;
        android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException $r12;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r2 := @parameter1: java.lang.Object[];

        if r2 == null goto label01;

        $i20 = lengthof r2;

        goto label02;

     label01:
        $i20 = 0;

     label02:
        i0 = $i20;

        $i3 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        if i0 == $i3 goto label03;

        $r12 = new android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $i19 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bind arguments but ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were provided.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label03:
        if i0 != 0 goto label04;

        return;

     label04:
        l1 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr>;

        i2 = 0;

     label05:
        if i2 >= i0 goto label15;

        r3 = r2[i2];

        $i4 = staticinvoke <android.database.DatabaseUtils: int getTypeOfObject(java.lang.Object)>(r3);

        tableswitch($i4)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label10;
            case 4: goto label09;
            default: goto label10;
        };

     label06:
        $l6 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i5 = i2 + 1;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindNull(long,long,int)>($l6, l1, $i5);

        goto label14;

     label07:
        $l11 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i13 = i2 + 1;

        $r7 = (java.lang.Number) r3;

        $l12 = virtualinvoke $r7.<java.lang.Number: long longValue()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>($l11, l1, $i13, $l12);

        goto label14;

     label08:
        $l9 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i10 = i2 + 1;

        $r6 = (java.lang.Number) r3;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindDouble(long,long,int,double)>($l9, l1, $i10, $d0);

        goto label14;

     label09:
        $l8 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i7 = i2 + 1;

        $r4 = (byte[]) r3;

        $r5 = (byte[]) $r4;

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindBlob(long,long,int,byte[])>($l8, l1, $i7, $r5);

        goto label14;

     label10:
        $z0 = r3 instanceof java.lang.Boolean;

        if $z0 == 0 goto label13;

        $l16 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i17 = i2 + 1;

        $r9 = (java.lang.Boolean) r3;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label11;

        $l18 = 1L;

        goto label12;

     label11:
        $l18 = 0L;

     label12:
        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)>($l16, l1, $i17, $l18);

        goto label14;

     label13:
        $l14 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $i15 = i2 + 1;

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <android.database.sqlite.SQLiteConnection: void nativeBindString(long,long,int,java.lang.String)>($l14, l1, $i15, $r8);

     label14:
        i2 = i2 + 1;

        goto label05;

     label15:
        return;
    }

    private void throwIfStatementForbidden(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteException $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        if $z0 == 0 goto label1;

        $z1 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z1 != 0 goto label1;

        $r2 = new android.database.sqlite.SQLiteException;

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>("Cannot execute this statement because it might modify the database but the connection is read-only.");

        throw $r2;

     label1:
        return;
    }

    private static boolean isCacheable(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 2 goto label1;

        if i0 != 1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void applyBlockGuardPolicy(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0, $z1;
        dalvik.system.BlockGuard$Policy $r3, $r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z0 != 0 goto label2;

        $z1 = r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly>;

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r4.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        goto label2;

     label1:
        $r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r3.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

     label2:
        return;
    }

    public void dump(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.util.Printer r1;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)>(r1, z0);

        return;
    }

    void dumpUnsafe(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.util.Printer r1;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r18, $r19;
        int $i0;
        java.lang.String $r6, $r10, $r15, $r20, $r21;
        android.database.sqlite.SQLiteConnection$OperationLog $r14;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r17;
        long $l1;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection #");

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r6);

        if z0 == 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  connectionPtr: 0x");

        $l1 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        $r20 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r21);

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isPrimaryConnection: ");

        $z1 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  onlyAllowReadOnlyOperations: ");

        $z2 = r0.<android.database.sqlite.SQLiteConnection: boolean mOnlyAllowReadOnlyOperations>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r15);

        $r14 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        virtualinvoke $r14.<android.database.sqlite.SQLiteConnection$OperationLog: void dump(android.util.Printer,boolean)>(r1, z0);

        if z0 == 0 goto label2;

        $r17 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        virtualinvoke $r17.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: void dump(android.util.Printer)>(r1);

     label2:
        return;
    }

    java.lang.String describeCurrentOperationUnsafe()
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$OperationLog $r1;
        java.lang.String $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$OperationLog mRecentOperations>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteConnection$OperationLog: java.lang.String describeCurrentOperation()>();

        return $r2;
    }

    void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.util.ArrayList r1;
        int i0, i3, $i5;
        long l1, l2, $l4, l7, l8;
        java.lang.String r3, r4, $r13, $r16, r32;
        java.lang.Throwable r6, $r30;
        android.database.sqlite.SQLiteDebug$DbStats $r7, $r23;
        android.database.CursorWindow $r8, r31;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26;
        boolean $z2;
        android.database.sqlite.SQLiteException $r27, $r28, $r29;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.util.ArrayList;

        $l4 = r0.<android.database.sqlite.SQLiteConnection: long mConnectionPtr>;

        i0 = staticinvoke <android.database.sqlite.SQLiteConnection: int nativeGetDbLookaside(long)>($l4);

        l1 = 0L;

        l2 = 0L;

     label01:
        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_count;", null, null);

        l2 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>("PRAGMA page_size;", null, null);

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

     label04:
        $r7 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>(i0, l1, l2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r8 = new android.database.CursorWindow;

        specialinvoke $r8.<android.database.CursorWindow: void <init>(java.lang.String)>("collectDbStats");

        r31 = $r8;

     label05:
        virtualinvoke r0.<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)>("PRAGMA database_list;", null, r31, 0, 0, 0, null);

        i3 = 1;

     label06:
        $i5 = virtualinvoke r31.<android.database.CursorWindow: int getNumRows()>();

        if i3 >= $i5 goto label12;

        r3 = virtualinvoke r31.<android.database.CursorWindow: java.lang.String getString(int,int)>(i3, 1);

        r4 = virtualinvoke r31.<android.database.CursorWindow: java.lang.String getString(int,int)>(i3, 2);

        l7 = 0L;

        l8 = 0L;

     label07:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_count;");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        l7 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r13, null, null);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".page_size;");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        l8 = virtualinvoke r0.<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)>($r16, null, null);

     label08:
        goto label10;

     label09:
        $r29 := @caughtexception;

     label10:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  (attached) ");

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r32 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r32 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $r23 = new android.database.sqlite.SQLiteDebug$DbStats;

        specialinvoke $r23.<android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>(r32, l7, l8, 0, 0, 0, 0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        i3 = i3 + 1;

        goto label06;

     label12:
        virtualinvoke r31.<android.database.CursorWindow: void close()>();

        goto label17;

     label13:
        $r27 := @caughtexception;

     label14:
        virtualinvoke r31.<android.database.CursorWindow: void close()>();

        goto label17;

     label15:
        $r30 := @caughtexception;

        r6 = $r30;

     label16:
        virtualinvoke r31.<android.database.CursorWindow: void close()>();

        throw r6;

     label17:
        return;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label03;
        catch android.database.sqlite.SQLiteException from label07 to label08 with label09;
        catch android.database.sqlite.SQLiteException from label05 to label12 with label13;
        catch java.lang.Throwable from label05 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    void collectDbStatsUnsafe(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.util.ArrayList r1;
        android.database.sqlite.SQLiteDebug$DbStats $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = specialinvoke r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)>(0, 0L, 0L);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    private android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int, long, long)
    {
        android.database.sqlite.SQLiteConnection r0;
        int i0, $i3, $i4, $i5, $i6;
        long l1, l2;
        java.lang.String r1;
        android.database.sqlite.SQLiteDatabaseConfiguration $r2;
        boolean $z0;
        android.database.sqlite.SQLiteDebug$DbStats $r3;
        android.database.sqlite.SQLiteConnection$PreparedStatementCache $r4, $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        r1 = $r2.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $z0 = r0.<android.database.sqlite.SQLiteConnection: boolean mIsPrimaryConnection>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i6 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = new android.database.sqlite.SQLiteDebug$DbStats;

        $r4 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i3 = virtualinvoke $r4.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int hitCount()>();

        $r5 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i4 = virtualinvoke $r5.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int missCount()>();

        $r6 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatementCache mPreparedStatementCache>;

        $i5 = virtualinvoke $r6.<android.database.sqlite.SQLiteConnection$PreparedStatementCache: int size()>();

        specialinvoke $r3.<android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>(r1, l1, l2, i0, $i3, $i4, $i5);

        return $r3;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r7, $r8;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        java.lang.String $r4, $r9;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteConnection: ");

        $r3 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteDatabaseConfiguration mConfiguration>;

        $r4 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i0 = r0.<android.database.sqlite.SQLiteConnection: int mConnectionId>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String, long, int, int, boolean)
    {
        android.database.sqlite.SQLiteConnection r0;
        java.lang.String r1;
        long l0;
        int i1, i2;
        boolean z0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r2, $r3, $r4;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        if r2 == null goto label1;

        $r4 = r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext>;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = $r4;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = null;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mInCache> = 0;

        goto label2;

     label1:
        $r3 = new android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke $r3.<android.database.sqlite.SQLiteConnection$PreparedStatement: void <init>(android.database.sqlite.SQLiteConnection$1)>(null);

        r2 = $r3;

     label2:
        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = r1;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: long mStatementPtr> = l0;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mNumParameters> = i1;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: int mType> = i2;

        r2.<android.database.sqlite.SQLiteConnection$PreparedStatement: boolean mReadOnly> = z0;

        return r2;
    }

    private void recyclePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteConnection;

        r1 := @parameter0: android.database.sqlite.SQLiteConnection$PreparedStatement;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: java.lang.String mSql> = null;

        $r2 = r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool>;

        r1.<android.database.sqlite.SQLiteConnection$PreparedStatement: android.database.sqlite.SQLiteConnection$PreparedStatement mPoolNext> = $r2;

        r0.<android.database.sqlite.SQLiteConnection: android.database.sqlite.SQLiteConnection$PreparedStatement mPreparedStatementPool> = r1;

        return;
    }

    private static java.lang.String trimSqlForDisplay(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.database.sqlite.SQLiteConnection: java.util.regex.Pattern TRIM_SQL_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" ");

        return $r3;
    }

    static void access$200(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnection$PreparedStatement)
    {
        android.database.sqlite.SQLiteConnection r0;
        android.database.sqlite.SQLiteConnection$PreparedStatement r1;

        r0 := @parameter0: android.database.sqlite.SQLiteConnection;

        r1 := @parameter1: android.database.sqlite.SQLiteConnection$PreparedStatement;

        specialinvoke r0.<android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(android.database.sqlite.SQLiteConnection$PreparedStatement)>(r1);

        return;
    }

    static java.lang.String access$300(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.database.sqlite.SQLiteConnection: java.lang.String trimSqlForDisplay(java.lang.String)>(r0);

        return $r1;
    }

    static byte[] access$500()
    {
        byte[] $r0;

        $r0 = <android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.String[] $r1;
        byte[] $r2;
        java.util.regex.Pattern $r3;

        <android.database.sqlite.SQLiteConnection: boolean DEBUG> = 0;

        <android.database.sqlite.SQLiteConnection: java.lang.String TAG> = "SQLiteConnection";

        $r0 = class "android/database/sqlite/SQLiteConnection";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <android.database.sqlite.SQLiteConnection: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.String)[0];

        <android.database.sqlite.SQLiteConnection: java.lang.String[] EMPTY_STRING_ARRAY> = $r1;

        $r2 = newarray (byte)[0];

        <android.database.sqlite.SQLiteConnection: byte[] EMPTY_BYTE_ARRAY> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\s]*\\n+[\\s]*");

        <android.database.sqlite.SQLiteConnection: java.util.regex.Pattern TRIM_SQL_PATTERN> = $r3;

        return;
    }
}
