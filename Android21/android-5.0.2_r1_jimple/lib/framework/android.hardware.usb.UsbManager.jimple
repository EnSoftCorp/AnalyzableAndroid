public class android.hardware.usb.UsbManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final java.lang.String ACTION_USB_STATE;
    public static final java.lang.String ACTION_USB_DEVICE_ATTACHED;
    public static final java.lang.String ACTION_USB_DEVICE_DETACHED;
    public static final java.lang.String ACTION_USB_ACCESSORY_ATTACHED;
    public static final java.lang.String ACTION_USB_ACCESSORY_DETACHED;
    public static final java.lang.String USB_CONNECTED;
    public static final java.lang.String USB_CONFIGURED;
    public static final java.lang.String USB_FUNCTION_MASS_STORAGE;
    public static final java.lang.String USB_FUNCTION_ADB;
    public static final java.lang.String USB_FUNCTION_RNDIS;
    public static final java.lang.String USB_FUNCTION_MTP;
    public static final java.lang.String USB_FUNCTION_PTP;
    public static final java.lang.String USB_FUNCTION_AUDIO_SOURCE;
    public static final java.lang.String USB_FUNCTION_ACCESSORY;
    public static final java.lang.String EXTRA_DEVICE;
    public static final java.lang.String EXTRA_ACCESSORY;
    public static final java.lang.String EXTRA_PERMISSION_GRANTED;
    private final android.content.Context mContext;
    private final android.hardware.usb.IUsbManager mService;

    public void <init>(android.content.Context, android.hardware.usb.IUsbManager)
    {
        android.hardware.usb.UsbManager r0;
        android.content.Context r1;
        android.hardware.usb.IUsbManager r2;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.usb.IUsbManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.usb.UsbManager: android.content.Context mContext> = r1;

        r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService> = r2;

        return;
    }

    public java.util.HashMap getDeviceList()
    {
        android.hardware.usb.UsbManager r0;
        android.os.Bundle r1, $r5;
        java.util.HashMap r2, $r7;
        java.util.Iterator r3;
        java.lang.String r4;
        android.hardware.usb.IUsbManager $r6;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10;
        android.hardware.usb.UsbDevice $r11;
        android.os.RemoteException $r13, r14;

        r0 := @this: android.hardware.usb.UsbManager;

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        r1 = $r5;

     label1:
        $r6 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r6.<android.hardware.usb.IUsbManager: void getDeviceList(android.os.Bundle)>(r1);

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r2 = $r7;

        $r8 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r9;

        $r10 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r4);

        $r11 = (android.hardware.usb.UsbDevice) $r10;

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r11);

        goto label2;

     label3:
        return r2;

     label4:
        $r13 := @caughtexception;

        r14 = $r13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in getDeviceList", r14);

        return null;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbDevice r1;
        java.lang.String r2;
        android.os.ParcelFileDescriptor r3;
        android.hardware.usb.UsbDeviceConnection r4, $r6;
        boolean z0;
        android.hardware.usb.IUsbManager $r5;
        java.lang.Exception $r7, r8;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

     label1:
        r2 = virtualinvoke r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $r5 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        r3 = interfaceinvoke $r5.<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openDevice(java.lang.String)>(r2);

        if r3 == null goto label3;

        $r6 = new android.hardware.usb.UsbDeviceConnection;

        specialinvoke $r6.<android.hardware.usb.UsbDeviceConnection: void <init>(android.hardware.usb.UsbDevice)>(r1);

        r4 = $r6;

        z0 = virtualinvoke r4.<android.hardware.usb.UsbDeviceConnection: boolean open(java.lang.String,android.os.ParcelFileDescriptor)>(r2, r3);

        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

        if z0 == 0 goto label3;

     label2:
        return r4;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "exception in UsbManager.openDevice", r8);

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public android.hardware.usb.UsbAccessory[] getAccessoryList()
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.hardware.usb.IUsbManager $r2;
        android.hardware.usb.UsbAccessory[] $r3;
        android.os.RemoteException $r4, r5;

        r0 := @this: android.hardware.usb.UsbManager;

     label1:
        $r2 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        r1 = interfaceinvoke $r2.<android.hardware.usb.IUsbManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        if r1 != null goto label3;

     label2:
        return null;

     label3:
        $r3 = newarray (android.hardware.usb.UsbAccessory)[1];

        $r3[0] = r1;

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        r5 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in getAccessoryList", r5);

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.os.RemoteException r2, $r5;
        android.hardware.usb.IUsbManager $r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r4 = interfaceinvoke $r3.<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in openAccessory", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasPermission(android.hardware.usb.UsbDevice)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbDevice r1;
        android.os.RemoteException r2, $r4;
        android.hardware.usb.IUsbManager $r3;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $z0 = interfaceinvoke $r3.<android.hardware.usb.IUsbManager: boolean hasDevicePermission(android.hardware.usb.UsbDevice)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in hasPermission", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasPermission(android.hardware.usb.UsbAccessory)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.os.RemoteException r2, $r4;
        android.hardware.usb.IUsbManager $r3;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $z0 = interfaceinvoke $r3.<android.hardware.usb.IUsbManager: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in hasPermission", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestPermission(android.hardware.usb.UsbDevice, android.app.PendingIntent)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbDevice r1;
        android.app.PendingIntent r2;
        android.os.RemoteException r3, $r7;
        android.content.Context $r4;
        android.hardware.usb.IUsbManager $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        r2 := @parameter1: android.app.PendingIntent;

     label1:
        $r5 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r4 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r5.<android.hardware.usb.IUsbManager: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>(r1, $r6, r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in requestPermission", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestPermission(android.hardware.usb.UsbAccessory, android.app.PendingIntent)
    {
        android.hardware.usb.UsbManager r0;
        android.hardware.usb.UsbAccessory r1;
        android.app.PendingIntent r2;
        android.os.RemoteException r3, $r7;
        android.content.Context $r4;
        android.hardware.usb.IUsbManager $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r2 := @parameter1: android.app.PendingIntent;

     label1:
        $r5 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        $r4 = r0.<android.hardware.usb.UsbManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r5.<android.hardware.usb.IUsbManager: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>(r1, $r6, r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in requestPermission", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static boolean propertyContainsFunction(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        int i0, i1, $i2, $i3, $i5;
        char $c4, $c6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(r0, "");

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 >= 0 goto label1;

        return 0;

     label1:
        if i0 <= 0 goto label2;

        $i5 = i0 - 1;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i5);

        if $c6 == 44 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = i0 + $i2;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i1 >= $i3 goto label3;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i1);

        if $c4 == 44 goto label3;

        return 0;

     label3:
        return 1;
    }

    public boolean isFunctionEnabled(java.lang.String)
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.hardware.usb.UsbManager: boolean propertyContainsFunction(java.lang.String,java.lang.String)>("sys.usb.config", r1);

        return $z0;
    }

    public java.lang.String getDefaultFunction()
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.sys.usb.config", "");

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(44);

        if i0 <= 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;

     label1:
        return r1;
    }

    public void setCurrentFunction(java.lang.String, boolean)
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.RemoteException r2, $r4;
        android.hardware.usb.IUsbManager $r3;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r3.<android.hardware.usb.IUsbManager: void setCurrentFunction(java.lang.String,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in setCurrentFunction", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMassStorageBackingFile(java.lang.String)
    {
        android.hardware.usb.UsbManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.hardware.usb.IUsbManager $r3;

        r0 := @this: android.hardware.usb.UsbManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.hardware.usb.UsbManager: android.hardware.usb.IUsbManager mService>;

        interfaceinvoke $r3.<android.hardware.usb.IUsbManager: void setMassStorageBackingFile(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbManager", "RemoteException in setDefaultFunction", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.usb.UsbManager: java.lang.String EXTRA_PERMISSION_GRANTED> = "permission";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_ACCESSORY> = "accessory";

        <android.hardware.usb.UsbManager: java.lang.String EXTRA_DEVICE> = "device";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_ACCESSORY> = "accessory";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_AUDIO_SOURCE> = "audio_source";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_PTP> = "ptp";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_MTP> = "mtp";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_RNDIS> = "rndis";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_ADB> = "adb";

        <android.hardware.usb.UsbManager: java.lang.String USB_FUNCTION_MASS_STORAGE> = "mass_storage";

        <android.hardware.usb.UsbManager: java.lang.String USB_CONFIGURED> = "configured";

        <android.hardware.usb.UsbManager: java.lang.String USB_CONNECTED> = "connected";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_DETACHED> = "android.hardware.usb.action.USB_ACCESSORY_DETACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_ATTACHED> = "android.hardware.usb.action.USB_ACCESSORY_ATTACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_DETACHED> = "android.hardware.usb.action.USB_DEVICE_DETACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_ATTACHED> = "android.hardware.usb.action.USB_DEVICE_ATTACHED";

        <android.hardware.usb.UsbManager: java.lang.String ACTION_USB_STATE> = "android.hardware.usb.action.USB_STATE";

        <android.hardware.usb.UsbManager: java.lang.String TAG> = "UsbManager";

        return;
    }
}
