public class android.os.Environment extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String ENV_EXTERNAL_STORAGE;
    private static final java.lang.String ENV_EMULATED_STORAGE_SOURCE;
    private static final java.lang.String ENV_EMULATED_STORAGE_TARGET;
    private static final java.lang.String ENV_MEDIA_STORAGE;
    private static final java.lang.String ENV_SECONDARY_STORAGE;
    private static final java.lang.String ENV_ANDROID_ROOT;
    private static final java.lang.String ENV_OEM_ROOT;
    private static final java.lang.String ENV_VENDOR_ROOT;
    public static final java.lang.String DIR_ANDROID;
    private static final java.lang.String DIR_DATA;
    private static final java.lang.String DIR_MEDIA;
    private static final java.lang.String DIR_OBB;
    private static final java.lang.String DIR_FILES;
    private static final java.lang.String DIR_CACHE;
    public static final java.lang.String DIRECTORY_ANDROID;
    private static final java.io.File DIR_ANDROID_ROOT;
    private static final java.io.File DIR_OEM_ROOT;
    private static final java.io.File DIR_VENDOR_ROOT;
    private static final java.io.File DIR_MEDIA_STORAGE;
    private static final java.lang.String CANONCIAL_EMULATED_STORAGE_TARGET;
    private static final java.lang.String SYSTEM_PROPERTY_EFS_ENABLED;
    private static android.os.Environment$UserEnvironment sCurrentUser;
    private static boolean sUserRequired;
    private static final java.io.File DATA_DIRECTORY;
    private static final java.io.File SECURE_DATA_DIRECTORY;
    private static final java.io.File DOWNLOAD_CACHE_DIRECTORY;
    public static java.lang.String DIRECTORY_MUSIC;
    public static java.lang.String DIRECTORY_PODCASTS;
    public static java.lang.String DIRECTORY_RINGTONES;
    public static java.lang.String DIRECTORY_ALARMS;
    public static java.lang.String DIRECTORY_NOTIFICATIONS;
    public static java.lang.String DIRECTORY_PICTURES;
    public static java.lang.String DIRECTORY_MOVIES;
    public static java.lang.String DIRECTORY_DOWNLOADS;
    public static java.lang.String DIRECTORY_DCIM;
    public static java.lang.String DIRECTORY_DOCUMENTS;
    public static final java.lang.String MEDIA_UNKNOWN;
    public static final java.lang.String MEDIA_REMOVED;
    public static final java.lang.String MEDIA_UNMOUNTED;
    public static final java.lang.String MEDIA_CHECKING;
    public static final java.lang.String MEDIA_NOFS;
    public static final java.lang.String MEDIA_MOUNTED;
    public static final java.lang.String MEDIA_MOUNTED_READ_ONLY;
    public static final java.lang.String MEDIA_SHARED;
    public static final java.lang.String MEDIA_BAD_REMOVAL;
    public static final java.lang.String MEDIA_UNMOUNTABLE;

    public void <init>()
    {
        android.os.Environment r0;

        r0 := @this: android.os.Environment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initForCurrentUser()
    {
        int i0;
        android.os.Environment$UserEnvironment $r0;

        i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r0 = new android.os.Environment$UserEnvironment;

        specialinvoke $r0.<android.os.Environment$UserEnvironment: void <init>(int)>(i0);

        <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser> = $r0;

        return;
    }

    public static java.io.File getRootDirectory()
    {
        java.io.File $r0;

        $r0 = <android.os.Environment: java.io.File DIR_ANDROID_ROOT>;

        return $r0;
    }

    public static java.io.File getOemDirectory()
    {
        java.io.File $r0;

        $r0 = <android.os.Environment: java.io.File DIR_OEM_ROOT>;

        return $r0;
    }

    public static java.io.File getVendorDirectory()
    {
        java.io.File $r0;

        $r0 = <android.os.Environment: java.io.File DIR_VENDOR_ROOT>;

        return $r0;
    }

    public static java.io.File getSystemSecureDirectory()
    {
        boolean $z0;
        java.io.File $r0, $r1, $r2, $r3;

        $z0 = staticinvoke <android.os.Environment: boolean isEncryptedFilesystemEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = new java.io.File;

        $r3 = <android.os.Environment: java.io.File SECURE_DATA_DIRECTORY>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "system");

        return $r2;

     label1:
        $r0 = new java.io.File;

        $r1 = <android.os.Environment: java.io.File DATA_DIRECTORY>;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    public static java.io.File getSecureDataDirectory()
    {
        boolean $z0;
        java.io.File $r0, $r1;

        $z0 = staticinvoke <android.os.Environment: boolean isEncryptedFilesystemEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = <android.os.Environment: java.io.File SECURE_DATA_DIRECTORY>;

        return $r1;

     label1:
        $r0 = <android.os.Environment: java.io.File DATA_DIRECTORY>;

        return $r0;
    }

    public static java.io.File getMediaStorageDirectory()
    {
        android.os.Environment$UserEnvironment $r0;
        java.io.File $r1;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r0 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r1 = virtualinvoke $r0.<android.os.Environment$UserEnvironment: java.io.File getMediaDir()>();

        return $r1;
    }

    public static java.io.File getUserSystemDirectory(int)
    {
        int i0;
        java.io.File $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $r0 = new java.io.File;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "users");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r3);

        return $r0;
    }

    public static java.io.File getUserConfigDirectory(int)
    {
        int i0;
        java.io.File $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r0 = new java.io.File;

        $r1 = new java.io.File;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "misc");

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "user");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r4);

        return $r0;
    }

    public static boolean isEncryptedFilesystemEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.security.efs.enabled", 0);

        return $z0;
    }

    public static java.io.File getDataDirectory()
    {
        java.io.File $r0;

        $r0 = <android.os.Environment: java.io.File DATA_DIRECTORY>;

        return $r0;
    }

    public static java.io.File getExternalStorageDirectory()
    {
        android.os.Environment$UserEnvironment $r0;
        java.io.File[] $r1;
        java.io.File $r2;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r0 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r1 = virtualinvoke $r0.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        $r2 = $r1[0];

        return $r2;
    }

    public static java.io.File getLegacyExternalStorageDirectory()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("EXTERNAL_STORAGE");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r0;
    }

    public static java.io.File getLegacyExternalStorageObbDirectory()
    {
        java.io.File $r0, $r2;
        java.lang.String[] $r1;

        $r0 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "Android";

        $r1[1] = "obb";

        $r2 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r0, $r1);

        return $r2;
    }

    public static java.io.File getEmulatedStorageSource(int)
    {
        int i0;
        java.io.File $r0;
        java.lang.String $r1, $r2;

        i0 := @parameter0: int;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("EMULATED_STORAGE_SOURCE");

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return $r0;
    }

    public static java.io.File getEmulatedStorageObbSource()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("EMULATED_STORAGE_SOURCE");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, "obb");

        return $r0;
    }

    public static java.io.File getExternalStoragePublicDirectory(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;
        java.io.File $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStoragePublicDirs(java.lang.String)>(r0);

        $r3 = $r2[0];

        return $r3;
    }

    public static java.io.File[] buildExternalStorageAndroidDataDirs()
    {
        android.os.Environment$UserEnvironment $r0;
        java.io.File[] $r1;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r0 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r1 = virtualinvoke $r0.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidDataDirs()>();

        return $r1;
    }

    public static java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)
    {
        java.lang.String r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Environment: void throwIfUserRequired()>();

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.File getDownloadCacheDirectory()
    {
        java.io.File $r0;

        $r0 = <android.os.Environment: java.io.File DOWNLOAD_CACHE_DIRECTORY>;

        return $r0;
    }

    public static java.lang.String getExternalStorageState()
    {
        java.io.File r0;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;
        java.lang.String $r3;

        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        r0 = $r2[0];

        $r3 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>(r0);

        return $r3;
    }

    public static java.lang.String getStorageState(java.io.File)
    {
        java.io.File r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>(r0);

        return $r1;
    }

    public static java.lang.String getExternalStorageState(java.io.File)
    {
        java.io.File r0;
        android.os.storage.StorageVolume r1;
        android.os.storage.IMountService r2;
        android.os.IBinder $r4;
        java.lang.String $r5, $r6;
        android.os.RemoteException $r7;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <android.os.Environment: android.os.storage.StorageVolume getStorageVolume(java.io.File)>(r0);

        if r1 == null goto label4;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r2 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r4);

     label1:
        $r5 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r6 = interfaceinvoke r2.<android.os.storage.IMountService: java.lang.String getVolumeState(java.lang.String)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        return "unknown";

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isExternalStorageRemovable()
    {
        java.io.File r0;
        boolean $z0, $z1;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        $z0 = staticinvoke <android.os.Environment: boolean isStorageDisabled()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        r0 = $r2[0];

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageRemovable(java.io.File)>(r0);

        return $z1;
    }

    public static boolean isExternalStorageRemovable(java.io.File)
    {
        java.io.File r0;
        android.os.storage.StorageVolume r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <android.os.Environment: android.os.storage.StorageVolume getStorageVolume(java.io.File)>(r0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isRemovable()>();

        return $z0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find storage device at ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public static boolean isExternalStorageEmulated()
    {
        java.io.File r0;
        boolean $z0, $z1;
        android.os.Environment$UserEnvironment $r1;
        java.io.File[] $r2;

        $z0 = staticinvoke <android.os.Environment: boolean isStorageDisabled()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = <android.os.Environment: android.os.Environment$UserEnvironment sCurrentUser>;

        $r2 = virtualinvoke $r1.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        r0 = $r2[0];

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated(java.io.File)>(r0);

        return $z1;
    }

    public static boolean isExternalStorageEmulated(java.io.File)
    {
        java.io.File r0;
        android.os.storage.StorageVolume r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <android.os.Environment: android.os.storage.StorageVolume getStorageVolume(java.io.File)>(r0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isEmulated()>();

        return $z0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find storage device at ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    static java.io.File getDirectory(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        java.io.File $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r0);

        if r2 != null goto label1;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        goto label2;

     label1:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2);

     label2:
        return $r3;
    }

    private static java.lang.String getCanonicalPathOrNull(java.lang.String)
    {
        java.lang.String r0, r1, $r4, $r9;
        java.io.File $r3;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getCanonicalPath()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to resolve canonical path for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Environment", $r9);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void setUserRequired(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.os.Environment: boolean sUserRequired> = z0;

        return;
    }

    private static void throwIfUserRequired()
    {
        boolean $z0;
        java.lang.Throwable $r0;

        $z0 = <android.os.Environment: boolean sUserRequired>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Environment", "Path requests must specify a user by using UserEnvironment", $r0);

     label1:
        return;
    }

    public static transient java.io.File[] buildPaths(java.io.File[], java.lang.String[])
    {
        java.io.File[] r0, r2;
        java.lang.String[] r1;
        int i0, $i1, $i2;
        java.io.File $r3, $r4;

        r0 := @parameter0: java.io.File[];

        r1 := @parameter1: java.lang.String[];

        $i1 = lengthof r0;

        r2 = newarray (java.io.File)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r3 = r0[i0];

        $r4 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r3, r1);

        r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static transient java.io.File buildPath(java.io.File, java.lang.String[])
    {
        java.io.File r0, r2, $r5, $r6;
        java.lang.String[] r1, r3;
        int i0, i1;
        java.lang.String r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        r2 = r0;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        if r2 != null goto label2;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r4);

        r2 = $r6;

        goto label3;

     label2:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r4);

        r2 = $r5;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r2;
    }

    private static boolean isStorageDisabled()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_storage", 0);

        return $z0;
    }

    private static android.os.storage.StorageVolume getStorageVolume(java.io.File)
    {
        java.io.File r0, $r6, r9;
        android.os.storage.StorageVolume[] r2, r3;
        int i0, i1;
        android.os.storage.StorageVolume r4;
        android.os.IBinder $r5;
        boolean $z0;
        android.os.RemoteException $r7;
        java.io.IOException $r8;
        android.os.storage.IMountService r10;

        r0 := @parameter0: java.io.File;

     label01:
        r9 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        return null;

     label04:
        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r10 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r5);

        r2 = interfaceinvoke r10.<android.os.storage.IMountService: android.os.storage.StorageVolume[] getVolumeList()>();

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label05:
        if i1 >= i0 goto label08;

        r4 = r3[i1];

        $r6 = virtualinvoke r4.<android.os.storage.StorageVolume: java.io.File getPathFile()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r6, r9);

        if $z0 == 0 goto label07;

     label06:
        return r4;

     label07:
        i1 = i1 + 1;

        goto label05;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        return null;

        catch java.io.IOException from label01 to label02 with label03;
        catch android.os.RemoteException from label04 to label06 with label09;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    public static java.io.File maybeTranslateEmulatedPathToInternal(java.io.File)
    {
        java.io.File r0, r2, $r5, $r7;
        java.lang.String r1, $r3, $r4, $r6, $r8, $r12;
        boolean $z0, $z1, $z2;
        int $i0;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z0 == 0 goto label1;

        $r3 = <android.os.Environment: java.lang.String CANONCIAL_EMULATED_STORAGE_TARGET>;

        if $r3 != null goto label2;

     label1:
        return r0;

     label2:
        r1 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r4 = <android.os.Environment: java.lang.String CANONCIAL_EMULATED_STORAGE_TARGET>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z1 == 0 goto label4;

        $r5 = new java.io.File;

        $r7 = <android.os.Environment: java.io.File DIR_MEDIA_STORAGE>;

        $r6 = <android.os.Environment: java.lang.String CANONCIAL_EMULATED_STORAGE_TARGET>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r8);

        r2 = $r5;

        $z2 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label4;

     label3:
        return r2;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve canonical path for ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Environment", $r12);

     label6:
        return r0;

        catch java.io.IOException from label2 to label3 with label5;
    }

    static void <clinit>()
    {
        java.io.File $r0, $r1, $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4;

        <android.os.Environment: java.lang.String MEDIA_UNMOUNTABLE> = "unmountable";

        <android.os.Environment: java.lang.String MEDIA_BAD_REMOVAL> = "bad_removal";

        <android.os.Environment: java.lang.String MEDIA_SHARED> = "shared";

        <android.os.Environment: java.lang.String MEDIA_MOUNTED_READ_ONLY> = "mounted_ro";

        <android.os.Environment: java.lang.String MEDIA_MOUNTED> = "mounted";

        <android.os.Environment: java.lang.String MEDIA_NOFS> = "nofs";

        <android.os.Environment: java.lang.String MEDIA_CHECKING> = "checking";

        <android.os.Environment: java.lang.String MEDIA_UNMOUNTED> = "unmounted";

        <android.os.Environment: java.lang.String MEDIA_REMOVED> = "removed";

        <android.os.Environment: java.lang.String MEDIA_UNKNOWN> = "unknown";

        <android.os.Environment: java.lang.String SYSTEM_PROPERTY_EFS_ENABLED> = "persist.security.efs.enabled";

        <android.os.Environment: java.lang.String DIRECTORY_ANDROID> = "Android";

        <android.os.Environment: java.lang.String DIR_CACHE> = "cache";

        <android.os.Environment: java.lang.String DIR_FILES> = "files";

        <android.os.Environment: java.lang.String DIR_OBB> = "obb";

        <android.os.Environment: java.lang.String DIR_MEDIA> = "media";

        <android.os.Environment: java.lang.String DIR_DATA> = "data";

        <android.os.Environment: java.lang.String DIR_ANDROID> = "Android";

        <android.os.Environment: java.lang.String ENV_VENDOR_ROOT> = "VENDOR_ROOT";

        <android.os.Environment: java.lang.String ENV_OEM_ROOT> = "OEM_ROOT";

        <android.os.Environment: java.lang.String ENV_ANDROID_ROOT> = "ANDROID_ROOT";

        <android.os.Environment: java.lang.String ENV_SECONDARY_STORAGE> = "SECONDARY_STORAGE";

        <android.os.Environment: java.lang.String ENV_MEDIA_STORAGE> = "MEDIA_STORAGE";

        <android.os.Environment: java.lang.String ENV_EMULATED_STORAGE_TARGET> = "EMULATED_STORAGE_TARGET";

        <android.os.Environment: java.lang.String ENV_EMULATED_STORAGE_SOURCE> = "EMULATED_STORAGE_SOURCE";

        <android.os.Environment: java.lang.String ENV_EXTERNAL_STORAGE> = "EXTERNAL_STORAGE";

        <android.os.Environment: java.lang.String TAG> = "Environment";

        $r0 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("ANDROID_ROOT", "/system");

        <android.os.Environment: java.io.File DIR_ANDROID_ROOT> = $r0;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("OEM_ROOT", "/oem");

        <android.os.Environment: java.io.File DIR_OEM_ROOT> = $r1;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("VENDOR_ROOT", "/vendor");

        <android.os.Environment: java.io.File DIR_VENDOR_ROOT> = $r2;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("MEDIA_STORAGE", "/data/media");

        <android.os.Environment: java.io.File DIR_MEDIA_STORAGE> = $r3;

        $r4 = staticinvoke <android.os.Environment: java.lang.String getCanonicalPathOrNull(java.lang.String)>("EMULATED_STORAGE_TARGET");

        <android.os.Environment: java.lang.String CANONCIAL_EMULATED_STORAGE_TARGET> = $r4;

        staticinvoke <android.os.Environment: void initForCurrentUser()>();

        $r5 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("ANDROID_DATA", "/data");

        <android.os.Environment: java.io.File DATA_DIRECTORY> = $r5;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("ANDROID_SECURE_DATA", "/data/secure");

        <android.os.Environment: java.io.File SECURE_DATA_DIRECTORY> = $r6;

        $r7 = staticinvoke <android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>("DOWNLOAD_CACHE", "/cache");

        <android.os.Environment: java.io.File DOWNLOAD_CACHE_DIRECTORY> = $r7;

        <android.os.Environment: java.lang.String DIRECTORY_MUSIC> = "Music";

        <android.os.Environment: java.lang.String DIRECTORY_PODCASTS> = "Podcasts";

        <android.os.Environment: java.lang.String DIRECTORY_RINGTONES> = "Ringtones";

        <android.os.Environment: java.lang.String DIRECTORY_ALARMS> = "Alarms";

        <android.os.Environment: java.lang.String DIRECTORY_NOTIFICATIONS> = "Notifications";

        <android.os.Environment: java.lang.String DIRECTORY_PICTURES> = "Pictures";

        <android.os.Environment: java.lang.String DIRECTORY_MOVIES> = "Movies";

        <android.os.Environment: java.lang.String DIRECTORY_DOWNLOADS> = "Download";

        <android.os.Environment: java.lang.String DIRECTORY_DCIM> = "DCIM";

        <android.os.Environment: java.lang.String DIRECTORY_DOCUMENTS> = "Documents";

        return;
    }
}
