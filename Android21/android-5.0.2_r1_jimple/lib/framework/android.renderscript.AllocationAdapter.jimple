public class android.renderscript.AllocationAdapter extends android.renderscript.Allocation
{

    void <init>(long, android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.AllocationAdapter r0;
        long l0;
        android.renderscript.RenderScript r1;
        android.renderscript.Allocation r2;
        int $i1;
        android.renderscript.Type $r3;

        r0 := @this: android.renderscript.AllocationAdapter;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        r2 := @parameter2: android.renderscript.Allocation;

        $r3 = r2.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i1 = r2.<android.renderscript.Allocation: int mUsage>;

        specialinvoke r0.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,int)>(l0, r1, $r3, $i1);

        r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation> = r2;

        return;
    }

    long getID(android.renderscript.RenderScript)
    {
        android.renderscript.AllocationAdapter r0;
        android.renderscript.RenderScript r1;
        android.renderscript.RSInvalidStateException $r2;

        r0 := @this: android.renderscript.AllocationAdapter;

        r1 := @parameter0: android.renderscript.RenderScript;

        $r2 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r2.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("This operation is not supported with adapters at this time.");

        throw $r2;
    }

    public void subData(int, android.renderscript.FieldPacker)
    {
        android.renderscript.AllocationAdapter r0;
        int i0;
        android.renderscript.FieldPacker r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.FieldPacker;

        specialinvoke r0.<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>(i0, r1);

        return;
    }

    public void subElementData(int, int, android.renderscript.FieldPacker)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1;
        android.renderscript.FieldPacker r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.FieldPacker;

        specialinvoke r0.<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>(i0, i1, r1);

        return;
    }

    public void subData1D(int, int, int[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1;
        int[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>(i0, i1, r1);

        return;
    }

    public void subData1D(int, int, short[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1;
        short[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>(i0, i1, r1);

        return;
    }

    public void subData1D(int, int, byte[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1;
        byte[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>(i0, i1, r1);

        return;
    }

    public void subData1D(int, int, float[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1;
        float[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>(i0, i1, r1);

        return;
    }

    public void subData2D(int, int, int, int, int[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1, i2, i3;
        int[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        specialinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>(i0, i1, i2, i3, r1);

        return;
    }

    public void subData2D(int, int, int, int, float[])
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1, i2, i3;
        float[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

        specialinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>(i0, i1, i2, i3, r1);

        return;
    }

    public void readData(int[])
    {
        android.renderscript.AllocationAdapter r0;
        int[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        r1 := @parameter0: int[];

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(int[])>(r1);

        return;
    }

    public void readData(float[])
    {
        android.renderscript.AllocationAdapter r0;
        float[] r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        r1 := @parameter0: float[];

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(float[])>(r1);

        return;
    }

    void initLOD(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.renderscript.Allocation $r1, $r3, $r5;
        android.renderscript.Type $r2, $r4, $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r13, $r15, $r17, $r18;
        android.renderscript.RSIllegalArgumentException $r8, $r14;
        java.lang.String $r11, $r16;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r14 = new android.renderscript.RSIllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to set negative lod (");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r14;

     label1:
        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = $r1.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i1 = virtualinvoke $r2.<android.renderscript.Type: int getX()>();

        $r3 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r4 = $r3.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i2 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r6 = $r5.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i3 = virtualinvoke $r6.<android.renderscript.Type: int getZ()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label7;

        if i1 != 1 goto label3;

        if i2 != 1 goto label3;

        if i3 != 1 goto label3;

        $r8 = new android.renderscript.RSIllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to set lod (");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range.");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label3:
        if i1 <= 1 goto label4;

        i1 = i1 >> 1;

     label4:
        if i2 <= 1 goto label5;

        i2 = i2 >> 1;

     label5:
        if i3 <= 1 goto label6;

        i3 = i3 >> 1;

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        r0.<android.renderscript.AllocationAdapter: int mCurrentDimX> = i1;

        r0.<android.renderscript.AllocationAdapter: int mCurrentDimY> = i2;

        r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ> = i3;

        $i5 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimX>;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i5;

        $i7 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimY>;

        if $i7 <= 1 goto label8;

        $i13 = r0.<android.renderscript.AllocationAdapter: int mCurrentCount>;

        $i10 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimY>;

        $i12 = $i13 * $i10;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i12;

     label8:
        $i6 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ>;

        if $i6 <= 1 goto label9;

        $i8 = r0.<android.renderscript.AllocationAdapter: int mCurrentCount>;

        $i9 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ>;

        $i11 = $i8 * $i9;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i11;

     label9:
        r0.<android.renderscript.AllocationAdapter: int mSelectedY> = 0;

        r0.<android.renderscript.AllocationAdapter: int mSelectedZ> = 0;

        return;
    }

    public void setLOD(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0;
        android.renderscript.Allocation $r1;
        android.renderscript.Type $r2;
        boolean $z0, $z1;
        android.renderscript.RSInvalidStateException $r3, $r4;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r2.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z0 != 0 goto label1;

        $r4 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r4.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set LOD when the allocation type does not include mipmaps.");

        throw $r4;

     label1:
        $z1 = r0.<android.renderscript.AllocationAdapter: boolean mConstrainedLOD>;

        if $z1 != 0 goto label2;

        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set LOD when the adapter includes mipmaps.");

        throw $r3;

     label2:
        virtualinvoke r0.<android.renderscript.AllocationAdapter: void initLOD(int)>(i0);

        return;
    }

    public void setFace(android.renderscript.Type$CubemapFace)
    {
        android.renderscript.AllocationAdapter r0;
        android.renderscript.Type$CubemapFace r1;
        android.renderscript.Allocation $r2;
        android.renderscript.Type $r3;
        boolean $z0, $z1;
        android.renderscript.RSIllegalArgumentException $r4;
        android.renderscript.RSInvalidStateException $r5, $r6;

        r0 := @this: android.renderscript.AllocationAdapter;

        r1 := @parameter0: android.renderscript.Type$CubemapFace;

        $r2 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r3 = virtualinvoke $r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r3.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 != 0 goto label1;

        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Face when the allocation type does not include faces.");

        throw $r6;

     label1:
        $z1 = r0.<android.renderscript.AllocationAdapter: boolean mConstrainedFace>;

        if $z1 != 0 goto label2;

        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set LOD when the adapter includes mipmaps.");

        throw $r5;

     label2:
        if r1 != null goto label3;

        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cannot set null face.");

        throw $r4;

     label3:
        r0.<android.renderscript.AllocationAdapter: android.renderscript.Type$CubemapFace mSelectedFace> = r1;

        return;
    }

    public void setY(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2;
        android.renderscript.Allocation $r1, $r3;
        android.renderscript.Type $r2, $r4;
        boolean $z0;
        android.renderscript.RSInvalidStateException $r5, $r6, $r7;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getY()>();

        if $i1 != 0 goto label1;

        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y when the allocation type does not include Y dim.");

        throw $r7;

     label1:
        $r3 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r4 = virtualinvoke $r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        if $i2 > i0 goto label2;

        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y greater than dimension of allocation.");

        throw $r6;

     label2:
        $z0 = r0.<android.renderscript.AllocationAdapter: boolean mConstrainedY>;

        if $z0 != 0 goto label3;

        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y when the adapter includes Y.");

        throw $r5;

     label3:
        r0.<android.renderscript.AllocationAdapter: int mSelectedY> = i0;

        return;
    }

    public void setZ(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2;
        android.renderscript.Allocation $r1, $r3;
        android.renderscript.Type $r2, $r4;
        boolean $z0;
        android.renderscript.RSInvalidStateException $r5, $r6, $r7;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getZ()>();

        if $i1 != 0 goto label1;

        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z when the allocation type does not include Z dim.");

        throw $r7;

     label1:
        $r3 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r4 = virtualinvoke $r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getZ()>();

        if $i2 > i0 goto label2;

        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z greater than dimension of allocation.");

        throw $r6;

     label2:
        $z0 = r0.<android.renderscript.AllocationAdapter: boolean mConstrainedZ>;

        if $z0 != 0 goto label3;

        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z when the adapter includes Z.");

        throw $r5;

     label3:
        r0.<android.renderscript.AllocationAdapter: int mSelectedZ> = i0;

        return;
    }

    public static android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Allocation r1;
        android.renderscript.AllocationAdapter r2, $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r3 = new android.renderscript.AllocationAdapter;

        specialinvoke $r3.<android.renderscript.AllocationAdapter: void <init>(long,android.renderscript.RenderScript,android.renderscript.Allocation)>(0L, r0, r1);

        r2 = $r3;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedLOD> = 1;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedFace> = 1;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedY> = 1;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedZ> = 1;

        virtualinvoke r2.<android.renderscript.AllocationAdapter: void initLOD(int)>(0);

        return r2;
    }

    public static android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Allocation r1;
        android.renderscript.AllocationAdapter r2, $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r3 = new android.renderscript.AllocationAdapter;

        specialinvoke $r3.<android.renderscript.AllocationAdapter: void <init>(long,android.renderscript.RenderScript,android.renderscript.Allocation)>(0L, r0, r1);

        r2 = $r3;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedLOD> = 1;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedFace> = 1;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedY> = 0;

        r2.<android.renderscript.AllocationAdapter: boolean mConstrainedZ> = 1;

        virtualinvoke r2.<android.renderscript.AllocationAdapter: void initLOD(int)>(0);

        return r2;
    }

    public synchronized void resize(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0;
        android.renderscript.RSInvalidStateException $r1;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r1.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Resize not allowed for Adapters.");

        throw $r1;
    }
}
