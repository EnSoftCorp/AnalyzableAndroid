public class android.location.LocationProvider extends java.lang.Object
{
    public static final int OUT_OF_SERVICE;
    public static final int TEMPORARILY_UNAVAILABLE;
    public static final int AVAILABLE;
    public static final java.lang.String BAD_CHARS_REGEX;
    private final java.lang.String mName;
    private final com.android.internal.location.ProviderProperties mProperties;

    public void <init>(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        android.location.LocationProvider r0;
        java.lang.String r1, $r7;
        com.android.internal.location.ProviderProperties r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: android.location.LocationProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.location.ProviderProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("[^a-zA-Z0-9]");

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider name contains illegal character: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        r0.<android.location.LocationProvider: java.lang.String mName> = r1;

        r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties> = r2;

        return;
    }

    public java.lang.String getName()
    {
        android.location.LocationProvider r0;
        java.lang.String $r1;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: java.lang.String mName>;

        return $r1;
    }

    public boolean meetsCriteria(android.location.Criteria)
    {
        android.location.LocationProvider r0;
        android.location.Criteria r1;
        com.android.internal.location.ProviderProperties $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        r1 := @parameter0: android.location.Criteria;

        $r3 = r0.<android.location.LocationProvider: java.lang.String mName>;

        $r2 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>($r3, $r2, r1);

        return $z0;
    }

    public static boolean propertiesMeetCriteria(java.lang.String, com.android.internal.location.ProviderProperties, android.location.Criteria)
    {
        java.lang.String r0, $r3;
        com.android.internal.location.ProviderProperties r1;
        android.location.Criteria r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.internal.location.ProviderProperties;

        r2 := @parameter2: android.location.Criteria;

        $r3 = "passive";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r2.<android.location.Criteria: int getAccuracy()>();

        if $i0 == 0 goto label3;

        $i3 = virtualinvoke r2.<android.location.Criteria: int getAccuracy()>();

        $i5 = r1.<com.android.internal.location.ProviderProperties: int mAccuracy>;

        if $i3 >= $i5 goto label3;

        return 0;

     label3:
        $i1 = virtualinvoke r2.<android.location.Criteria: int getPowerRequirement()>();

        if $i1 == 0 goto label4;

        $i2 = virtualinvoke r2.<android.location.Criteria: int getPowerRequirement()>();

        $i4 = r1.<com.android.internal.location.ProviderProperties: int mPowerRequirement>;

        if $i2 >= $i4 goto label4;

        return 0;

     label4:
        $z1 = virtualinvoke r2.<android.location.Criteria: boolean isAltitudeRequired()>();

        if $z1 == 0 goto label5;

        $z8 = r1.<com.android.internal.location.ProviderProperties: boolean mSupportsAltitude>;

        if $z8 != 0 goto label5;

        return 0;

     label5:
        $z2 = virtualinvoke r2.<android.location.Criteria: boolean isSpeedRequired()>();

        if $z2 == 0 goto label6;

        $z7 = r1.<com.android.internal.location.ProviderProperties: boolean mSupportsSpeed>;

        if $z7 != 0 goto label6;

        return 0;

     label6:
        $z3 = virtualinvoke r2.<android.location.Criteria: boolean isBearingRequired()>();

        if $z3 == 0 goto label7;

        $z6 = r1.<com.android.internal.location.ProviderProperties: boolean mSupportsBearing>;

        if $z6 != 0 goto label7;

        return 0;

     label7:
        $z4 = virtualinvoke r2.<android.location.Criteria: boolean isCostAllowed()>();

        if $z4 != 0 goto label8;

        $z5 = r1.<com.android.internal.location.ProviderProperties: boolean mHasMonetaryCost>;

        if $z5 == 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    public boolean requiresNetwork()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mRequiresNetwork>;

        return $z0;
    }

    public boolean requiresSatellite()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mRequiresSatellite>;

        return $z0;
    }

    public boolean requiresCell()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mRequiresCell>;

        return $z0;
    }

    public boolean hasMonetaryCost()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mHasMonetaryCost>;

        return $z0;
    }

    public boolean supportsAltitude()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mSupportsAltitude>;

        return $z0;
    }

    public boolean supportsSpeed()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mSupportsSpeed>;

        return $z0;
    }

    public boolean supportsBearing()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        boolean $z0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $z0 = $r1.<com.android.internal.location.ProviderProperties: boolean mSupportsBearing>;

        return $z0;
    }

    public int getPowerRequirement()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        int $i0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $i0 = $r1.<com.android.internal.location.ProviderProperties: int mPowerRequirement>;

        return $i0;
    }

    public int getAccuracy()
    {
        android.location.LocationProvider r0;
        com.android.internal.location.ProviderProperties $r1;
        int $i0;

        r0 := @this: android.location.LocationProvider;

        $r1 = r0.<android.location.LocationProvider: com.android.internal.location.ProviderProperties mProperties>;

        $i0 = $r1.<com.android.internal.location.ProviderProperties: int mAccuracy>;

        return $i0;
    }

    public static void <clinit>()
    {
        <android.location.LocationProvider: java.lang.String BAD_CHARS_REGEX> = "[^a-zA-Z0-9]";

        <android.location.LocationProvider: int AVAILABLE> = 2;

        <android.location.LocationProvider: int TEMPORARILY_UNAVAILABLE> = 1;

        <android.location.LocationProvider: int OUT_OF_SERVICE> = 0;

        return;
    }
}
