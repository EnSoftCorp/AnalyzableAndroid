public class android.hardware.SystemSensorManager extends android.hardware.SensorManager
{
    private static boolean sSensorModuleInitialized;
    private static final java.lang.Object sSensorModuleLock;
    private static final java.util.ArrayList sFullSensorsList;
    private static final android.util.SparseArray sHandleToSensor;
    private final java.util.HashMap mSensorListeners;
    private final java.util.HashMap mTriggerListeners;
    private final android.os.Looper mMainLooper;
    private final int mTargetSdkLevel;

    private static native void nativeClassInit();

    private static native int nativeGetNextSensor(android.hardware.Sensor, int);

    public void <init>(android.content.Context, android.os.Looper)
    {
        android.hardware.SystemSensorManager r0;
        android.content.Context r1;
        android.os.Looper r2;
        java.lang.Object r3, $r10;
        java.util.ArrayList r4;
        int i0, $i1, $i2;
        android.hardware.Sensor r5, $r11;
        java.lang.Throwable r6, $r13;
        java.util.HashMap $r7, $r8;
        android.content.pm.ApplicationInfo $r9;
        boolean $z0;
        android.util.SparseArray $r12;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<android.hardware.SensorManager: void <init>()>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners> = $r8;

        r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper> = r2;

        $r9 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r9.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<android.hardware.SystemSensorManager: int mTargetSdkLevel> = $i1;

        $r10 = <android.hardware.SystemSensorManager: java.lang.Object sSensorModuleLock>;

        r3 = $r10;

        entermonitor $r10;

     label1:
        $z0 = <android.hardware.SystemSensorManager: boolean sSensorModuleInitialized>;

        if $z0 != 0 goto label4;

        <android.hardware.SystemSensorManager: boolean sSensorModuleInitialized> = 1;

        staticinvoke <android.hardware.SystemSensorManager: void nativeClassInit()>();

        r4 = <android.hardware.SystemSensorManager: java.util.ArrayList sFullSensorsList>;

        i0 = 0;

     label2:
        $r11 = new android.hardware.Sensor;

        specialinvoke $r11.<android.hardware.Sensor: void <init>()>();

        r5 = $r11;

        i0 = staticinvoke <android.hardware.SystemSensorManager: int nativeGetNextSensor(android.hardware.Sensor,int)>(r5, i0);

        if i0 < 0 goto label3;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        $r12 = <android.hardware.SystemSensorManager: android.util.SparseArray sHandleToSensor>;

        $i2 = virtualinvoke r5.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r12.<android.util.SparseArray: void append(int,java.lang.Object)>($i2, r5);

     label3:
        if i0 > 0 goto label2;

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r3;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected java.util.List getFullSensorList()
    {
        android.hardware.SystemSensorManager r0;
        java.util.ArrayList $r1;

        r0 := @this: android.hardware.SystemSensorManager;

        $r1 = <android.hardware.SystemSensorManager: java.util.ArrayList sFullSensorsList>;

        return $r1;
    }

    protected boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        int i0, i1, i2, $i4;
        android.os.Handler r3;
        java.util.HashMap r4, $r8, $r9, $r12;
        android.hardware.SystemSensorManager$SensorEventQueue r5, $r11, r16;
        android.os.Looper r6, $r14;
        java.lang.Throwable r7, $r15;
        boolean $z0, $z1;
        java.lang.Object $r10;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Handler;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "sensor or listener is null");

        return 0;

     label02:
        $i4 = virtualinvoke r2.<android.hardware.Sensor: int getReportingMode()>();

        if $i4 != 2 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "Trigger Sensors should use the requestTriggerSensor.");

        return 0;

     label03:
        if i1 < 0 goto label04;

        if i0 >= 0 goto label05;

     label04:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", "maxBatchReportLatencyUs and delayUs should be non-negative");

        return 0;

     label05:
        $r8 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        r4 = $r8;

        entermonitor $r8;

     label06:
        $r9 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (android.hardware.SystemSensorManager$SensorEventQueue) $r10;

        if r5 != null goto label12;

        if r3 == null goto label07;

        $r14 = virtualinvoke r3.<android.os.Handler: android.os.Looper getLooper()>();

        goto label08;

     label07:
        $r14 = r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper>;

     label08:
        r6 = $r14;

        $r11 = new android.hardware.SystemSensorManager$SensorEventQueue;

        specialinvoke $r11.<android.hardware.SystemSensorManager$SensorEventQueue: void <init>(android.hardware.SensorEventListener,android.os.Looper,android.hardware.SystemSensorManager)>(r1, r6, r0);

        r16 = $r11;

        $z1 = virtualinvoke r16.<android.hardware.SystemSensorManager$SensorEventQueue: boolean addSensor(android.hardware.Sensor,int,int,int)>(r2, i0, i1, i2);

        if $z1 != 0 goto label10;

        virtualinvoke r16.<android.hardware.SystemSensorManager$SensorEventQueue: void dispose()>();

        exitmonitor r4;

     label09:
        return 0;

     label10:
        $r12 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r16);

        exitmonitor r4;

     label11:
        return 1;

     label12:
        $z0 = virtualinvoke r5.<android.hardware.SystemSensorManager$SensorEventQueue: boolean addSensor(android.hardware.Sensor,int,int,int)>(r2, i0, i1, i2);

        exitmonitor r4;

     label13:
        return $z0;

     label14:
        $r15 := @caughtexception;

        r7 = $r15;

        exitmonitor r4;

     label15:
        throw r7;

        catch java.lang.Throwable from label06 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorEventListener r1;
        android.hardware.Sensor r2;
        java.util.HashMap r3, $r6, $r7, $r9;
        android.hardware.SystemSensorManager$SensorEventQueue r4;
        boolean z0, $z1;
        java.lang.Throwable r5, $r11;
        java.lang.Object $r8;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 != 2 goto label1;

        return;

     label1:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.SystemSensorManager$SensorEventQueue) $r8;

        if r4 == null goto label5;

        if r2 != null goto label3;

        z0 = virtualinvoke r4.<android.hardware.SystemSensorManager$SensorEventQueue: boolean removeAllSensors()>();

        goto label4;

     label3:
        z0 = virtualinvoke r4.<android.hardware.SystemSensorManager$SensorEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r2, 1);

     label4:
        if z0 == 0 goto label5;

        $z1 = virtualinvoke r4.<android.hardware.SystemSensorManager$SensorEventQueue: boolean hasSensors()>();

        if $z1 != 0 goto label5;

        $r9 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r4.<android.hardware.SystemSensorManager$SensorEventQueue: void dispose()>();

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        java.util.HashMap r3, $r6, $r7, $r11;
        android.hardware.SystemSensorManager$TriggerEventQueue r4, $r9, r15;
        java.lang.Throwable r5, $r14;
        int $i0;
        java.lang.Object $r8;
        boolean $z0, $z1;
        android.os.Looper $r10;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        if r2 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sensor cannot be null");

        throw $r13;

     label01:
        $i0 = virtualinvoke r2.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 == 2 goto label02;

        return 0;

     label02:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        r3 = $r6;

        entermonitor $r6;

     label03:
        $r7 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.SystemSensorManager$TriggerEventQueue) $r8;

        if r4 != null goto label07;

        $r9 = new android.hardware.SystemSensorManager$TriggerEventQueue;

        $r10 = r0.<android.hardware.SystemSensorManager: android.os.Looper mMainLooper>;

        specialinvoke $r9.<android.hardware.SystemSensorManager$TriggerEventQueue: void <init>(android.hardware.TriggerEventListener,android.os.Looper,android.hardware.SystemSensorManager)>(r1, $r10, r0);

        r15 = $r9;

        $z1 = virtualinvoke r15.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean addSensor(android.hardware.Sensor,int,int,int)>(r2, 0, 0, 0);

        if $z1 != 0 goto label05;

        virtualinvoke r15.<android.hardware.SystemSensorManager$TriggerEventQueue: void dispose()>();

        exitmonitor r3;

     label04:
        return 0;

     label05:
        $r11 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r15);

        exitmonitor r3;

     label06:
        return 1;

     label07:
        $z0 = virtualinvoke r4.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean addSensor(android.hardware.Sensor,int,int,int)>(r2, 0, 0, 0);

        exitmonitor r3;

     label08:
        return $z0;

     label09:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r3;

     label10:
        throw r5;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.TriggerEventListener r1;
        android.hardware.Sensor r2;
        boolean z0, z1, $z2;
        java.util.HashMap r3, $r6, $r7, $r9;
        android.hardware.SystemSensorManager$TriggerEventQueue r4;
        java.lang.Throwable r5, $r11;
        java.lang.Object $r8;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.hardware.Sensor;

        z0 := @parameter2: boolean;

        if r2 == null goto label01;

        $i0 = virtualinvoke r2.<android.hardware.Sensor: int getReportingMode()>();

        if $i0 == 2 goto label01;

        return 0;

     label01:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        r3 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.SystemSensorManager$TriggerEventQueue) $r8;

        if r4 == null goto label07;

        if r2 != null goto label03;

        z1 = virtualinvoke r4.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean removeAllSensors()>();

        goto label04;

     label03:
        z1 = virtualinvoke r4.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean removeSensor(android.hardware.Sensor,boolean)>(r2, z0);

     label04:
        if z1 == 0 goto label05;

        $z2 = virtualinvoke r4.<android.hardware.SystemSensorManager$TriggerEventQueue: boolean hasSensors()>();

        if $z2 != 0 goto label05;

        $r9 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mTriggerListeners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r4.<android.hardware.SystemSensorManager$TriggerEventQueue: void dispose()>();

     label05:
        exitmonitor r3;

     label06:
        return z1;

     label07:
        exitmonitor r3;

     label08:
        return 0;

     label09:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label10:
        throw r5;

        catch java.lang.Throwable from label02 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected boolean flushImpl(android.hardware.SensorEventListener)
    {
        android.hardware.SystemSensorManager r0;
        android.hardware.SensorEventListener r1;
        java.util.HashMap r2, $r5, $r6;
        android.hardware.SystemSensorManager$SensorEventQueue r3;
        java.lang.Throwable r4, $r9;
        java.lang.Object $r7;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.hardware.SystemSensorManager;

        r1 := @parameter0: android.hardware.SensorEventListener;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r8;

     label1:
        $r5 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<android.hardware.SystemSensorManager: java.util.HashMap mSensorListeners>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.hardware.SystemSensorManager$SensorEventQueue) $r7;

        if r3 != null goto label4;

        exitmonitor r2;

     label3:
        return 0;

     label4:
        $i0 = virtualinvoke r3.<android.hardware.SystemSensorManager$SensorEventQueue: int flush()>();

        if $i0 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        exitmonitor r2;

     label7:
        return $z0;

     label8:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label9:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    static android.util.SparseArray access$000()
    {
        android.util.SparseArray $r0;

        $r0 = <android.hardware.SystemSensorManager: android.util.SparseArray sHandleToSensor>;

        return $r0;
    }

    static int access$100(android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager r0;
        int $i0;

        r0 := @parameter0: android.hardware.SystemSensorManager;

        $i0 = r0.<android.hardware.SystemSensorManager: int mTargetSdkLevel>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2;

        <android.hardware.SystemSensorManager: boolean sSensorModuleInitialized> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.hardware.SystemSensorManager: java.lang.Object sSensorModuleLock> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.hardware.SystemSensorManager: java.util.ArrayList sFullSensorsList> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.hardware.SystemSensorManager: android.util.SparseArray sHandleToSensor> = $r2;

        return;
    }
}
