public abstract class android.os.AsyncTask extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final int CPU_COUNT;
    private static final int CORE_POOL_SIZE;
    private static final int MAXIMUM_POOL_SIZE;
    private static final int KEEP_ALIVE;
    private static final java.util.concurrent.ThreadFactory sThreadFactory;
    private static final java.util.concurrent.BlockingQueue sPoolWorkQueue;
    public static final java.util.concurrent.Executor THREAD_POOL_EXECUTOR;
    public static final java.util.concurrent.Executor SERIAL_EXECUTOR;
    private static final int MESSAGE_POST_RESULT;
    private static final int MESSAGE_POST_PROGRESS;
    private static final android.os.AsyncTask$InternalHandler sHandler;
    private static volatile java.util.concurrent.Executor sDefaultExecutor;
    private final android.os.AsyncTask$WorkerRunnable mWorker;
    private final java.util.concurrent.FutureTask mFuture;
    private volatile android.os.AsyncTask$Status mStatus;
    private final java.util.concurrent.atomic.AtomicBoolean mCancelled;
    private final java.util.concurrent.atomic.AtomicBoolean mTaskInvoked;

    public static void init()
    {
        android.os.AsyncTask$InternalHandler $r0;

        $r0 = <android.os.AsyncTask: android.os.AsyncTask$InternalHandler sHandler>;

        virtualinvoke $r0.<android.os.AsyncTask$InternalHandler: android.os.Looper getLooper()>();

        return;
    }

    public static void setDefaultExecutor(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r0;

        r0 := @parameter0: java.util.concurrent.Executor;

        <android.os.AsyncTask: java.util.concurrent.Executor sDefaultExecutor> = r0;

        return;
    }

    public void <init>()
    {
        android.os.AsyncTask r0;
        android.os.AsyncTask$Status $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2, $r3;
        android.os.AsyncTask$2 $r4;
        android.os.AsyncTask$3 $r5;
        android.os.AsyncTask$WorkerRunnable $r6;

        r0 := @this: android.os.AsyncTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status PENDING>;

        r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mCancelled> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mTaskInvoked> = $r3;

        $r4 = new android.os.AsyncTask$2;

        specialinvoke $r4.<android.os.AsyncTask$2: void <init>(android.os.AsyncTask)>(r0);

        r0.<android.os.AsyncTask: android.os.AsyncTask$WorkerRunnable mWorker> = $r4;

        $r5 = new android.os.AsyncTask$3;

        $r6 = r0.<android.os.AsyncTask: android.os.AsyncTask$WorkerRunnable mWorker>;

        specialinvoke $r5.<android.os.AsyncTask$3: void <init>(android.os.AsyncTask,java.util.concurrent.Callable)>(r0, $r6);

        r0.<android.os.AsyncTask: java.util.concurrent.FutureTask mFuture> = $r5;

        return;
    }

    private void postResultIfNotInvoked(java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mTaskInvoked>;

        z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if z0 != 0 goto label1;

        specialinvoke r0.<android.os.AsyncTask: java.lang.Object postResult(java.lang.Object)>(r1);

     label1:
        return;
    }

    private java.lang.Object postResult(java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;
        android.os.Message r2;
        android.os.AsyncTask$AsyncTaskResult $r3;
        java.lang.Object[] $r4;
        android.os.AsyncTask$InternalHandler $r5;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object;

        $r5 = <android.os.AsyncTask: android.os.AsyncTask$InternalHandler sHandler>;

        $r3 = new android.os.AsyncTask$AsyncTaskResult;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        specialinvoke $r3.<android.os.AsyncTask$AsyncTaskResult: void <init>(android.os.AsyncTask,java.lang.Object[])>(r0, $r4);

        r2 = virtualinvoke $r5.<android.os.AsyncTask$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r3);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return r1;
    }

    public final android.os.AsyncTask$Status getStatus()
    {
        android.os.AsyncTask r0;
        android.os.AsyncTask$Status $r1;

        r0 := @this: android.os.AsyncTask;

        $r1 = r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus>;

        return $r1;
    }

    protected abstract transient java.lang.Object doInBackground(java.lang.Object[]);

    protected void onPreExecute()
    {
        android.os.AsyncTask r0;

        r0 := @this: android.os.AsyncTask;

        return;
    }

    protected void onPostExecute(java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected transient void onProgressUpdate(java.lang.Object[])
    {
        android.os.AsyncTask r0;
        java.lang.Object[] r1;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object[];

        return;
    }

    protected void onCancelled(java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<android.os.AsyncTask: void onCancelled()>();

        return;
    }

    protected void onCancelled()
    {
        android.os.AsyncTask r0;

        r0 := @this: android.os.AsyncTask;

        return;
    }

    public final boolean isCancelled()
    {
        android.os.AsyncTask r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.os.AsyncTask;

        $r1 = r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mCancelled>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public final boolean cancel(boolean)
    {
        android.os.AsyncTask r0;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.FutureTask $r2;

        r0 := @this: android.os.AsyncTask;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mCancelled>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = r0.<android.os.AsyncTask: java.util.concurrent.FutureTask mFuture>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.FutureTask: boolean cancel(boolean)>(z0);

        return $z1;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        android.os.AsyncTask r0;
        java.util.concurrent.FutureTask $r1;
        java.lang.Object $r2;

        r0 := @this: android.os.AsyncTask;

        $r1 = r0.<android.os.AsyncTask: java.util.concurrent.FutureTask mFuture>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        return $r2;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        android.os.AsyncTask r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.FutureTask $r2;
        java.lang.Object $r3;

        r0 := @this: android.os.AsyncTask;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<android.os.AsyncTask: java.util.concurrent.FutureTask mFuture>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r3;
    }

    public final transient android.os.AsyncTask execute(java.lang.Object[])
    {
        android.os.AsyncTask r0, $r3;
        java.lang.Object[] r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = <android.os.AsyncTask: java.util.concurrent.Executor sDefaultExecutor>;

        $r3 = virtualinvoke r0.<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r2, r1);

        return $r3;
    }

    public final transient android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor, java.lang.Object[])
    {
        android.os.AsyncTask r0;
        java.util.concurrent.Executor r1;
        java.lang.Object[] r2;
        android.os.AsyncTask$Status $r3, $r4, $r5, $r8;
        android.os.AsyncTask$WorkerRunnable $r6;
        java.util.concurrent.FutureTask $r7;
        int[] $r9;
        int $i0, $i1;
        java.lang.IllegalStateException $r10, $r11;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.lang.Object[];

        $r4 = r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus>;

        $r3 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status PENDING>;

        if $r4 == $r3 goto label3;

        $r9 = <android.os.AsyncTask$4: int[] $SwitchMap$android$os$AsyncTask$Status>;

        $r8 = r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus>;

        $i0 = virtualinvoke $r8.<android.os.AsyncTask$Status: int ordinal()>();

        $i1 = $r9[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task is already running.");

        throw $r11;

     label2:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task has already been executed (a task can be executed only once)");

        throw $r10;

     label3:
        $r5 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status RUNNING>;

        r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus> = $r5;

        virtualinvoke r0.<android.os.AsyncTask: void onPreExecute()>();

        $r6 = r0.<android.os.AsyncTask: android.os.AsyncTask$WorkerRunnable mWorker>;

        $r6.<android.os.AsyncTask$WorkerRunnable: java.lang.Object[] mParams> = r2;

        $r7 = r0.<android.os.AsyncTask: java.util.concurrent.FutureTask mFuture>;

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return r0;
    }

    public static void execute(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.Executor $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = <android.os.AsyncTask: java.util.concurrent.Executor sDefaultExecutor>;

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

        return;
    }

    protected final transient void publishProgress(java.lang.Object[])
    {
        android.os.AsyncTask r0;
        java.lang.Object[] r1;
        boolean $z0;
        android.os.AsyncTask$AsyncTaskResult $r2;
        android.os.AsyncTask$InternalHandler $r3;
        android.os.Message $r4;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object[];

        $z0 = virtualinvoke r0.<android.os.AsyncTask: boolean isCancelled()>();

        if $z0 != 0 goto label1;

        $r3 = <android.os.AsyncTask: android.os.AsyncTask$InternalHandler sHandler>;

        $r2 = new android.os.AsyncTask$AsyncTaskResult;

        specialinvoke $r2.<android.os.AsyncTask$AsyncTaskResult: void <init>(android.os.AsyncTask,java.lang.Object[])>(r0, r1);

        $r4 = virtualinvoke $r3.<android.os.AsyncTask$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r2);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    private void finish(java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;
        boolean $z0;
        android.os.AsyncTask$Status $r2;

        r0 := @this: android.os.AsyncTask;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<android.os.AsyncTask: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.os.AsyncTask: void onCancelled(java.lang.Object)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.os.AsyncTask: void onPostExecute(java.lang.Object)>(r1);

     label2:
        $r2 = <android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>;

        r0.<android.os.AsyncTask: android.os.AsyncTask$Status mStatus> = $r2;

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$300(android.os.AsyncTask)
    {
        android.os.AsyncTask r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.os.AsyncTask;

        $r1 = r0.<android.os.AsyncTask: java.util.concurrent.atomic.AtomicBoolean mTaskInvoked>;

        return $r1;
    }

    static java.lang.Object access$400(android.os.AsyncTask, java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: android.os.AsyncTask;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<android.os.AsyncTask: java.lang.Object postResult(java.lang.Object)>(r1);

        return $r2;
    }

    static void access$500(android.os.AsyncTask, java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;

        r0 := @parameter0: android.os.AsyncTask;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<android.os.AsyncTask: void postResultIfNotInvoked(java.lang.Object)>(r1);

        return;
    }

    static void access$600(android.os.AsyncTask, java.lang.Object)
    {
        android.os.AsyncTask r0;
        java.lang.Object r1;

        r0 := @parameter0: android.os.AsyncTask;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<android.os.AsyncTask: void finish(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.os.AsyncTask$1 $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;
        java.util.concurrent.ThreadFactory $r4;
        java.util.concurrent.BlockingQueue $r5;
        java.util.concurrent.TimeUnit $r6;
        android.os.AsyncTask$SerialExecutor $r7;
        java.util.concurrent.Executor $r8;
        android.os.AsyncTask$InternalHandler $r9;

        <android.os.AsyncTask: int MESSAGE_POST_PROGRESS> = 2;

        <android.os.AsyncTask: int MESSAGE_POST_RESULT> = 1;

        <android.os.AsyncTask: int KEEP_ALIVE> = 1;

        <android.os.AsyncTask: java.lang.String LOG_TAG> = "AsyncTask";

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <android.os.AsyncTask: int CPU_COUNT> = $i0;

        $i1 = <android.os.AsyncTask: int CPU_COUNT>;

        $i2 = $i1 + 1;

        <android.os.AsyncTask: int CORE_POOL_SIZE> = $i2;

        $i3 = <android.os.AsyncTask: int CPU_COUNT>;

        $i4 = $i3 * 2;

        $i5 = $i4 + 1;

        <android.os.AsyncTask: int MAXIMUM_POOL_SIZE> = $i5;

        $r1 = new android.os.AsyncTask$1;

        specialinvoke $r1.<android.os.AsyncTask$1: void <init>()>();

        <android.os.AsyncTask: java.util.concurrent.ThreadFactory sThreadFactory> = $r1;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(128);

        <android.os.AsyncTask: java.util.concurrent.BlockingQueue sPoolWorkQueue> = $r2;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $i7 = <android.os.AsyncTask: int CORE_POOL_SIZE>;

        $i6 = <android.os.AsyncTask: int MAXIMUM_POOL_SIZE>;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r5 = <android.os.AsyncTask: java.util.concurrent.BlockingQueue sPoolWorkQueue>;

        $r4 = <android.os.AsyncTask: java.util.concurrent.ThreadFactory sThreadFactory>;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i7, $i6, 1L, $r6, $r5, $r4);

        <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR> = $r3;

        $r7 = new android.os.AsyncTask$SerialExecutor;

        specialinvoke $r7.<android.os.AsyncTask$SerialExecutor: void <init>(android.os.AsyncTask$1)>(null);

        <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR> = $r7;

        $r9 = new android.os.AsyncTask$InternalHandler;

        specialinvoke $r9.<android.os.AsyncTask$InternalHandler: void <init>(android.os.AsyncTask$1)>(null);

        <android.os.AsyncTask: android.os.AsyncTask$InternalHandler sHandler> = $r9;

        $r8 = <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>;

        <android.os.AsyncTask: java.util.concurrent.Executor sDefaultExecutor> = $r8;

        return;
    }
}
