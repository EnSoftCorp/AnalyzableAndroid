public class android.database.sqlite.SQLiteQueryBuilder extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.util.regex.Pattern sLimitPattern;
    private java.util.Map mProjectionMap;
    private java.lang.String mTables;
    private java.lang.StringBuilder mWhereClause;
    private boolean mDistinct;
    private android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private boolean mStrict;

    public void <init>()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = null;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = "";

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = null;

        r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = 0;

        r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = null;

        return;
    }

    public void setDistinct(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = z0;

        return;
    }

    public java.lang.String getTables()
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        return $r1;
    }

    public void setTables(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = r1;

        return;
    }

    public void appendWhere(java.lang.CharSequence)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r8;
        int $i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r2 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = $i1 + 16;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i2);

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r8;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label2;

        $r6 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r1);

        return;
    }

    public void appendWhereEscapeString(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r2 != null goto label1;

        $r7 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 + 16;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i2);

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r7;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label2;

        $r5 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label2:
        $r4 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r4, r1);

        return;
    }

    public void setProjectionMap(java.util.Map)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.util.Map r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.util.Map;

        r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = r1;

        return;
    }

    public void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = r1;

        return;
    }

    public void setStrict(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        z0 := @parameter0: boolean;

        r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mStrict> = z0;

        return;
    }

    public static java.lang.String buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r0, r2, r3, r4, r5, r6, $r13, $r21;
        java.lang.String[] r1;
        java.lang.StringBuilder r7, $r8, $r17, $r19, $r20;
        int $i0;
        java.util.regex.Pattern $r14;
        java.util.regex.Matcher $r16;
        java.lang.IllegalArgumentException $r18, $r22;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: java.lang.String;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label1;

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z4 != 0 goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HAVING clauses are only permitted when using a groupBy clause");

        throw $r22;

     label1:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z2 != 0 goto label2;

        $r14 = <android.database.sqlite.SQLiteQueryBuilder: java.util.regex.Pattern sLimitPattern>;

        $r16 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z3 = virtualinvoke $r16.<java.util.regex.Matcher: boolean matches()>();

        if $z3 != 0 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid LIMIT clauses:");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(120);

        r7 = $r8;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        if z0 == 0 goto label3;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTINCT ");

     label3:
        if r1 == null goto label4;

        $i0 = lengthof r1;

        if $i0 == 0 goto label4;

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>(r7, r1);

        goto label5;

     label4:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

     label5:
        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM ");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r7, " WHERE ", r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r7, " GROUP BY ", r3);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r7, " HAVING ", r4);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r7, " ORDER BY ", r5);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r7, " LIMIT ", r6);

        $r13 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private static void appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label1:
        return;
    }

    public static void appendColumns(java.lang.StringBuilder, java.lang.String[])
    {
        java.lang.StringBuilder r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if r2 == null goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        return;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, r7;
        android.database.Cursor $r8;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, r6, r7, null, null);

        return $r8;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, r7, r8;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, r6, r7, r8, null);

        return $r9;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, r7, r8, r10, $r11, $r12, $r13, $r18, $r24, r25;
        android.os.CancellationSignal r9;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r14;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r21, $r22, $r23;
        android.database.Cursor $r16;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        r9 := @parameter8: android.os.CancellationSignal;

        $r11 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        if $r11 != null goto label1;

        return null;

     label1:
        $z0 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mStrict>;

        if $z0 == 0 goto label2;

        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, $r24, r5, r6, r7, r8);

        specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: void validateQuerySql(android.database.sqlite.SQLiteDatabase,java.lang.String,android.os.CancellationSignal)>(r1, r10, r9);

     label2:
        r25 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r5, r6, r7, r8);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z1 == 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Performing query: ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r18);

     label3:
        $r14 = r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r12 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r13 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r12);

        $r16 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>($r14, r25, r4, $r13, r9);

        return $r16;
    }

    private void validateQuerySql(android.database.sqlite.SQLiteDatabase, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2;
        android.os.CancellationSignal r3;
        android.database.sqlite.SQLiteSession $r4;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        $i0 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(1);

        virtualinvoke $r4.<android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.os.CancellationSignal,android.database.sqlite.SQLiteStatementInfo)>(r2, $i0, r3, null);

        return;
    }

    public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1, r7;
        java.lang.String r2, r3, r4, r5, r6, $r11, $r12, $r13, $r18;
        java.lang.StringBuilder r8, $r9, $r10, $r19, $r22;
        boolean z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 = specialinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>(r1);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r8 = $r9;

        $r10 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        if $r10 == null goto label1;

        $r22 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i1 = virtualinvoke $r22.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $r19 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label3:
        if r2 == null goto label5;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        if z0 == 0 goto label4;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

     label4:
        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label5:
        $z1 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        $r11 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r12 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($z1, $r11, r7, $r12, r3, r4, r5, r6);

        return $r13;
    }

    public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1, r3;
        java.lang.String r2, r4, r5, r6, r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r4, r5, r6, r7);

        return $r8;
    }

    public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r4, r5, r6, r7, r9, $r10, $r13, $r19;
        java.lang.String[] r2, r8;
        java.util.Set r3;
        int i0, i1, i2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r20;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        i1 = lengthof r2;

        r8 = newarray (java.lang.String)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        r9 = r2[i2];

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r8[i2] = $r19;

        goto label5;

     label2:
        if i2 <= i0 goto label3;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z1 == 0 goto label4;

     label3:
        r8[i2] = r9;

        goto label5;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL AS ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r8[i2] = $r13;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r8, r5, r6, r7, null, null);

        return $r10;
    }

    public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String r1, r4, r5, r7, r8, $r9;
        java.lang.String[] r2, r6;
        java.util.Set r3;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String[];

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, i0, r4, r5, r7, r8);

        return $r9;
    }

    public java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1;
        java.lang.String r2, r3, r5, $r7, $r8, $r11;
        java.lang.StringBuilder r4, $r6;
        int i0, i1;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(128);

        r4 = $r6;

        i0 = lengthof r1;

        $z0 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        if $z0 == 0 goto label1;

        $r11 = " UNION ";

        goto label2;

     label1:
        $r11 = " UNION ALL ";

     label2:
        r5 = $r11;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        if i1 <= 0 goto label4;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label4:
        $r8 = r1[i1];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label3;

     label5:
        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, " ORDER BY ", r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, " LIMIT ", r3);

        $r7 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.String[] computeProjection(java.lang.String[])
    {
        android.database.sqlite.SQLiteQueryBuilder r0;
        java.lang.String[] r1, r2, r22;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r3, r4, $r9, $r10, $r17, $r19;
        java.util.Map $r5, $r6, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8, $r11, $r14;
        java.lang.StringBuilder $r15, $r18, $r20;
        java.lang.IllegalArgumentException $r16;
        java.util.Set r21;
        java.util.Iterator r23;
        java.util.Map$Entry r24;

        r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label08;

        $i4 = lengthof r1;

        if $i4 <= 0 goto label08;

        $r12 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if $r12 == null goto label07;

        $i5 = lengthof r1;

        r2 = newarray (java.lang.String)[$i5];

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label06;

        r3 = r1[i1];

        $r13 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (java.lang.String) $r14;

        if r4 == null goto label02;

        r2[i1] = r4;

        goto label05;

     label02:
        $z2 = r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mStrict>;

        if $z2 != 0 goto label04;

        $z3 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(" AS ");

        if $z3 != 0 goto label03;

        $z4 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(" as ");

        if $z4 == 0 goto label04;

     label03:
        r2[i1] = r3;

        goto label05;

     label04:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid column ");

        $r17 = r1[i1];

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        return r2;

     label07:
        return r1;

     label08:
        $r5 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if $r5 == null goto label12;

        $r6 = r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        r21 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $i2 = interfaceinvoke r21.<java.util.Set: int size()>();

        r22 = newarray (java.lang.String)[$i2];

        r23 = interfaceinvoke r21.<java.util.Set: java.util.Iterator iterator()>();

        i6 = 0;

     label09:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("_count");

        if $z1 == 0 goto label10;

        goto label09;

     label10:
        $i3 = i6;

        i6 = i6 + 1;

        $r11 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r11;

        r22[$i3] = $r10;

        goto label09;

     label11:
        return r22;

     label12:
        return null;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <android.database.sqlite.SQLiteQueryBuilder: java.lang.String TAG> = "SQLiteQueryBuilder";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*\\d+\\s*(,\\s*\\d+\\s*)?");

        <android.database.sqlite.SQLiteQueryBuilder: java.util.regex.Pattern sLimitPattern> = $r0;

        return;
    }
}
