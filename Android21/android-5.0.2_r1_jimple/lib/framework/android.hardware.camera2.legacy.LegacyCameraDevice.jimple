public class android.hardware.camera2.legacy.LegacyCameraDevice extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final java.lang.String DEBUG_PROP;
    private final java.lang.String TAG;
    private static final boolean DEBUG;
    private final int mCameraId;
    private final android.hardware.camera2.CameraCharacteristics mStaticCharacteristics;
    private final android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks;
    private final android.hardware.camera2.legacy.CameraDeviceState mDeviceState;
    private java.util.List mConfiguredSurfaces;
    private boolean mClosed;
    private final android.os.ConditionVariable mIdle;
    private final android.os.HandlerThread mResultThread;
    private final android.os.HandlerThread mCallbackHandlerThread;
    private final android.os.Handler mCallbackHandler;
    private final android.os.Handler mResultHandler;
    private static final int ILLEGAL_VALUE;
    private final android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener;
    private final android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager;

    private android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.camera2.impl.CaptureResultExtras $r2, $r3;
        int $i0, $i1;
        long $l2;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.hardware.camera2.legacy.RequestHolder;

        if r1 != null goto label1;

        $r3 = new android.hardware.camera2.impl.CaptureResultExtras;

        specialinvoke $r3.<android.hardware.camera2.impl.CaptureResultExtras: void <init>(int,int,int,int,long,int)>(-1, -1, -1, -1, -1L, -1);

        return $r3;

     label1:
        $r2 = new android.hardware.camera2.impl.CaptureResultExtras;

        $i0 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: int getRequestId()>();

        $i1 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: int getSubsequeceId()>();

        $l2 = virtualinvoke r1.<android.hardware.camera2.legacy.RequestHolder: long getFrameNumber()>();

        specialinvoke $r2.<android.hardware.camera2.impl.CaptureResultExtras: void <init>(int,int,int,int,long,int)>($i0, $i1, 0, 0, $l2, 1);

        return $r2;
    }

    static boolean needsConversion(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.view.Surface;

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r0);

        if i0 == 35 goto label1;

        if i0 == 842094169 goto label1;

        if i0 != 17 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void <init>(int, android.hardware.Camera, android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.ICameraDeviceCallbacks)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0, $i1;
        android.hardware.Camera r1;
        android.hardware.camera2.CameraCharacteristics r2;
        android.hardware.camera2.ICameraDeviceCallbacks r3;
        android.hardware.camera2.legacy.CameraDeviceState $r4, $r23, $r25;
        android.os.ConditionVariable $r5;
        android.os.HandlerThread $r6, $r7, $r13, $r15, $r17, $r19;
        android.hardware.camera2.legacy.LegacyCameraDevice$1 $r8;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        java.lang.String $r11;
        android.os.Handler $r12, $r16, $r20;
        android.os.Looper $r14, $r18;
        android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener $r21;
        android.hardware.camera2.legacy.RequestThreadManager $r22, $r24;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.Camera;

        r2 := @parameter2: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter3: android.hardware.camera2.ICameraDeviceCallbacks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.hardware.camera2.legacy.CameraDeviceState;

        specialinvoke $r4.<android.hardware.camera2.legacy.CameraDeviceState: void <init>()>();

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState> = $r4;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed> = 0;

        $r5 = new android.os.ConditionVariable;

        specialinvoke $r5.<android.os.ConditionVariable: void <init>(boolean)>(1);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle> = $r5;

        $r6 = new android.os.HandlerThread;

        specialinvoke $r6.<android.os.HandlerThread: void <init>(java.lang.String)>("ResultThread");

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread> = $r6;

        $r7 = new android.os.HandlerThread;

        specialinvoke $r7.<android.os.HandlerThread: void <init>(java.lang.String)>("CallbackThread");

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread> = $r7;

        $r8 = new android.hardware.camera2.legacy.LegacyCameraDevice$1;

        specialinvoke $r8.<android.hardware.camera2.legacy.LegacyCameraDevice$1: void <init>(android.hardware.camera2.legacy.LegacyCameraDevice)>(r0);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener> = $r8;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: int mCameraId> = i0;

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks> = r3;

        $r9 = newarray (java.lang.Object)[1];

        $i1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: int mCameraId>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice-%d-LE", $r9);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG> = $r11;

        $r13 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r13.<android.os.HandlerThread: void start()>();

        $r12 = new android.os.Handler;

        $r15 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $r14 = virtualinvoke $r15.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r12.<android.os.Handler: void <init>(android.os.Looper)>($r14);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mResultHandler> = $r12;

        $r17 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r17.<android.os.HandlerThread: void start()>();

        $r16 = new android.os.Handler;

        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $r18 = virtualinvoke $r19.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r16.<android.os.Handler: void <init>(android.os.Looper)>($r18);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mCallbackHandler> = $r16;

        $r23 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        $r20 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mCallbackHandler>;

        $r21 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener mStateListener>;

        virtualinvoke $r23.<android.hardware.camera2.legacy.CameraDeviceState: void setCameraDeviceCallbacks(android.os.Handler,android.hardware.camera2.legacy.CameraDeviceState$CameraDeviceStateListener)>($r20, $r21);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.CameraCharacteristics mStaticCharacteristics> = r2;

        $r22 = new android.hardware.camera2.legacy.RequestThreadManager;

        $r25 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        specialinvoke $r22.<android.hardware.camera2.legacy.RequestThreadManager: void <init>(int,android.hardware.Camera,android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.legacy.CameraDeviceState)>(i0, r1, r2, $r25);

        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager> = $r22;

        $r24 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r24.<android.hardware.camera2.legacy.RequestThreadManager: void start()>();

        return;
    }

    public int configureOutputs(java.util.List)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        java.util.List r1;
        java.util.Iterator r2;
        android.view.Surface r3;
        android.hardware.camera2.params.StreamConfigurationMap r4;
        android.util.Size r5;
        int i0, $i1, $i2;
        android.util.Size[] r6;
        java.lang.String r7, $r17, $r19, $r21, $r26, $r28, $r29;
        android.hardware.camera2.legacy.CameraDeviceState $r8, $r11;
        boolean $z0, $z1, $z2, z3;
        java.util.ArrayList $r9;
        android.hardware.camera2.legacy.RequestThreadManager $r10;
        java.lang.Object $r12, $r15;
        android.hardware.camera2.CameraCharacteristics $r13;
        android.hardware.camera2.CameraCharacteristics$Key $r14;
        java.lang.StringBuilder $r16, $r18, $r20;
        java.lang.Object[] $r22;
        java.lang.Integer $r23, $r24, $r25;
        android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException $r27, r30;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: java.util.List;

        if r1 == null goto label12;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.view.Surface) $r12;

        if r3 != null goto label02;

        $r28 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r28, "configureOutputs - null outputs are not allowed");

        return -22;

     label02:
        $r13 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.CameraCharacteristics mStaticCharacteristics>;

        $r14 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r15 = virtualinvoke $r13.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r14);

        r4 = (android.hardware.camera2.params.StreamConfigurationMap) $r15;

     label03:
        r5 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)>(r3);

        i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)>(r3);

        r6 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(i0);

        if r6 != null goto label05;

        if i0 < 1 goto label04;

        if i0 > 5 goto label04;

        r6 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(35);

        goto label05;

     label04:
        if i0 != 33 goto label05;

        r6 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(256);

     label05:
        $z2 = staticinvoke <android.hardware.camera2.utils.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r6, r5);

        if $z2 != 0 goto label09;

        if r6 != null goto label06;

        $r19 = "format is invalid.";

        goto label07;

     label06:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size not in valid set: ");

        $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r6);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        r7 = $r19;

        $r21 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r22 = newarray (java.lang.Object)[4];

        $i1 = virtualinvoke r5.<android.util.Size: int getWidth()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r22[0] = $r23;

        $i2 = virtualinvoke r5.<android.util.Size: int getHeight()>();

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r22[1] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r22[2] = $r25;

        $r22[3] = r7;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Surface with size (w=%d, h=%d) and format 0x%x is not valid, %s", $r22);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r21, $r26);

     label08:
        return -22;

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

        r30 = $r27;

        $r29 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r29, "Surface bufferqueue is abandoned, cannot configure as output: ", r30);

        return -22;

     label11:
        goto label01;

     label12:
        z3 = 0;

        $r8 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        $z0 = virtualinvoke $r8.<android.hardware.camera2.legacy.CameraDeviceState: boolean setConfiguring()>();

        if $z0 == 0 goto label13;

        $r10 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r10.<android.hardware.camera2.legacy.RequestThreadManager: void configure(java.util.Collection)>(r1);

        $r11 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.CameraDeviceState mDeviceState>;

        z3 = virtualinvoke $r11.<android.hardware.camera2.legacy.CameraDeviceState: boolean setIdle()>();

     label13:
        if z3 == 0 goto label16;

        if r1 == null goto label14;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        goto label15;

     label14:
        $r9 = null;

     label15:
        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List mConfiguredSurfaces> = $r9;

        goto label17;

     label16:
        return -38;

     label17:
        return 0;

        catch android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException from label03 to label08 with label10;
    }

    public int submitRequestList(java.util.List, boolean, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        java.util.List r1, r3, $r9, $r10, $r11, $r17;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.hardware.camera2.utils.LongParcelable r2;
        java.util.Iterator r4, r6;
        android.hardware.camera2.CaptureRequest r5;
        android.view.Surface r7;
        java.lang.String $r8, $r19, $r20, $r21, $r22;
        android.os.ConditionVariable $r12;
        int $i1;
        android.hardware.camera2.legacy.RequestThreadManager $r13;
        java.util.Collection $r14, $r16;
        java.lang.Object $r15, $r18;
        java.util.ArrayList r23;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.hardware.camera2.utils.LongParcelable;

        if r1 == null goto label01;

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label02;

     label01:
        $r8 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r8, "submitRequestList - Empty/null requests are not allowed");

        return -22;

     label02:
        $r9 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List mConfiguredSurfaces>;

        if $r9 != null goto label03;

        r23 = new java.util.ArrayList;

        $r11 = r23;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

        goto label04;

     label03:
        $r10 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List mConfiguredSurfaces>;

        $r11 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List getSurfaceIds(java.util.Collection)>($r10);

     label04:
        r3 = $r11;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CaptureRequest) $r15;

        $r14 = virtualinvoke r5.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        $z3 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label06;

        $r21 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r21, "submitRequestList - Each request must have at least one Surface target");

        return -22;

     label06:
        $r16 = virtualinvoke r5.<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()>();

        r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.view.Surface) $r18;

        if r7 != null goto label08;

        $r22 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r22, "submitRequestList - Null Surface targets are not allowed");

        return -22;

     label08:
        $r17 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List mConfiguredSurfaces>;

        if $r17 != null goto label09;

        $r20 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r20, "submitRequestList - must configure  device with valid surfaces before submitting requests");

        return -38;

     label09:
        $z5 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: boolean containsSurfaceId(android.view.Surface,java.util.Collection)>(r7, r3);

        if $z5 != 0 goto label10;

        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r19, "submitRequestList - cannot use a surface that wasn\'t configured");

        return -22;

     label10:
        goto label07;

     label11:
        goto label05;

     label12:
        $r12 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        virtualinvoke $r12.<android.os.ConditionVariable: void close()>();

        $r13 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        $i1 = virtualinvoke $r13.<android.hardware.camera2.legacy.RequestThreadManager: int submitCaptureRequests(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>(r1, z0, r2);

        return $i1;
    }

    public int submitRequest(android.hardware.camera2.CaptureRequest, boolean, android.hardware.camera2.utils.LongParcelable)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.CaptureRequest r1;
        boolean z0;
        android.hardware.camera2.utils.LongParcelable r2;
        java.util.ArrayList r3, $r4;
        int $i0;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.hardware.camera2.utils.LongParcelable;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3 = $r4;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $i0 = virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: int submitRequestList(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>(r3, z0, r2);

        return $i0;
    }

    public long cancelRequest(int)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        int i0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;
        long $l1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        $l1 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: long cancelRepeating(int)>(i0);

        return $l1;
    }

    public void waitUntilIdle()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.ConditionVariable $r1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        virtualinvoke $r1.<android.os.ConditionVariable: void block()>();

        return;
    }

    public long flush()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        long l0;
        android.hardware.camera2.legacy.RequestThreadManager $r1;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        l0 = virtualinvoke $r1.<android.hardware.camera2.legacy.RequestThreadManager: long flush()>();

        virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: void waitUntilIdle()>();

        return l0;
    }

    public boolean isClosed()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $z0 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed>;

        return $z0;
    }

    public void close()
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestThreadManager $r2;
        android.os.HandlerThread $r3, $r4, $r5, $r6, $r9, $r12, $r18, $r19;
        java.lang.InterruptedException $r7, $r16;
        java.lang.Object[] $r8, $r15;
        java.lang.String $r10, $r11, $r14, $r17, $r20, $r22;
        java.lang.Long $r13, $r21;
        long $l0, $l2;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r2 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.legacy.RequestThreadManager mRequestThreadManager>;

        virtualinvoke $r2.<android.hardware.camera2.legacy.RequestThreadManager: void quit()>();

        $r3 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quitSafely()>();

        $r4 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r4.<android.os.HandlerThread: boolean quitSafely()>();

     label1:
        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        virtualinvoke $r5.<android.os.HandlerThread: void join()>();

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r15 = newarray (java.lang.Object)[2];

        $r18 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $r20 = virtualinvoke $r18.<android.os.HandlerThread: java.lang.String getName()>();

        $r15[0] = $r20;

        $r19 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mCallbackHandlerThread>;

        $l2 = virtualinvoke $r19.<android.os.HandlerThread: long getId()>();

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r15[1] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r15);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r17, $r22);

     label4:
        $r6 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        virtualinvoke $r6.<android.os.HandlerThread: void join()>();

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r10 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $r11 = virtualinvoke $r9.<android.os.HandlerThread: java.lang.String getName()>();

        $r8[0] = $r11;

        $r12 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.HandlerThread mResultThread>;

        $l0 = virtualinvoke $r12.<android.os.HandlerThread: long getId()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Thread %s (%d) interrupted while quitting.", $r8);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r10, $r14);

     label7:
        r0.<android.hardware.camera2.legacy.LegacyCameraDevice: boolean mClosed> = 1;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.utils.CameraRuntimeException r1, $r3;
        java.lang.Throwable r2, $r10;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String $r5, $r7, $r9;

        r0 := @this: android.hardware.camera2.legacy.LegacyCameraDevice;

     label1:
        virtualinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label7;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r5 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got error while trying to finalize, ignoring: ");

        $r7 = virtualinvoke r1.<android.hardware.camera2.utils.CameraRuntimeException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r9);

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label7;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

     label6:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r2;

     label7:
        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static android.util.Size getSurfaceSize(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int[] r1;
        int $i0, $i2, $i3;
        android.util.Size $r3;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = newarray (int)[2];

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceDimens(android.view.Surface,int[])>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        $r3 = new android.util.Size;

        $i3 = r1[0];

        $i2 = r1[1];

        specialinvoke $r3.<android.util.Size: void <init>(int,int)>($i3, $i2);

        return $r3;
    }

    static int detectSurfaceType(android.view.Surface) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int $i0, $i1;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectSurfaceType(android.view.Surface)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        return $i1;
    }

    static void configureSurface(android.view.Surface, int, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, i2, $i5;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "width must be positive.");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "height must be positive.");

        $i5 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeConfigureSurface(android.view.Surface,int,int,int)>(r0, i0, i1, i2);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i5);

        return;
    }

    static void produceFrame(android.view.Surface, byte[], int, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        byte[] r1;
        int i0, i1, i2, $i5;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "width must be positive.");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "height must be positive.");

        $i5 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeProduceFrame(android.view.Surface,byte[],int,int,int)>(r0, r1, i0, i1, i2);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i5);

        return;
    }

    static void setSurfaceFormat(android.view.Surface, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, $i1;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceFormat(android.view.Surface,int)>(r0, i0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i1);

        return;
    }

    static void setSurfaceDimens(android.view.Surface, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, $i4;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "width must be positive.");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i1, "height must be positive.");

        $i4 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceDimens(android.view.Surface,int,int)>(r0, i0, i1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i4);

        return;
    }

    static long getSurfaceId(android.view.Surface)
    {
        android.view.Surface r0;
        long $l0;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long nativeGetSurfaceId(android.view.Surface)>(r0);

        return $l0;
    }

    static java.util.List getSurfaceIds(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        android.view.Surface r3;
        long l0;
        boolean $z0;
        java.lang.Object $r5;
        byte $b1;
        java.lang.Long $r6;
        java.lang.IllegalStateException $r7;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null argument surfaces");

        throw $r8;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.view.Surface) $r5;

        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r3);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label3;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Configured surface had null native GraphicBufferProducer pointer!");

        throw $r7;

     label3:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label4:
        return r1;
    }

    static boolean containsSurfaceId(android.view.Surface, java.util.Collection)
    {
        android.view.Surface r0;
        java.util.Collection r1;
        long l0;
        java.lang.Long $r2;
        boolean $z0;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: java.util.Collection;

        l0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)>(r0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    static void setSurfaceOrientation(android.view.Surface, int, int) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        int i0, i1, $i2;

        r0 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i2 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetSurfaceOrientation(android.view.Surface,int,int)>(r0, i0, i1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i2);

        return;
    }

    static android.util.Size getTextureSize(android.graphics.SurfaceTexture) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.graphics.SurfaceTexture r0;
        int[] r1;
        int $i0, $i2, $i3;
        android.util.Size $r3;

        r0 := @parameter0: android.graphics.SurfaceTexture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = newarray (int)[2];

        $i0 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeDetectTextureDimens(android.graphics.SurfaceTexture,int[])>(r0, r1);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i0);

        $r3 = new android.util.Size;

        $i3 = r1[0];

        $i2 = r1[1];

        specialinvoke $r3.<android.util.Size: void <init>(int,int)>($i3, $i2);

        return $r3;
    }

    static void setNextTimestamp(android.view.Surface, long) throws android.hardware.camera2.legacy.LegacyExceptionUtils$BufferQueueAbandonedException
    {
        android.view.Surface r0;
        long l0;
        int $i1;

        r0 := @parameter0: android.view.Surface;

        l0 := @parameter1: long;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = staticinvoke <android.hardware.camera2.legacy.LegacyCameraDevice: int nativeSetNextTimestamp(android.view.Surface,long)>(r0, l0);

        staticinvoke <android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)>($i1);

        return;
    }

    private static native int nativeDetectSurfaceType(android.view.Surface);

    private static native int nativeDetectSurfaceDimens(android.view.Surface, int[]);

    private static native int nativeConfigureSurface(android.view.Surface, int, int, int);

    private static native int nativeProduceFrame(android.view.Surface, byte[], int, int, int);

    private static native int nativeSetSurfaceFormat(android.view.Surface, int);

    private static native int nativeSetSurfaceDimens(android.view.Surface, int, int);

    private static native long nativeGetSurfaceId(android.view.Surface);

    private static native int nativeSetSurfaceOrientation(android.view.Surface, int, int);

    private static native int nativeDetectTextureDimens(android.graphics.SurfaceTexture, int[]);

    private static native int nativeSetNextTimestamp(android.view.Surface, long);

    static native int nativeGetJpegFooterSize();

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <android.hardware.camera2.legacy.LegacyCameraDevice: boolean DEBUG>;

        return $z0;
    }

    static java.lang.String access$100(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String TAG>;

        return $r1;
    }

    static android.os.ConditionVariable access$200(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.ConditionVariable mIdle>;

        return $r1;
    }

    static android.hardware.camera2.impl.CaptureResultExtras access$300(android.hardware.camera2.legacy.LegacyCameraDevice, android.hardware.camera2.legacy.RequestHolder)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.legacy.RequestHolder r1;
        android.hardware.camera2.impl.CaptureResultExtras $r2;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        r1 := @parameter1: android.hardware.camera2.legacy.RequestHolder;

        $r2 = specialinvoke r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.impl.CaptureResultExtras getExtrasFromRequest(android.hardware.camera2.legacy.RequestHolder)>(r1);

        return $r2;
    }

    static android.hardware.camera2.ICameraDeviceCallbacks access$400(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.hardware.camera2.ICameraDeviceCallbacks $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.hardware.camera2.ICameraDeviceCallbacks mDeviceCallbacks>;

        return $r1;
    }

    static android.os.Handler access$500(android.hardware.camera2.legacy.LegacyCameraDevice)
    {
        android.hardware.camera2.legacy.LegacyCameraDevice r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.hardware.camera2.legacy.LegacyCameraDevice;

        $r1 = r0.<android.hardware.camera2.legacy.LegacyCameraDevice: android.os.Handler mResultHandler>;

        return $r1;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.camera2.legacy.LegacyCameraDevice: int ILLEGAL_VALUE> = -1;

        <android.hardware.camera2.legacy.LegacyCameraDevice: java.lang.String DEBUG_PROP> = "HAL1ShimLogging";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("HAL1ShimLogging", 3);

        <android.hardware.camera2.legacy.LegacyCameraDevice: boolean DEBUG> = $z0;

        return;
    }
}
