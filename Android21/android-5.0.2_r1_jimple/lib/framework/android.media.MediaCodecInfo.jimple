public final class android.media.MediaCodecInfo extends java.lang.Object
{
    private boolean mIsEncoder;
    private java.lang.String mName;
    private java.util.Map mCaps;
    private static final android.util.Range POSITIVE_INTEGERS;
    private static final android.util.Range POSITIVE_LONGS;
    private static final android.util.Range POSITIVE_RATIONALS;
    private static final android.util.Range SIZE_RANGE;
    private static final android.util.Range FRAME_RATE_RANGE;
    private static final int ERROR_UNRECOGNIZED;
    private static final int ERROR_UNSUPPORTED;
    private static final int ERROR_NONE_SUPPORTED;

    void <init>(java.lang.String, boolean, android.media.MediaCodecInfo$CodecCapabilities[])
    {
        android.media.MediaCodecInfo r0;
        java.lang.String r1, $r7;
        boolean z0;
        android.media.MediaCodecInfo$CodecCapabilities[] r2, r3;
        int i0, i1;
        android.media.MediaCodecInfo$CodecCapabilities r4;
        java.util.HashMap $r5;
        java.util.Map $r6;

        r0 := @this: android.media.MediaCodecInfo;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.media.MediaCodecInfo$CodecCapabilities[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodecInfo: java.lang.String mName> = r1;

        r0.<android.media.MediaCodecInfo: boolean mIsEncoder> = z0;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaCodecInfo: java.util.Map mCaps> = $r5;

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        $r6 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r7 = virtualinvoke r4.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public final java.lang.String getName()
    {
        android.media.MediaCodecInfo r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodecInfo;

        $r1 = r0.<android.media.MediaCodecInfo: java.lang.String mName>;

        return $r1;
    }

    public final boolean isEncoder()
    {
        android.media.MediaCodecInfo r0;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo;

        $z0 = r0.<android.media.MediaCodecInfo: boolean mIsEncoder>;

        return $z0;
    }

    public final java.lang.String[] getSupportedTypes()
    {
        android.media.MediaCodecInfo r0;
        java.util.Set r1;
        java.lang.String[] r2, $r4;
        java.util.Map $r3;
        int $i0;
        java.lang.Object[] $r5;

        r0 := @this: android.media.MediaCodecInfo;

        $r3 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        r1 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r2 = (java.lang.String[]) $r5;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r2);

        return r2;
    }

    private static int checkPowerOfTwo(int, java.lang.String)
    {
        int i0, $i1, $i2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = i0 - 1;

        $i2 = i0 & $i1;

        if $i2 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label1:
        return i0;
    }

    public final android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)
    {
        android.media.MediaCodecInfo r0;
        java.lang.String r1;
        android.media.MediaCodecInfo$CodecCapabilities r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.media.MediaCodecInfo;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.media.MediaCodecInfo$CodecCapabilities) $r4;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("codec does not support type");

        throw $r6;

     label1:
        $r5 = virtualinvoke r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities dup()>();

        return $r5;
    }

    public android.media.MediaCodecInfo makeRegular()
    {
        android.media.MediaCodecInfo r0, $r8;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        android.media.MediaCodecInfo$CodecCapabilities r3;
        java.util.Map $r5, $r7;
        java.util.Collection $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r9;
        android.media.MediaCodecInfo$CodecCapabilities[] $r10, $r11;
        java.lang.Object[] $r12;
        java.lang.Object $r13;

        r0 := @this: android.media.MediaCodecInfo;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $r5 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.MediaCodecInfo$CodecCapabilities) $r13;

        $z2 = virtualinvoke r3.<android.media.MediaCodecInfo$CodecCapabilities: boolean isRegular()>();

        if $z2 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label4;

        return null;

     label4:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $i2 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i1 != $i2 goto label5;

        return r0;

     label5:
        $r8 = new android.media.MediaCodecInfo;

        $r9 = r0.<android.media.MediaCodecInfo: java.lang.String mName>;

        $z1 = r0.<android.media.MediaCodecInfo: boolean mIsEncoder>;

        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r10 = newarray (android.media.MediaCodecInfo$CodecCapabilities)[$i3];

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r11 = (android.media.MediaCodecInfo$CodecCapabilities[]) $r12;

        specialinvoke $r8.<android.media.MediaCodecInfo: void <init>(java.lang.String,boolean,android.media.MediaCodecInfo$CodecCapabilities[])>($r9, $z1, $r11);

        return $r8;
    }

    static android.util.Range access$000()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_INTEGERS>;

        return $r0;
    }

    static android.util.Range access$100()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range SIZE_RANGE>;

        return $r0;
    }

    static android.util.Range access$200()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range FRAME_RATE_RANGE>;

        return $r0;
    }

    static android.util.Range access$300()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_LONGS>;

        return $r0;
    }

    static android.util.Range access$400()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_RATIONALS>;

        return $r0;
    }

    static int access$500(int, java.lang.String)
    {
        int i0, $i1;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.media.MediaCodecInfo: int checkPowerOfTwo(int,java.lang.String)>(i0, r0);

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r9, $r10, $r12, $r13;
        android.util.Range $r2, $r5, $r8, $r11, $r14;
        java.lang.Long $r3, $r4;
        android.util.Rational $r6, $r7;

        <android.media.MediaCodecInfo: int ERROR_NONE_SUPPORTED> = 4;

        <android.media.MediaCodecInfo: int ERROR_UNSUPPORTED> = 2;

        <android.media.MediaCodecInfo: int ERROR_UNRECOGNIZED> = 1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r2 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r0, $r1);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_INTEGERS> = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r5 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_LONGS> = $r5;

        $r6 = new android.util.Rational;

        specialinvoke $r6.<android.util.Rational: void <init>(int,int)>(1, 2147483647);

        $r7 = new android.util.Rational;

        specialinvoke $r7.<android.util.Rational: void <init>(int,int)>(2147483647, 1);

        $r8 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r6, $r7);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_RATIONALS> = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        $r11 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r9, $r10);

        <android.media.MediaCodecInfo: android.util.Range SIZE_RANGE> = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(960);

        $r14 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r12, $r13);

        <android.media.MediaCodecInfo: android.util.Range FRAME_RATE_RANGE> = $r14;

        return;
    }
}
