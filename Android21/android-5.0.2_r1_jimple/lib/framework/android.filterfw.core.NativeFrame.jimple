public class android.filterfw.core.NativeFrame extends android.filterfw.core.Frame
{
    private int nativeFrameId;

    void <init>(android.filterfw.core.FrameFormat, android.filterfw.core.FrameManager)
    {
        android.filterfw.core.NativeFrame r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FrameManager r2;
        int i0;
        boolean $z1;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FrameManager;

        specialinvoke r0.<android.filterfw.core.Frame: void <init>(android.filterfw.core.FrameFormat,android.filterfw.core.FrameManager)>(r1, r2);

        r0.<android.filterfw.core.NativeFrame: int nativeFrameId> = -1;

        i0 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getSize()>();

        specialinvoke r0.<android.filterfw.core.NativeFrame: boolean nativeAllocate(int)>(i0);

        if i0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r0.<android.filterfw.core.NativeFrame: void setReusable(boolean)>($z1);

        return;
    }

    protected synchronized void releaseNativeAllocation()
    {
        android.filterfw.core.NativeFrame r0;

        r0 := @this: android.filterfw.core.NativeFrame;

        specialinvoke r0.<android.filterfw.core.NativeFrame: boolean nativeDeallocate()>();

        r0.<android.filterfw.core.NativeFrame: int nativeFrameId> = -1;

        return;
    }

    protected synchronized boolean hasNativeAllocation()
    {
        android.filterfw.core.NativeFrame r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.filterfw.core.NativeFrame;

        $i0 = r0.<android.filterfw.core.NativeFrame: int nativeFrameId>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getCapacity()
    {
        android.filterfw.core.NativeFrame r0;
        int $i0;

        r0 := @this: android.filterfw.core.NativeFrame;

        $i0 = specialinvoke r0.<android.filterfw.core.NativeFrame: int getNativeCapacity()>();

        return $i0;
    }

    public java.lang.Object getObjectValue()
    {
        android.filterfw.core.NativeFrame r0;
        java.lang.Class r1, $r4;
        android.filterfw.core.FrameFormat $r2, $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.RuntimeException $r6, $r7, $r8, $r10;
        java.nio.ByteBuffer $r9;
        java.lang.Exception $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String $r16;
        android.filterfw.core.NativeBuffer r17;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getBaseType()>();

        if $i0 == 8 goto label1;

        $r9 = virtualinvoke r0.<android.filterfw.core.NativeFrame: java.nio.ByteBuffer getData()>();

        return $r9;

     label1:
        $r3 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        r1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()>();

        if r1 != null goto label2;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to get object data from frame that does not specify a structure object class!");

        throw $r8;

     label2:
        $r4 = class "android/filterfw/core/NativeBuffer";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label3;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("NativeFrame object class must be a subclass of NativeBuffer!");

        throw $r7;

     label3:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        r17 = (android.filterfw.core.NativeBuffer) $r5;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate new structure instance of type \'");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label6:
        $z1 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean getNativeBuffer(android.filterfw.core.NativeBuffer)>(r17);

        if $z1 != 0 goto label7;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not get the native structured data for frame!");

        throw $r6;

     label7:
        virtualinvoke r17.<android.filterfw.core.NativeBuffer: void attachToFrame(android.filterfw.core.Frame)>(r0);

        return r17;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void setInts(int[])
    {
        android.filterfw.core.NativeFrame r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.filterfw.core.FrameFormat $r2, $r9;
        boolean $z0;
        java.lang.RuntimeException $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.filterfw.core.NativeFrame: void assertFrameMutable()>();

        $i0 = lengthof r1;

        $i1 = staticinvoke <android.filterfw.core.NativeFrame: int nativeIntSize()>();

        $i2 = $i0 * $i1;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i2 <= $i3 goto label1;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NativeFrame cannot hold ");

        $i4 = lengthof r1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integers. (Can only hold ");

        $r9 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i6 = virtualinvoke $r9.<android.filterfw.core.FrameFormat: int getSize()>();

        $i5 = staticinvoke <android.filterfw.core.NativeFrame: int nativeIntSize()>();

        $i7 = $i6 / $i5;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integers).");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        $z0 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean setNativeInts(int[])>(r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for native frame!");

        throw $r3;

     label2:
        return;
    }

    public int[] getInts()
    {
        android.filterfw.core.NativeFrame r0;
        android.filterfw.core.FrameFormat $r1;
        int $i0;
        int[] $r2;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r1 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r1.<android.filterfw.core.FrameFormat: int getSize()>();

        $r2 = specialinvoke r0.<android.filterfw.core.NativeFrame: int[] getNativeInts(int)>($i0);

        return $r2;
    }

    public void setFloats(float[])
    {
        android.filterfw.core.NativeFrame r0;
        float[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.filterfw.core.FrameFormat $r2, $r9;
        boolean $z0;
        java.lang.RuntimeException $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: float[];

        virtualinvoke r0.<android.filterfw.core.NativeFrame: void assertFrameMutable()>();

        $i0 = lengthof r1;

        $i1 = staticinvoke <android.filterfw.core.NativeFrame: int nativeFloatSize()>();

        $i2 = $i0 * $i1;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i2 <= $i3 goto label1;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NativeFrame cannot hold ");

        $i4 = lengthof r1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" floats. (Can only hold ");

        $r9 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i6 = virtualinvoke $r9.<android.filterfw.core.FrameFormat: int getSize()>();

        $i5 = staticinvoke <android.filterfw.core.NativeFrame: int nativeFloatSize()>();

        $i7 = $i6 / $i5;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" floats).");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        $z0 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean setNativeFloats(float[])>(r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set int values for native frame!");

        throw $r3;

     label2:
        return;
    }

    public float[] getFloats()
    {
        android.filterfw.core.NativeFrame r0;
        android.filterfw.core.FrameFormat $r1;
        int $i0;
        float[] $r2;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r1 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r1.<android.filterfw.core.FrameFormat: int getSize()>();

        $r2 = specialinvoke r0.<android.filterfw.core.NativeFrame: float[] getNativeFloats(int)>($i0);

        return $r2;
    }

    public void setData(java.nio.ByteBuffer, int, int)
    {
        android.filterfw.core.NativeFrame r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte[] r2;
        android.filterfw.core.FrameFormat $r3, $r8;
        boolean $z0;
        java.lang.RuntimeException $r4, $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r21;
        java.lang.String $r12, $r20;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<android.filterfw.core.NativeFrame: void assertFrameMutable()>();

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i2 = i1 + i0;

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        if $i2 <= $i3 goto label1;

        $r15 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Offset and length exceed buffer size in native setData: ");

        $i6 = i1 + i0;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes given, but only ");

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes available!");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label1:
        $r3 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i4 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i4 == i1 goto label2;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data size in setData does not match native frame size: Frame size is ");

        $r8 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i5 = virtualinvoke $r8.<android.filterfw.core.FrameFormat: int getSize()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, but ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes given!");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label2:
        $z0 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean setNativeData(byte[],int,int)>(r2, i0, i1);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set native frame data!");

        throw $r4;

     label3:
        return;
    }

    public java.nio.ByteBuffer getData()
    {
        android.filterfw.core.NativeFrame r0;
        byte[] r1;
        android.filterfw.core.FrameFormat $r2;
        int $i0;
        java.nio.ByteBuffer $r3;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getSize()>();

        r1 = specialinvoke r0.<android.filterfw.core.NativeFrame: byte[] getNativeData(int)>($i0);

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label2:
        return $r3;
    }

    public void setBitmap(android.graphics.Bitmap)
    {
        android.filterfw.core.NativeFrame r0;
        android.graphics.Bitmap r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.filterfw.core.FrameFormat $r3, $r4, $r6, $r7;
        java.lang.RuntimeException $r5, $r8, $r9;
        boolean $z0;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: android.graphics.Bitmap;

        virtualinvoke r0.<android.filterfw.core.NativeFrame: void assertFrameMutable()>();

        $r3 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getNumberOfDimensions()>();

        if $i2 == 2 goto label1;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to set Bitmap for non 2-dimensional native frame!");

        throw $r9;

     label1:
        $r4 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r4.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i4 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i3 != $i4 goto label2;

        $r6 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i5 = virtualinvoke $r6.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i6 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i5 == $i6 goto label3;

     label2:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bitmap dimensions do not match native frame dimensions!");

        throw $r5;

     label3:
        r2 = staticinvoke <android.filterfw.core.NativeFrame: android.graphics.Bitmap convertBitmapToRGBA(android.graphics.Bitmap)>(r1);

        i0 = virtualinvoke r2.<android.graphics.Bitmap: int getByteCount()>();

        $r7 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        i1 = virtualinvoke $r7.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        $z0 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean setNativeBitmap(android.graphics.Bitmap,int,int)>(r2, i0, i1);

        if $z0 != 0 goto label4;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not set native frame bitmap data!");

        throw $r8;

     label4:
        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        android.filterfw.core.NativeFrame r0;
        android.graphics.Bitmap r1;
        int i0, i1, $i2, $i3, $i4;
        android.filterfw.core.FrameFormat $r2, $r3, $r4, $r6;
        android.graphics.Bitmap$Config $r5;
        boolean $z0;
        java.lang.RuntimeException $r7, $r8;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getNumberOfDimensions()>();

        if $i2 == 2 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to get Bitmap for non 2-dimensional native frame!");

        throw $r7;

     label1:
        $r3 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $r4 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i4 = virtualinvoke $r4.<android.filterfw.core.FrameFormat: int getHeight()>();

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r5);

        i0 = virtualinvoke r1.<android.graphics.Bitmap: int getByteCount()>();

        $r6 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        i1 = virtualinvoke $r6.<android.filterfw.core.FrameFormat: int getBytesPerSample()>();

        $z0 = specialinvoke r0.<android.filterfw.core.NativeFrame: boolean getNativeBitmap(android.graphics.Bitmap,int,int)>(r1, i0, i1);

        if $z0 != 0 goto label2;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not get bitmap data from native frame!");

        throw $r8;

     label2:
        return r1;
    }

    public void setDataFromFrame(android.filterfw.core.Frame)
    {
        android.filterfw.core.NativeFrame r0, $r6;
        android.filterfw.core.Frame r1;
        android.filterfw.core.FrameFormat $r2, $r3, $r9, $r14;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        android.filterfw.core.GLFrame $r5;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15, $r16;
        java.lang.String $r17;

        r0 := @this: android.filterfw.core.NativeFrame;

        r1 := @parameter0: android.filterfw.core.Frame;

        $r2 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r2.<android.filterfw.core.FrameFormat: int getSize()>();

        $r3 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r3.<android.filterfw.core.FrameFormat: int getSize()>();

        if $i0 >= $i1 goto label1;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to assign frame of size ");

        $r9 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r9.<android.filterfw.core.FrameFormat: int getSize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smaller native frame of size ");

        $r14 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r14.<android.filterfw.core.FrameFormat: int getSize()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r7;

     label1:
        $z0 = r1 instanceof android.filterfw.core.NativeFrame;

        if $z0 == 0 goto label2;

        $r6 = (android.filterfw.core.NativeFrame) r1;

        specialinvoke r0.<android.filterfw.core.NativeFrame: boolean nativeCopyFromNative(android.filterfw.core.NativeFrame)>($r6);

        goto label5;

     label2:
        $z1 = r1 instanceof android.filterfw.core.GLFrame;

        if $z1 == 0 goto label3;

        $r5 = (android.filterfw.core.GLFrame) r1;

        specialinvoke r0.<android.filterfw.core.NativeFrame: boolean nativeCopyFromGL(android.filterfw.core.GLFrame)>($r5);

        goto label5;

     label3:
        $z2 = r1 instanceof android.filterfw.core.SimpleFrame;

        if $z2 == 0 goto label4;

        $r4 = virtualinvoke r1.<android.filterfw.core.Frame: java.lang.Object getObjectValue()>();

        virtualinvoke r0.<android.filterfw.core.NativeFrame: void setObjectValue(java.lang.Object)>($r4);

        goto label5;

     label4:
        specialinvoke r0.<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)>(r1);

     label5:
        return;
    }

    public java.lang.String toString()
    {
        android.filterfw.core.NativeFrame r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        int $i0, $i1;
        android.filterfw.core.FrameFormat $r5;
        java.lang.String $r9;

        r0 := @this: android.filterfw.core.NativeFrame;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NativeFrame id: ");

        $i0 = r0.<android.filterfw.core.NativeFrame: int nativeFrameId>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke r0.<android.filterfw.core.NativeFrame: android.filterfw.core.FrameFormat getFormat()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") of size ");

        $i1 = virtualinvoke r0.<android.filterfw.core.NativeFrame: int getCapacity()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private native boolean nativeAllocate(int);

    private native boolean nativeDeallocate();

    private native int getNativeCapacity();

    private static native int nativeIntSize();

    private static native int nativeFloatSize();

    private native boolean setNativeData(byte[], int, int);

    private native byte[] getNativeData(int);

    private native boolean getNativeBuffer(android.filterfw.core.NativeBuffer);

    private native boolean setNativeInts(int[]);

    private native boolean setNativeFloats(float[]);

    private native int[] getNativeInts(int);

    private native float[] getNativeFloats(int);

    private native boolean setNativeBitmap(android.graphics.Bitmap, int, int);

    private native boolean getNativeBitmap(android.graphics.Bitmap, int, int);

    private native boolean nativeCopyFromNative(android.filterfw.core.NativeFrame);

    private native boolean nativeCopyFromGL(android.filterfw.core.GLFrame);

    static void <clinit>()
    {
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("filterfw");

        return;
    }
}
