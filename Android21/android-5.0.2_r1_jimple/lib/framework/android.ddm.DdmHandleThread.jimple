public class android.ddm.DdmHandleThread extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_THEN;
    public static final int CHUNK_THCR;
    public static final int CHUNK_THDE;
    public static final int CHUNK_THST;
    public static final int CHUNK_STKL;
    private static android.ddm.DdmHandleThread mInstance;

    private void <init>()
    {
        android.ddm.DdmHandleThread r0;

        r0 := @this: android.ddm.DdmHandleThread;

        specialinvoke r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    public static void register()
    {
        android.ddm.DdmHandleThread $r0, $r1, $r2;
        int $i0, $i1, $i2;

        $i0 = <android.ddm.DdmHandleThread: int CHUNK_THEN>;

        $r0 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        $r1 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i1, $r1);

        $i2 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        $r2 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i2, $r2);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleThread r0;

        r0 := @this: android.ddm.DdmHandleThread;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleThread r0;

        r0 := @this: android.ddm.DdmHandleThread;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: android.ddm.DdmHandleThread;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 = r1.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THEN>;

        if i0 != $i1 goto label1;

        $r10 = specialinvoke r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleTHEN(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r10;

     label1:
        $i2 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        if i0 != $i2 goto label2;

        $r9 = specialinvoke r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleTHST(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r9;

     label2:
        $i3 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        if i0 != $i3 goto label3;

        $r8 = specialinvoke r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleSTKL(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r8;

     label3:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r5 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleTHEN(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1;
        java.nio.ByteBuffer r2;
        boolean z0, $z1;
        byte $b0;

        r0 := @this: android.ddm.DdmHandleThread;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r2 = staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        $b0 = virtualinvoke r2.<java.nio.ByteBuffer: byte get()>();

        if $b0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: void threadNotify(boolean)>(z0);

        return null;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleTHST(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r4, $r5;
        byte[] r3;
        int $i0, $i1;

        r0 := @this: android.ddm.DdmHandleThread;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        r3 = staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: byte[] getThreadStats()>();

        if r3 == null goto label1;

        $r5 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        $i0 = lengthof r3;

        specialinvoke $r5.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, r3, 0, $i0);

        return $r5;

     label1:
        $r4 = staticinvoke <android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, "Can\'t build THST chunk");

        return $r4;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleSTKL(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r4, $r5;
        java.nio.ByteBuffer r2;
        int i0;
        java.lang.StackTraceElement[] r3;

        r0 := @this: android.ddm.DdmHandleThread;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r2 = staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        i0 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        r3 = staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: java.lang.StackTraceElement[] getStackTraceById(int)>(i0);

        if r3 != null goto label1;

        $r5 = staticinvoke <android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, "Stack trace unavailable");

        return $r5;

     label1:
        $r4 = specialinvoke r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createStackChunk(java.lang.StackTraceElement[],int)>(r3, i0);

        return $r4;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk createStackChunk(java.lang.StackTraceElement[], int)
    {
        android.ddm.DdmHandleThread r0;
        java.lang.StackTraceElement[] r1, r2, r26;
        int i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i25;
        byte b1;
        java.lang.StackTraceElement r3, r4;
        org.apache.harmony.dalvik.ddmc.Chunk $r8;
        java.lang.String $r9, $r10, $r12, $r13, $r16, $r18, $r19, $r21, $r22, $r23, $r24;
        java.nio.ByteBuffer r25;

        r0 := @this: android.ddm.DdmHandleThread;

        r1 := @parameter0: java.lang.StackTraceElement[];

        i0 := @parameter1: int;

        b1 = 0;

        i18 = b1 + 4;

        i19 = i18 + 4;

        i20 = i19 + 4;

        r2 = r1;

        i2 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r3 = r2[i3];

        $r21 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i10 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i11 = $i10 * 2;

        $i13 = 4 + $i11;

        i21 = i20 + $i13;

        $r22 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $i12 = virtualinvoke $r22.<java.lang.String: int length()>();

        $i14 = $i12 * 2;

        $i15 = 4 + $i14;

        i22 = i21 + $i15;

        i23 = i22 + 4;

        $r23 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r23 == null goto label2;

        $r24 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $i16 = virtualinvoke $r24.<java.lang.String: int length()>();

        $i17 = $i16 * 2;

        i23 = i23 + $i17;

     label2:
        i20 = i23 + 4;

        i3 = i3 + 1;

        goto label1;

     label3:
        r25 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i20);

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $i4 = lengthof r1;

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

        r26 = r1;

        i24 = lengthof r26;

        i25 = 0;

     label4:
        if i25 >= i24 goto label7;

        r4 = r26[i25];

        $r9 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i6 = virtualinvoke $r9.<java.lang.String: int length()>();

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i6);

        $r10 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>(r25, $r10);

        $r12 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $i7 = virtualinvoke $r12.<java.lang.String: int length()>();

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i7);

        $r13 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>(r25, $r13);

        $r16 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r16 == null goto label5;

        $r18 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $i9 = virtualinvoke $r18.<java.lang.String: int length()>();

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i9);

        $r19 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>(r25, $r19);

        goto label6;

     label5:
        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

     label6:
        $i8 = virtualinvoke r4.<java.lang.StackTraceElement: int getLineNumber()>();

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i8);

        i25 = i25 + 1;

        goto label4;

     label7:
        $r8 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i5 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        specialinvoke $r8.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i5, r25);

        return $r8;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4;
        android.ddm.DdmHandleThread $r0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THEN");

        <android.ddm.DdmHandleThread: int CHUNK_THEN> = $i0;

        $i1 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THCR");

        <android.ddm.DdmHandleThread: int CHUNK_THCR> = $i1;

        $i2 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THDE");

        <android.ddm.DdmHandleThread: int CHUNK_THDE> = $i2;

        $i3 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THST");

        <android.ddm.DdmHandleThread: int CHUNK_THST> = $i3;

        $i4 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("STKL");

        <android.ddm.DdmHandleThread: int CHUNK_STKL> = $i4;

        $r0 = new android.ddm.DdmHandleThread;

        specialinvoke $r0.<android.ddm.DdmHandleThread: void <init>()>();

        <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance> = $r0;

        return;
    }
}
