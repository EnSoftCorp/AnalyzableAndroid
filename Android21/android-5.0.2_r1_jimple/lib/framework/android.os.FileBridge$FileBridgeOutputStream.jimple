public class android.os.FileBridge$FileBridgeOutputStream extends java.io.OutputStream
{
    private final android.os.ParcelFileDescriptor mClientPfd;
    private final java.io.FileDescriptor mClient;
    private final byte[] mTemp;

    public void <init>(android.os.ParcelFileDescriptor)
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        android.os.ParcelFileDescriptor r1;
        byte[] $r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = newarray (byte)[8];

        r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp> = $r2;

        r0.<android.os.FileBridge$FileBridgeOutputStream: android.os.ParcelFileDescriptor mClientPfd> = r1;

        $r3 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient> = $r3;

        return;
    }

    public void <init>(java.io.FileDescriptor)
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        java.io.FileDescriptor r1;
        byte[] $r2;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = newarray (byte)[8];

        r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp> = $r2;

        r0.<android.os.FileBridge$FileBridgeOutputStream: android.os.ParcelFileDescriptor mClientPfd> = null;

        r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        java.lang.Throwable r1, $r4;
        java.io.FileDescriptor $r2, $r5;
        android.os.ParcelFileDescriptor $r3, $r6;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

     label1:
        specialinvoke r0.<android.os.FileBridge$FileBridgeOutputStream: void writeCommandAndBlock(int,java.lang.String)>(3, "close()");

     label2:
        $r2 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r2);

        $r3 = r0.<android.os.FileBridge$FileBridgeOutputStream: android.os.ParcelFileDescriptor mClientPfd>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        $r5 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r5);

        $r6 = r0.<android.os.FileBridge$FileBridgeOutputStream: android.os.ParcelFileDescriptor mClientPfd>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r6);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void fsync() throws java.io.IOException
    {
        android.os.FileBridge$FileBridgeOutputStream r0;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        specialinvoke r0.<android.os.FileBridge$FileBridgeOutputStream: void writeCommandAndBlock(int,java.lang.String)>(2, "fsync()");

        return;
    }

    private void writeCommandAndBlock(int, java.lang.String) throws java.io.IOException
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r13;
        java.nio.ByteOrder $r2, $r15;
        byte[] $r3, $r4, $r6, $r14;
        java.io.FileDescriptor $r5, $r7;
        java.io.IOException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>($r3, 0, i0, $r2);

        $r5 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        $r4 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        staticinvoke <libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>($r5, $r4, 0, 8);

        $r7 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        $r6 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        $i1 = staticinvoke <libcore.io.IoBridge: int read(java.io.FileDescriptor,byte[],int,int)>($r7, $r6, 0, 8);

        if $i1 != 8 goto label1;

        $r14 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        $r15 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        $i2 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r14, 0, $r15);

        if $i2 != i0 goto label1;

        return;

     label1:
        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to execute ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" across bridge");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r8;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        byte[] r1, $r3, $r5, $r6;
        int i0, i1, $i2;
        java.nio.ByteOrder $r2, $r4;
        java.io.FileDescriptor $r7, $r8;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r3 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>($r3, 0, 1, $r2);

        $r5 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>($r5, 4, i1, $r4);

        $r7 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        $r6 = r0.<android.os.FileBridge$FileBridgeOutputStream: byte[] mTemp>;

        staticinvoke <libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>($r7, $r6, 0, 8);

        $r8 = r0.<android.os.FileBridge$FileBridgeOutputStream: java.io.FileDescriptor mClient>;

        staticinvoke <libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>($r8, r1, i0, i1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        android.os.FileBridge$FileBridgeOutputStream r0;
        int i0;

        r0 := @this: android.os.FileBridge$FileBridgeOutputStream;

        i0 := @parameter0: int;

        staticinvoke <libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)>(r0, i0);

        return;
    }
}
