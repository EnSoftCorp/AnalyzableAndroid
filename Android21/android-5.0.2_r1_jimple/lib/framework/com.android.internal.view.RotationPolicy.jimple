public final class com.android.internal.view.RotationPolicy extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int CURRENT_ROTATION;
    private static final int NATURAL_ROTATION;

    private void <init>()
    {
        com.android.internal.view.RotationPolicy r0;

        r0 := @this: com.android.internal.view.RotationPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isRotationSupported(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.res.Resources $r2;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.sensor.accelerometer");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.screen.portrait");

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.screen.landscape");

        if $z2 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956901);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static int getRotationLockOrientation(android.content.Context)
    {
        android.content.Context r0;
        android.graphics.Point r1, $r4;
        android.view.IWindowManager r2;
        boolean $z0;
        int $i0, $i1;
        byte $b2;
        android.os.RemoteException $r5;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <com.android.internal.view.RotationPolicy: boolean areAllRotationsAllowed(android.content.Context)>(r0);

        if $z0 != 0 goto label5;

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r1 = $r4;

        r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

     label1:
        interfaceinvoke r2.<android.view.IWindowManager: void getInitialDisplaySize(int,android.graphics.Point)>(0, r1);

        $i1 = r1.<android.graphics.Point: int x>;

        $i0 = r1.<android.graphics.Point: int y>;

        if $i1 >= $i0 goto label2;

        $b2 = 1;

        goto label3;

     label2:
        $b2 = 2;

     label3:
        return $b2;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RotationPolicy", "Unable to get the display size");

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public static boolean isRotationLockToggleVisible(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, $z1;
        android.content.ContentResolver $r1;
        int $i0;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <com.android.internal.view.RotationPolicy: boolean isRotationSupported(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "hide_rotation_lock_toggle_for_accessibility", 0, -2);

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isRotationLocked(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver $r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "accelerometer_rotation", 0, -2);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void setRotationLock(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0, $z2;
        byte b0, $b1;
        android.content.ContentResolver $r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "hide_rotation_lock_toggle_for_accessibility", 0, -2);

        $z2 = staticinvoke <com.android.internal.view.RotationPolicy: boolean areAllRotationsAllowed(android.content.Context)>(r0);

        if $z2 == 0 goto label1;

        $b1 = -1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        b0 = $b1;

        staticinvoke <com.android.internal.view.RotationPolicy: void setRotationLock(boolean,int)>(z0, b0);

        return;
    }

    public static void setRotationLockForAccessibility(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0;
        android.content.ContentResolver $r1;
        byte $b0;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "hide_rotation_lock_toggle_for_accessibility", $b0, -2);

        staticinvoke <com.android.internal.view.RotationPolicy: void setRotationLock(boolean,int)>(z0, 0);

        return;
    }

    private static boolean areAllRotationsAllowed(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17956902);

        return $z0;
    }

    private static void setRotationLock(boolean, int)
    {
        boolean z0;
        int i0;
        com.android.internal.view.RotationPolicy$1 $r0;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r0 = new com.android.internal.view.RotationPolicy$1;

        specialinvoke $r0.<com.android.internal.view.RotationPolicy$1: void <init>(boolean,int)>(z0, i0);

        staticinvoke <android.os.AsyncTask: void execute(java.lang.Runnable)>($r0);

        return;
    }

    public static void registerRotationPolicyListener(android.content.Context, com.android.internal.view.RotationPolicy$RotationPolicyListener)
    {
        android.content.Context r0;
        com.android.internal.view.RotationPolicy$RotationPolicyListener r1;
        int $i0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.internal.view.RotationPolicy$RotationPolicyListener;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        staticinvoke <com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener,int)>(r0, r1, $i0);

        return;
    }

    public static void registerRotationPolicyListener(android.content.Context, com.android.internal.view.RotationPolicy$RotationPolicyListener, int)
    {
        android.content.Context r0;
        com.android.internal.view.RotationPolicy$RotationPolicyListener r1;
        int i0;
        android.content.ContentResolver $r2, $r5;
        android.net.Uri $r3, $r6;
        android.database.ContentObserver $r4, $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.internal.view.RotationPolicy$RotationPolicyListener;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("accelerometer_rotation");

        $r4 = r1.<com.android.internal.view.RotationPolicy$RotationPolicyListener: android.database.ContentObserver mObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 0, $r4, i0);

        $r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("hide_rotation_lock_toggle_for_accessibility");

        $r7 = r1.<com.android.internal.view.RotationPolicy$RotationPolicyListener: android.database.ContentObserver mObserver>;

        virtualinvoke $r5.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r6, 0, $r7, i0);

        return;
    }

    public static void unregisterRotationPolicyListener(android.content.Context, com.android.internal.view.RotationPolicy$RotationPolicyListener)
    {
        android.content.Context r0;
        com.android.internal.view.RotationPolicy$RotationPolicyListener r1;
        android.content.ContentResolver $r2;
        android.database.ContentObserver $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.internal.view.RotationPolicy$RotationPolicyListener;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = r1.<com.android.internal.view.RotationPolicy$RotationPolicyListener: android.database.ContentObserver mObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.view.RotationPolicy: int NATURAL_ROTATION> = 0;

        <com.android.internal.view.RotationPolicy: int CURRENT_ROTATION> = -1;

        <com.android.internal.view.RotationPolicy: java.lang.String TAG> = "RotationPolicy";

        return;
    }
}
