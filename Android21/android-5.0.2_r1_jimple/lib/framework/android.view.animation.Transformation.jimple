public class android.view.animation.Transformation extends java.lang.Object
{
    public static final int TYPE_IDENTITY;
    public static final int TYPE_ALPHA;
    public static final int TYPE_MATRIX;
    public static final int TYPE_BOTH;
    protected android.graphics.Matrix mMatrix;
    protected float mAlpha;
    protected int mTransformationType;
    private boolean mHasClipRect;
    private android.graphics.Rect mClipRect;

    public void <init>()
    {
        android.view.animation.Transformation r0;
        android.graphics.Rect $r1;

        r0 := @this: android.view.animation.Transformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.view.animation.Transformation: android.graphics.Rect mClipRect> = $r1;

        virtualinvoke r0.<android.view.animation.Transformation: void clear()>();

        return;
    }

    public void clear()
    {
        android.view.animation.Transformation r0;
        android.graphics.Matrix $r1, $r2, $r4;
        android.graphics.Rect $r3;

        r0 := @this: android.view.animation.Transformation;

        $r1 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        if $r1 != null goto label1;

        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix> = $r4;

        goto label2;

     label1:
        $r2 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: void reset()>();

     label2:
        $r3 = r0.<android.view.animation.Transformation: android.graphics.Rect mClipRect>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.animation.Transformation: boolean mHasClipRect> = 0;

        r0.<android.view.animation.Transformation: float mAlpha> = 1.0F;

        r0.<android.view.animation.Transformation: int mTransformationType> = 3;

        return;
    }

    public int getTransformationType()
    {
        android.view.animation.Transformation r0;
        int $i0;

        r0 := @this: android.view.animation.Transformation;

        $i0 = r0.<android.view.animation.Transformation: int mTransformationType>;

        return $i0;
    }

    public void setTransformationType(int)
    {
        android.view.animation.Transformation r0;
        int i0;

        r0 := @this: android.view.animation.Transformation;

        i0 := @parameter0: int;

        r0.<android.view.animation.Transformation: int mTransformationType> = i0;

        return;
    }

    public void set(android.view.animation.Transformation)
    {
        android.view.animation.Transformation r0, r1;
        float $f0;
        android.graphics.Matrix $r2, $r3;
        boolean $z0;
        android.graphics.Rect $r4, $r5;
        int $i0;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: android.view.animation.Transformation;

        $f0 = virtualinvoke r1.<android.view.animation.Transformation: float getAlpha()>();

        r0.<android.view.animation.Transformation: float mAlpha> = $f0;

        $r2 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        $r3 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r3);

        $z0 = r1.<android.view.animation.Transformation: boolean mHasClipRect>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Rect getClipRect()>();

        virtualinvoke r0.<android.view.animation.Transformation: void setClipRect(android.graphics.Rect)>($r5);

        goto label2;

     label1:
        r0.<android.view.animation.Transformation: boolean mHasClipRect> = 0;

        $r4 = r0.<android.view.animation.Transformation: android.graphics.Rect mClipRect>;

        virtualinvoke $r4.<android.graphics.Rect: void setEmpty()>();

     label2:
        $i0 = virtualinvoke r1.<android.view.animation.Transformation: int getTransformationType()>();

        r0.<android.view.animation.Transformation: int mTransformationType> = $i0;

        return;
    }

    public void compose(android.view.animation.Transformation)
    {
        android.view.animation.Transformation r0, r1;
        float $f0, $f1, $f2;
        android.graphics.Matrix $r2, $r3;
        boolean $z1;
        android.graphics.Rect $r4;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: android.view.animation.Transformation;

        $f0 = r0.<android.view.animation.Transformation: float mAlpha>;

        $f1 = virtualinvoke r1.<android.view.animation.Transformation: float getAlpha()>();

        $f2 = $f0 * $f1;

        r0.<android.view.animation.Transformation: float mAlpha> = $f2;

        $r2 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        $r3 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>($r3);

        $z1 = r1.<android.view.animation.Transformation: boolean mHasClipRect>;

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Rect getClipRect()>();

        virtualinvoke r0.<android.view.animation.Transformation: void setClipRect(android.graphics.Rect)>($r4);

     label1:
        return;
    }

    public void postCompose(android.view.animation.Transformation)
    {
        android.view.animation.Transformation r0, r1;
        float $f0, $f1, $f2;
        android.graphics.Matrix $r2, $r3;
        boolean $z1;
        android.graphics.Rect $r4;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: android.view.animation.Transformation;

        $f0 = r0.<android.view.animation.Transformation: float mAlpha>;

        $f1 = virtualinvoke r1.<android.view.animation.Transformation: float getAlpha()>();

        $f2 = $f0 * $f1;

        r0.<android.view.animation.Transformation: float mAlpha> = $f2;

        $r2 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        $r3 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r3);

        $z1 = r1.<android.view.animation.Transformation: boolean mHasClipRect>;

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Rect getClipRect()>();

        virtualinvoke r0.<android.view.animation.Transformation: void setClipRect(android.graphics.Rect)>($r4);

     label1:
        return;
    }

    public android.graphics.Matrix getMatrix()
    {
        android.view.animation.Transformation r0;
        android.graphics.Matrix $r1;

        r0 := @this: android.view.animation.Transformation;

        $r1 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        return $r1;
    }

    public void setAlpha(float)
    {
        android.view.animation.Transformation r0;
        float f0;

        r0 := @this: android.view.animation.Transformation;

        f0 := @parameter0: float;

        r0.<android.view.animation.Transformation: float mAlpha> = f0;

        return;
    }

    public void setClipRect(android.graphics.Rect)
    {
        android.view.animation.Transformation r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.animation.Transformation: void setClipRect(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void setClipRect(int, int, int, int)
    {
        android.view.animation.Transformation r0;
        int i0, i1, i2, i3;
        android.graphics.Rect $r1;

        r0 := @this: android.view.animation.Transformation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.view.animation.Transformation: android.graphics.Rect mClipRect>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        r0.<android.view.animation.Transformation: boolean mHasClipRect> = 1;

        return;
    }

    public android.graphics.Rect getClipRect()
    {
        android.view.animation.Transformation r0;
        android.graphics.Rect $r1;

        r0 := @this: android.view.animation.Transformation;

        $r1 = r0.<android.view.animation.Transformation: android.graphics.Rect mClipRect>;

        return $r1;
    }

    public boolean hasClipRect()
    {
        android.view.animation.Transformation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Transformation;

        $z0 = r0.<android.view.animation.Transformation: boolean mHasClipRect>;

        return $z0;
    }

    public float getAlpha()
    {
        android.view.animation.Transformation r0;
        float $f0;

        r0 := @this: android.view.animation.Transformation;

        $f0 = r0.<android.view.animation.Transformation: float mAlpha>;

        return $f0;
    }

    public java.lang.String toString()
    {
        android.view.animation.Transformation r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r4;

        r0 := @this: android.view.animation.Transformation;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transformation");

        virtualinvoke r0.<android.view.animation.Transformation: void toShortString(java.lang.StringBuilder)>(r1);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String toShortString()
    {
        android.view.animation.Transformation r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.view.animation.Transformation;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64);

        r1 = $r2;

        virtualinvoke r0.<android.view.animation.Transformation: void toShortString(java.lang.StringBuilder)>(r1);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void toShortString(java.lang.StringBuilder)
    {
        android.view.animation.Transformation r0;
        java.lang.StringBuilder r1;
        float $f0;
        android.graphics.Matrix $r5;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{alpha=");

        $f0 = r0.<android.view.animation.Transformation: float mAlpha>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" matrix=");

        $r5 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        virtualinvoke $r5.<android.graphics.Matrix: void toShortString(java.lang.StringBuilder)>(r1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        return;
    }

    public void printShortString(java.io.PrintWriter)
    {
        android.view.animation.Transformation r0;
        java.io.PrintWriter r1;
        float $f0;
        android.graphics.Matrix $r2;

        r0 := @this: android.view.animation.Transformation;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("{alpha=");

        $f0 = r0.<android.view.animation.Transformation: float mAlpha>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" matrix=");

        $r2 = r0.<android.view.animation.Transformation: android.graphics.Matrix mMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: void printShortString(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(125);

        return;
    }

    public static void <clinit>()
    {
        <android.view.animation.Transformation: int TYPE_BOTH> = 3;

        <android.view.animation.Transformation: int TYPE_MATRIX> = 2;

        <android.view.animation.Transformation: int TYPE_ALPHA> = 1;

        <android.view.animation.Transformation: int TYPE_IDENTITY> = 0;

        return;
    }
}
