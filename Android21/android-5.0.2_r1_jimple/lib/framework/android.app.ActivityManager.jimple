public class android.app.ActivityManager extends java.lang.Object
{
    private static java.lang.String TAG;
    private static boolean localLOGV;
    private static int gMaxRecentTasks;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    public static final java.lang.String META_HOME_ALTERNATE;
    public static final int START_NOT_VOICE_COMPATIBLE;
    public static final int START_CANCELED;
    public static final int START_NOT_ACTIVITY;
    public static final int START_PERMISSION_DENIED;
    public static final int START_FORWARD_AND_REQUEST_CONFLICT;
    public static final int START_CLASS_NOT_FOUND;
    public static final int START_INTENT_NOT_RESOLVED;
    public static final int START_SUCCESS;
    public static final int START_RETURN_INTENT_TO_CALLER;
    public static final int START_TASK_TO_FRONT;
    public static final int START_DELIVERED_TO_TOP;
    public static final int START_SWITCHES_CANCELED;
    public static final int START_RETURN_LOCK_TASK_MODE_VIOLATION;
    public static final int START_FLAG_ONLY_IF_NEEDED;
    public static final int START_FLAG_DEBUG;
    public static final int START_FLAG_OPENGL_TRACES;
    public static final int BROADCAST_SUCCESS;
    public static final int BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    public static final int INTENT_SENDER_BROADCAST;
    public static final int INTENT_SENDER_ACTIVITY;
    public static final int INTENT_SENDER_ACTIVITY_RESULT;
    public static final int INTENT_SENDER_SERVICE;
    public static final int USER_OP_SUCCESS;
    public static final int USER_OP_UNKNOWN_USER;
    public static final int USER_OP_IS_CURRENT;
    public static final int PROCESS_STATE_PERSISTENT;
    public static final int PROCESS_STATE_PERSISTENT_UI;
    public static final int PROCESS_STATE_TOP;
    public static final int PROCESS_STATE_IMPORTANT_FOREGROUND;
    public static final int PROCESS_STATE_IMPORTANT_BACKGROUND;
    public static final int PROCESS_STATE_BACKUP;
    public static final int PROCESS_STATE_HEAVY_WEIGHT;
    public static final int PROCESS_STATE_SERVICE;
    public static final int PROCESS_STATE_RECEIVER;
    public static final int PROCESS_STATE_HOME;
    public static final int PROCESS_STATE_LAST_ACTIVITY;
    public static final int PROCESS_STATE_CACHED_ACTIVITY;
    public static final int PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
    public static final int PROCESS_STATE_CACHED_EMPTY;
    android.graphics.Point mAppTaskThumbnailSize;
    public static final int COMPAT_MODE_ALWAYS;
    public static final int COMPAT_MODE_NEVER;
    public static final int COMPAT_MODE_UNKNOWN;
    public static final int COMPAT_MODE_DISABLED;
    public static final int COMPAT_MODE_ENABLED;
    public static final int COMPAT_MODE_TOGGLE;
    public static final int RECENT_WITH_EXCLUDED;
    public static final int RECENT_IGNORE_UNAVAILABLE;
    public static final int RECENT_INCLUDE_PROFILES;
    public static final int RECENT_IGNORE_HOME_STACK_TASKS;
    public static final int REMOVE_TASK_KILL_PROCESS;
    public static final int MOVE_TASK_WITH_HOME;
    public static final int MOVE_TASK_NO_USER_ACTION;

    void <init>(android.content.Context, android.os.Handler)
    {
        android.app.ActivityManager r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.app.ActivityManager: android.content.Context mContext> = r1;

        r0.<android.app.ActivityManager: android.os.Handler mHandler> = r2;

        return;
    }

    public int getFrontActivityScreenCompatMode()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = interfaceinvoke $r2.<android.app.IActivityManager: int getFrontActivityScreenCompatMode()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFrontActivityScreenCompatMode(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void setFrontActivityScreenCompatMode(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPackageScreenCompatMode(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.app.IActivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = interfaceinvoke $r3.<android.app.IActivityManager: int getPackageScreenCompatMode(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPackageScreenCompatMode(java.lang.String, int)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        int i0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>(r1, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getPackageAskScreenCompat(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.app.IActivityManager $r3;
        boolean $z0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean getPackageAskScreenCompat(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPackageAskScreenCompat(java.lang.String, boolean)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        boolean z0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMemoryClass()
    {
        android.app.ActivityManager r0;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $i0 = staticinvoke <android.app.ActivityManager: int staticGetMemoryClass()>();

        return $i0;
    }

    public static int staticGetMemoryClass()
    {
        java.lang.String r0, $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.heapgrowthlimit", "");

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i3;

     label1:
        $i0 = staticinvoke <android.app.ActivityManager: int staticGetLargeMemoryClass()>();

        return $i0;
    }

    public int getLargeMemoryClass()
    {
        android.app.ActivityManager r0;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $i0 = staticinvoke <android.app.ActivityManager: int staticGetLargeMemoryClass()>();

        return $i0;
    }

    public static int staticGetLargeMemoryClass()
    {
        java.lang.String r0, $r1;
        int $i0, $i1, $i2;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.heapsize", "16m");

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i2;
    }

    public boolean isLowRamDevice()
    {
        android.app.ActivityManager r0;
        boolean $z0;

        r0 := @this: android.app.ActivityManager;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        return $z0;
    }

    public static boolean isLowRamDeviceStatic()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = "true";

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.low_ram", "false");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public static boolean isHighEndGfx()
    {
        boolean $z0, $z1, $z2;
        android.content.res.Resources $r0;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 != 0 goto label1;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z1 = virtualinvoke $r0.<android.content.res.Resources: boolean getBoolean(int)>(17956885);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static int getMaxRecentTasksStatic()
    {
        int $i0, $i1;
        boolean $z0;
        byte $b2;

        $i0 = <android.app.ActivityManager: int gMaxRecentTasks>;

        if $i0 >= 0 goto label3;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label1;

        $b2 = 50;

        goto label2;

     label1:
        $b2 = 100;

     label2:
        <android.app.ActivityManager: int gMaxRecentTasks> = $b2;

        return $b2;

     label3:
        $i1 = <android.app.ActivityManager: int gMaxRecentTasks>;

        return $i1;
    }

    public static int getDefaultAppRecentsLimitStatic()
    {
        int $i0, $i1;

        $i0 = staticinvoke <android.app.ActivityManager: int getMaxRecentTasksStatic()>();

        $i1 = $i0 / 6;

        return $i1;
    }

    public static int getMaxAppRecentsLimitStatic()
    {
        int $i0, $i1;

        $i0 = staticinvoke <android.app.ActivityManager: int getMaxRecentTasksStatic()>();

        $i1 = $i0 / 2;

        return $i1;
    }

    public java.util.List getRecentTasks(int, int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0, i1, $i2;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i2 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getRecentTasks(int,int,int)>(i0, i1, $i2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRecentTasksForUser(int, int, int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0, i1, i2;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getRecentTasks(int,int,int)>(i0, i1, i2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getAppTasks()
    {
        android.app.ActivityManager r0;
        java.util.ArrayList r1, $r4;
        java.util.List r2;
        int i0, i1;
        android.app.IActivityManager $r5;
        android.content.Context $r6;
        java.lang.String $r7;
        android.app.ActivityManager$AppTask $r8;
        java.lang.Object $r9;
        android.app.IAppTask $r10;
        android.os.RemoteException $r11;

        r0 := @this: android.app.ActivityManager;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        r2 = interfaceinvoke $r5.<android.app.IActivityManager: java.util.List getAppTasks(java.lang.String)>($r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        return null;

     label4:
        i1 = interfaceinvoke r2.<java.util.List: int size()>();

        i0 = 0;

     label5:
        if i0 >= i1 goto label6;

        $r8 = new android.app.ActivityManager$AppTask;

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r10 = (android.app.IAppTask) $r9;

        specialinvoke $r8.<android.app.ActivityManager$AppTask: void <init>(android.app.IAppTask)>($r10);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i0 = i0 + 1;

        goto label5;

     label6:
        return r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.util.Size getAppTaskThumbnailSize()
    {
        android.app.ActivityManager r0, r1;
        java.lang.Throwable r2, $r7;
        android.util.Size $r4;
        android.graphics.Point $r5, $r6;
        int $i0, $i1;

        r0 := @this: android.app.ActivityManager;

        r1 = r0;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.app.ActivityManager: void ensureAppTaskThumbnailSizeLocked()>();

        $r4 = new android.util.Size;

        $r5 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        $i1 = $r5.<android.graphics.Point: int x>;

        $r6 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        $i0 = $r6.<android.graphics.Point: int y>;

        specialinvoke $r4.<android.util.Size: void <init>(int,int)>($i1, $i0);

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void ensureAppTaskThumbnailSizeLocked()
    {
        android.app.ActivityManager r0;
        android.os.RemoteException r1, $r5;
        android.graphics.Point $r2, $r4;
        android.app.IActivityManager $r3;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.app.ActivityManager;

        $r2 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        if $r2 != null goto label4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = interfaceinvoke $r3.<android.app.IActivityManager: android.graphics.Point getAppTaskThumbnailSize()>();

        r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("System dead?", r1);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int addAppTask(android.app.Activity, android.content.Intent, android.app.ActivityManager$TaskDescription, android.graphics.Bitmap)
    {
        android.app.ActivityManager r0, r6;
        android.app.Activity r1;
        android.content.Intent r2;
        android.app.ActivityManager$TaskDescription r3, $r17;
        android.graphics.Bitmap r4, r8;
        android.graphics.Point r5;
        java.lang.Throwable r7, $r18;
        float f0, f1, $f3, $f4, $f5, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        android.graphics.Matrix r9, $r13;
        android.graphics.Canvas r10, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        android.graphics.Bitmap$Config $r12;
        android.os.IBinder $r14;
        android.app.IActivityManager $r16;
        java.lang.IllegalStateException $r19;
        android.os.RemoteException $r20, r21;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.content.Intent;

        r3 := @parameter2: android.app.ActivityManager$TaskDescription;

        r4 := @parameter3: android.graphics.Bitmap;

        r6 = r0;

        entermonitor r0;

     label01:
        specialinvoke r0.<android.app.ActivityManager: void ensureAppTaskThumbnailSizeLocked()>();

        r5 = r0.<android.app.ActivityManager: android.graphics.Point mAppTaskThumbnailSize>;

        exitmonitor r6;

     label02:
        goto label05;

     label03:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r6;

     label04:
        throw r7;

     label05:
        i14 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        i15 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $i1 = r5.<android.graphics.Point: int x>;

        if i14 != $i1 goto label06;

        $i13 = r5.<android.graphics.Point: int y>;

        if i15 == $i13 goto label09;

     label06:
        $i0 = r5.<android.graphics.Point: int x>;

        $i2 = r5.<android.graphics.Point: int y>;

        $r12 = virtualinvoke r4.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i2, $r12);

        f1 = 0.0F;

        $i3 = r5.<android.graphics.Point: int x>;

        $i7 = i14 * $i3;

        $i5 = r5.<android.graphics.Point: int y>;

        $i4 = $i5 * i15;

        if $i7 <= $i4 goto label07;

        $i11 = r5.<android.graphics.Point: int x>;

        $f12 = (float) $i11;

        $f11 = (float) i15;

        f0 = $f12 / $f11;

        $i12 = r5.<android.graphics.Point: int y>;

        $f13 = (float) $i12;

        $f15 = (float) i14;

        $f14 = $f15 * f0;

        $f16 = $f13 - $f14;

        f1 = $f16 * 0.5F;

        goto label08;

     label07:
        $i6 = r5.<android.graphics.Point: int y>;

        $f3 = (float) $i6;

        $f4 = (float) i14;

        f0 = $f3 / $f4;

        $i8 = r5.<android.graphics.Point: int x>;

        $f8 = (float) $i8;

        $f5 = (float) i15;

     label08:
        $r13 = new android.graphics.Matrix;

        specialinvoke $r13.<android.graphics.Matrix: void <init>()>();

        r9 = $r13;

        virtualinvoke r9.<android.graphics.Matrix: void setScale(float,float)>(f0, f0);

        $f10 = f1 + 0.5F;

        $i9 = (int) $f10;

        $f9 = (float) $i9;

        virtualinvoke r9.<android.graphics.Matrix: boolean postTranslate(float,float)>($f9, 0.0F);

        $r15 = new android.graphics.Canvas;

        specialinvoke $r15.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r8);

        r10 = $r15;

        virtualinvoke r10.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r4, r9, null);

        virtualinvoke r10.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        r4 = r8;

     label09:
        if r3 != null goto label10;

        $r17 = new android.app.ActivityManager$TaskDescription;

        specialinvoke $r17.<android.app.ActivityManager$TaskDescription: void <init>()>();

        r3 = $r17;

     label10:
        $r16 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r14 = virtualinvoke r1.<android.app.Activity: android.os.IBinder getActivityToken()>();

        $i10 = interfaceinvoke $r16.<android.app.IActivityManager: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>($r14, r2, r3, r4);

     label11:
        return $i10;

     label12:
        $r20 := @caughtexception;

        r21 = $r20;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("System dead?", r21);

        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    public java.util.List getRunningTasks(int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getTasks(int,int)>(i0, 0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeTask(int, int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0, i1;
        android.app.IActivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean removeTask(int,int)>(i0, i1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        android.app.ActivityManager$TaskThumbnail $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isInHomeStack(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean isInHomeStack(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void moveTaskToFront(int, int)
    {
        android.app.ActivityManager r0;
        int i0, i1;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>(i0, i1, null);

        return;
    }

    public void moveTaskToFront(int, int, android.os.Bundle)
    {
        android.app.ActivityManager r0;
        int i0, i1;
        android.os.Bundle r1;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningServices(int) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getServices(int,int)>(i0, 0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName) throws java.lang.SecurityException
    {
        android.app.ActivityManager r0;
        android.content.ComponentName r1;
        android.app.IActivityManager $r3;
        android.app.PendingIntent $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.content.ComponentName;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = interfaceinvoke $r3.<android.app.IActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getMemoryInfo(android.app.ActivityManager$MemoryInfo)
    {
        android.app.ActivityManager r0;
        android.app.ActivityManager$MemoryInfo r1;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: android.app.ActivityManager$MemoryInfo;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDataObserver r2;
        android.app.IActivityManager $r4;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r5;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDataObserver;

     label1:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = interfaceinvoke $r4.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>(r1, r2, $i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean clearApplicationUserData()
    {
        android.app.ActivityManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: android.app.ActivityManager;

        $r1 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>($r2, null);

        return $z0;
    }

    public java.util.List getProcessesInErrorState()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getProcessesInErrorState()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningExternalApplications()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getRunningExternalApplications()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getRunningAppProcesses()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        java.util.List $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: java.util.List getRunningAppProcesses()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)
    {
        android.app.ActivityManager$RunningAppProcessInfo r0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @parameter0: android.app.ActivityManager$RunningAppProcessInfo;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])
    {
        android.app.ActivityManager r0;
        int[] r1;
        android.app.IActivityManager $r3;
        android.os.Debug$MemoryInfo[] $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: int[];

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = interfaceinvoke $r3.<android.app.IActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void restartPackage(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>(r1);

        return;
    }

    public void killBackgroundProcesses(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        android.app.IActivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)>(r1, $i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceStopPackageAsUser(java.lang.String, int)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        int i0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void forceStopPackage(java.lang.String,int)>(r1, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forceStopPackage(java.lang.String)
    {
        android.app.ActivityManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.app.ActivityManager: void forceStopPackageAsUser(java.lang.String,int)>(r1, $i0);

        return;
    }

    public android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        android.content.pm.ConfigurationInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLauncherLargeIconDensity()
    {
        android.app.ActivityManager r0;
        android.content.res.Resources r1;
        int i0, i1, $i2;
        android.content.Context $r2;
        android.util.DisplayMetrics $r3;
        android.content.res.Configuration $r4;
        float $f0, $f1, $f2;

        r0 := @this: android.app.ActivityManager;

        $r2 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = $r3.<android.util.DisplayMetrics: int densityDpi>;

        $r4 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i1 = $r4.<android.content.res.Configuration: int smallestScreenWidthDp>;

        if i1 >= 600 goto label1;

        return i0;

     label1:
        lookupswitch(i0)
        {
            case 120: goto label2;
            case 160: goto label3;
            case 213: goto label4;
            case 240: goto label5;
            case 320: goto label6;
            case 480: goto label7;
            default: goto label8;
        };

     label2:
        return 160;

     label3:
        return 240;

     label4:
        return 320;

     label5:
        return 320;

     label6:
        return 480;

     label7:
        return 640;

     label8:
        $f0 = (float) i0;

        $f1 = $f0 * 1.5F;

        $f2 = $f1 + 0.5F;

        $i2 = (int) $f2;

        return $i2;
    }

    public int getLauncherLargeIconSize()
    {
        android.app.ActivityManager r0;
        android.content.Context $r1;
        int $i0;

        r0 := @this: android.app.ActivityManager;

        $r1 = r0.<android.app.ActivityManager: android.content.Context mContext>;

        $i0 = staticinvoke <android.app.ActivityManager: int getLauncherLargeIconSizeInner(android.content.Context)>($r1);

        return $i0;
    }

    static int getLauncherLargeIconSizeInner(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        android.content.res.Configuration $r2;
        android.util.DisplayMetrics $r3;
        float $f0, $f1, $f2;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104896);

        $r2 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i1 = $r2.<android.content.res.Configuration: int smallestScreenWidthDp>;

        if i1 >= 600 goto label1;

        return i0;

     label1:
        $r3 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i2 = $r3.<android.util.DisplayMetrics: int densityDpi>;

        lookupswitch(i2)
        {
            case 120: goto label2;
            case 160: goto label3;
            case 213: goto label4;
            case 240: goto label5;
            case 320: goto label6;
            case 480: goto label7;
            default: goto label8;
        };

     label2:
        $i15 = i0 * 160;

        $i14 = $i15 / 120;

        return $i14;

     label3:
        $i13 = i0 * 240;

        $i12 = $i13 / 160;

        return $i12;

     label4:
        $i11 = i0 * 320;

        $i10 = $i11 / 240;

        return $i10;

     label5:
        $i8 = i0 * 320;

        $i9 = $i8 / 240;

        return $i9;

     label6:
        $i6 = i0 * 480;

        $i7 = $i6 / 320;

        return $i7;

     label7:
        $i3 = i0 * 320;

        $i4 = $i3 * 2;

        $i5 = $i4 / 480;

        return $i5;

     label8:
        $f1 = (float) i0;

        $f0 = $f1 * 1.5F;

        $f2 = $f0 + 0.5F;

        $i16 = (int) $f2;

        return $i16;
    }

    public static boolean isUserAMonkey()
    {
        android.app.IActivityManager $r1;
        boolean $z0;
        android.os.RemoteException $r2;

     label1:
        $r1 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r1.<android.app.IActivityManager: boolean isUserAMonkey()>();

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isRunningInTestHarness()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.test_harness", 0);

        return $z0;
    }

    public static int checkComponentPermission(java.lang.String, int, int, boolean)
    {
        java.lang.String r0, $r4;
        int i0, i1, $i2;
        boolean z0, $z1, $z2;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageManager $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i0 == 0 goto label1;

        if i0 != 1000 goto label2;

     label1:
        return 0;

     label2:
        $z1 = staticinvoke <android.os.UserHandle: boolean isIsolated(int)>(i0);

        if $z1 == 0 goto label3;

        return -1;

     label3:
        if i1 < 0 goto label4;

        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, i1);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        if z0 != 0 goto label5;

        return -1;

     label5:
        if r0 != null goto label6;

        return 0;

     label6:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i2 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>(r0, i0);

     label7:
        return $i2;

     label8:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.app.ActivityManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "PackageManager is dead?!?", r1);

        return -1;

        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static int checkUidPermission(java.lang.String, int)
    {
        java.lang.String r0, $r4;
        int i0, $i1;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageManager $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>(r0, i0);

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <android.app.ActivityManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "PackageManager is dead?!?", r1);

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String)
    {
        int i0, i1, i2, $i3, $i4;
        boolean z0, z1;
        java.lang.String r0, r1;
        android.os.RemoteException r2, $r4;
        android.app.IActivityManager $r3;
        java.lang.SecurityException $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r0 := @parameter5: java.lang.String;

        r1 := @parameter6: java.lang.String;

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if $i3 != i2 goto label1;

        return i2;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i4 = interfaceinvoke $r3.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>(i0, i1, i2, z0, z1, r0, r1);

     label2:
        return $i4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed calling activity manager", r2);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static int getCurrentUser()
    {
        android.content.pm.UserInfo r0;
        android.app.IActivityManager $r2;
        int $i0;
        android.os.RemoteException $r3;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r0 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        if r0 == null goto label2;

        $i0 = r0.<android.content.pm.UserInfo: int id>;

        goto label3;

     label2:
        $i0 = 0;

     label3:
        return $i0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public boolean switchUser(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean switchUser(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUserRunning(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean isUserRunning(int,boolean)>(i0, 0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dumpPackageState(java.io.FileDescriptor, java.lang.String)
    {
        android.app.ActivityManager r0;
        java.io.FileDescriptor r1;
        java.lang.String r2;

        r0 := @this: android.app.ActivityManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.app.ActivityManager: void dumpPackageStateStatic(java.io.FileDescriptor,java.lang.String)>(r1, r2);

        return;
    }

    public static void dumpPackageStateStatic(java.io.FileDescriptor, java.lang.String)
    {
        java.io.FileDescriptor r0;
        java.lang.String r1;
        java.io.FileOutputStream r2, $r4;
        com.android.internal.util.FastPrintWriter r3, $r5;
        java.lang.String[] $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r0);

        r2 = $r4;

        $r5 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r5.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r2);

        r3 = $r5;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "package", $r6);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "-a";

        $r7[1] = "package";

        $r7[2] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "activity", $r7);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "--local";

        $r8[1] = "--package";

        $r8[2] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "meminfo", $r8);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "procstats", $r9);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "--packages";

        $r10[1] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "usagestats", $r10);

        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = r1;

        staticinvoke <android.app.ActivityManager: void dumpService(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String,java.lang.String[])>(r3, r0, "batterystats", $r11);

        virtualinvoke r3.<java.io.PrintWriter: void flush()>();

        return;
    }

    private static void dumpService(java.io.PrintWriter, java.io.FileDescriptor, java.lang.String, java.lang.String[])
    {
        java.io.PrintWriter r0;
        java.io.FileDescriptor r1, $r9;
        java.lang.String r2;
        java.lang.String[] r3;
        android.os.IBinder r4;
        com.android.internal.os.TransferPipe r5, $r7;
        java.lang.Throwable r6, $r10;
        android.os.ParcelFileDescriptor $r8;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("DUMP OF SERVICE ");

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(":");

        r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>(r2);

        if r4 != null goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  (Service not found)");

        return;

     label1:
        r5 = null;

     label2:
        virtualinvoke r0.<java.io.PrintWriter: void flush()>();

        $r7 = new com.android.internal.os.TransferPipe;

        specialinvoke $r7.<com.android.internal.os.TransferPipe: void <init>()>();

        r5 = $r7;

        virtualinvoke r5.<com.android.internal.os.TransferPipe: void setBufferPrefix(java.lang.String)>("  ");

        $r8 = virtualinvoke r5.<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>();

        $r9 = virtualinvoke $r8.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        interfaceinvoke r4.<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>($r9, r3);

        virtualinvoke r5.<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor,long)>(r1, 10000L);

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r6 = $r10;

        if r5 == null goto label5;

        virtualinvoke r5.<com.android.internal.os.TransferPipe: void kill()>();

     label5:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Failure dumping service:");

        virtualinvoke r6.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r0);

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void startLockTaskMode(int)
    {
        android.app.ActivityManager r0;
        int i0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void startLockTaskMode(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopLockTaskMode()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void stopLockTaskMode()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isInLockTaskMode()
    {
        android.app.ActivityManager r0;
        android.app.IActivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.app.ActivityManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r2.<android.app.IActivityManager: boolean isInLockTaskMode()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static java.lang.String access$900()
    {
        java.lang.String $r0;

        $r0 = <android.app.ActivityManager: java.lang.String TAG>;

        return $r0;
    }

    static void <clinit>()
    {
        <android.app.ActivityManager: int MOVE_TASK_NO_USER_ACTION> = 2;

        <android.app.ActivityManager: int MOVE_TASK_WITH_HOME> = 1;

        <android.app.ActivityManager: int REMOVE_TASK_KILL_PROCESS> = 1;

        <android.app.ActivityManager: int RECENT_IGNORE_HOME_STACK_TASKS> = 8;

        <android.app.ActivityManager: int RECENT_INCLUDE_PROFILES> = 4;

        <android.app.ActivityManager: int RECENT_IGNORE_UNAVAILABLE> = 2;

        <android.app.ActivityManager: int RECENT_WITH_EXCLUDED> = 1;

        <android.app.ActivityManager: int COMPAT_MODE_TOGGLE> = 2;

        <android.app.ActivityManager: int COMPAT_MODE_ENABLED> = 1;

        <android.app.ActivityManager: int COMPAT_MODE_DISABLED> = 0;

        <android.app.ActivityManager: int COMPAT_MODE_UNKNOWN> = -3;

        <android.app.ActivityManager: int COMPAT_MODE_NEVER> = -2;

        <android.app.ActivityManager: int COMPAT_MODE_ALWAYS> = -1;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_EMPTY> = 13;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_ACTIVITY_CLIENT> = 12;

        <android.app.ActivityManager: int PROCESS_STATE_CACHED_ACTIVITY> = 11;

        <android.app.ActivityManager: int PROCESS_STATE_LAST_ACTIVITY> = 10;

        <android.app.ActivityManager: int PROCESS_STATE_HOME> = 9;

        <android.app.ActivityManager: int PROCESS_STATE_RECEIVER> = 8;

        <android.app.ActivityManager: int PROCESS_STATE_SERVICE> = 7;

        <android.app.ActivityManager: int PROCESS_STATE_HEAVY_WEIGHT> = 6;

        <android.app.ActivityManager: int PROCESS_STATE_BACKUP> = 5;

        <android.app.ActivityManager: int PROCESS_STATE_IMPORTANT_BACKGROUND> = 4;

        <android.app.ActivityManager: int PROCESS_STATE_IMPORTANT_FOREGROUND> = 3;

        <android.app.ActivityManager: int PROCESS_STATE_TOP> = 2;

        <android.app.ActivityManager: int PROCESS_STATE_PERSISTENT_UI> = 1;

        <android.app.ActivityManager: int PROCESS_STATE_PERSISTENT> = 0;

        <android.app.ActivityManager: int USER_OP_IS_CURRENT> = -2;

        <android.app.ActivityManager: int USER_OP_UNKNOWN_USER> = -1;

        <android.app.ActivityManager: int USER_OP_SUCCESS> = 0;

        <android.app.ActivityManager: int INTENT_SENDER_SERVICE> = 4;

        <android.app.ActivityManager: int INTENT_SENDER_ACTIVITY_RESULT> = 3;

        <android.app.ActivityManager: int INTENT_SENDER_ACTIVITY> = 2;

        <android.app.ActivityManager: int INTENT_SENDER_BROADCAST> = 1;

        <android.app.ActivityManager: int BROADCAST_STICKY_CANT_HAVE_PERMISSION> = -1;

        <android.app.ActivityManager: int BROADCAST_SUCCESS> = 0;

        <android.app.ActivityManager: int START_FLAG_OPENGL_TRACES> = 4;

        <android.app.ActivityManager: int START_FLAG_DEBUG> = 2;

        <android.app.ActivityManager: int START_FLAG_ONLY_IF_NEEDED> = 1;

        <android.app.ActivityManager: int START_RETURN_LOCK_TASK_MODE_VIOLATION> = 5;

        <android.app.ActivityManager: int START_SWITCHES_CANCELED> = 4;

        <android.app.ActivityManager: int START_DELIVERED_TO_TOP> = 3;

        <android.app.ActivityManager: int START_TASK_TO_FRONT> = 2;

        <android.app.ActivityManager: int START_RETURN_INTENT_TO_CALLER> = 1;

        <android.app.ActivityManager: int START_SUCCESS> = 0;

        <android.app.ActivityManager: int START_INTENT_NOT_RESOLVED> = -1;

        <android.app.ActivityManager: int START_CLASS_NOT_FOUND> = -2;

        <android.app.ActivityManager: int START_FORWARD_AND_REQUEST_CONFLICT> = -3;

        <android.app.ActivityManager: int START_PERMISSION_DENIED> = -4;

        <android.app.ActivityManager: int START_NOT_ACTIVITY> = -5;

        <android.app.ActivityManager: int START_CANCELED> = -6;

        <android.app.ActivityManager: int START_NOT_VOICE_COMPATIBLE> = -7;

        <android.app.ActivityManager: java.lang.String META_HOME_ALTERNATE> = "android.app.home.alternate";

        <android.app.ActivityManager: java.lang.String TAG> = "ActivityManager";

        <android.app.ActivityManager: boolean localLOGV> = 0;

        <android.app.ActivityManager: int gMaxRecentTasks> = -1;

        return;
    }
}
