public class android.view.MagnificationSpec extends java.lang.Object implements android.os.Parcelable
{
    private static final int MAX_POOL_SIZE;
    private static final android.util.Pools$SynchronizedPool sPool;
    public float scale;
    public float offsetX;
    public float offsetY;
    public static final android.os.Parcelable$Creator CREATOR;

    private void <init>()
    {
        android.view.MagnificationSpec r0;

        r0 := @this: android.view.MagnificationSpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.MagnificationSpec: float scale> = 1.0F;

        return;
    }

    public void initialize(float, float, float)
    {
        android.view.MagnificationSpec r0;
        float f0, f1, f2;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.view.MagnificationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $b0 = f0 cmpg 1.0F;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scale must be greater than or equal to one!");

        throw $r1;

     label1:
        r0.<android.view.MagnificationSpec: float scale> = f0;

        r0.<android.view.MagnificationSpec: float offsetX> = f1;

        r0.<android.view.MagnificationSpec: float offsetY> = f2;

        return;
    }

    public boolean isNop()
    {
        android.view.MagnificationSpec r0;
        float $f0, $f1, $f2;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: android.view.MagnificationSpec;

        $f0 = r0.<android.view.MagnificationSpec: float scale>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 != 0 goto label1;

        $f1 = r0.<android.view.MagnificationSpec: float offsetX>;

        $b1 = $f1 cmpl 0.0F;

        if $b1 != 0 goto label1;

        $f2 = r0.<android.view.MagnificationSpec: float offsetY>;

        $b2 = $f2 cmpl 0.0F;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static android.view.MagnificationSpec obtain(android.view.MagnificationSpec)
    {
        android.view.MagnificationSpec r0, r1;
        float $f0, $f1, $f2;

        r0 := @parameter0: android.view.MagnificationSpec;

        r1 = staticinvoke <android.view.MagnificationSpec: android.view.MagnificationSpec obtain()>();

        $f0 = r0.<android.view.MagnificationSpec: float scale>;

        r1.<android.view.MagnificationSpec: float scale> = $f0;

        $f1 = r0.<android.view.MagnificationSpec: float offsetX>;

        r1.<android.view.MagnificationSpec: float offsetX> = $f1;

        $f2 = r0.<android.view.MagnificationSpec: float offsetY>;

        r1.<android.view.MagnificationSpec: float offsetY> = $f2;

        return r1;
    }

    public static android.view.MagnificationSpec obtain()
    {
        android.view.MagnificationSpec r0, $r3;
        android.util.Pools$SynchronizedPool $r1;
        java.lang.Object $r2;

        $r1 = <android.view.MagnificationSpec: android.util.Pools$SynchronizedPool sPool>;

        $r2 = virtualinvoke $r1.<android.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r0 = (android.view.MagnificationSpec) $r2;

        if r0 == null goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = new android.view.MagnificationSpec;

        specialinvoke $r3.<android.view.MagnificationSpec: void <init>()>();

     label2:
        return $r3;
    }

    public void recycle()
    {
        android.view.MagnificationSpec r0;
        android.util.Pools$SynchronizedPool $r1;

        r0 := @this: android.view.MagnificationSpec;

        virtualinvoke r0.<android.view.MagnificationSpec: void clear()>();

        $r1 = <android.view.MagnificationSpec: android.util.Pools$SynchronizedPool sPool>;

        virtualinvoke $r1.<android.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0);

        return;
    }

    public void clear()
    {
        android.view.MagnificationSpec r0;

        r0 := @this: android.view.MagnificationSpec;

        r0.<android.view.MagnificationSpec: float scale> = 1.0F;

        r0.<android.view.MagnificationSpec: float offsetX> = 0.0F;

        r0.<android.view.MagnificationSpec: float offsetY> = 0.0F;

        return;
    }

    public int describeContents()
    {
        android.view.MagnificationSpec r0;

        r0 := @this: android.view.MagnificationSpec;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.MagnificationSpec r0;
        android.os.Parcel r1;
        int i0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.MagnificationSpec;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $f0 = r0.<android.view.MagnificationSpec: float scale>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f0);

        $f1 = r0.<android.view.MagnificationSpec: float offsetX>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f1);

        $f2 = r0.<android.view.MagnificationSpec: float offsetY>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f2);

        virtualinvoke r0.<android.view.MagnificationSpec: void recycle()>();

        return;
    }

    public java.lang.String toString()
    {
        android.view.MagnificationSpec r0;
        java.lang.StringBuilder r1, $r2;
        float $f0, $f1, $f2;
        java.lang.String $r10;

        r0 := @this: android.view.MagnificationSpec;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<scale:");

        $f0 = r0.<android.view.MagnificationSpec: float scale>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",offsetX:");

        $f1 = r0.<android.view.MagnificationSpec: float offsetX>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",offsetY:");

        $f2 = r0.<android.view.MagnificationSpec: float offsetY>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private void initFromParcel(android.os.Parcel)
    {
        android.view.MagnificationSpec r0;
        android.os.Parcel r1;
        float $f0, $f1, $f2;

        r0 := @this: android.view.MagnificationSpec;

        r1 := @parameter0: android.os.Parcel;

        $f0 = virtualinvoke r1.<android.os.Parcel: float readFloat()>();

        r0.<android.view.MagnificationSpec: float scale> = $f0;

        $f1 = virtualinvoke r1.<android.os.Parcel: float readFloat()>();

        r0.<android.view.MagnificationSpec: float offsetX> = $f1;

        $f2 = virtualinvoke r1.<android.os.Parcel: float readFloat()>();

        r0.<android.view.MagnificationSpec: float offsetY> = $f2;

        return;
    }

    static void access$000(android.view.MagnificationSpec, android.os.Parcel)
    {
        android.view.MagnificationSpec r0;
        android.os.Parcel r1;

        r0 := @parameter0: android.view.MagnificationSpec;

        r1 := @parameter1: android.os.Parcel;

        specialinvoke r0.<android.view.MagnificationSpec: void initFromParcel(android.os.Parcel)>(r1);

        return;
    }

    static void <clinit>()
    {
        android.util.Pools$SynchronizedPool $r0;
        android.view.MagnificationSpec$1 $r1;

        <android.view.MagnificationSpec: int MAX_POOL_SIZE> = 20;

        $r0 = new android.util.Pools$SynchronizedPool;

        specialinvoke $r0.<android.util.Pools$SynchronizedPool: void <init>(int)>(20);

        <android.view.MagnificationSpec: android.util.Pools$SynchronizedPool sPool> = $r0;

        $r1 = new android.view.MagnificationSpec$1;

        specialinvoke $r1.<android.view.MagnificationSpec$1: void <init>()>();

        <android.view.MagnificationSpec: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }
}
