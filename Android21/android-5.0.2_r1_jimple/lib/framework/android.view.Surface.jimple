public class android.view.Surface extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String TAG;
    public static final android.os.Parcelable$Creator CREATOR;
    private final dalvik.system.CloseGuard mCloseGuard;
    final java.lang.Object mLock;
    private java.lang.String mName;
    long mNativeObject;
    private long mLockedObject;
    private int mGenerationId;
    private final android.graphics.Canvas mCanvas;
    private android.graphics.Matrix mCompatibleMatrix;
    public static final int ROTATION_0;
    public static final int ROTATION_90;
    public static final int ROTATION_180;
    public static final int ROTATION_270;

    private static native long nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture) throws android.view.Surface$OutOfResourcesException;

    private static native long nativeCreateFromSurfaceControl(long);

    private static native long nativeLockCanvas(long, android.graphics.Canvas, android.graphics.Rect) throws android.view.Surface$OutOfResourcesException;

    private static native void nativeUnlockCanvasAndPost(long, android.graphics.Canvas);

    private static native void nativeRelease(long);

    private static native boolean nativeIsValid(long);

    private static native boolean nativeIsConsumerRunningBehind(long);

    private static native long nativeReadFromParcel(long, android.os.Parcel);

    private static native void nativeWriteToParcel(long, android.os.Parcel);

    private static native void nativeAllocateBuffers(long);

    public void <init>()
    {
        android.view.Surface r0;
        dalvik.system.CloseGuard $r1;
        java.lang.Object $r2;
        android.view.Surface$CompatibleCanvas $r3;

        r0 := @this: android.view.Surface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r2;

        $r3 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r3.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r3;

        return;
    }

    public void <init>(android.graphics.SurfaceTexture)
    {
        android.view.Surface r0;
        android.graphics.SurfaceTexture r1;
        java.lang.Object r2, $r5, $r7;
        java.lang.Throwable r3, $r10;
        dalvik.system.CloseGuard $r4;
        android.view.Surface$CompatibleCanvas $r6;
        java.lang.String $r8;
        long $l0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r5;

        $r6 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r6.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r6;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surfaceTexture must not be null");

        throw $r9;

     label1:
        $r7 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label2:
        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r8;

        $l0 = staticinvoke <android.view.Surface: long nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture)>(r1);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>($l0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void <init>(long)
    {
        android.view.Surface r0;
        long l0;
        java.lang.Object r1, $r4, $r6;
        java.lang.Throwable r2, $r7;
        dalvik.system.CloseGuard $r3;
        android.view.Surface$CompatibleCanvas $r5;

        r0 := @this: android.view.Surface;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r4;

        $r5 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r5.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r5;

        $r6 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.Surface r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: android.view.Surface;

     label1:
        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.view.Surface: void release()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void release()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l2);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(0L);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void destroy()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        virtualinvoke r0.<android.view.Surface: void release()>();

        return;
    }

    public boolean isValid()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;
        boolean $z0;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $z0 = staticinvoke <android.view.Surface: boolean nativeIsValid(long)>($l2);

        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getGenerationId()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<android.view.Surface: int mGenerationId>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isConsumerRunningBehind()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $z0 = staticinvoke <android.view.Surface: boolean nativeIsConsumerRunningBehind(long)>($l0);

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.graphics.Canvas lockCanvas(android.graphics.Rect) throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    {
        android.view.Surface r0;
        android.graphics.Rect r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        long $l0, $l2, $l3;
        byte $b1;
        android.graphics.Canvas $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Rect;

        $r4 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mLockedObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface was already locked");

        throw $r7;

     label2:
        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $r5 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        $l3 = staticinvoke <android.view.Surface: long nativeLockCanvas(long,android.graphics.Canvas,android.graphics.Rect)>($l2, $r5, r1);

        r0.<android.view.Surface: long mLockedObject> = $l3;

        $r6 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        exitmonitor r2;

     label3:
        return $r6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void unlockCanvasAndPost(android.graphics.Canvas)
    {
        android.view.Surface r0;
        android.graphics.Canvas r1, $r5;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, r4, $r18, $r19;
        long $l0, $l1, $l3, $l5, $l6, $l7, $l8, $l10;
        byte $b2, $b4;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r16;
        java.lang.String $r11, $r14, $r15;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Canvas;

        $r5 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        if r1 == $r5 goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("canvas object must be the same instance that was previously returned by lockCanvas");

        throw $r17;

     label01:
        $r6 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $l0 = r0.<android.view.Surface: long mLockedObject>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label03;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Surface\'s mNativeObject (0x");

        $l7 = r0.<android.view.Surface: long mNativeObject>;

        $r11 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") != mLockedObject (0x");

        $l8 = r0.<android.view.Surface: long mLockedObject>;

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Surface", $r15);

     label03:
        $l3 = r0.<android.view.Surface: long mLockedObject>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label04;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface was not locked");

        throw $r7;

     label04:
        $l5 = r0.<android.view.Surface: long mLockedObject>;

        staticinvoke <android.view.Surface: void nativeUnlockCanvasAndPost(long,android.graphics.Canvas)>($l5, r1);

     label05:
        $l6 = r0.<android.view.Surface: long mLockedObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l6);

        r0.<android.view.Surface: long mLockedObject> = 0L;

        goto label08;

     label06:
        $r18 := @caughtexception;

        r3 = $r18;

     label07:
        $l10 = r0.<android.view.Surface: long mLockedObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l10);

        r0.<android.view.Surface: long mLockedObject> = 0L;

        throw r3;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void unlockCanvas(android.graphics.Canvas)
    {
        android.view.Surface r0;
        android.graphics.Canvas r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)
    {
        android.view.Surface r0;
        android.content.res.CompatibilityInfo$Translator r1;
        float f0;
        android.graphics.Matrix $r2, $r3;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.content.res.CompatibilityInfo$Translator;

        if r1 == null goto label1;

        f0 = r1.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix> = $r2;

        $r3 = r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix>;

        virtualinvoke $r3.<android.graphics.Matrix: void setScale(float,float)>(f0, f0);

     label1:
        return;
    }

    public void copyFrom(android.view.SurfaceControl)
    {
        android.view.Surface r0;
        android.view.SurfaceControl r1;
        long l0, l1, $l3, $l5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        byte $b2, $b4;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.view.SurfaceControl;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r7;

     label1:
        l0 = r1.<android.view.SurfaceControl: long mNativeObject>;

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("SurfaceControl native object is null. Are you using a released SurfaceControl?");

        throw $r5;

     label2:
        l1 = staticinvoke <android.view.Surface: long nativeCreateFromSurfaceControl(long)>(l0);

        $r4 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label3:
        $l3 = r0.<android.view.Surface: long mNativeObject>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l5 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l5);

     label4:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l1);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void transferFrom(android.view.Surface)
    {
        android.view.Surface r0, r1;
        long l0, $l1, $l3;
        java.lang.Object r2, $r5, $r6, r10;
        java.lang.Throwable r3, r4, $r8, $r9;
        byte $b2;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.view.Surface;

        if r1 != null goto label01;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r7;

     label01:
        if r1 == r0 goto label12;

        $r5 = r1.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        l0 = r1.<android.view.Surface: long mNativeObject>;

        specialinvoke r1.<android.view.Surface: void setNativeObjectLocked(long)>(0L);

        exitmonitor r2;

     label03:
        goto label06;

     label04:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label05:
        throw r3;

     label06:
        $r6 = r0.<android.view.Surface: java.lang.Object mLock>;

        r10 = $r6;

        entermonitor $r6;

     label07:
        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label08;

        $l3 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l3);

     label08:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l0);

        exitmonitor r10;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r10;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int describeContents()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        return 0;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.view.Surface r0;
        android.os.Parcel r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.lang.String $r5;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.os.Parcel;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null");

        throw $r6;

     label1:
        $r4 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r5;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $l1 = staticinvoke <android.view.Surface: long nativeReadFromParcel(long,android.os.Parcel)>($l0, r1);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>($l1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.Surface r0;
        android.os.Parcel r1;
        int i0, $i2;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.lang.String $r5;
        long $l1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dest must not be null");

        throw $r6;

     label1:
        $r4 = r0.<android.view.Surface: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<android.view.Surface: java.lang.String mName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r5);

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeWriteToParcel(long,android.os.Parcel)>($l1, r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        $i2 = i0 & 1;

        if $i2 == 0 goto label7;

        virtualinvoke r0.<android.view.Surface: void release()>();

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String toString()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r12;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r9, $r11;
        int $i0;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r6 = r0.<android.view.Surface: java.lang.String mName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")/@0x");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setNativeObjectLocked(long)
    {
        android.view.Surface r0;
        long l0, $l1, $l3, $l5;
        byte $b2, $b4, $b6, $b9, $b10;
        int $i7, $i8;
        dalvik.system.CloseGuard $r1, $r2;

        r0 := @this: android.view.Surface;

        l0 := @parameter0: long;

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label3;

        $l3 = r0.<android.view.Surface: long mNativeObject>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        $b10 = l0 cmp 0L;

        if $b10 == 0 goto label1;

        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        goto label2;

     label1:
        $l5 = r0.<android.view.Surface: long mNativeObject>;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label2;

        $b9 = l0 cmp 0L;

        if $b9 != 0 goto label2;

        $r1 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

     label2:
        r0.<android.view.Surface: long mNativeObject> = l0;

        $i7 = r0.<android.view.Surface: int mGenerationId>;

        $i8 = $i7 + 1;

        r0.<android.view.Surface: int mGenerationId> = $i8;

     label3:
        return;
    }

    private void checkNotReleasedLocked()
    {
        android.view.Surface r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.view.Surface;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface has already been released.");

        throw $r1;

     label1:
        return;
    }

    public void allocateBuffers()
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: android.view.Surface;

        $r3 = r0.<android.view.Surface: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeAllocateBuffers(long)>($l0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String rotationToString(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return "ROTATION_0";

     label2:
        return "ROATATION_90";

     label3:
        return "ROATATION_180";

     label4:
        return "ROATATION_270";

     label5:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    static android.graphics.Matrix access$100(android.view.Surface)
    {
        android.view.Surface r0;
        android.graphics.Matrix $r1;

        r0 := @parameter0: android.view.Surface;

        $r1 = r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix>;

        return $r1;
    }

    static void <clinit>()
    {
        android.view.Surface$1 $r0;

        <android.view.Surface: int ROTATION_270> = 3;

        <android.view.Surface: int ROTATION_180> = 2;

        <android.view.Surface: int ROTATION_90> = 1;

        <android.view.Surface: int ROTATION_0> = 0;

        <android.view.Surface: java.lang.String TAG> = "Surface";

        $r0 = new android.view.Surface$1;

        specialinvoke $r0.<android.view.Surface$1: void <init>()>();

        <android.view.Surface: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
}
