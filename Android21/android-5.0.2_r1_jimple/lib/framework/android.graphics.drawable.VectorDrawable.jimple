public class android.graphics.drawable.VectorDrawable extends android.graphics.drawable.Drawable
{
    private static final java.lang.String LOGTAG;
    private static final java.lang.String SHAPE_CLIP_PATH;
    private static final java.lang.String SHAPE_GROUP;
    private static final java.lang.String SHAPE_PATH;
    private static final java.lang.String SHAPE_VECTOR;
    private static final int LINECAP_BUTT;
    private static final int LINECAP_ROUND;
    private static final int LINECAP_SQUARE;
    private static final int LINEJOIN_MITER;
    private static final int LINEJOIN_ROUND;
    private static final int LINEJOIN_BEVEL;
    private static final boolean DBG_VECTOR_DRAWABLE;
    private android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState;
    private android.graphics.PorterDuffColorFilter mTintFilter;
    private android.graphics.ColorFilter mColorFilter;
    private boolean mMutated;
    private boolean mAllowCaching;

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable: boolean mAllowCaching> = 1;

        $r1 = new android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = $r1;

        return;
    }

    private void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1, $r8;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        android.graphics.PorterDuff$Mode $r4;
        android.content.res.ColorStateList $r5;
        android.graphics.PorterDuffColorFilter $r6, $r7;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable: boolean mAllowCaching> = 1;

        if r3 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canApplyTheme()>();

        if $z0 == 0 goto label1;

        $r8 = new android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke $r8.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)>(r1);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = $r8;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void applyTheme(android.content.res.Resources$Theme)>(r3);

        goto label2;

     label1:
        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = r1;

     label2:
        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r5 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r4 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        $r7 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r6, $r5, $r4);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r7;

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2, $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = r0.<android.graphics.drawable.VectorDrawable: boolean mMutated>;

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if $r1 != r0 goto label1;

        $r2 = new android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)>($r3);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState> = $r2;

        r0.<android.graphics.drawable.VectorDrawable: boolean mMutated> = 1;

     label1:
        return r0;
    }

    java.lang.Object getTargetByName(java.lang.String)
    {
        android.graphics.drawable.VectorDrawable r0;
        java.lang.String r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r2;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r4 = $r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: android.util.ArrayMap mVGTargetsMap>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r5;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: int getChangingConfigurations()>();

        $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i0;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        return $r2;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1, $z2, $z3;
        android.graphics.ColorFilter r3, $r4, $r16;
        float $f0, $f1, $f2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r14;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.Rect getBounds()>();

        $i1 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        if $i2 != 0 goto label2;

     label1:
        return;

     label2:
        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        z0 = specialinvoke r0.<android.graphics.drawable.VectorDrawable: boolean needMirroring()>();

        $i3 = r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int top>;

        $f0 = (float) $i4;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        if z0 == 0 goto label3;

        $i7 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f2 = (float) $i7;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f2, 0.0F);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label3:
        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter>;

        if $r4 != null goto label4;

        $r16 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        goto label5;

     label4:
        $r16 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter>;

     label5:
        r3 = $r16;

        $z1 = r0.<android.graphics.drawable.VectorDrawable: boolean mAllowCaching>;

        if $z1 != 0 goto label7;

        $r9 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z3 = virtualinvoke $r9.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean hasTranslucentRoot()>();

        if $z3 != 0 goto label6;

        $r15 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r14 = $r15.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i6 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i5 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        virtualinvoke $r14.<android.graphics.drawable.VectorDrawable$VPathRenderer: void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter)>(r1, $i6, $i5, r3);

        goto label9;

     label6:
        $r11 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r11.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void createCachedBitmapIfNeeded(android.graphics.Rect)>(r2);

        $r13 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r13.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void updateCachedBitmap(android.graphics.Rect)>(r2);

        $r12 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r12.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter)>(r1, r3);

        goto label9;

     label7:
        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void createCachedBitmapIfNeeded(android.graphics.Rect)>(r2);

        $r6 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z2 = virtualinvoke $r6.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canReuseCache()>();

        if $z2 != 0 goto label8;

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r7.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void updateCachedBitmap(android.graphics.Rect)>(r2);

        $r10 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r10.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void updateCacheStates()>();

     label8:
        $r8 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        virtualinvoke $r8.<android.graphics.drawable.VectorDrawable$VectorDrawableState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter)>(r1, r3);

     label9:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        return $i0;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.VectorDrawable r0;
        int i0, $i1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r3;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2, $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i1 = virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        if $i1 == i0 goto label1;

        $r3 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r4 = $r3.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        virtualinvoke $r4.<android.graphics.drawable.VectorDrawable$VPathRenderer: void setRootAlpha(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.ColorFilter r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter mColorFilter> = r1;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.ColorStateList r1, $r3;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.graphics.PorterDuff$Mode $r4;
        android.graphics.PorterDuffColorFilter $r5, $r6;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = r1;

        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r4 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r5, r1, $r4);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.PorterDuff$Mode r1, $r3;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.content.res.ColorStateList $r4;
        android.graphics.PorterDuffColorFilter $r5, $r6;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r3 == r1 goto label1;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode> = r1;

        $r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r4 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r6 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r5, $r4, r1);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r6;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2, $r4;
        android.content.res.ColorStateList $r3, $r5;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if $r1 == null goto label2;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label2;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $z2 = virtualinvoke $r5.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.VectorDrawable r0;
        int[] r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.content.res.ColorStateList $r3, $r6;
        android.graphics.PorterDuff$Mode $r4, $r5;
        android.graphics.PorterDuffColorFilter $r7, $r8;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: int[];

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r3 == null goto label1;

        $r4 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r4 == null goto label1;

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r6 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r5 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        $r8 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r7, $r6, $r5);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r8;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

        return 1;

     label1:
        return 0;
    }

    public int getOpacity()
    {
        android.graphics.drawable.VectorDrawable r0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        return -3;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2;
        float $f0;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f0 = $r2.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth>;

        $i0 = (int) $f0;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2;
        float $f0;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f0 = $r2.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight>;

        $i0 = (int) $f0;

        return $i0;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean canApplyTheme()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if $r1 == null goto label2;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z2 = virtualinvoke $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canApplyTheme()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.content.res.TypedArray r3;
        org.xmlpull.v1.XmlPullParserException r4, $r13;
        java.lang.Throwable r5, $r14;
        boolean $z0;
        int[] $r6, $r7, $r8;
        android.graphics.PorterDuff$Mode $r9;
        android.content.res.ColorStateList $r10;
        android.graphics.PorterDuffColorFilter $r11, $r12;
        java.lang.RuntimeException $r15;
        android.graphics.drawable.VectorDrawable$VPathRenderer r16;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>(r1);

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if r2 == null goto label7;

        $r6 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r6 == null goto label7;

        $r8 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        $r7 = <com.android.internal.R$styleable: int[] VectorDrawable>;

        r3 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r8, $r7);

     label1:
        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r3);

     label2:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label6;

     label3:
        $r13 := @caughtexception;

        r4 = $r13;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r15;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

     label5:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r5;

     label6:
        $r11 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r10 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r9 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        $r12 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r11, $r10, $r9);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r12;

     label7:
        r16 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        if r16 == null goto label8;

        $z0 = virtualinvoke r16.<android.graphics.drawable.VectorDrawable$VPathRenderer: boolean canApplyTheme()>();

        if $z0 == 0 goto label8;

        virtualinvoke r16.<android.graphics.drawable.VectorDrawable$VPathRenderer: void applyTheme(android.content.res.Resources$Theme)>(r1);

     label8:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public float getPixelSize()
    {
        android.graphics.drawable.VectorDrawable r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2, $r4, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r3, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        if $r1 != null goto label1;

        $r19 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r18 = $r19.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        if $r18 == null goto label2;

     label1:
        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r3 = $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f6 = $r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth>;

        $b0 = $f6 cmpl 0.0F;

        if $b0 == 0 goto label2;

        $r4 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r5 = $r4.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f7 = $r5.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight>;

        $b1 = $f7 cmpl 0.0F;

        if $b1 == 0 goto label2;

        $r7 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r6 = $r7.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f8 = $r6.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportHeight>;

        $b2 = $f8 cmpl 0.0F;

        if $b2 == 0 goto label2;

        $r9 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r8 = $r9.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $f9 = $r8.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportWidth>;

        $b3 = $f9 cmpl 0.0F;

        if $b3 != 0 goto label3;

     label2:
        return 1.0F;

     label3:
        $r11 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r10 = $r11.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        f0 = $r10.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth>;

        $r13 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r12 = $r13.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        f1 = $r12.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight>;

        $r15 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r14 = $r15.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        f2 = $r14.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportWidth>;

        $r17 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r16 = $r17.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        f3 = $r16.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportHeight>;

        f4 = f2 / f0;

        f5 = f3 / f1;

        $f10 = staticinvoke <java.lang.Math: float min(float,float)>(f4, f5);

        return $f10;
    }

    public static android.graphics.drawable.VectorDrawable create(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0, i1, $i2;
        android.content.res.XmlResourceParser r1;
        android.util.AttributeSet r2;
        android.graphics.drawable.VectorDrawable r3, $r4;
        org.xmlpull.v1.XmlPullParserException $r5, $r6, r10;
        java.lang.String $r7, $r9;
        java.io.IOException $r8, r11;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

     label1:
        r1 = virtualinvoke r0.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

        r2 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r1);

     label2:
        $i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        i1 = $i2;

        if $i2 == 2 goto label3;

        if i1 == 1 goto label3;

        goto label2;

     label3:
        if i1 == 2 goto label4;

        $r5 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r5;

     label4:
        $r4 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r4.<android.graphics.drawable.VectorDrawable: void <init>()>();

        r3 = $r4;

        virtualinvoke r3.<android.graphics.drawable.VectorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>(r0, r1, r2);

     label5:
        return r3;

     label6:
        $r6 := @caughtexception;

        r10 = $r6;

        $r7 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "parser error", r10);

        goto label8;

     label7:
        $r8 := @caughtexception;

        r11 = $r8;

        $r9 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "parser error", r11);

     label8:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label5 with label6;
        catch java.io.IOException from label1 to label5 with label7;
    }

    private static int applyAlpha(int, float)
    {
        int i0, i1, $i2, $i3, i4, i5;
        float f0, $f1, $f2;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        i4 = i0 & 16777215;

        $f1 = (float) i1;

        $f2 = $f1 * f0;

        $i2 = (int) $f2;

        $i3 = $i2 << 24;

        i5 = i4 | $i3;

        return i5;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r5;
        android.graphics.drawable.VectorDrawable$VPathRenderer r6, $r8;
        android.content.res.TypedArray r7;
        int[] $r9;
        android.graphics.PorterDuff$Mode $r10;
        android.content.res.ColorStateList $r11;
        android.graphics.PorterDuffColorFilter $r12, $r13;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r8 = new android.graphics.drawable.VectorDrawable$VPathRenderer;

        specialinvoke $r8.<android.graphics.drawable.VectorDrawable$VPathRenderer: void <init>()>();

        r6 = $r8;

        r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer> = r6;

        $r9 = <com.android.internal.R$styleable: int[] VectorDrawable>;

        r7 = staticinvoke <android.graphics.drawable.VectorDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r9);

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r7);

        virtualinvoke r7.<android.content.res.TypedArray: void recycle()>();

        r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        $r12 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter>;

        $r11 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        $r10 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        $r13 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($r12, $r11, $r10);

        r0.<android.graphics.drawable.VectorDrawable: android.graphics.PorterDuffColorFilter mTintFilter> = $r13;

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r2;
        android.graphics.drawable.VectorDrawable$VPathRenderer r3;
        int i0, $i1, $i2, $i3;
        android.content.res.ColorStateList r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        java.lang.String r5, $r12, $r13, $r15, $r21, $r23, $r26, $r28, $r33;
        int[] $r6;
        boolean $z0, $z1;
        byte $b4, $b5, $b6, $b7;
        org.xmlpull.v1.XmlPullParserException $r7, $r17, $r20, $r30;
        java.lang.StringBuilder $r8, $r11, $r14, $r16, $r18, $r19, $r22, $r24, $r25, $r27, $r29, $r34;
        android.util.ArrayMap $r9;
        android.graphics.PorterDuff$Mode $r31, $r32;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        r3 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i1 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i3 = $i1 | $i2;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i3;

        $r6 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs> = $r6;

        i0 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(6, -1);

        if i0 == -1 goto label1;

        $r32 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        $r31 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>(i0, $r32);

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode> = $r31;

     label1:
        r4 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(1);

        if r4 == null goto label2;

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = r4;

     label2:
        $z0 = r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        $z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, $z0);

        r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = $z1;

        $f2 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportWidth>;

        $f1 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(7, $f2);

        r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportWidth> = $f1;

        $f4 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportHeight>;

        $f3 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(8, $f4);

        r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportHeight> = $f3;

        $f5 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportWidth>;

        $b4 = $f5 cmpg 0.0F;

        if $b4 > 0 goto label3;

        $r30 = new org.xmlpull.v1.XmlPullParserException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportWidth > 0");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r33);

        throw $r30;

     label3:
        $f6 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mViewportHeight>;

        $b5 = $f6 cmpg 0.0F;

        if $b5 > 0 goto label4;

        $r20 = new org.xmlpull.v1.XmlPullParserException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportHeight > 0");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label4:
        $f8 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth>;

        $f7 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(3, $f8);

        r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth> = $f7;

        $f10 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight>;

        $f9 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(2, $f10);

        r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight> = $f9;

        $f11 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseWidth>;

        $b6 = $f11 cmpg 0.0F;

        if $b6 > 0 goto label5;

        $r17 = new org.xmlpull.v1.XmlPullParserException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires width > 0");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label5:
        $f12 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float mBaseHeight>;

        $b7 = $f12 cmpg 0.0F;

        if $b7 > 0 goto label6;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires height > 0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        $f13 = virtualinvoke r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: float getAlpha()>();

        f0 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(4, $f13);

        virtualinvoke r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: void setAlpha(float)>(f0);

        r5 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if r5 == null goto label7;

        r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: java.lang.String mRootName> = r5;

        $r9 = r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: android.util.ArrayMap mVGTargetsMap>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3);

     label7:
        return;
    }

    private void inflateInternal(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.VectorDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r5;
        android.graphics.drawable.VectorDrawable$VPathRenderer r6;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Stack r7, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r8, $r20, $r23, $r25, $r27, $r28, $r32, $r35, $r37, $r39, $r45, $r47, r50;
        android.graphics.drawable.VectorDrawable$VGroup r9, $r12, $r30, r49;
        android.graphics.drawable.VectorDrawable$VFullPath r10, $r42;
        java.lang.StringBuffer $r14, r51;
        java.lang.StringBuilder $r16, $r18, $r19, $r21;
        org.xmlpull.v1.XmlPullParserException $r17;
        java.lang.Object $r26;
        java.util.ArrayList $r31, $r38, $r41;
        android.graphics.drawable.VectorDrawable$VClipPath $r33, r48;
        android.util.ArrayMap $r36, $r40, $r44;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        r5 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        r6 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        z0 = 1;

        $r11 = new java.util.Stack;

        specialinvoke $r11.<java.util.Stack: void <init>()>();

        r7 = $r11;

        $r12 = staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.drawable.VectorDrawable$VGroup access$000(android.graphics.drawable.VectorDrawable$VPathRenderer)>(r6);

        virtualinvoke r7.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r12);

        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label01:
        if i0 == 1 goto label10;

        if i0 != 2 goto label08;

        r8 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r26 = virtualinvoke r7.<java.util.Stack: java.lang.Object peek()>();

        r9 = (android.graphics.drawable.VectorDrawable$VGroup) $r26;

        $r25 = "path";

        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label03;

        $r42 = new android.graphics.drawable.VectorDrawable$VFullPath;

        specialinvoke $r42.<android.graphics.drawable.VectorDrawable$VFullPath: void <init>()>();

        r10 = $r42;

        virtualinvoke r10.<android.graphics.drawable.VectorDrawable$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r3, r4);

        $r41 = r9.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        $r47 = virtualinvoke r10.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String getPathName()>();

        if $r47 == null goto label02;

        $r44 = r6.<android.graphics.drawable.VectorDrawable$VPathRenderer: android.util.ArrayMap mVGTargetsMap>;

        $r45 = virtualinvoke r10.<android.graphics.drawable.VectorDrawable$VFullPath: java.lang.String getPathName()>();

        virtualinvoke $r44.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, r10);

     label02:
        z0 = 0;

        $i9 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i8 = r10.<android.graphics.drawable.VectorDrawable$VFullPath: int mChangingConfigurations>;

        $i10 = $i9 | $i8;

        r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i10;

        goto label07;

     label03:
        $r28 = "clip-path";

        $z4 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z4 == 0 goto label05;

        $r33 = new android.graphics.drawable.VectorDrawable$VClipPath;

        specialinvoke $r33.<android.graphics.drawable.VectorDrawable$VClipPath: void <init>()>();

        r48 = $r33;

        virtualinvoke r48.<android.graphics.drawable.VectorDrawable$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r3, r4);

        $r38 = r9.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r48);

        $r37 = virtualinvoke r48.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String getPathName()>();

        if $r37 == null goto label04;

        $r40 = r6.<android.graphics.drawable.VectorDrawable$VPathRenderer: android.util.ArrayMap mVGTargetsMap>;

        $r39 = virtualinvoke r48.<android.graphics.drawable.VectorDrawable$VClipPath: java.lang.String getPathName()>();

        virtualinvoke $r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, r48);

     label04:
        $i7 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i5 = r48.<android.graphics.drawable.VectorDrawable$VClipPath: int mChangingConfigurations>;

        $i6 = $i7 | $i5;

        r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i6;

        goto label07;

     label05:
        $r27 = "group";

        $z3 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z3 == 0 goto label07;

        $r30 = new android.graphics.drawable.VectorDrawable$VGroup;

        specialinvoke $r30.<android.graphics.drawable.VectorDrawable$VGroup: void <init>()>();

        r49 = $r30;

        virtualinvoke r49.<android.graphics.drawable.VectorDrawable$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r3, r4);

        $r31 = r9.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r49);

        virtualinvoke r7.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r49);

        $r32 = virtualinvoke r49.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>();

        if $r32 == null goto label06;

        $r36 = r6.<android.graphics.drawable.VectorDrawable$VPathRenderer: android.util.ArrayMap mVGTargetsMap>;

        $r35 = virtualinvoke r49.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>();

        virtualinvoke $r36.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, r49);

     label06:
        $i4 = r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i2 = staticinvoke <android.graphics.drawable.VectorDrawable$VGroup: int access$100(android.graphics.drawable.VectorDrawable$VGroup)>(r49);

        $i3 = $i4 | $i2;

        r5.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i3;

     label07:
        goto label09;

     label08:
        if i0 != 3 goto label09;

        r50 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r23 = "group";

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r50);

        if $z1 == 0 goto label09;

        virtualinvoke r7.<java.util.Stack: java.lang.Object pop()>();

     label09:
        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label10:
        if z0 == 0 goto label12;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        r51 = $r14;

        $i1 = virtualinvoke r51.<java.lang.StringBuffer: int length()>();

        if $i1 <= 0 goto label11;

        virtualinvoke r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" or ");

     label11:
        virtualinvoke r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("path");

        $r17 = new org.xmlpull.v1.XmlPullParserException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r51);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" defined");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label12:
        return;
    }

    private void printGroupTree(android.graphics.drawable.VectorDrawable$VGroup, int)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VGroup r1, $r25;
        int i0, i1, $i4, $i5, i6;
        java.lang.String r2, $r5, $r8, $r12, $r15, $r19, $r20;
        java.lang.Object r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r17, $r18, $r23, $r24, $r26;
        float $f0;
        android.graphics.Matrix $r16;
        java.util.ArrayList $r21, $r22;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VGroup;

        i0 := @parameter1: int;

        r2 = "";

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        r2 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current group is :");

        $r8 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rotation is ");

        $f0 = staticinvoke <android.graphics.drawable.VectorDrawable$VGroup: float access$200(android.graphics.drawable.VectorDrawable$VGroup)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r5, $r12);

        $r15 = <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matrix is :");

        $r16 = virtualinvoke r1.<android.graphics.drawable.VectorDrawable$VGroup: android.graphics.Matrix getLocalMatrix()>();

        $r19 = virtualinvoke $r16.<android.graphics.Matrix: java.lang.String toString()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r15, $r20);

        i6 = 0;

     label3:
        $r21 = r1.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        $i4 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        if i6 >= $i4 goto label5;

        $r22 = r1.<android.graphics.drawable.VectorDrawable$VGroup: java.util.ArrayList mChildren>;

        r3 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $z0 = r3 instanceof android.graphics.drawable.VectorDrawable$VGroup;

        if $z0 == 0 goto label4;

        $r25 = (android.graphics.drawable.VectorDrawable$VGroup) r3;

        $i5 = i0 + 1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void printGroupTree(android.graphics.drawable.VectorDrawable$VGroup,int)>($r25, $i5);

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        return;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.VectorDrawable r0;
        int $i0, $i1, $i2;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $i1 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        $i2 = $i0 | $i1;

        return $i2;
    }

    void setAllowCaching(boolean)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 := @parameter0: boolean;

        r0.<android.graphics.drawable.VectorDrawable: boolean mAllowCaching> = z0;

        return;
    }

    private boolean needMirroring()
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: boolean isAutoMirrored()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable: int getLayoutDirection()>();

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.VectorDrawable r0;
        boolean z0, $z1;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1, $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z1 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        if $z1 == z0 goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $r2.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = z0;

        virtualinvoke r0.<android.graphics.drawable.VectorDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState $r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        $r1 = r0.<android.graphics.drawable.VectorDrawable: android.graphics.drawable.VectorDrawable$VectorDrawableState mVectorState>;

        $z0 = $r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        return $z0;
    }

    void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState, android.content.res.Resources, android.content.res.Resources$Theme, android.graphics.drawable.VectorDrawable$1)
    {
        android.graphics.drawable.VectorDrawable r0;
        android.graphics.drawable.VectorDrawable$VectorDrawableState r1;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.VectorDrawable$1 r4;

        r0 := @this: android.graphics.drawable.VectorDrawable;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        r4 := @parameter3: android.graphics.drawable.VectorDrawable$1;

        specialinvoke r0.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.content.res.Resources$Theme)>(r1, r2, r3);

        return;
    }

    static int access$800(int, float)
    {
        int i0, $i1;
        float f0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = staticinvoke <android.graphics.drawable.VectorDrawable: int applyAlpha(int,float)>(i0, f0);

        return $i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.graphics.drawable.VectorDrawable: boolean DBG_VECTOR_DRAWABLE> = 0;

        <android.graphics.drawable.VectorDrawable: int LINEJOIN_BEVEL> = 2;

        <android.graphics.drawable.VectorDrawable: int LINEJOIN_ROUND> = 1;

        <android.graphics.drawable.VectorDrawable: int LINEJOIN_MITER> = 0;

        <android.graphics.drawable.VectorDrawable: int LINECAP_SQUARE> = 2;

        <android.graphics.drawable.VectorDrawable: int LINECAP_ROUND> = 1;

        <android.graphics.drawable.VectorDrawable: int LINECAP_BUTT> = 0;

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_VECTOR> = "vector";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_PATH> = "path";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_GROUP> = "group";

        <android.graphics.drawable.VectorDrawable: java.lang.String SHAPE_CLIP_PATH> = "clip-path";

        $r0 = class "android/graphics/drawable/VectorDrawable";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.graphics.drawable.VectorDrawable: java.lang.String LOGTAG> = $r1;

        return;
    }
}
