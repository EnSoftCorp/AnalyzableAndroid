public final class android.media.MediaCodecInfo$CodecCapabilities extends java.lang.Object
{
    private java.lang.String mMime;
    public android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels;
    public static final int COLOR_FormatMonochrome;
    public static final int COLOR_Format8bitRGB332;
    public static final int COLOR_Format12bitRGB444;
    public static final int COLOR_Format16bitARGB4444;
    public static final int COLOR_Format16bitARGB1555;
    public static final int COLOR_Format16bitRGB565;
    public static final int COLOR_Format16bitBGR565;
    public static final int COLOR_Format18bitRGB666;
    public static final int COLOR_Format18bitARGB1665;
    public static final int COLOR_Format19bitARGB1666;
    public static final int COLOR_Format24bitRGB888;
    public static final int COLOR_Format24bitBGR888;
    public static final int COLOR_Format24bitARGB1887;
    public static final int COLOR_Format25bitARGB1888;
    public static final int COLOR_Format32bitBGRA8888;
    public static final int COLOR_Format32bitARGB8888;
    public static final int COLOR_FormatYUV411Planar;
    public static final int COLOR_FormatYUV411PackedPlanar;
    public static final int COLOR_FormatYUV420Planar;
    public static final int COLOR_FormatYUV420PackedPlanar;
    public static final int COLOR_FormatYUV420SemiPlanar;
    public static final int COLOR_FormatYUV422Planar;
    public static final int COLOR_FormatYUV422PackedPlanar;
    public static final int COLOR_FormatYUV422SemiPlanar;
    public static final int COLOR_FormatYCbYCr;
    public static final int COLOR_FormatYCrYCb;
    public static final int COLOR_FormatCbYCrY;
    public static final int COLOR_FormatCrYCbY;
    public static final int COLOR_FormatYUV444Interleaved;
    public static final int COLOR_FormatRawBayer8bit;
    public static final int COLOR_FormatRawBayer10bit;
    public static final int COLOR_FormatRawBayer8bitcompressed;
    public static final int COLOR_FormatL2;
    public static final int COLOR_FormatL4;
    public static final int COLOR_FormatL8;
    public static final int COLOR_FormatL16;
    public static final int COLOR_FormatL24;
    public static final int COLOR_FormatL32;
    public static final int COLOR_FormatYUV420PackedSemiPlanar;
    public static final int COLOR_FormatYUV422PackedSemiPlanar;
    public static final int COLOR_Format18BitBGR666;
    public static final int COLOR_Format24BitARGB6666;
    public static final int COLOR_Format24BitABGR6666;
    public static final int COLOR_TI_FormatYUV420PackedSemiPlanar;
    public static final int COLOR_FormatSurface;
    public static final int COLOR_FormatYUV420Flexible;
    public static final int COLOR_QCOM_FormatYUV420SemiPlanar;
    public int[] colorFormats;
    private int mFlagsSupported;
    private int mFlagsRequired;
    private int mFlagsVerified;
    public static final java.lang.String FEATURE_AdaptivePlayback;
    public static final java.lang.String FEATURE_SecurePlayback;
    public static final java.lang.String FEATURE_TunneledPlayback;
    private static final android.media.MediaCodecInfo$Feature[] decoderFeatures;
    int mError;
    private static final java.lang.String TAG;
    private android.media.MediaCodecInfo$AudioCapabilities mAudioCaps;
    private android.media.MediaCodecInfo$VideoCapabilities mVideoCaps;
    private android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps;
    private android.media.MediaFormat mDefaultFormat;
    private android.media.MediaFormat mCapabilitiesInfo;

    public void <init>()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean isFeatureSupported(java.lang.String)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported>;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean checkFeature(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public final boolean isFeatureRequired(java.lang.String)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired>;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean checkFeature(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public java.lang.String[] validFeatures()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$Feature[] r1;
        java.lang.String[] r2;
        int i0, $i1, $i2;
        android.media.MediaCodecInfo$Feature $r3;
        java.lang.String $r4;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        $i1 = lengthof r1;

        r2 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r3 = r1[i0];

        $r4 = $r3.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        r2[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }

    private android.media.MediaCodecInfo$Feature[] getValidFeatures()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        boolean $z0;
        android.media.MediaCodecInfo$Feature[] $r1, $r2;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isEncoder()>();

        if $z0 != 0 goto label1;

        $r2 = <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] decoderFeatures>;

        return $r2;

     label1:
        $r1 = newarray (android.media.MediaCodecInfo$Feature)[0];

        return $r1;
    }

    private boolean checkFeature(java.lang.String, int)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1, $r4;
        int i0, i1, i2, $i3, $i4;
        android.media.MediaCodecInfo$Feature[] r2;
        android.media.MediaCodecInfo$Feature r3;
        boolean $z0, $z1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label5;

        r3 = r2[i2];

        $r4 = r3.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $i3 = r3.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i4 = i0 & $i3;

        if $i4 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return 0;
    }

    public boolean isRegular()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$Feature[] r1;
        int i0, i1;
        android.media.MediaCodecInfo$Feature r2;
        boolean $z0, $z1;
        java.lang.String $r3;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2.<android.media.MediaCodecInfo$Feature: boolean mDefault>;

        if $z0 != 0 goto label2;

        $r3 = r2.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z1 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)>($r3);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public final boolean isFormatSupported(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaFormat r1;
        java.util.Map r2;
        java.lang.String r3, $r15, $r17, $r20, $r21, $r22;
        android.media.MediaCodecInfo$Feature[] r4;
        int i0, i1, $i2, $i3;
        android.media.MediaCodecInfo$Feature r5;
        java.lang.Integer r6;
        java.lang.Object $r7, $r19;
        android.media.MediaCodecInfo$AudioCapabilities $r8, $r13;
        android.media.MediaCodecInfo$VideoCapabilities $r9, $r12;
        android.media.MediaCodecInfo$EncoderCapabilities $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r14, $r16, $r18;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        $r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("mime");

        r3 = (java.lang.String) $r7;

        if r3 == null goto label01;

        $r22 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z4 != 0 goto label01;

        return 0;

     label01:
        r4 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i0 = lengthof r4;

        i1 = 0;

     label02:
        if i1 >= i0 goto label07;

        r5 = r4[i1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r15 = r5.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r6 = (java.lang.Integer) $r19;

        if r6 != null goto label03;

        goto label06;

     label03:
        $i2 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        if $i2 != 1 goto label04;

        $r21 = r5.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z5 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>($r21);

        if $z5 == 0 goto label05;

     label04:
        $i3 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        if $i3 != 0 goto label06;

        $r20 = r5.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z3 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)>($r20);

        if $z3 == 0 goto label06;

     label05:
        return 0;

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        $r8 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        if $r8 == null goto label08;

        $r13 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        $z2 = virtualinvoke $r13.<android.media.MediaCodecInfo$AudioCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        $r9 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        if $r9 == null goto label09;

        $r12 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        $z1 = virtualinvoke $r12.<android.media.MediaCodecInfo$VideoCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z1 != 0 goto label09;

        return 0;

     label09:
        $r10 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        if $r10 == null goto label10;

        $r11 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        $z0 = virtualinvoke $r11.<android.media.MediaCodecInfo$EncoderCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z0 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    public android.media.MediaFormat getDefaultFormat()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaFormat $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        return $r1;
    }

    public java.lang.String getMimeType()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        return $r1;
    }

    private boolean isAudio()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$AudioCapabilities $r1;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$AudioCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        return $r1;
    }

    private boolean isEncoder()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$EncoderCapabilities $r1;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$EncoderCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        return $r1;
    }

    private boolean isVideo()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$VideoCapabilities $r1;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$VideoCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        return $r1;
    }

    public android.media.MediaCodecInfo$CodecCapabilities dup()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0, $r1;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r2, $r3, $r7;
        int $i0, $i1, $i2;
        java.lang.Object[] $r4;
        int[] $r5, $r6, $r8;
        boolean $z0;
        android.media.MediaFormat $r9, $r10;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = new android.media.MediaCodecInfo$CodecCapabilities;

        $r3 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        $r2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r7 = (android.media.MediaCodecInfo$CodecProfileLevel[]) $r4;

        $r6 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>;

        $r5 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>;

        $i1 = lengthof $r5;

        $r8 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r6, $i1);

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isEncoder()>();

        $i2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsVerified>;

        $r10 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        $r9 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mCapabilitiesInfo>;

        specialinvoke $r1.<android.media.MediaCodecInfo$CodecCapabilities: void <init>(android.media.MediaCodecInfo$CodecProfileLevel[],int[],boolean,int,android.media.MediaFormat,android.media.MediaFormat)>($r7, $r8, $z0, $i2, $r10, $r9);

        return $r1;
    }

    public static android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, $i2;
        android.media.MediaCodecInfo$CodecProfileLevel r1, $r4;
        android.media.MediaFormat r2, $r5, $r8;
        android.media.MediaCodecInfo$CodecCapabilities r3, $r6;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r7;
        int[] $r9;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = new android.media.MediaCodecInfo$CodecProfileLevel;

        specialinvoke $r4.<android.media.MediaCodecInfo$CodecProfileLevel: void <init>()>();

        r1 = $r4;

        r1.<android.media.MediaCodecInfo$CodecProfileLevel: int profile> = i0;

        r1.<android.media.MediaCodecInfo$CodecProfileLevel: int level> = i1;

        $r5 = new android.media.MediaFormat;

        specialinvoke $r5.<android.media.MediaFormat: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        $r6 = new android.media.MediaCodecInfo$CodecCapabilities;

        $r7 = newarray (android.media.MediaCodecInfo$CodecProfileLevel)[1];

        $r7[0] = r1;

        $r9 = newarray (int)[0];

        $r8 = new android.media.MediaFormat;

        specialinvoke $r8.<android.media.MediaFormat: void <init>()>();

        specialinvoke $r6.<android.media.MediaCodecInfo$CodecCapabilities: void <init>(android.media.MediaCodecInfo$CodecProfileLevel[],int[],boolean,int,android.media.MediaFormat,android.media.MediaFormat)>($r7, $r9, 1, 0, r2, $r8);

        r3 = $r6;

        $i2 = r3.<android.media.MediaCodecInfo$CodecCapabilities: int mError>;

        if $i2 == 0 goto label1;

        return null;

     label1:
        return r3;
    }

    void <init>(android.media.MediaCodecInfo$CodecProfileLevel[], int[], boolean, int, java.util.Map, java.util.Map)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$CodecProfileLevel[] r1;
        int[] r2;
        boolean z0;
        int i0;
        java.util.Map r3, r4;
        android.media.MediaFormat $r5, $r6;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: android.media.MediaCodecInfo$CodecProfileLevel[];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r3 := @parameter4: java.util.Map;

        r4 := @parameter5: java.util.Map;

        $r5 = new android.media.MediaFormat;

        specialinvoke $r5.<android.media.MediaFormat: void <init>(java.util.Map)>(r3);

        $r6 = new android.media.MediaFormat;

        specialinvoke $r6.<android.media.MediaFormat: void <init>(java.util.Map)>(r4);

        specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: void <init>(android.media.MediaCodecInfo$CodecProfileLevel[],int[],boolean,int,android.media.MediaFormat,android.media.MediaFormat)>(r1, r2, z0, i0, $r5, $r6);

        return;
    }

    void <init>(android.media.MediaCodecInfo$CodecProfileLevel[], int[], boolean, int, android.media.MediaFormat, android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$CodecProfileLevel[] r1;
        int[] r2;
        boolean z0, $z1, $z2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.media.MediaFormat r3, r4, $r10, $r21, $r23, $r25;
        java.util.Map r5;
        android.media.MediaCodecInfo$Feature[] r6;
        android.media.MediaCodecInfo$Feature r7;
        java.lang.String r8, $r11, $r12, $r13, $r14, $r15, $r19;
        java.lang.Integer r9;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.Object $r20;
        android.media.MediaCodecInfo$EncoderCapabilities $r22, $r26;
        android.media.MediaCodecInfo$AudioCapabilities $r24, $r28;
        android.media.MediaCodecInfo$VideoCapabilities $r27;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: android.media.MediaCodecInfo$CodecProfileLevel[];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r3 := @parameter4: android.media.MediaFormat;

        r4 := @parameter5: android.media.MediaFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = virtualinvoke r4.<android.media.MediaFormat: java.util.Map getMap()>();

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels> = r1;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats> = r2;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsVerified> = i0;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat> = r3;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mCapabilitiesInfo> = r4;

        $r10 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        $r12 = virtualinvoke $r10.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime> = $r12;

        $r11 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $r13 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("audio/");

        if $z1 == 0 goto label1;

        $r24 = staticinvoke <android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$AudioCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r4, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps> = $r24;

        $r28 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        $r25 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke $r28.<android.media.MediaCodecInfo$AudioCapabilities: void setDefaultFormat(android.media.MediaFormat)>($r25);

        goto label2;

     label1:
        $r15 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $r14 = virtualinvoke $r15.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("video/");

        if $z2 == 0 goto label2;

        $r27 = staticinvoke <android.media.MediaCodecInfo$VideoCapabilities: android.media.MediaCodecInfo$VideoCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r4, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps> = $r27;

     label2:
        if z0 == 0 goto label3;

        $r22 = staticinvoke <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$EncoderCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r4, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps> = $r22;

        $r26 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        $r23 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke $r26.<android.media.MediaCodecInfo$EncoderCapabilities: void setDefaultFormat(android.media.MediaFormat)>($r23);

     label3:
        r6 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i1 = lengthof r6;

        i2 = 0;

     label4:
        if i2 >= i1 goto label8;

        r7 = r6[i2];

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r19 = r7.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r8 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.lang.Integer) $r20;

        if r9 != null goto label5;

        goto label7;

     label5:
        $i4 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        if $i4 <= 0 goto label6;

        $i8 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired>;

        $i5 = r7.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i9 = $i8 | $i5;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired> = $i9;

     label6:
        $i6 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported>;

        $i3 = r7.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i7 = $i6 | $i3;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported> = $i7;

        $r21 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke $r21.<android.media.MediaFormat: void setInteger(java.lang.String,int)>(r8, 1);

     label7:
        i2 = i2 + 1;

        goto label4;

     label8:
        return;
    }

    static void <clinit>()
    {
        android.media.MediaCodecInfo$Feature[] $r0;
        android.media.MediaCodecInfo$Feature $r1, $r2, $r3;

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String TAG> = "CodecCapabilities";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_TunneledPlayback> = "tunneled-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_SecurePlayback> = "secure-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_AdaptivePlayback> = "adaptive-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_QCOM_FormatYUV420SemiPlanar> = 2141391872;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Flexible> = 2135033992;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatSurface> = 2130708361;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_TI_FormatYUV420PackedSemiPlanar> = 2130706688;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitABGR6666> = 43;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitARGB6666> = 42;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18BitBGR666> = 41;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedSemiPlanar> = 40;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedSemiPlanar> = 39;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL32> = 38;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL24> = 37;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL16> = 36;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL8> = 35;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL4> = 34;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL2> = 33;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bitcompressed> = 32;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer10bit> = 31;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bit> = 30;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV444Interleaved> = 29;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCrYCbY> = 28;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCbYCrY> = 27;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCrYCb> = 26;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCbYCr> = 25;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422SemiPlanar> = 24;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedPlanar> = 23;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422Planar> = 22;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420SemiPlanar> = 21;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedPlanar> = 20;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Planar> = 19;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411PackedPlanar> = 18;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411Planar> = 17;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitARGB8888> = 16;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitBGRA8888> = 15;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format25bitARGB1888> = 14;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitARGB1887> = 13;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitBGR888> = 12;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitRGB888> = 11;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format19bitARGB1666> = 10;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitARGB1665> = 9;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitRGB666> = 8;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitBGR565> = 7;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitRGB565> = 6;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB1555> = 5;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB4444> = 4;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format12bitRGB444> = 3;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format8bitRGB332> = 2;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatMonochrome> = 1;

        $r0 = newarray (android.media.MediaCodecInfo$Feature)[3];

        $r1 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r1.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("adaptive-playback", 1, 1);

        $r0[0] = $r1;

        $r2 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r2.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("secure-playback", 2, 0);

        $r0[1] = $r2;

        $r3 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r3.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("tunneled-playback", 4, 0);

        $r0[2] = $r3;

        <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] decoderFeatures> = $r0;

        return;
    }
}
