class android.speech.tts.TextToSpeechService$CallbackMap extends android.os.RemoteCallbackList
{
    private final java.util.HashMap mCallerToCallback;
    final android.speech.tts.TextToSpeechService this$0;

    private void <init>(android.speech.tts.TextToSpeechService)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        android.speech.tts.TextToSpeechService r1;
        java.util.HashMap $r2;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: android.speech.tts.TextToSpeechService;

        r0.<android.speech.tts.TextToSpeechService$CallbackMap: android.speech.tts.TextToSpeechService this$0> = r1;

        specialinvoke r0.<android.os.RemoteCallbackList: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback> = $r2;

        return;
    }

    public void setCallback(android.os.IBinder, android.speech.tts.ITextToSpeechCallback)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        android.os.IBinder r1;
        android.speech.tts.ITextToSpeechCallback r2, r4;
        java.util.HashMap r3, $r6, $r7, $r9;
        java.lang.Throwable r5, $r11;
        java.lang.Object $r8, $r10;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.speech.tts.ITextToSpeechCallback;

        $r6 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        if r2 == null goto label2;

        virtualinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: boolean register(android.os.IInterface,java.lang.Object)>(r2, r1);

        $r9 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r4 = (android.speech.tts.ITextToSpeechCallback) $r10;

        goto label3;

     label2:
        $r7 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (android.speech.tts.ITextToSpeechCallback) $r8;

     label3:
        if r4 == null goto label4;

        if r4 == r2 goto label4;

        virtualinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: boolean unregister(android.os.IInterface)>(r4);

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void dispatchOnStop(java.lang.Object, java.lang.String)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.lang.Object r1;
        java.lang.String r2, $r9;
        android.speech.tts.ITextToSpeechCallback r3;
        android.os.RemoteException r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: android.speech.tts.ITextToSpeechCallback getCallbackFor(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.speech.tts.ITextToSpeechCallback: void onStop(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callback onStop failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextToSpeechService", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchOnSuccess(java.lang.Object, java.lang.String)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.lang.Object r1;
        java.lang.String r2, $r9;
        android.speech.tts.ITextToSpeechCallback r3;
        android.os.RemoteException r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: android.speech.tts.ITextToSpeechCallback getCallbackFor(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.speech.tts.ITextToSpeechCallback: void onSuccess(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callback onDone failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextToSpeechService", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchOnStart(java.lang.Object, java.lang.String)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.lang.Object r1;
        java.lang.String r2, $r9;
        android.speech.tts.ITextToSpeechCallback r3;
        android.os.RemoteException r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: android.speech.tts.ITextToSpeechCallback getCallbackFor(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.speech.tts.ITextToSpeechCallback: void onStart(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callback onStart failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextToSpeechService", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchOnError(java.lang.Object, java.lang.String, int)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.lang.Object r1;
        java.lang.String r2, $r9;
        int i0;
        android.speech.tts.ITextToSpeechCallback r3;
        android.os.RemoteException r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = specialinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: android.speech.tts.ITextToSpeechCallback getCallbackFor(java.lang.Object)>(r1);

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.speech.tts.ITextToSpeechCallback: void onError(java.lang.String,int)>(r2, i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callback onError failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextToSpeechService", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onCallbackDied(android.speech.tts.ITextToSpeechCallback, java.lang.Object)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        android.speech.tts.ITextToSpeechCallback r1;
        java.lang.Object r2;
        android.os.IBinder r3;
        java.util.HashMap r4, $r6, $r7;
        java.lang.Throwable r5, $r9;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: android.speech.tts.ITextToSpeechCallback;

        r2 := @parameter1: java.lang.Object;

        r3 = (android.os.IBinder) r2;

        $r6 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r3);

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void kill()
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.util.HashMap r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        $r3 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        specialinvoke r0.<android.os.RemoteCallbackList: void kill()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.speech.tts.ITextToSpeechCallback getCallbackFor(java.lang.Object)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        java.lang.Object r1, $r8;
        android.speech.tts.ITextToSpeechCallback r2;
        android.os.IBinder r3;
        java.util.HashMap r4, $r6, $r7;
        java.lang.Throwable r5, $r9;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: java.lang.Object;

        r3 = (android.os.IBinder) r1;

        $r6 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<android.speech.tts.TextToSpeechService$CallbackMap: java.util.HashMap mCallerToCallback>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r2 = (android.speech.tts.ITextToSpeechCallback) $r8;

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile void onCallbackDied(android.os.IInterface, java.lang.Object)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        android.os.IInterface r1;
        java.lang.Object r2;
        android.speech.tts.ITextToSpeechCallback $r3;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: android.os.IInterface;

        r2 := @parameter1: java.lang.Object;

        $r3 = (android.speech.tts.ITextToSpeechCallback) r1;

        virtualinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: void onCallbackDied(android.speech.tts.ITextToSpeechCallback,java.lang.Object)>($r3, r2);

        return;
    }

    void <init>(android.speech.tts.TextToSpeechService, android.speech.tts.TextToSpeechService$1)
    {
        android.speech.tts.TextToSpeechService$CallbackMap r0;
        android.speech.tts.TextToSpeechService r1;
        android.speech.tts.TextToSpeechService$1 r2;

        r0 := @this: android.speech.tts.TextToSpeechService$CallbackMap;

        r1 := @parameter0: android.speech.tts.TextToSpeechService;

        r2 := @parameter1: android.speech.tts.TextToSpeechService$1;

        specialinvoke r0.<android.speech.tts.TextToSpeechService$CallbackMap: void <init>(android.speech.tts.TextToSpeechService)>(r1);

        return;
    }
}
