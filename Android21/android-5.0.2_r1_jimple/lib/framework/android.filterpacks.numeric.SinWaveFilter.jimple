public class android.filterpacks.numeric.SinWaveFilter extends android.filterfw.core.Filter
{
    private float mStepSize;
    private float mValue;
    private android.filterfw.core.FrameFormat mOutputFormat;

    public void <init>(java.lang.String)
    {
        android.filterpacks.numeric.SinWaveFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.numeric.SinWaveFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.numeric.SinWaveFilter: float mStepSize> = 0.05F;

        r0.<android.filterpacks.numeric.SinWaveFilter: float mValue> = 0.0F;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.numeric.SinWaveFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;
        android.filterfw.core.FrameFormat $r2;

        r0 := @this: android.filterpacks.numeric.SinWaveFilter;

        $r1 = staticinvoke <android.filterfw.format.ObjectFormat: android.filterfw.core.MutableFrameFormat fromClass(java.lang.Class,int)>(class "java/lang/Float", 1);

        r0.<android.filterpacks.numeric.SinWaveFilter: android.filterfw.core.FrameFormat mOutputFormat> = $r1;

        $r2 = r0.<android.filterpacks.numeric.SinWaveFilter: android.filterfw.core.FrameFormat mOutputFormat>;

        virtualinvoke r0.<android.filterpacks.numeric.SinWaveFilter: void addOutputPort(java.lang.String,android.filterfw.core.FrameFormat)>("value", $r2);

        return;
    }

    public void open(android.filterfw.core.FilterContext)
    {
        android.filterpacks.numeric.SinWaveFilter r0;
        android.filterfw.core.FilterContext r1;

        r0 := @this: android.filterpacks.numeric.SinWaveFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r0.<android.filterpacks.numeric.SinWaveFilter: float mValue> = 0.0F;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.numeric.SinWaveFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2;
        android.filterfw.core.FrameManager $r3;
        android.filterfw.core.FrameFormat $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        double $d0, $d1;
        java.lang.Float $r5;

        r0 := @this: android.filterpacks.numeric.SinWaveFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r3 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r4 = r0.<android.filterpacks.numeric.SinWaveFilter: android.filterfw.core.FrameFormat mOutputFormat>;

        r2 = virtualinvoke $r3.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r4);

        $f0 = r0.<android.filterpacks.numeric.SinWaveFilter: float mValue>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f1 = (float) $d1;

        $f2 = $f1 + 1.0F;

        $f3 = $f2 / 2.0F;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke r2.<android.filterfw.core.Frame: void setObjectValue(java.lang.Object)>($r5);

        virtualinvoke r0.<android.filterpacks.numeric.SinWaveFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("value", r2);

        $f5 = r0.<android.filterpacks.numeric.SinWaveFilter: float mValue>;

        $f4 = r0.<android.filterpacks.numeric.SinWaveFilter: float mStepSize>;

        $f6 = $f5 + $f4;

        r0.<android.filterpacks.numeric.SinWaveFilter: float mValue> = $f6;

        virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }
}
