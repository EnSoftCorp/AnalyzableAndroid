public final class android.media.MediaCodec extends java.lang.Object
{
    public static final int BUFFER_FLAG_SYNC_FRAME;
    public static final int BUFFER_FLAG_KEY_FRAME;
    public static final int BUFFER_FLAG_CODEC_CONFIG;
    public static final int BUFFER_FLAG_END_OF_STREAM;
    private android.media.MediaCodec$EventHandler mEventHandler;
    private android.media.MediaCodec$Callback mCallback;
    private static final int EVENT_CALLBACK;
    private static final int EVENT_SET_CALLBACK;
    private static final int CB_INPUT_AVAILABLE;
    private static final int CB_OUTPUT_AVAILABLE;
    private static final int CB_ERROR;
    private static final int CB_OUTPUT_FORMAT_CHANGE;
    public static final int CONFIGURE_FLAG_ENCODE;
    public static final int CRYPTO_MODE_UNENCRYPTED;
    public static final int CRYPTO_MODE_AES_CTR;
    public static final int INFO_TRY_AGAIN_LATER;
    public static final int INFO_OUTPUT_FORMAT_CHANGED;
    public static final int INFO_OUTPUT_BUFFERS_CHANGED;
    private java.nio.ByteBuffer[] mCachedInputBuffers;
    private java.nio.ByteBuffer[] mCachedOutputBuffers;
    private final android.media.MediaCodec$BufferMap mDequeuedInputBuffers;
    private final android.media.MediaCodec$BufferMap mDequeuedOutputBuffers;
    private final java.lang.Object mBufferLock;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
    public static final java.lang.String PARAMETER_KEY_VIDEO_BITRATE;
    public static final java.lang.String PARAMETER_KEY_SUSPEND;
    public static final java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME;
    private long mNativeContext;

    public static android.media.MediaCodec createDecoderByType(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 0);

        return $r1;
    }

    public static android.media.MediaCodec createEncoderByType(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 1);

        return $r1;
    }

    public static android.media.MediaCodec createByCodecName(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 0, 0);

        return $r1;
    }

    private void <init>(java.lang.String, boolean, boolean)
    {
        android.media.MediaCodec r0;
        java.lang.String r1;
        boolean z0, z1;
        android.os.Looper r2, $r5, $r6, r10;
        android.media.MediaCodec$BufferMap $r3, $r4;
        java.lang.Object $r7;
        android.media.MediaCodec$EventHandler $r8, $r9;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.media.MediaCodec$BufferMap;

        specialinvoke $r3.<android.media.MediaCodec$BufferMap: void <init>(android.media.MediaCodec$1)>(null);

        r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers> = $r3;

        $r4 = new android.media.MediaCodec$BufferMap;

        specialinvoke $r4.<android.media.MediaCodec$BufferMap: void <init>(android.media.MediaCodec$1)>(null);

        r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers> = $r4;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r2 = $r5;

        if $r5 == null goto label1;

        $r9 = new android.media.MediaCodec$EventHandler;

        specialinvoke $r9.<android.media.MediaCodec$EventHandler: void <init>(android.media.MediaCodec,android.media.MediaCodec,android.os.Looper)>(r0, r0, r2);

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = $r9;

        goto label3;

     label1:
        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r10 = $r6;

        if $r6 == null goto label2;

        $r8 = new android.media.MediaCodec$EventHandler;

        specialinvoke $r8.<android.media.MediaCodec$EventHandler: void <init>(android.media.MediaCodec,android.media.MediaCodec,android.os.Looper)>(r0, r0, r10);

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = $r8;

        goto label3;

     label2:
        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = null;

     label3:
        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodec: java.lang.Object mBufferLock> = $r7;

        specialinvoke r0.<android.media.MediaCodec: void native_setup(java.lang.String,boolean,boolean)>(r1, z0, z1);

        return;
    }

    protected void finalize()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_finalize()>();

        return;
    }

    public final void reset()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        specialinvoke r0.<android.media.MediaCodec: void native_reset()>();

        return;
    }

    private final native void native_reset();

    public final void release()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        specialinvoke r0.<android.media.MediaCodec: void native_release()>();

        return;
    }

    private final native void native_release();

    public void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat r1;
        android.view.Surface r2;
        android.media.MediaCrypto r3;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.Map r4;
        java.lang.String[] r5;
        java.lang.Object[] r6;
        java.util.Iterator r7;
        java.util.Map$Entry r8;
        java.util.Set $r10;
        java.lang.Object $r11, $r13, $r14, $r15, $r18;
        boolean $z1, $z2;
        java.lang.String $r12, $r16;
        java.lang.Integer $r17, $r20;
        java.lang.Exception $r19;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.media.MediaCrypto;

        i0 := @parameter3: int;

        r4 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        r5 = null;

        r6 = null;

        if r1 == null goto label8;

        $i2 = interfaceinvoke r4.<java.util.Map: int size()>();

        r5 = newarray (java.lang.String)[$i2];

        $i3 = interfaceinvoke r4.<java.util.Map: int size()>();

        r6 = newarray (java.lang.Object)[$i3];

        i1 = 0;

        $r10 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r11 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r13;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("audio-session-id");

        if $z2 == 0 goto label6;

     label2:
        $r18 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.lang.Integer) $r18;

        i5 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong Session ID Parameter!");

        throw $r21;

     label5:
        r5[i1] = "audio-hw-sync";

        $i4 = staticinvoke <android.media.AudioSystem: int getAudioHwSyncForSession(int)>(i5);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r6[i1] = $r20;

        goto label7;

     label6:
        $r14 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.String) $r14;

        r5[i1] = $r16;

        $r15 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6[i1] = $r15;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        specialinvoke r0.<android.media.MediaCodec: void native_configure(java.lang.String[],java.lang.Object[],android.view.Surface,android.media.MediaCrypto,int)>(r5, r6, r2, r3, i0);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private final native void native_setCallback(android.media.MediaCodec$Callback);

    private final native void native_configure(java.lang.String[], java.lang.Object[], android.view.Surface, android.media.MediaCrypto, int);

    public final native android.view.Surface createInputSurface();

    public final void start()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_start()>();

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(1);

        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final native void native_start();

    public final void stop()
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$EventHandler $r1, $r2, $r3;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_stop()>();

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        $r1 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        virtualinvoke $r2.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(1);

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(2);

     label1:
        return;
    }

    private final native void native_stop();

    public final void flush()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        java.nio.ByteBuffer[] $r4, $r5;
        android.media.MediaCodec$BufferMap $r6, $r7;

        r0 := @this: android.media.MediaCodec;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>($r4);

        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>($r5);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void clear()>();

        $r7 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r7.<android.media.MediaCodec$BufferMap: void clear()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void native_flush()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final native void native_flush();

    public final void queueInputBuffer(int, int, int, long, int) throws android.media.MediaCodec$CryptoException
    {
        android.media.MediaCodec r0;
        int i0, i1, i2, i4;
        long l3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.nio.ByteBuffer[] $r4, $r8;
        android.media.MediaCodec$BufferMap $r5;
        java.lang.RuntimeException $r7, r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r4, i0);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r5.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void native_queueInputBuffer(int,int,int,long,int)>(i0, i1, i2, l3, i4);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void revalidateByteBuffer(java.nio.ByteBuffer[],int)>($r8, i0);

        throw r9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.media.MediaCodec$CryptoException from label5 to label6 with label7;
        catch java.lang.IllegalStateException from label5 to label6 with label7;
    }

    private final native void native_queueInputBuffer(int, int, int, long, int) throws android.media.MediaCodec$CryptoException;

    public final void queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int) throws android.media.MediaCodec$CryptoException
    {
        android.media.MediaCodec r0;
        int i0, i1, i3;
        android.media.MediaCodec$CryptoInfo r1;
        long l2;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.nio.ByteBuffer[] $r5, $r8;
        android.media.MediaCodec$BufferMap $r6;
        java.lang.RuntimeException $r7, r10;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.media.MediaCodec$CryptoInfo;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void native_queueSecureInputBuffer(int,int,android.media.MediaCodec$CryptoInfo,long,int)>(i0, i1, r1, l2, i3);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        r10 = $r7;

        $r8 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void revalidateByteBuffer(java.nio.ByteBuffer[],int)>($r8, i0);

        throw r10;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.media.MediaCodec$CryptoException from label5 to label6 with label7;
        catch java.lang.IllegalStateException from label5 to label6 with label7;
    }

    private final native void native_queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int) throws android.media.MediaCodec$CryptoException;

    public final int dequeueInputBuffer(long)
    {
        android.media.MediaCodec r0;
        long l0;
        int i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.nio.ByteBuffer[] $r4;

        r0 := @this: android.media.MediaCodec;

        l0 := @parameter0: long;

        i1 = specialinvoke r0.<android.media.MediaCodec: int native_dequeueInputBuffer(long)>(l0);

        if i1 < 0 goto label5;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void validateInputByteBuffer(java.nio.ByteBuffer[],int)>($r4, i1);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return i1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final native int native_dequeueInputBuffer(long);

    public final int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$BufferInfo r1;
        long l0;
        int i1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.nio.ByteBuffer[] $r5;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaCodec$BufferInfo;

        l0 := @parameter1: long;

        i1 = specialinvoke r0.<android.media.MediaCodec: int native_dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>(r1, l0);

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if i1 != -3 goto label2;

        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(0);

        goto label3;

     label2:
        if i1 < 0 goto label3;

        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void validateOutputByteBuffer(java.nio.ByteBuffer[],int,android.media.MediaCodec$BufferInfo)>($r5, i1, r1);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return i1;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private final native int native_dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long);

    public final void releaseOutputBuffer(int, boolean)
    {
        android.media.MediaCodec r0;
        int i0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.nio.ByteBuffer[] $r4;
        android.media.MediaCodec$BufferMap $r5;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r4, i0);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r5.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean,boolean,long)>(i0, z0, 0, 0L);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void releaseOutputBuffer(int, long)
    {
        android.media.MediaCodec r0;
        int i0;
        long l1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.nio.ByteBuffer[] $r4;
        android.media.MediaCodec$BufferMap $r5;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r4, i0);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r5.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean,boolean,long)>(i0, 1, 1, l1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final native void releaseOutputBuffer(int, boolean, boolean, long);

    public final native void signalEndOfInputStream();

    public final android.media.MediaFormat getOutputFormat()
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getFormatNative(boolean)>(0);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public final android.media.MediaFormat getInputFormat()
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getFormatNative(boolean)>(1);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public final android.media.MediaFormat getOutputFormat(int)
    {
        android.media.MediaCodec r0;
        int i0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getOutputFormatNative(int)>(i0);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    private final native java.util.Map getFormatNative(boolean);

    private final native java.util.Map getOutputFormatNative(int);

    private final void invalidateByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, $i1;
        java.nio.ByteBuffer r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        r2 = r1[i0];

        if r2 == null goto label1;

        virtualinvoke r2.<java.nio.ByteBuffer: void setAccessible(boolean)>(0);

     label1:
        return;
    }

    private final void validateInputByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, $i1;
        java.nio.ByteBuffer r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        r2 = r1[i0];

        if r2 == null goto label1;

        virtualinvoke r2.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        return;
    }

    private final void revalidateByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, $i1;
        java.lang.Object r2, $r5;
        java.nio.ByteBuffer r3;
        java.lang.Throwable r4, $r6;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        $r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        if r1 == null goto label2;

        if i0 < 0 goto label2;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label2;

        r3 = r1[i0];

        if r3 == null goto label2;

        virtualinvoke r3.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private final void validateOutputByteBuffer(java.nio.ByteBuffer[], int, android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.media.MediaCodec$BufferInfo r2;
        java.nio.ByteBuffer r3;
        java.nio.Buffer $r4;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.MediaCodec$BufferInfo;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        r3 = r1[i0];

        if r3 == null goto label1;

        virtualinvoke r3.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

        $i3 = r2.<android.media.MediaCodec$BufferInfo: int offset>;

        $i2 = r2.<android.media.MediaCodec$BufferInfo: int size>;

        $i4 = $i3 + $i2;

        $r4 = virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i4);

        $i5 = r2.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke $r4.<java.nio.Buffer: java.nio.Buffer position(int)>($i5);

     label1:
        return;
    }

    private final void invalidateByteBuffers(java.nio.ByteBuffer[])
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1, r2;
        int i0, i1;
        java.nio.ByteBuffer r3;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        if r1 == null goto label3;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        if r3 == null goto label2;

        virtualinvoke r3.<java.nio.ByteBuffer: void setAccessible(boolean)>(0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private final void freeByteBuffer(java.nio.ByteBuffer)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer r1;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 == null goto label1;

        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r1);

     label1:
        return;
    }

    private final void freeByteBuffers(java.nio.ByteBuffer[])
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1, r2;
        int i0, i1;
        java.nio.ByteBuffer r3;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        if r1 == null goto label2;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffer(java.nio.ByteBuffer)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private final void freeAllTrackedBuffers()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        java.nio.ByteBuffer[] $r4, $r5;
        android.media.MediaCodec$BufferMap $r6, $r7;

        r0 := @this: android.media.MediaCodec;

        $r3 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffers(java.nio.ByteBuffer[])>($r4);

        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffers(java.nio.ByteBuffer[])>($r5);

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers> = null;

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers> = null;

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void clear()>();

        $r7 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r7.<android.media.MediaCodec$BufferMap: void clear()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private final void cacheBuffers(boolean)
    {
        android.media.MediaCodec r0;
        boolean z0;
        java.nio.ByteBuffer[] r1;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.media.MediaCodec;

        z0 := @parameter0: boolean;

        r1 = null;

     label1:
        r1 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer[] getBuffers(boolean)>(z0);

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        if z0 == 0 goto label5;

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers> = r1;

        goto label6;

     label5:
        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers> = r1;

     label6:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public java.nio.ByteBuffer[] getInputBuffers()
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        return $r2;
    }

    public java.nio.ByteBuffer[] getOutputBuffers()
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        return $r2;
    }

    public java.nio.ByteBuffer getInputBuffer(int)
    {
        android.media.MediaCodec r0;
        int i0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.nio.ByteBuffer[] $r5;
        android.media.MediaCodec$BufferMap $r6;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer getBuffer(boolean,int)>(1, i0);

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void put(int,java.nio.ByteBuffer)>(i0, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.media.Image getInputImage(int)
    {
        android.media.MediaCodec r0;
        int i0;
        android.media.Image r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.nio.ByteBuffer[] $r5;
        android.media.MediaCodec$BufferMap $r6;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.media.MediaCodec: android.media.Image getImage(boolean,int)>(1, i0);

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void put(int,android.media.Image)>(i0, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.nio.ByteBuffer getOutputBuffer(int)
    {
        android.media.MediaCodec r0;
        int i0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.nio.ByteBuffer[] $r5;
        android.media.MediaCodec$BufferMap $r6;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer getBuffer(boolean,int)>(0, i0);

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void put(int,java.nio.ByteBuffer)>(i0, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.media.Image getOutputImage(int)
    {
        android.media.MediaCodec r0;
        int i0;
        android.media.Image r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.nio.ByteBuffer[] $r5;
        android.media.MediaCodec$BufferMap $r6;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.media.MediaCodec: android.media.Image getImage(boolean,int)>(0, i0);

        $r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void put(int,android.media.Image)>(i0, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final native void setVideoScalingMode(int);

    public final native java.lang.String getName();

    public final void setParameters(android.os.Bundle)
    {
        android.media.MediaCodec r0;
        android.os.Bundle r1;
        java.lang.String[] r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        java.util.Iterator r4;
        java.lang.String r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.os.Bundle;

        if r1 != null goto label1;

        return;

     label1:
        $i1 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r2 = newarray (java.lang.String)[$i1];

        $i2 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r3 = newarray (java.lang.Object)[$i2];

        i0 = 0;

        $r6 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        r2[i0] = r5;

        $r8 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r5);

        r3[i0] = $r8;

        i0 = i0 + 1;

        goto label2;

     label3:
        specialinvoke r0.<android.media.MediaCodec: void setParameters(java.lang.String[],java.lang.Object[])>(r2, r3);

        return;
    }

    public void setCallback(android.media.MediaCodec$Callback)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback r1;
        android.os.Message r2;
        android.media.MediaCodec$EventHandler $r3, $r4, $r5;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaCodec$Callback;

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        if $r3 == null goto label1;

        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        r2 = virtualinvoke $r4.<android.media.MediaCodec$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(2, 0, 0, r1);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        virtualinvoke $r5.<android.media.MediaCodec$EventHandler: boolean sendMessage(android.os.Message)>(r2);

        specialinvoke r0.<android.media.MediaCodec: void native_setCallback(android.media.MediaCodec$Callback)>(r1);

     label1:
        return;
    }

    private void postEventFromNative(int, int, int, java.lang.Object)
    {
        android.media.MediaCodec r0;
        int i0, i1, i2;
        java.lang.Object r1;
        android.os.Message r2;
        android.media.MediaCodec$EventHandler $r3, $r4, $r5;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        if $r3 == null goto label1;

        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        r2 = virtualinvoke $r4.<android.media.MediaCodec$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        virtualinvoke $r5.<android.media.MediaCodec$EventHandler: boolean sendMessage(android.os.Message)>(r2);

     label1:
        return;
    }

    private final native void setParameters(java.lang.String[], java.lang.Object[]);

    public android.media.MediaCodecInfo getCodecInfo()
    {
        android.media.MediaCodec r0;
        java.lang.String $r1;
        android.media.MediaCodecInfo $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = virtualinvoke r0.<android.media.MediaCodec: java.lang.String getName()>();

        $r2 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getInfoFor(java.lang.String)>($r1);

        return $r2;
    }

    private final native java.nio.ByteBuffer[] getBuffers(boolean);

    private final native java.nio.ByteBuffer getBuffer(boolean, int);

    private final native android.media.Image getImage(boolean, int);

    private static final native void native_init();

    private final native void native_setup(java.lang.String, boolean, boolean);

    private final native void native_finalize();

    static android.media.MediaCodec$Callback access$002(android.media.MediaCodec, android.media.MediaCodec$Callback)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback r1;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: android.media.MediaCodec$Callback;

        r0.<android.media.MediaCodec: android.media.MediaCodec$Callback mCallback> = r1;

        return r1;
    }

    static android.media.MediaCodec$Callback access$000(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: android.media.MediaCodec$Callback mCallback>;

        return $r1;
    }

    static java.lang.Object access$100(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        return $r1;
    }

    static java.nio.ByteBuffer[] access$200(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        return $r1;
    }

    static void access$300(android.media.MediaCodec, java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        specialinvoke r0.<android.media.MediaCodec: void validateInputByteBuffer(java.nio.ByteBuffer[],int)>(r1, i0);

        return;
    }

    static java.nio.ByteBuffer[] access$400(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        return $r1;
    }

    static void access$500(android.media.MediaCodec, java.nio.ByteBuffer[], int, android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0;
        android.media.MediaCodec$BufferInfo r2;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.media.MediaCodec$BufferInfo;

        specialinvoke r0.<android.media.MediaCodec: void validateOutputByteBuffer(java.nio.ByteBuffer[],int,android.media.MediaCodec$BufferInfo)>(r1, i0, r2);

        return;
    }

    static void <clinit>()
    {
        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME> = "request-sync";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND> = "drop-input-frames";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_VIDEO_BITRATE> = "video-bitrate";

        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING> = 2;

        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT> = 1;

        <android.media.MediaCodec: int INFO_OUTPUT_BUFFERS_CHANGED> = -3;

        <android.media.MediaCodec: int INFO_OUTPUT_FORMAT_CHANGED> = -2;

        <android.media.MediaCodec: int INFO_TRY_AGAIN_LATER> = -1;

        <android.media.MediaCodec: int CRYPTO_MODE_AES_CTR> = 1;

        <android.media.MediaCodec: int CRYPTO_MODE_UNENCRYPTED> = 0;

        <android.media.MediaCodec: int CONFIGURE_FLAG_ENCODE> = 1;

        <android.media.MediaCodec: int CB_OUTPUT_FORMAT_CHANGE> = 4;

        <android.media.MediaCodec: int CB_ERROR> = 3;

        <android.media.MediaCodec: int CB_OUTPUT_AVAILABLE> = 2;

        <android.media.MediaCodec: int CB_INPUT_AVAILABLE> = 1;

        <android.media.MediaCodec: int EVENT_SET_CALLBACK> = 2;

        <android.media.MediaCodec: int EVENT_CALLBACK> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_END_OF_STREAM> = 4;

        <android.media.MediaCodec: int BUFFER_FLAG_CODEC_CONFIG> = 2;

        <android.media.MediaCodec: int BUFFER_FLAG_KEY_FRAME> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_SYNC_FRAME> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCodec: void native_init()>();

        return;
    }
}
