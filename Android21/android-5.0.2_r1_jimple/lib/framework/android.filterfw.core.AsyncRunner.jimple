public class android.filterfw.core.AsyncRunner extends android.filterfw.core.GraphRunner
{
    private java.lang.Class mSchedulerClass;
    private android.filterfw.core.SyncRunner mRunner;
    private android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask;
    private android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener;
    private boolean isProcessing;
    private java.lang.Exception mException;
    private boolean mLogVerbose;
    private static final java.lang.String TAG;

    public void <init>(android.filterfw.core.FilterContext, java.lang.Class)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.FilterContext r1;
        java.lang.Class r2;
        boolean $z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<android.filterfw.core.GraphRunner: void <init>(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass> = r2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AsyncRunner", 2);

        r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose> = $z0;

        return;
    }

    public void <init>(android.filterfw.core.FilterContext)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        specialinvoke r0.<android.filterfw.core.GraphRunner: void <init>(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass> = class "android/filterfw/core/SimpleScheduler";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AsyncRunner", 2);

        r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose> = $z0;

        return;
    }

    public void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener r1;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.GraphRunner$OnRunnerDoneListener;

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener> = r1;

        return;
    }

    public synchronized void setGraph(android.filterfw.core.FilterGraph)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.FilterGraph r1;
        boolean $z0;
        android.filterfw.core.SyncRunner $r2;
        java.lang.Class $r3;
        android.filterfw.core.FilterContext $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: android.filterfw.core.FilterGraph;

        $z0 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Graph is already running!");

        throw $r5;

     label1:
        $r2 = new android.filterfw.core.SyncRunner;

        $r4 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.FilterContext mFilterContext>;

        $r3 = r0.<android.filterfw.core.AsyncRunner: java.lang.Class mSchedulerClass>;

        specialinvoke $r2.<android.filterfw.core.SyncRunner: void <init>(android.filterfw.core.FilterContext,android.filterfw.core.FilterGraph,java.lang.Class)>($r4, r1, $r3);

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner> = $r2;

        return;
    }

    public android.filterfw.core.FilterGraph getGraph()
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.SyncRunner $r1, $r2;
        android.filterfw.core.FilterGraph $r3;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        if $r1 == null goto label1;

        $r2 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        $r3 = virtualinvoke $r2.<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public synchronized void run()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0, $z1;
        android.filterfw.core.SyncRunner $r1, $r4;
        android.filterfw.core.AsyncRunner$AsyncRunnerTask $r2, $r5;
        android.filterfw.core.SyncRunner[] $r3;
        java.lang.RuntimeException $r7, $r8;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $z0 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Running graph.");

     label1:
        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setException(java.lang.Exception)>(null);

        $z1 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z1 == 0 goto label2;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Graph is already running!");

        throw $r8;

     label2:
        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        if $r1 != null goto label3;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot run before a graph is set!");

        throw $r7;

     label3:
        $r2 = new android.filterfw.core.AsyncRunner$AsyncRunnerTask;

        specialinvoke $r2.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void <init>(android.filterfw.core.AsyncRunner,android.filterfw.core.AsyncRunner$1)>(r0, null);

        r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask> = $r2;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setRunning(boolean)>(1);

        $r5 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        $r3 = newarray (android.filterfw.core.SyncRunner)[1];

        $r4 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        $r3[0] = $r4;

        virtualinvoke $r5.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.os.AsyncTask execute(java.lang.Object[])>($r3);

        return;
    }

    public synchronized void stop()
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.AsyncRunner$AsyncRunnerTask $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        if $r1 == null goto label2;

        $r2 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        $z0 = virtualinvoke $r2.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: boolean isCancelled()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Stopping graph.");

     label1:
        $r3 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.AsyncRunner$AsyncRunnerTask mRunTask>;

        virtualinvoke $r3.<android.filterfw.core.AsyncRunner$AsyncRunnerTask: boolean cancel(boolean)>(0);

     label2:
        return;
    }

    public synchronized void close()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0, $z1;
        android.filterfw.core.SyncRunner $r1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $z0 = virtualinvoke r0.<android.filterfw.core.AsyncRunner: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot close graph while it is running!");

        throw $r2;

     label1:
        $z1 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AsyncRunner", "Closing filters.");

     label2:
        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        virtualinvoke $r1.<android.filterfw.core.SyncRunner: void close()>();

        return;
    }

    public synchronized boolean isRunning()
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $z0 = r0.<android.filterfw.core.AsyncRunner: boolean isProcessing>;

        return $z0;
    }

    public synchronized java.lang.Exception getError()
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Exception $r1;

        r0 := @this: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: java.lang.Exception mException>;

        return $r1;
    }

    private synchronized void setRunning(boolean)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean z0;

        r0 := @this: android.filterfw.core.AsyncRunner;

        z0 := @parameter0: boolean;

        r0.<android.filterfw.core.AsyncRunner: boolean isProcessing> = z0;

        return;
    }

    private synchronized void setException(java.lang.Exception)
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Exception r1;

        r0 := @this: android.filterfw.core.AsyncRunner;

        r1 := @parameter0: java.lang.Exception;

        r0.<android.filterfw.core.AsyncRunner: java.lang.Exception mException> = r1;

        return;
    }

    static boolean access$100(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean $z0;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $z0 = r0.<android.filterfw.core.AsyncRunner: boolean mLogVerbose>;

        return $z0;
    }

    static void access$200(android.filterfw.core.AsyncRunner, boolean)
    {
        android.filterfw.core.AsyncRunner r0;
        boolean z0;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setRunning(boolean)>(z0);

        return;
    }

    static void access$300(android.filterfw.core.AsyncRunner, java.lang.Exception)
    {
        android.filterfw.core.AsyncRunner r0;
        java.lang.Exception r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        r1 := @parameter1: java.lang.Exception;

        specialinvoke r0.<android.filterfw.core.AsyncRunner: void setException(java.lang.Exception)>(r1);

        return;
    }

    static android.filterfw.core.SyncRunner access$400(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.SyncRunner $r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.SyncRunner mRunner>;

        return $r1;
    }

    static android.filterfw.core.GraphRunner$OnRunnerDoneListener access$500(android.filterfw.core.AsyncRunner)
    {
        android.filterfw.core.AsyncRunner r0;
        android.filterfw.core.GraphRunner$OnRunnerDoneListener $r1;

        r0 := @parameter0: android.filterfw.core.AsyncRunner;

        $r1 = r0.<android.filterfw.core.AsyncRunner: android.filterfw.core.GraphRunner$OnRunnerDoneListener mDoneListener>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.filterfw.core.AsyncRunner: java.lang.String TAG> = "AsyncRunner";

        return;
    }
}
