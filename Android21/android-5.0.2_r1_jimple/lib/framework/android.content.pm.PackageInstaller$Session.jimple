public class android.content.pm.PackageInstaller$Session extends java.lang.Object implements java.io.Closeable
{
    private android.content.pm.IPackageInstallerSession mSession;

    public void <init>(android.content.pm.IPackageInstallerSession)
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.pm.IPackageInstallerSession r1;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: android.content.pm.IPackageInstallerSession;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession> = r1;

        return;
    }

    public void setProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>(f0);

        return;
    }

    public void setStagingProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void setClientProgress(float)>(f0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = virtualinvoke r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addProgress(float)
    {
        android.content.pm.PackageInstaller$Session r0;
        float f0;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void addClientProgress(float)>(f0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = virtualinvoke r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.io.OutputStream openWrite(java.lang.String, long, long) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        java.lang.String r1;
        long l0, l1;
        android.os.ParcelFileDescriptor r2;
        android.content.pm.IPackageInstallerSession $r3;
        android.os.FileBridge$FileBridgeOutputStream $r4;
        java.lang.RuntimeException $r5, $r7, r8;
        android.os.RemoteException $r6, r9;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $r3 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        r2 = interfaceinvoke $r3.<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>(r1, l0, l1);

        $r4 = new android.os.FileBridge$FileBridgeOutputStream;

        specialinvoke $r4.<android.os.FileBridge$FileBridgeOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r8 = $r5;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>(r8);

        throw r8;

     label4:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = virtualinvoke r9.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r7;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public void fsync(java.io.OutputStream) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        java.io.OutputStream r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.os.FileBridge$FileBridgeOutputStream $r3;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: java.io.OutputStream;

        $z0 = r1 instanceof android.os.FileBridge$FileBridgeOutputStream;

        if $z0 == 0 goto label1;

        $r3 = (android.os.FileBridge$FileBridgeOutputStream) r1;

        virtualinvoke $r3.<android.os.FileBridge$FileBridgeOutputStream: void fsync()>();

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized stream");

        throw $r2;

     label2:
        return;
    }

    public java.lang.String[] getNames() throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        java.lang.RuntimeException r1, $r4, $r6;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.String[] $r3;
        android.os.RemoteException $r5, r7;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        $r3 = interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: java.lang.String[] getNames()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>(r1);

        throw r1;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = virtualinvoke r7.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r6;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.io.InputStream openRead(java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$Session r0;
        java.lang.String r1;
        android.os.ParcelFileDescriptor r2;
        android.content.pm.IPackageInstallerSession $r3;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r4;
        android.os.RemoteException $r5, r9;
        java.lang.RuntimeException $r6, $r7, r8;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        r2 = interfaceinvoke $r3.<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>(r1);

        $r4 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r4.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r2);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <android.util.ExceptionUtils: void maybeUnwrapIOException(java.lang.RuntimeException)>(r8);

        throw r8;

     label4:
        $r5 := @caughtexception;

        r9 = $r5;

        $r6 = virtualinvoke r9.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r6;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public void commit(android.content.IntentSender)
    {
        android.content.pm.PackageInstaller$Session r0;
        android.content.IntentSender r1;
        android.os.RemoteException r2, $r4;
        android.content.pm.IPackageInstallerSession $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.content.pm.PackageInstaller$Session;

        r1 := @parameter0: android.content.IntentSender;

     label1:
        $r3 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r3.<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = virtualinvoke r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void close()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = virtualinvoke r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void abandon()
    {
        android.content.pm.PackageInstaller$Session r0;
        android.os.RemoteException r1, $r3;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.content.pm.PackageInstaller$Session;

     label1:
        $r2 = r0.<android.content.pm.PackageInstaller$Session: android.content.pm.IPackageInstallerSession mSession>;

        interfaceinvoke $r2.<android.content.pm.IPackageInstallerSession: void abandon()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = virtualinvoke r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
