public class android.net.VpnService$Builder extends java.lang.Object
{
    private final com.android.internal.net.VpnConfig mConfig;
    private final java.util.List mAddresses;
    private final java.util.List mRoutes;
    final android.net.VpnService this$0;

    public void <init>(android.net.VpnService)
    {
        android.net.VpnService$Builder r0;
        android.net.VpnService r1;
        com.android.internal.net.VpnConfig $r2, $r5;
        java.util.ArrayList $r3, $r4;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: android.net.VpnService;

        r0.<android.net.VpnService$Builder: android.net.VpnService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.internal.net.VpnConfig;

        specialinvoke $r2.<com.android.internal.net.VpnConfig: void <init>()>();

        r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.net.VpnService$Builder: java.util.List mAddresses> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.net.VpnService$Builder: java.util.List mRoutes> = $r4;

        $r5 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5.<com.android.internal.net.VpnConfig: java.lang.String user> = $r7;

        return;
    }

    public android.net.VpnService$Builder setSession(java.lang.String)
    {
        android.net.VpnService$Builder r0;
        java.lang.String r1;
        com.android.internal.net.VpnConfig $r2;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r2.<com.android.internal.net.VpnConfig: java.lang.String session> = r1;

        return r0;
    }

    public android.net.VpnService$Builder setConfigureIntent(android.app.PendingIntent)
    {
        android.net.VpnService$Builder r0;
        android.app.PendingIntent r1;
        com.android.internal.net.VpnConfig $r2;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: android.app.PendingIntent;

        $r2 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r2.<com.android.internal.net.VpnConfig: android.app.PendingIntent configureIntent> = r1;

        return r0;
    }

    public android.net.VpnService$Builder setMtu(int)
    {
        android.net.VpnService$Builder r0;
        int i0;
        com.android.internal.net.VpnConfig $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.net.VpnService$Builder;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad mtu");

        throw $r2;

     label1:
        $r1 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r1.<com.android.internal.net.VpnConfig: int mtu> = i0;

        return r0;
    }

    public android.net.VpnService$Builder addAddress(java.net.InetAddress, int)
    {
        android.net.VpnService$Builder r0;
        java.net.InetAddress r1;
        int i0;
        boolean $z0;
        android.net.LinkAddress $r2;
        java.util.List $r3;
        com.android.internal.net.VpnConfig $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        staticinvoke <android.net.VpnService: void access$100(java.net.InetAddress,int)>(r1, i0);

        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad address");

        throw $r5;

     label1:
        $r3 = r0.<android.net.VpnService$Builder: java.util.List mAddresses>;

        $r2 = new android.net.LinkAddress;

        specialinvoke $r2.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        virtualinvoke $r4.<com.android.internal.net.VpnConfig: void updateAllowedFamilies(java.net.InetAddress)>(r1);

        return r0;
    }

    public android.net.VpnService$Builder addAddress(java.lang.String, int)
    {
        android.net.VpnService$Builder r0, $r3;
        java.lang.String r1;
        int i0;
        java.net.InetAddress $r2;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.net.InetAddress,int)>($r2, i0);

        return $r3;
    }

    public android.net.VpnService$Builder addRoute(java.net.InetAddress, int)
    {
        android.net.VpnService$Builder r0;
        java.net.InetAddress r1;
        int i0, i1, $i2, $i3, $i5, $i8;
        byte[] r2;
        android.net.RouteInfo $r3;
        android.net.LinkAddress $r4;
        java.util.List $r5;
        com.android.internal.net.VpnConfig $r6;
        byte $b4, $b6, $b7;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        staticinvoke <android.net.VpnService: void access$100(java.net.InetAddress,int)>(r1, i0);

        i1 = i0 / 8;

        r2 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        $i2 = lengthof r2;

        if i1 >= $i2 goto label3;

        $b4 = r2[i1];

        $i3 = i0 % 8;

        $i5 = $b4 << $i3;

        $b6 = (byte) $i5;

        r2[i1] = $b6;

     label1:
        $i8 = lengthof r2;

        if i1 >= $i8 goto label3;

        $b7 = r2[i1];

        if $b7 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad address");

        throw $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<android.net.VpnService$Builder: java.util.List mRoutes>;

        $r3 = new android.net.RouteInfo;

        $r4 = new android.net.LinkAddress;

        specialinvoke $r4.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        specialinvoke $r3.<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress)>($r4, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r6 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        virtualinvoke $r6.<com.android.internal.net.VpnConfig: void updateAllowedFamilies(java.net.InetAddress)>(r1);

        return r0;
    }

    public android.net.VpnService$Builder addRoute(java.lang.String, int)
    {
        android.net.VpnService$Builder r0, $r3;
        java.lang.String r1;
        int i0;
        java.net.InetAddress $r2;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.net.InetAddress,int)>($r2, i0);

        return $r3;
    }

    public android.net.VpnService$Builder addDnsServer(java.net.InetAddress)
    {
        android.net.VpnService$Builder r0;
        java.net.InetAddress r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        com.android.internal.net.VpnConfig $r3, $r5, $r9;
        java.util.List $r4, $r6;
        java.lang.String $r7;
        java.util.ArrayList $r8;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.net.InetAddress;

        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad address");

        throw $r2;

     label2:
        $r3 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r4 = $r3.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r4 != null goto label3;

        $r9 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9.<com.android.internal.net.VpnConfig: java.util.List dnsServers> = $r8;

     label3:
        $r5 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r6 = $r5.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $r7 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        return r0;
    }

    public android.net.VpnService$Builder addDnsServer(java.lang.String)
    {
        android.net.VpnService$Builder r0, $r3;
        java.lang.String r1;
        java.net.InetAddress $r2;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.net.InetAddress)>($r2);

        return $r3;
    }

    public android.net.VpnService$Builder addSearchDomain(java.lang.String)
    {
        android.net.VpnService$Builder r0;
        java.lang.String r1;
        com.android.internal.net.VpnConfig $r2, $r4, $r7;
        java.util.List $r3, $r5;
        java.util.ArrayList $r6;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r3 = $r2.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        if $r3 != null goto label1;

        $r7 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7.<com.android.internal.net.VpnConfig: java.util.List searchDomains> = $r6;

     label1:
        $r4 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public android.net.VpnService$Builder allowFamily(int)
    {
        android.net.VpnService$Builder r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        com.android.internal.net.VpnConfig $r9, $r10;

        r0 := @this: android.net.VpnService$Builder;

        i0 := @parameter0: int;

        $i1 = <android.system.OsConstants: int AF_INET>;

        if i0 != $i1 goto label1;

        $r10 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r10.<com.android.internal.net.VpnConfig: boolean allowIPv4> = 1;

        goto label3;

     label1:
        $i2 = <android.system.OsConstants: int AF_INET6>;

        if i0 != $i2 goto label2;

        $r9 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r9.<com.android.internal.net.VpnConfig: boolean allowIPv6> = 1;

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is neither ");

        $i3 = <android.system.OsConstants: int AF_INET>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor ");

        $i4 = <android.system.OsConstants: int AF_INET6>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label3:
        return r0;
    }

    private void verifyApp(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.net.VpnService$Builder r0;
        java.lang.String r1;
        android.content.pm.IPackageManager r2;
        android.os.RemoteException r3, $r6;
        android.os.IBinder $r4;
        int $i0;
        java.lang.IllegalStateException $r7;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        r2 = staticinvoke <android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager asInterface(android.os.IBinder)>($r4);

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 0, $i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r7;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.VpnService$Builder addAllowedApplication(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.net.VpnService$Builder r0;
        java.lang.String r1;
        com.android.internal.net.VpnConfig $r2, $r4, $r6, $r9;
        java.util.List $r3, $r5, $r7;
        java.util.ArrayList $r8;
        java.lang.UnsupportedOperationException $r10;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r3 = $r2.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        if $r3 == null goto label1;

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("addDisallowedApplication already called");

        throw $r10;

     label1:
        specialinvoke r0.<android.net.VpnService$Builder: void verifyApp(java.lang.String)>(r1);

        $r4 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        if $r5 != null goto label2;

        $r9 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9.<com.android.internal.net.VpnConfig: java.util.List allowedApplications> = $r8;

     label2:
        $r6 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r6.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public android.net.VpnService$Builder addDisallowedApplication(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.net.VpnService$Builder r0;
        java.lang.String r1;
        com.android.internal.net.VpnConfig $r2, $r4, $r6, $r9;
        java.util.List $r3, $r5, $r7;
        java.util.ArrayList $r8;
        java.lang.UnsupportedOperationException $r10;

        r0 := @this: android.net.VpnService$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r3 = $r2.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        if $r3 == null goto label1;

        $r10 = new java.lang.UnsupportedOperationException;

        specialinvoke $r10.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("addAllowedApplication already called");

        throw $r10;

     label1:
        specialinvoke r0.<android.net.VpnService$Builder: void verifyApp(java.lang.String)>(r1);

        $r4 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        if $r5 != null goto label2;

        $r9 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications> = $r8;

     label2:
        $r6 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r7 = $r6.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public android.net.VpnService$Builder allowBypass()
    {
        android.net.VpnService$Builder r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @this: android.net.VpnService$Builder;

        $r1 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r1.<com.android.internal.net.VpnConfig: boolean allowBypass> = 1;

        return r0;
    }

    public android.net.VpnService$Builder setBlocking(boolean)
    {
        android.net.VpnService$Builder r0;
        boolean z0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @this: android.net.VpnService$Builder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r1.<com.android.internal.net.VpnConfig: boolean blocking> = z0;

        return r0;
    }

    public android.os.ParcelFileDescriptor establish()
    {
        android.net.VpnService$Builder r0;
        android.os.RemoteException r1, $r9;
        java.util.List $r2, $r4;
        com.android.internal.net.VpnConfig $r3, $r5, $r7;
        android.net.IConnectivityManager $r6;
        android.os.ParcelFileDescriptor $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: android.net.VpnService$Builder;

        $r3 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r2 = r0.<android.net.VpnService$Builder: java.util.List mAddresses>;

        $r3.<com.android.internal.net.VpnConfig: java.util.List addresses> = $r2;

        $r5 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r4 = r0.<android.net.VpnService$Builder: java.util.List mRoutes>;

        $r5.<com.android.internal.net.VpnConfig: java.util.List routes> = $r4;

     label1:
        $r6 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager access$200()>();

        $r7 = r0.<android.net.VpnService$Builder: com.android.internal.net.VpnConfig mConfig>;

        $r8 = interfaceinvoke $r6.<android.net.IConnectivityManager: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>($r7);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
