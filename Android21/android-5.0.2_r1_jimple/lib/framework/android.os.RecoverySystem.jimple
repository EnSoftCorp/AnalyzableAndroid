public class android.os.RecoverySystem extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.io.File DEFAULT_KEYSTORE;
    private static final long PUBLISH_PROGRESS_INTERVAL_MS;
    private static java.io.File RECOVERY_DIR;
    private static java.io.File COMMAND_FILE;
    private static java.io.File LOG_FILE;
    private static java.lang.String LAST_PREFIX;
    private static int LOG_FILE_MAX_LENGTH;

    public void <init>()
    {
        android.os.RecoverySystem r0;

        r0 := @this: android.os.RecoverySystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.HashSet getTrustedCerts(java.io.File) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.io.File r0;
        java.util.HashSet r1, $r9;
        java.util.zip.ZipFile r2, $r10;
        java.security.cert.CertificateFactory r3;
        java.util.Enumeration r4;
        java.util.zip.ZipEntry r5;
        java.io.InputStream r6;
        java.lang.Throwable r7, r8, $r14, $r15;
        boolean $z0;
        java.lang.Object $r11;
        java.security.cert.X509Certificate $r12;
        java.security.cert.Certificate $r13;

        r0 := @parameter0: java.io.File;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r1 = $r9;

        if r0 != null goto label01;

        r0 = <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE>;

     label01:
        $r10 = new java.util.zip.ZipFile;

        specialinvoke $r10.<java.util.zip.ZipFile: void <init>(java.io.File)>(r0);

        r2 = $r10;

     label02:
        r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r4 = virtualinvoke r2.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label03:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.util.zip.ZipEntry) $r11;

        r6 = virtualinvoke r2.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r5);

     label04:
        $r13 = virtualinvoke r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r6);

        $r12 = (java.security.cert.X509Certificate) $r13;

        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

     label05:
        virtualinvoke r6.<java.io.InputStream: void close()>();

        goto label08;

     label06:
        $r15 := @caughtexception;

        r7 = $r15;

     label07:
        virtualinvoke r6.<java.io.InputStream: void close()>();

        throw r7;

     label08:
        goto label03;

     label09:
        virtualinvoke r2.<java.util.zip.ZipFile: void close()>();

        goto label12;

     label10:
        $r14 := @caughtexception;

        r8 = $r14;

     label11:
        virtualinvoke r2.<java.util.zip.ZipFile: void close()>();

        throw r8;

     label12:
        return r1;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void verifyPackage(java.io.File, android.os.RecoverySystem$ProgressListener, java.io.File) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.io.File r0, r2, $r41;
        android.os.RecoverySystem$ProgressListener r1;
        long l0, l2, l6, l7, l11, $l12, $l24, $l30, $l38, $l39, $l40, $l42, $l43, $l44, $l46, $l47, $l48;
        java.io.RandomAccessFile r3, $r19;
        int i1, i3, i4, i5, i8, i9, i10, $i17, $i20, $i25, $i26, $i31, $i32, $i35, $i36, $i51, $i53, $i55;
        byte[] r4, r5, r17, $r28, $r35;
        org.apache.harmony.security.pkcs7.ContentInfo r6;
        org.apache.harmony.security.pkcs7.SignedData r7;
        java.util.Iterator r8, r15;
        java.util.List r9, r51;
        java.security.cert.CertificateFactory r10;
        java.util.HashSet r11;
        java.io.ByteArrayInputStream r12, $r23, $r29;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.security.PublicKey r13, $r42;
        java.security.cert.X509Certificate r14, r50;
        java.security.Signature r16;
        java.lang.Throwable r18, $r46;
        byte $b13, $b14, $b15, $b19, $b22, $b23, $b28, $b29, $b33, $b34, $b37, $b41, $b45, $b49, $b50, $b52, $b54;
        java.security.SignatureException $r20, $r21, $r24, $r34, $r36, $r44, $r47;
        short $s16, $s18, $s21, $s27;
        org.apache.harmony.security.asn1.BerInputStream $r22, r49;
        org.apache.harmony.security.asn1.ASN1Sequence $r25;
        java.lang.Object $r26, $r31, $r32, $r43;
        java.security.cert.Certificate $r27;
        org.apache.harmony.security.x509.Certificate $r30;
        java.io.IOException $r33, $r40, $r48;
        java.lang.StringBuilder $r37, $r38, $r39, $r45;
        org.apache.harmony.security.pkcs7.SignerInfo r52;
        java.lang.String r53, r54, r55;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.os.RecoverySystem$ProgressListener;

        r2 := @parameter2: java.io.File;

        l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r19 = new java.io.RandomAccessFile;

        specialinvoke $r19.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "r");

        r3 = $r19;

     label01:
        i1 = 0;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        if r1 == null goto label02;

        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(0);

     label02:
        $l12 = l0 - 6L;

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l12);

        r4 = newarray (byte)[6];

        virtualinvoke r3.<java.io.RandomAccessFile: void readFully(byte[])>(r4);

        $b15 = r4[2];

        if $b15 != -1 goto label03;

        $b13 = r4[3];

        if $b13 == -1 goto label04;

     label03:
        $r20 = new java.security.SignatureException;

        specialinvoke $r20.<java.security.SignatureException: void <init>(java.lang.String)>("no signature in file (no footer)");

        throw $r20;

     label04:
        $b14 = r4[4];

        $s16 = $b14 & 255;

        $b19 = r4[5];

        $s18 = $b19 & 255;

        $i17 = $s18 << 8;

        i3 = $s16 | $i17;

        $b23 = r4[0];

        $s27 = $b23 & 255;

        $b22 = r4[1];

        $s21 = $b22 & 255;

        $i20 = $s21 << 8;

        i4 = $s27 | $i20;

        $i26 = i3 + 22;

        r5 = newarray (byte)[$i26];

        $i25 = i3 + 22;

        $l24 = (long) $i25;

        $l30 = l0 - $l24;

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l30);

        virtualinvoke r3.<java.io.RandomAccessFile: void readFully(byte[])>(r5);

        $b29 = r5[0];

        if $b29 != 80 goto label05;

        $b28 = r5[1];

        if $b28 != 75 goto label05;

        $b33 = r5[2];

        if $b33 != 5 goto label05;

        $b34 = r5[3];

        if $b34 == 6 goto label06;

     label05:
        $r21 = new java.security.SignatureException;

        specialinvoke $r21.<java.security.SignatureException: void <init>(java.lang.String)>("no signature in file (bad footer)");

        throw $r21;

     label06:
        i5 = 4;

     label07:
        $i35 = lengthof r5;

        $i36 = $i35 - 3;

        if i5 >= $i36 goto label09;

        $b49 = r5[i5];

        if $b49 != 80 goto label08;

        $i51 = i5 + 1;

        $b50 = r5[$i51];

        if $b50 != 75 goto label08;

        $i53 = i5 + 2;

        $b52 = r5[$i53];

        if $b52 != 5 goto label08;

        $i55 = i5 + 3;

        $b54 = r5[$i55];

        if $b54 != 6 goto label08;

        $r47 = new java.security.SignatureException;

        specialinvoke $r47.<java.security.SignatureException: void <init>(java.lang.String)>("EOCD marker found after start of EOCD");

        throw $r47;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        $r22 = new org.apache.harmony.security.asn1.BerInputStream;

        $r23 = new java.io.ByteArrayInputStream;

        $i31 = i3 + 22;

        $i32 = $i31 - i4;

        specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r5, $i32, i4);

        specialinvoke $r22.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>($r23);

        r49 = $r22;

        $r25 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r26 = virtualinvoke $r25.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r49);

        r6 = (org.apache.harmony.security.pkcs7.ContentInfo) $r26;

        r7 = virtualinvoke r6.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

        if r7 != null goto label10;

        $r48 = new java.io.IOException;

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>("signedData is null");

        throw $r48;

     label10:
        r9 = virtualinvoke r7.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()>();

        $z2 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label11;

        $r40 = new java.io.IOException;

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>("encCerts is empty");

        throw $r40;

     label11:
        r8 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        r10 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r29 = new java.io.ByteArrayInputStream;

        $r31 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r30 = (org.apache.harmony.security.x509.Certificate) $r31;

        $r28 = virtualinvoke $r30.<org.apache.harmony.security.x509.Certificate: byte[] getEncoded()>();

        specialinvoke $r29.<java.io.ByteArrayInputStream: void <init>(byte[])>($r28);

        r12 = $r29;

        $r27 = virtualinvoke r10.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r12);

        r50 = (java.security.cert.X509Certificate) $r27;

        goto label13;

     label12:
        $r24 = new java.security.SignatureException;

        specialinvoke $r24.<java.security.SignatureException: void <init>(java.lang.String)>("signature contains no certificates");

        throw $r24;

     label13:
        r51 = virtualinvoke r7.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getSignerInfos()>();

        $z4 = interfaceinvoke r51.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label14;

        $r32 = interfaceinvoke r51.<java.util.List: java.lang.Object get(int)>(0);

        r52 = (org.apache.harmony.security.pkcs7.SignerInfo) $r32;

        goto label15;

     label14:
        $r33 = new java.io.IOException;

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>("no signer infos!");

        throw $r33;

     label15:
        if r2 != null goto label16;

        $r41 = <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE>;

        goto label17;

     label16:
        $r41 = r2;

     label17:
        r11 = staticinvoke <android.os.RecoverySystem: java.util.HashSet getTrustedCerts(java.io.File)>($r41);

        r13 = virtualinvoke r50.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        z0 = 0;

        r15 = virtualinvoke r11.<java.util.HashSet: java.util.Iterator iterator()>();

     label18:
        $z5 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label20;

        $r43 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.security.cert.X509Certificate) $r43;

        $r42 = virtualinvoke r14.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $z7 = virtualinvoke $r42.<java.lang.Object: boolean equals(java.lang.Object)>(r13);

        if $z7 == 0 goto label19;

        z0 = 1;

        goto label20;

     label19:
        goto label18;

     label20:
        if z0 != 0 goto label21;

        $r44 = new java.security.SignatureException;

        specialinvoke $r44.<java.security.SignatureException: void <init>(java.lang.String)>("signature doesn\'t match any trusted key");

        throw $r44;

     label21:
        r53 = virtualinvoke r52.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithm()>();

        r54 = virtualinvoke r52.<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithm()>();

        if r53 == null goto label22;

        if r54 != null goto label23;

     label22:
        r55 = virtualinvoke r50.<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>();

        goto label24;

     label23:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with");

        $r45 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        r55 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

     label24:
        r16 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r55);

        virtualinvoke r16.<java.security.Signature: void initVerify(java.security.cert.Certificate)>(r50);

        $l38 = (long) i3;

        $l39 = l0 - $l38;

        l6 = $l39 - 2L;

        l7 = 0L;

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>(0L);

        r17 = newarray (byte)[4096];

        z1 = 0;

     label25:
        $b37 = l7 cmp l6;

        if $b37 >= 0 goto label29;

        z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if z1 == 0 goto label26;

        goto label29;

     label26:
        i8 = lengthof r17;

        $l42 = (long) i8;

        $l43 = l7 + $l42;

        $b41 = $l43 cmp l6;

        if $b41 <= 0 goto label27;

        $l44 = l6 - l7;

        i8 = (int) $l44;

     label27:
        i9 = virtualinvoke r3.<java.io.RandomAccessFile: int read(byte[],int,int)>(r17, 0, i8);

        virtualinvoke r16.<java.security.Signature: void update(byte[],int,int)>(r17, 0, i9);

        $l40 = (long) i9;

        l7 = l7 + $l40;

        if r1 == null goto label28;

        l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l48 = l7 * 100L;

        $l47 = $l48 / l6;

        i10 = (int) $l47;

        if i10 <= i1 goto label28;

        $l46 = l11 - l2;

        $b45 = $l46 cmp 500L;

        if $b45 <= 0 goto label28;

        i1 = i10;

        l2 = l11;

        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(i1);

     label28:
        goto label25;

     label29:
        if r1 == null goto label30;

        interfaceinvoke r1.<android.os.RecoverySystem$ProgressListener: void onProgress(int)>(100);

     label30:
        if z1 == 0 goto label31;

        $r36 = new java.security.SignatureException;

        specialinvoke $r36.<java.security.SignatureException: void <init>(java.lang.String)>("verification was interrupted");

        throw $r36;

     label31:
        $r35 = virtualinvoke r52.<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncryptedDigest()>();

        $z6 = virtualinvoke r16.<java.security.Signature: boolean verify(byte[])>($r35);

        if $z6 != 0 goto label32;

        $r34 = new java.security.SignatureException;

        specialinvoke $r34.<java.security.SignatureException: void <init>(java.lang.String)>("signature digest verification failed");

        throw $r34;

     label32:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

        goto label35;

     label33:
        $r46 := @caughtexception;

        r18 = $r46;

     label34:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

        throw r18;

     label35:
        return;

        catch java.lang.Throwable from label01 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
    }

    public static void installPackage(android.content.Context, java.io.File) throws java.io.IOException
    {
        android.content.Context r0;
        java.io.File r1;
        java.lang.String r2, r3, r4, $r9, $r17;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16;
        java.util.Locale $r14;
        java.lang.String[] $r18;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.io.File;

        r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!!! REBOOTING TO INSTALL ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !!!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RecoverySystem", $r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--update_package=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--locale=");

        $r14 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r17 = virtualinvoke $r14.<java.util.Locale: java.lang.String toString()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = r3;

        $r18[1] = r4;

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String[])>(r0, $r18);

        return;
    }

    public static void rebootWipeUserData(android.content.Context) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String)>(r0, 0, $r1);

        return;
    }

    public static void rebootWipeUserData(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String)>(r0, 0, r1);

        return;
    }

    public static void rebootWipeUserData(android.content.Context, boolean) throws java.io.IOException
    {
        android.content.Context r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,boolean,java.lang.String)>(r0, z0, $r1);

        return;
    }

    public static void rebootWipeUserData(android.content.Context, boolean, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, r5, r6, r7, $r16, $r21;
        android.os.UserManager r2;
        android.os.ConditionVariable r3, $r9;
        android.content.Intent r4, $r10;
        java.lang.Object $r8;
        android.os.RecoverySystem$1 $r12;
        android.os.UserHandle $r13;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r22, $r23;
        java.util.Locale $r17;
        java.lang.String[] $r20;
        java.lang.SecurityException $r24;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $r8 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r8;

        $z1 = virtualinvoke r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_factory_reset");

        if $z1 == 0 goto label1;

        $r24 = new java.lang.SecurityException;

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>("Wiping data is not allowed for this user.");

        throw $r24;

     label1:
        $r9 = new android.os.ConditionVariable;

        specialinvoke $r9.<android.os.ConditionVariable: void <init>()>();

        r3 = $r9;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MASTER_CLEAR_NOTIFICATION");

        r4 = $r10;

        virtualinvoke r4.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r13 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        $r12 = new android.os.RecoverySystem$1;

        specialinvoke $r12.<android.os.RecoverySystem$1: void <init>(android.os.ConditionVariable)>(r3);

        virtualinvoke r0.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r4, $r13, "android.permission.MASTER_CLEAR", $r12, null, 0, null, null);

        virtualinvoke r3.<android.os.ConditionVariable: void block()>();

        r5 = null;

        if z0 == 0 goto label2;

        r5 = "--shutdown_after";

     label2:
        r6 = null;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z2 != 0 goto label3;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--reason=");

        $r21 = staticinvoke <android.os.RecoverySystem: java.lang.String sanitizeArg(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r6 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--locale=");

        $r17 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r16 = virtualinvoke $r17.<java.util.Locale: java.lang.String toString()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r7 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = newarray (java.lang.String)[4];

        $r20[0] = r5;

        $r20[1] = "--wipe_data";

        $r20[2] = r6;

        $r20[3] = r7;

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String[])>(r0, $r20);

        return;
    }

    public static void rebootWipeCache(android.content.Context) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        staticinvoke <android.os.RecoverySystem: void rebootWipeCache(android.content.Context,java.lang.String)>(r0, $r1);

        return;
    }

    public static void rebootWipeCache(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1, r2, r3, $r7, $r12;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r8, $r10, $r11, $r13;
        java.util.Locale $r6;
        java.lang.String[] $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 = null;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--reason=");

        $r12 = staticinvoke <android.os.RecoverySystem: java.lang.String sanitizeArg(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--locale=");

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r7 = virtualinvoke $r6.<java.util.Locale: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = "--wipe_cache";

        $r9[1] = r2;

        $r9[2] = r3;

        staticinvoke <android.os.RecoverySystem: void bootCommand(android.content.Context,java.lang.String[])>(r0, $r9);

        return;
    }

    private static transient void bootCommand(android.content.Context, java.lang.String[]) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String[] r1, r3;
        java.io.FileWriter r2, $r9;
        int i0, i1;
        java.lang.String r4;
        java.lang.Throwable r5, $r13;
        java.io.File $r6, $r7, $r8, $r10;
        java.io.IOException $r11;
        java.lang.Object $r12;
        boolean $z3;
        android.os.PowerManager r14;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String[];

        $r6 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        $r7 = <android.os.RecoverySystem: java.io.File COMMAND_FILE>;

        virtualinvoke $r7.<java.io.File: boolean delete()>();

        $r8 = <android.os.RecoverySystem: java.io.File LOG_FILE>;

        virtualinvoke $r8.<java.io.File: boolean delete()>();

        $r9 = new java.io.FileWriter;

        $r10 = <android.os.RecoverySystem: java.io.File COMMAND_FILE>;

        specialinvoke $r9.<java.io.FileWriter: void <init>(java.io.File)>($r10);

        r2 = $r9;

     label1:
        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z3 != 0 goto label3;

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>(r4);

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>("\n");

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r2.<java.io.FileWriter: void close()>();

        goto label7;

     label5:
        $r13 := @caughtexception;

        r5 = $r13;

     label6:
        virtualinvoke r2.<java.io.FileWriter: void close()>();

        throw r5;

     label7:
        $r12 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r14 = (android.os.PowerManager) $r12;

        virtualinvoke r14.<android.os.PowerManager: void reboot(java.lang.String)>("recovery");

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Reboot failed (no permissions?)");

        throw $r11;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.String handleAftermath()
    {
        java.lang.String r0, $r5, $r6, $r8, $r13, $r17;
        int i0, $i1, $i2, $i3;
        java.io.File r2, $r3, $r4, $r7, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r16;
        java.io.IOException $r18, r20;
        java.io.FileNotFoundException $r19;
        java.lang.String[] r21;

        r0 = null;

     label01:
        $r3 = <android.os.RecoverySystem: java.io.File LOG_FILE>;

        $i1 = <android.os.RecoverySystem: int LOG_FILE_MAX_LENGTH>;

        $i2 = neg $i1;

        r0 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r3, $i2, "...\n");

     label02:
        goto label05;

     label03:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverySystem", "No recovery log file");

        goto label05;

     label04:
        $r18 := @caughtexception;

        r20 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverySystem", "Error reading recovery log", r20);

     label05:
        $r4 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        r21 = virtualinvoke $r4.<java.io.File: java.lang.String[] list()>();

        i0 = 0;

     label06:
        if r21 == null goto label10;

        $i3 = lengthof r21;

        if i0 >= $i3 goto label10;

        $r6 = r21[i0];

        $r5 = <android.os.RecoverySystem: java.lang.String LAST_PREFIX>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z0 == 0 goto label07;

        goto label09;

     label07:
        $r7 = new java.io.File;

        $r9 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        $r8 = r21[i0];

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r8);

        r2 = $r7;

        $z1 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label08;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t delete: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverySystem", $r17);

        goto label09;

     label08:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverySystem", $r13);

     label09:
        i0 = i0 + 1;

        goto label06;

     label10:
        return r0;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.io.IOException from label01 to label02 with label04;
    }

    private static java.lang.String sanitizeArg(java.lang.String)
    {
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(0, 63);

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(10, 63);

        return r2;
    }

    private void RecoverySystem()
    {
        android.os.RecoverySystem r0;

        r0 := @this: android.os.RecoverySystem;

        return;
    }

    static void <clinit>()
    {
        java.io.File $r0, $r1, $r2, $r3, $r4, $r5;

        <android.os.RecoverySystem: long PUBLISH_PROGRESS_INTERVAL_MS> = 500L;

        <android.os.RecoverySystem: java.lang.String TAG> = "RecoverySystem";

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("/system/etc/security/otacerts.zip");

        <android.os.RecoverySystem: java.io.File DEFAULT_KEYSTORE> = $r0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/cache/recovery");

        <android.os.RecoverySystem: java.io.File RECOVERY_DIR> = $r1;

        $r2 = new java.io.File;

        $r3 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "command");

        <android.os.RecoverySystem: java.io.File COMMAND_FILE> = $r2;

        $r4 = new java.io.File;

        $r5 = <android.os.RecoverySystem: java.io.File RECOVERY_DIR>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "log");

        <android.os.RecoverySystem: java.io.File LOG_FILE> = $r4;

        <android.os.RecoverySystem: java.lang.String LAST_PREFIX> = "last_";

        <android.os.RecoverySystem: int LOG_FILE_MAX_LENGTH> = 65536;

        return;
    }
}
