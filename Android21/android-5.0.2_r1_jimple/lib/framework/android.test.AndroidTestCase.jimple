public class android.test.AndroidTestCase extends junit.framework.TestCase
{
    protected android.content.Context mContext;
    private android.content.Context mTestContext;

    public void <init>()
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }

    public void testAndroidTestCaseSetupProperly()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mContext>;

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Context is null. setContext should be called before tests are run", $r1);

        return;
    }

    public void setContext(android.content.Context)
    {
        android.test.AndroidTestCase r0;
        android.content.Context r1;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.content.Context;

        r0.<android.test.AndroidTestCase: android.content.Context mContext> = r1;

        return;
    }

    public android.content.Context getContext()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mContext>;

        return $r1;
    }

    public void setTestContext(android.content.Context)
    {
        android.test.AndroidTestCase r0;
        android.content.Context r1;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.content.Context;

        r0.<android.test.AndroidTestCase: android.content.Context mTestContext> = r1;

        return;
    }

    public android.content.Context getTestContext()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mTestContext>;

        return $r1;
    }

    public void assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        java.lang.String r1, r2, r3, $r13, $r16, $r19, $r21;
        android.content.Intent r4, $r6;
        java.lang.SecurityException r5, $r14;
        android.content.Context $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r17, $r18, $r20;
        boolean $z0;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>()>();

        r4 = $r6;

        virtualinvoke r4.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r4.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label1:
        $r9 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        virtualinvoke $r9.<android.content.Context: void startActivity(android.content.Intent)>(r4);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected security exception for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r5 = $r14;

        $r16 = virtualinvoke r5.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r5.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r19, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        android.net.Uri r1;
        java.lang.String r2, $r10, $r12, $r17, $r18;
        java.lang.SecurityException r3, $r11;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r16;
        boolean $z0;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, null, null, null, null);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected SecurityException requiring ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r10);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r18, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        android.net.Uri r1;
        java.lang.String r2, $r11, $r13, $r17, $r21, $r22;
        java.lang.SecurityException r3, $r12;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        android.content.ContentValues $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r15, $r16, $r18, $r19, $r20;
        boolean $z0;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r1, $r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected SecurityException requiring ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

        $r13 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain \"");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". Got: \"");

        $r17 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r22, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected void scrubClass(java.lang.Class) throws java.lang.IllegalAccessException
    {
        android.test.AndroidTestCase r0;
        java.lang.Class r1, $r6, $r7;
        java.lang.reflect.Field[] r2, r3;
        int i0, i1, $i2;
        java.lang.reflect.Field r4;
        boolean $z0, $z1;
        java.lang.Object $r8;
        java.lang.Exception $r9;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: java.lang.Class;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r4 = r3[i1];

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label6;

        $i2 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z1 != 0 goto label6;

     label2:
        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, null);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

     label5:
        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r8 == null goto label6;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
