public class android.text.TextUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final int ALIGNMENT_SPAN;
    public static final int FIRST_SPAN;
    public static final int FOREGROUND_COLOR_SPAN;
    public static final int RELATIVE_SIZE_SPAN;
    public static final int SCALE_X_SPAN;
    public static final int STRIKETHROUGH_SPAN;
    public static final int UNDERLINE_SPAN;
    public static final int STYLE_SPAN;
    public static final int BULLET_SPAN;
    public static final int QUOTE_SPAN;
    public static final int LEADING_MARGIN_SPAN;
    public static final int URL_SPAN;
    public static final int BACKGROUND_COLOR_SPAN;
    public static final int TYPEFACE_SPAN;
    public static final int SUPERSCRIPT_SPAN;
    public static final int SUBSCRIPT_SPAN;
    public static final int ABSOLUTE_SIZE_SPAN;
    public static final int TEXT_APPEARANCE_SPAN;
    public static final int ANNOTATION;
    public static final int SUGGESTION_SPAN;
    public static final int SPELL_CHECK_SPAN;
    public static final int SUGGESTION_RANGE_SPAN;
    public static final int EASY_EDIT_SPAN;
    public static final int LOCALE_SPAN;
    public static final int TTS_SPAN;
    public static final int LAST_SPAN;
    public static final android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR;
    private static final char FIRST_RIGHT_TO_LEFT;
    public static final int CAP_MODE_CHARACTERS;
    public static final int CAP_MODE_WORDS;
    public static final int CAP_MODE_SENTENCES;
    private static java.lang.Object sLock;
    private static char[] sTemp;
    private static java.lang.String[] EMPTY_STRING_ARRAY;
    private static final char ZWNBS_CHAR;
    private static java.lang.String ARAB_SCRIPT_SUBTAG;
    private static java.lang.String HEBR_SCRIPT_SUBTAG;

    private void <init>()
    {
        android.text.TextUtils r0;

        r0 := @this: android.text.TextUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getChars(java.lang.CharSequence, int, int, char[], int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, $i4;
        char[] r1;
        java.lang.Class r2;
        boolean $z0;
        char $c5;
        android.text.GetChars $r3;
        java.lang.StringBuilder $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: char[];

        i2 := @parameter4: int;

        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r2 != class "java/lang/String" goto label1;

        $r6 = (java.lang.String) r0;

        virtualinvoke $r6.<java.lang.String: void getChars(int,int,char[],int)>(i0, i1, r1, i2);

        goto label6;

     label1:
        if r2 != class "java/lang/StringBuffer" goto label2;

        $r5 = (java.lang.StringBuffer) r0;

        virtualinvoke $r5.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i0, i1, r1, i2);

        goto label6;

     label2:
        if r2 != class "java/lang/StringBuilder" goto label3;

        $r4 = (java.lang.StringBuilder) r0;

        virtualinvoke $r4.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(i0, i1, r1, i2);

        goto label6;

     label3:
        $z0 = r0 instanceof android.text.GetChars;

        if $z0 == 0 goto label4;

        $r3 = (android.text.GetChars) r0;

        interfaceinvoke $r3.<android.text.GetChars: void getChars(int,int,char[],int)>(i0, i1, r1, i2);

        goto label6;

     label4:
        i3 = i0;

     label5:
        if i3 >= i1 goto label6;

        $i4 = i2;

        i2 = i2 + 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        r1[$i4] = $c5;

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public static int indexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0;
        int $i1;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>(r0, c0, 0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, char, int)
    {
        java.lang.CharSequence r0;
        char c0;
        int i1, $i2, $i3, $i4;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r1 != class "java/lang/String" goto label1;

        $r2 = (java.lang.String) r0;

        $i4 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(c0, i1);

        return $i4;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>(r0, c0, i1, $i2);

        return $i3;
    }

    public static int indexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence r0;
        char c0, $c7, $c9;
        int i1, i2, i4, i5, i6, $i8, i10;
        java.lang.Class r1;
        char[] r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label01;

        if r1 == class "java/lang/StringBuffer" goto label01;

        if r1 == class "java/lang/StringBuilder" goto label01;

        if r1 != class "java/lang/String" goto label08;

     label01:
        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

     label02:
        if i1 >= i2 goto label07;

        i4 = i1 + 500;

        if i4 <= i2 goto label03;

        i4 = i2;

     label03:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i1, i4, r2, 0);

        i5 = i4 - i1;

        i6 = 0;

     label04:
        if i6 >= i5 goto label06;

        $c7 = r2[i6];

        if $c7 != c0 goto label05;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        $i8 = i6 + i1;

        return $i8;

     label05:
        i6 = i6 + 1;

        goto label04;

     label06:
        i1 = i4;

        goto label02;

     label07:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return -1;

     label08:
        i10 = i1;

     label09:
        if i10 >= i2 goto label11;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        if $c9 != c0 goto label10;

        return i10;

     label10:
        i10 = i10 + 1;

        goto label09;

     label11:
        return -1;
    }

    public static int lastIndexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0;
        int $i1, $i2, $i3;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 1;

        $i3 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>(r0, c0, $i2);

        return $i3;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int)
    {
        java.lang.CharSequence r0;
        char c0;
        int i1, $i2, $i3;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r1 != class "java/lang/String" goto label1;

        $r2 = (java.lang.String) r0;

        $i3 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int,int)>(c0, i1);

        return $i3;

     label1:
        $i2 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>(r0, c0, 0, i1);

        return $i2;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence r0;
        char c0, $c9, $c10;
        int i1, i2, i3, i5, i6, i7, $i8, $i11, $i12, i13;
        java.lang.Class r1;
        char[] r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i2 >= 0 goto label01;

        return -1;

     label01:
        $i8 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i2 < $i8 goto label02;

        $i12 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = $i12 - 1;

     label02:
        i3 = i2 + 1;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label03;

        if r1 == class "java/lang/StringBuffer" goto label03;

        if r1 == class "java/lang/StringBuilder" goto label03;

        if r1 != class "java/lang/String" goto label10;

     label03:
        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

     label04:
        if i1 >= i3 goto label09;

        i5 = i3 - 500;

        if i5 >= i1 goto label05;

        i5 = i1;

     label05:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i5, i3, r2, 0);

        i6 = i3 - i5;

        i7 = i6 - 1;

     label06:
        if i7 < 0 goto label08;

        $c9 = r2[i7];

        if $c9 != c0 goto label07;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        $i11 = i7 + i5;

        return $i11;

     label07:
        i7 = i7 + -1;

        goto label06;

     label08:
        i3 = i5;

        goto label04;

     label09:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return -1;

     label10:
        i13 = i3 - 1;

     label11:
        if i13 < i1 goto label13;

        $c10 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i13);

        if $c10 != c0 goto label12;

        return i13;

     label12:
        i13 = i13 + -1;

        goto label11;

     label13:
        return -1;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>(r0, r1, i0, $i1);

        return $i2;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, i2, $i4, i5;
        char c3;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 != 0 goto label1;

        return i0;

     label1:
        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

     label2:
        i5 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>(r0, c3, i0);

        $i4 = i1 - i2;

        if i5 <= $i4 goto label3;

        goto label6;

     label3:
        if i5 >= 0 goto label4;

        return -1;

     label4:
        $z0 = staticinvoke <android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>(r0, i5, r1, 0, i2);

        if $z0 == 0 goto label5;

        return i5;

     label5:
        i0 = i5 + 1;

        goto label2;

     label6:
        return -1;
    }

    public static boolean regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        char[] r2;
        boolean z0;
        char $c8, $c9;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 = 2 * i2;

        if i3 >= i2 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(i3);

        $i5 = i0 + i2;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i0, $i5, r2, 0);

        $i6 = i1 + i2;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i1, $i6, r2, i2);

        z0 = 1;

        i4 = 0;

     label2:
        if i4 >= i2 goto label4;

        $c9 = r2[i4];

        $i7 = i4 + i2;

        $c8 = r2[$i7];

        if $c9 == $c8 goto label3;

        z0 = 0;

        goto label4;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return z0;
    }

    public static java.lang.String substring(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2, $i3;
        char[] r1;
        java.lang.String r2, $r3, $r5, $r7, $r8, $r9;
        boolean $z0, $z1, $z2;
        java.lang.StringBuffer $r4;
        java.lang.StringBuilder $r6;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r9 = (java.lang.String) r0;

        $r8 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r8;

     label1:
        $z1 = r0 instanceof java.lang.StringBuilder;

        if $z1 == 0 goto label2;

        $r6 = (java.lang.StringBuilder) r0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i0, i1);

        return $r7;

     label2:
        $z2 = r0 instanceof java.lang.StringBuffer;

        if $z2 == 0 goto label3;

        $r4 = (java.lang.StringBuffer) r0;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String substring(int,int)>(i0, i1);

        return $r5;

     label3:
        $i2 = i1 - i0;

        r1 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i0, i1, r1, 0);

        $r3 = new java.lang.String;

        $i3 = i1 - i0;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r1, 0, $i3);

        r2 = $r3;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r1);

        return r2;
    }

    public static java.lang.CharSequence join(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.lang.CharSequence r1;
        android.content.res.Resources $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Iterable;

        $r2 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r1 = virtualinvoke $r2.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040818);

        $r3 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(r1, r0);

        return $r3;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.Object[] r1, r3;
        java.lang.StringBuilder r2, $r5;
        boolean z0;
        int i0, i1;
        java.lang.Object r4;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.Object[];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r2 = $r5;

        z0 = 1;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable)
    {
        java.lang.CharSequence r0;
        java.lang.Iterable r1;
        java.lang.StringBuilder r2, $r5;
        boolean z0, $z1;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.Iterable;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r2 = $r5;

        z0 = 1;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        goto label1;

     label4:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r3 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(r1, -1);

        return $r2;
    }

    public static java.lang.String[] split(java.lang.String, java.util.regex.Pattern)
    {
        java.lang.String r0;
        java.util.regex.Pattern r1;
        int $i0;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.regex.Pattern;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r3 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(r0, -1);

        return $r2;
    }

    public static java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        android.text.SpannedString $r2;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof android.text.SpannedString;

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label3;

        $r2 = new android.text.SpannedString;

        specialinvoke $r2.<android.text.SpannedString: void <init>(java.lang.CharSequence)>(r0);

        return $r2;

     label3:
        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r1;
    }

    public static boolean isEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static int getTrimmedLength(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, $i3, $i4;
        char $c5, $c6;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c6 > 32 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = i0;

     label3:
        if i2 <= i1 goto label4;

        $i4 = i2 - 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        if $c5 > 32 goto label4;

        i2 = i2 + -1;

        goto label3;

     label4:
        $i3 = i2 - i1;

        return $i3;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        char $c4, $c5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label6;

        if r1 == null goto label6;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i0 = $i2;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i2 != $i3 goto label6;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z2;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c4 == $c5 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public static java.lang.CharSequence getReverse(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        android.text.TextUtils$Reverser $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.text.TextUtils$Reverser;

        specialinvoke $r1.<android.text.TextUtils$Reverser: void <init>(java.lang.CharSequence,int,int)>(r0, i0, i1);

        return $r1;
    }

    public static void writeToParcel(java.lang.CharSequence, android.os.Parcel, int)
    {
        java.lang.CharSequence r0;
        android.os.Parcel r1;
        int i0, i1, i2, $i3, $i4;
        android.text.Spanned r2;
        java.lang.Object[] r3;
        java.lang.Object r4, r5;
        android.text.ParcelableSpan r6;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r8, $r13, $r16;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r15;
        java.lang.Class $r10;
        android.text.style.CharacterStyle $r17;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.os.Parcel;

        i0 := @parameter2: int;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label7;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        $r8 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r8);

        r2 = (android.text.Spanned) r0;

        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r3 = interfaceinvoke r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i3, class "java/lang/Object");

        i1 = 0;

     label1:
        $i4 = lengthof r3;

        if i1 >= $i4 goto label6;

        r4 = r3[i1];

        r5 = r3[i1];

        $z1 = r5 instanceof android.text.style.CharacterStyle;

        if $z1 == 0 goto label2;

        $r17 = (android.text.style.CharacterStyle) r5;

        r5 = virtualinvoke $r17.<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>();

     label2:
        $z2 = r5 instanceof android.text.ParcelableSpan;

        if $z2 == 0 goto label5;

        r6 = (android.text.ParcelableSpan) r5;

        i2 = interfaceinvoke r6.<android.text.ParcelableSpan: int getSpanTypeId()>();

        if i2 < 1 goto label3;

        if i2 <= 24 goto label4;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("external class \"");

        $r10 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r10.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is attempting to use the frameworks-only ParcelableSpan");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interface");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextUtils", $r16);

        goto label5;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i2);

        interfaceinvoke r6.<android.text.ParcelableSpan: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        staticinvoke <android.text.TextUtils: void writeWhere(android.os.Parcel,android.text.Spanned,java.lang.Object)>(r1, r2, r4);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        goto label9;

     label7:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        if r0 == null goto label8;

        $r7 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r7);

        goto label9;

     label8:
        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(null);

     label9:
        return;
    }

    private static void writeWhere(android.os.Parcel, android.text.Spanned, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spanned r1;
        java.lang.Object r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spanned;

        r2 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i0);

        $i1 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = interfaceinvoke r1.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i2);

        return;
    }

    public static void dumpSpans(java.lang.CharSequence, android.util.Printer, java.lang.String)
    {
        java.lang.CharSequence r0, $r13;
        android.util.Printer r1;
        java.lang.String r2, $r10, $r16, $r19, $r28;
        android.text.Spanned r3;
        java.lang.Object[] r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.Class $r20;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.util.Printer;

        r2 := @parameter2: java.lang.String;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label3;

        r3 = (android.text.Spanned) r0;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r4 = interfaceinvoke r3.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i1, class "java/lang/Object");

        i0 = 0;

     label1:
        $i2 = lengthof r4;

        if i0 >= $i2 goto label2;

        r5 = r4[i0];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i3 = interfaceinvoke r3.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r5);

        $i4 = interfaceinvoke r3.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r5);

        $r13 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i3, $i4);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r5);

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r20.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i7 = interfaceinvoke r3.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r5);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i6 = interfaceinvoke r3.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r5);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") fl=#");

        $i8 = interfaceinvoke r3.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r5);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r28);

        i0 = i0 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (no spans)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r10);

     label4:
        return;
    }

    public static java.lang.CharSequence replace(java.lang.CharSequence, java.lang.String[], java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, $r7;
        java.lang.String[] r1;
        java.lang.CharSequence[] r2;
        android.text.SpannableStringBuilder r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r5, $r6, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.CharSequence[];

        $r4 = new android.text.SpannableStringBuilder;

        specialinvoke $r4.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r0);

        r3 = $r4;

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label3;

        $r9 = r1[i0];

        i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>(r3, $r9);

        if i1 < 0 goto label2;

        $r10 = r1[i0];

        $r11 = r1[i0];

        $i6 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = i1 + $i6;

        virtualinvoke r3.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r10, i1, $i5, 33);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i7 = 0;

     label4:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label6;

        $r5 = r1[i7];

        i8 = virtualinvoke r3.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>($r5);

        $r6 = r1[i7];

        i2 = virtualinvoke r3.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>($r6);

        if i8 < 0 goto label5;

        $r7 = r2[i7];

        virtualinvoke r3.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>(i8, i2, $r7);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        return r3;
    }

    public static transient java.lang.CharSequence expandTemplate(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, $r4, $r6;
        java.lang.CharSequence[] r1;
        android.text.SpannableStringBuilder r2, $r3;
        int i0, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        char c1, $c5;
        boolean $z0;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r19;
        java.lang.IllegalArgumentException $r8, $r16, $r21;
        java.lang.String $r13, $r18;
        java.lang.IndexOutOfBoundsException $r22;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence[];

        $i3 = lengthof r1;

        if $i3 <= 9 goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("max of 9 values are supported");

        throw $r21;

     label01:
        $r3 = new android.text.SpannableStringBuilder;

        specialinvoke $r3.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r0);

        r2 = $r3;

     label02:
        i0 = 0;

     label03:
        $i4 = virtualinvoke r2.<android.text.SpannableStringBuilder: int length()>();

        if i0 >= $i4 goto label08;

        $c5 = virtualinvoke r2.<android.text.SpannableStringBuilder: char charAt(int)>(i0);

        if $c5 != 94 goto label07;

        $i6 = i0 + 1;

        c1 = virtualinvoke r2.<android.text.SpannableStringBuilder: char charAt(int)>($i6);

        if c1 != 94 goto label04;

        $i15 = i0 + 1;

        $i14 = i0 + 2;

        virtualinvoke r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>($i15, $i14);

        i0 = i0 + 1;

        goto label03;

     label04:
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1);

        if $z0 == 0 goto label07;

        $i7 = staticinvoke <java.lang.Character: int getNumericValue(char)>(c1);

        i2 = $i7 - 1;

        if i2 >= 0 goto label05;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i13 = i2 + 1;

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label05:
        $i8 = lengthof r1;

        if i2 < $i8 goto label06;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i11 = i2 + 1;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; only ");

        $i12 = lengthof r1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" provided");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label06:
        $i9 = i0 + 2;

        $r4 = r1[i2];

        virtualinvoke r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>(i0, $i9, $r4);

        $r6 = r1[i2];

        $i10 = interfaceinvoke $r6.<java.lang.CharSequence: int length()>();

        i0 = i0 + $i10;

        goto label03;

     label07:
        i0 = i0 + 1;

        goto label03;

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

     label10:
        return r2;

        catch java.lang.IndexOutOfBoundsException from label02 to label08 with label09;
    }

    public static int getOffsetBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i3, i4, i5, $i6, $i7, $i8, i9;
        char c1, c2;
        boolean $z0;
        android.text.Spanned $r1, $r4, $r5;
        java.lang.Object[] $r2;
        android.text.style.ReplacementSpan $r3, $r6;
        android.text.style.ReplacementSpan[] r7;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        if i0 != 1 goto label2;

        return 0;

     label2:
        $i6 = i0 - 1;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i6);

        if c1 < 56320 goto label5;

        if c1 > 57343 goto label5;

        $i8 = i0 - 2;

        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i8);

        if c2 < 55296 goto label3;

        if c2 > 56319 goto label3;

        i9 = i0 + -2;

        goto label4;

     label3:
        i9 = i0 + -1;

     label4:
        goto label6;

     label5:
        i9 = i0 + -1;

     label6:
        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label9;

        $r1 = (android.text.Spanned) r0;

        $r2 = interfaceinvoke $r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i9, i9, class "android/text/style/ReplacementSpan");

        r7 = (android.text.style.ReplacementSpan[]) $r2;

        i3 = 0;

     label7:
        $i7 = lengthof r7;

        if i3 >= $i7 goto label9;

        $r4 = (android.text.Spanned) r0;

        $r3 = r7[i3];

        i4 = interfaceinvoke $r4.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r3);

        $r5 = (android.text.Spanned) r0;

        $r6 = r7[i3];

        i5 = interfaceinvoke $r5.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r6);

        if i4 >= i9 goto label8;

        if i5 <= i9 goto label8;

        i9 = i4;

     label8:
        i3 = i3 + 1;

        goto label7;

     label9:
        return i9;
    }

    public static int getOffsetAfter(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i4, i5, i6, $i7, $i8, $i9, i10;
        char c2, c3;
        boolean $z0;
        android.text.Spanned $r1, $r4, $r5;
        java.lang.Object[] $r2;
        android.text.style.ReplacementSpan $r3, $r6;
        android.text.style.ReplacementSpan[] r7;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 != i1 goto label1;

        return i1;

     label1:
        $i7 = i1 - 1;

        if i0 != $i7 goto label2;

        return i1;

     label2:
        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        if c2 < 55296 goto label5;

        if c2 > 56319 goto label5;

        $i9 = i0 + 1;

        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i9);

        if c3 < 56320 goto label3;

        if c3 > 57343 goto label3;

        i10 = i0 + 2;

        goto label4;

     label3:
        i10 = i0 + 1;

     label4:
        goto label6;

     label5:
        i10 = i0 + 1;

     label6:
        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label9;

        $r1 = (android.text.Spanned) r0;

        $r2 = interfaceinvoke $r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i10, i10, class "android/text/style/ReplacementSpan");

        r7 = (android.text.style.ReplacementSpan[]) $r2;

        i4 = 0;

     label7:
        $i8 = lengthof r7;

        if i4 >= $i8 goto label9;

        $r4 = (android.text.Spanned) r0;

        $r3 = r7[i4];

        i5 = interfaceinvoke $r4.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r3);

        $r5 = (android.text.Spanned) r0;

        $r6 = r7[i4];

        i6 = interfaceinvoke $r5.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r6);

        if i5 >= i10 goto label8;

        if i6 <= i10 goto label8;

        i10 = i6;

     label8:
        i4 = i4 + 1;

        goto label7;

     label9:
        return i10;
    }

    private static void readSpan(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spannable r1;
        java.lang.Object r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spannable;

        r2 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        $i1 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        $i2 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        interfaceinvoke r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>(r2, $i0, $i1, $i2);

        return;
    }

    public static void copySpansFrom(android.text.Spanned, int, int, java.lang.Class, android.text.Spannable, int)
    {
        android.text.Spanned r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Class r1;
        android.text.Spannable r2;
        java.lang.Object[] r3;
        java.lang.Object $r4, $r5, $r6, $r7;

        r0 := @parameter0: android.text.Spanned;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Class;

        r2 := @parameter4: android.text.Spannable;

        i2 := @parameter5: int;

        if r1 != null goto label1;

        r1 = class "java/lang/Object";

     label1:
        r3 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        i3 = 0;

     label2:
        $i7 = lengthof r3;

        if i3 >= $i7 goto label5;

        $r4 = r3[i3];

        i4 = interfaceinvoke r0.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r5 = r3[i3];

        i5 = interfaceinvoke r0.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r5);

        $r6 = r3[i3];

        i6 = interfaceinvoke r0.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r6);

        if i4 >= i0 goto label3;

        i4 = i0;

     label3:
        if i5 <= i1 goto label4;

        i5 = i1;

     label4:
        $r7 = r3[i3];

        $i8 = i4 - i0;

        $i11 = $i8 + i2;

        $i10 = i5 - i0;

        $i9 = $i10 + i2;

        interfaceinvoke r2.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r7, $i11, $i9, i6);

        i3 = i3 + 1;

        goto label2;

     label5:
        return;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt)
    {
        java.lang.CharSequence r0, $r3;
        android.text.TextPaint r1;
        float f0;
        android.text.TextUtils$TruncateAt r2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: android.text.TextUtils$TruncateAt;

        $r3 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r0, r1, f0, r2, 0, null);

        return $r3;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback)
    {
        java.lang.CharSequence r0, $r9;
        android.text.TextPaint r1;
        float f0;
        android.text.TextUtils$TruncateAt r2, $r5;
        boolean z0;
        android.text.TextUtils$EllipsizeCallback r3;
        java.lang.String r4, $r7;
        android.content.res.Resources $r6, $r10;
        android.text.TextDirectionHeuristic $r8;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: android.text.TextUtils$TruncateAt;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.text.TextUtils$EllipsizeCallback;

        $r5 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END_SMALL>;

        if r2 != $r5 goto label1;

        $r10 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r7 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int)>(17039486);

        goto label2;

     label1:
        $r6 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.lang.String getString(int)>(17039485);

     label2:
        r4 = $r7;

        $r8 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r9 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback,android.text.TextDirectionHeuristic,java.lang.String)>(r0, r1, f0, r2, z0, r3, $r8, r4);

        return $r9;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback, android.text.TextDirectionHeuristic, java.lang.String)
    {
        java.lang.CharSequence r0, r7;
        android.text.TextPaint r1;
        float f0, f1, $f2, $f3, f4, f5, f6;
        android.text.TextUtils$TruncateAt r2, $r13, $r14, $r31;
        boolean z0, $z1;
        android.text.TextUtils$EllipsizeCallback r3;
        android.text.TextDirectionHeuristic r4;
        java.lang.String r5, r11, $r27, r35, r37, r39;
        int i0, i1, i2, i3, i4, $i5, $i8, $i9, $i10, $i11, $i13, $i14, $i15;
        android.text.MeasuredText r6;
        char[] r8;
        android.text.Spanned r9, $r29;
        android.text.SpannableString r10, $r26, r36;
        java.lang.Throwable r12, $r32;
        byte $b6, $b7;
        android.text.SpannableStringBuilder $r15, r40, r41;
        java.lang.StringBuilder $r18, r38;
        char $c12;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: android.text.TextUtils$TruncateAt;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.text.TextUtils$EllipsizeCallback;

        r4 := @parameter6: android.text.TextDirectionHeuristic;

        r5 := @parameter7: java.lang.String;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r6 = staticinvoke <android.text.MeasuredText: android.text.MeasuredText obtain()>();

     label01:
        $i5 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        f1 = staticinvoke <android.text.TextUtils: float setPara(android.text.MeasuredText,android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r6, r1, r0, 0, $i5, r4);

        $b6 = f1 cmpg f0;

        if $b6 > 0 goto label04;

        if r3 == null goto label02;

        interfaceinvoke r3.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, 0);

     label02:
        r7 = r0;

     label03:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r7;

     label04:
        f4 = virtualinvoke r1.<android.text.TextPaint: float measureText(java.lang.String)>(r5);

        f5 = f0 - f4;

        i1 = 0;

        i2 = i0;

        $b7 = f5 cmpg 0.0F;

        if $b7 >= 0 goto label05;

        goto label09;

     label05:
        $r13 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>;

        if r2 != $r13 goto label06;

        $i15 = virtualinvoke r6.<android.text.MeasuredText: int breakText(int,boolean,float)>(i0, 0, f5);

        i2 = i0 - $i15;

        goto label09;

     label06:
        $r14 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        if r2 == $r14 goto label07;

        $r31 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END_SMALL>;

        if r2 != $r31 goto label08;

     label07:
        i1 = virtualinvoke r6.<android.text.MeasuredText: int breakText(int,boolean,float)>(i0, 1, f5);

        goto label09;

     label08:
        $f3 = f5 / 2.0F;

        $i14 = virtualinvoke r6.<android.text.MeasuredText: int breakText(int,boolean,float)>(i0, 0, $f3);

        i2 = i0 - $i14;

        $f2 = virtualinvoke r6.<android.text.MeasuredText: float measure(int,int)>(i2, i0);

        f6 = f5 - $f2;

        i1 = virtualinvoke r6.<android.text.MeasuredText: int breakText(int,boolean,float)>(i2, 1, f6);

     label09:
        if r3 == null goto label10;

        interfaceinvoke r3.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(i1, i2);

     label10:
        r8 = r6.<android.text.MeasuredText: char[] mChars>;

        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label11;

        $r29 = (android.text.Spanned) r0;

        goto label12;

     label11:
        $r29 = null;

     label12:
        r9 = $r29;

        $i8 = i2 - i1;

        i4 = i0 - $i8;

        if z0 == 0 goto label19;

        if i4 <= 0 goto label13;

        $i13 = i1;

        i1 = i1 + 1;

        $c12 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        r8[$i13] = $c12;

     label13:
        i3 = i1;

     label14:
        if i3 >= i2 goto label15;

        r8[i3] = 65279;

        i3 = i3 + 1;

        goto label14;

     label15:
        $r27 = new java.lang.String;

        specialinvoke $r27.<java.lang.String: void <init>(char[],int,int)>(r8, 0, i0);

        r35 = $r27;

        if r9 != null goto label17;

        r11 = r35;

     label16:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r11;

     label17:
        $r26 = new android.text.SpannableString;

        specialinvoke $r26.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r35);

        r36 = $r26;

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>(r9, 0, i0, class "java/lang/Object", r36, 0);

        r10 = r36;

     label18:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r10;

     label19:
        if i4 != 0 goto label21;

        r37 = "";

     label20:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r37;

     label21:
        if r9 != null goto label23;

        $r18 = new java.lang.StringBuilder;

        $i9 = virtualinvoke r5.<java.lang.String: int length()>();

        $i10 = i4 + $i9;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(int)>($i10);

        r38 = $r18;

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r8, 0, i1);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $i11 = i0 - i2;

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r8, i2, $i11);

        r39 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r39;

     label23:
        $r15 = new android.text.SpannableStringBuilder;

        specialinvoke $r15.<android.text.SpannableStringBuilder: void <init>()>();

        r40 = $r15;

        virtualinvoke r40.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r0, 0, i1);

        virtualinvoke r40.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r5);

        virtualinvoke r40.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r0, i2, i0);

        r41 = r40;

     label24:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        return r41;

     label25:
        $r32 := @caughtexception;

        r12 = $r32;

     label26:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r6);

        throw r12;

        catch java.lang.Throwable from label01 to label03 with label25;
        catch java.lang.Throwable from label04 to label16 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String)
    {
        java.lang.CharSequence r0, $r5;
        android.text.TextPaint r1;
        float f0;
        java.lang.String r2, r3;
        android.text.TextDirectionHeuristic $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $r4 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r5 = staticinvoke <android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String,android.text.TextDirectionHeuristic)>(r0, r1, f0, r2, r3, $r4);

        return $r5;
    }

    public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String, android.text.TextDirectionHeuristic)
    {
        java.lang.CharSequence r0, r6;
        android.text.TextPaint r1;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.String r2, r3, r7, r10, $r20;
        android.text.TextDirectionHeuristic r4;
        android.text.MeasuredText r5, r8;
        int i0, i1, i2, i3, i4, i6, $i9, $i10, i13;
        float[] r9;
        java.lang.Throwable r11, $r27;
        byte $b7, $b11;
        android.text.SpannableStringBuilder $r14, r29, r30;
        char $c8, $c12;
        java.lang.StringBuilder $r16, $r18, $r21, $r22, $r23, $r25;
        java.lang.Integer $r17;
        java.lang.Object[] $r19;
        char[] r28;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.text.TextDirectionHeuristic;

        r5 = staticinvoke <android.text.MeasuredText: android.text.MeasuredText obtain()>();

     label01:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        f1 = staticinvoke <android.text.TextUtils: float setPara(android.text.MeasuredText,android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r5, r1, r0, 0, i0, r4);

        $b7 = f1 cmpg f0;

        if $b7 > 0 goto label03;

        r6 = r0;

     label02:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r5);

        return r6;

     label03:
        r28 = r5.<android.text.MeasuredText: char[] mChars>;

        i1 = 0;

        i2 = 0;

     label04:
        if i2 >= i0 goto label06;

        $c12 = r28[i2];

        if $c12 != 44 goto label05;

        i1 = i1 + 1;

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        i13 = i1 + 1;

        i3 = 0;

        r7 = "";

        i4 = 0;

        r9 = r5.<android.text.MeasuredText: float[] mWidths>;

        r8 = staticinvoke <android.text.MeasuredText: android.text.MeasuredText obtain()>();

        i6 = 0;

     label07:
        if i6 >= i0 goto label11;

        $f4 = (float) i4;

        $f3 = r9[i6];

        $f5 = $f4 + $f3;

        i4 = (int) $f5;

        $c8 = r28[i6];

        if $c8 != 44 goto label10;

        i13 = i13 + -1;

        if i13 != 1 goto label08;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r10 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label08:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r19 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r19[0] = $r17;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, $r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        r10 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $i9 = virtualinvoke r10.<java.lang.String: int length()>();

        virtualinvoke r8.<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r10, 0, $i9, r4);

        $i10 = r8.<android.text.MeasuredText: int mLen>;

        f2 = virtualinvoke r8.<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)>(r1, $i10, null);

        $f6 = (float) i4;

        $f7 = $f6 + f2;

        $b11 = $f7 cmpg f0;

        if $b11 > 0 goto label10;

        i3 = i6 + 1;

        r7 = r10;

     label10:
        i6 = i6 + 1;

        goto label07;

     label11:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r8);

        $r14 = new android.text.SpannableStringBuilder;

        specialinvoke $r14.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r7);

        r29 = $r14;

        virtualinvoke r29.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(0, r0, 0, i3);

        r30 = r29;

     label12:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r5);

        return r30;

     label13:
        $r27 := @caughtexception;

        r11 = $r27;

     label14:
        staticinvoke <android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>(r5);

        throw r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private static float setPara(android.text.MeasuredText, android.text.TextPaint, java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)
    {
        android.text.MeasuredText r0;
        android.text.TextPaint r1;
        java.lang.CharSequence r2;
        int i0, i1, i2, i3, i4, $i5;
        android.text.TextDirectionHeuristic r3;
        float f0, $f1;
        android.text.Spanned r4, $r8;
        android.text.style.MetricAffectingSpan[] r5, r9;
        boolean $z0;
        java.lang.Object[] $r6, $r7;

        r0 := @parameter0: android.text.MeasuredText;

        r1 := @parameter1: android.text.TextPaint;

        r2 := @parameter2: java.lang.CharSequence;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r3 := @parameter5: android.text.TextDirectionHeuristic;

        virtualinvoke r0.<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r2, i0, i1, r3);

        $z0 = r2 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r8 = (android.text.Spanned) r2;

        goto label2;

     label1:
        $r8 = null;

     label2:
        r4 = $r8;

        i2 = i1 - i0;

        if r4 != null goto label3;

        f0 = virtualinvoke r0.<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)>(r1, i2, null);

        goto label5;

     label3:
        f0 = 0.0F;

        i4 = 0;

     label4:
        if i4 >= i2 goto label5;

        i3 = interfaceinvoke r4.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i4, i2, class "android/text/style/MetricAffectingSpan");

        $r6 = interfaceinvoke r4.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i4, i3, class "android/text/style/MetricAffectingSpan");

        r5 = (android.text.style.MetricAffectingSpan[]) $r6;

        $r7 = staticinvoke <android.text.TextUtils: java.lang.Object[] removeEmptySpans(java.lang.Object[],android.text.Spanned,java.lang.Class)>(r5, r4, class "android/text/style/MetricAffectingSpan");

        r9 = (android.text.style.MetricAffectingSpan[]) $r7;

        $i5 = i3 - i4;

        $f1 = virtualinvoke r0.<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)>(r1, r9, $i5, null);

        f0 = f0 + $f1;

        i4 = i3;

        goto label4;

     label5:
        return f0;
    }

    static boolean doesNotNeedBidi(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2;
        char $c3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        if $c3 < 1424 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    static boolean doesNotNeedBidi(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3;
        char $c4;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

        i3 = i2 + i1;

     label1:
        if i2 >= i3 goto label3;

        $c4 = r0[i2];

        if $c4 < 1424 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    static char[] obtain(int)
    {
        int i0, $i1;
        char[] r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        i0 := @parameter0: int;

        $r3 = <android.text.TextUtils: java.lang.Object sLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0 = <android.text.TextUtils: char[] sTemp>;

        <android.text.TextUtils: char[] sTemp> = null;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        if r0 == null goto label6;

        $i1 = lengthof r0;

        if $i1 >= i0 goto label7;

     label6:
        r0 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>(i0);

     label7:
        return r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void recycle(char[])
    {
        char[] r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        if $i0 <= 1000 goto label1;

        return;

     label1:
        $r3 = <android.text.TextUtils: java.lang.Object sLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        <android.text.TextUtils: char[] sTemp> = r0;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static java.lang.String htmlEncode(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder r1, $r2;
        char c0;
        int i1, $i2;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i1 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label9;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        lookupswitch(c0)
        {
            case 34: goto label6;
            case 38: goto label4;
            case 39: goto label5;
            case 60: goto label2;
            case 62: goto label3;
            default: goto label7;
        };

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label8;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label8;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label8;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#39;");

        goto label8;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label8;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static transient java.lang.CharSequence concat(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder $r1, r13;
        android.text.SpannableString $r2, r14;
        android.text.SpannedString $r3;
        java.lang.CharSequence $r4, $r5, $r6, $r10, $r11, $r12;
        java.lang.String $r7;
        android.text.Spanned $r8;

        r0 := @parameter0: java.lang.CharSequence[];

        $i5 = lengthof r0;

        if $i5 != 0 goto label01;

        return "";

     label01:
        $i6 = lengthof r0;

        if $i6 != 1 goto label02;

        $r12 = r0[0];

        return $r12;

     label02:
        z0 = 0;

        i0 = 0;

     label03:
        $i7 = lengthof r0;

        if i0 >= $i7 goto label05;

        $r11 = r0[i0];

        $z2 = $r11 instanceof android.text.Spanned;

        if $z2 == 0 goto label04;

        z0 = 1;

        goto label05;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r13 = $r1;

        i1 = 0;

     label06:
        $i8 = lengthof r0;

        if i1 >= $i8 goto label07;

        $r10 = r0[i1];

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r10);

        i1 = i1 + 1;

        goto label06;

     label07:
        if z0 != 0 goto label08;

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label08:
        $r2 = new android.text.SpannableString;

        specialinvoke $r2.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r13);

        r14 = $r2;

        i2 = 0;

        i3 = 0;

     label09:
        $i9 = lengthof r0;

        if i3 >= $i9 goto label11;

        $r4 = r0[i3];

        i4 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        $r5 = r0[i3];

        $z1 = $r5 instanceof android.text.Spanned;

        if $z1 == 0 goto label10;

        $r6 = r0[i3];

        $r8 = (android.text.Spanned) $r6;

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r8, 0, i4, class "java/lang/Object", r14, i2);

     label10:
        i2 = i2 + i4;

        i3 = i3 + 1;

        goto label09;

     label11:
        $r3 = new android.text.SpannedString;

        specialinvoke $r3.<android.text.SpannedString: void <init>(java.lang.CharSequence)>(r14);

        return $r3;
    }

    public static boolean isGraphic(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2;
        char $c3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        i2 = staticinvoke <java.lang.Character: int getType(char)>($c3);

        if i2 == 15 goto label2;

        if i2 == 16 goto label2;

        if i2 == 19 goto label2;

        if i2 == 0 goto label2;

        if i2 == 13 goto label2;

        if i2 == 14 goto label2;

        if i2 == 12 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static boolean isGraphic(char)
    {
        char c0;
        int i1;
        boolean $z0;

        c0 := @parameter0: char;

        i1 = staticinvoke <java.lang.Character: int getType(char)>(c0);

        if i1 == 15 goto label1;

        if i1 == 16 goto label1;

        if i1 == 19 goto label1;

        if i1 == 0 goto label1;

        if i1 == 13 goto label1;

        if i1 == 14 goto label1;

        if i1 == 12 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isDigitsOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isPrintableAscii(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if 32 > c0 goto label1;

        if c0 <= 126 goto label2;

     label1:
        if c0 == 13 goto label2;

        if c0 != 10 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean isPrintableAsciiOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isPrintableAscii(char)>($c2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static int getCapsMode(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i5, i6, $i7, $i8, $i10, $i12, $i13, $i15, $i16, $i18, $i19, $i20;
        char c3, $c11, $c17, c21, c22, c23, c24;
        short s4, $s9, $s14;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= 0 goto label01;

        return 0;

     label01:
        s4 = 0;

        $i7 = i1 & 4096;

        if $i7 == 0 goto label02;

        s4 = s4 | 4096;

     label02:
        $i8 = i1 & 24576;

        if $i8 != 0 goto label03;

        return s4;

     label03:
        i2 = i0;

     label04:
        if i2 <= 0 goto label06;

        $i19 = i2 - 1;

        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i19);

        if c3 == 34 goto label05;

        if c3 == 39 goto label05;

        $i20 = staticinvoke <java.lang.Character: int getType(char)>(c3);

        if $i20 == 21 goto label05;

        goto label06;

     label05:
        i2 = i2 + -1;

        goto label04;

     label06:
        i5 = i2;

     label07:
        if i5 <= 0 goto label09;

        $i18 = i5 - 1;

        $c17 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i18);

        c21 = $c17;

        if $c17 == 32 goto label08;

        if c21 != 9 goto label09;

     label08:
        i5 = i5 + -1;

        goto label07;

     label09:
        if i5 == 0 goto label10;

        $i10 = i5 - 1;

        $c11 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i10);

        if $c11 != 10 goto label11;

     label10:
        $s9 = s4 | 8192;

        return $s9;

     label11:
        $i12 = i1 & 16384;

        if $i12 != 0 goto label13;

        if i2 == i5 goto label12;

        s4 = s4 | 8192;

     label12:
        return s4;

     label13:
        if i2 != i5 goto label14;

        return s4;

     label14:
        if i5 <= 0 goto label16;

        $i15 = i5 - 1;

        c22 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i15);

        if c22 == 34 goto label15;

        if c22 == 39 goto label15;

        $i16 = staticinvoke <java.lang.Character: int getType(char)>(c22);

        if $i16 == 22 goto label15;

        goto label16;

     label15:
        i5 = i5 + -1;

        goto label14;

     label16:
        if i5 <= 0 goto label22;

        $i13 = i5 - 1;

        c23 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i13);

        if c23 == 46 goto label17;

        if c23 == 63 goto label17;

        if c23 != 33 goto label22;

     label17:
        if c23 != 46 goto label21;

        i6 = i5 - 2;

     label18:
        if i6 < 0 goto label21;

        c24 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i6);

        if c24 != 46 goto label19;

        return s4;

     label19:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c24);

        if $z0 != 0 goto label20;

        goto label21;

     label20:
        i6 = i6 + -1;

        goto label18;

     label21:
        $s14 = s4 | 16384;

        return $s14;

     label22:
        return s4;
    }

    public static boolean delimitedStringContains(java.lang.String, char, java.lang.String)
    {
        java.lang.String r0, r1;
        char c0, $c7, $c9;
        int i1, i2, i3, $i4, $i5, $i6, $i8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        r1 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i1 = -1;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label3:
        $i4 = i1 + 1;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i4);

        i1 = $i5;

        if $i5 == -1 goto label7;

        if i1 <= 0 goto label4;

        $i8 = i1 - 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);

        if $c9 == c0 goto label4;

        goto label3;

     label4:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = i1 + $i6;

        if i3 != i2 goto label5;

        return 1;

     label5:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c7 != c0 goto label6;

        return 1;

     label6:
        goto label3;

     label7:
        return 0;
    }

    public static java.lang.Object[] removeEmptySpans(java.lang.Object[], android.text.Spanned, java.lang.Class)
    {
        java.lang.Object[] r0, r3, $r6, $r7, r9;
        android.text.Spanned r1;
        java.lang.Class r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Object r4, $r5, $r8;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: android.text.Spanned;

        r2 := @parameter2: java.lang.Class;

        r3 = null;

        i0 = 0;

        i1 = 0;

     label1:
        $i4 = lengthof r0;

        if i1 >= $i4 goto label4;

        r4 = r0[i1];

        i2 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r4);

        i3 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r4);

        if i2 != i3 goto label2;

        if r3 != null goto label3;

        $i5 = lengthof r0;

        $i6 = $i5 - 1;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, $i6);

        $r7 = (java.lang.Object[]) $r8;

        r3 = (java.lang.Object[]) $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r3, 0, i1);

        i0 = i1;

        goto label3;

     label2:
        if r3 == null goto label3;

        r3[i0] = r4;

        i0 = i0 + 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if r3 == null goto label5;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, i0);

        $r6 = (java.lang.Object[]) $r5;

        r9 = (java.lang.Object[]) $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r9, 0, i0);

        return r9;

     label5:
        return r0;
    }

    public static long packRangeInLong(int, int)
    {
        int i0, i1;
        long $l2, $l3, $l4, $l5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = (long) i0;

        $l4 = $l2 << 32;

        $l3 = (long) i1;

        $l5 = $l4 | $l3;

        return $l5;
    }

    public static int unpackRangeStartFromLong(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        return $i2;
    }

    public static int unpackRangeEndFromLong(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = l0 & 4294967295L;

        $i2 = (int) $l1;

        return $i2;
    }

    public static int getLayoutDirectionFromLocale(java.util.Locale)
    {
        java.util.Locale r0, $r2, $r3;
        java.lang.String r1, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        byte $b0;
        int $i1;

        r0 := @parameter0: java.util.Locale;

        if r0 == null goto label3;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $z1 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label3;

        $r3 = staticinvoke <libcore.icu.ICU: java.util.Locale addLikelySubtags(java.util.Locale)>(r0);

        r1 = virtualinvoke $r3.<java.util.Locale: java.lang.String getScript()>();

        if r1 != null goto label1;

        $i1 = staticinvoke <android.text.TextUtils: int getLayoutDirectionFromFirstChar(java.util.Locale)>(r0);

        return $i1;

     label1:
        $r4 = <android.text.TextUtils: java.lang.String ARAB_SCRIPT_SUBTAG>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z2 != 0 goto label2;

        $r5 = <android.text.TextUtils: java.lang.String HEBR_SCRIPT_SUBTAG>;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z3 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.force_rtl", 0);

        if $z0 == 0 goto label4;

        $b0 = 1;

        goto label5;

     label4:
        $b0 = 0;

     label5:
        return $b0;
    }

    private static int getLayoutDirectionFromFirstChar(java.util.Locale)
    {
        java.util.Locale r0;
        java.lang.String $r1;
        char $c0;
        byte $b1;

        r0 := @parameter0: java.util.Locale;

        $r1 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>(r0);

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $b1 = staticinvoke <java.lang.Character: byte getDirectionality(char)>($c0);

        tableswitch($b1)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    static void access$000(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spannable r1;
        java.lang.Object r2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spannable;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <android.text.TextUtils: void readSpan(android.os.Parcel,android.text.Spannable,java.lang.Object)>(r0, r1, r2);

        return;
    }

    static void <clinit>()
    {
        android.text.TextUtils$1 $r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;

        <android.text.TextUtils: char ZWNBS_CHAR> = 65279;

        <android.text.TextUtils: int CAP_MODE_SENTENCES> = 16384;

        <android.text.TextUtils: int CAP_MODE_WORDS> = 8192;

        <android.text.TextUtils: int CAP_MODE_CHARACTERS> = 4096;

        <android.text.TextUtils: char FIRST_RIGHT_TO_LEFT> = 1424;

        <android.text.TextUtils: int LAST_SPAN> = 24;

        <android.text.TextUtils: int TTS_SPAN> = 24;

        <android.text.TextUtils: int LOCALE_SPAN> = 23;

        <android.text.TextUtils: int EASY_EDIT_SPAN> = 22;

        <android.text.TextUtils: int SUGGESTION_RANGE_SPAN> = 21;

        <android.text.TextUtils: int SPELL_CHECK_SPAN> = 20;

        <android.text.TextUtils: int SUGGESTION_SPAN> = 19;

        <android.text.TextUtils: int ANNOTATION> = 18;

        <android.text.TextUtils: int TEXT_APPEARANCE_SPAN> = 17;

        <android.text.TextUtils: int ABSOLUTE_SIZE_SPAN> = 16;

        <android.text.TextUtils: int SUBSCRIPT_SPAN> = 15;

        <android.text.TextUtils: int SUPERSCRIPT_SPAN> = 14;

        <android.text.TextUtils: int TYPEFACE_SPAN> = 13;

        <android.text.TextUtils: int BACKGROUND_COLOR_SPAN> = 12;

        <android.text.TextUtils: int URL_SPAN> = 11;

        <android.text.TextUtils: int LEADING_MARGIN_SPAN> = 10;

        <android.text.TextUtils: int QUOTE_SPAN> = 9;

        <android.text.TextUtils: int BULLET_SPAN> = 8;

        <android.text.TextUtils: int STYLE_SPAN> = 7;

        <android.text.TextUtils: int UNDERLINE_SPAN> = 6;

        <android.text.TextUtils: int STRIKETHROUGH_SPAN> = 5;

        <android.text.TextUtils: int SCALE_X_SPAN> = 4;

        <android.text.TextUtils: int RELATIVE_SIZE_SPAN> = 3;

        <android.text.TextUtils: int FOREGROUND_COLOR_SPAN> = 2;

        <android.text.TextUtils: int FIRST_SPAN> = 1;

        <android.text.TextUtils: int ALIGNMENT_SPAN> = 1;

        <android.text.TextUtils: java.lang.String TAG> = "TextUtils";

        $r0 = new android.text.TextUtils$1;

        specialinvoke $r0.<android.text.TextUtils$1: void <init>()>();

        <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.text.TextUtils: java.lang.Object sLock> = $r1;

        <android.text.TextUtils: char[] sTemp> = null;

        $r2 = newarray (java.lang.String)[0];

        <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $r2;

        <android.text.TextUtils: java.lang.String ARAB_SCRIPT_SUBTAG> = "Arab";

        <android.text.TextUtils: java.lang.String HEBR_SCRIPT_SUBTAG> = "Hebr";

        return;
    }
}
