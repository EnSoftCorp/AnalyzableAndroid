public final class android.hardware.hdmi.HdmiControlManager extends java.lang.Object
{
    private final android.hardware.hdmi.IHdmiControlService mService;
    public static final java.lang.String ACTION_OSD_MESSAGE;
    public static final int OSD_MESSAGE_ARC_CONNECTED_INVALID_PORT;
    public static final int OSD_MESSAGE_AVR_VOLUME_CHANGED;
    public static final java.lang.String EXTRA_MESSAGE_ID;
    public static final java.lang.String EXTRA_MESSAGE_EXTRAM_PARAM1;
    public static final int AVR_VOLUME_MUTED;
    public static final int POWER_STATUS_UNKNOWN;
    public static final int POWER_STATUS_ON;
    public static final int POWER_STATUS_STANDBY;
    public static final int POWER_STATUS_TRANSIENT_TO_ON;
    public static final int POWER_STATUS_TRANSIENT_TO_STANDBY;
    public static final int RESULT_SUCCESS;
    public static final int RESULT_TIMEOUT;
    public static final int RESULT_SOURCE_NOT_AVAILABLE;
    public static final int RESULT_TARGET_NOT_AVAILABLE;
    public static final int RESULT_ALREADY_IN_PROGRESS;
    public static final int RESULT_EXCEPTION;
    public static final int RESULT_INCORRECT_MODE;
    public static final int RESULT_COMMUNICATION_FAILED;
    public static final int DEVICE_EVENT_ADD_DEVICE;
    public static final int DEVICE_EVENT_REMOVE_DEVICE;
    public static final int DEVICE_EVENT_UPDATE_DEVICE;
    public static final int ONE_TOUCH_RECORD_RECORDING_CURRENTLY_SELECTED_SOURCE;
    public static final int ONE_TOUCH_RECORD_RECORDING_DIGITAL_SERVICE;
    public static final int ONE_TOUCH_RECORD_RECORDING_ANALOGUE_SERVICE;
    public static final int ONE_TOUCH_RECORD_RECORDING_EXTERNAL_INPUT;
    public static final int ONE_TOUCH_RECORD_UNABLE_DIGITAL_SERVICE;
    public static final int ONE_TOUCH_RECORD_UNABLE_ANALOGUE_SERVICE;
    public static final int ONE_TOUCH_RECORD_UNABLE_SELECTED_SERVICE;
    public static final int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PLUG_NUMBER;
    public static final int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PHYSICAL_ADDRESS;
    public static final int ONE_TOUCH_RECORD_UNSUPPORTED_CA;
    public static final int ONE_TOUCH_RECORD_NO_OR_INSUFFICIENT_CA_ENTITLEMENTS;
    public static final int ONE_TOUCH_RECORD_DISALLOW_TO_COPY;
    public static final int ONE_TOUCH_RECORD_DISALLOW_TO_FUTHER_COPIES;
    public static final int ONE_TOUCH_RECORD_NO_MEDIA;
    public static final int ONE_TOUCH_RECORD_PLAYING;
    public static final int ONE_TOUCH_RECORD_ALREADY_RECORDING;
    public static final int ONE_TOUCH_RECORD_MEDIA_PROTECTED;
    public static final int ONE_TOUCH_RECORD_NO_SOURCE_SIGNAL;
    public static final int ONE_TOUCH_RECORD_MEDIA_PROBLEM;
    public static final int ONE_TOUCH_RECORD_NOT_ENOUGH_SPACE;
    public static final int ONE_TOUCH_RECORD_PARENT_LOCK_ON;
    public static final int ONE_TOUCH_RECORD_RECORDING_TERMINATED_NORMALLY;
    public static final int ONE_TOUCH_RECORD_RECORDING_ALREADY_TERMINATED;
    public static final int ONE_TOUCH_RECORD_OTHER_REASON;
    public static final int ONE_TOUCH_RECORD_PREVIOUS_RECORDING_IN_PROGRESS;
    public static final int ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION;
    public static final int ONE_TOUCH_RECORD_FAIL_TO_RECORD_DISPLAYED_SCREEN;
    public static final int ONE_TOUCH_RECORD_CEC_DISABLED;
    public static final int TIMER_RECORDING_TYPE_DIGITAL;
    public static final int TIMER_RECORDING_TYPE_ANALOGUE;
    public static final int TIMER_RECORDING_TYPE_EXTERNAL;
    public static final int TIMER_STATUS_MEDIA_INFO_PRESENT_NOT_PROTECTED;
    public static final int TIMER_STATUS_MEDIA_INFO_PRESENT_PROTECTED;
    public static final int TIMER_STATUS_MEDIA_INFO_NOT_PRESENT;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_NOT_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_MIGHT_NOT_ENOUGH_SPACE;
    public static final int TIMER_STATUS_PROGRAMMED_INFO_NO_MEDIA_INFO;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_NO_FREE_TIME;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_DATE_OUT_OF_RANGE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_SEQUENCE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PLUG_NUMBER;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PHYSICAL_NUMBER;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_CA_NOT_SUPPORTED;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_NO_CA_ENTITLEMENTS;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_UNSUPPORTED_RESOLUTION;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_PARENTAL_LOCK_ON;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_CLOCK_FAILURE;
    public static final int TIMER_STATUS_NOT_PROGRAMMED_DUPLICATED;
    public static final int TIMER_RECORDING_RESULT_EXTRA_NO_ERROR;
    public static final int TIMER_RECORDING_RESULT_EXTRA_CHECK_RECORDER_CONNECTION;
    public static final int TIMER_RECORDING_RESULT_EXTRA_FAIL_TO_RECORD_SELECTED_SOURCE;
    public static final int TIMER_RECORDING_RESULT_EXTRA_CEC_DISABLED;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_RECORDING;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_MATCHING;
    public static final int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_INFO_AVAILABLE;
    public static final int CLEAR_TIMER_STATUS_TIMER_CLEARED;
    public static final int CLEAR_TIMER_STATUS_CHECK_RECORDER_CONNECTION;
    public static final int CLEAR_TIMER_STATUS_FAIL_TO_CLEAR_SELECTED_SOURCE;
    public static final int CLEAR_TIMER_STATUS_CEC_DISABLE;
    private final boolean mHasPlaybackDevice;
    private final boolean mHasTvDevice;

    public void <init>(android.hardware.hdmi.IHdmiControlService)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.IHdmiControlService r1, $r4, $r5;
        int[] r2;
        boolean $z0, $z1;
        android.os.RemoteException $r6;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService> = r1;

        r2 = null;

        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r4 == null goto label4;

     label1:
        $r5 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        r2 = interfaceinvoke $r5.<android.hardware.hdmi.IHdmiControlService: int[] getSupportedTypes()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $z0 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r2, 0);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasTvDevice> = $z0;

        $z1 = staticinvoke <android.hardware.hdmi.HdmiControlManager: boolean hasDeviceType(int[],int)>(r2, 4);

        r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasPlaybackDevice> = $z1;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static boolean hasDeviceType(int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        i3 = r1[i2];

        if i3 != i0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public android.hardware.hdmi.HdmiClient getClient(int)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        int i0;
        android.hardware.hdmi.IHdmiControlService $r1, $r3, $r5;
        boolean $z0, $z1;
        android.hardware.hdmi.HdmiPlaybackClient $r2;
        android.hardware.hdmi.HdmiTvClient $r4;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r1 != null goto label1;

        return null;

     label1:
        lookupswitch(i0)
        {
            case 0: goto label2;
            case 4: goto label5;
            default: goto label8;
        };

     label2:
        $z1 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasTvDevice>;

        if $z1 == 0 goto label3;

        $r4 = new android.hardware.hdmi.HdmiTvClient;

        $r5 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        specialinvoke $r4.<android.hardware.hdmi.HdmiTvClient: void <init>(android.hardware.hdmi.IHdmiControlService)>($r5);

        goto label4;

     label3:
        $r4 = null;

     label4:
        return $r4;

     label5:
        $z0 = r0.<android.hardware.hdmi.HdmiControlManager: boolean mHasPlaybackDevice>;

        if $z0 == 0 goto label6;

        $r2 = new android.hardware.hdmi.HdmiPlaybackClient;

        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        specialinvoke $r2.<android.hardware.hdmi.HdmiPlaybackClient: void <init>(android.hardware.hdmi.IHdmiControlService)>($r3);

        goto label7;

     label6:
        $r2 = null;

     label7:
        return $r2;

     label8:
        return null;
    }

    public android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiPlaybackClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(4);

        $r2 = (android.hardware.hdmi.HdmiPlaybackClient) $r1;

        return $r2;
    }

    public android.hardware.hdmi.HdmiTvClient getTvClient()
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiClient $r1;
        android.hardware.hdmi.HdmiTvClient $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        $r1 = virtualinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)>(0);

        $r2 = (android.hardware.hdmi.HdmiTvClient) $r1;

        return $r2;
    }

    public void addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r1;
        android.hardware.hdmi.IHdmiControlService $r3, $r4;
        android.hardware.hdmi.IHdmiHotplugEventListener $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $r5 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiHotplugEventListener getHotplugEventListenerWrapper(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>(r1);

        interfaceinvoke $r4.<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r1;
        android.hardware.hdmi.IHdmiControlService $r3, $r4;
        android.hardware.hdmi.IHdmiHotplugEventListener $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r3 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiControlService mService>;

        $r5 = specialinvoke r0.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.IHdmiHotplugEventListener getHotplugEventListenerWrapper(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>(r1);

        interfaceinvoke $r4.<android.hardware.hdmi.IHdmiControlService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.hardware.hdmi.IHdmiHotplugEventListener getHotplugEventListenerWrapper(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)
    {
        android.hardware.hdmi.HdmiControlManager r0;
        android.hardware.hdmi.HdmiControlManager$HotplugEventListener r1;
        android.hardware.hdmi.HdmiControlManager$1 $r2;

        r0 := @this: android.hardware.hdmi.HdmiControlManager;

        r1 := @parameter0: android.hardware.hdmi.HdmiControlManager$HotplugEventListener;

        $r2 = new android.hardware.hdmi.HdmiControlManager$1;

        specialinvoke $r2.<android.hardware.hdmi.HdmiControlManager$1: void <init>(android.hardware.hdmi.HdmiControlManager,android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>(r0, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_CEC_DISABLE> = 162;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_FAIL_TO_CLEAR_SELECTED_SOURCE> = 161;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_CHECK_RECORDER_CONNECTION> = 160;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_CLEARED> = 128;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_INFO_AVAILABLE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_NO_MATCHING> = 1;

        <android.hardware.hdmi.HdmiControlManager: int CLEAR_TIMER_STATUS_TIMER_NOT_CLEARED_RECORDING> = 0;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_CEC_DISABLED> = 3;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_FAIL_TO_RECORD_SELECTED_SOURCE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_CHECK_RECORDER_CONNECTION> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_RESULT_EXTRA_NO_ERROR> = 0;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_DUPLICATED> = 14;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_CLOCK_FAILURE> = 10;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_PARENTAL_LOCK_ON> = 9;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_UNSUPPORTED_RESOLUTION> = 8;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_NO_CA_ENTITLEMENTS> = 7;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_CA_NOT_SUPPORTED> = 6;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PHYSICAL_NUMBER> = 5;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_EXTERNAL_PLUG_NUMBER> = 4;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_INVALID_SEQUENCE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_DATE_OUT_OF_RANGE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_NOT_PROGRAMMED_NO_FREE_TIME> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_NO_MEDIA_INFO> = 10;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_MIGHT_NOT_ENOUGH_SPACE> = 11;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_NOT_ENOUGH_SPACE> = 9;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_PROGRAMMED_INFO_ENOUGH_SPACE> = 8;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_NOT_PRESENT> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_PRESENT_PROTECTED> = 1;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_STATUS_MEDIA_INFO_PRESENT_NOT_PROTECTED> = 0;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_EXTERNAL> = 3;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_ANALOGUE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int TIMER_RECORDING_TYPE_DIGITAL> = 1;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_CEC_DISABLED> = 51;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_FAIL_TO_RECORD_DISPLAYED_SCREEN> = 50;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION> = 49;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PREVIOUS_RECORDING_IN_PROGRESS> = 48;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_OTHER_REASON> = 31;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_ALREADY_TERMINATED> = 27;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_TERMINATED_NORMALLY> = 26;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PARENT_LOCK_ON> = 23;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NOT_ENOUGH_SPACE> = 22;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_MEDIA_PROBLEM> = 21;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_SOURCE_SIGNAL> = 20;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_MEDIA_PROTECTED> = 19;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_ALREADY_RECORDING> = 18;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_PLAYING> = 17;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_MEDIA> = 16;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_DISALLOW_TO_FUTHER_COPIES> = 14;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_DISALLOW_TO_COPY> = 13;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_NO_OR_INSUFFICIENT_CA_ENTITLEMENTS> = 12;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNSUPPORTED_CA> = 11;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PHYSICAL_ADDRESS> = 10;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_INVALID_EXTERNAL_PLUG_NUMBER> = 9;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_SELECTED_SERVICE> = 7;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_ANALOGUE_SERVICE> = 6;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_UNABLE_DIGITAL_SERVICE> = 5;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_EXTERNAL_INPUT> = 4;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_ANALOGUE_SERVICE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_DIGITAL_SERVICE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int ONE_TOUCH_RECORD_RECORDING_CURRENTLY_SELECTED_SOURCE> = 1;

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_UPDATE_DEVICE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_REMOVE_DEVICE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int DEVICE_EVENT_ADD_DEVICE> = 1;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_COMMUNICATION_FAILED> = 7;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_INCORRECT_MODE> = 6;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_EXCEPTION> = 5;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_ALREADY_IN_PROGRESS> = 4;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_TARGET_NOT_AVAILABLE> = 3;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_SOURCE_NOT_AVAILABLE> = 2;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_TIMEOUT> = 1;

        <android.hardware.hdmi.HdmiControlManager: int RESULT_SUCCESS> = 0;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_TRANSIENT_TO_STANDBY> = 3;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_TRANSIENT_TO_ON> = 2;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_STANDBY> = 1;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_ON> = 0;

        <android.hardware.hdmi.HdmiControlManager: int POWER_STATUS_UNKNOWN> = -1;

        <android.hardware.hdmi.HdmiControlManager: int AVR_VOLUME_MUTED> = 101;

        <android.hardware.hdmi.HdmiControlManager: java.lang.String EXTRA_MESSAGE_EXTRAM_PARAM1> = "android.hardware.hdmi.extra.MESSAGE_EXTRA_PARAM1";

        <android.hardware.hdmi.HdmiControlManager: java.lang.String EXTRA_MESSAGE_ID> = "android.hardware.hdmi.extra.MESSAGE_ID";

        <android.hardware.hdmi.HdmiControlManager: int OSD_MESSAGE_AVR_VOLUME_CHANGED> = 2;

        <android.hardware.hdmi.HdmiControlManager: int OSD_MESSAGE_ARC_CONNECTED_INVALID_PORT> = 1;

        <android.hardware.hdmi.HdmiControlManager: java.lang.String ACTION_OSD_MESSAGE> = "android.hardware.hdmi.action.OSD_MESSAGE";

        return;
    }
}
