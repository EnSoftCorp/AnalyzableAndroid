public class android.graphics.pdf.PdfDocument extends java.lang.Object
{
    private final byte[] mChunk;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.List mPages;
    private long mNativeDocument;
    private android.graphics.pdf.PdfDocument$Page mCurrentPage;

    public void <init>()
    {
        android.graphics.pdf.PdfDocument r0;
        byte[] $r1;
        dalvik.system.CloseGuard $r2, $r4;
        java.util.ArrayList $r3;
        long $l0;

        r0 := @this: android.graphics.pdf.PdfDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[4096];

        r0.<android.graphics.pdf.PdfDocument: byte[] mChunk> = $r1;

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.pdf.PdfDocument: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.pdf.PdfDocument: java.util.List mPages> = $r3;

        $l0 = specialinvoke r0.<android.graphics.pdf.PdfDocument: long nativeCreateDocument()>();

        r0.<android.graphics.pdf.PdfDocument: long mNativeDocument> = $l0;

        $r4 = r0.<android.graphics.pdf.PdfDocument: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    public android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo)
    {
        android.graphics.pdf.PdfDocument r0;
        android.graphics.pdf.PdfDocument$PageInfo r1;
        android.graphics.pdf.PdfDocument$PdfCanvas r2, $r3;
        long $l0, $l7;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Rect $r4, $r5, $r6, $r7;
        android.graphics.pdf.PdfDocument$Page $r8, $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.graphics.pdf.PdfDocument;

        r1 := @parameter0: android.graphics.pdf.PdfDocument$PageInfo;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfCurrentPageNotFinished()>();

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("page cannot be null");

        throw $r10;

     label1:
        $r3 = new android.graphics.pdf.PdfDocument$PdfCanvas;

        $l0 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        $i1 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: int access$000(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $i2 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: int access$100(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $r4 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect access$200(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $i3 = $r4.<android.graphics.Rect: int left>;

        $r5 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect access$200(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $i4 = $r5.<android.graphics.Rect: int top>;

        $r6 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect access$200(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $i5 = $r6.<android.graphics.Rect: int right>;

        $r7 = staticinvoke <android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect access$200(android.graphics.pdf.PdfDocument$PageInfo)>(r1);

        $i6 = $r7.<android.graphics.Rect: int bottom>;

        $l7 = staticinvoke <android.graphics.pdf.PdfDocument: long nativeStartPage(long,int,int,int,int,int,int)>($l0, $i1, $i2, $i3, $i4, $i5, $i6);

        specialinvoke $r3.<android.graphics.pdf.PdfDocument$PdfCanvas: void <init>(android.graphics.pdf.PdfDocument,long)>(r0, $l7);

        r2 = $r3;

        $r9 = new android.graphics.pdf.PdfDocument$Page;

        specialinvoke $r9.<android.graphics.pdf.PdfDocument$Page: void <init>(android.graphics.Canvas,android.graphics.pdf.PdfDocument$PageInfo,android.graphics.pdf.PdfDocument$1)>(r2, r1, null);

        r0.<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page mCurrentPage> = $r9;

        $r8 = r0.<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page mCurrentPage>;

        return $r8;
    }

    public void finishPage(android.graphics.pdf.PdfDocument$Page)
    {
        android.graphics.pdf.PdfDocument r0;
        android.graphics.pdf.PdfDocument$Page r1, $r2;
        boolean $z0;
        java.util.List $r3;
        android.graphics.pdf.PdfDocument$PageInfo $r4;
        long $l0;
        java.lang.IllegalStateException $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.graphics.pdf.PdfDocument;

        r1 := @parameter0: android.graphics.pdf.PdfDocument$Page;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfClosed()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("page cannot be null");

        throw $r7;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page mCurrentPage>;

        if r1 == $r2 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("invalid page");

        throw $r6;

     label2:
        $z0 = virtualinvoke r1.<android.graphics.pdf.PdfDocument$Page: boolean isFinished()>();

        if $z0 == 0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("page already finished");

        throw $r5;

     label3:
        $r3 = r0.<android.graphics.pdf.PdfDocument: java.util.List mPages>;

        $r4 = virtualinvoke r1.<android.graphics.pdf.PdfDocument$Page: android.graphics.pdf.PdfDocument$PageInfo getInfo()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        r0.<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page mCurrentPage> = null;

        $l0 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void nativeFinishPage(long)>($l0);

        staticinvoke <android.graphics.pdf.PdfDocument$Page: void access$400(android.graphics.pdf.PdfDocument$Page)>(r1);

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        android.graphics.pdf.PdfDocument r0;
        java.io.OutputStream r1;
        byte[] $r2;
        long $l0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.graphics.pdf.PdfDocument;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfCurrentPageNotFinished()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out cannot be null!");

        throw $r3;

     label1:
        $l0 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        $r2 = r0.<android.graphics.pdf.PdfDocument: byte[] mChunk>;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void nativeWriteTo(long,java.io.OutputStream,byte[])>($l0, r1, $r2);

        return;
    }

    public java.util.List getPages()
    {
        android.graphics.pdf.PdfDocument r0;
        java.util.List $r1, $r2;

        r0 := @this: android.graphics.pdf.PdfDocument;

        $r1 = r0.<android.graphics.pdf.PdfDocument: java.util.List mPages>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void close()
    {
        android.graphics.pdf.PdfDocument r0;

        r0 := @this: android.graphics.pdf.PdfDocument;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void throwIfCurrentPageNotFinished()>();

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void dispose()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.pdf.PdfDocument r0;
        java.lang.Throwable r1, $r3;
        dalvik.system.CloseGuard $r2;

        r0 := @this: android.graphics.pdf.PdfDocument;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfDocument: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void dispose()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void dispose()
    {
        android.graphics.pdf.PdfDocument r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.graphics.pdf.PdfDocument;

        $l0 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        specialinvoke r0.<android.graphics.pdf.PdfDocument: void nativeClose(long)>($l2);

        $r1 = r0.<android.graphics.pdf.PdfDocument: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        r0.<android.graphics.pdf.PdfDocument: long mNativeDocument> = 0L;

     label1:
        return;
    }

    private void throwIfClosed()
    {
        android.graphics.pdf.PdfDocument r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.graphics.pdf.PdfDocument;

        $l0 = r0.<android.graphics.pdf.PdfDocument: long mNativeDocument>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("document is closed!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfCurrentPageNotFinished()
    {
        android.graphics.pdf.PdfDocument r0;
        android.graphics.pdf.PdfDocument$Page $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfDocument;

        $r1 = r0.<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page mCurrentPage>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current page not finished!");

        throw $r2;

     label1:
        return;
    }

    private native long nativeCreateDocument();

    private native void nativeClose(long);

    private native void nativeFinishPage(long);

    private native void nativeWriteTo(long, java.io.OutputStream, byte[]);

    private static native long nativeStartPage(long, int, int, int, int, int, int);
}
