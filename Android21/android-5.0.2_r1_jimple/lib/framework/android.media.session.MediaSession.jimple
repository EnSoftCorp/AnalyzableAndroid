public final class android.media.session.MediaSession extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final int FLAG_HANDLES_MEDIA_BUTTONS;
    public static final int FLAG_HANDLES_TRANSPORT_CONTROLS;
    public static final int FLAG_EXCLUSIVE_GLOBAL_PRIORITY;
    private final java.lang.Object mLock;
    private final android.media.session.MediaSession$Token mSessionToken;
    private final android.media.session.MediaController mController;
    private final android.media.session.ISession mBinder;
    private final android.media.session.MediaSession$CallbackStub mCbStub;
    private android.media.session.MediaSession$CallbackMessageHandler mCallback;
    private android.media.VolumeProvider mVolumeProvider;
    private android.media.session.PlaybackState mPlaybackState;
    private boolean mActive;

    public void <init>(android.content.Context, java.lang.String)
    {
        android.media.session.MediaSession r0;
        android.content.Context r1;
        java.lang.String r2;
        int $i0;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        specialinvoke r0.<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, int)
    {
        android.media.session.MediaSession r0;
        android.content.Context r1;
        java.lang.String r2;
        int i0;
        android.media.session.MediaSessionManager r3;
        android.os.RemoteException r4, $r16;
        java.lang.Object $r5, $r7;
        boolean $z0;
        android.media.session.MediaSession$CallbackStub $r6, $r8;
        android.media.session.ISession $r9, $r11;
        android.media.session.MediaSession$Token $r10, $r15;
        android.media.session.ISessionController $r12;
        android.media.session.MediaController $r13;
        java.lang.IllegalArgumentException $r14, $r17;
        java.lang.RuntimeException $r18;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.media.session.MediaSession: java.lang.Object mLock> = $r5;

        r0.<android.media.session.MediaSession: boolean mActive> = 0;

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context cannot be null.");

        throw $r17;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tag cannot be null or empty");

        throw $r14;

     label2:
        $r6 = new android.media.session.MediaSession$CallbackStub;

        specialinvoke $r6.<android.media.session.MediaSession$CallbackStub: void <init>(android.media.session.MediaSession)>(r0);

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackStub mCbStub> = $r6;

        $r7 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_session");

        r3 = (android.media.session.MediaSessionManager) $r7;

     label3:
        $r8 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackStub mCbStub>;

        $r9 = virtualinvoke r3.<android.media.session.MediaSessionManager: android.media.session.ISession createSession(android.media.session.MediaSession$CallbackStub,java.lang.String,int)>($r8, r2, i0);

        r0.<android.media.session.MediaSession: android.media.session.ISession mBinder> = $r9;

        $r10 = new android.media.session.MediaSession$Token;

        $r11 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $r12 = interfaceinvoke $r11.<android.media.session.ISession: android.media.session.ISessionController getController()>();

        specialinvoke $r10.<android.media.session.MediaSession$Token: void <init>(android.media.session.ISessionController)>($r12);

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$Token mSessionToken> = $r10;

        $r13 = new android.media.session.MediaController;

        $r15 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$Token mSessionToken>;

        specialinvoke $r13.<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>(r1, $r15);

        r0.<android.media.session.MediaSession: android.media.session.MediaController mController> = $r13;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        r4 = $r16;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Remote error creating session.", r4);

        throw $r18;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setCallback(android.media.session.MediaSession$Callback)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$Callback r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSession$Callback;

        virtualinvoke r0.<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>(r1, null);

        return;
    }

    public void setCallback(android.media.session.MediaSession$Callback, android.os.Handler)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$Callback r1, $r13, $r16;
        android.os.Handler r2, $r11;
        java.lang.Object r3, $r6;
        android.media.session.MediaSession$CallbackMessageHandler r4, $r7, $r9, $r12, $r15, $r17;
        java.lang.Throwable r5, $r18;
        android.os.Looper $r10;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSession$Callback;

        r2 := @parameter1: android.os.Handler;

        $r6 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        if r1 != null goto label04;

        $r15 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if $r15 == null goto label02;

        $r17 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        $r16 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSession$Callback access$000(android.media.session.MediaSession$CallbackMessageHandler)>($r17);

        staticinvoke <android.media.session.MediaSession$Callback: android.media.session.MediaSession access$102(android.media.session.MediaSession$Callback,android.media.session.MediaSession)>($r16, null);

     label02:
        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback> = null;

        exitmonitor r3;

     label03:
        return;

     label04:
        $r7 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if $r7 == null goto label05;

        $r12 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        $r13 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSession$Callback access$000(android.media.session.MediaSession$CallbackMessageHandler)>($r12);

        staticinvoke <android.media.session.MediaSession$Callback: android.media.session.MediaSession access$102(android.media.session.MediaSession$Callback,android.media.session.MediaSession)>($r13, null);

     label05:
        if r2 != null goto label06;

        $r11 = new android.os.Handler;

        specialinvoke $r11.<android.os.Handler: void <init>()>();

        r2 = $r11;

     label06:
        staticinvoke <android.media.session.MediaSession$Callback: android.media.session.MediaSession access$102(android.media.session.MediaSession$Callback,android.media.session.MediaSession)>(r1, r0);

        $r9 = new android.media.session.MediaSession$CallbackMessageHandler;

        $r10 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r9.<android.media.session.MediaSession$CallbackMessageHandler: void <init>(android.media.session.MediaSession,android.os.Looper,android.media.session.MediaSession$Callback)>(r0, $r10, r1);

        r4 = $r9;

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback> = r4;

        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        r5 = $r18;

        exitmonitor r3;

     label09:
        throw r5;

     label10:
        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void setSessionActivity(android.app.PendingIntent)
    {
        android.media.session.MediaSession r0;
        android.app.PendingIntent r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.app.PendingIntent;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setLaunchPendingIntent(android.app.PendingIntent)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setLaunchPendingIntent.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMediaButtonReceiver(android.app.PendingIntent)
    {
        android.media.session.MediaSession r0;
        android.app.PendingIntent r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.app.PendingIntent;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setMediaButtonReceiver(android.app.PendingIntent)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setMediaButtonReceiver.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFlags(int)
    {
        android.media.session.MediaSession r0;
        int i0;
        android.os.RemoteException r1, $r3;
        android.media.session.ISession $r2;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setFlags(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setFlags.", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPlaybackToLocal(android.media.AudioAttributes)
    {
        android.media.session.MediaSession r0;
        android.media.AudioAttributes r1;
        android.os.RemoteException r2, $r5;
        android.media.session.ISession $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.AudioAttributes;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attributes cannot be null for local playback.");

        throw $r4;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setPlaybackToLocal.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPlaybackToRemote(android.media.VolumeProvider)
    {
        android.media.session.MediaSession r0;
        android.media.VolumeProvider r1;
        android.os.RemoteException r2, $r7;
        android.media.session.MediaSession$1 $r3;
        android.media.session.ISession $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.VolumeProvider;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("volumeProvider may not be null!");

        throw $r6;

     label1:
        r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider> = r1;

        $r3 = new android.media.session.MediaSession$1;

        specialinvoke $r3.<android.media.session.MediaSession$1: void <init>(android.media.session.MediaSession)>(r0);

        virtualinvoke r1.<android.media.VolumeProvider: void setCallback(android.media.VolumeProvider$Callback)>($r3);

     label2:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i0 = virtualinvoke r1.<android.media.VolumeProvider: int getVolumeControl()>();

        $i1 = virtualinvoke r1.<android.media.VolumeProvider: int getMaxVolume()>();

        interfaceinvoke $r4.<android.media.session.ISession: void setPlaybackToRemote(int,int)>($i0, $i1);

        $r5 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i2 = virtualinvoke r1.<android.media.VolumeProvider: int getCurrentVolume()>();

        interfaceinvoke $r5.<android.media.session.ISession: void setCurrentVolume(int)>($i2);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setPlaybackToRemote.", r2);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setActive(boolean)
    {
        android.media.session.MediaSession r0;
        boolean z0, $z1;
        android.os.RemoteException r1, $r3;
        android.media.session.ISession $r2;

        r0 := @this: android.media.session.MediaSession;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.session.MediaSession: boolean mActive>;

        if $z1 != z0 goto label1;

        return;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setActive(boolean)>(z0);

        r0.<android.media.session.MediaSession: boolean mActive> = z0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setActive.", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActive()
    {
        android.media.session.MediaSession r0;
        boolean $z0;

        r0 := @this: android.media.session.MediaSession;

        $z0 = r0.<android.media.session.MediaSession: boolean mActive>;

        return $z0;
    }

    public void sendSessionEvent(java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.os.RemoteException r3, $r6;
        boolean $z0;
        android.media.session.ISession $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event cannot be null or empty");

        throw $r5;

     label1:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r4.<android.media.session.ISession: void sendEvent(java.lang.String,android.os.Bundle)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error sending event", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void release()
    {
        android.media.session.MediaSession r0;
        android.os.RemoteException r1, $r3;
        android.media.session.ISession $r2;

        r0 := @this: android.media.session.MediaSession;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void destroy()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error releasing session: ", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.session.MediaSession$Token getSessionToken()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$Token $r1;

        r0 := @this: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$Token mSessionToken>;

        return $r1;
    }

    public android.media.session.MediaController getController()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaController $r1;

        r0 := @this: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.MediaController mController>;

        return $r1;
    }

    public void setPlaybackState(android.media.session.PlaybackState)
    {
        android.media.session.MediaSession r0;
        android.media.session.PlaybackState r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.PlaybackState;

        r0.<android.media.session.MediaSession: android.media.session.PlaybackState mPlaybackState> = r1;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setPlaybackState(android.media.session.PlaybackState)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Dead object in setPlaybackState.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMetadata(android.media.MediaMetadata)
    {
        android.media.session.MediaSession r0;
        android.media.MediaMetadata r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.MediaMetadata;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setMetadata(android.media.MediaMetadata)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Dead object in setPlaybackState.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setQueue(java.util.List)
    {
        android.media.session.MediaSession r0;
        java.util.List r1;
        android.os.RemoteException r2, $r5;
        android.content.pm.ParceledListSlice $r3;
        android.media.session.ISession $r4;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.util.List;

     label1:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        if r1 != null goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = new android.content.pm.ParceledListSlice;

        specialinvoke $r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r1);

     label3:
        interfaceinvoke $r4.<android.media.session.ISession: void setQueue(android.content.pm.ParceledListSlice)>($r3);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setQueue.", r2);

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    public void setQueueTitle(java.lang.CharSequence)
    {
        android.media.session.MediaSession r0;
        java.lang.CharSequence r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.CharSequence;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setQueueTitle(java.lang.CharSequence)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setQueueTitle.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setExtras(android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.os.Bundle r1;
        android.os.RemoteException r2, $r4;
        android.media.session.ISession $r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.os.Bundle;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void setExtras(android.os.Bundle)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setExtras.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyRemoteVolumeChanged(android.media.VolumeProvider)
    {
        android.media.session.MediaSession r0;
        android.media.VolumeProvider r1, $r3;
        android.os.RemoteException r2, $r5;
        android.media.session.ISession $r4;
        int $i1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.VolumeProvider;

        if r1 == null goto label1;

        $r3 = r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider>;

        if r1 == $r3 goto label2;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaSession", "Received update from stale volume provider");

        return;

     label2:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i1 = virtualinvoke r1.<android.media.VolumeProvider: int getCurrentVolume()>();

        interfaceinvoke $r4.<android.media.session.ISession: void setCurrentVolume(int)>($i1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error in notifyVolumeChanged", r2);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void dispatchPlay()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(1);

        return;
    }

    private void dispatchPlayFromMediaId(java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object,android.os.Bundle)>(2, r1, r2);

        return;
    }

    private void dispatchPlayFromSearch(java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object,android.os.Bundle)>(3, r1, r2);

        return;
    }

    private void dispatchSkipToItem(long)
    {
        android.media.session.MediaSession r0;
        long l0;
        java.lang.Long $r1;

        r0 := @this: android.media.session.MediaSession;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(4, $r1);

        return;
    }

    private void dispatchPause()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(5);

        return;
    }

    private void dispatchStop()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(6);

        return;
    }

    private void dispatchNext()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(7);

        return;
    }

    private void dispatchPrevious()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(8);

        return;
    }

    private void dispatchFastForward()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(9);

        return;
    }

    private void dispatchRewind()
    {
        android.media.session.MediaSession r0;

        r0 := @this: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int)>(10);

        return;
    }

    private void dispatchSeekTo(long)
    {
        android.media.session.MediaSession r0;
        long l0;
        java.lang.Long $r1;

        r0 := @this: android.media.session.MediaSession;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(11, $r1);

        return;
    }

    private void dispatchRate(android.media.Rating)
    {
        android.media.session.MediaSession r0;
        android.media.Rating r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.Rating;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(12, r1);

        return;
    }

    private void dispatchCustomAction(java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object,android.os.Bundle)>(13, r1, r2);

        return;
    }

    private void dispatchMediaButton(android.content.Intent)
    {
        android.media.session.MediaSession r0;
        android.content.Intent r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(14, r1);

        return;
    }

    private void postToCallback(int)
    {
        android.media.session.MediaSession r0;
        int i0;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(i0, null);

        return;
    }

    private void postCommand(java.lang.String, android.os.Bundle, android.os.ResultReceiver)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.os.ResultReceiver r3;
        android.media.session.MediaSession$Command r4, $r5;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.ResultReceiver;

        $r5 = new android.media.session.MediaSession$Command;

        specialinvoke $r5.<android.media.session.MediaSession$Command: void <init>(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>(r1, r2, r3);

        r4 = $r5;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object)>(15, r4);

        return;
    }

    private void postToCallback(int, java.lang.Object)
    {
        android.media.session.MediaSession r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<android.media.session.MediaSession: void postToCallback(int,java.lang.Object,android.os.Bundle)>(i0, r1, null);

        return;
    }

    private void postToCallback(int, java.lang.Object, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        int i0;
        java.lang.Object r1, r3, $r5;
        android.os.Bundle r2;
        java.lang.Throwable r4, $r8;
        android.media.session.MediaSession$CallbackMessageHandler $r6, $r7;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: android.os.Bundle;

        $r5 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if $r6 == null goto label2;

        $r7 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        virtualinvoke $r7.<android.media.session.MediaSession$CallbackMessageHandler: void post(int,java.lang.Object,android.os.Bundle)>(i0, r1, r2);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean isActiveState(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    static android.media.session.PlaybackState access$200(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;
        android.media.session.PlaybackState $r1;

        r0 := @parameter0: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.PlaybackState mPlaybackState>;

        return $r1;
    }

    static void access$300(android.media.session.MediaSession, java.lang.String, android.os.Bundle, android.os.ResultReceiver)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.os.ResultReceiver r3;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.os.ResultReceiver;

        specialinvoke r0.<android.media.session.MediaSession: void postCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>(r1, r2, r3);

        return;
    }

    static void access$400(android.media.session.MediaSession, android.content.Intent)
    {
        android.media.session.MediaSession r0;
        android.content.Intent r1;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchMediaButton(android.content.Intent)>(r1);

        return;
    }

    static void access$500(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchPlay()>();

        return;
    }

    static void access$600(android.media.session.MediaSession, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchPlayFromMediaId(java.lang.String,android.os.Bundle)>(r1, r2);

        return;
    }

    static void access$700(android.media.session.MediaSession, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchPlayFromSearch(java.lang.String,android.os.Bundle)>(r1, r2);

        return;
    }

    static void access$800(android.media.session.MediaSession, long)
    {
        android.media.session.MediaSession r0;
        long l0;

        r0 := @parameter0: android.media.session.MediaSession;

        l0 := @parameter1: long;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchSkipToItem(long)>(l0);

        return;
    }

    static void access$900(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchPause()>();

        return;
    }

    static void access$1000(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchStop()>();

        return;
    }

    static void access$1100(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchNext()>();

        return;
    }

    static void access$1200(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchPrevious()>();

        return;
    }

    static void access$1300(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchFastForward()>();

        return;
    }

    static void access$1400(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;

        r0 := @parameter0: android.media.session.MediaSession;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchRewind()>();

        return;
    }

    static void access$1500(android.media.session.MediaSession, long)
    {
        android.media.session.MediaSession r0;
        long l0;

        r0 := @parameter0: android.media.session.MediaSession;

        l0 := @parameter1: long;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchSeekTo(long)>(l0);

        return;
    }

    static void access$1600(android.media.session.MediaSession, android.media.Rating)
    {
        android.media.session.MediaSession r0;
        android.media.Rating r1;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: android.media.Rating;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchRate(android.media.Rating)>(r1);

        return;
    }

    static void access$1700(android.media.session.MediaSession, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.media.session.MediaSession;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaSession: void dispatchCustomAction(java.lang.String,android.os.Bundle)>(r1, r2);

        return;
    }

    static android.media.VolumeProvider access$1800(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;
        android.media.VolumeProvider $r1;

        r0 := @parameter0: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.media.session.MediaSession: int FLAG_EXCLUSIVE_GLOBAL_PRIORITY> = 65536;

        <android.media.session.MediaSession: int FLAG_HANDLES_TRANSPORT_CONTROLS> = 2;

        <android.media.session.MediaSession: int FLAG_HANDLES_MEDIA_BUTTONS> = 1;

        <android.media.session.MediaSession: java.lang.String TAG> = "MediaSession";

        return;
    }
}
