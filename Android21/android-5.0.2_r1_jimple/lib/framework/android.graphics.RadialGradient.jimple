public class android.graphics.RadialGradient extends android.graphics.Shader
{
    private static final int TYPE_COLORS_AND_POSITIONS;
    private static final int TYPE_COLOR_CENTER_AND_COLOR_EDGE;
    private int mType;
    private float mX;
    private float mY;
    private float mRadius;
    private int[] mColors;
    private float[] mPositions;
    private int mCenterColor;
    private int mEdgeColor;
    private android.graphics.Shader$TileMode mTileMode;

    public void <init>(float, float, float, int[], float[], android.graphics.Shader$TileMode)
    {
        android.graphics.RadialGradient r0;
        float f0, f1, f2;
        int[] r1;
        float[] r2;
        android.graphics.Shader$TileMode r3;
        byte $b0;
        int $i1, $i2, $i4, $i5;
        long $l3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: android.graphics.RadialGradient;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: int[];

        r2 := @parameter4: float[];

        r3 := @parameter5: android.graphics.Shader$TileMode;

        specialinvoke r0.<android.graphics.Shader: void <init>()>();

        $b0 = f2 cmpg 0.0F;

        if $b0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("radius must be > 0");

        throw $r6;

     label1:
        $i1 = lengthof r1;

        if $i1 >= 2 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("needs >= 2 number of colors");

        throw $r5;

     label2:
        if r2 == null goto label3;

        $i5 = lengthof r1;

        $i4 = lengthof r2;

        if $i5 == $i4 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("color and position arrays must be of equal length");

        throw $r4;

     label3:
        r0.<android.graphics.RadialGradient: int mType> = 1;

        r0.<android.graphics.RadialGradient: float mX> = f0;

        r0.<android.graphics.RadialGradient: float mY> = f1;

        r0.<android.graphics.RadialGradient: float mRadius> = f2;

        r0.<android.graphics.RadialGradient: int[] mColors> = r1;

        r0.<android.graphics.RadialGradient: float[] mPositions> = r2;

        r0.<android.graphics.RadialGradient: android.graphics.Shader$TileMode mTileMode> = r3;

        $i2 = r3.<android.graphics.Shader$TileMode: int nativeInt>;

        $l3 = staticinvoke <android.graphics.RadialGradient: long nativeCreate1(float,float,float,int[],float[],int)>(f0, f1, f2, r1, r2, $i2);

        virtualinvoke r0.<android.graphics.RadialGradient: void init(long)>($l3);

        return;
    }

    public void <init>(float, float, float, int, int, android.graphics.Shader$TileMode)
    {
        android.graphics.RadialGradient r0;
        float f0, f1, f2;
        int i0, i1, $i3;
        android.graphics.Shader$TileMode r1;
        byte $b2;
        long $l4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.RadialGradient;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r1 := @parameter5: android.graphics.Shader$TileMode;

        specialinvoke r0.<android.graphics.Shader: void <init>()>();

        $b2 = f2 cmpg 0.0F;

        if $b2 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("radius must be > 0");

        throw $r2;

     label1:
        r0.<android.graphics.RadialGradient: int mType> = 2;

        r0.<android.graphics.RadialGradient: float mX> = f0;

        r0.<android.graphics.RadialGradient: float mY> = f1;

        r0.<android.graphics.RadialGradient: float mRadius> = f2;

        r0.<android.graphics.RadialGradient: int mCenterColor> = i0;

        r0.<android.graphics.RadialGradient: int mEdgeColor> = i1;

        r0.<android.graphics.RadialGradient: android.graphics.Shader$TileMode mTileMode> = r1;

        $i3 = r1.<android.graphics.Shader$TileMode: int nativeInt>;

        $l4 = staticinvoke <android.graphics.RadialGradient: long nativeCreate2(float,float,float,int,int,int)>(f0, f1, f2, i0, i1, $i3);

        virtualinvoke r0.<android.graphics.RadialGradient: void init(long)>($l4);

        return;
    }

    protected android.graphics.Shader copy()
    {
        android.graphics.RadialGradient r0, r1, $r2, $r4;
        int $i0, $i1, $i2;
        android.graphics.Shader$TileMode $r3, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int[] $r5, $r10;
        java.lang.Object $r6, $r12;
        float[] $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: android.graphics.RadialGradient;

        $i0 = r0.<android.graphics.RadialGradient: int mType>;

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = new android.graphics.RadialGradient;

        $f3 = r0.<android.graphics.RadialGradient: float mX>;

        $f4 = r0.<android.graphics.RadialGradient: float mY>;

        $f5 = r0.<android.graphics.RadialGradient: float mRadius>;

        $r5 = r0.<android.graphics.RadialGradient: int[] mColors>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (int[]) $r6;

        $r8 = r0.<android.graphics.RadialGradient: float[] mPositions>;

        if $r8 == null goto label2;

        $r9 = r0.<android.graphics.RadialGradient: float[] mPositions>;

        $r12 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (float[]) $r12;

        goto label3;

     label2:
        $r11 = null;

     label3:
        $r7 = r0.<android.graphics.RadialGradient: android.graphics.Shader$TileMode mTileMode>;

        specialinvoke $r4.<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>($f3, $f4, $f5, $r10, $r11, $r7);

        r1 = $r4;

        goto label6;

     label4:
        $r2 = new android.graphics.RadialGradient;

        $f2 = r0.<android.graphics.RadialGradient: float mX>;

        $f1 = r0.<android.graphics.RadialGradient: float mY>;

        $f0 = r0.<android.graphics.RadialGradient: float mRadius>;

        $i2 = r0.<android.graphics.RadialGradient: int mCenterColor>;

        $i1 = r0.<android.graphics.RadialGradient: int mEdgeColor>;

        $r3 = r0.<android.graphics.RadialGradient: android.graphics.Shader$TileMode mTileMode>;

        specialinvoke $r2.<android.graphics.RadialGradient: void <init>(float,float,float,int,int,android.graphics.Shader$TileMode)>($f2, $f1, $f0, $i2, $i1, $r3);

        r1 = $r2;

        goto label6;

     label5:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RadialGradient should be created with either colors and positions or center color and edge color");

        throw $r13;

     label6:
        virtualinvoke r0.<android.graphics.RadialGradient: void copyLocalMatrix(android.graphics.Shader)>(r1);

        return r1;
    }

    private static native long nativeCreate1(float, float, float, int[], float[], int);

    private static native long nativeCreate2(float, float, float, int, int, int);

    public static void <clinit>()
    {
        <android.graphics.RadialGradient: int TYPE_COLOR_CENTER_AND_COLOR_EDGE> = 2;

        <android.graphics.RadialGradient: int TYPE_COLORS_AND_POSITIONS> = 1;

        return;
    }
}
