public class android.graphics.Typeface extends java.lang.Object
{
    private static java.lang.String TAG;
    public static final android.graphics.Typeface DEFAULT;
    public static final android.graphics.Typeface DEFAULT_BOLD;
    public static final android.graphics.Typeface SANS_SERIF;
    public static final android.graphics.Typeface SERIF;
    public static final android.graphics.Typeface MONOSPACE;
    static android.graphics.Typeface[] sDefaults;
    private static final android.util.LongSparseArray sTypefaceCache;
    static android.graphics.Typeface sDefaultTypeface;
    static java.util.Map sSystemFontMap;
    static android.graphics.FontFamily[] sFallbackFonts;
    static final java.lang.String FONTS_CONFIG;
    public long native_instance;
    public static final int NORMAL;
    public static final int BOLD;
    public static final int ITALIC;
    public static final int BOLD_ITALIC;
    private int mStyle;

    private static void setDefault(android.graphics.Typeface)
    {
        android.graphics.Typeface r0;
        long $l0;

        r0 := @parameter0: android.graphics.Typeface;

        <android.graphics.Typeface: android.graphics.Typeface sDefaultTypeface> = r0;

        $l0 = r0.<android.graphics.Typeface: long native_instance>;

        staticinvoke <android.graphics.Typeface: void nativeSetDefault(long)>($l0);

        return;
    }

    public int getStyle()
    {
        android.graphics.Typeface r0;
        int $i0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        return $i0;
    }

    public final boolean isBold()
    {
        android.graphics.Typeface r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isItalic()
    {
        android.graphics.Typeface r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.Typeface;

        $i0 = r0.<android.graphics.Typeface: int mStyle>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static android.graphics.Typeface create(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        java.util.Map $r1, $r2;
        java.lang.Object $r3;
        android.graphics.Typeface $r4, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = <android.graphics.Typeface: java.util.Map sSystemFontMap>;

        if $r1 == null goto label1;

        $r2 = <android.graphics.Typeface: java.util.Map sSystemFontMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (android.graphics.Typeface) $r3;

        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>($r4, i0);

        return $r5;

     label1:
        return null;
    }

    public static android.graphics.Typeface create(android.graphics.Typeface, int)
    {
        android.graphics.Typeface r0, r1, $r5, r9;
        int i0, $i3;
        long l1, $l2;
        android.util.SparseArray r2, $r6;
        android.util.LongSparseArray $r3, $r7;
        java.lang.Object $r4, $r8;

        r0 := @parameter0: android.graphics.Typeface;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 3 goto label2;

     label1:
        i0 = 0;

     label2:
        l1 = 0L;

        if r0 == null goto label4;

        $i3 = r0.<android.graphics.Typeface: int mStyle>;

        if $i3 != i0 goto label3;

        return r0;

     label3:
        l1 = r0.<android.graphics.Typeface: long native_instance>;

     label4:
        $r3 = <android.graphics.Typeface: android.util.LongSparseArray sTypefaceCache>;

        $r4 = virtualinvoke $r3.<android.util.LongSparseArray: java.lang.Object get(long)>(l1);

        r2 = (android.util.SparseArray) $r4;

        if r2 == null goto label5;

        $r8 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.graphics.Typeface) $r8;

        if r1 == null goto label5;

        return r1;

     label5:
        $r5 = new android.graphics.Typeface;

        $l2 = staticinvoke <android.graphics.Typeface: long nativeCreateFromTypeface(long,int)>(l1, i0);

        specialinvoke $r5.<android.graphics.Typeface: void <init>(long)>($l2);

        r9 = $r5;

        if r2 != null goto label6;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>(int)>(4);

        r2 = $r6;

        $r7 = <android.graphics.Typeface: android.util.LongSparseArray sTypefaceCache>;

        virtualinvoke $r7.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l1, r2);

     label6:
        virtualinvoke r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9);

        return r9;
    }

    public static android.graphics.Typeface defaultFromStyle(int)
    {
        int i0;
        android.graphics.Typeface[] $r0;
        android.graphics.Typeface $r1;

        i0 := @parameter0: int;

        $r0 = <android.graphics.Typeface: android.graphics.Typeface[] sDefaults>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static android.graphics.Typeface createFromAsset(android.content.res.AssetManager, java.lang.String)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1, $r9;
        android.graphics.FontFamily r2, $r10;
        android.graphics.FontFamily[] r3, $r4, $r11;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;
        android.graphics.Typeface $r12;

        r0 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        $r4 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        if $r4 == null goto label1;

        $r10 = new android.graphics.FontFamily;

        specialinvoke $r10.<android.graphics.FontFamily: void <init>()>();

        r2 = $r10;

        $z0 = virtualinvoke r2.<android.graphics.FontFamily: boolean addFontFromAsset(android.content.res.AssetManager,java.lang.String)>(r0, r1);

        if $z0 == 0 goto label1;

        $r11 = newarray (android.graphics.FontFamily)[1];

        $r11[0] = r2;

        r3 = $r11;

        $r12 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[])>(r3);

        return $r12;

     label1:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font asset not found ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public static android.graphics.Typeface createFromFile(java.io.File)
    {
        java.io.File r0;
        java.lang.String $r1;
        android.graphics.Typeface $r2;

        r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r1);

        return $r2;
    }

    public static android.graphics.Typeface createFromFile(java.lang.String)
    {
        java.lang.String r0, $r8;
        android.graphics.FontFamily r1, $r9;
        android.graphics.FontFamily[] r2, $r3, $r10;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        boolean $z0;
        android.graphics.Typeface $r11;

        r0 := @parameter0: java.lang.String;

        $r3 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        if $r3 == null goto label1;

        $r9 = new android.graphics.FontFamily;

        specialinvoke $r9.<android.graphics.FontFamily: void <init>()>();

        r1 = $r9;

        $z0 = virtualinvoke r1.<android.graphics.FontFamily: boolean addFont(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r10 = newarray (android.graphics.FontFamily)[1];

        $r10[0] = r1;

        r2 = $r10;

        $r11 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[])>(r2);

        return $r11;

     label1:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font not found ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static android.graphics.Typeface createFromFamilies(android.graphics.FontFamily[])
    {
        android.graphics.FontFamily[] r0;
        long[] r1;
        int i0, $i1, $i2;
        android.graphics.Typeface $r2;
        long $l3, $l4;
        android.graphics.FontFamily $r3;

        r0 := @parameter0: android.graphics.FontFamily[];

        $i1 = lengthof r0;

        r1 = newarray (long)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r3 = r0[i0];

        $l4 = $r3.<android.graphics.FontFamily: long mNativePtr>;

        r1[i0] = $l4;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = new android.graphics.Typeface;

        $l3 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[])>(r1);

        specialinvoke $r2.<android.graphics.Typeface: void <init>(long)>($l3);

        return $r2;
    }

    public static android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[])
    {
        android.graphics.FontFamily[] r0, $r2, $r3, $r5;
        long[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, i11;
        android.graphics.Typeface $r4;
        long $l6, $l8, $l10;
        android.graphics.FontFamily $r6, $r7;

        r0 := @parameter0: android.graphics.FontFamily[];

        $i2 = lengthof r0;

        $r2 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        $i1 = lengthof $r2;

        $i3 = $i2 + $i1;

        r1 = newarray (long)[$i3];

        i0 = 0;

     label1:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label2;

        $r7 = r0[i0];

        $l10 = $r7.<android.graphics.FontFamily: long mNativePtr>;

        r1[i0] = $l10;

        i0 = i0 + 1;

        goto label1;

     label2:
        i11 = 0;

     label3:
        $r3 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        $i5 = lengthof $r3;

        if i11 >= $i5 goto label4;

        $i7 = lengthof r0;

        $i9 = i11 + $i7;

        $r5 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        $r6 = $r5[i11];

        $l8 = $r6.<android.graphics.FontFamily: long mNativePtr>;

        r1[$i9] = $l8;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r4 = new android.graphics.Typeface;

        $l6 = staticinvoke <android.graphics.Typeface: long nativeCreateFromArray(long[])>(r1);

        specialinvoke $r4.<android.graphics.Typeface: void <init>(long)>($l6);

        return $r4;
    }

    private void <init>(long)
    {
        android.graphics.Typeface r0;
        long l0;
        byte $b1;
        int $i2;
        java.lang.RuntimeException $r1;

        r0 := @this: android.graphics.Typeface;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.Typeface: int mStyle> = 0;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("native typeface cannot be made");

        throw $r1;

     label1:
        r0.<android.graphics.Typeface: long native_instance> = l0;

        $i2 = staticinvoke <android.graphics.Typeface: int nativeGetStyle(long)>(l0);

        r0.<android.graphics.Typeface: int mStyle> = $i2;

        return;
    }

    private static android.graphics.FontFamily makeFamilyFromParsed(android.graphics.FontListParser$Family)
    {
        android.graphics.FontListParser$Family r0;
        android.graphics.FontFamily r1, $r4;
        java.util.Iterator r2;
        android.graphics.FontListParser$Font r3;
        java.lang.String $r5, $r6, $r9;
        java.util.List $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        int $i0;

        r0 := @parameter0: android.graphics.FontListParser$Family;

        $r4 = new android.graphics.FontFamily;

        $r6 = r0.<android.graphics.FontListParser$Family: java.lang.String lang>;

        $r5 = r0.<android.graphics.FontListParser$Family: java.lang.String variant>;

        specialinvoke $r4.<android.graphics.FontFamily: void <init>(java.lang.String,java.lang.String)>($r6, $r5);

        r1 = $r4;

        $r7 = r0.<android.graphics.FontListParser$Family: java.util.List fonts>;

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.graphics.FontListParser$Font) $r8;

        $r9 = r3.<android.graphics.FontListParser$Font: java.lang.String fontName>;

        $i0 = r3.<android.graphics.FontListParser$Font: int weight>;

        $z1 = r3.<android.graphics.FontListParser$Font: boolean isItalic>;

        virtualinvoke r1.<android.graphics.FontFamily: boolean addFontWeightStyle(java.lang.String,int,boolean)>($r9, $i0, $z1);

        goto label1;

     label2:
        return r1;
    }

    private static void init()
    {
        java.io.File r0, r1, $r10;
        java.io.FileInputStream r2, $r11;
        android.graphics.FontListParser$Config r3;
        java.util.ArrayList r4, $r12;
        int i0, $i1, $i2, $i3, i10, i11;
        android.graphics.FontListParser$Family r5, r7;
        android.graphics.Typeface r6, $r17, $r25, r61, r62;
        android.graphics.FontFamily r8, $r38;
        android.graphics.FontFamily[] r9, $r14, $r15, $r18, $r30;
        java.util.List $r13, $r19, $r21, $r28, $r32;
        java.lang.Object[] $r16;
        java.util.HashMap $r20, r58;
        boolean $z0;
        java.lang.String $r22, $r27, $r31, $r34, $r37, $r41, $r45, $r46, $r49, $r52, $r55, $r57;
        java.lang.Object $r23, $r26, $r29, $r33;
        long $l4, $l5;
        java.io.FileNotFoundException $r36;
        java.lang.StringBuilder $r39, $r40, $r42, $r43, $r47, $r48, $r51, $r53, $r56;
        java.io.IOException $r44;
        org.xmlpull.v1.XmlPullParserException $r50;
        java.lang.RuntimeException $r54, r63;
        java.util.Iterator r59;
        android.graphics.FontListParser$Alias r60;

        r0 = staticinvoke <android.graphics.Typeface: java.io.File getSystemFontConfigLocation()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "fonts.xml");

        r1 = $r10;

     label01:
        $r11 = new java.io.FileInputStream;

        specialinvoke $r11.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r2 = $r11;

        r3 = staticinvoke <android.graphics.FontListParser: android.graphics.FontListParser$Config parse(java.io.InputStream)>(r2);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r4 = $r12;

        i0 = 0;

     label02:
        $r13 = r3.<android.graphics.FontListParser$Config: java.util.List families>;

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i0 >= $i1 goto label05;

        $r32 = r3.<android.graphics.FontListParser$Config: java.util.List families>;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (android.graphics.FontListParser$Family) $r33;

        if i0 == 0 goto label03;

        $r37 = r5.<android.graphics.FontListParser$Family: java.lang.String name>;

        if $r37 != null goto label04;

     label03:
        $r38 = staticinvoke <android.graphics.Typeface: android.graphics.FontFamily makeFamilyFromParsed(android.graphics.FontListParser$Family)>(r5);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r38);

     label04:
        i0 = i0 + 1;

        goto label02;

     label05:
        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        $r14 = newarray (android.graphics.FontFamily)[$i2];

        $r16 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r15 = (android.graphics.FontFamily[]) $r16;

        <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts> = $r15;

        $r18 = <android.graphics.Typeface: android.graphics.FontFamily[] sFallbackFonts>;

        $r17 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamilies(android.graphics.FontFamily[])>($r18);

        staticinvoke <android.graphics.Typeface: void setDefault(android.graphics.Typeface)>($r17);

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        r58 = $r20;

        i10 = 0;

     label06:
        $r19 = r3.<android.graphics.FontListParser$Config: java.util.List families>;

        $i3 = interfaceinvoke $r19.<java.util.List: int size()>();

        if i10 >= $i3 goto label10;

        $r28 = r3.<android.graphics.FontListParser$Config: java.util.List families>;

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i10);

        r7 = (android.graphics.FontListParser$Family) $r29;

        $r31 = r7.<android.graphics.FontListParser$Family: java.lang.String name>;

        if $r31 == null goto label09;

        if i10 != 0 goto label07;

        r6 = <android.graphics.Typeface: android.graphics.Typeface sDefaultTypeface>;

        goto label08;

     label07:
        r8 = staticinvoke <android.graphics.Typeface: android.graphics.FontFamily makeFamilyFromParsed(android.graphics.FontListParser$Family)>(r7);

        $r30 = newarray (android.graphics.FontFamily)[1];

        $r30[0] = r8;

        r9 = $r30;

        r6 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[])>(r9);

     label08:
        $r34 = r7.<android.graphics.FontListParser$Family: java.lang.String name>;

        interfaceinvoke r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r6);

     label09:
        i10 = i10 + 1;

        goto label06;

     label10:
        $r21 = r3.<android.graphics.FontListParser$Config: java.util.List aliases>;

        r59 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r23 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (android.graphics.FontListParser$Alias) $r23;

        $r22 = r60.<android.graphics.FontListParser$Alias: java.lang.String toName>;

        $r26 = interfaceinvoke r58.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        r61 = (android.graphics.Typeface) $r26;

        r62 = r61;

        i11 = r60.<android.graphics.FontListParser$Alias: int weight>;

        if i11 == 400 goto label12;

        $r25 = new android.graphics.Typeface;

        $l4 = r61.<android.graphics.Typeface: long native_instance>;

        $l5 = staticinvoke <android.graphics.Typeface: long nativeCreateWeightAlias(long,int)>($l4, i11);

        specialinvoke $r25.<android.graphics.Typeface: void <init>(long)>($l5);

        r62 = $r25;

     label12:
        $r27 = r60.<android.graphics.FontListParser$Alias: java.lang.String name>;

        interfaceinvoke r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, r62);

        goto label11;

     label13:
        <android.graphics.Typeface: java.util.Map sSystemFontMap> = r58;

     label14:
        goto label19;

     label15:
        $r54 := @caughtexception;

        r63 = $r54;

        $r55 = <android.graphics.Typeface: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r55, "Didn\'t create default family (most likely, non-Minikin build)", r63);

        goto label19;

     label16:
        $r36 := @caughtexception;

        $r41 = <android.graphics.Typeface: java.lang.String TAG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r41, $r45);

        goto label19;

     label17:
        $r44 := @caughtexception;

        $r49 = <android.graphics.Typeface: java.lang.String TAG>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r49, $r46);

        goto label19;

     label18:
        $r50 := @caughtexception;

        $r52 = <android.graphics.Typeface: java.lang.String TAG>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("XML parse exception for ");

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r52, $r57);

     label19:
        return;

        catch java.lang.RuntimeException from label01 to label14 with label15;
        catch java.io.FileNotFoundException from label01 to label14 with label16;
        catch java.io.IOException from label01 to label14 with label17;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label14 with label18;
    }

    private static java.io.File getSystemFontConfigLocation()
    {
        java.io.File $r0;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>("/system/etc/");

        return $r0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.Typeface r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: android.graphics.Typeface;

     label1:
        $l0 = r0.<android.graphics.Typeface: long native_instance>;

        staticinvoke <android.graphics.Typeface: void nativeUnref(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        android.graphics.Typeface r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        boolean $z0;

        r0 := @this: android.graphics.Typeface;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (android.graphics.Typeface) r1;

        $i1 = r0.<android.graphics.Typeface: int mStyle>;

        $i0 = r2.<android.graphics.Typeface: int mStyle>;

        if $i1 != $i0 goto label4;

        $l3 = r0.<android.graphics.Typeface: long native_instance>;

        $l2 = r2.<android.graphics.Typeface: long native_instance>;

        $b4 = $l3 cmp $l2;

        if $b4 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        android.graphics.Typeface r0;
        byte b0;
        long $l1, $l2, $l3, $l4;
        int $i5, $i6, $i7, $i8, i9, i10;

        r0 := @this: android.graphics.Typeface;

        b0 = 17;

        $i6 = 31 * b0;

        $l3 = r0.<android.graphics.Typeface: long native_instance>;

        $l1 = r0.<android.graphics.Typeface: long native_instance>;

        $l2 = $l1 >>> 32;

        $l4 = $l3 ^ $l2;

        $i5 = (int) $l4;

        i9 = $i6 + $i5;

        $i8 = 31 * i9;

        $i7 = r0.<android.graphics.Typeface: int mStyle>;

        i10 = $i8 + $i7;

        return i10;
    }

    private static native long nativeCreateFromTypeface(long, int);

    private static native long nativeCreateWeightAlias(long, int);

    private static native void nativeUnref(long);

    private static native int nativeGetStyle(long);

    private static native long nativeCreateFromArray(long[]);

    private static native void nativeSetDefault(long);

    static void <clinit>()
    {
        android.util.LongSparseArray $r0;
        java.lang.String $r1, $r3, $r11, $r13;
        android.graphics.Typeface $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r14;
        android.graphics.Typeface[] $r8;

        <android.graphics.Typeface: int BOLD_ITALIC> = 3;

        <android.graphics.Typeface: int ITALIC> = 2;

        <android.graphics.Typeface: int BOLD> = 1;

        <android.graphics.Typeface: int NORMAL> = 0;

        <android.graphics.Typeface: java.lang.String FONTS_CONFIG> = "fonts.xml";

        <android.graphics.Typeface: java.lang.String TAG> = "Typeface";

        $r0 = new android.util.LongSparseArray;

        specialinvoke $r0.<android.util.LongSparseArray: void <init>(int)>(3);

        <android.graphics.Typeface: android.util.LongSparseArray sTypefaceCache> = $r0;

        staticinvoke <android.graphics.Typeface: void init()>();

        $r1 = (java.lang.String) null;

        $r2 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r1, 0);

        <android.graphics.Typeface: android.graphics.Typeface DEFAULT> = $r2;

        $r3 = (java.lang.String) null;

        $r4 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r3, 1);

        <android.graphics.Typeface: android.graphics.Typeface DEFAULT_BOLD> = $r4;

        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("sans-serif", 0);

        <android.graphics.Typeface: android.graphics.Typeface SANS_SERIF> = $r5;

        $r6 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("serif", 0);

        <android.graphics.Typeface: android.graphics.Typeface SERIF> = $r6;

        $r7 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("monospace", 0);

        <android.graphics.Typeface: android.graphics.Typeface MONOSPACE> = $r7;

        $r8 = newarray (android.graphics.Typeface)[4];

        $r9 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

        $r8[0] = $r9;

        $r10 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT_BOLD>;

        $r8[1] = $r10;

        $r11 = (java.lang.String) null;

        $r12 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r11, 2);

        $r8[2] = $r12;

        $r13 = (java.lang.String) null;

        $r14 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r13, 3);

        $r8[3] = $r14;

        <android.graphics.Typeface: android.graphics.Typeface[] sDefaults> = $r8;

        return;
    }
}
