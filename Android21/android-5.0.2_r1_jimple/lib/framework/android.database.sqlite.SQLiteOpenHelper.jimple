public abstract class android.database.sqlite.SQLiteOpenHelper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG_STRICT_READONLY;
    private final android.content.Context mContext;
    private final java.lang.String mName;
    private final android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private final int mNewVersion;
    private android.database.sqlite.SQLiteDatabase mDatabase;
    private boolean mIsInitializing;
    private boolean mEnableWriteAheadLogging;
    private final android.database.DatabaseErrorHandler mErrorHandler;

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r1, r2, r3, i0, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2, $r9;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;
        android.database.DatabaseErrorHandler r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        r4 := @parameter4: android.database.DatabaseErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version must be >= 1, was ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext> = r1;

        r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName> = r2;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = r3;

        r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion> = i0;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler> = r4;

        return;
    }

    public java.lang.String getDatabaseName()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        return $r1;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0, r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r2, $r9;
        android.database.sqlite.SQLiteDatabase $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        r1 = r0;

        entermonitor r0;

     label1:
        $z1 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

        if $z1 == z0 goto label4;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 == null goto label3;

        $r5 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z2 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z2 == 0 goto label3;

        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z3 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z3 != 0 goto label3;

        if z0 == 0 goto label2;

        $r8 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>();

        goto label3;

     label2:
        $r7 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

     label3:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging> = z0;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.database.sqlite.SQLiteDatabase getWritableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0, r1;
        java.lang.Throwable r2, $r5;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(1);

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.database.sqlite.SQLiteDatabase getReadableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0, r1;
        java.lang.Throwable r2, $r5;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(0);

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.database.sqlite.SQLiteDatabase r1, $r6, $r12, $r30, $r31, $r35, $r49, r50;
        android.database.sqlite.SQLiteException r2, $r22, $r34;
        java.lang.String r3, $r7, $r10, $r13, $r15, $r19, $r25, $r29, $r37, $r39, $r40, $r41;
        java.lang.Throwable r4, r5, $r44, $r45;
        android.database.DatabaseErrorHandler $r8, $r48;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r9, $r43;
        android.content.Context $r11, $r46;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, i10;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r28, $r33, $r36, $r38, $r42;
        byte $b8;
        java.lang.IllegalStateException $r32;
        java.io.File $r47;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r6 == null goto label03;

        $r31 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z6 = virtualinvoke $r31.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z6 != 0 goto label01;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

        goto label03;

     label01:
        if z0 == 0 goto label02;

        $r35 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z7 = virtualinvoke $r35.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z7 != 0 goto label03;

     label02:
        $r30 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        return $r30;

     label03:
        $z1 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z1 == 0 goto label04;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getDatabase called recursively");

        throw $r32;

     label04:
        r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

     label05:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 1;

        if r1 == null goto label06;

        if z0 == 0 goto label13;

        $z5 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z5 == 0 goto label13;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void reopenReadWrite()>();

        goto label13;

     label06:
        $r7 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        if $r7 != null goto label07;

        r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>(null);

        goto label13;

     label07:
        $r11 = r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r10 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $z2 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

        if $z2 == 0 goto label08;

        $b8 = 8;

        goto label09;

     label08:
        $b8 = 0;

     label09:
        $r9 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r8 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler>;

        r1 = virtualinvoke $r11.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>($r10, $b8, $r9, $r8);

     label10:
        goto label13;

     label11:
        $r34 := @caughtexception;

        r2 = $r34;

        if z0 == 0 goto label12;

        throw r2;

     label12:
        $r39 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t open ");

        $r37 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for writing (will try read-only):");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r39, $r41, r2);

        $r46 = r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r40 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r47 = virtualinvoke $r46.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r40);

        r3 = virtualinvoke $r47.<java.io.File: java.lang.String getPath()>();

        $r43 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r48 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler>;

        r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r3, $r43, 1, $r48);

     label13:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>(r1);

        i10 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $i0 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i10 == $i0 goto label22;

        $z4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z4 == 0 goto label14;

        $r22 = new android.database.sqlite.SQLiteException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t upgrade read-only database from version ");

        $i7 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i6 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r25 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label14:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label15:
        if i10 != 0 goto label16;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

        goto label18;

     label16:
        $i2 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i10 <= $i2 goto label17;

        $i5 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>(r1, i10, $i5);

        goto label18;

     label17:
        $i4 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>(r1, i10, $i4);

     label18:
        $i3 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>($i3);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label19:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label22;

     label20:
        $r44 := @caughtexception;

        r4 = $r44;

     label21:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r4;

     label22:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>(r1);

        $z3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z3 == 0 goto label23;

        $r13 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opened ");

        $r15 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in read-only mode");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r13, $r19);

     label23:
        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = r1;

        r50 = r1;

     label24:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r1 == null goto label25;

        $r12 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r1 == $r12 goto label25;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void close()>();

     label25:
        return r50;

     label26:
        $r45 := @caughtexception;

        r5 = $r45;

     label27:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r1 == null goto label28;

        $r49 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r1 == $r49 goto label28;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void close()>();

     label28:
        throw r5;

        catch android.database.sqlite.SQLiteException from label07 to label10 with label11;
        catch java.lang.Throwable from label15 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label05 to label24 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    public synchronized void close()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabase $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        $z0 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed during initialization");

        throw $r4;

     label1:
        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 == null goto label2;

        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void close()>();

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label2:
        return;
    }

    public void onConfigure(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public abstract void onCreate(android.database.sqlite.SQLiteDatabase);

    public abstract void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        android.database.sqlite.SQLiteException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.database.sqlite.SQLiteException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t downgrade database from version ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.database.sqlite.SQLiteOpenHelper: boolean DEBUG_STRICT_READONLY> = 0;

        $r0 = class "android/database/sqlite/SQLiteOpenHelper";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG> = $r1;

        return;
    }
}
