abstract class android.widget.DatePicker$AbstractDatePickerDelegate extends java.lang.Object implements android.widget.DatePicker$DatePickerDelegate
{
    protected android.widget.DatePicker mDelegator;
    protected android.content.Context mContext;
    protected java.util.Locale mCurrentLocale;
    protected android.widget.DatePicker$OnDateChangedListener mOnDateChangedListener;
    protected android.widget.DatePicker$ValidationCallback mValidationCallback;

    public void <init>(android.widget.DatePicker, android.content.Context)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker r1;
        android.content.Context r2;
        java.util.Locale $r3;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker;

        r2 := @parameter1: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker mDelegator> = r1;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.content.Context mContext> = r2;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        virtualinvoke r0.<android.widget.DatePicker$AbstractDatePickerDelegate: void setCurrentLocale(java.util.Locale)>($r3);

        return;
    }

    protected void setCurrentLocale(java.util.Locale)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        java.util.Locale r1, $r2;
        boolean $z0;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.util.Locale mCurrentLocale>;

        $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.util.Locale mCurrentLocale> = r1;

        return;
    }

    public void setValidationCallback(android.widget.DatePicker$ValidationCallback)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker$ValidationCallback r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker$ValidationCallback;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$ValidationCallback mValidationCallback> = r1;

        return;
    }

    protected void onValidationChanged(boolean)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        boolean z0;
        android.widget.DatePicker$ValidationCallback $r1, $r2;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$ValidationCallback mValidationCallback>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$ValidationCallback mValidationCallback>;

        interfaceinvoke $r2.<android.widget.DatePicker$ValidationCallback: void onValidationChanged(boolean)>(z0);

     label1:
        return;
    }
}
