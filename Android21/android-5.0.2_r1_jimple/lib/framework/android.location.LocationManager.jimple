public class android.location.LocationManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.location.ILocationManager mService;
    private final android.location.GpsMeasurementListenerTransport mGpsMeasurementListenerTransport;
    private final android.location.GpsNavigationMessageListenerTransport mGpsNavigationMessageListenerTransport;
    private final java.util.HashMap mGpsStatusListeners;
    private final java.util.HashMap mNmeaListeners;
    private final android.location.GpsStatus mGpsStatus;
    public static final java.lang.String NETWORK_PROVIDER;
    public static final java.lang.String GPS_PROVIDER;
    public static final java.lang.String PASSIVE_PROVIDER;
    public static final java.lang.String FUSED_PROVIDER;
    public static final java.lang.String KEY_PROXIMITY_ENTERING;
    public static final java.lang.String KEY_STATUS_CHANGED;
    public static final java.lang.String KEY_PROVIDER_ENABLED;
    public static final java.lang.String KEY_LOCATION_CHANGED;
    public static final java.lang.String GPS_ENABLED_CHANGE_ACTION;
    public static final java.lang.String PROVIDERS_CHANGED_ACTION;
    public static final java.lang.String MODE_CHANGED_ACTION;
    public static final java.lang.String GPS_FIX_CHANGE_ACTION;
    public static final java.lang.String EXTRA_GPS_ENABLED;
    public static final java.lang.String HIGH_POWER_REQUEST_CHANGE_ACTION;
    private java.util.HashMap mListeners;

    public void <init>(android.content.Context, android.location.ILocationManager)
    {
        android.location.LocationManager r0;
        android.content.Context r1, $r9, $r12;
        android.location.ILocationManager r2, $r8, $r11;
        java.util.HashMap $r3, $r4, $r6;
        android.location.GpsStatus $r5;
        android.location.GpsMeasurementListenerTransport $r7;
        android.location.GpsNavigationMessageListenerTransport $r10;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.location.ILocationManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.location.LocationManager: java.util.HashMap mGpsStatusListeners> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.location.LocationManager: java.util.HashMap mNmeaListeners> = $r4;

        $r5 = new android.location.GpsStatus;

        specialinvoke $r5.<android.location.GpsStatus: void <init>()>();

        r0.<android.location.LocationManager: android.location.GpsStatus mGpsStatus> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<android.location.LocationManager: java.util.HashMap mListeners> = $r6;

        r0.<android.location.LocationManager: android.location.ILocationManager mService> = r2;

        r0.<android.location.LocationManager: android.content.Context mContext> = r1;

        $r7 = new android.location.GpsMeasurementListenerTransport;

        $r9 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r8 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        specialinvoke $r7.<android.location.GpsMeasurementListenerTransport: void <init>(android.content.Context,android.location.ILocationManager)>($r9, $r8);

        r0.<android.location.LocationManager: android.location.GpsMeasurementListenerTransport mGpsMeasurementListenerTransport> = $r7;

        $r10 = new android.location.GpsNavigationMessageListenerTransport;

        $r12 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r11 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        specialinvoke $r10.<android.location.GpsNavigationMessageListenerTransport: void <init>(android.content.Context,android.location.ILocationManager)>($r12, $r11);

        r0.<android.location.LocationManager: android.location.GpsNavigationMessageListenerTransport mGpsNavigationMessageListenerTransport> = $r10;

        return;
    }

    private android.location.LocationProvider createProvider(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        com.android.internal.location.ProviderProperties r2;
        android.location.LocationProvider $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.location.ProviderProperties;

        $r3 = new android.location.LocationProvider;

        specialinvoke $r3.<android.location.LocationProvider: void <init>(java.lang.String,com.android.internal.location.ProviderProperties)>(r1, r2);

        return $r3;
    }

    public java.util.List getAllProviders()
    {
        android.location.LocationManager r0;
        android.os.RemoteException r1, $r4;
        android.location.ILocationManager $r2;
        java.util.List $r3;

        r0 := @this: android.location.LocationManager;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r3 = interfaceinvoke $r2.<android.location.ILocationManager: java.util.List getAllProviders()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getProviders(boolean)
    {
        android.location.LocationManager r0;
        boolean z0;
        android.os.RemoteException r1, $r4;
        android.location.ILocationManager $r2;
        java.util.List $r3;

        r0 := @this: android.location.LocationManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r3 = interfaceinvoke $r2.<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>(null, z0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r1);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.LocationProvider getProvider(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        com.android.internal.location.ProviderProperties r2;
        android.location.ILocationManager $r3;
        android.location.LocationProvider $r4;
        android.os.RemoteException $r5, r6;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        r2 = interfaceinvoke $r3.<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>(r1);

        if r2 != null goto label3;

     label2:
        return null;

     label3:
        $r4 = specialinvoke r0.<android.location.LocationManager: android.location.LocationProvider createProvider(java.lang.String,com.android.internal.location.ProviderProperties)>(r1, r2);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r6);

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.List getProviders(android.location.Criteria, boolean)
    {
        android.location.LocationManager r0;
        android.location.Criteria r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.location.ILocationManager $r3;
        java.util.List $r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r4 = interfaceinvoke $r3.<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>(r1, z0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getBestProvider(android.location.Criteria, boolean)
    {
        android.location.LocationManager r0;
        android.location.Criteria r1;
        boolean z0;
        android.os.RemoteException r2, $r5;
        android.location.ILocationManager $r3;
        java.lang.String $r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r4 = interfaceinvoke $r3.<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>(r1, z0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.location.LocationListener r2;
        android.location.LocationRequest r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.location.LocationListener;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r3, r2, null, null);

        return;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.location.LocationListener;

        r3 := @parameter4: android.os.Looper;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r4, r2, r3, null);

        return;
    }

    public void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        long l0;
        float f0;
        android.location.Criteria r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: android.location.Criteria;

        r2 := @parameter3: android.location.LocationListener;

        r3 := @parameter4: android.os.Looper;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, l0, f0, 0);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r4, r2, r3, null);

        return;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        long l0;
        float f0;
        android.app.PendingIntent r2;
        android.location.LocationRequest r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        r2 := @parameter3: android.app.PendingIntent;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, l0, f0, 0);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r3, null, null, r2);

        return;
    }

    public void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        long l0;
        float f0;
        android.location.Criteria r1;
        android.app.PendingIntent r2;
        android.location.LocationRequest r3;

        r0 := @this: android.location.LocationManager;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 := @parameter2: android.location.Criteria;

        r2 := @parameter3: android.app.PendingIntent;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, l0, f0, 0);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r3, null, null, r2);

        return;
    }

    public void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.os.Looper;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, 0L, 0.0F, 1);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r4, r2, r3, null);

        return;
    }

    public void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.Criteria r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.location.LocationRequest r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.Criteria;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.os.Looper;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        r4 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, 0L, 0.0F, 1);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r4, r2, r3, null);

        return;
    }

    public void requestSingleUpdate(java.lang.String, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.app.PendingIntent r2;
        android.location.LocationRequest r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.app.PendingIntent;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, 0L, 0.0F, 1);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r3, null, null, r2);

        return;
    }

    public void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.Criteria r1;
        android.app.PendingIntent r2;
        android.location.LocationRequest r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.Criteria;

        r2 := @parameter1: android.app.PendingIntent;

        staticinvoke <android.location.LocationManager: void checkCriteria(android.location.Criteria)>(r1);

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)>(r1, 0L, 0.0F, 1);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r3, null, null, r2);

        return;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.LocationRequest r1;
        android.location.LocationListener r2;
        android.os.Looper r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.os.Looper;

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r2);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r1, r2, r3, null);

        return;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.LocationRequest r1;
        android.app.PendingIntent r2;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        specialinvoke r0.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>(r1, null, null, r2);

        return;
    }

    private android.location.LocationManager$ListenerTransport wrapListener(android.location.LocationListener, android.os.Looper)
    {
        android.location.LocationManager r0;
        android.location.LocationListener r1;
        android.os.Looper r2;
        java.util.HashMap r3, $r6, $r7, $r9;
        android.location.LocationManager$ListenerTransport r4, $r11;
        java.lang.Throwable r5, $r12;
        java.lang.Object $r8;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationListener;

        r2 := @parameter1: android.os.Looper;

        if r1 != null goto label1;

        return null;

     label1:
        $r6 = r0.<android.location.LocationManager: java.util.HashMap mListeners>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<android.location.LocationManager: java.util.HashMap mListeners>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.location.LocationManager$ListenerTransport) $r8;

        if r4 != null goto label3;

        $r11 = new android.location.LocationManager$ListenerTransport;

        specialinvoke $r11.<android.location.LocationManager$ListenerTransport: void <init>(android.location.LocationManager,android.location.LocationListener,android.os.Looper)>(r0, r1, r2);

        r4 = $r11;

     label3:
        $r9 = r0.<android.location.LocationManager: java.util.HashMap mListeners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        exitmonitor r3;

     label4:
        return r4;

     label5:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r3;

     label6:
        throw r5;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.LocationRequest r1;
        android.location.LocationListener r2;
        android.os.Looper r3;
        android.app.PendingIntent r4;
        java.lang.String r5;
        android.location.LocationManager$ListenerTransport r6;
        android.os.RemoteException r7, $r10;
        android.content.Context $r8;
        android.location.ILocationManager $r9;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.LocationListener;

        r3 := @parameter2: android.os.Looper;

        r4 := @parameter3: android.app.PendingIntent;

        $r8 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r5 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

        r6 = specialinvoke r0.<android.location.LocationManager: android.location.LocationManager$ListenerTransport wrapListener(android.location.LocationListener,android.os.Looper)>(r2, r3);

     label1:
        $r9 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r9.<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>(r1, r6, r4, r5);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r7 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeUpdates(android.location.LocationListener)
    {
        android.location.LocationManager r0;
        android.location.LocationListener r1;
        java.lang.String r2;
        android.location.LocationManager$ListenerTransport r3;
        java.util.HashMap r4, $r7, $r8;
        java.lang.Throwable r5, $r11;
        android.content.Context $r6;
        java.lang.Object $r9;
        android.location.ILocationManager $r10;
        android.os.RemoteException $r12, r13;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationListener;

        staticinvoke <android.location.LocationManager: void checkListener(android.location.LocationListener)>(r1);

        $r6 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = r0.<android.location.LocationManager: java.util.HashMap mListeners>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<android.location.LocationManager: java.util.HashMap mListeners>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (android.location.LocationManager$ListenerTransport) $r9;

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        if r3 != null goto label6;

        return;

     label6:
        $r10 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r10.<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>(r3, null, r2);

     label7:
        goto label9;

     label8:
        $r12 := @caughtexception;

        r13 = $r12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r13);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void removeUpdates(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        java.lang.String r2;
        android.os.RemoteException r3, $r6;
        android.content.Context $r4;
        android.location.ILocationManager $r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r1);

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>(null, r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addProximityAlert(double, double, float, long, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        double d0, d1;
        float f0;
        long l0;
        android.app.PendingIntent r1;
        android.location.Geofence r2;
        android.location.LocationRequest r3, $r5;
        android.os.RemoteException r4, $r8;
        byte $b1;
        android.location.ILocationManager $r6;
        android.content.Context $r7;
        java.lang.String $r9;

        r0 := @this: android.location.LocationManager;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        f0 := @parameter2: float;

        l0 := @parameter3: long;

        r1 := @parameter4: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        l0 = 9223372036854775807L;

     label1:
        r2 = staticinvoke <android.location.Geofence: android.location.Geofence createCircle(double,double,float)>(d0, d1, f0);

        $r5 = new android.location.LocationRequest;

        specialinvoke $r5.<android.location.LocationRequest: void <init>()>();

        r3 = virtualinvoke $r5.<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)>(l0);

     label2:
        $r6 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r7 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r6.<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>(r3, r2, r1, $r9);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r4);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void addGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.LocationRequest r1;
        android.location.Geofence r2;
        android.app.PendingIntent r3;
        android.os.RemoteException r4, $r8;
        android.content.Context $r5;
        android.location.ILocationManager $r6;
        java.lang.String $r7;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.Geofence;

        r3 := @parameter2: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r3);

        staticinvoke <android.location.LocationManager: void checkGeofence(android.location.Geofence)>(r2);

     label1:
        $r6 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r6.<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>(r1, r2, r3, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeProximityAlert(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        java.lang.String r2;
        android.os.RemoteException r3, $r6;
        android.content.Context $r4;
        android.location.ILocationManager $r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r1);

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(null, r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeGeofence(android.location.Geofence, android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.location.Geofence r1;
        android.app.PendingIntent r2;
        java.lang.String r3;
        android.os.RemoteException r4, $r7;
        android.content.Context $r5;
        android.location.ILocationManager $r6;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.Geofence;

        r2 := @parameter1: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r2);

        staticinvoke <android.location.LocationManager: void checkGeofence(android.location.Geofence)>(r1);

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r3 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r6 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r6.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeAllGeofences(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        java.lang.String r2;
        android.os.RemoteException r3, $r6;
        android.content.Context $r4;
        android.location.ILocationManager $r5;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.app.PendingIntent;

        specialinvoke r0.<android.location.LocationManager: void checkPendingIntent(android.app.PendingIntent)>(r1);

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>(null, r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $z0 = interfaceinvoke $r3.<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.Location getLastLocation()
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r6;
        android.content.Context $r3;
        android.location.ILocationManager $r4;
        android.location.Location $r5;

        r0 := @this: android.location.LocationManager;

        $r3 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r5 = interfaceinvoke $r4.<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>(null, r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.location.Location getLastKnownLocation(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1, r2;
        android.location.LocationRequest r3;
        android.os.RemoteException r4, $r8;
        android.content.Context $r5;
        android.location.ILocationManager $r6;
        android.location.Location $r7;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.location.LocationManager: void checkProvider(java.lang.String)>(r1);

        $r5 = r0.<android.location.LocationManager: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        r3 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedProvider(java.lang.String,long,float,boolean)>(r1, 0L, 0.0F, 1);

     label1:
        $r6 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r7 = interfaceinvoke $r6.<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>(r3, r2);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int)
    {
        android.location.LocationManager r0;
        java.lang.String r1, $r11;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7;
        int i0, i1;
        com.android.internal.location.ProviderProperties r2, $r4;
        android.os.RemoteException r3, $r10;
        android.location.ILocationManager $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        z5 := @parameter6: boolean;

        z6 := @parameter7: boolean;

        i0 := @parameter8: int;

        i1 := @parameter9: int;

        $r4 = new com.android.internal.location.ProviderProperties;

        specialinvoke $r4.<com.android.internal.location.ProviderProperties: void <init>(boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>(z0, z1, z2, z3, z4, z5, z6, i0, i1);

        r2 = $r4;

        $z7 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("[^a-zA-Z0-9]");

        if $z7 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider name contains illegal character: ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeTestProvider(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: void removeTestProvider(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        android.location.LocationManager r0;
        java.lang.String r1, $r9;
        android.location.Location r2;
        java.lang.IllegalArgumentException r3, $r5;
        boolean $z0;
        android.location.ILocationManager $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        android.content.Context $r10;
        android.content.pm.ApplicationInfo $r11;
        int $i0;
        android.os.RemoteException $r12, r13;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.Location;

        $z0 = virtualinvoke r2.<android.location.Location: boolean isComplete()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete location object, missing timestamp or accuracy? ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        r3 = $r5;

        $r10 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 16 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("LocationManager", r3);

        virtualinvoke r2.<android.location.Location: void makeComplete()>();

        goto label2;

     label1:
        throw r3;

     label2:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r4.<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>(r1, r2);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r13 = $r12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r13);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        int i0;
        android.os.Bundle r2;
        long l1;
        android.os.RemoteException r3, $r5;
        android.location.ILocationManager $r4;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        l1 := @parameter3: long;

     label1:
        $r4 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r4.<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>(r1, i0, r2, l1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        android.location.LocationManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r4;
        android.location.ILocationManager $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r3.<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addGpsStatusListener(android.location.GpsStatus$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$Listener r1;
        boolean z0;
        android.location.LocationManager$GpsStatusListenerTransport r2, $r5;
        java.util.HashMap $r3, $r9;
        java.lang.Object $r4;
        android.content.Context $r6;
        android.location.ILocationManager $r7;
        java.lang.String $r8;
        android.os.RemoteException $r11, r12;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$Listener;

        $r3 = r0.<android.location.LocationManager: java.util.HashMap mGpsStatusListeners>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 == null goto label1;

        return 1;

     label1:
        $r5 = new android.location.LocationManager$GpsStatusListenerTransport;

        specialinvoke $r5.<android.location.LocationManager$GpsStatusListenerTransport: void <init>(android.location.LocationManager,android.location.GpsStatus$Listener)>(r0, r1);

        r2 = $r5;

        $r7 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r6 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r7.<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>(r2, $r8);

        if z0 == 0 goto label2;

        $r9 = r0.<android.location.LocationManager: java.util.HashMap mGpsStatusListeners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r12 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in registerGpsStatusListener: ", r12);

        z0 = 0;

     label4:
        return z0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeGpsStatusListener(android.location.GpsStatus$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$Listener r1;
        android.location.LocationManager$GpsStatusListenerTransport r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        android.location.ILocationManager $r5;
        android.os.RemoteException $r6, r7;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$Listener;

     label1:
        $r3 = r0.<android.location.LocationManager: java.util.HashMap mGpsStatusListeners>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (android.location.LocationManager$GpsStatusListenerTransport) $r4;

        if r2 == null goto label2;

        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void removeGpsStatusListener(android.location.IGpsStatusListener)>(r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in unregisterGpsStatusListener: ", r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addNmeaListener(android.location.GpsStatus$NmeaListener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$NmeaListener r1;
        boolean z0;
        android.location.LocationManager$GpsStatusListenerTransport r2, $r5;
        java.util.HashMap $r3, $r9;
        java.lang.Object $r4;
        android.content.Context $r6;
        android.location.ILocationManager $r7;
        java.lang.String $r8;
        android.os.RemoteException $r11, r12;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$NmeaListener;

        $r3 = r0.<android.location.LocationManager: java.util.HashMap mNmeaListeners>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 == null goto label1;

        return 1;

     label1:
        $r5 = new android.location.LocationManager$GpsStatusListenerTransport;

        specialinvoke $r5.<android.location.LocationManager$GpsStatusListenerTransport: void <init>(android.location.LocationManager,android.location.GpsStatus$NmeaListener)>(r0, r1);

        r2 = $r5;

        $r7 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $r6 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r7.<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>(r2, $r8);

        if z0 == 0 goto label2;

        $r9 = r0.<android.location.LocationManager: java.util.HashMap mNmeaListeners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r12 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in registerGpsStatusListener: ", r12);

        z0 = 0;

     label4:
        return z0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeNmeaListener(android.location.GpsStatus$NmeaListener)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus$NmeaListener r1;
        android.location.LocationManager$GpsStatusListenerTransport r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        android.location.ILocationManager $r5;
        android.os.RemoteException $r6, r7;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus$NmeaListener;

     label1:
        $r3 = r0.<android.location.LocationManager: java.util.HashMap mNmeaListeners>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (android.location.LocationManager$GpsStatusListenerTransport) $r4;

        if r2 == null goto label2;

        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        interfaceinvoke $r5.<android.location.ILocationManager: void removeGpsStatusListener(android.location.IGpsStatusListener)>(r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in unregisterGpsStatusListener: ", r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addGpsMeasurementListener(android.location.GpsMeasurementsEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsMeasurementsEvent$Listener r1;
        android.location.GpsMeasurementListenerTransport $r2;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsMeasurementsEvent$Listener;

        $r2 = r0.<android.location.LocationManager: android.location.GpsMeasurementListenerTransport mGpsMeasurementListenerTransport>;

        $z0 = virtualinvoke $r2.<android.location.GpsMeasurementListenerTransport: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void removeGpsMeasurementListener(android.location.GpsMeasurementsEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsMeasurementsEvent$Listener r1;
        android.location.GpsMeasurementListenerTransport $r2;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsMeasurementsEvent$Listener;

        $r2 = r0.<android.location.LocationManager: android.location.GpsMeasurementListenerTransport mGpsMeasurementListenerTransport>;

        virtualinvoke $r2.<android.location.GpsMeasurementListenerTransport: void remove(java.lang.Object)>(r1);

        return;
    }

    public boolean addGpsNavigationMessageListener(android.location.GpsNavigationMessageEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsNavigationMessageEvent$Listener r1;
        android.location.GpsNavigationMessageListenerTransport $r2;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsNavigationMessageEvent$Listener;

        $r2 = r0.<android.location.LocationManager: android.location.GpsNavigationMessageListenerTransport mGpsNavigationMessageListenerTransport>;

        $z0 = virtualinvoke $r2.<android.location.GpsNavigationMessageListenerTransport: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void removeGpsNavigationMessageListener(android.location.GpsNavigationMessageEvent$Listener)
    {
        android.location.LocationManager r0;
        android.location.GpsNavigationMessageEvent$Listener r1;
        android.location.GpsNavigationMessageListenerTransport $r2;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsNavigationMessageEvent$Listener;

        $r2 = r0.<android.location.LocationManager: android.location.GpsNavigationMessageListenerTransport mGpsNavigationMessageListenerTransport>;

        virtualinvoke $r2.<android.location.GpsNavigationMessageListenerTransport: void remove(java.lang.Object)>(r1);

        return;
    }

    public android.location.GpsStatus getGpsStatus(android.location.GpsStatus)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus r1, $r2, $r3;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.location.GpsStatus;

        if r1 != null goto label1;

        $r3 = new android.location.GpsStatus;

        specialinvoke $r3.<android.location.GpsStatus: void <init>()>();

        r1 = $r3;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.GpsStatus mGpsStatus>;

        virtualinvoke r1.<android.location.GpsStatus: void setStatus(android.location.GpsStatus)>($r2);

        return r1;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.location.LocationManager r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;
        android.os.RemoteException r4, $r6;
        android.location.ILocationManager $r5;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

     label1:
        $r5 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $z0 = interfaceinvoke $r5.<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>(r1, r2, r3);

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in sendExtraCommand: ", r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean sendNiResponse(int, int)
    {
        android.location.LocationManager r0;
        int i0, i1;
        android.os.RemoteException r1, $r3;
        android.location.ILocationManager $r2;
        boolean $z0;

        r0 := @this: android.location.LocationManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        $z0 = interfaceinvoke $r2.<android.location.ILocationManager: boolean sendNiResponse(int,int)>(i0, i1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManager", "RemoteException in sendNiResponse: ", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static void checkProvider(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid provider: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private static void checkCriteria(android.location.Criteria)
    {
        android.location.Criteria r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.location.Criteria;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid criteria: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private static void checkListener(android.location.LocationListener)
    {
        android.location.LocationListener r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.location.LocationListener;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid listener: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private void checkPendingIntent(android.app.PendingIntent)
    {
        android.location.LocationManager r0;
        android.app.PendingIntent r1;
        java.lang.IllegalArgumentException r2, $r3, $r6;
        boolean $z0;
        android.content.Context $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.location.LocationManager;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid pending intent: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $z0 = virtualinvoke r1.<android.app.PendingIntent: boolean isTargetedToPackage()>();

        if $z0 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pending intent must be targeted to package");

        r2 = $r3;

        $r4 = r0.<android.location.LocationManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 <= 16 goto label2;

        throw r2;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("LocationManager", r2);

     label3:
        return;
    }

    private static void checkGeofence(android.location.Geofence)
    {
        android.location.Geofence r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.location.Geofence;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid geofence: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    static android.location.ILocationManager access$100(android.location.LocationManager)
    {
        android.location.LocationManager r0;
        android.location.ILocationManager $r1;

        r0 := @parameter0: android.location.LocationManager;

        $r1 = r0.<android.location.LocationManager: android.location.ILocationManager mService>;

        return $r1;
    }

    static android.location.GpsStatus access$200(android.location.LocationManager)
    {
        android.location.LocationManager r0;
        android.location.GpsStatus $r1;

        r0 := @parameter0: android.location.LocationManager;

        $r1 = r0.<android.location.LocationManager: android.location.GpsStatus mGpsStatus>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.location.LocationManager: java.lang.String HIGH_POWER_REQUEST_CHANGE_ACTION> = "android.location.HIGH_POWER_REQUEST_CHANGE";

        <android.location.LocationManager: java.lang.String EXTRA_GPS_ENABLED> = "enabled";

        <android.location.LocationManager: java.lang.String GPS_FIX_CHANGE_ACTION> = "android.location.GPS_FIX_CHANGE";

        <android.location.LocationManager: java.lang.String MODE_CHANGED_ACTION> = "android.location.MODE_CHANGED";

        <android.location.LocationManager: java.lang.String PROVIDERS_CHANGED_ACTION> = "android.location.PROVIDERS_CHANGED";

        <android.location.LocationManager: java.lang.String GPS_ENABLED_CHANGE_ACTION> = "android.location.GPS_ENABLED_CHANGE";

        <android.location.LocationManager: java.lang.String KEY_LOCATION_CHANGED> = "location";

        <android.location.LocationManager: java.lang.String KEY_PROVIDER_ENABLED> = "providerEnabled";

        <android.location.LocationManager: java.lang.String KEY_STATUS_CHANGED> = "status";

        <android.location.LocationManager: java.lang.String KEY_PROXIMITY_ENTERING> = "entering";

        <android.location.LocationManager: java.lang.String FUSED_PROVIDER> = "fused";

        <android.location.LocationManager: java.lang.String PASSIVE_PROVIDER> = "passive";

        <android.location.LocationManager: java.lang.String GPS_PROVIDER> = "gps";

        <android.location.LocationManager: java.lang.String NETWORK_PROVIDER> = "network";

        <android.location.LocationManager: java.lang.String TAG> = "LocationManager";

        return;
    }
}
