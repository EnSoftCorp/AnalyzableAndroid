public class android.os.Binder extends java.lang.Object implements android.os.IBinder
{
    private static final boolean FIND_POTENTIAL_LEAKS;
    private static final boolean CHECK_PARCEL_SIZE;
    static final java.lang.String TAG;
    private static java.lang.String sDumpDisabled;
    private long mObject;
    private android.os.IInterface mOwner;
    private java.lang.String mDescriptor;

    public static final native int getCallingPid();

    public static final native int getCallingUid();

    public static final android.os.UserHandle getCallingUserHandle()
    {
        android.os.UserHandle $r0;
        int $i0, $i1;

        $r0 = new android.os.UserHandle;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        specialinvoke $r0.<android.os.UserHandle: void <init>(int)>($i1);

        return $r0;
    }

    public static final native long clearCallingIdentity();

    public static final native void restoreCallingIdentity(long);

    public static final native void setThreadStrictModePolicy(int);

    public static final native int getThreadStrictModePolicy();

    public static final native void flushPendingCommands();

    public static final native void joinThreadPool();

    public static final boolean isProxy(android.os.IInterface)
    {
        android.os.IInterface r0;
        android.os.IBinder $r1;
        boolean $z0;

        r0 := @parameter0: android.os.IInterface;

        $r1 = interfaceinvoke r0.<android.os.IInterface: android.os.IBinder asBinder()>();

        if $r1 == r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<android.os.Binder: void init()>();

        return;
    }

    public void attachInterface(android.os.IInterface, java.lang.String)
    {
        android.os.Binder r0;
        android.os.IInterface r1;
        java.lang.String r2;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IInterface;

        r2 := @parameter1: java.lang.String;

        r0.<android.os.Binder: android.os.IInterface mOwner> = r1;

        r0.<android.os.Binder: java.lang.String mDescriptor> = r2;

        return;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.os.Binder r0;
        java.lang.String $r1;

        r0 := @this: android.os.Binder;

        $r1 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        return $r1;
    }

    public boolean pingBinder()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public boolean isBinderAlive()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public android.os.IInterface queryLocalInterface(java.lang.String)
    {
        android.os.Binder r0;
        java.lang.String r1, $r2;
        boolean $z0;
        android.os.IInterface $r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.os.Binder: android.os.IInterface mOwner>;

        return $r3;

     label1:
        return null;
    }

    public static void setDumpDisabled(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 = class "android/os/Binder";

        entermonitor class "android/os/Binder";

     label1:
        <android.os.Binder: java.lang.String sDumpDisabled> = r0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.ParcelFileDescriptor r3;
        java.lang.String[] r4;
        java.lang.Throwable r6, $r10;
        java.io.FileDescriptor $r8;
        java.lang.String $r9;
        java.io.IOException $r11, $r12;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if i0 != 1598968902 goto label01;

        $r9 = virtualinvoke r0.<android.os.Binder: java.lang.String getInterfaceDescriptor()>();

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>($r9);

        return 1;

     label01:
        if i0 != 1598311760 goto label14;

        r3 = virtualinvoke r1.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String[] readStringArray()>();

        if r3 == null goto label11;

     label02:
        $r8 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>($r8, r4);

     label03:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        goto label11;

     label05:
        $r11 := @caughtexception;

        goto label11;

     label06:
        $r10 := @caughtexception;

        r6 = $r10;

     label07:
        virtualinvoke r3.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        throw r6;

     label11:
        if r2 == null goto label12;

        virtualinvoke r2.<android.os.Parcel: void writeNoException()>();

        goto label13;

     label12:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

     label13:
        return 1;

     label14:
        return 0;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void dump(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        java.io.FileOutputStream r3, $r9;
        com.android.internal.util.FastPrintWriter r4, $r10;
        java.lang.String r5, $r11, $r16, $r18;
        java.lang.Class r6;
        java.lang.Throwable r7, r8, $r12, $r13, $r20, r22;
        java.lang.StringBuilder $r14, $r17, $r19;
        java.lang.SecurityException $r15, r21;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String[];

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        r3 = $r9;

        $r10 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r10.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r3);

        r4 = $r10;

     label01:
        r6 = class "android/os/Binder";

        entermonitor class "android/os/Binder";

     label02:
        r5 = <android.os.Binder: java.lang.String sDumpDisabled>;

        exitmonitor r6;

     label03:
        goto label06;

     label04:
        $r13 := @caughtexception;

        r7 = $r13;

        exitmonitor r6;

     label05:
        throw r7;

     label06:
        if r5 != null goto label11;

     label07:
        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r4, r2);

     label08:
        goto label12;

     label09:
        $r15 := @caughtexception;

        r21 = $r15;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security exception: ");

        $r16 = virtualinvoke r21.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        throw r21;

     label10:
        $r12 := @caughtexception;

        r22 = $r12;

        virtualinvoke r4.<java.io.PrintWriter: void println()>();

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>("Exception occurred while dumping:");

        virtualinvoke r22.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r4);

        goto label12;

     label11:
        $r11 = <android.os.Binder: java.lang.String sDumpDisabled>;

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label12:
        virtualinvoke r4.<java.io.PrintWriter: void flush()>();

        goto label15;

     label13:
        $r20 := @caughtexception;

        r8 = $r20;

     label14:
        virtualinvoke r4.<java.io.PrintWriter: void flush()>();

        throw r8;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.SecurityException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void dumpAsync(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        java.io.FileOutputStream r3, $r6;
        com.android.internal.util.FastPrintWriter r4, $r7;
        android.os.Binder$1 r5, $r8;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String[];

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        r3 = $r6;

        $r7 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r3);

        r4 = $r7;

        $r8 = new android.os.Binder$1;

        specialinvoke $r8.<android.os.Binder$1: void <init>(android.os.Binder,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r0, "Binder.dumpAsync", r1, r4, r2);

        r5 = $r8;

        virtualinvoke r5.<java.lang.Thread: void start()>();

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        return;
    }

    public final boolean transact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        boolean z0;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

     label1:
        z0 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

        if r2 == null goto label2;

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

     label2:
        return z0;
    }

    public void linkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return;
    }

    public boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return 1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.os.Binder r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.os.Binder;

     label1:
        specialinvoke r0.<android.os.Binder: void destroy()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void checkParcel(android.os.IBinder, int, android.os.Parcel, java.lang.String)
    {
        android.os.IBinder r0;
        int i0;
        android.os.Parcel r1;
        java.lang.String r2;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Parcel;

        r2 := @parameter3: java.lang.String;

        return;
    }

    private final native void init();

    private final native void destroy();

    private boolean execTransact(int, long, long, int)
    {
        android.os.Binder r0;
        int i0, i3, $i5, $i8;
        long l1, l2;
        android.os.Parcel r1, r2;
        boolean z0;
        android.os.RemoteException r3, $r7;
        java.lang.RuntimeException r4, $r6, $r8, r9;
        java.lang.OutOfMemoryError $r5, r10;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(long)>(l1);

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(long)>(l2);

     label01:
        z0 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i3);

     label02:
        goto label10;

     label03:
        $r7 := @caughtexception;

        r3 = $r7;

        $i5 = i3 & 1;

        if $i5 == 0 goto label04;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Binder call failed.", r3);

        goto label05;

     label04:
        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r3);

     label05:
        z0 = 1;

        goto label10;

     label06:
        $r8 := @caughtexception;

        r9 = $r8;

        $i8 = i3 & 1;

        if $i8 == 0 goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught a RuntimeException from the binder stub implementation.", r9);

        goto label08;

     label07:
        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r9);

     label08:
        z0 = 1;

        goto label10;

     label09:
        $r5 := @caughtexception;

        r10 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught an OutOfMemoryError from the binder stub implementation.", r10);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Out of memory", r10);

        r4 = $r6;

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r2.<android.os.Parcel: void writeException(java.lang.Exception)>(r4);

        z0 = 1;

     label10:
        staticinvoke <android.os.Binder: void checkParcel(android.os.IBinder,int,android.os.Parcel,java.lang.String)>(r0, i0, r2, "Unreasonably large binder reply buffer");

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

        return z0;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.RuntimeException from label01 to label02 with label06;
        catch java.lang.OutOfMemoryError from label01 to label02 with label09;
    }

    static void <clinit>()
    {
        <android.os.Binder: java.lang.String TAG> = "Binder";

        <android.os.Binder: boolean CHECK_PARCEL_SIZE> = 0;

        <android.os.Binder: boolean FIND_POTENTIAL_LEAKS> = 0;

        <android.os.Binder: java.lang.String sDumpDisabled> = null;

        return;
    }
}
