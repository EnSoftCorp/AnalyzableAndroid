public class android.hardware.camera2.impl.CameraCaptureSessionImpl extends android.hardware.camera2.CameraCaptureSession
{
    private static final java.lang.String TAG;
    private static final boolean VERBOSE;
    private final int mId;
    private final java.lang.String mIdString;
    private final java.util.List mOutputs;
    private final android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback;
    private final android.os.Handler mStateHandler;
    private final android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl;
    private final android.os.Handler mDeviceHandler;
    private final android.hardware.camera2.utils.TaskDrainer mSequenceDrainer;
    private final android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer;
    private final android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer;
    private final android.hardware.camera2.utils.TaskSingleDrainer mUnconfigureDrainer;
    private boolean mClosed;
    private final boolean mConfigureSuccess;
    private boolean mSkipUnconfigure;
    private volatile boolean mAborting;

    void <init>(int, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler, android.hardware.camera2.impl.CameraDeviceImpl, android.os.Handler, boolean)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0, $i1;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2, $r13, $r27, $r33;
        android.os.Handler r3, r5, $r10, $r11, $r15, $r18, $r23, $r24, $r26;
        android.hardware.camera2.impl.CameraDeviceImpl r4, $r17;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r6, $r41;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;
        java.lang.String $r9, $r30, $r35, $r36, $r38;
        java.lang.Object $r12, $r14;
        android.hardware.camera2.utils.TaskDrainer $r16;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener $r19;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener $r20;
        android.hardware.camera2.utils.TaskSingleDrainer $r21, $r22, $r28;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener $r25;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$UnconfigureDrainListener $r29;
        java.lang.StringBuilder $r31, $r32, $r34, $r37, $r39, $r40;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r3 := @parameter3: android.os.Handler;

        r4 := @parameter4: android.hardware.camera2.impl.CameraDeviceImpl;

        r5 := @parameter5: android.os.Handler;

        z0 := @parameter6: boolean;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession: void <init>()>();

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 0;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure> = 0;

        if r1 == null goto label1;

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outputs must be a non-null, non-empty list");

        throw $r6;

     label2:
        if r2 != null goto label3;

        $r41 = new java.lang.IllegalArgumentException;

        specialinvoke $r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r41;

     label3:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int mId> = i0;

        $r7 = newarray (java.lang.Object)[1];

        $i1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int mId>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Session %d: ", $r7);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString> = $r9;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.util.List mOutputs> = r1;

        $r11 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler)>(r3);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mStateHandler> = $r11;

        $r10 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mStateHandler>;

        $r13 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback createUserStateCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$StateCallback)>($r10, r2);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback> = $r13;

        $r12 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "deviceStateHandler must not be null");

        $r15 = (android.os.Handler) $r12;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler> = $r15;

        $r14 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "deviceImpl must not be null");

        $r17 = (android.hardware.camera2.impl.CameraDeviceImpl) $r14;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl> = $r17;

        $r16 = new android.hardware.camera2.utils.TaskDrainer;

        $r18 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $r19 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener;

        specialinvoke $r19.<android.hardware.camera2.impl.CameraCaptureSessionImpl$SequenceDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r16.<android.hardware.camera2.utils.TaskDrainer: void <init>(android.os.Handler,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r18, $r19, "seq");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer> = $r16;

        $r21 = new android.hardware.camera2.utils.TaskSingleDrainer;

        $r23 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $r20 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener;

        specialinvoke $r20.<android.hardware.camera2.impl.CameraCaptureSessionImpl$IdleDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r21.<android.hardware.camera2.utils.TaskSingleDrainer: void <init>(android.os.Handler,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r23, $r20, "idle");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer> = $r21;

        $r22 = new android.hardware.camera2.utils.TaskSingleDrainer;

        $r24 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $r25 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener;

        specialinvoke $r25.<android.hardware.camera2.impl.CameraCaptureSessionImpl$AbortDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r22.<android.hardware.camera2.utils.TaskSingleDrainer: void <init>(android.os.Handler,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r24, $r25, "abort");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer> = $r22;

        $r28 = new android.hardware.camera2.utils.TaskSingleDrainer;

        $r26 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $r29 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$UnconfigureDrainListener;

        specialinvoke $r29.<android.hardware.camera2.impl.CameraCaptureSessionImpl$UnconfigureDrainListener: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.impl.CameraCaptureSessionImpl$1)>(r0, null);

        specialinvoke $r28.<android.hardware.camera2.utils.TaskSingleDrainer: void <init>(android.os.Handler,android.hardware.camera2.utils.TaskDrainer$DrainListener,java.lang.String)>($r26, $r29, "unconf");

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mUnconfigureDrainer> = $r28;

        if z0 == 0 goto label5;

        $r33 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r33.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>(r0);

        $z2 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z2 == 0 goto label4;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created session successfully");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r38);

     label4:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mConfigureSuccess> = 1;

        goto label6;

     label5:
        $r27 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r27.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>(r0);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 1;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r30 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create capture session; configuration failed");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraCaptureSession", $r35);

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mConfigureSuccess> = 0;

     label6:
        return;
    }

    public android.hardware.camera2.CameraDevice getDevice()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl $r1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        return $r1;
    }

    public synchronized int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3, $r6, r18;
        boolean $z0;
        android.hardware.camera2.impl.CameraDeviceImpl $r4;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r8, $r15;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("request must not be null");

        throw $r17;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r18 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r3, r2);

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capture - request ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callback ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r15);

     label2:
        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r18, r2);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $i0 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler)>(r1, $r5, $r6);

        $i1 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i0);

        return $i1;
    }

    public synchronized int captureBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3, $r7, r23;
        android.hardware.camera2.CaptureRequest[] r4, $r8;
        boolean $z0, $z1;
        android.hardware.camera2.impl.CameraDeviceImpl $r5;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback $r6;
        int $i0, $i1;
        java.lang.Object[] $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19;
        java.lang.String $r11, $r15, $r20;
        java.lang.IllegalArgumentException $r21, $r22;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must not be null");

        throw $r21;

     label1:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must have at least one element");

        throw $r22;

     label2:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r23 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r3, r2);

        $z1 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r8 = newarray (android.hardware.camera2.CaptureRequest)[0];

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r4 = (android.hardware.camera2.CaptureRequest[]) $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("captureBurst - requests ");

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callback ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r20);

     label3:
        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r23, r2);

        $r7 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraDeviceImpl: int captureBurst(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler)>(r1, $r6, $r7);

        $i1 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i0);

        return $i1;
    }

    public synchronized int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3, $r6, r19;
        boolean $z0;
        android.hardware.camera2.impl.CameraDeviceImpl $r4;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r8, $r17;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("request must not be null");

        throw $r18;

     label1:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r19 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r3, r2);

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setRepeatingRequest - request ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callback ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r17);

     label2:
        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r5 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r19, r2);

        $r6 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $i0 = virtualinvoke $r4.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler)>(r1, $r5, $r6);

        $i1 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i0);

        return $i1;
    }

    public synchronized int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.os.Handler r3, $r7, r24;
        android.hardware.camera2.CaptureRequest[] r4, $r8;
        boolean $z0, $z1;
        android.hardware.camera2.impl.CameraDeviceImpl $r5;
        android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback $r6;
        int $i0, $i1;
        java.lang.Object[] $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r21;
        java.lang.String $r11, $r15, $r20;
        java.lang.IllegalArgumentException $r22, $r23;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must not be null");

        throw $r23;

     label1:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("requests must have at least one element");

        throw $r22;

     label2:
        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        r24 = staticinvoke <android.hardware.camera2.impl.CameraDeviceImpl: android.os.Handler checkHandler(android.os.Handler,java.lang.Object)>(r3, r2);

        $z1 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r8 = newarray (android.hardware.camera2.CaptureRequest)[0];

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r4 = (android.hardware.camera2.CaptureRequest[]) $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setRepeatingBurst - requests ");

        $r15 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", callback ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handler");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r20);

     label3:
        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        $r6 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback createCaptureCallbackProxy(android.os.Handler,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r24, r2);

        $r7 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.os.Handler mDeviceHandler>;

        $i0 = virtualinvoke $r5.<android.hardware.camera2.impl.CameraDeviceImpl: int setRepeatingBurst(java.util.List,android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback,android.os.Handler)>(r1, $r6, $r7);

        $i1 = specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: int addPendingSequence(int)>($i0);

        return $i1;
    }

    public synchronized void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;
        android.hardware.camera2.impl.CameraDeviceImpl $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopRepeating");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r6);

     label1:
        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r1.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

        return;
    }

    public synchronized void abortCaptures() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0, $z1;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;
        android.hardware.camera2.impl.CameraDeviceImpl $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r10, $r12;
        java.lang.String $r4, $r7, $r9, $r11;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void checkNotClosed()>();

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abortCaptures");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r11);

     label1:
        $z1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        if $z1 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abortCaptures - Session is already aborting; doing nothing");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraCaptureSession", $r7);

        return;

     label2:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting> = 1;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer>;

        virtualinvoke $r1.<android.hardware.camera2.utils.TaskSingleDrainer: void taskStarted()>();

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraDeviceImpl: void flush()>();

        return;
    }

    synchronized void replaceSessionClose()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replaceSessionClose");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r5);

     label1:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure> = 1;

        virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>();

        return;
    }

    public synchronized void close()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.IllegalStateException r1, $r14;
        boolean $z0, $z1, $z2;
        android.hardware.camera2.impl.CameraDeviceImpl $r2;
        android.hardware.camera2.utils.TaskDrainer $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r10, $r13, $r15, $r16, $r19, $r21, $r23, $r24;
        java.lang.String $r5, $r8, $r11, $r12, $r17, $r18, $r25, $r26;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r20;
        android.hardware.camera2.CameraAccessException $r22, r27;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        if $z0 == 0 goto label2;

        $z2 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z2 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close - reentering");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r12);

     label1:
        return;

     label2:
        $z1 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        if $z1 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close - first time");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("CameraCaptureSession", $r8);

     label3:
        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed> = 1;

     label4:
        $r2 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        virtualinvoke $r2.<android.hardware.camera2.impl.CameraDeviceImpl: void stopRepeating()>();

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r1 = $r14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The camera device was already closed: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraCaptureSession", $r18, r1);

        $r20 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        virtualinvoke $r20.<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>(r0);

        return;

     label7:
        $r22 := @caughtexception;

        r27 = $r22;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r25 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while stopping repeating: ");

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CameraCaptureSession", $r26, r27);

     label8:
        $r3 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        virtualinvoke $r3.<android.hardware.camera2.utils.TaskDrainer: void beginDrain()>();

        return;

        catch java.lang.IllegalStateException from label4 to label5 with label6;
        catch android.hardware.camera2.CameraAccessException from label4 to label5 with label7;
    }

    boolean isAborting()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        return $z0;
    }

    private android.hardware.camera2.CameraCaptureSession$StateCallback createUserStateCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession$StateCallback)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.os.Handler r1;
        android.hardware.camera2.CameraCaptureSession$StateCallback r2;
        android.hardware.camera2.dispatch.InvokeDispatcher r3, $r5;
        android.hardware.camera2.dispatch.HandlerDispatcher r4, $r6;
        android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy $r7;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$StateCallback;

        $r5 = new android.hardware.camera2.dispatch.InvokeDispatcher;

        specialinvoke $r5.<android.hardware.camera2.dispatch.InvokeDispatcher: void <init>(java.lang.Object)>(r2);

        r3 = $r5;

        $r6 = new android.hardware.camera2.dispatch.HandlerDispatcher;

        specialinvoke $r6.<android.hardware.camera2.dispatch.HandlerDispatcher: void <init>(android.hardware.camera2.dispatch.Dispatchable,android.os.Handler)>(r3, r1);

        r4 = $r6;

        $r7 = new android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy;

        specialinvoke $r7.<android.hardware.camera2.impl.CallbackProxies$SessionStateCallbackProxy: void <init>(android.hardware.camera2.dispatch.Dispatchable)>(r4);

        return $r7;
    }

    private android.hardware.camera2.impl.CameraDeviceImpl$CaptureCallback createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession$CaptureCallback)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.os.Handler r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$1 r3, $r10;
        android.hardware.camera2.dispatch.InvokeDispatcher r4, r5, $r11, $r12;
        android.hardware.camera2.dispatch.HandlerDispatcher r6, $r13;
        android.hardware.camera2.dispatch.DuckTypingDispatcher r7, $r14;
        android.hardware.camera2.dispatch.ArgumentReplacingDispatcher r8, $r15;
        android.hardware.camera2.dispatch.BroadcastDispatcher r9, $r17;
        android.hardware.camera2.dispatch.Dispatchable[] $r16;
        android.hardware.camera2.impl.CallbackProxies$DeviceCaptureCallbackProxy $r18;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r10 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$1;

        specialinvoke $r10.<android.hardware.camera2.impl.CameraCaptureSessionImpl$1: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl)>(r0);

        r3 = $r10;

        if r2 != null goto label1;

        return r3;

     label1:
        $r11 = new android.hardware.camera2.dispatch.InvokeDispatcher;

        specialinvoke $r11.<android.hardware.camera2.dispatch.InvokeDispatcher: void <init>(java.lang.Object)>(r3);

        r4 = $r11;

        $r12 = new android.hardware.camera2.dispatch.InvokeDispatcher;

        specialinvoke $r12.<android.hardware.camera2.dispatch.InvokeDispatcher: void <init>(java.lang.Object)>(r2);

        r5 = $r12;

        $r13 = new android.hardware.camera2.dispatch.HandlerDispatcher;

        specialinvoke $r13.<android.hardware.camera2.dispatch.HandlerDispatcher: void <init>(android.hardware.camera2.dispatch.Dispatchable,android.os.Handler)>(r5, r1);

        r6 = $r13;

        $r14 = new android.hardware.camera2.dispatch.DuckTypingDispatcher;

        specialinvoke $r14.<android.hardware.camera2.dispatch.DuckTypingDispatcher: void <init>(android.hardware.camera2.dispatch.Dispatchable,java.lang.Class)>(r6, class "android/hardware/camera2/CameraCaptureSession$CaptureCallback");

        r7 = $r14;

        $r15 = new android.hardware.camera2.dispatch.ArgumentReplacingDispatcher;

        specialinvoke $r15.<android.hardware.camera2.dispatch.ArgumentReplacingDispatcher: void <init>(android.hardware.camera2.dispatch.Dispatchable,int,java.lang.Object)>(r7, 0, r0);

        r8 = $r15;

        $r17 = new android.hardware.camera2.dispatch.BroadcastDispatcher;

        $r16 = newarray (android.hardware.camera2.dispatch.Dispatchable)[2];

        $r16[0] = r8;

        $r16[1] = r4;

        specialinvoke $r17.<android.hardware.camera2.dispatch.BroadcastDispatcher: void <init>(android.hardware.camera2.dispatch.Dispatchable[])>($r16);

        r9 = $r17;

        $r18 = new android.hardware.camera2.impl.CallbackProxies$DeviceCaptureCallbackProxy;

        specialinvoke $r18.<android.hardware.camera2.impl.CallbackProxies$DeviceCaptureCallbackProxy: void <init>(android.hardware.camera2.dispatch.Dispatchable)>(r9);

        return $r18;
    }

    android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0, r1;
        android.hardware.camera2.impl.CameraCaptureSessionImpl$2 $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        r1 = r0;

        $r2 = new android.hardware.camera2.impl.CameraCaptureSessionImpl$2;

        specialinvoke $r2.<android.hardware.camera2.impl.CameraCaptureSessionImpl$2: void <init>(android.hardware.camera2.impl.CameraCaptureSessionImpl,android.hardware.camera2.CameraCaptureSession)>(r0, r1);

        return $r2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

     label1:
        virtualinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkNotClosed()
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Session has been closed; further changes are illegal.");

        throw $r1;

     label1:
        return;
    }

    private int addPendingSequence(int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.utils.TaskDrainer $r1;
        java.lang.Integer $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<android.hardware.camera2.utils.TaskDrainer: void taskStarted(java.lang.Object)>($r2);

        return i0;
    }

    private void finishPendingSequence(int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;
        android.hardware.camera2.utils.TaskDrainer $r1;
        java.lang.Integer $r2;

        r0 := @this: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskDrainer mSequenceDrainer>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<android.hardware.camera2.utils.TaskDrainer: void taskFinished(java.lang.Object)>($r2);

        return;
    }

    static void access$400(android.hardware.camera2.impl.CameraCaptureSessionImpl, int)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        int i0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        i0 := @parameter1: int;

        specialinvoke r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: void finishPendingSequence(int)>(i0);

        return;
    }

    static boolean access$500()
    {
        boolean $z0;

        $z0 = <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE>;

        return $z0;
    }

    static java.lang.String access$600(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String mIdString>;

        return $r1;
    }

    static android.hardware.camera2.utils.TaskSingleDrainer access$700(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mIdleDrainer>;

        return $r1;
    }

    static android.hardware.camera2.CameraCaptureSession$StateCallback access$800(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraCaptureSession$StateCallback mStateCallback>;

        return $r1;
    }

    static boolean access$900(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting>;

        return $z0;
    }

    static android.hardware.camera2.utils.TaskSingleDrainer access$1000(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mAbortDrainer>;

        return $r1;
    }

    static boolean access$902(android.hardware.camera2.impl.CameraCaptureSessionImpl, boolean)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        z0 := @parameter1: boolean;

        r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mAborting> = z0;

        return z0;
    }

    static boolean access$1100(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mClosed>;

        return $z0;
    }

    static boolean access$1200(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mConfigureSuccess>;

        return $z0;
    }

    static boolean access$1300(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $z0 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean mSkipUnconfigure>;

        return $z0;
    }

    static android.hardware.camera2.utils.TaskSingleDrainer access$1400(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.utils.TaskSingleDrainer $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.utils.TaskSingleDrainer mUnconfigureDrainer>;

        return $r1;
    }

    static android.hardware.camera2.impl.CameraDeviceImpl access$1500(android.hardware.camera2.impl.CameraCaptureSessionImpl)
    {
        android.hardware.camera2.impl.CameraCaptureSessionImpl r0;
        android.hardware.camera2.impl.CameraDeviceImpl $r1;

        r0 := @parameter0: android.hardware.camera2.impl.CameraCaptureSessionImpl;

        $r1 = r0.<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl mDeviceImpl>;

        return $r1;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.hardware.camera2.impl.CameraCaptureSessionImpl: java.lang.String TAG> = "CameraCaptureSession";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CameraCaptureSession", 2);

        <android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean VERBOSE> = $z0;

        return;
    }
}
