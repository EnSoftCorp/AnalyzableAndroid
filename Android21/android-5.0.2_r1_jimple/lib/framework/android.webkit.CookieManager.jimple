public class android.webkit.CookieManager extends java.lang.Object
{

    protected void <init>()
    {
        android.webkit.CookieManager r0;

        r0 := @this: android.webkit.CookieManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.webkit.CookieManager r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>("doesn\'t implement Cloneable");

        throw $r1;
    }

    public static synchronized android.webkit.CookieManager getInstance()
    {
        android.webkit.WebViewFactoryProvider $r0;
        android.webkit.CookieManager $r1;

        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>();

        $r1 = interfaceinvoke $r0.<android.webkit.WebViewFactoryProvider: android.webkit.CookieManager getCookieManager()>();

        return $r1;
    }

    public synchronized void setAcceptCookie(boolean)
    {
        android.webkit.CookieManager r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public synchronized boolean acceptCookie()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void setAcceptThirdPartyCookies(android.webkit.WebView, boolean)
    {
        android.webkit.CookieManager r0;
        android.webkit.WebView r1;
        boolean z0;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: android.webkit.WebView;

        z0 := @parameter1: boolean;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public boolean acceptThirdPartyCookies(android.webkit.WebView)
    {
        android.webkit.CookieManager r0;
        android.webkit.WebView r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: android.webkit.WebView;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public void setCookie(java.lang.String, java.lang.String)
    {
        android.webkit.CookieManager r0;
        java.lang.String r1, r2;
        android.webkit.MustOverrideException $r3;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new android.webkit.MustOverrideException;

        specialinvoke $r3.<android.webkit.MustOverrideException: void <init>()>();

        throw $r3;
    }

    public void setCookie(java.lang.String, java.lang.String, android.webkit.ValueCallback)
    {
        android.webkit.CookieManager r0;
        java.lang.String r1, r2;
        android.webkit.ValueCallback r3;
        android.webkit.MustOverrideException $r4;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.webkit.ValueCallback;

        $r4 = new android.webkit.MustOverrideException;

        specialinvoke $r4.<android.webkit.MustOverrideException: void <init>()>();

        throw $r4;
    }

    public java.lang.String getCookie(java.lang.String)
    {
        android.webkit.CookieManager r0;
        java.lang.String r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getCookie(java.lang.String, boolean)
    {
        android.webkit.CookieManager r0;
        java.lang.String r1;
        boolean z0;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public synchronized java.lang.String getCookie(android.net.WebAddress)
    {
        android.webkit.CookieManager r0;
        android.net.WebAddress r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: android.net.WebAddress;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public void removeSessionCookie()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void removeSessionCookies(android.webkit.ValueCallback)
    {
        android.webkit.CookieManager r0;
        android.webkit.ValueCallback r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: android.webkit.ValueCallback;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public void removeAllCookie()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void removeAllCookies(android.webkit.ValueCallback)
    {
        android.webkit.CookieManager r0;
        android.webkit.ValueCallback r1;
        android.webkit.MustOverrideException $r2;

        r0 := @this: android.webkit.CookieManager;

        r1 := @parameter0: android.webkit.ValueCallback;

        $r2 = new android.webkit.MustOverrideException;

        specialinvoke $r2.<android.webkit.MustOverrideException: void <init>()>();

        throw $r2;
    }

    public synchronized boolean hasCookies()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public synchronized boolean hasCookies(boolean)
    {
        android.webkit.CookieManager r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void removeExpiredCookie()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public void flush()
    {
        android.webkit.CookieManager r0;

        r0 := @this: android.webkit.CookieManager;

        virtualinvoke r0.<android.webkit.CookieManager: void flushCookieStore()>();

        return;
    }

    protected void flushCookieStore()
    {
        android.webkit.CookieManager r0;

        r0 := @this: android.webkit.CookieManager;

        return;
    }

    public static boolean allowFileSchemeCookies()
    {
        android.webkit.CookieManager $r0;
        boolean $z0;

        $r0 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        $z0 = virtualinvoke $r0.<android.webkit.CookieManager: boolean allowFileSchemeCookiesImpl()>();

        return $z0;
    }

    protected boolean allowFileSchemeCookiesImpl()
    {
        android.webkit.CookieManager r0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }

    public static void setAcceptFileSchemeCookies(boolean)
    {
        boolean z0;
        android.webkit.CookieManager $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r0.<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)>(z0);

        return;
    }

    protected void setAcceptFileSchemeCookiesImpl(boolean)
    {
        android.webkit.CookieManager r0;
        boolean z0;
        android.webkit.MustOverrideException $r1;

        r0 := @this: android.webkit.CookieManager;

        z0 := @parameter0: boolean;

        $r1 = new android.webkit.MustOverrideException;

        specialinvoke $r1.<android.webkit.MustOverrideException: void <init>()>();

        throw $r1;
    }
}
