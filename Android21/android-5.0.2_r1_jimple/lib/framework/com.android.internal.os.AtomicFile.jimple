public final class com.android.internal.os.AtomicFile extends java.lang.Object
{
    private final java.io.File mBaseName;
    private final java.io.File mBackupName;

    public void <init>(java.io.File)
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File r1, $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: com.android.internal.os.AtomicFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName> = r1;

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName> = $r2;

        return;
    }

    public java.io.File getBaseFile()
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.os.AtomicFile;

        $r1 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        return $r1;
    }

    public java.io.FileOutputStream startWrite() throws java.io.IOException
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File r1, $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r15, $r17, $r23, $r27, $r33;
        boolean $z0, $z1, $z2, $z3;
        java.io.FileOutputStream $r3, $r22, r35;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r21, $r24, $r26, $r28, $r29, $r34;
        java.lang.String $r16, $r19, $r25, $r32;
        java.io.FileNotFoundException $r18, $r30;
        java.io.IOException $r20, $r31;

        r0 := @this: com.android.internal.os.AtomicFile;

        $r2 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r8 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r7 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $z2 = virtualinvoke $r8.<java.io.File: boolean renameTo(java.io.File)>($r7);

        if $z2 != 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rename file ");

        $r10 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup file ");

        $r15 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AtomicFile", $r16);

        goto label2;

     label1:
        $r6 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

     label2:
        $r3 = new java.io.FileOutputStream;

        $r4 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        r35 = $r3;

     label3:
        goto label9;

     label4:
        $r18 := @caughtexception;

        $r17 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        r1 = virtualinvoke $r17.<java.io.File: java.io.File getParentFile()>();

        $z3 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        if $z3 != 0 goto label5;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create directory ");

        $r27 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label5:
        $r19 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r19, 505, -1, -1);

     label6:
        $r22 = new java.io.FileOutputStream;

        $r23 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r23);

        r35 = $r22;

     label7:
        goto label9;

     label8:
        $r30 := @caughtexception;

        $r31 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");

        $r33 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label9:
        return r35;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
        catch java.io.FileNotFoundException from label6 to label7 with label8;
    }

    public void finishWrite(java.io.FileOutputStream)
    {
        com.android.internal.os.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.io.IOException r2, $r4;
        java.io.File $r3;

        r0 := @this: com.android.internal.os.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label4;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "finishWrite: Got exception:", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        com.android.internal.os.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.io.IOException r2, $r6;
        java.io.File $r3, $r4, $r5;

        r0 := @this: com.android.internal.os.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label4;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        $r5 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $r4 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "failWrite: Got exception:", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.io.FileOutputStream openAppend() throws java.io.IOException
    {
        com.android.internal.os.AtomicFile r0;
        java.io.FileOutputStream $r2;
        java.io.File $r3, $r8;
        java.io.FileNotFoundException $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.os.AtomicFile;

     label1:
        $r2 = new java.io.FileOutputStream;

        $r3 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r3, 1);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t append ");

        $r8 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public void truncate() throws java.io.IOException
    {
        com.android.internal.os.AtomicFile r0;
        java.io.FileOutputStream r1, $r2;
        java.io.File $r3, $r8;
        java.io.FileNotFoundException $r4;
        java.io.IOException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.os.AtomicFile;

     label1:
        $r2 = new java.io.FileOutputStream;

        $r3 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        r1 = $r2;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t append ");

        $r8 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        $r11 := @caughtexception;

     label5:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public boolean exists()
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.os.AtomicFile;

        $r1 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void delete()
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.internal.os.AtomicFile;

        $r1 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return;
    }

    public java.io.FileInputStream openRead() throws java.io.FileNotFoundException
    {
        com.android.internal.os.AtomicFile r0;
        java.io.File $r1, $r3, $r4, $r5, $r6;
        boolean $z0;
        java.io.FileInputStream $r2;

        r0 := @this: com.android.internal.os.AtomicFile;

        $r1 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r6 = r0.<com.android.internal.os.AtomicFile: java.io.File mBackupName>;

        $r5 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r6.<java.io.File: boolean renameTo(java.io.File)>($r5);

     label1:
        $r2 = new java.io.FileInputStream;

        $r3 = r0.<com.android.internal.os.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        return $r2;
    }

    public byte[] readFully() throws java.io.IOException
    {
        com.android.internal.os.AtomicFile r0;
        java.io.FileInputStream r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        byte[] r2, r3, r6;
        java.lang.Throwable r4, $r5;

        r0 := @this: com.android.internal.os.AtomicFile;

        r1 = virtualinvoke r0.<com.android.internal.os.AtomicFile: java.io.FileInputStream openRead()>();

     label1:
        i0 = 0;

        i1 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        r2 = newarray (byte)[i1];

     label2:
        $i3 = lengthof r2;

        $i4 = $i3 - i0;

        i2 = virtualinvoke r1.<java.io.FileInputStream: int read(byte[],int,int)>(r2, i0, $i4);

        if i2 > 0 goto label4;

        r3 = r2;

     label3:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        return r3;

     label4:
        i0 = i0 + i2;

        i8 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        $i5 = lengthof r2;

        $i6 = $i5 - i0;

        if i8 <= $i6 goto label5;

        $i7 = i0 + i8;

        r6 = newarray (byte)[$i7];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, r6, 0, i0);

        r2 = r6;

     label5:
        goto label2;

     label6:
        $r5 := @caughtexception;

        r4 = $r5;

     label7:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        throw r4;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }
}
