public abstract class android.view.InputEvent extends java.lang.Object implements android.os.Parcelable
{
    protected static final int PARCEL_TOKEN_MOTION_EVENT;
    protected static final int PARCEL_TOKEN_KEY_EVENT;
    private static final java.util.concurrent.atomic.AtomicInteger mNextSeq;
    protected int mSeq;
    protected boolean mRecycled;
    private static final boolean TRACK_RECYCLED_LOCATION;
    private java.lang.RuntimeException mRecycledLocation;
    public static final android.os.Parcelable$Creator CREATOR;

    void <init>()
    {
        android.view.InputEvent r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.view.InputEvent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.view.InputEvent: java.util.concurrent.atomic.AtomicInteger mNextSeq>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<android.view.InputEvent: int mSeq> = $i0;

        return;
    }

    public abstract int getDeviceId();

    public final android.view.InputDevice getDevice()
    {
        android.view.InputEvent r0;
        int $i0;
        android.view.InputDevice $r1;

        r0 := @this: android.view.InputEvent;

        $i0 = virtualinvoke r0.<android.view.InputEvent: int getDeviceId()>();

        $r1 = staticinvoke <android.view.InputDevice: android.view.InputDevice getDevice(int)>($i0);

        return $r1;
    }

    public abstract int getSource();

    public abstract void setSource(int);

    public boolean isFromSource(int)
    {
        android.view.InputEvent r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.InputEvent;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.InputEvent: int getSource()>();

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract android.view.InputEvent copy();

    public void recycle()
    {
        android.view.InputEvent r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.view.InputEvent;

        $z0 = r0.<android.view.InputEvent: boolean mRecycled>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" recycled twice!");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        r0.<android.view.InputEvent: boolean mRecycled> = 1;

        return;
    }

    public void recycleIfNeededAfterDispatch()
    {
        android.view.InputEvent r0;

        r0 := @this: android.view.InputEvent;

        virtualinvoke r0.<android.view.InputEvent: void recycle()>();

        return;
    }

    protected void prepareForReuse()
    {
        android.view.InputEvent r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.view.InputEvent;

        r0.<android.view.InputEvent: boolean mRecycled> = 0;

        r0.<android.view.InputEvent: java.lang.RuntimeException mRecycledLocation> = null;

        $r1 = <android.view.InputEvent: java.util.concurrent.atomic.AtomicInteger mNextSeq>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<android.view.InputEvent: int mSeq> = $i0;

        return;
    }

    public abstract boolean isTainted();

    public abstract void setTainted(boolean);

    public abstract long getEventTime();

    public abstract long getEventTimeNano();

    public int getSequenceNumber()
    {
        android.view.InputEvent r0;
        int $i0;

        r0 := @this: android.view.InputEvent;

        $i0 = r0.<android.view.InputEvent: int mSeq>;

        return $i0;
    }

    public int describeContents()
    {
        android.view.InputEvent r0;

        r0 := @this: android.view.InputEvent;

        return 0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        android.view.InputEvent$1 $r1;

        <android.view.InputEvent: boolean TRACK_RECYCLED_LOCATION> = 0;

        <android.view.InputEvent: int PARCEL_TOKEN_KEY_EVENT> = 2;

        <android.view.InputEvent: int PARCEL_TOKEN_MOTION_EVENT> = 1;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <android.view.InputEvent: java.util.concurrent.atomic.AtomicInteger mNextSeq> = $r0;

        $r1 = new android.view.InputEvent$1;

        specialinvoke $r1.<android.view.InputEvent$1: void <init>()>();

        <android.view.InputEvent: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }
}
