public class android.media.AudioTrack extends java.lang.Object
{
    private static final float GAIN_MIN;
    private static final float GAIN_MAX;
    private static final int SAMPLE_RATE_HZ_MIN;
    private static final int SAMPLE_RATE_HZ_MAX;
    private static final int CHANNEL_COUNT_MAX;
    public static final int PLAYSTATE_STOPPED;
    public static final int PLAYSTATE_PAUSED;
    public static final int PLAYSTATE_PLAYING;
    public static final int MODE_STATIC;
    public static final int MODE_STREAM;
    public static final int STATE_UNINITIALIZED;
    public static final int STATE_INITIALIZED;
    public static final int STATE_NO_STATIC_DATA;
    public static final int SUCCESS;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_INVALID_OPERATION;
    private static final int ERROR_NATIVESETUP_AUDIOSYSTEM;
    private static final int ERROR_NATIVESETUP_INVALIDCHANNELMASK;
    private static final int ERROR_NATIVESETUP_INVALIDFORMAT;
    private static final int ERROR_NATIVESETUP_INVALIDSTREAMTYPE;
    private static final int ERROR_NATIVESETUP_NATIVEINITFAILED;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_POS;
    private static final java.lang.String TAG;
    public static final int WRITE_BLOCKING;
    public static final int WRITE_NON_BLOCKING;
    private int mState;
    private int mPlayState;
    private final java.lang.Object mPlayStateLock;
    private int mNativeBufferSizeInBytes;
    private int mNativeBufferSizeInFrames;
    private android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate;
    private final android.os.Looper mInitializationLooper;
    private int mSampleRate;
    private int mChannelCount;
    private int mChannels;
    private int mStreamType;
    private final android.media.AudioAttributes mAttributes;
    private int mDataLoadMode;
    private int mChannelConfiguration;
    private int mAudioFormat;
    private int mSessionId;
    private final com.android.internal.app.IAppOpsService mAppOps;
    private long mNativeTrackInJavaObj;
    private long mJniData;
    private static final int SUPPORTED_OUT_CHANNELS;

    public void <init>(int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        specialinvoke r0.<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, 0);

        return;
    }

    public void <init>(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, i4, i5, i6;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;
        android.media.AudioFormat$Builder $r4, $r5, $r6, $r7;
        android.media.AudioFormat $r8;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r4 = new android.media.AudioFormat$Builder;

        specialinvoke $r4.<android.media.AudioFormat$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i2);

        $r6 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i3);

        $r7 = virtualinvoke $r6.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i1);

        $r8 = virtualinvoke $r7.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        specialinvoke r0.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>($r3, $r8, i4, i5, i6);

        return;
    }

    public void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        android.media.AudioAttributes r1, $r9, $r12;
        android.media.AudioFormat r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        android.os.Looper r3, $r7;
        android.os.IBinder r4;
        int[] r5;
        java.lang.Object $r6;
        com.android.internal.app.IAppOpsService $r8;
        android.media.AudioAttributes$Builder $r10;
        java.lang.ref.WeakReference $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r21;
        java.lang.String $r19, $r22;
        java.lang.IllegalArgumentException $r20, $r23, $r24;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioAttributes;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: int mState> = 0;

        r0.<android.media.AudioTrack: int mPlayState> = 1;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock> = $r6;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames> = 0;

        r0.<android.media.AudioTrack: int mChannelCount> = 1;

        r0.<android.media.AudioTrack: int mChannels> = 4;

        r0.<android.media.AudioTrack: int mStreamType> = 3;

        r0.<android.media.AudioTrack: int mDataLoadMode> = 1;

        r0.<android.media.AudioTrack: int mChannelConfiguration> = 4;

        r0.<android.media.AudioTrack: int mAudioFormat> = 2;

        r0.<android.media.AudioTrack: int mSessionId> = 0;

        if r1 != null goto label01;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r23;

     label01:
        if r2 != null goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat");

        throw $r24;

     label02:
        $r7 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r3 = $r7;

        if $r7 != null goto label03;

        r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

     label03:
        $i6 = virtualinvoke r2.<android.media.AudioFormat: int getPropertySetMask()>();

        $i7 = $i6 & 2;

        if $i7 == 0 goto label04;

        i19 = virtualinvoke r2.<android.media.AudioFormat: int getSampleRate()>();

        goto label05;

     label04:
        i19 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputSamplingRate()>();

        if i19 > 0 goto label05;

        i19 = 44100;

     label05:
        i3 = 12;

        $i9 = virtualinvoke r2.<android.media.AudioFormat: int getPropertySetMask()>();

        $i8 = $i9 & 4;

        if $i8 == 0 goto label06;

        i3 = virtualinvoke r2.<android.media.AudioFormat: int getChannelMask()>();

     label06:
        i4 = 1;

        $i11 = virtualinvoke r2.<android.media.AudioFormat: int getPropertySetMask()>();

        $i10 = $i11 & 1;

        if $i10 == 0 goto label07;

        i4 = virtualinvoke r2.<android.media.AudioFormat: int getEncoding()>();

     label07:
        specialinvoke r0.<android.media.AudioTrack: void audioParamCheck(int,int,int,int)>(i19, i3, i4, i1);

        r0.<android.media.AudioTrack: int mStreamType> = -1;

        specialinvoke r0.<android.media.AudioTrack: void audioBuffSizeCheck(int)>(i0);

        r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = r3;

        r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r8 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>(r4);

        r0.<android.media.AudioTrack: com.android.internal.app.IAppOpsService mAppOps> = $r8;

        $r10 = new android.media.AudioAttributes$Builder;

        specialinvoke $r10.<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>(r1);

        $r9 = virtualinvoke $r10.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes> = $r9;

        if i2 >= 0 goto label08;

        $r20 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio session ID: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r20;

     label08:
        r5 = newarray (int)[1];

        r5[0] = i2;

        $r11 = new java.lang.ref.WeakReference;

        specialinvoke $r11.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r12 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $i15 = r0.<android.media.AudioTrack: int mSampleRate>;

        $i16 = r0.<android.media.AudioTrack: int mChannels>;

        $i13 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $i14 = r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes>;

        $i12 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        i5 = specialinvoke r0.<android.media.AudioTrack: int native_setup(java.lang.Object,java.lang.Object,int,int,int,int,int,int[])>($r11, $r12, $i15, $i16, $i13, $i14, $i12, r5);

        if i5 == 0 goto label09;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing AudioTrack.");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r19);

        return;

     label09:
        $i17 = r5[0];

        r0.<android.media.AudioTrack: int mSessionId> = $i17;

        $i18 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i18 != 0 goto label10;

        r0.<android.media.AudioTrack: int mState> = 2;

        goto label11;

     label10:
        r0.<android.media.AudioTrack: int mState> = 1;

     label11:
        return;
    }

    private void audioParamCheck(int, int, int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1, $r6, $r7, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 < 4000 goto label01;

        if i0 <= 96000 goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label02:
        r0.<android.media.AudioTrack: int mSampleRate> = i0;

        r0.<android.media.AudioTrack: int mChannelConfiguration> = i1;

        tableswitch(i1)
        {
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            case 9: goto label05;
            case 10: goto label05;
            case 11: goto label05;
            case 12: goto label04;
            default: goto label05;
        };

     label03:
        r0.<android.media.AudioTrack: int mChannelCount> = 1;

        r0.<android.media.AudioTrack: int mChannels> = 4;

        goto label07;

     label04:
        r0.<android.media.AudioTrack: int mChannelCount> = 2;

        r0.<android.media.AudioTrack: int mChannels> = 12;

        goto label07;

     label05:
        $z2 = staticinvoke <android.media.AudioTrack: boolean isMultichannelConfigSupported(int)>(i1);

        if $z2 != 0 goto label06;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r8;

     label06:
        r0.<android.media.AudioTrack: int mChannels> = i1;

        $i5 = staticinvoke <java.lang.Integer: int bitCount(int)>(i1);

        r0.<android.media.AudioTrack: int mChannelCount> = $i5;

     label07:
        if i2 != 1 goto label08;

        i2 = 2;

     label08:
        $z0 = staticinvoke <android.media.AudioFormat: boolean isValidEncoding(int)>(i2);

        if $z0 != 0 goto label09;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported audio encoding.");

        throw $r7;

     label09:
        r0.<android.media.AudioTrack: int mAudioFormat> = i2;

        if i3 == 1 goto label10;

        if i3 != 0 goto label11;

     label10:
        if i3 == 1 goto label12;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $z1 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearPcm(int)>($i4);

        if $z1 != 0 goto label12;

     label11:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode.");

        throw $r6;

     label12:
        r0.<android.media.AudioTrack: int mDataLoadMode> = i3;

        return;
    }

    private static boolean isMultichannelConfigSupported(int)
    {
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $i5 = i0 & 7420;

        if $i5 == i0 goto label1;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Channel configuration features unsupported channels");

        return 0;

     label1:
        i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        if i1 <= 8 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Channel configuration contains too many channels ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(8);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r4);

        return 0;

     label2:
        $i6 = i0 & 12;

        if $i6 == 12 goto label3;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Front channels must be present in multichannel configurations");

        return 0;

     label3:
        $i7 = i0 & 192;

        if $i7 == 0 goto label4;

        $i10 = i0 & 192;

        if $i10 == 192 goto label4;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Rear channels can\'t be used independently");

        return 0;

     label4:
        $i8 = i0 & 6144;

        if $i8 == 0 goto label5;

        $i9 = i0 & 6144;

        if $i9 == 6144 goto label5;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Side channels can\'t be used independently");

        return 0;

     label5:
        return 1;
    }

    private void audioBuffSizeCheck(int)
    {
        android.media.AudioTrack r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i2 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $z0 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearPcm(int)>($i2);

        if $z0 == 0 goto label1;

        $i6 = r0.<android.media.AudioTrack: int mChannelCount>;

        $i5 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $i7 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i5);

        i1 = $i6 * $i7;

        goto label2;

     label1:
        i1 = 1;

     label2:
        $i3 = i0 % i1;

        if $i3 != 0 goto label3;

        if i0 >= 1 goto label4;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio buffer size.");

        throw $r1;

     label4:
        r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = i0;

        $i4 = i0 / i1;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames> = $i4;

        return;
    }

    public void release()
    {
        android.media.AudioTrack r0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.AudioTrack;

     label1:
        virtualinvoke r0.<android.media.AudioTrack: void stop()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        specialinvoke r0.<android.media.AudioTrack: void native_release()>();

        r0.<android.media.AudioTrack: int mState> = 0;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void finalize()
    {
        android.media.AudioTrack r0;

        r0 := @this: android.media.AudioTrack;

        specialinvoke r0.<android.media.AudioTrack: void native_finalize()>();

        return;
    }

    public static float getMinVolume()
    {
        return 0.0F;
    }

    public static float getMaxVolume()
    {
        return 1.0F;
    }

    public int getSampleRate()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mSampleRate>;

        return $i0;
    }

    public int getPlaybackRate()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_playback_rate()>();

        return $i0;
    }

    public int getAudioFormat()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mAudioFormat>;

        return $i0;
    }

    public int getStreamType()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mStreamType>;

        return $i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mChannelConfiguration>;

        return $i0;
    }

    public int getChannelCount()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mChannelCount>;

        return $i0;
    }

    public int getState()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        return $i0;
    }

    public int getPlayState()
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $r3 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<android.media.AudioTrack: int mPlayState>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected int getNativeFrameCount()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_native_frame_count()>();

        return $i0;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_marker_pos()>();

        return $i0;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_pos_update_period()>();

        return $i0;
    }

    public int getPlaybackHeadPosition()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_position()>();

        return $i0;
    }

    public int getLatency()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_latency()>();

        return $i0;
    }

    public static int getNativeOutputSampleRate(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.media.AudioTrack: int native_get_output_sample_rate(int)>(i0);

        return $i1;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int i0, i1, i2, i3, $i4, i5;
        boolean $z1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        lookupswitch(i1)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 12: goto label2;
            default: goto label3;
        };

     label1:
        i5 = 1;

        goto label5;

     label2:
        i5 = 2;

        goto label5;

     label3:
        $i4 = i1 & 7420;

        if $i4 == i1 goto label4;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label4:
        i5 = staticinvoke <java.lang.Integer: int bitCount(int)>(i1);

     label5:
        $z1 = staticinvoke <android.media.AudioFormat: boolean isValidEncoding(int)>(i2);

        if $z1 != 0 goto label6;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid audio format.");

        return -2;

     label6:
        if i0 < 4000 goto label7;

        if i0 <= 96000 goto label8;

     label7:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMinBufferSize(): ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Hz is not a supported sample rate.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r4);

        return -2;

     label8:
        i3 = staticinvoke <android.media.AudioTrack: int native_get_min_buff_size(int,int,int)>(i0, i5, i2);

        if i3 > 0 goto label9;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): error querying hardware");

        return -1;

     label9:
        return i3;
    }

    public int getAudioSessionId()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mSessionId>;

        return $i0;
    }

    public boolean getTimestamp(android.media.AudioTimestamp)
    {
        android.media.AudioTrack r0;
        android.media.AudioTimestamp r1;
        long[] r2;
        int i0;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTimestamp;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        r2 = newarray (long)[2];

        i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_timestamp(long[])>(r2);

        if i0 == 0 goto label2;

        return 0;

     label2:
        $l1 = r2[0];

        r1.<android.media.AudioTimestamp: long framePosition> = $l1;

        $l2 = r2[1];

        r1.<android.media.AudioTimestamp: long nanoTime> = $l2;

        return 1;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener r1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        virtualinvoke r0.<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener r1;
        android.os.Handler r2;
        android.media.AudioTrack$NativeEventHandlerDelegate $r3;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        r2 := @parameter1: android.os.Handler;

        if r1 == null goto label1;

        $r3 = new android.media.AudioTrack$NativeEventHandlerDelegate;

        specialinvoke $r3.<android.media.AudioTrack$NativeEventHandlerDelegate: void <init>(android.media.AudioTrack,android.media.AudioTrack,android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>(r0, r0, r1, r2);

        r0.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate> = $r3;

        goto label2;

     label1:
        r0.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate> = null;

     label2:
        return;
    }

    private static float clampGainOrLevel(float)
    {
        float f0;
        boolean $z0;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r0;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label2;

        f0 = 0.0F;

        goto label3;

     label2:
        $b1 = f0 cmpl 1.0F;

        if $b1 <= 0 goto label3;

        f0 = 1.0F;

     label3:
        return f0;
    }

    public int setStereoVolume(float, float)
    {
        android.media.AudioTrack r0;
        float f0, f1, f2, f3;
        boolean $z0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 0 goto label2;

        return -3;

     label2:
        f2 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f0);

        f3 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f1);

        specialinvoke r0.<android.media.AudioTrack: void native_setVolume(float,float)>(f2, f3);

        return 0;
    }

    public int setVolume(float)
    {
        android.media.AudioTrack r0;
        float f0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        $i0 = virtualinvoke r0.<android.media.AudioTrack: int setStereoVolume(float,float)>(f0, f0);

        return $i0;
    }

    public int setPlaybackRate(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        if i0 > 0 goto label2;

        return -2;

     label2:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_playback_rate(int)>(i0);

        return $i2;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_marker_pos(int)>(i0);

        return $i2;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_pos_update_period(int)>(i0);

        return $i2;
    }

    public int setPlaybackHeadPosition(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i1 == 1 goto label1;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 != 1 goto label1;

        $i3 = virtualinvoke r0.<android.media.AudioTrack: int getPlayState()>();

        if $i3 != 3 goto label2;

     label1:
        return -3;

     label2:
        if 0 > i0 goto label3;

        $i4 = r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames>;

        if i0 <= $i4 goto label4;

     label3:
        return -2;

     label4:
        $i5 = specialinvoke r0.<android.media.AudioTrack: int native_set_position(int)>(i0);

        return $i5;
    }

    public int setLoopPoints(int, int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i3 == 1 goto label1;

        $i4 = r0.<android.media.AudioTrack: int mState>;

        if $i4 != 1 goto label1;

        $i5 = virtualinvoke r0.<android.media.AudioTrack: int getPlayState()>();

        if $i5 != 3 goto label2;

     label1:
        return -3;

     label2:
        if i2 != 0 goto label3;

        goto label5;

     label3:
        if 0 > i0 goto label4;

        $i6 = r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames>;

        if i0 >= $i6 goto label4;

        if i0 >= i1 goto label4;

        $i7 = r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames>;

        if i1 <= $i7 goto label5;

     label4:
        return -2;

     label5:
        $i8 = specialinvoke r0.<android.media.AudioTrack: int native_set_loop(int,int,int)>(i0, i1, i2);

        return $i8;
    }

    protected void setState(int)
    {
        android.media.AudioTrack r0;
        int i0;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        r0.<android.media.AudioTrack: int mState> = i0;

        return;
    }

    public void play() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("play() called on uninitialized AudioTrack.");

        throw $r4;

     label1:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean isRestricted()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.media.AudioTrack: int setVolume(float)>(0.0F);

     label2:
        $r3 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label3:
        specialinvoke r0.<android.media.AudioTrack: void native_start()>();

        r0.<android.media.AudioTrack: int mPlayState> = 3;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean isRestricted()
    {
        android.media.AudioTrack r0;
        int i0, i1, $i2, $i3;
        com.android.internal.app.IAppOpsService $r1;
        java.lang.String $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.media.AudioTrack;

     label1:
        $i2 = r0.<android.media.AudioTrack: int mStreamType>;

        i0 = staticinvoke <android.media.AudioAttributes: int usageForLegacyStreamType(int)>($i2);

        $r1 = r0.<android.media.AudioTrack: com.android.internal.app.IAppOpsService mAppOps>;

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        $r2 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        i1 = interfaceinvoke $r1.<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>(28, i0, $i3, $r2);

        if i1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on uninitialized AudioTrack.");

        throw $r4;

     label1:
        $r3 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        specialinvoke r0.<android.media.AudioTrack: void native_stop()>();

        r0.<android.media.AudioTrack: int mPlayState> = 1;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("pause() called on uninitialized AudioTrack.");

        throw $r4;

     label1:
        $r3 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        specialinvoke r0.<android.media.AudioTrack: void native_pause()>();

        r0.<android.media.AudioTrack: int mPlayState> = 2;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void flush()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 1 goto label1;

        specialinvoke r0.<android.media.AudioTrack: void native_flush()>();

     label1:
        return;
    }

    public int write(byte[], int, int)
    {
        android.media.AudioTrack r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 == 0 goto label1;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i4 != 4 goto label2;

     label1:
        return -3;

     label2:
        if r1 == null goto label3;

        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $i5 = i0 + i1;

        if $i5 < 0 goto label3;

        $i7 = i0 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

     label3:
        return -2;

     label4:
        $i8 = r0.<android.media.AudioTrack: int mAudioFormat>;

        i2 = specialinvoke r0.<android.media.AudioTrack: int native_write_byte(byte[],int,int,int,boolean)>(r1, i0, i1, $i8, 1);

        $i9 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i9 != 0 goto label5;

        $i10 = r0.<android.media.AudioTrack: int mState>;

        if $i10 != 2 goto label5;

        if i2 <= 0 goto label5;

        r0.<android.media.AudioTrack: int mState> = 1;

     label5:
        return i2;
    }

    public int write(short[], int, int)
    {
        android.media.AudioTrack r0;
        short[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 == 0 goto label1;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i4 != 4 goto label2;

     label1:
        return -3;

     label2:
        if r1 == null goto label3;

        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        $i5 = i0 + i1;

        if $i5 < 0 goto label3;

        $i7 = i0 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

     label3:
        return -2;

     label4:
        $i8 = r0.<android.media.AudioTrack: int mAudioFormat>;

        i2 = specialinvoke r0.<android.media.AudioTrack: int native_write_short(short[],int,int,int)>(r1, i0, i1, $i8);

        $i9 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i9 != 0 goto label5;

        $i10 = r0.<android.media.AudioTrack: int mState>;

        if $i10 != 2 goto label5;

        if i2 <= 0 goto label5;

        r0.<android.media.AudioTrack: int mState> = 1;

     label5:
        return i2;
    }

    public int write(float[], int, int, int)
    {
        android.media.AudioTrack r0;
        float[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean $z0;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i4 = r0.<android.media.AudioTrack: int mState>;

        if $i4 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label1:
        $i5 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i5 == 4 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write(float[] ...) requires format ENCODING_PCM_FLOAT");

        return -3;

     label2:
        if i2 == 0 goto label3;

        if i2 == 1 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label3:
        if r1 == null goto label4;

        if i0 < 0 goto label4;

        if i1 < 0 goto label4;

        $i7 = i0 + i1;

        if $i7 < 0 goto label4;

        $i9 = i0 + i1;

        $i8 = lengthof r1;

        if $i9 <= $i8 goto label5;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid array, offset, or size");

        return -2;

     label5:
        $i10 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i2 != 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        i3 = specialinvoke r0.<android.media.AudioTrack: int native_write_float(float[],int,int,int,boolean)>(r1, i0, i1, $i10, $z0);

        $i11 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i11 != 0 goto label8;

        $i12 = r0.<android.media.AudioTrack: int mState>;

        if $i12 != 2 goto label8;

        if i3 <= 0 goto label8;

        r0.<android.media.AudioTrack: int mState> = 1;

     label8:
        return i3;
    }

    public int write(java.nio.ByteBuffer, int, int)
    {
        android.media.AudioTrack r0;
        java.nio.ByteBuffer r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i17;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z1, $z2, $z3;
        byte[] $r7;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label01:
        if i1 == 0 goto label02;

        if i1 == 1 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label02:
        if r1 == null goto label03;

        if i0 < 0 goto label03;

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if i0 <= $i4 goto label04;

     label03:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioTrack.write() called with invalid size (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") value");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", $r6);

        return -2;

     label04:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 == 0 goto label07;

        $i13 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i14 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i1 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        i17 = specialinvoke r0.<android.media.AudioTrack: int native_write_native_bytes(java.lang.Object,int,int,int,boolean)>(r1, $i13, i0, $i14, $z3);

        goto label10;

     label07:
        $r7 = staticinvoke <java.nio.NioUtils: byte[] unsafeArray(java.nio.ByteBuffer)>(r1);

        $i6 = staticinvoke <java.nio.NioUtils: int unsafeArrayOffset(java.nio.ByteBuffer)>(r1);

        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i7 = $i6 + $i5;

        $i8 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i1 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        i17 = specialinvoke r0.<android.media.AudioTrack: int native_write_byte(byte[],int,int,int,boolean)>($r7, $i7, i0, $i8, $z2);

     label10:
        $i9 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i9 != 0 goto label11;

        $i12 = r0.<android.media.AudioTrack: int mState>;

        if $i12 != 2 goto label11;

        if i17 <= 0 goto label11;

        r0.<android.media.AudioTrack: int mState> = 1;

     label11:
        if i17 <= 0 goto label12;

        $i11 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i10 = $i11 + i17;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

     label12:
        return i17;
    }

    public int reloadStaticData()
    {
        android.media.AudioTrack r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i0 == 1 goto label1;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label2;

     label1:
        return -3;

     label2:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_reload_static()>();

        return $i2;
    }

    public int attachAuxEffect(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_attachAuxEffect(int)>(i0);

        return $i2;
    }

    public int setAuxEffectSendLevel(float)
    {
        android.media.AudioTrack r0;
        float f0, f1;
        int i0, $i1;
        boolean $z0;
        byte $b2;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label2;

        return -3;

     label2:
        f1 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f0);

        i0 = specialinvoke r0.<android.media.AudioTrack: int native_setAuxEffectSendLevel(float)>(f1);

        if i0 != 0 goto label3;

        $b2 = 0;

        goto label4;

     label3:
        $b2 = -1;

     label4:
        return $b2;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        java.lang.Object r0, r1, $r7;
        int i0, i1, i2;
        android.media.AudioTrack r2;
        android.media.AudioTrack$NativeEventHandlerDelegate r3;
        android.os.Handler r4;
        android.os.Message r5;
        java.lang.ref.WeakReference $r6;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $r6 = (java.lang.ref.WeakReference) r0;

        $r7 = virtualinvoke $r6.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.AudioTrack) $r7;

        if r2 != null goto label1;

        return;

     label1:
        r3 = r2.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate>;

        if r3 == null goto label2;

        r4 = virtualinvoke r3.<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()>();

        if r4 == null goto label2;

        r5 = virtualinvoke r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        virtualinvoke r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r5);

     label2:
        return;
    }

    private final native int native_setup(java.lang.Object, java.lang.Object, int, int, int, int, int, int[]);

    private final native void native_finalize();

    private final native void native_release();

    private final native void native_start();

    private final native void native_stop();

    private final native void native_pause();

    private final native void native_flush();

    private final native int native_write_byte(byte[], int, int, int, boolean);

    private final native int native_write_short(short[], int, int, int);

    private final native int native_write_float(float[], int, int, int, boolean);

    private final native int native_write_native_bytes(java.lang.Object, int, int, int, boolean);

    private final native int native_reload_static();

    private final native int native_get_native_frame_count();

    private final native void native_setVolume(float, float);

    private final native int native_set_playback_rate(int);

    private final native int native_get_playback_rate();

    private final native int native_set_marker_pos(int);

    private final native int native_get_marker_pos();

    private final native int native_set_pos_update_period(int);

    private final native int native_get_pos_update_period();

    private final native int native_set_position(int);

    private final native int native_get_position();

    private final native int native_get_latency();

    private final native int native_get_timestamp(long[]);

    private final native int native_set_loop(int, int, int);

    private static final native int native_get_output_sample_rate(int);

    private static final native int native_get_min_buff_size(int, int, int);

    private final native int native_attachAuxEffect(int);

    private final native int native_setAuxEffectSendLevel(float);

    private static void logd(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("android.media.AudioTrack", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", r0);

        return;
    }

    static android.os.Looper access$000(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper>;

        return $r1;
    }

    static void access$100(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>(r0);

        return;
    }

    public static void <clinit>()
    {
        <android.media.AudioTrack: int SUPPORTED_OUT_CHANNELS> = 7420;

        <android.media.AudioTrack: int WRITE_NON_BLOCKING> = 1;

        <android.media.AudioTrack: int WRITE_BLOCKING> = 0;

        <android.media.AudioTrack: java.lang.String TAG> = "android.media.AudioTrack";

        <android.media.AudioTrack: int NATIVE_EVENT_NEW_POS> = 4;

        <android.media.AudioTrack: int NATIVE_EVENT_MARKER> = 3;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDSTREAMTYPE> = -19;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDFORMAT> = -18;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDCHANNELMASK> = -17;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_AUDIOSYSTEM> = -16;

        <android.media.AudioTrack: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioTrack: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioTrack: int ERROR> = -1;

        <android.media.AudioTrack: int SUCCESS> = 0;

        <android.media.AudioTrack: int STATE_NO_STATIC_DATA> = 2;

        <android.media.AudioTrack: int STATE_INITIALIZED> = 1;

        <android.media.AudioTrack: int STATE_UNINITIALIZED> = 0;

        <android.media.AudioTrack: int MODE_STREAM> = 1;

        <android.media.AudioTrack: int MODE_STATIC> = 0;

        <android.media.AudioTrack: int PLAYSTATE_PLAYING> = 3;

        <android.media.AudioTrack: int PLAYSTATE_PAUSED> = 2;

        <android.media.AudioTrack: int PLAYSTATE_STOPPED> = 1;

        <android.media.AudioTrack: int CHANNEL_COUNT_MAX> = 8;

        <android.media.AudioTrack: int SAMPLE_RATE_HZ_MAX> = 96000;

        <android.media.AudioTrack: int SAMPLE_RATE_HZ_MIN> = 4000;

        <android.media.AudioTrack: float GAIN_MAX> = 1.0F;

        <android.media.AudioTrack: float GAIN_MIN> = 0.0F;

        return;
    }
}
