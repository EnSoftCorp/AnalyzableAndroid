class android.graphics.drawable.VectorDrawable$VectorDrawableState extends android.graphics.drawable.Drawable$ConstantState
{
    int[] mThemeAttrs;
    int mChangingConfigurations;
    android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer;
    android.content.res.ColorStateList mTint;
    android.graphics.PorterDuff$Mode mTintMode;
    boolean mAutoMirrored;
    android.graphics.Bitmap mCachedBitmap;
    int[] mCachedThemeAttrs;
    android.content.res.ColorStateList mCachedTint;
    android.graphics.PorterDuff$Mode mCachedTintMode;
    int mCachedRootAlpha;
    boolean mCachedAutoMirrored;
    boolean mCacheDirty;
    android.graphics.Paint mTempPaint;

    public void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0, r1;
        android.graphics.PorterDuff$Mode $r2, $r11;
        int[] $r3;
        int $i0;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r4, $r5, $r6, $r8, $r13, $r15, $r18, $r19;
        android.graphics.Paint $r7, $r9, $r12, $r14, $r16, $r21;
        android.content.res.ColorStateList $r10;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = null;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode> = $r2;

        if r1 == null goto label3;

        $r3 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs> = $r3;

        $i0 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations> = $i0;

        $r4 = new android.graphics.drawable.VectorDrawable$VPathRenderer;

        $r5 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        specialinvoke $r4.<android.graphics.drawable.VectorDrawable$VPathRenderer: void <init>(android.graphics.drawable.VectorDrawable$VPathRenderer)>($r5);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer> = $r4;

        $r6 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r7 = staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$300(android.graphics.drawable.VectorDrawable$VPathRenderer)>($r6);

        if $r7 == null goto label1;

        $r18 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r16 = new android.graphics.Paint;

        $r19 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r21 = staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$300(android.graphics.drawable.VectorDrawable$VPathRenderer)>($r19);

        specialinvoke $r16.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r21);

        staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$302(android.graphics.drawable.VectorDrawable$VPathRenderer,android.graphics.Paint)>($r18, $r16);

     label1:
        $r8 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r9 = staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$400(android.graphics.drawable.VectorDrawable$VPathRenderer)>($r8);

        if $r9 == null goto label2;

        $r15 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r12 = new android.graphics.Paint;

        $r13 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $r14 = staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$400(android.graphics.drawable.VectorDrawable$VPathRenderer)>($r13);

        specialinvoke $r12.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r14);

        staticinvoke <android.graphics.drawable.VectorDrawable$VPathRenderer: android.graphics.Paint access$402(android.graphics.drawable.VectorDrawable$VPathRenderer,android.graphics.Paint)>($r15, $r12);

     label2:
        $r10 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = $r10;

        $r11 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode> = $r11;

        $z0 = r1.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored> = $z0;

     label3:
        return;
    }

    public void drawCachedBitmapWithRootAlpha(android.graphics.Canvas, android.graphics.ColorFilter)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.Canvas r1;
        android.graphics.ColorFilter r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.ColorFilter;

        r3 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint getPaint(android.graphics.ColorFilter)>(r2);

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r4, 0.0F, 0.0F, r3);

        return;
    }

    public boolean hasTranslucentRoot()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        if $i0 >= 255 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.graphics.Paint getPaint(android.graphics.ColorFilter)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.ColorFilter r1;
        boolean $z0;
        android.graphics.Paint $r2, $r4, $r5, $r7, $r8, $r9;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r3;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.ColorFilter;

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean hasTranslucentRoot()>();

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint>;

        if $r2 != null goto label2;

        $r8 = new android.graphics.Paint;

        specialinvoke $r8.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint> = $r8;

        $r9 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint>;

        virtualinvoke $r9.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

     label2:
        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        virtualinvoke $r4.<android.graphics.Paint: void setAlpha(int)>($i0);

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint>;

        virtualinvoke $r5.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        $r7 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Paint mTempPaint>;

        return $r7;
    }

    public void updateCachedBitmap(android.graphics.Rect)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.Rect r1;
        android.graphics.Canvas r2, $r4;
        android.graphics.Bitmap $r3, $r5;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r6;
        int $i0, $i1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        virtualinvoke $r3.<android.graphics.Bitmap: void eraseColor(int)>(0);

        $r4 = new android.graphics.Canvas;

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r5);

        r2 = $r4;

        $r6 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        virtualinvoke $r6.<android.graphics.drawable.VectorDrawable$VPathRenderer: void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter)>(r2, $i0, $i1, null);

        return;
    }

    public void createCachedBitmapIfNeeded(android.graphics.Rect)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap $r2, $r4;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap$Config $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        if $r2 == null goto label1;

        $i2 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $z0 = virtualinvoke r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean canReuseBitmap(int,int)>($i2, $i3);

        if $z0 != 0 goto label2;

     label1:
        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r3);

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap> = $r4;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 1;

     label2:
        return;
    }

    public boolean canReuseBitmap(int, int)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int i0, i1, $i2, $i3;
        android.graphics.Bitmap $r1, $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        $i2 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        if i0 != $i2 goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.Bitmap mCachedBitmap>;

        $i3 = virtualinvoke $r2.<android.graphics.Bitmap: int getHeight()>();

        if i1 != $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean canReuseCache()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        boolean $z0, $z1, $z2;
        int[] $r1, $r2;
        android.content.res.ColorStateList $r3, $r4;
        android.graphics.PorterDuff$Mode $r5, $r6;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r7;
        int $i0, $i1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $z0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mCachedThemeAttrs>;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r2 != $r1 goto label1;

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mCachedTint>;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mCachedTintMode>;

        $r5 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        if $r6 != $r5 goto label1;

        $z2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCachedAutoMirrored>;

        $z1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        if $z2 != $z1 goto label1;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mCachedRootAlpha>;

        $r7 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i1 = virtualinvoke $r7.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void updateCacheStates()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int[] $r1;
        android.content.res.ColorStateList $r2;
        android.graphics.PorterDuff$Mode $r3;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r4;
        int $i0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mCachedThemeAttrs> = $r1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mCachedTint> = $r2;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mCachedTintMode> = $r3;

        $r4 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $i0 = virtualinvoke $r4.<android.graphics.drawable.VectorDrawable$VPathRenderer: int getRootAlpha()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mCachedRootAlpha> = $i0;

        $z0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mAutoMirrored>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCachedAutoMirrored> = $z0;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: boolean mCacheDirty> = 0;

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        boolean $z0, $z1, $z2;
        int[] $r1;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2, $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int[] mThemeAttrs>;

        if $r1 != null goto label1;

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer>;

        $z2 = virtualinvoke $r3.<android.graphics.drawable.VectorDrawable$VPathRenderer: boolean canApplyTheme()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.PorterDuff$Mode $r1;
        android.graphics.drawable.VectorDrawable$VPathRenderer $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.content.res.ColorStateList mTint> = null;

        $r1 = <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE>;

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.PorterDuff$Mode mTintMode> = $r1;

        $r2 = new android.graphics.drawable.VectorDrawable$VPathRenderer;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable$VPathRenderer: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: android.graphics.drawable.VectorDrawable$VPathRenderer mVPathRenderer> = $r2;

        return;
    }

    public android.graphics.drawable.Drawable newDrawable()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.graphics.drawable.VectorDrawable $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $r1 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r1.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.content.res.Resources$Theme,android.graphics.drawable.VectorDrawable$1)>(r0, null, null, null);

        return $r1;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.content.res.Resources r1;
        android.graphics.drawable.VectorDrawable $r2;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.content.res.Resources;

        $r2 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r2.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.content.res.Resources$Theme,android.graphics.drawable.VectorDrawable$1)>(r0, r1, null, null);

        return $r2;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        android.content.res.Resources r1;
        android.content.res.Resources$Theme r2;
        android.graphics.drawable.VectorDrawable $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.content.res.Resources$Theme;

        $r3 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r3.<android.graphics.drawable.VectorDrawable: void <init>(android.graphics.drawable.VectorDrawable$VectorDrawableState,android.content.res.Resources,android.content.res.Resources$Theme,android.graphics.drawable.VectorDrawable$1)>(r0, r1, r2, null);

        return $r3;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.VectorDrawable$VectorDrawableState r0;
        int $i0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VectorDrawableState;

        $i0 = r0.<android.graphics.drawable.VectorDrawable$VectorDrawableState: int mChangingConfigurations>;

        return $i0;
    }
}
