public class android.filterpacks.imageproc.DocumentaryFilter extends android.filterfw.core.Filter
{
    private int mTileSize;
    private android.filterfw.core.Program mProgram;
    private java.util.Random mRandom;
    private int mWidth;
    private int mHeight;
    private int mTarget;
    private final java.lang.String mDocumentaryShader;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        java.lang.String r1;
        java.util.Date $r3, $r5;
        java.util.Random $r4;
        long $l0;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mTileSize> = 640;

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth> = 0;

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight> = 0;

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mTarget> = 0;

        r0.<android.filterpacks.imageproc.DocumentaryFilter: java.lang.String mDocumentaryShader> = "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform vec2 seed;\nuniform float stepsize;\nuniform float inv_max_dist;\nuniform vec2 scale;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float dither = rand(v_texcoord + seed);\n  vec3 xform = clamp(2.0 * color.rgb, 0.0, 1.0);\n  vec3 temp = clamp(2.0 * (color.rgb + stepsize), 0.0, 1.0);\n  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\n  float gray = dot(new_color, vec3(0.299, 0.587, 0.114));\n  new_color = vec3(gray, gray, gray);\n  vec2 coord = v_texcoord - vec2(0.5, 0.5);\n  float dist = length(coord * scale);\n  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.83) * 20.0)) + 0.15;\n  gl_FragColor = vec4(new_color * lumen, color.a);\n}\n";

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r4 = new java.util.Random;

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        specialinvoke $r4.<java.util.Random: void <init>(long)>($l0);

        r0.<android.filterpacks.imageproc.DocumentaryFilter: java.util.Random mRandom> = $r4;

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>(3);

        virtualinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        return r2;
    }

    public void initProgram(android.filterfw.core.FilterContext, int)
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0, $i1;
        android.filterfw.core.ShaderProgram r2, $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r3.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nuniform sampler2D tex_sampler_0;\nuniform vec2 seed;\nuniform float stepsize;\nuniform float inv_max_dist;\nuniform vec2 scale;\nvarying vec2 v_texcoord;\nfloat rand(vec2 loc) {\n  float theta1 = dot(loc, vec2(0.9898, 0.233));\n  float theta2 = dot(loc, vec2(12.0, 78.0));\n  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);\n  float temp = mod(197.0 * value, 1.0) + value;\n  float part1 = mod(220.0 * temp, 1.0) + temp;\n  float part2 = value * 0.5453;\n  float part3 = cos(theta1 + theta2) * 0.43758;\n  return fract(part1 + part2 + part3);\n}\nvoid main() {\n  vec4 color = texture2D(tex_sampler_0, v_texcoord);\n  float dither = rand(v_texcoord + seed);\n  vec3 xform = clamp(2.0 * color.rgb, 0.0, 1.0);\n  vec3 temp = clamp(2.0 * (color.rgb + stepsize), 0.0, 1.0);\n  vec3 new_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);\n  float gray = dot(new_color, vec3(0.299, 0.587, 0.114));\n  new_color = vec3(gray, gray, gray);\n  vec2 coord = v_texcoord - vec2(0.5, 0.5);\n  float dist = length(coord * scale);\n  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.83) * 20.0)) + 0.15;\n  gl_FragColor = vec4(new_color * lumen, color.a);\n}\n");

        r2 = $r3;

        $i1 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mTileSize>;

        virtualinvoke r2.<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)>($i1);

        r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram> = r2;

        goto label3;

     label2:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter Sharpen does not support frames of target ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label3:
        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mTarget> = i0;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r4;
        android.filterfw.core.FrameFormat r3;
        android.filterfw.core.Program $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.filterfw.core.FrameManager $r6;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r5 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        if $r5 == null goto label1;

        $i6 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        $i8 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mTarget>;

        if $i6 == $i8 goto label2;

     label1:
        $i0 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getTarget()>();

        virtualinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: void initProgram(android.filterfw.core.FilterContext,int)>(r1, $i0);

     label2:
        $i1 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i2 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth>;

        if $i1 != $i2 goto label3;

        $i5 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i7 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight>;

        if $i5 == $i7 goto label4;

     label3:
        $i3 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getWidth()>();

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth> = $i3;

        $i4 = virtualinvoke r3.<android.filterfw.core.FrameFormat: int getHeight()>();

        r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight> = $i4;

        specialinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: void initParameters()>();

     label4:
        $r6 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r4 = virtualinvoke $r6.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r3);

        $r7 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r7.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r4);

        virtualinvoke r0.<android.filterpacks.imageproc.DocumentaryFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r4);

        virtualinvoke r4.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }

    private void initParameters()
    {
        android.filterpacks.imageproc.DocumentaryFilter r0;
        float[] r1, r2, $r10;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        android.filterfw.core.Program $r3, $r4, $r5, $r6, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1;
        java.lang.Float $r7, $r8;
        java.util.Random $r9, $r11;

        r0 := @this: android.filterpacks.imageproc.DocumentaryFilter;

        $r3 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        if $r3 == null goto label3;

        r1 = newarray (float)[2];

        $i1 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth>;

        $i0 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight>;

        if $i1 <= $i0 goto label1;

        r1[0] = 1.0F;

        $i4 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight>;

        $f17 = (float) $i4;

        $i5 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth>;

        $f16 = (float) $i5;

        $f15 = $f17 / $f16;

        r1[1] = $f15;

        goto label2;

     label1:
        $i2 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mWidth>;

        $f2 = (float) $i2;

        $i3 = r0.<android.filterpacks.imageproc.DocumentaryFilter: int mHeight>;

        $f1 = (float) $i3;

        $f3 = $f2 / $f1;

        r1[0] = $f3;

        r1[1] = 1.0F;

     label2:
        $f5 = r1[0];

        $f4 = r1[0];

        $f8 = $f5 * $f4;

        $f7 = r1[1];

        $f6 = r1[1];

        $f9 = $f7 * $f6;

        $f10 = $f8 + $f9;

        $d0 = (double) $f10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f11 = (float) $d1;

        f0 = $f11 * 0.5F;

        $r4 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r4.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("scale", r1);

        $r5 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        $f12 = 1.0F / f0;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        virtualinvoke $r5.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("inv_max_dist", $r7);

        $r6 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.003921569F);

        virtualinvoke $r6.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("stepsize", $r8);

        $r10 = newarray (float)[2];

        $r9 = r0.<android.filterpacks.imageproc.DocumentaryFilter: java.util.Random mRandom>;

        $f13 = virtualinvoke $r9.<java.util.Random: float nextFloat()>();

        $r10[0] = $f13;

        $r11 = r0.<android.filterpacks.imageproc.DocumentaryFilter: java.util.Random mRandom>;

        $f14 = virtualinvoke $r11.<java.util.Random: float nextFloat()>();

        $r10[1] = $f14;

        r2 = $r10;

        $r12 = r0.<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r12.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("seed", r2);

     label3:
        return;
    }
}
