public class android.os.storage.StorageManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.content.ContentResolver mResolver;
    private final android.os.storage.IMountService mMountService;
    private final android.os.Looper mTgtLooper;
    private android.os.storage.StorageManager$MountServiceBinderListener mBinderListener;
    private java.util.List mListeners;
    private final java.util.concurrent.atomic.AtomicInteger mNextNonce;
    private final android.os.storage.StorageManager$ObbActionListener mObbActionListener;
    private static final int DEFAULT_THRESHOLD_PERCENTAGE;
    private static final long DEFAULT_THRESHOLD_MAX_BYTES;
    private static final long DEFAULT_FULL_THRESHOLD_BYTES;
    public static final int CRYPT_TYPE_PASSWORD;
    public static final int CRYPT_TYPE_DEFAULT;
    public static final int CRYPT_TYPE_PATTERN;
    public static final int CRYPT_TYPE_PIN;
    public static final java.lang.String SYSTEM_LOCALE_KEY;
    public static final java.lang.String OWNER_INFO_KEY;
    public static final java.lang.String PATTERN_VISIBLE_KEY;

    private int getNextNonce()
    {
        android.os.storage.StorageManager r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: java.util.concurrent.atomic.AtomicInteger mNextNonce>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return $i0;
    }

    public static android.os.storage.StorageManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.os.storage.StorageManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("storage");

        $r2 = (android.os.storage.StorageManager) $r1;

        return $r2;
    }

    public void <init>(android.content.ContentResolver, android.os.Looper) throws android.os.RemoteException
    {
        android.os.storage.StorageManager r0;
        android.content.ContentResolver r1;
        android.os.Looper r2;
        java.util.ArrayList $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        android.os.storage.StorageManager$ObbActionListener $r5;
        android.os.IBinder $r6;
        android.os.storage.IMountService $r7, $r8;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.os.storage.StorageManager: java.util.List mListeners> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.os.storage.StorageManager: java.util.concurrent.atomic.AtomicInteger mNextNonce> = $r4;

        $r5 = new android.os.storage.StorageManager$ObbActionListener;

        specialinvoke $r5.<android.os.storage.StorageManager$ObbActionListener: void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)>(r0, null);

        r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener> = $r5;

        r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver> = r1;

        r0.<android.os.storage.StorageManager: android.os.Looper mTgtLooper> = r2;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r7 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r6);

        r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService> = $r7;

        $r8 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        if $r8 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManager", "Unable to connect to mount service! - is it running yet?");

        return;

     label1:
        return;
    }

    public void registerListener(android.os.storage.StorageEventListener)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageEventListener r1;
        java.util.List r2, $r5, $r8;
        java.lang.Throwable r4, $r12;
        android.os.storage.StorageManager$MountServiceBinderListener $r6, $r9, $r10;
        android.os.storage.StorageManager$ListenerDelegate $r7;
        android.os.storage.IMountService $r11;
        android.os.RemoteException $r13;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.os.storage.StorageEventListener;

        if r1 != null goto label01;

        return;

     label01:
        $r5 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$MountServiceBinderListener mBinderListener>;

        if $r6 != null goto label07;

     label03:
        $r9 = new android.os.storage.StorageManager$MountServiceBinderListener;

        specialinvoke $r9.<android.os.storage.StorageManager$MountServiceBinderListener: void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)>(r0, null);

        r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$MountServiceBinderListener mBinderListener> = $r9;

        $r11 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r10 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$MountServiceBinderListener mBinderListener>;

        interfaceinvoke $r11.<android.os.storage.IMountService: void registerListener(android.os.storage.IMountServiceListener)>($r10);

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManager", "Register mBinderListener failed");

        exitmonitor r2;

     label06:
        return;

     label07:
        $r8 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        $r7 = new android.os.storage.StorageManager$ListenerDelegate;

        specialinvoke $r7.<android.os.storage.StorageManager$ListenerDelegate: void <init>(android.os.storage.StorageManager,android.os.storage.StorageEventListener)>(r0, r1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void unregisterListener(android.os.storage.StorageEventListener)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageEventListener r1, $r14;
        java.util.List r2, $r5, $r6, $r7, $r12, $r13;
        int i0, i1, $i2;
        android.os.storage.StorageManager$ListenerDelegate r3;
        java.lang.Throwable r4, $r15;
        android.os.storage.StorageManager$MountServiceBinderListener $r8, $r9;
        android.os.storage.IMountService $r10;
        java.lang.Object $r11;
        android.os.RemoteException $r17;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.os.storage.StorageEventListener;

        if r1 != null goto label01;

        return;

     label01:
        $r5 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label05;

        $r12 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        $r11 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (android.os.storage.StorageManager$ListenerDelegate) $r11;

        $r14 = virtualinvoke r3.<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageEventListener getListener()>();

        if $r14 != r1 goto label04;

        $r13 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        interfaceinvoke $r13.<java.util.List: java.lang.Object remove(int)>(i1);

        goto label05;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r7 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i2 != 0 goto label10;

        $r8 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$MountServiceBinderListener mBinderListener>;

        if $r8 == null goto label10;

     label06:
        $r10 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r9 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$MountServiceBinderListener mBinderListener>;

        interfaceinvoke $r10.<android.os.storage.IMountService: void unregisterListener(android.os.storage.IMountServiceListener)>($r9);

     label07:
        goto label10;

     label08:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManager", "Unregister mBinderListener failed");

        exitmonitor r2;

     label09:
        return;

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r2;

     label13:
        throw r4;

     label14:
        return;

        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void enableUsbMassStorage()
    {
        android.os.storage.StorageManager r0;
        java.lang.Exception r1, $r3;
        android.os.storage.IMountService $r2;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        interfaceinvoke $r2.<android.os.storage.IMountService: void setUsbMassStorageEnabled(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to enable UMS", r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void disableUsbMassStorage()
    {
        android.os.storage.StorageManager r0;
        java.lang.Exception r1, $r3;
        android.os.storage.IMountService $r2;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        interfaceinvoke $r2.<android.os.storage.IMountService: void setUsbMassStorageEnabled(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to disable UMS", r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isUsbMassStorageConnected()
    {
        android.os.storage.StorageManager r0;
        java.lang.Exception r1, $r3;
        android.os.storage.IMountService $r2;
        boolean $z0;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $z0 = interfaceinvoke $r2.<android.os.storage.IMountService: boolean isUsbMassStorageConnected()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to get UMS connection state", r1);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isUsbMassStorageEnabled()
    {
        android.os.storage.StorageManager r0;
        android.os.RemoteException r1, $r3;
        android.os.storage.IMountService $r2;
        boolean $z0;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $z0 = interfaceinvoke $r2.<android.os.storage.IMountService: boolean isUsbMassStorageEnabled()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to get UMS enable state", r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean mountObb(java.lang.String, java.lang.String, android.os.storage.OnObbStateChangeListener)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, r2, r4, $r15;
        android.os.storage.OnObbStateChangeListener r3;
        int i0;
        java.io.File $r7;
        android.os.storage.StorageManager$ObbActionListener $r8, $r9;
        android.os.storage.IMountService $r10;
        java.io.IOException $r11, r18;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r16;
        android.os.RemoteException $r17, r19;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.storage.OnObbStateChangeListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "listener cannot be null");

     label1:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r1);

        r4 = virtualinvoke $r7.<java.io.File: java.lang.String getCanonicalPath()>();

        $r8 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        i0 = virtualinvoke $r8.<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>(r3);

        $r10 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r9 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        interfaceinvoke $r10.<android.os.storage.IMountService: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)>(r1, r4, r2, $r9, i0);

     label2:
        return 1;

     label3:
        $r11 := @caughtexception;

        r18 = $r11;

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve path: ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r18);

        throw $r12;

     label4:
        $r17 := @caughtexception;

        r19 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to mount OBB", r19);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public boolean unmountObb(java.lang.String, boolean, android.os.storage.OnObbStateChangeListener)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.storage.OnObbStateChangeListener r2;
        int i0;
        android.os.storage.StorageManager$ObbActionListener $r5, $r6;
        android.os.storage.IMountService $r7;
        android.os.RemoteException $r8, r9;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.storage.OnObbStateChangeListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "listener cannot be null");

     label1:
        $r5 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        i0 = virtualinvoke $r5.<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>(r2);

        $r7 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r6 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        interfaceinvoke $r7.<android.os.storage.IMountService: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>(r1, z0, $r6, i0);

     label2:
        return 1;

     label3:
        $r8 := @caughtexception;

        r9 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to mount OBB", r9);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isObbMounted(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r5;
        android.os.storage.IMountService $r4;
        boolean $z0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $z0 = interfaceinvoke $r4.<android.os.storage.IMountService: boolean isObbMounted(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to check if OBB is mounted", r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMountedObbPath(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r5;
        android.os.RemoteException r2, $r6;
        android.os.storage.IMountService $r4;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r5 = interfaceinvoke $r4.<android.os.storage.IMountService: java.lang.String getMountedObbPath(java.lang.String)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to find mounted path for OBB", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getVolumeState(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r5;
        android.os.RemoteException r2, $r6;
        android.os.storage.IMountService $r3, $r4;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        if $r3 != null goto label1;

        return "removed";

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        $r5 = interfaceinvoke $r4.<android.os.storage.IMountService: java.lang.String getVolumeState(java.lang.String)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to get volume state", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.storage.StorageVolume[] getVolumeList()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageVolume[] r1, r2, $r7, $r8;
        int i0, i1;
        android.os.storage.IMountService $r3, $r4;
        android.os.storage.StorageVolume $r5, $r6;
        android.os.RemoteException $r9, r10;

        r0 := @this: android.os.storage.StorageManager;

        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        if $r3 != null goto label1;

        $r8 = newarray (android.os.storage.StorageVolume)[0];

        return $r8;

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IMountService mMountService>;

        r1 = interfaceinvoke $r4.<android.os.storage.IMountService: android.os.storage.StorageVolume[] getVolumeList()>();

        if r1 != null goto label3;

        $r7 = newarray (android.os.storage.StorageVolume)[0];

     label2:
        return $r7;

     label3:
        i0 = lengthof r1;

        r2 = newarray (android.os.storage.StorageVolume)[i0];

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r5 = r1[i1];

        $r6 = (android.os.storage.StorageVolume) $r5;

        r2[i1] = $r6;

        i1 = i1 + 1;

        goto label4;

     label5:
        return r2;

     label6:
        $r9 := @caughtexception;

        r10 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", "Failed to get volume list", r10);

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label5 with label6;
    }

    public java.lang.String[] getVolumePaths()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageVolume[] r1;
        int i0, i1;
        java.lang.String[] r2;
        android.os.storage.StorageVolume $r3;
        java.lang.String $r4;

        r0 := @this: android.os.storage.StorageManager;

        r1 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        if r1 != null goto label1;

        return null;

     label1:
        i0 = lengthof r1;

        r2 = newarray (java.lang.String)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        $r4 = virtualinvoke $r3.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public android.os.storage.StorageVolume getPrimaryVolume()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageVolume[] $r1;
        android.os.storage.StorageVolume $r2;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        $r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])>($r1);

        return $r2;
    }

    public static android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])
    {
        android.os.storage.StorageVolume[] r0, r1;
        int i0, i1;
        android.os.storage.StorageVolume r2;
        boolean $z0;

        r0 := @parameter0: android.os.storage.StorageVolume[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", "No primary storage defined");

        return null;
    }

    public long getStorageBytesUntilLow(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        long $l0, $l1, $l2;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $l0 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $l1 = virtualinvoke r0.<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)>(r1);

        $l2 = $l0 - $l1;

        return $l2;
    }

    public long getStorageLowBytes(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        long l0, l1, l2, $l4, $l5, $l6;
        android.content.ContentResolver $r2, $r3;
        int $i3;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "sys_storage_threshold_percentage", 10);

        l0 = (long) $i3;

        $l4 = virtualinvoke r1.<java.io.File: long getTotalSpace()>();

        $l5 = $l4 * l0;

        l1 = $l5 / 100L;

        $r3 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        l2 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r3, "sys_storage_threshold_max_bytes", 524288000L);

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>(l1, l2);

        return $l6;
    }

    public long getStorageFullBytes(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        android.content.ContentResolver $r2;
        long $l0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "sys_storage_full_threshold_bytes", 1048576L);

        return $l0;
    }

    static java.util.List access$000(android.os.storage.StorageManager)
    {
        android.os.storage.StorageManager r0;
        java.util.List $r1;

        r0 := @parameter0: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: java.util.List mListeners>;

        return $r1;
    }

    static int access$300(android.os.storage.StorageManager)
    {
        android.os.storage.StorageManager r0;
        int $i0;

        r0 := @parameter0: android.os.storage.StorageManager;

        $i0 = specialinvoke r0.<android.os.storage.StorageManager: int getNextNonce()>();

        return $i0;
    }

    static android.os.Looper access$400(android.os.storage.StorageManager)
    {
        android.os.storage.StorageManager r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: android.os.Looper mTgtLooper>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.os.storage.StorageManager: java.lang.String PATTERN_VISIBLE_KEY> = "PatternVisible";

        <android.os.storage.StorageManager: java.lang.String OWNER_INFO_KEY> = "OwnerInfo";

        <android.os.storage.StorageManager: java.lang.String SYSTEM_LOCALE_KEY> = "SystemLocale";

        <android.os.storage.StorageManager: int CRYPT_TYPE_PIN> = 3;

        <android.os.storage.StorageManager: int CRYPT_TYPE_PATTERN> = 2;

        <android.os.storage.StorageManager: int CRYPT_TYPE_DEFAULT> = 1;

        <android.os.storage.StorageManager: int CRYPT_TYPE_PASSWORD> = 0;

        <android.os.storage.StorageManager: long DEFAULT_FULL_THRESHOLD_BYTES> = 1048576L;

        <android.os.storage.StorageManager: long DEFAULT_THRESHOLD_MAX_BYTES> = 524288000L;

        <android.os.storage.StorageManager: int DEFAULT_THRESHOLD_PERCENTAGE> = 10;

        <android.os.storage.StorageManager: java.lang.String TAG> = "StorageManager";

        return;
    }
}
