public class android.net.SntpClient extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int REFERENCE_TIME_OFFSET;
    private static final int ORIGINATE_TIME_OFFSET;
    private static final int RECEIVE_TIME_OFFSET;
    private static final int TRANSMIT_TIME_OFFSET;
    private static final int NTP_PACKET_SIZE;
    private static final int NTP_PORT;
    private static final int NTP_MODE_CLIENT;
    private static final int NTP_VERSION;
    private static final long OFFSET_1900_TO_1970;
    private long mNtpTime;
    private long mNtpTimeReference;
    private long mRoundTripTime;

    public void <init>()
    {
        android.net.SntpClient r0;

        r0 := @this: android.net.SntpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean requestTime(java.lang.String, int)
    {
        android.net.SntpClient r0;
        java.lang.String r1;
        int i0, $i10, $i11;
        java.net.DatagramSocket r2, $r7;
        java.net.InetAddress r3;
        byte[] r4;
        java.net.DatagramPacket r5, r6, $r9, $r10;
        long l1, l2, l3, l4, l5, l6, l7, l8, l9, $l12, $l13, $l14, $l15, $l16, $l17, $l18;
        java.lang.Throwable r8, $r12;
        java.lang.Exception $r11;
        boolean z0;

        r0 := @this: android.net.SntpClient;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = null;

     label1:
        $r7 = new java.net.DatagramSocket;

        specialinvoke $r7.<java.net.DatagramSocket: void <init>()>();

        r2 = $r7;

        virtualinvoke r2.<java.net.DatagramSocket: void setSoTimeout(int)>(i0);

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r4 = newarray (byte)[48];

        $r9 = new java.net.DatagramPacket;

        $i10 = lengthof r4;

        specialinvoke $r9.<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>(r4, $i10, r3, 123);

        r5 = $r9;

        r4[0] = 27;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke r0.<android.net.SntpClient: void writeTimeStamp(byte[],int,long)>(r4, 40, l1);

        virtualinvoke r2.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r5);

        $r10 = new java.net.DatagramPacket;

        $i11 = lengthof r4;

        specialinvoke $r10.<java.net.DatagramPacket: void <init>(byte[],int)>(r4, $i11);

        r6 = $r10;

        virtualinvoke r2.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r6);

        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l12 = l3 - l2;

        l4 = l1 + $l12;

        l5 = specialinvoke r0.<android.net.SntpClient: long readTimeStamp(byte[],int)>(r4, 24);

        l6 = specialinvoke r0.<android.net.SntpClient: long readTimeStamp(byte[],int)>(r4, 32);

        l7 = specialinvoke r0.<android.net.SntpClient: long readTimeStamp(byte[],int)>(r4, 40);

        $l16 = l3 - l2;

        $l15 = l7 - l6;

        l8 = $l16 - $l15;

        $l14 = l6 - l5;

        $l13 = l7 - l4;

        $l17 = $l14 + $l13;

        l9 = $l17 / 2L;

        $l18 = l4 + l9;

        r0.<android.net.SntpClient: long mNtpTime> = $l18;

        r0.<android.net.SntpClient: long mNtpTimeReference> = l3;

        r0.<android.net.SntpClient: long mRoundTripTime> = l8;

     label2:
        if r2 == null goto label9;

        virtualinvoke r2.<java.net.DatagramSocket: void close()>();

        goto label9;

     label3:
        $r11 := @caughtexception;

        z0 = 0;

     label4:
        if r2 == null goto label5;

        virtualinvoke r2.<java.net.DatagramSocket: void close()>();

     label5:
        return z0;

     label6:
        $r12 := @caughtexception;

        r8 = $r12;

     label7:
        if r2 == null goto label8;

        virtualinvoke r2.<java.net.DatagramSocket: void close()>();

     label8:
        throw r8;

     label9:
        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public long getNtpTime()
    {
        android.net.SntpClient r0;
        long $l0;

        r0 := @this: android.net.SntpClient;

        $l0 = r0.<android.net.SntpClient: long mNtpTime>;

        return $l0;
    }

    public long getNtpTimeReference()
    {
        android.net.SntpClient r0;
        long $l0;

        r0 := @this: android.net.SntpClient;

        $l0 = r0.<android.net.SntpClient: long mNtpTimeReference>;

        return $l0;
    }

    public long getRoundTripTime()
    {
        android.net.SntpClient r0;
        long $l0;

        r0 := @this: android.net.SntpClient;

        $l0 = r0.<android.net.SntpClient: long mRoundTripTime>;

        return $l0;
    }

    private long read32(byte[], int)
    {
        android.net.SntpClient r0;
        byte[] r1;
        int i0, i5, i6, i7, i8, $i9, $i10, $i11, $i26, $i28, $i31, $i33;
        byte b1, b2, b3, b4, $b27, $b29, $b30, $b32;
        short $s12, $s13, $s14, $s15;
        long $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25;

        r0 := @this: android.net.SntpClient;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        b1 = r1[i0];

        $i9 = i0 + 1;

        b2 = r1[$i9];

        $i10 = i0 + 2;

        b3 = r1[$i10];

        $i11 = i0 + 3;

        b4 = r1[$i11];

        $s12 = b1 & 128;

        if $s12 != 128 goto label1;

        $b30 = b1 & 127;

        $i31 = $b30 + 128;

        goto label2;

     label1:
        $i31 = b1;

     label2:
        i5 = $i31;

        $s13 = b2 & 128;

        if $s13 != 128 goto label3;

        $b32 = b2 & 127;

        $i33 = $b32 + 128;

        goto label4;

     label3:
        $i33 = b2;

     label4:
        i6 = $i33;

        $s15 = b3 & 128;

        if $s15 != 128 goto label5;

        $b29 = b3 & 127;

        $i28 = $b29 + 128;

        goto label6;

     label5:
        $i28 = b3;

     label6:
        i7 = $i28;

        $s14 = b4 & 128;

        if $s14 != 128 goto label7;

        $b27 = b4 & 127;

        $i26 = $b27 + 128;

        goto label8;

     label7:
        $i26 = b4;

     label8:
        i8 = $i26;

        $l17 = (long) i5;

        $l18 = $l17 << 24;

        $l16 = (long) i6;

        $l19 = $l16 << 16;

        $l23 = $l18 + $l19;

        $l21 = (long) i7;

        $l20 = $l21 << 8;

        $l25 = $l23 + $l20;

        $l22 = (long) i8;

        $l24 = $l25 + $l22;

        return $l24;
    }

    private long readTimeStamp(byte[], int)
    {
        android.net.SntpClient r0;
        byte[] r1;
        int i0, $i3;
        long l1, l2, $l4, $l5, $l6, $l7, $l8;

        r0 := @this: android.net.SntpClient;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        l1 = specialinvoke r0.<android.net.SntpClient: long read32(byte[],int)>(r1, i0);

        $i3 = i0 + 4;

        l2 = specialinvoke r0.<android.net.SntpClient: long read32(byte[],int)>(r1, $i3);

        $l4 = l1 - 2208988800L;

        $l7 = $l4 * 1000L;

        $l5 = l2 * 1000L;

        $l6 = $l5 / 4294967296L;

        $l8 = $l7 + $l6;

        return $l8;
    }

    private void writeTimeStamp(byte[], int, long)
    {
        android.net.SntpClient r0;
        byte[] r1;
        int i0, $i7, $i11, $i14, $i17, $i19, $i22, $i25, $i28, i31, i32, i33, i34, i35, i36, i37;
        long l1, l2, l3, l4, $l5, $l6, $l9, $l12, $l15, $l18, $l20, $l21, $l24, l30;
        byte $b8, $b10, $b13, $b16, $b23, $b26, $b27, $b29;
        double $d0, $d1;

        r0 := @this: android.net.SntpClient;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 = l1 / 1000L;

        $l5 = l2 * 1000L;

        l3 = l1 - $l5;

        l30 = l2 + 2208988800L;

        i31 = i0 + 1;

        $l6 = l30 >> 24;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        r1[i0] = $b8;

        i32 = i31 + 1;

        $l9 = l30 >> 16;

        $i11 = (int) $l9;

        $b10 = (byte) $i11;

        r1[i31] = $b10;

        i33 = i32 + 1;

        $l12 = l30 >> 8;

        $i14 = (int) $l12;

        $b13 = (byte) $i14;

        r1[i32] = $b13;

        i34 = i33 + 1;

        $l15 = l30 >> 0;

        $i17 = (int) $l15;

        $b16 = (byte) $i17;

        r1[i33] = $b16;

        $l18 = l3 * 4294967296L;

        l4 = $l18 / 1000L;

        i35 = i34 + 1;

        $l20 = l4 >> 24;

        $i19 = (int) $l20;

        $b23 = (byte) $i19;

        r1[i34] = $b23;

        i36 = i35 + 1;

        $l21 = l4 >> 16;

        $i22 = (int) $l21;

        $b26 = (byte) $i22;

        r1[i35] = $b26;

        i37 = i36 + 1;

        $l24 = l4 >> 8;

        $i25 = (int) $l24;

        $b27 = (byte) $i25;

        r1[i36] = $b27;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 255.0;

        $i28 = (int) $d1;

        $b29 = (byte) $i28;

        r1[i37] = $b29;

        return;
    }

    public static void <clinit>()
    {
        <android.net.SntpClient: long OFFSET_1900_TO_1970> = 2208988800L;

        <android.net.SntpClient: int NTP_VERSION> = 3;

        <android.net.SntpClient: int NTP_MODE_CLIENT> = 3;

        <android.net.SntpClient: int NTP_PORT> = 123;

        <android.net.SntpClient: int NTP_PACKET_SIZE> = 48;

        <android.net.SntpClient: int TRANSMIT_TIME_OFFSET> = 40;

        <android.net.SntpClient: int RECEIVE_TIME_OFFSET> = 32;

        <android.net.SntpClient: int ORIGINATE_TIME_OFFSET> = 24;

        <android.net.SntpClient: int REFERENCE_TIME_OFFSET> = 16;

        <android.net.SntpClient: java.lang.String TAG> = "SntpClient";

        return;
    }
}
