class android.app.job.JobService$JobHandler extends android.os.Handler
{
    final android.app.job.JobService this$0;

    void <init>(android.app.job.JobService, android.os.Looper)
    {
        android.app.job.JobService$JobHandler r0;
        android.app.job.JobService r1;
        android.os.Looper r2;

        r0 := @this: android.app.job.JobService$JobHandler;

        r1 := @parameter0: android.app.job.JobService;

        r2 := @parameter1: android.os.Looper;

        r0.<android.app.job.JobService$JobHandler: android.app.job.JobService this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        return;
    }

    public void handleMessage(android.os.Message)
    {
        android.app.job.JobService$JobHandler r0;
        android.os.Message r1;
        android.app.job.JobParameters r2;
        boolean z0, $z1, z2, z3;
        android.app.job.IJobCallback r3;
        java.lang.Object $r5;
        int $i0, $i1, $i3, $i7;
        android.app.job.JobService $r6, $r7;
        java.lang.Exception $r8, $r11, r17, r18;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10, $r16;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.lang.String $r14;

        r0 := @this: android.app.job.JobService$JobHandler;

        r1 := @parameter0: android.os.Message;

        $r5 = r1.<android.os.Message: java.lang.Object obj>;

        r2 = (android.app.job.JobParameters) $r5;

        $i0 = r1.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label07;
            default: goto label14;
        };

     label01:
        $r6 = r0.<android.app.job.JobService$JobHandler: android.app.job.JobService this$0>;

        z0 = virtualinvoke $r6.<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>(r2);

        specialinvoke r0.<android.app.job.JobService$JobHandler: void ackStartMessage(android.app.job.JobParameters,boolean)>(r2, z0);

     label02:
        goto label15;

     label03:
        $r11 := @caughtexception;

        r17 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while executing job: ");

        $i7 = virtualinvoke r2.<android.app.job.JobParameters: int getJobId()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", $r14);

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r17);

        throw $r16;

     label04:
        $r7 = r0.<android.app.job.JobService$JobHandler: android.app.job.JobService this$0>;

        z2 = virtualinvoke $r7.<android.app.job.JobService: boolean onStopJob(android.app.job.JobParameters)>(r2);

        specialinvoke r0.<android.app.job.JobService$JobHandler: void ackStopMessage(android.app.job.JobParameters,boolean)>(r2, z2);

     label05:
        goto label15;

     label06:
        $r8 := @caughtexception;

        r18 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("JobService", "Application unable to handle onStopJob.", r18);

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        throw $r10;

     label07:
        $i1 = r1.<android.os.Message: int arg2>;

        if $i1 != 1 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        z3 = $z1;

        r3 = virtualinvoke r2.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        if r3 == null goto label13;

     label10:
        $i3 = virtualinvoke r2.<android.app.job.JobParameters: int getJobId()>();

        interfaceinvoke r3.<android.app.job.IJobCallback: void jobFinished(int,boolean)>($i3, z3);

     label11:
        goto label15;

     label12:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", "Error reporting job finish to system: binder has goneaway.");

        goto label15;

     label13:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", "finishJob() called for a nonexistent job id.");

        goto label15;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", "Unrecognised message received.");

     label15:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    private void ackStartMessage(android.app.job.JobParameters, boolean)
    {
        android.app.job.JobService$JobHandler r0;
        android.app.job.JobParameters r1;
        boolean z0, $z1;
        android.app.job.IJobCallback r2;
        int i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.job.JobService$JobHandler;

        r1 := @parameter0: android.app.job.JobParameters;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r1.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        i0 = virtualinvoke r1.<android.app.job.JobParameters: int getJobId()>();

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.job.IJobCallback: void acknowledgeStartMessage(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", "System unreachable for starting job.");

        goto label5;

     label4:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobService", 3);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("JobService", "Attempting to ack a job that has already been processed.");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void ackStopMessage(android.app.job.JobParameters, boolean)
    {
        android.app.job.JobService$JobHandler r0;
        android.app.job.JobParameters r1;
        boolean z0, $z1;
        android.app.job.IJobCallback r2;
        int i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.job.JobService$JobHandler;

        r1 := @parameter0: android.app.job.JobParameters;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r1.<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()>();

        i0 = virtualinvoke r1.<android.app.job.JobParameters: int getJobId()>();

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.job.IJobCallback: void acknowledgeStopMessage(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("JobService", "System unreachable for stopping job.");

        goto label5;

     label4:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobService", 3);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("JobService", "Attempting to ack a job that has already been processed.");

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
