public class android.net.NetworkPolicyManager extends java.lang.Object
{
    public static final int POLICY_NONE;
    public static final int POLICY_REJECT_METERED_BACKGROUND;
    public static final int POLICY_ALLOW_BACKGROUND_BATTERY_SAVE;
    public static final int RULE_ALLOW_ALL;
    public static final int RULE_REJECT_METERED;
    private static final boolean ALLOW_PLATFORM_APP_POLICY;
    public static final java.lang.String EXTRA_NETWORK_TEMPLATE;
    private android.net.INetworkPolicyManager mService;

    public void <init>(android.net.INetworkPolicyManager)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.net.INetworkPolicyManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing INetworkPolicyManager");

        throw $r2;

     label1:
        r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService> = r1;

        return;
    }

    public static android.net.NetworkPolicyManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.net.NetworkPolicyManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("netpolicy");

        $r2 = (android.net.NetworkPolicyManager) $r1;

        return $r2;
    }

    public void setUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void setUidPolicy(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void addUidPolicy(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void removeUidPolicy(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getUidPolicy(int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, $i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $i1 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: int getUidPolicy(int)>(i0);

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int[] getUidsWithPolicy(int)
    {
        android.net.NetworkPolicyManager r0;
        int i0;
        android.net.INetworkPolicyManager $r2;
        int[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: int[] getUidsWithPolicy(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (int)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int[] getPowerSaveAppIdWhitelist()
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r2;
        int[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: int[] getPowerSaveAppIdWhitelist()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (int)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerListener(android.net.INetworkPolicyListener)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyListener r1;
        android.net.INetworkPolicyManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.net.INetworkPolicyListener;

     label1:
        $r3 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r3.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterListener(android.net.INetworkPolicyListener)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyListener r1;
        android.net.INetworkPolicyManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.net.INetworkPolicyListener;

     label1:
        $r3 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r3.<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[])
    {
        android.net.NetworkPolicyManager r0;
        android.net.NetworkPolicy[] r1;
        android.net.INetworkPolicyManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.net.NetworkPolicy[];

     label1:
        $r3 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r3.<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies()
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r2;
        android.net.NetworkPolicy[] $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRestrictBackground(boolean)
    {
        android.net.NetworkPolicyManager r0;
        boolean z0;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getRestrictBackground()
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.NetworkPolicyManager;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $z0 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: boolean getRestrictBackground()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long computeLastCycleBoundary(long, android.net.NetworkPolicy)
    {
        long l0, $l5;
        android.net.NetworkPolicy r0;
        android.text.format.Time r1, r2, r3, $r4, $r6, $r7;
        int $i1, $i3, $i4, $i7, $i8, $i9;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r8;

        l0 := @parameter0: long;

        r0 := @parameter1: android.net.NetworkPolicy;

        $i1 = r0.<android.net.NetworkPolicy: int cycleDay>;

        if $i1 != -1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to compute boundary without cycleDay");

        throw $r8;

     label1:
        $r4 = new android.text.format.Time;

        $r5 = r0.<android.net.NetworkPolicy: java.lang.String cycleTimezone>;

        specialinvoke $r4.<android.text.format.Time: void <init>(java.lang.String)>($r5);

        r1 = $r4;

        virtualinvoke r1.<android.text.format.Time: void set(long)>(l0);

        $r6 = new android.text.format.Time;

        specialinvoke $r6.<android.text.format.Time: void <init>(android.text.format.Time)>(r1);

        r2 = $r6;

        r2.<android.text.format.Time: int second> = 0;

        r2.<android.text.format.Time: int minute> = 0;

        r2.<android.text.format.Time: int hour> = 0;

        $i3 = r0.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <android.net.NetworkPolicyManager: void snapToCycleDay(android.text.format.Time,int)>(r2, $i3);

        $i4 = staticinvoke <android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>(r2, r1);

        if $i4 < 0 goto label2;

        $r7 = new android.text.format.Time;

        specialinvoke $r7.<android.text.format.Time: void <init>(android.text.format.Time)>(r1);

        r3 = $r7;

        r3.<android.text.format.Time: int second> = 0;

        r3.<android.text.format.Time: int minute> = 0;

        r3.<android.text.format.Time: int hour> = 0;

        r3.<android.text.format.Time: int monthDay> = 1;

        $i8 = r3.<android.text.format.Time: int month>;

        $i7 = $i8 - 1;

        r3.<android.text.format.Time: int month> = $i7;

        virtualinvoke r3.<android.text.format.Time: long normalize(boolean)>(1);

        virtualinvoke r2.<android.text.format.Time: void set(android.text.format.Time)>(r3);

        $i9 = r0.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <android.net.NetworkPolicyManager: void snapToCycleDay(android.text.format.Time,int)>(r2, $i9);

     label2:
        $l5 = virtualinvoke r2.<android.text.format.Time: long toMillis(boolean)>(1);

        return $l5;
    }

    public static long computeNextCycleBoundary(long, android.net.NetworkPolicy)
    {
        long l0, $l5;
        android.net.NetworkPolicy r0;
        android.text.format.Time r1, r2, r3, $r4, $r6, $r7;
        int $i1, $i3, $i4, $i7, $i8, $i9;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r8;

        l0 := @parameter0: long;

        r0 := @parameter1: android.net.NetworkPolicy;

        $i1 = r0.<android.net.NetworkPolicy: int cycleDay>;

        if $i1 != -1 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to compute boundary without cycleDay");

        throw $r8;

     label1:
        $r4 = new android.text.format.Time;

        $r5 = r0.<android.net.NetworkPolicy: java.lang.String cycleTimezone>;

        specialinvoke $r4.<android.text.format.Time: void <init>(java.lang.String)>($r5);

        r1 = $r4;

        virtualinvoke r1.<android.text.format.Time: void set(long)>(l0);

        $r6 = new android.text.format.Time;

        specialinvoke $r6.<android.text.format.Time: void <init>(android.text.format.Time)>(r1);

        r2 = $r6;

        r2.<android.text.format.Time: int second> = 0;

        r2.<android.text.format.Time: int minute> = 0;

        r2.<android.text.format.Time: int hour> = 0;

        $i3 = r0.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <android.net.NetworkPolicyManager: void snapToCycleDay(android.text.format.Time,int)>(r2, $i3);

        $i4 = staticinvoke <android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>(r2, r1);

        if $i4 > 0 goto label2;

        $r7 = new android.text.format.Time;

        specialinvoke $r7.<android.text.format.Time: void <init>(android.text.format.Time)>(r1);

        r3 = $r7;

        r3.<android.text.format.Time: int second> = 0;

        r3.<android.text.format.Time: int minute> = 0;

        r3.<android.text.format.Time: int hour> = 0;

        r3.<android.text.format.Time: int monthDay> = 1;

        $i8 = r3.<android.text.format.Time: int month>;

        $i7 = $i8 + 1;

        r3.<android.text.format.Time: int month> = $i7;

        virtualinvoke r3.<android.text.format.Time: long normalize(boolean)>(1);

        virtualinvoke r2.<android.text.format.Time: void set(android.text.format.Time)>(r3);

        $i9 = r0.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <android.net.NetworkPolicyManager: void snapToCycleDay(android.text.format.Time,int)>(r2, $i9);

     label2:
        $l5 = virtualinvoke r2.<android.text.format.Time: long toMillis(boolean)>(1);

        return $l5;
    }

    public static void snapToCycleDay(android.text.format.Time, int)
    {
        android.text.format.Time r0;
        int i0, $i1, $i3, $i4;

        r0 := @parameter0: android.text.format.Time;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.text.format.Time: int getActualMaximum(int)>(4);

        if i0 <= $i1 goto label1;

        $i3 = r0.<android.text.format.Time: int month>;

        $i4 = $i3 + 1;

        r0.<android.text.format.Time: int month> = $i4;

        r0.<android.text.format.Time: int monthDay> = 1;

        r0.<android.text.format.Time: int second> = -1;

        goto label2;

     label1:
        r0.<android.text.format.Time: int monthDay> = i0;

     label2:
        virtualinvoke r0.<android.text.format.Time: long normalize(boolean)>(1);

        return;
    }

    public static boolean isUidValidForPolicy(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static void dumpPolicy(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, $i1;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("[");

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("REJECT_METERED_BACKGROUND");

     label1:
        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("]");

        return;
    }

    public static void dumpRules(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, $i1;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("[");

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("REJECT_METERED");

     label1:
        virtualinvoke r0.<java.io.PrintWriter: void write(java.lang.String)>("]");

        return;
    }

    public static void <clinit>()
    {
        <android.net.NetworkPolicyManager: java.lang.String EXTRA_NETWORK_TEMPLATE> = "android.net.NETWORK_TEMPLATE";

        <android.net.NetworkPolicyManager: boolean ALLOW_PLATFORM_APP_POLICY> = 1;

        <android.net.NetworkPolicyManager: int RULE_REJECT_METERED> = 1;

        <android.net.NetworkPolicyManager: int RULE_ALLOW_ALL> = 0;

        <android.net.NetworkPolicyManager: int POLICY_ALLOW_BACKGROUND_BATTERY_SAVE> = 2;

        <android.net.NetworkPolicyManager: int POLICY_REJECT_METERED_BACKGROUND> = 1;

        <android.net.NetworkPolicyManager: int POLICY_NONE> = 0;

        return;
    }
}
