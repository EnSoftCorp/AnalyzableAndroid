public final class android.hardware.display.DisplayManagerGlobal extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final boolean USE_CACHE;
    public static final int EVENT_DISPLAY_ADDED;
    public static final int EVENT_DISPLAY_CHANGED;
    public static final int EVENT_DISPLAY_REMOVED;
    private static android.hardware.display.DisplayManagerGlobal sInstance;
    private final java.lang.Object mLock;
    private final android.hardware.display.IDisplayManager mDm;
    private android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback;
    private final java.util.ArrayList mDisplayListeners;
    private final android.util.SparseArray mDisplayInfoCache;
    private int[] mDisplayIdCache;
    private int mWifiDisplayScanNestCount;

    private void <init>(android.hardware.display.IDisplayManager)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IDisplayManager r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.IDisplayManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.display.DisplayManagerGlobal: android.util.SparseArray mDisplayInfoCache> = $r4;

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm> = r1;

        return;
    }

    public static android.hardware.display.DisplayManagerGlobal getInstance()
    {
        java.lang.Class r0;
        android.os.IBinder r1;
        java.lang.Throwable r2, $r7;
        android.hardware.display.DisplayManagerGlobal $r3, $r4, $r5;
        android.hardware.display.IDisplayManager $r6;

        r0 = class "android/hardware/display/DisplayManagerGlobal";

        entermonitor class "android/hardware/display/DisplayManagerGlobal";

     label1:
        $r3 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        if $r3 != null goto label2;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("display");

        if r1 == null goto label2;

        $r5 = new android.hardware.display.DisplayManagerGlobal;

        $r6 = staticinvoke <android.hardware.display.IDisplayManager$Stub: android.hardware.display.IDisplayManager asInterface(android.os.IBinder)>(r1);

        specialinvoke $r5.<android.hardware.display.DisplayManagerGlobal: void <init>(android.hardware.display.IDisplayManager)>($r6);

        <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance> = $r5;

     label2:
        $r4 = <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal sInstance>;

        exitmonitor r0;

     label3:
        return $r4;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        java.lang.Object r1, $r4;
        android.view.DisplayInfo r2;
        java.lang.Throwable r3, $r6;
        android.hardware.display.IDisplayManager $r5;
        android.os.RemoteException $r7, r8;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r2 = interfaceinvoke $r5.<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r2 != null goto label4;

        exitmonitor r1;

     label3:
        return null;

     label4:
        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        exitmonitor r1;

     label5:
        return r2;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Could not get display information from display manager.", r8);

        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch android.os.RemoteException from label1 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label8 with label8;
    }

    public int[] getDisplayIds()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1, $r4;
        int[] r2, $r7;
        java.lang.Throwable r3, $r8;
        android.hardware.display.IDisplayManager $r5;
        android.os.RemoteException $r6, r9;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        r2 = interfaceinvoke $r5.<android.hardware.display.IDisplayManager: int[] getDisplayIds()>();

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        $r6 := @caughtexception;

        r9 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Could not get display ids from display manager.", r9);

        $r7 = newarray (int)[1];

        $r7[0] = 0;

        return $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch android.os.RemoteException from label1 to label3 with label6;
        catch android.os.RemoteException from label4 to label6 with label6;
    }

    public android.view.Display getCompatibleDisplay(int, android.view.DisplayAdjustments)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments r1;
        android.view.DisplayInfo r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.DisplayAdjustments;

        r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new android.view.Display;

        specialinvoke $r3.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments)>(r0, i0, r2, r1);

        return $r3;
    }

    public android.view.Display getRealDisplay(int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.view.DisplayAdjustments $r1;
        android.view.Display $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        $r1 = <android.view.DisplayAdjustments: android.view.DisplayAdjustments DEFAULT_DISPLAY_ADJUSTMENTS>;

        $r2 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>(i0, $r1);

        return $r2;
    }

    public android.view.Display getRealDisplay(int, android.os.IBinder)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0;
        android.os.IBinder r1;
        android.view.DisplayAdjustments $r2;
        android.view.Display $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $r2 = new android.view.DisplayAdjustments;

        specialinvoke $r2.<android.view.DisplayAdjustments: void <init>(android.os.IBinder)>(r1);

        $r3 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)>(i0, $r2);

        return $r3;
    }

    public void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1;
        android.os.Handler r2;
        java.lang.Object r3, $r5;
        int i0;
        java.lang.Throwable r4, $r9;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r6;
        java.util.ArrayList $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        r2 := @parameter1: android.os.Handler;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r8;

     label1:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label2:
        i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r1);

        if i0 >= 0 goto label3;

        $r7 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r6 = new android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate;

        specialinvoke $r6.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void <init>(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>(r1, r2);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1;
        java.lang.Object r2, $r5, $r7;
        int i0;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate r3;
        java.lang.Throwable r4, $r11;
        java.util.ArrayList $r6, $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r10;

     label1:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        i0 = specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)>(r1);

        if i0 < 0 goto label3;

        $r6 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r7;

        virtualinvoke r3.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void clearEvents()>();

        $r8 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        virtualinvoke $r8.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int findDisplayListenerLocked(android.hardware.display.DisplayManager$DisplayListener)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.DisplayManager$DisplayListener r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: android.hardware.display.DisplayManager$DisplayListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void registerCallbackIfNeededLocked()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r6;
        android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback $r2, $r3, $r4;
        android.hardware.display.IDisplayManager $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback>;

        if $r2 != null goto label4;

        $r3 = new android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback;

        specialinvoke $r3.<android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback: void <init>(android.hardware.display.DisplayManagerGlobal,android.hardware.display.DisplayManagerGlobal$1)>(r0, null);

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback> = $r3;

     label1:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback>;

        interfaceinvoke $r5.<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to register callback with display manager service.", r1);

        r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal$DisplayManagerCallback mCallback> = null;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handleDisplayEvent(int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r3, $r6;
        java.lang.Throwable r2, $r8;
        java.util.ArrayList $r4, $r5;
        android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate $r7;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: java.util.ArrayList mDisplayListeners>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r7 = (android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate) $r6;

        virtualinvoke $r7.<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void sendDisplayEvent(int,int)>(i0, i1);

        i3 = i3 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void startWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1, $r4;
        android.os.RemoteException r2, $r6;
        java.lang.Throwable r3, $r7;
        int $i0, $i1;
        android.hardware.display.IDisplayManager $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $i1 = $i0 + 1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = $i1;

        if $i0 != 0 goto label5;

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void registerCallbackIfNeededLocked()>();

     label2:
        $r5 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r5.<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to scan for Wifi displays.", r2);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void stopWifiDisplayScan()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.Object r1, $r4;
        android.os.RemoteException r2, $r9;
        java.lang.Throwable r3, $r11;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        android.hardware.display.IDisplayManager $r10;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $i0 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $i1 = $i0 - 1;

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = $i1;

        if $i1 != 0 goto label05;

     label02:
        $r10 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r10.<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>();

     label03:
        goto label06;

     label04:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to scan for Wifi displays.", r2);

        goto label06;

     label05:
        $i2 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        if $i2 >= 0 goto label06;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wifi display scan nest count became negative: ");

        $i3 = r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r8);

        r0.<android.hardware.display.DisplayManagerGlobal: int mWifiDisplayScanNestCount> = 0;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label09:
        throw r3;

     label10:
        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1, $r10;
        android.os.RemoteException r2, $r5;
        android.hardware.display.IDisplayManager $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r4;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to connect to Wifi display ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r10, r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void pauseWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to pause Wifi display.", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resumeWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to resume Wifi display.", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void disconnectWifiDisplay()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r3;
        android.hardware.display.IDisplayManager $r2;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r2.<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to disconnect from Wifi display.", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1, r2, $r13;
        android.os.RemoteException r3, $r6;
        android.hardware.display.IDisplayManager $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r5;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r4.<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename Wifi display ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with alias ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r13, r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r5;
        android.hardware.display.IDisplayManager $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deviceAddress must not be null");

        throw $r4;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to forget Wifi display.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.os.RemoteException r1, $r4;
        android.hardware.display.IDisplayManager $r2;
        android.hardware.display.WifiDisplayStatus $r3, $r5;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

     label1:
        $r2 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r3 = interfaceinvoke $r2.<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to get Wifi display status.", r1);

        $r5 = new android.hardware.display.WifiDisplayStatus;

        specialinvoke $r5.<android.hardware.display.WifiDisplayStatus: void <init>()>();

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(android.content.Context, android.media.projection.MediaProjection, java.lang.String, int, int, int, android.view.Surface, int, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.content.Context r1;
        android.media.projection.MediaProjection r2;
        java.lang.String r3, $r14, $r19, $r23, $r32;
        int i0, i1, i2, i3, i4;
        android.view.Surface r4;
        android.hardware.display.VirtualDisplay$Callback r5;
        android.os.Handler r6;
        android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback r7, $r13;
        android.media.projection.IMediaProjection r8, $r27;
        android.os.RemoteException r9, $r26, $r31;
        java.lang.IllegalArgumentException $r11, $r25;
        boolean $z0;
        android.hardware.display.IDisplayManager $r12, $r21;
        android.hardware.display.VirtualDisplay $r15;
        java.lang.StringBuilder $r16, $r17, $r18, $r20, $r22, $r24, $r28, $r29, $r30;
        android.view.Display r33;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.projection.MediaProjection;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.view.Surface;

        i3 := @parameter7: int;

        r5 := @parameter8: android.hardware.display.VirtualDisplay$Callback;

        r6 := @parameter9: android.os.Handler;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label01;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r25;

     label01:
        if i0 <= 0 goto label02;

        if i1 <= 0 goto label02;

        if i2 > 0 goto label03;

     label02:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width, height, and densityDpi must be greater than 0");

        throw $r11;

     label03:
        $r13 = new android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback;

        specialinvoke $r13.<android.hardware.display.DisplayManagerGlobal$VirtualDisplayCallback: void <init>(android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r5, r6);

        r7 = $r13;

        if r2 == null goto label04;

        $r27 = virtualinvoke r2.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()>();

        goto label05;

     label04:
        $r27 = null;

     label05:
        r8 = $r27;

     label06:
        $r12 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        $r14 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        i4 = interfaceinvoke $r12.<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>(r7, r8, $r14, r3, i0, i1, i2, r4, i3);

     label07:
        goto label09;

     label08:
        $r26 := @caughtexception;

        r9 = $r26;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create virtual display: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", $r32, r9);

        return null;

     label09:
        if i4 >= 0 goto label10;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create virtual display: ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DisplayManager", $r23);

        return null;

     label10:
        r33 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(i4);

        if r33 != null goto label15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not obtain display info for newly created virtual display: ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManager", $r19);

     label11:
        $r21 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r21.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>(r7);

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;

     label14:
        return null;

     label15:
        $r15 = new android.hardware.display.VirtualDisplay;

        specialinvoke $r15.<android.hardware.display.VirtualDisplay: void <init>(android.hardware.display.DisplayManagerGlobal,android.view.Display,android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>(r0, r33, r7, r4);

        return $r15;

        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.view.Surface r2;
        android.os.RemoteException r3, $r5;
        android.hardware.display.IDisplayManager $r4;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter1: android.view.Surface;

     label1:
        $r4 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r4.<android.hardware.display.IDisplayManager: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to set virtual display surface.", r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        int i0, i1, i2;
        android.os.RemoteException r2, $r4;
        android.hardware.display.IDisplayManager $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>(r1, i0, i1, i2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to resize virtual display.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.os.RemoteException r2, $r4;
        android.hardware.display.IDisplayManager $r3;

        r0 := @this: android.hardware.display.DisplayManagerGlobal;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

     label1:
        $r3 = r0.<android.hardware.display.DisplayManagerGlobal: android.hardware.display.IDisplayManager mDm>;

        interfaceinvoke $r3.<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to release virtual display.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void access$100(android.hardware.display.DisplayManagerGlobal, int, int)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        int i0, i1;

        r0 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.hardware.display.DisplayManagerGlobal: void handleDisplayEvent(int,int)>(i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_REMOVED> = 3;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_CHANGED> = 2;

        <android.hardware.display.DisplayManagerGlobal: int EVENT_DISPLAY_ADDED> = 1;

        <android.hardware.display.DisplayManagerGlobal: boolean USE_CACHE> = 0;

        <android.hardware.display.DisplayManagerGlobal: boolean DEBUG> = 0;

        <android.hardware.display.DisplayManagerGlobal: java.lang.String TAG> = "DisplayManager";

        return;
    }
}
