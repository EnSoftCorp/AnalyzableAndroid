public final class android.net.http.AndroidHttpClient extends java.lang.Object implements org.apache.http.client.HttpClient
{
    public static long DEFAULT_SYNC_MIN_GZIP_BYTES;
    private static final int SOCKET_OPERATION_TIMEOUT;
    private static final java.lang.String TAG;
    private static java.lang.String[] textContentTypes;
    private static final org.apache.http.HttpRequestInterceptor sThreadCheckInterceptor;
    private final org.apache.http.client.HttpClient delegate;
    private java.lang.RuntimeException mLeakedException;
    private volatile android.net.http.AndroidHttpClient$LoggingConfiguration curlConfiguration;

    public static android.net.http.AndroidHttpClient newInstance(java.lang.String, android.content.Context)
    {
        java.lang.String r0;
        android.content.Context r1;
        org.apache.http.params.BasicHttpParams r2, $r6;
        android.net.SSLSessionCache r3, $r7;
        org.apache.http.conn.scheme.SchemeRegistry r4, $r8;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r5, $r14;
        org.apache.http.conn.scheme.Scheme $r9, $r12;
        org.apache.http.conn.scheme.PlainSocketFactory $r10;
        org.apache.http.conn.ssl.SSLSocketFactory $r13;
        android.net.http.AndroidHttpClient $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.Context;

        $r6 = new org.apache.http.params.BasicHttpParams;

        specialinvoke $r6.<org.apache.http.params.BasicHttpParams: void <init>()>();

        r2 = $r6;

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>(r2, 0);

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>(r2, 60000);

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>(r2, 60000);

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>(r2, 8192);

        staticinvoke <org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)>(r2, 0);

        if r1 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = new android.net.SSLSessionCache;

        specialinvoke $r7.<android.net.SSLSessionCache: void <init>(android.content.Context)>(r1);

     label2:
        r3 = $r7;

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>(r2, r0);

        $r8 = new org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke $r8.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

        r4 = $r8;

        $r9 = new org.apache.http.conn.scheme.Scheme;

        $r10 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        specialinvoke $r9.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("http", $r10, 80);

        virtualinvoke r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r9);

        $r12 = new org.apache.http.conn.scheme.Scheme;

        $r13 = staticinvoke <android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>(60000, r3);

        specialinvoke $r12.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("https", $r13, 443);

        virtualinvoke r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r12);

        $r14 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        specialinvoke $r14.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>(r2, r4);

        r5 = $r14;

        $r16 = new android.net.http.AndroidHttpClient;

        specialinvoke $r16.<android.net.http.AndroidHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>(r5, r2);

        return $r16;
    }

    public static android.net.http.AndroidHttpClient newInstance(java.lang.String)
    {
        java.lang.String r0;
        android.net.http.AndroidHttpClient $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context)>(r0, null);

        return $r1;
    }

    private void <init>(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams)
    {
        android.net.http.AndroidHttpClient$2 $r0;
        android.net.http.AndroidHttpClient r1;
        org.apache.http.conn.ClientConnectionManager r2;
        org.apache.http.params.HttpParams r3;
        java.lang.IllegalStateException $r4;

        r1 := @this: android.net.http.AndroidHttpClient;

        r2 := @parameter0: org.apache.http.conn.ClientConnectionManager;

        r3 := @parameter1: org.apache.http.params.HttpParams;

        specialinvoke r1.<java.lang.Object: void <init>()>();

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AndroidHttpClient created and never closed");

        r1.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException> = $r4;

        $r0 = new android.net.http.AndroidHttpClient$2;

        specialinvoke $r0.<android.net.http.AndroidHttpClient$2: void <init>(android.net.http.AndroidHttpClient,org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>(r1, r2, r3);

        r1.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate> = $r0;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.net.http.AndroidHttpClient r0;
        java.lang.RuntimeException $r1, $r2;

        r0 := @this: android.net.http.AndroidHttpClient;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        $r1 = r0.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException>;

        if $r1 == null goto label1;

        $r2 = r0.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidHttpClient", "Leak found", $r2);

        r0.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException> = null;

     label1:
        return;
    }

    public static void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)
    {
        org.apache.http.HttpRequest r0;

        r0 := @parameter0: org.apache.http.HttpRequest;

        interfaceinvoke r0.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip");

        return;
    }

    public static java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity) throws java.io.IOException
    {
        org.apache.http.HttpEntity r0;
        java.io.InputStream r1;
        org.apache.http.Header r2;
        java.lang.String r3;
        boolean $z0;
        java.util.zip.GZIPInputStream $r4;

        r0 := @parameter0: org.apache.http.HttpEntity;

        r1 = interfaceinvoke r0.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

        if r1 != null goto label1;

        return r1;

     label1:
        r2 = interfaceinvoke r0.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        if r2 != null goto label2;

        return r1;

     label2:
        r3 = interfaceinvoke r2.<org.apache.http.Header: java.lang.String getValue()>();

        if r3 != null goto label3;

        return r1;

     label3:
        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("gzip");

        if $z0 == 0 goto label4;

        $r4 = new java.util.zip.GZIPInputStream;

        specialinvoke $r4.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r4;

     label4:
        return r1;
    }

    public void close()
    {
        android.net.http.AndroidHttpClient r0;
        java.lang.RuntimeException $r1;
        org.apache.http.conn.ClientConnectionManager $r2;

        r0 := @this: android.net.http.AndroidHttpClient;

        $r1 = r0.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r2.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

        r0.<android.net.http.AndroidHttpClient: java.lang.RuntimeException mLeakedException> = null;

     label1:
        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.HttpClient $r1;
        org.apache.http.params.HttpParams $r2;

        r0 := @this: android.net.http.AndroidHttpClient;

        $r1 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r2 = interfaceinvoke $r1.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        return $r2;
    }

    public org.apache.http.conn.ClientConnectionManager getConnectionManager()
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.HttpClient $r1;
        org.apache.http.conn.ClientConnectionManager $r2;

        r0 := @this: android.net.http.AndroidHttpClient;

        $r1 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r2 = interfaceinvoke $r1.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        return $r2;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.HttpClient $r2;
        org.apache.http.HttpResponse $r3;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        $r2 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r3 = interfaceinvoke $r2.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(r1);

        return $r3;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.client.HttpClient $r3;
        org.apache.http.HttpResponse $r4;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $r3 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r4 = interfaceinvoke $r3.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>(r1, r2);

        return $r4;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.client.HttpClient $r3;
        org.apache.http.HttpResponse $r4;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r4 = interfaceinvoke $r3.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>(r1, r2);

        return $r4;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.client.HttpClient $r4;
        org.apache.http.HttpResponse $r5;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r5 = interfaceinvoke $r4.<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        return $r5;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r2;
        org.apache.http.client.HttpClient $r3;
        java.lang.Object $r4;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.client.ResponseHandler;

        $r3 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r4 = interfaceinvoke $r3.<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>(r1, r2);

        return $r4;
    }

    public java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.client.methods.HttpUriRequest r1;
        org.apache.http.client.ResponseHandler r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.client.HttpClient $r4;
        java.lang.Object $r5;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r2 := @parameter1: org.apache.http.client.ResponseHandler;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r5 = interfaceinvoke $r4.<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        return $r5;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.client.HttpClient $r4;
        java.lang.Object $r5;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        $r4 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r5 = interfaceinvoke $r4.<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>(r1, r2, r3);

        return $r5;
    }

    public java.lang.Object execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.client.ClientProtocolException
    {
        android.net.http.AndroidHttpClient r0;
        org.apache.http.HttpHost r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.client.ResponseHandler r3;
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.client.HttpClient $r5;
        java.lang.Object $r6;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.client.ResponseHandler;

        r4 := @parameter3: org.apache.http.protocol.HttpContext;

        $r5 = r0.<android.net.http.AndroidHttpClient: org.apache.http.client.HttpClient delegate>;

        $r6 = interfaceinvoke $r5.<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>(r1, r2, r3, r4);

        return $r6;
    }

    public static org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[], android.content.ContentResolver) throws java.io.IOException
    {
        byte[] r0, $r8;
        android.content.ContentResolver r1;
        org.apache.http.entity.ByteArrayEntity r2, $r7, $r9;
        java.io.ByteArrayOutputStream r3, $r5;
        java.util.zip.GZIPOutputStream r4, $r6;
        int $i0;
        long $l1, $l2;
        byte $b3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: android.content.ContentResolver;

        $i0 = lengthof r0;

        $l1 = (long) $i0;

        $l2 = staticinvoke <android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>(r1);

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label1;

        $r9 = new org.apache.http.entity.ByteArrayEntity;

        specialinvoke $r9.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>(r0);

        r2 = $r9;

        goto label2;

     label1:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r5;

        $r6 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r6.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(r3);

        r4 = $r6;

        virtualinvoke r4.<java.io.OutputStream: void write(byte[])>(r0);

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        $r7 = new org.apache.http.entity.ByteArrayEntity;

        $r8 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r7.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>($r8);

        r2 = $r7;

        virtualinvoke r2.<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)>("gzip");

     label2:
        return r2;
    }

    public static long getMinGzipSize(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        long $l0;

        r0 := @parameter0: android.content.ContentResolver;

        $l0 = <android.net.http.AndroidHttpClient: long DEFAULT_SYNC_MIN_GZIP_BYTES>;

        return $l0;
    }

    public void enableCurlLogging(java.lang.String, int)
    {
        android.net.http.AndroidHttpClient r0;
        java.lang.String r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.net.http.AndroidHttpClient$LoggingConfiguration $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: android.net.http.AndroidHttpClient;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("name");

        throw $r4;

     label1:
        if i0 < 2 goto label2;

        if i0 <= 7 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Level is out of range [2..7]");

        throw $r2;

     label3:
        $r3 = new android.net.http.AndroidHttpClient$LoggingConfiguration;

        specialinvoke $r3.<android.net.http.AndroidHttpClient$LoggingConfiguration: void <init>(java.lang.String,int,android.net.http.AndroidHttpClient$1)>(r1, i0, null);

        r0.<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient$LoggingConfiguration curlConfiguration> = $r3;

        return;
    }

    public void disableCurlLogging()
    {
        android.net.http.AndroidHttpClient r0;

        r0 := @this: android.net.http.AndroidHttpClient;

        r0.<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient$LoggingConfiguration curlConfiguration> = null;

        return;
    }

    private static java.lang.String toCurl(org.apache.http.client.methods.HttpUriRequest, boolean) throws java.io.IOException
    {
        org.apache.http.client.methods.HttpUriRequest r0, $r29;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder r1, $r5, $r17, $r18, $r19, $r22, $r23, $r24;
        org.apache.http.Header[] r2;
        int i0, i1;
        org.apache.http.Header r3;
        java.lang.String r4, $r8, $r14, $r27, $r31, $r32, $r34, $r35, r42;
        byte $b2;
        long $l3;
        java.io.ByteArrayOutputStream $r15, r41;
        byte[] $r21;
        org.apache.http.impl.client.RequestWrapper $r26;
        java.net.URI r37;
        org.apache.http.HttpRequest r38;
        org.apache.http.HttpEntityEnclosingRequest r39;
        org.apache.http.HttpEntity r40;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        z0 := @parameter1: boolean;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("curl ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-X ");

        $r8 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: java.lang.String getMethod()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r2 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: org.apache.http.Header[] getAllHeaders()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        if z0 != 0 goto label2;

        $r35 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getName()>();

        $z6 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("Authorization");

        if $z6 != 0 goto label3;

        $r34 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getName()>();

        $z7 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("Cookie");

        if $z7 == 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--header \"");

        $r32 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r31 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ");

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r37 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

        $z1 = r0 instanceof org.apache.http.impl.client.RequestWrapper;

        if $z1 == 0 goto label5;

        $r26 = (org.apache.http.impl.client.RequestWrapper) r0;

        r38 = virtualinvoke $r26.<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()>();

        $z5 = r38 instanceof org.apache.http.client.methods.HttpUriRequest;

        if $z5 == 0 goto label5;

        $r29 = (org.apache.http.client.methods.HttpUriRequest) r38;

        r37 = interfaceinvoke $r29.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $z2 = r0 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z2 == 0 goto label9;

        r39 = (org.apache.http.HttpEntityEnclosingRequest) r0;

        r40 = interfaceinvoke r39.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        if r40 == null goto label9;

        $z3 = interfaceinvoke r40.<org.apache.http.HttpEntity: boolean isRepeatable()>();

        if $z3 == 0 goto label9;

        $l3 = interfaceinvoke r40.<org.apache.http.HttpEntity: long getContentLength()>();

        $b2 = $l3 cmp 1024L;

        if $b2 >= 0 goto label8;

        $r15 = new java.io.ByteArrayOutputStream;

        specialinvoke $r15.<java.io.ByteArrayOutputStream: void <init>()>();

        r41 = $r15;

        interfaceinvoke r40.<org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>(r41);

        $z4 = staticinvoke <android.net.http.AndroidHttpClient: boolean isBinaryContent(org.apache.http.client.methods.HttpUriRequest)>(r0);

        if $z4 == 0 goto label6;

        $r21 = virtualinvoke r41.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r4 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r21, 2);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("echo \'");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' | base64 -d > /tmp/$$.bin; ");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r27);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --data-binary @/tmp/$$.bin");

        goto label7;

     label6:
        r42 = virtualinvoke r41.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r18 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --data-ascii \"");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label7:
        goto label9;

     label8:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [TOO MUCH DATA TO INCLUDE]");

     label9:
        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    private static boolean isBinaryContent(org.apache.http.client.methods.HttpUriRequest)
    {
        org.apache.http.client.methods.HttpUriRequest r0;
        org.apache.http.Header[] r1, r2, r9, r10;
        int i0, i1, i2, i3, i4, i5;
        org.apache.http.Header r3, r11;
        java.lang.String[] r4;
        java.lang.String r5, $r6, $r7, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        r1 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: org.apache.http.Header[] getHeaders(java.lang.String)>("content-encoding");

        if r1 == null goto label3;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r7 = "gzip";

        $r8 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getValue()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r9 = interfaceinvoke r0.<org.apache.http.client.methods.HttpUriRequest: org.apache.http.Header[] getHeaders(java.lang.String)>("content-type");

        if r9 == null goto label8;

        r10 = r9;

        i4 = lengthof r10;

        i5 = 0;

     label4:
        if i5 >= i4 goto label8;

        r11 = r10[i5];

        r4 = <android.net.http.AndroidHttpClient: java.lang.String[] textContentTypes>;

        i2 = lengthof r4;

        i3 = 0;

     label5:
        if i3 >= i2 goto label7;

        r5 = r4[i3];

        $r6 = interfaceinvoke r11.<org.apache.http.Header: java.lang.String getValue()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>(r5);

        if $z0 == 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        i5 = i5 + 1;

        goto label4;

     label8:
        return 1;
    }

    public static long parseDate(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <com.android.internal.http.HttpDateTime: long parse(java.lang.String)>(r0);

        return $l0;
    }

    static org.apache.http.HttpRequestInterceptor access$000()
    {
        org.apache.http.HttpRequestInterceptor $r0;

        $r0 = <android.net.http.AndroidHttpClient: org.apache.http.HttpRequestInterceptor sThreadCheckInterceptor>;

        return $r0;
    }

    static android.net.http.AndroidHttpClient$LoggingConfiguration access$300(android.net.http.AndroidHttpClient)
    {
        android.net.http.AndroidHttpClient r0;
        android.net.http.AndroidHttpClient$LoggingConfiguration $r1;

        r0 := @parameter0: android.net.http.AndroidHttpClient;

        $r1 = r0.<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient$LoggingConfiguration curlConfiguration>;

        return $r1;
    }

    static java.lang.String access$500(org.apache.http.client.methods.HttpUriRequest, boolean) throws java.io.IOException
    {
        org.apache.http.client.methods.HttpUriRequest r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.http.client.methods.HttpUriRequest;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <android.net.http.AndroidHttpClient: java.lang.String toCurl(org.apache.http.client.methods.HttpUriRequest,boolean)>(r0, z0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        android.net.http.AndroidHttpClient$1 $r1;

        <android.net.http.AndroidHttpClient: java.lang.String TAG> = "AndroidHttpClient";

        <android.net.http.AndroidHttpClient: int SOCKET_OPERATION_TIMEOUT> = 60000;

        <android.net.http.AndroidHttpClient: long DEFAULT_SYNC_MIN_GZIP_BYTES> = 256L;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "text/";

        $r0[1] = "application/xml";

        $r0[2] = "application/json";

        <android.net.http.AndroidHttpClient: java.lang.String[] textContentTypes> = $r0;

        $r1 = new android.net.http.AndroidHttpClient$1;

        specialinvoke $r1.<android.net.http.AndroidHttpClient$1: void <init>()>();

        <android.net.http.AndroidHttpClient: org.apache.http.HttpRequestInterceptor sThreadCheckInterceptor> = $r1;

        return;
    }
}
