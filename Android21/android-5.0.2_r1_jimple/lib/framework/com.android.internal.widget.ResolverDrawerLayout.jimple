public class com.android.internal.widget.ResolverDrawerLayout extends android.view.ViewGroup
{
    private static final java.lang.String TAG;
    private int mMaxWidth;
    private int mMaxCollapsedHeight;
    private int mMaxCollapsedHeightSmall;
    private boolean mSmallCollapsed;
    private float mCollapseOffset;
    private int mCollapsibleHeight;
    private int mTopOffset;
    private boolean mIsDragging;
    private boolean mOpenOnClick;
    private boolean mOpenOnLayout;
    private final int mTouchSlop;
    private final float mMinFlingVelocity;
    private final android.widget.OverScroller mScroller;
    private final android.view.VelocityTracker mVelocityTracker;
    private android.view.View$OnClickListener mClickOutsideListener;
    private float mInitialTouchX;
    private float mInitialTouchY;
    private float mLastTouchY;
    private int mActivePointerId;
    private final android.graphics.Rect mTempRect;
    private final android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.content.res.TypedArray r3;
        android.view.ViewConfiguration r4;
        android.graphics.Rect $r5;
        com.android.internal.widget.ResolverDrawerLayout$1 $r6;
        int[] $r7;
        android.widget.OverScroller $r8;
        android.view.animation.Interpolator $r9;
        android.view.VelocityTracker $r10;
        float $f0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = -1;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect> = $r5;

        $r6 = new com.android.internal.widget.ResolverDrawerLayout$1;

        specialinvoke $r6.<com.android.internal.widget.ResolverDrawerLayout$1: void <init>(com.android.internal.widget.ResolverDrawerLayout)>(r0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener> = $r6;

        $r7 = <com.android.internal.R$styleable: int[] ResolverDrawerLayout>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r7, i0, 0);

        $i1 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(0, -1);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxWidth> = $i1;

        $i2 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(1, 0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight> = $i2;

        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight>;

        $i4 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(2, $i3);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeightSmall> = $i4;

        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        $r8 = new android.widget.OverScroller;

        $r9 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, 17563653);

        specialinvoke $r8.<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)>(r1, $r9);

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller> = $r8;

        $r10 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker> = $r10;

        r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i6 = virtualinvoke r4.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop> = $i6;

        $i5 = virtualinvoke r4.<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>();

        $f0 = (float) $i5;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity> = $f0;

        return;
    }

    public void setSmallCollapsed(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mSmallCollapsed> = z0;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void requestLayout()>();

        return;
    }

    public boolean isSmallCollapsed()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mSmallCollapsed>;

        return $z0;
    }

    public boolean isCollapsed()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float $f0;
        byte $b0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isMoving()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0, $z1, $z2;
        android.widget.OverScroller $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z1 = virtualinvoke $r1.<android.widget.OverScroller: boolean isFinished()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private int getMaxCollapsedHeight()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isSmallCollapsed()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeightSmall>;

        goto label2;

     label1:
        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight>;

     label2:
        return $i0;
    }

    public void setOnClickOutsideListener(android.view.View$OnClickListener)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View$OnClickListener r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View$OnClickListener;

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View$OnClickListener mClickOutsideListener> = r1;

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, f17;
        android.view.VelocityTracker $r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.widget.OverScroller $r3;
        android.view.View $r4;
        byte $b3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i0 != 0 goto label01;

        $r5 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r5.<android.view.VelocityTracker: void clear()>();

     label01:
        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r2.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label08;
            case 2: goto label05;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label07;
            default: goto label09;
        };

     label02:
        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = f0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f1;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isListChildUnderClipped(float,float)>(f0, f1);

        if $z0 == 0 goto label03;

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if $i1 <= 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick> = $z5;

        goto label09;

     label05:
        f16 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f17 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        f2 = f17 - $f4;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>(f2);

        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f5 = (float) $i2;

        $b3 = $f3 cmpl $f5;

        if $b3 <= 0 goto label06;

        $r4 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f16, f17);

        if $r4 == null goto label06;

        $i5 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getNestedScrollAxes()>();

        $i4 = $i5 & 2;

        if $i4 != 0 goto label06;

        $i7 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i7;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 1;

        $f6 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $i6 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f7 = (float) $i6;

        $f11 = $f6 - $f7;

        $f10 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $f14 = $f10 + f2;

        $f9 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $i8 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f8 = (float) $i8;

        $f13 = $f9 + $f8;

        $f12 = staticinvoke <java.lang.Math: float min(float,float)>($f14, $f13);

        $f15 = staticinvoke <java.lang.Math: float max(float,float)>($f11, $f12);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f15;

     label06:
        goto label09;

     label07:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onSecondaryPointerUp(android.view.MotionEvent)>(r1);

        goto label09;

     label08:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

     label09:
        $z1 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z1 == 0 goto label10;

        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r3.<android.widget.OverScroller: void abortAnimation()>();

     label10:
        $z2 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z2 != 0 goto label11;

        $z3 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick>;

        if $z3 == 0 goto label12;

     label11:
        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        return $z4;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i16, $i17, $i18, $i19, $i21, $i24, $i26, i27, i28, i29;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, f45, f46, f47;
        android.view.VelocityTracker $r2, $r11, $r13;
        android.view.View $r3, $r6, $r14, $r17;
        android.widget.OverScroller $r4;
        android.view.View$OnClickListener $r5, $r15, $r16;
        byte $b5, $b8, $b15, $b20, $b22, $b23, $b25;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r12;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r2.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

        z0 = 0;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label11;
            case 2: goto label05;
            case 3: goto label20;
            case 4: goto label24;
            case 5: goto label09;
            case 6: goto label10;
            default: goto label24;
        };

     label01:
        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = f0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f1;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i1;

        $f5 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $r3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f5, $f4);

        if $r3 != null goto label02;

        $r5 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View$OnClickListener mClickOutsideListener>;

        if $r5 == null goto label02;

        z0 = 1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 1;

     label02:
        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if $i2 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z0 = z0 | $z1;

        $r4 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r4.<android.widget.OverScroller: void abortAnimation()>();

        goto label24;

     label05:
        $i6 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        i27 = virtualinvoke r1.<android.view.MotionEvent: int findPointerIndex(int)>($i6);

        if i27 >= 0 goto label06;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pointer id ");

        $i12 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resetting");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ResolverDrawerLayout", $r12);

        i27 = 0;

        $i14 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i14;

        $f26 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f26;

        $f25 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f25;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = $f25;

     label06:
        f45 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i27);

        f2 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i27);

        $z3 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z3 != 0 goto label07;

        $f11 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        f3 = f2 - $f11;

        $f14 = staticinvoke <java.lang.Math: float abs(float)>(f3);

        $i9 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f13 = (float) $i9;

        $b8 = $f14 cmpl $f13;

        if $b8 <= 0 goto label07;

        $r6 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f45, f2);

        if $r6 == null goto label07;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 1;

        z0 = 1;

        $f18 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $i10 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f15 = (float) $i10;

        $f19 = $f18 - $f15;

        $f17 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $f20 = $f17 + f3;

        $f22 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $i11 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f16 = (float) $i11;

        $f21 = $f22 + $f16;

        $f24 = staticinvoke <java.lang.Math: float min(float,float)>($f20, $f21);

        $f23 = staticinvoke <java.lang.Math: float max(float,float)>($f19, $f24);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f23;

     label07:
        $z4 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z4 == 0 goto label08;

        $f12 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        f46 = f2 - $f12;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>(f46);

     label08:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f2;

        goto label24;

     label09:
        i28 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        i29 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i28);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = i29;

        $f7 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i28);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f7;

        $f6 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i28);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f6;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = $f6;

        goto label24;

     label10:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onSecondaryPointerUp(android.view.MotionEvent)>(r1);

        goto label24;

     label11:
        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 0;

        $z6 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z6 != 0 goto label12;

        $f41 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f40 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $r14 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f41, $f40);

        if $r14 != null goto label12;

        $f39 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f44 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $r17 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f39, $f44);

        if $r17 != null goto label12;

        $r15 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View$OnClickListener mClickOutsideListener>;

        if $r15 == null goto label12;

        $r16 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View$OnClickListener mClickOutsideListener>;

        interfaceinvoke $r16.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        return 1;

     label12:
        $z7 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick>;

        if $z7 == 0 goto label13;

        $f30 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f29 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f37 = $f30 - $f29;

        $f36 = staticinvoke <java.lang.Math: float abs(float)>($f37);

        $i24 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f38 = (float) $i24;

        $b23 = $f36 cmpg $f38;

        if $b23 >= 0 goto label13;

        $f33 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $f35 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $f34 = $f33 - $f35;

        $f43 = staticinvoke <java.lang.Math: float abs(float)>($f34);

        $i26 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f42 = (float) $i26;

        $b25 = $f43 cmpg $f42;

        if $b25 >= 0 goto label13;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, 0.0F);

        return 1;

     label13:
        $r11 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r11.<android.view.VelocityTracker: void computeCurrentVelocity(int)>(1000);

        $r13 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        $i18 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        f47 = virtualinvoke $r13.<android.view.VelocityTracker: float getYVelocity(int)>($i18);

        $f28 = staticinvoke <java.lang.Math: float abs(float)>(f47);

        $f27 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b15 = $f28 cmpl $f27;

        if $b15 <= 0 goto label16;

        $b20 = f47 cmpg 0.0F;

        if $b20 >= 0 goto label14;

        $i19 = 0;

        goto label15;

     label14:
        $i19 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label15:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i19, f47);

        goto label19;

     label16:
        $f31 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i16 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i17 = $i16 / 2;

        $f32 = (float) $i17;

        $b22 = $f31 cmpg $f32;

        if $b22 >= 0 goto label17;

        $i21 = 0;

        goto label18;

     label17:
        $i21 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label18:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i21, 0.0F);

     label19:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        goto label24;

     label20:
        $z2 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z2 == 0 goto label23;

        $f9 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i4 = $i3 / 2;

        $f8 = (float) $i4;

        $b5 = $f9 cmpg $f8;

        if $b5 >= 0 goto label21;

        $i7 = 0;

        goto label22;

     label21:
        $i7 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label22:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i7, 0.0F);

     label23:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        return 1;

     label24:
        return z0;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        int i0, i1, $i3, $i4;
        byte b2, $b5;
        float $f0, $f1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i0);

        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        if i1 != $i3 goto label3;

        if i0 != 0 goto label1;

        $b5 = 1;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        b2 = $b5;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(b2);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f0;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(b2);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = $f1;

        $i4 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(b2);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i4;

     label3:
        return;
    }

    private void resetTouch()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.VelocityTracker $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = -1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick> = 0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = 0.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = 0.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = 0.0F;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r1.<android.view.VelocityTracker: void clear()>();

        return;
    }

    public void computeScroll()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1;
        android.widget.OverScroller $r1, $r2, $r3;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void computeScroll()>();

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z1 = virtualinvoke $r1.<android.widget.OverScroller: boolean isFinished()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        z0 = virtualinvoke $r2.<android.widget.OverScroller: boolean computeScrollOffset()>();

        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $i0 = virtualinvoke $r3.<android.widget.OverScroller: int getCurrY()>();

        $f1 = (float) $i0;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f2 = $f1 - $f0;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f2);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

     label1:
        return;
    }

    private float performDrag(float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10;
        int i0, i1, $i2, $i4, $i5, $i6;
        android.view.View r1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams r2;
        byte $b3;
        android.view.ViewGroup$LayoutParams $r3;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f4 = $f2 + f0;

        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f3 = (float) $i2;

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f3);

        f1 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f5);

        $f6 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b3 = f1 cmpl $f6;

        if $b3 == 0 goto label4;

        $f7 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        f10 = f1 - $f7;

        i0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i1);

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r3;

        $z0 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean ignoreOffset>;

        if $z0 != 0 goto label2;

        $i6 = (int) f10;

        virtualinvoke r1.<android.view.View: void offsetTopAndBottom(int)>($i6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = f1;

        $i4 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset>;

        $f8 = (float) $i4;

        $f9 = $f8 + f10;

        $i5 = (int) $f9;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset> = $i5;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

        return f10;

     label4:
        return 0.0F;
    }

    private void smoothScrollTo(int, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, i10, i11;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, f20;
        android.widget.OverScroller $r1, $r2;
        byte $b8;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i5 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getMaxCollapsedHeight()>();

        if $i5 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r1.<android.widget.OverScroller: void abortAnimation()>();

        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i1 = (int) $f4;

        i2 = i0 - i1;

        if i2 != 0 goto label2;

        return;

     label2:
        i3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getHeight()>();

        i4 = i3 / 2;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        $f6 = (float) $i6;

        $f8 = 1.0F * $f6;

        $f5 = (float) i3;

        $f7 = $f8 / $f5;

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f7);

        $f9 = (float) i4;

        $f11 = (float) i4;

        $f10 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float distanceInfluenceForSnapDuration(float)>(f1);

        $f12 = $f11 * $f10;

        f2 = $f9 + $f12;

        f20 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b8 = f20 cmpl 0.0F;

        if $b8 <= 0 goto label3;

        $f18 = f2 / f20;

        $f17 = staticinvoke <java.lang.Math: float abs(float)>($f18);

        $f19 = 1000.0F * $f17;

        $i9 = staticinvoke <java.lang.Math: int round(float)>($f19);

        i10 = 4 * $i9;

        goto label4;

     label3:
        $i7 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        $f13 = (float) $i7;

        $f14 = (float) i3;

        f3 = $f13 / $f14;

        $f15 = f3 + 1.0F;

        $f16 = $f15 * 100.0F;

        i10 = (int) $f16;

     label4:
        i11 = staticinvoke <java.lang.Math: int min(int,int)>(i10, 300);

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r2.<android.widget.OverScroller: void startScroll(int,int,int,int,int)>(0, i1, 0, i2, i11);

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

        return;
    }

    private float distanceInfluenceForSnapDuration(float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, $f1, f2, f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f2 = f0 - 0.5F;

        $d0 = (double) f2;

        $d1 = $d0 * 0.4712389167638204;

        f3 = (float) $d1;

        $d2 = (double) f3;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $f1 = (float) $d3;

        return $f1;
    }

    private android.view.View findChildUnder(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1;
        android.view.View $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>(r0, f0, f1);

        return $r1;
    }

    private static android.view.View findChildUnder(android.view.ViewGroup, float, float)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: boolean isChildUnder(android.view.View,float,float)>(r1, f0, f1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    private android.view.View findListChildUnder(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1, $f2, $f3;
        android.view.View r1, $r3, $r5;
        boolean $z0, $z1;
        android.view.ViewGroup $r2, $r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f0, f1);

     label1:
        if r1 == null goto label5;

        $f2 = virtualinvoke r1.<android.view.View: float getX()>();

        f0 = f0 - $f2;

        $f3 = virtualinvoke r1.<android.view.View: float getY()>();

        f1 = f1 - $f3;

        $z0 = r1 instanceof android.widget.AbsListView;

        if $z0 == 0 goto label2;

        $r4 = (android.view.ViewGroup) r1;

        $r5 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>($r4, f0, f1);

        return $r5;

     label2:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r2 = (android.view.ViewGroup) r1;

        $r3 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>($r2, f0, f1);

        goto label4;

     label3:
        $r3 = null;

     label4:
        r1 = $r3;

        goto label1;

     label5:
        return r1;
    }

    private boolean isListChildUnderClipped(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1;
        android.view.View r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findListChildUnder(float,float)>(f0, f1);

        if r1 == null goto label1;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isDescendantClipped(android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2, r3, r5;
        android.view.ViewParent r4, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        android.graphics.Rect $r6, $r7, $r9;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        $r6 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        $i1 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i2 = virtualinvoke r1.<android.view.View: int getHeight()>();

        virtualinvoke $r6.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i2);

        $r7 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>(r1, $r7);

        $r8 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        if $r8 != r0 goto label01;

        r2 = r1;

        goto label04;

     label01:
        r3 = r1;

        r4 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

     label02:
        if r4 == r0 goto label03;

        r3 = (android.view.View) r4;

        r4 = virtualinvoke r3.<android.view.View: android.view.ViewParent getParent()>();

        goto label02;

     label03:
        r2 = r3;

     label04:
        $i3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getHeight()>();

        $i4 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingBottom()>();

        i9 = $i3 - $i4;

        i10 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        $i5 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int indexOfChild(android.view.View)>(r2);

        i0 = $i5 + 1;

     label05:
        if i0 >= i10 goto label08;

        r5 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i0);

        $i7 = virtualinvoke r5.<android.view.View: int getVisibility()>();

        if $i7 != 8 goto label06;

        goto label07;

     label06:
        $i8 = virtualinvoke r5.<android.view.View: int getTop()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i9, $i8);

     label07:
        i0 = i0 + 1;

        goto label05;

     label08:
        $r9 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        $i6 = $r9.<android.graphics.Rect: int bottom>;

        if $i6 <= i9 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        return $z0;
    }

    private static boolean isChildUnder(android.view.View, float, float)
    {
        android.view.View r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7;
        int $i0, $i1;
        byte $b2, $b3, $b4, $b5;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 = virtualinvoke r0.<android.view.View: float getX()>();

        f3 = virtualinvoke r0.<android.view.View: float getY()>();

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $f6 = (float) $i0;

        f4 = f2 + $f6;

        $i1 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $f7 = (float) $i1;

        f5 = f3 + $f7;

        $b2 = f0 cmpl f2;

        if $b2 < 0 goto label1;

        $b3 = f1 cmpl f3;

        if $b3 < 0 goto label1;

        $b4 = f0 cmpg f4;

        if $b4 >= 0 goto label1;

        $b5 = f1 cmpg f5;

        if $b5 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, r2);

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isInTouchMode()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r2);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, 0.0F);

     label1:
        return;
    }

    protected void onAttachedToWindow()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        return;
    }

    protected void onDetachedFromWindow()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        return;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>(r1, r2, i0);

        return;
    }

    public void onStopNestedScroll(android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        android.widget.OverScroller $r2;
        boolean $z0;
        int $i0, $i1, $i3;
        float $f0, $f1;
        byte $b2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>(r1);

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z0 = virtualinvoke $r2.<android.widget.OverScroller: boolean isFinished()>();

        if $z0 == 0 goto label3;

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i1 = $i0 / 2;

        $f0 = (float) $i1;

        $b2 = $f1 cmpg $f0;

        if $b2 >= 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label2:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i3, 0.0F);

     label3:
        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4;
        float $f0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i3 >= 0 goto label1;

        $i4 = neg i3;

        $f0 = (float) $i4;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f0);

     label1:
        return;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        int i0, i1, $i2, $i3;
        int[] r2;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        if i1 <= 0 goto label1;

        $i2 = neg i1;

        $f0 = (float) $i2;

        $f1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f0);

        $f2 = neg $f1;

        $i3 = (int) $f2;

        r2[1] = $i3;

     label1:
        return;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        byte $b0, $b1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b0 = f1 cmpl $f2;

        if $b0 <= 0 goto label1;

        $f3 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b1 = $f3 cmpl 0.0F;

        if $b1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, f1);

        return 1;

     label1:
        return 0;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        boolean z0;
        byte $b0, $b1;
        int $i2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        if z0 != 0 goto label3;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f3 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b0 = $f2 cmpl $f3;

        if $b0 <= 0 goto label3;

        $b1 = f1 cmpl 0.0F;

        if $b1 <= 0 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label2:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i2, f1);

        return 1;

     label3:
        return 0;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40;
        android.view.View r1, r6;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams r2, r3;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.ViewGroup$LayoutParams $r4, $r5;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        i3 = i2;

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        $i11 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxWidth>;

        if $i11 < 0 goto label01;

        $i37 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxWidth>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i37);

     label01:
        i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i3, 1073741824);

        i6 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i4, 1073741824);

        $i13 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingLeft()>();

        $i12 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingRight()>();

        i7 = $i13 + $i12;

        $i15 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingTop()>();

        $i14 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingBottom()>();

        i8 = $i15 + $i14;

        i9 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i10 = 0;

     label02:
        if i10 >= i9 goto label04;

        r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i10);

        $r5 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r5;

        $z3 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean alwaysShow>;

        if $z3 == 0 goto label03;

        $i32 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i32 == 8 goto label03;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r1, i5, i7, i6, i8);

        $i36 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int topMargin>;

        $i35 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i33 = $i36 + $i35;

        $i34 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int bottomMargin>;

        $i38 = $i33 + $i34;

        i8 = i8 + $i38;

     label03:
        i10 = i10 + 1;

        goto label02;

     label04:
        i39 = i8;

        i40 = 0;

     label05:
        if i40 >= i9 goto label07;

        r6 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i40);

        $r4 = virtualinvoke r6.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r3 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r4;

        $z2 = r3.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean alwaysShow>;

        if $z2 != 0 goto label06;

        $i26 = virtualinvoke r6.<android.view.View: int getVisibility()>();

        if $i26 == 8 goto label06;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r6, i5, i7, i6, i8);

        $i27 = r3.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int topMargin>;

        $i31 = virtualinvoke r6.<android.view.View: int getMeasuredHeight()>();

        $i29 = $i27 + $i31;

        $i30 = r3.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int bottomMargin>;

        $i28 = $i29 + $i30;

        i8 = i8 + $i28;

     label06:
        i40 = i40 + 1;

        goto label05;

     label07:
        $i17 = i8 - i39;

        $i16 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getMaxCollapsedHeight()>();

        $i19 = $i17 - $i16;

        $i18 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i19);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight> = $i18;

        $z1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isLaidOut()>();

        if $z1 == 0 goto label08;

        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i24 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f3 = (float) $i24;

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f3);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = $f2;

        goto label11;

     label08:
        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnLayout>;

        if $z0 == 0 goto label09;

        $f0 = 0.0F;

        goto label10;

     label09:
        $i22 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f0 = (float) $i22;

     label10:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = $f0;

     label11:
        $i20 = i4 - i8;

        $i21 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i20);

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i25 = (int) $f1;

        $i23 = $i21 + $i25;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset> = $i23;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setMeasuredDimension(int,int)>(i2, i4);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.view.View r1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams r2;
        android.view.ViewGroup$LayoutParams $r3;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getWidth()>();

        i5 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset>;

        i6 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingLeft()>();

        $i16 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingRight()>();

        i7 = i4 - $i16;

        i8 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i9 = 0;

     label1:
        if i9 >= i8 goto label5;

        r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i9);

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r3;

        $i18 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i18 != 8 goto label2;

        goto label4;

     label2:
        $i17 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int topMargin>;

        i10 = i5 + $i17;

        $z1 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean ignoreOffset>;

        if $z1 == 0 goto label3;

        $f1 = (float) i10;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f2 = $f1 - $f0;

        i10 = (int) $f2;

     label3:
        $i19 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        i11 = i10 + $i19;

        i13 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i12 = i7 - i6;

        $i20 = i12 - i13;

        $i21 = $i20 / 2;

        i15 = i6 + $i21;

        i14 = i15 + i13;

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(i15, i10, i14, i11);

        $i22 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int bottomMargin>;

        i5 = i11 + $i22;

     label4:
        i9 = i9 + 1;

        goto label1;

     label5:
        return;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.util.AttributeSet r1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.content.Context getContext()>();

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0, $z1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r2, $r3, $r5, $r6;
        android.view.ViewGroup$MarginLayoutParams $r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        if $z0 == 0 goto label1;

        $r5 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r6 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) r1;

        specialinvoke $r5.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(com.android.internal.widget.ResolverDrawerLayout$LayoutParams)>($r6);

        return $r5;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z1 == 0 goto label2;

        $r3 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r4 = (android.view.ViewGroup$MarginLayoutParams) r1;

        specialinvoke $r3.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>($r4);

        return $r3;

     label2:
        $r2 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        specialinvoke $r1.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(int,int)>(-1, -2);

        return $r1;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$SavedState r1, $r2;
        android.os.Parcelable $r3;
        int $i0;
        float $f0;
        byte $b1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$SavedState;

        $r3 = specialinvoke r0.<android.view.ViewGroup: android.os.Parcelable onSaveInstanceState()>();

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$SavedState: void <init>(android.os.Parcelable)>($r3);

        r1 = $r2;

        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if $i0 <= 0 goto label1;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b1 = $f0 cmpl 0.0F;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r1.<com.android.internal.widget.ResolverDrawerLayout$SavedState: boolean open> = $z0;

        return r1;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.os.Parcelable r1, $r3;
        com.android.internal.widget.ResolverDrawerLayout$SavedState r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.os.Parcelable;

        r2 = (com.android.internal.widget.ResolverDrawerLayout$SavedState) r1;

        $r3 = virtualinvoke r2.<com.android.internal.widget.ResolverDrawerLayout$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.ViewGroup: void onRestoreInstanceState(android.os.Parcelable)>($r3);

        $z0 = r2.<com.android.internal.widget.ResolverDrawerLayout$SavedState: boolean open>;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnLayout> = $z0;

        return;
    }

    static boolean access$000(com.android.internal.widget.ResolverDrawerLayout, android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter1: android.view.View;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r1);

        return $z0;
    }

    static void access$100(com.android.internal.widget.ResolverDrawerLayout, int, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0;
        float f0;

        r0 := @parameter0: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i0, f0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.ResolverDrawerLayout: java.lang.String TAG> = "ResolverDrawerLayout";

        return;
    }
}
