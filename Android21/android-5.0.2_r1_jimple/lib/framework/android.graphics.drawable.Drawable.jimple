public abstract class android.graphics.drawable.Drawable extends java.lang.Object
{
    private static final android.graphics.Rect ZERO_BOUNDS_RECT;
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private int[] mStateSet;
    private int mLevel;
    private int mChangingConfigurations;
    private android.graphics.Rect mBounds;
    private java.lang.ref.WeakReference mCallback;
    private boolean mVisible;
    private int mLayoutDirection;

    public void <init>()
    {
        android.graphics.drawable.Drawable r0;
        int[] $r1;
        android.graphics.Rect $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.util.StateSet: int[] WILD_CARD>;

        r0.<android.graphics.drawable.Drawable: int[] mStateSet> = $r1;

        r0.<android.graphics.drawable.Drawable: int mLevel> = 0;

        r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = 0;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r2;

        r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback> = null;

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = 1;

        return;
    }

    public abstract void draw(android.graphics.Canvas);

    public void setBounds(int, int, int, int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.graphics.Rect r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        $r2 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        if r1 != $r2 goto label1;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r5;

        r1 = $r5;

     label1:
        $i4 = r1.<android.graphics.Rect: int left>;

        if $i4 != i0 goto label2;

        $i5 = r1.<android.graphics.Rect: int top>;

        if $i5 != i1 goto label2;

        $i6 = r1.<android.graphics.Rect: int right>;

        if $i6 != i2 goto label2;

        $i7 = r1.<android.graphics.Rect: int bottom>;

        if $i7 == i3 goto label4;

     label2:
        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

     label3:
        $r3 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        $r4 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>($r4);

     label4:
        return;
    }

    public void setBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public final void copyBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public final android.graphics.Rect copyBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = new android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r2);

        return $r1;
    }

    public final android.graphics.Rect getBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1, $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        $r2 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        $r1 = <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT>;

        if $r2 != $r1 goto label1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r4;

     label1:
        $r3 = r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        return $r3;
    }

    public android.graphics.Rect getDirtyBounds()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        return $r1;
    }

    public void setChangingConfigurations(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = i0;

        return;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mChangingConfigurations>;

        return $i0;
    }

    public void setDither(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public final void setCallback(android.graphics.drawable.Drawable$Callback)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.drawable.Drawable$Callback r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.drawable.Drawable$Callback;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback> = $r2;

        return;
    }

    public android.graphics.drawable.Drawable$Callback getCallback()
    {
        android.graphics.drawable.Drawable r0;
        java.lang.ref.WeakReference $r1, $r2;
        java.lang.Object $r3;
        android.graphics.drawable.Drawable$Callback $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.Drawable: java.lang.ref.WeakReference mCallback>;

        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r4 = (android.graphics.drawable.Drawable$Callback) $r3;

        return $r4;

     label1:
        return null;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.drawable.Drawable$Callback r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        android.graphics.drawable.Drawable r0;
        java.lang.Runnable r1;
        long l0;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, r1, l0);

     label1:
        return;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        android.graphics.drawable.Drawable r0;
        java.lang.Runnable r1;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: java.lang.Runnable;

        r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, r1);

     label1:
        return;
    }

    public int getLayoutDirection()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mLayoutDirection>;

        return $i0;
    }

    public void setLayoutDirection(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getLayoutDirection()>();

        if $i1 == i0 goto label1;

        r0.<android.graphics.drawable.Drawable: int mLayoutDirection> = i0;

     label1:
        return;
    }

    public abstract void setAlpha(int);

    public int getAlpha()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 255;
    }

    public void setXfermode(android.graphics.Xfermode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Xfermode r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Xfermode;

        return;
    }

    public abstract void setColorFilter(android.graphics.ColorFilter);

    public void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        int i0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.PorterDuffColorFilter $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $r2 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r2.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i0, r1);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($r2);

        return;
    }

    public void setTint(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r1);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.PorterDuff$Mode r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public void clearColorFilter()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(null);

        return;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.Drawable r0;
        float f0, f1;

        r0 := @this: android.graphics.drawable.Drawable;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, i1, i2, i3;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public boolean isProjected()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public boolean setState(int[])
    {
        android.graphics.drawable.Drawable r0;
        int[] r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: int[];

        $r2 = r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<android.graphics.drawable.Drawable: int[] mStateSet> = r1;

        $z1 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean onStateChange(int[])>(r1);

        return $z1;

     label1:
        return 0;
    }

    public int[] getState()
    {
        android.graphics.drawable.Drawable r0;
        int[] $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        return $r1;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return r0;
    }

    public final boolean setLevel(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        $i1 = r0.<android.graphics.drawable.Drawable: int mLevel>;

        if $i1 == i0 goto label1;

        r0.<android.graphics.drawable.Drawable: int mLevel> = i0;

        $z0 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean onLevelChange(int)>(i0);

        return $z0;

     label1:
        return 0;
    }

    public final int getLevel()
    {
        android.graphics.drawable.Drawable r0;
        int $i0;

        r0 := @this: android.graphics.drawable.Drawable;

        $i0 = r0.<android.graphics.drawable.Drawable: int mLevel>;

        return $i0;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0, z1, z2, $z3, $z4;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z3 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        if $z3 == z0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z2 = $z4;

        if z2 == 0 goto label3;

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = z0;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

     label3:
        return z2;
    }

    public final boolean isVisible()
    {
        android.graphics.drawable.Drawable r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Drawable;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        return $z0;
    }

    public void setAutoMirrored(boolean)
    {
        android.graphics.drawable.Drawable r0;
        boolean z0;

        r0 := @this: android.graphics.drawable.Drawable;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isAutoMirrored()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources$Theme r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        return;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public abstract int getOpacity();

    public static int resolveOpacity(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        return i0;

     label1:
        if i0 == 0 goto label2;

        if i1 != 0 goto label3;

     label2:
        return 0;

     label3:
        if i0 == -3 goto label4;

        if i1 != -3 goto label5;

     label4:
        return -3;

     label5:
        if i0 == -2 goto label6;

        if i1 != -2 goto label7;

     label6:
        return -2;

     label7:
        return -1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.Drawable r0;
        int[] r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: int[];

        return 0;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.Drawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 := @parameter0: int;

        return 0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        return;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public int getMinimumWidth()
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if i0 <= 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public int getMinimumHeight()
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;

        r0 := @this: android.graphics.drawable.Drawable;

        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if i0 <= 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Rect r1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return 0;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Insets $r1;

        r0 := @this: android.graphics.drawable.Drawable;

        $r1 = <android.graphics.Insets: android.graphics.Insets NONE>;

        return $r1;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Outline r1;
        android.graphics.Rect $r2;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.Outline;

        $r2 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Outline: void setRect(android.graphics.Rect)>($r2);

        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>(0.0F);

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return r0;
    }

    public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String)
    {
        java.io.InputStream r0;
        java.lang.String r1, $r4;
        android.graphics.drawable.Drawable r2;
        java.lang.Throwable r3, $r5;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = "Unknown drawable";

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, $r4);

     label3:
        r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>(null, null, r0, r1);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r2;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String)
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        java.io.InputStream r2;
        java.lang.String r3, $r6;
        android.graphics.drawable.Drawable r4;
        java.lang.Throwable r5, $r7;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.TypedValue;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: java.lang.String;

        if r3 == null goto label1;

        $r6 = r3;

        goto label2;

     label1:
        $r6 = "Unknown drawable";

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, $r6);

     label3:
        r4 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>(r0, r1, r2, r3, null);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r4;

     label5:
        $r7 := @caughtexception;

        r5 = $r7;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String, android.graphics.BitmapFactory$Options)
    {
        android.content.res.Resources r0;
        android.util.TypedValue r1;
        java.io.InputStream r2;
        java.lang.String r3;
        android.graphics.BitmapFactory$Options r4, $r12;
        android.graphics.Rect r5, r8, $r9, $r10;
        android.graphics.Bitmap r6;
        byte[] r7;
        int $i0;
        android.graphics.drawable.Drawable $r11;
        boolean $z0;
        android.util.DisplayMetrics $r13;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.util.TypedValue;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.graphics.BitmapFactory$Options;

        if r2 != null goto label1;

        return null;

     label1:
        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r5 = $r9;

        if r4 != null goto label2;

        $r12 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r12.<android.graphics.BitmapFactory$Options: void <init>()>();

        r4 = $r12;

     label2:
        if r0 == null goto label3;

        $r13 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r13.<android.util.DisplayMetrics: int noncompatDensityDpi>;

        goto label4;

     label3:
        $i0 = <android.util.DisplayMetrics: int DENSITY_DEVICE>;

     label4:
        r4.<android.graphics.BitmapFactory$Options: int inScreenDensity> = $i0;

        r6 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, r1, r2, r5, r4);

        if r6 == null goto label7;

        r7 = virtualinvoke r6.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

        if r7 == null goto label5;

        $z0 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>(r7);

        if $z0 != 0 goto label6;

     label5:
        r7 = null;

        r5 = null;

     label6:
        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r8 = $r10;

        virtualinvoke r6.<android.graphics.Bitmap: void getOpticalInsets(android.graphics.Rect)>(r8);

        $r11 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(r0, r6, r7, r5, r8, r3);

        return $r11;

     label7:
        return null;
    }

    public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>(r0, r1, null);

        return $r2;
    }

    public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.content.res.Resources$Theme r2;
        android.util.AttributeSet r3;
        int i0, $i1;
        android.graphics.drawable.Drawable r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;
        org.xmlpull.v1.XmlPullParserException $r11;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.content.res.Resources$Theme;

        r3 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r1);

     label1:
        $i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i1;

        if $i1 == 2 goto label2;

        if i0 == 1 goto label2;

        goto label1;

     label2:
        if i0 == 2 goto label3;

        $r11 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r11.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r11;

     label3:
        r4 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r1, r3, r2);

        if r4 != null goto label4;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown initial tag: ");

        $r8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        return r4;
    }

    public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        $r3 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r1, r2, null);

        return $r3;
    }

    public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.util.AttributeSet r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.Drawable r4;
        java.lang.String r5, $r7, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.xmlpull.v1.XmlPullParserException $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;
        android.util.DisplayMetrics $r13, $r20;
        android.graphics.drawable.BitmapDrawable $r14, $r19;
        android.graphics.drawable.NinePatchDrawable $r15, $r16;
        android.graphics.drawable.InsetDrawable $r17;
        android.graphics.drawable.AnimationDrawable $r18;
        android.graphics.drawable.ClipDrawable $r21;
        android.graphics.drawable.ScaleDrawable $r22;
        android.graphics.drawable.AnimatedRotateDrawable $r23;
        android.graphics.drawable.RotateDrawable $r24;
        android.graphics.drawable.GradientDrawable $r25;
        android.graphics.drawable.ColorDrawable $r26;
        android.graphics.drawable.AnimatedVectorDrawable $r27;
        android.graphics.drawable.VectorDrawable $r28;
        android.graphics.drawable.LevelListDrawable $r29;
        android.graphics.drawable.LayerDrawable $r30;
        android.graphics.drawable.TransitionDrawable $r31;
        android.graphics.drawable.RippleDrawable $r32;
        android.graphics.drawable.StateListDrawable $r33;
        android.graphics.drawable.AnimatedStateListDrawable $r34;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.Resources$Theme;

        r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("selector");

        if $z0 == 0 goto label01;

        $r33 = new android.graphics.drawable.StateListDrawable;

        specialinvoke $r33.<android.graphics.drawable.StateListDrawable: void <init>()>();

        r4 = $r33;

        goto label19;

     label01:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("animated-selector");

        if $z1 == 0 goto label02;

        $r34 = new android.graphics.drawable.AnimatedStateListDrawable;

        specialinvoke $r34.<android.graphics.drawable.AnimatedStateListDrawable: void <init>()>();

        r4 = $r34;

        goto label19;

     label02:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("level-list");

        if $z2 == 0 goto label03;

        $r29 = new android.graphics.drawable.LevelListDrawable;

        specialinvoke $r29.<android.graphics.drawable.LevelListDrawable: void <init>()>();

        r4 = $r29;

        goto label19;

     label03:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("layer-list");

        if $z3 == 0 goto label04;

        $r30 = new android.graphics.drawable.LayerDrawable;

        specialinvoke $r30.<android.graphics.drawable.LayerDrawable: void <init>()>();

        r4 = $r30;

        goto label19;

     label04:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("transition");

        if $z4 == 0 goto label05;

        $r31 = new android.graphics.drawable.TransitionDrawable;

        specialinvoke $r31.<android.graphics.drawable.TransitionDrawable: void <init>()>();

        r4 = $r31;

        goto label19;

     label05:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("ripple");

        if $z5 == 0 goto label06;

        $r32 = new android.graphics.drawable.RippleDrawable;

        specialinvoke $r32.<android.graphics.drawable.RippleDrawable: void <init>()>();

        r4 = $r32;

        goto label19;

     label06:
        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("color");

        if $z6 == 0 goto label07;

        $r26 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r26.<android.graphics.drawable.ColorDrawable: void <init>()>();

        r4 = $r26;

        goto label19;

     label07:
        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("shape");

        if $z7 == 0 goto label08;

        $r25 = new android.graphics.drawable.GradientDrawable;

        specialinvoke $r25.<android.graphics.drawable.GradientDrawable: void <init>()>();

        r4 = $r25;

        goto label19;

     label08:
        $z8 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("vector");

        if $z8 == 0 goto label09;

        $r28 = new android.graphics.drawable.VectorDrawable;

        specialinvoke $r28.<android.graphics.drawable.VectorDrawable: void <init>()>();

        r4 = $r28;

        goto label19;

     label09:
        $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("animated-vector");

        if $z10 == 0 goto label10;

        $r27 = new android.graphics.drawable.AnimatedVectorDrawable;

        specialinvoke $r27.<android.graphics.drawable.AnimatedVectorDrawable: void <init>()>();

        r4 = $r27;

        goto label19;

     label10:
        $z9 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("scale");

        if $z9 == 0 goto label11;

        $r22 = new android.graphics.drawable.ScaleDrawable;

        specialinvoke $r22.<android.graphics.drawable.ScaleDrawable: void <init>()>();

        r4 = $r22;

        goto label19;

     label11:
        $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("clip");

        if $z12 == 0 goto label12;

        $r21 = new android.graphics.drawable.ClipDrawable;

        specialinvoke $r21.<android.graphics.drawable.ClipDrawable: void <init>()>();

        r4 = $r21;

        goto label19;

     label12:
        $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("rotate");

        if $z11 == 0 goto label13;

        $r24 = new android.graphics.drawable.RotateDrawable;

        specialinvoke $r24.<android.graphics.drawable.RotateDrawable: void <init>()>();

        r4 = $r24;

        goto label19;

     label13:
        $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("animated-rotate");

        if $z14 == 0 goto label14;

        $r23 = new android.graphics.drawable.AnimatedRotateDrawable;

        specialinvoke $r23.<android.graphics.drawable.AnimatedRotateDrawable: void <init>()>();

        r4 = $r23;

        goto label19;

     label14:
        $z13 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("animation-list");

        if $z13 == 0 goto label15;

        $r18 = new android.graphics.drawable.AnimationDrawable;

        specialinvoke $r18.<android.graphics.drawable.AnimationDrawable: void <init>()>();

        r4 = $r18;

        goto label19;

     label15:
        $z16 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("inset");

        if $z16 == 0 goto label16;

        $r17 = new android.graphics.drawable.InsetDrawable;

        specialinvoke $r17.<android.graphics.drawable.InsetDrawable: void <init>()>();

        r4 = $r17;

        goto label19;

     label16:
        $z15 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("bitmap");

        if $z15 == 0 goto label17;

        $r14 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r14.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>(r0);

        r4 = $r14;

        if r0 == null goto label19;

        $r19 = (android.graphics.drawable.BitmapDrawable) r4;

        $r20 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r19.<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>($r20);

        goto label19;

     label17:
        $z17 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("nine-patch");

        if $z17 == 0 goto label18;

        $r15 = new android.graphics.drawable.NinePatchDrawable;

        specialinvoke $r15.<android.graphics.drawable.NinePatchDrawable: void <init>()>();

        r4 = $r15;

        if r0 == null goto label19;

        $r16 = (android.graphics.drawable.NinePatchDrawable) r4;

        $r13 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r16.<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)>($r13);

        goto label19;

     label18:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid drawable tag ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label19:
        virtualinvoke r4.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r0, r1, r2, r3);

        return r4;
    }

    public static android.graphics.drawable.Drawable createFromPath(java.lang.String)
    {
        java.lang.String r0;
        android.graphics.Bitmap r1;
        android.graphics.drawable.Drawable r2;
        java.lang.Throwable r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8192L, r0);

     label2:
        r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>(r0);

        if r1 == null goto label4;

        r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(null, r1, null, null, null, r0);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        return r2;

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        goto label7;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8192L);

        throw r3;

     label7:
        return null;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        virtualinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, null);

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6, $r7;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        if r4 == null goto label1;

        $r7 = <com.android.internal.R$styleable: int[] Drawable>;

        r5 = virtualinvoke r4.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r3, $r7, 0, 0);

        goto label2;

     label1:
        $r6 = <com.android.internal.R$styleable: int[] Drawable>;

        r5 = virtualinvoke r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r3, $r6);

     label2:
        virtualinvoke r0.<android.graphics.drawable.Drawable: void inflateWithAttributes(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.TypedArray,int)>(r1, r2, r5, 0);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    void inflateWithAttributes(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.TypedArray, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.content.res.TypedArray r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.content.res.TypedArray;

        i0 := @parameter3: int;

        $z0 = r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i0, $z0);

        r0.<android.graphics.drawable.Drawable: boolean mVisible> = $z1;

        return;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.Drawable r0;

        r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    private static android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources, android.graphics.Bitmap, byte[], android.graphics.Rect, android.graphics.Rect, java.lang.String)
    {
        android.content.res.Resources r0;
        android.graphics.Bitmap r1;
        byte[] r2;
        android.graphics.Rect r3, r4;
        java.lang.String r5;
        android.graphics.drawable.BitmapDrawable $r6;
        android.graphics.drawable.NinePatchDrawable $r7;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: byte[];

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: java.lang.String;

        if r2 == null goto label1;

        $r7 = new android.graphics.drawable.NinePatchDrawable;

        specialinvoke $r7.<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,android.graphics.Rect,java.lang.String)>(r0, r1, r2, r3, r4, r5);

        return $r7;

     label1:
        $r6 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r6.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>(r0, r1);

        return $r6;
    }

    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.PorterDuffColorFilter r1, $r5;
        android.content.res.ColorStateList r2;
        android.graphics.PorterDuff$Mode r3;
        int i0;
        int[] $r4;

        r0 := @this: android.graphics.drawable.Drawable;

        r1 := @parameter0: android.graphics.PorterDuffColorFilter;

        r2 := @parameter1: android.content.res.ColorStateList;

        r3 := @parameter2: android.graphics.PorterDuff$Mode;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke r0.<android.graphics.drawable.Drawable: int[] getState()>();

        i0 = virtualinvoke r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        if r1 != null goto label3;

        $r5 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r5.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>(i0, r3);

        return $r5;

     label3:
        virtualinvoke r1.<android.graphics.PorterDuffColorFilter: void setColor(int)>(i0);

        virtualinvoke r1.<android.graphics.PorterDuffColorFilter: void setMode(android.graphics.PorterDuff$Mode)>(r3);

        return r1;
    }

    static android.content.res.TypedArray obtainAttributes(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[])
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        int[] r3;
        android.content.res.TypedArray $r4, $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: int[];

        if r1 != null goto label1;

        $r5 = virtualinvoke r0.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r2, r3);

        return $r5;

     label1:
        $r4 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, r3, 0, 0);

        return $r4;
    }

    public static android.graphics.PorterDuff$Mode parseTintMode(int, android.graphics.PorterDuff$Mode)
    {
        int i0;
        android.graphics.PorterDuff$Mode r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.graphics.PorterDuff$Mode;

        tableswitch(i0)
        {
            case 3: goto label1;
            case 4: goto label7;
            case 5: goto label2;
            case 6: goto label7;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label3;
            case 10: goto label7;
            case 11: goto label7;
            case 12: goto label7;
            case 13: goto label7;
            case 14: goto label4;
            case 15: goto label5;
            case 16: goto label6;
            default: goto label7;
        };

     label1:
        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        return $r1;

     label2:
        $r6 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        return $r6;

     label3:
        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        return $r5;

     label4:
        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        return $r4;

     label5:
        $r3 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>;

        return $r3;

     label6:
        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>;

        return $r2;

     label7:
        return r0;
    }

    static void <clinit>()
    {
        android.graphics.Rect $r0;
        android.graphics.PorterDuff$Mode $r1;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>()>();

        <android.graphics.drawable.Drawable: android.graphics.Rect ZERO_BOUNDS_RECT> = $r0;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE> = $r1;

        return;
    }
}
