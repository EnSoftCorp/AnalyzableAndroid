public class com.android.internal.util.Preconditions extends java.lang.Object
{

    public void <init>()
    {
        com.android.internal.util.Preconditions r0;

        r0 := @this: com.android.internal.util.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return r0;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.NullPointerException $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return r0;
    }

    public static void checkState(boolean)
    {
        boolean z0;
        java.lang.IllegalStateException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static void checkFlagsArgument(int, int)
    {
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.String $r3, $r6, $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 == i0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested flags 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but only 0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are allowed");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r0;

     label1:
        return;
    }

    public static int checkArgumentNonnegative(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label1:
        return i0;
    }

    public static long checkArgumentNonnegative(long, java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        long l0;
        java.lang.String r1;
        byte $b1;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r0;

     label1:
        return l0;
    }

    public static int checkArgumentPositive(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label1:
        return i0;
    }

    public static float checkArgumentFinite(float, java.lang.String)
    {
        float f0;
        java.lang.String r0, $r5, $r10;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z1 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be infinite");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return f0;
    }

    public static float checkArgumentInRange(float, float, float, java.lang.String)
    {
        float f0, f1, f2;
        java.lang.String r0, $r5, $r11, $r14;
        boolean $z0;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r1, $r6, $r10;
        java.lang.Object[] $r2, $r7;
        java.lang.Float $r3, $r4, $r8, $r9;
        java.lang.StringBuilder $r12, $r13, $r15;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r0 := @parameter3: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $b0 = f0 cmpg f1;

        if $b0 >= 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r7[2] = $r9;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%f, %f] (too low)", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        $b1 = f0 cmpl f2;

        if $b1 <= 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r2[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%f, %f] (too high)", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        return f0;
    }

    public static int checkArgumentInRange(int, int, int, java.lang.String)
    {
        int i0, i1, i2;
        java.lang.String r0, $r5, $r9;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.Object[] $r2, $r7;
        java.lang.Integer $r3, $r4, $r8, $r10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        if i0 >= i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r8;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r7[2] = $r10;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too low)", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label1:
        if i0 <= i2 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too high)", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return i0;
    }

    public static java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0, $r4;
        java.lang.String r1, $r6, $r11;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3, $r7;
        java.lang.Integer $r5;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label4;

        $r2 = r0[i0];

        if $r2 != null goto label3;

        $r3 = new java.lang.NullPointerException;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] must not be null", $r4);

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return r0;
    }

    public static java.util.Collection checkCollectionElementsNotNull(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1, $r7, $r11;
        long l0;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0;
        java.lang.NullPointerException $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.Long $r6;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        l0 = 0L;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if r3 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] must not be null", $r5);

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label3:
        l0 = l0 + 1L;

        goto label2;

     label4:
        return r0;
    }

    public static java.util.Collection checkCollectionNotEmpty(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1, $r6, $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return r0;
    }

    public static float[] checkArrayElementsInRange(float[], float, float, java.lang.String)
    {
        float[] r0;
        float f0, f1, f2;
        java.lang.String r1, $r5, $r13, $r17, $r25;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r20, $r21, $r22, $r23, $r24;
        boolean $z0;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r7, $r12, $r18;
        java.lang.Object[] $r8, $r14;
        java.lang.Integer $r9, $r15;
        java.lang.Float $r10, $r11, $r16, $r19;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r1 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, $r5);

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label5;

        f2 = r0[i0];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f2);

        if $z0 == 0 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must not be NaN");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label2:
        $b2 = f2 cmpg f0;

        if $b2 >= 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = newarray (java.lang.Object)[4];

        $r14[0] = r1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[1] = $r15;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r14[2] = $r16;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r14[3] = $r19;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%f, %f] (too low)", $r14);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label3:
        $b3 = f2 cmpl f1;

        if $b3 <= 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[4];

        $r8[0] = r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[1] = $r9;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r8[2] = $r10;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r8[3] = $r11;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%f, %f] (too high)", $r8);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return r0;
    }
}
