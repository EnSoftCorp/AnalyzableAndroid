public class android.hardware.camera2.legacy.RequestThreadManager$FpsCounter extends java.lang.Object
{
    private static final java.lang.String TAG;
    private int mFrameCount;
    private long mLastTime;
    private long mLastPrintTime;
    private double mLastFps;
    private final java.lang.String mStreamType;
    private static final long NANO_PER_SECOND;

    public void <init>(java.lang.String)
    {
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter r0;
        java.lang.String r1;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: int mFrameCount> = 0;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime> = 0L;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastPrintTime> = 0L;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: double mLastFps> = 0.0;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: java.lang.String mStreamType> = r1;

        return;
    }

    public synchronized void countFrame()
    {
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter r0;
        long l0, l1, $l4, $l6, $l7, $l9;
        int $i2, $i3, $i10;
        byte $b5, $b8;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        $i2 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: int mFrameCount>;

        $i3 = $i2 + 1;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: int mFrameCount> = $i3;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $l4 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime>;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label1;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime> = l0;

     label1:
        $l6 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime>;

        $l7 = $l6 + 1000000000L;

        $b8 = l0 cmp $l7;

        if $b8 <= 0 goto label2;

        $l9 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime>;

        l1 = l0 - $l9;

        $i10 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: int mFrameCount>;

        $d1 = (double) $i10;

        $d0 = (double) l1;

        $d2 = 1.0E9 / $d0;

        $d3 = $d1 * $d2;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: double mLastFps> = $d3;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: int mFrameCount> = 0;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime> = l0;

     label2:
        return;
    }

    public synchronized double checkFps()
    {
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter r0;
        double $d0;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        $d0 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: double mLastFps>;

        return $d0;
    }

    public synchronized void staggeredLog()
    {
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter r0;
        long $l0, $l1, $l2, $l4;
        byte $b3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String $r3, $r7;
        double $d0;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        $l2 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime>;

        $l0 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastPrintTime>;

        $l1 = $l0 + 5000000000L;

        $b3 = $l2 cmp $l1;

        if $b3 <= 0 goto label1;

        $l4 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastTime>;

        r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long mLastPrintTime> = $l4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FPS for ");

        $r3 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: java.lang.String mStreamType>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stream: ");

        $d0 = r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: double mLastFps>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("FpsCounter", $r7);

     label1:
        return;
    }

    public synchronized void countAndLog()
    {
        android.hardware.camera2.legacy.RequestThreadManager$FpsCounter r0;

        r0 := @this: android.hardware.camera2.legacy.RequestThreadManager$FpsCounter;

        virtualinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void countFrame()>();

        virtualinvoke r0.<android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: void staggeredLog()>();

        return;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: long NANO_PER_SECOND> = 1000000000L;

        <android.hardware.camera2.legacy.RequestThreadManager$FpsCounter: java.lang.String TAG> = "FpsCounter";

        return;
    }
}
