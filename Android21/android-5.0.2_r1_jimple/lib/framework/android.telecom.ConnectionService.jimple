public abstract class android.telecom.ConnectionService extends android.app.Service
{
    public static final java.lang.String SERVICE_INTERFACE;
    private static final boolean PII_DEBUG;
    private static final int MSG_ADD_CONNECTION_SERVICE_ADAPTER;
    private static final int MSG_CREATE_CONNECTION;
    private static final int MSG_ABORT;
    private static final int MSG_ANSWER;
    private static final int MSG_REJECT;
    private static final int MSG_DISCONNECT;
    private static final int MSG_HOLD;
    private static final int MSG_UNHOLD;
    private static final int MSG_ON_AUDIO_STATE_CHANGED;
    private static final int MSG_PLAY_DTMF_TONE;
    private static final int MSG_STOP_DTMF_TONE;
    private static final int MSG_CONFERENCE;
    private static final int MSG_SPLIT_FROM_CONFERENCE;
    private static final int MSG_ON_POST_DIAL_CONTINUE;
    private static final int MSG_REMOVE_CONNECTION_SERVICE_ADAPTER;
    private static final int MSG_ANSWER_VIDEO;
    private static final int MSG_MERGE_CONFERENCE;
    private static final int MSG_SWAP_CONFERENCE;
    private static android.telecom.Connection sNullConnection;
    private final java.util.Map mConnectionById;
    private final java.util.Map mIdByConnection;
    private final java.util.Map mConferenceById;
    private final java.util.Map mIdByConference;
    private final android.telecom.RemoteConnectionManager mRemoteConnectionManager;
    private final java.util.List mPreInitializationConnectionRequests;
    private final android.telecom.ConnectionServiceAdapter mAdapter;
    private boolean mAreAccountsInitialized;
    private android.telecom.Conference sNullConference;
    private final android.os.IBinder mBinder;
    private final android.os.Handler mHandler;
    private final android.telecom.Conference$Listener mConferenceListener;
    private final android.telecom.Connection$Listener mConnectionListener;

    public void <init>()
    {
        android.telecom.ConnectionService r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2, $r3, $r4;
        android.telecom.RemoteConnectionManager $r5;
        java.util.ArrayList $r6;
        android.telecom.ConnectionServiceAdapter $r7;
        android.telecom.ConnectionService$1 $r8;
        android.telecom.ConnectionService$2 $r9;
        android.os.Looper $r10;
        android.telecom.ConnectionService$3 $r11;
        android.telecom.ConnectionService$4 $r12;

        r0 := @this: android.telecom.ConnectionService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mConnectionById> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mConferenceById> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mIdByConference> = $r4;

        $r5 = new android.telecom.RemoteConnectionManager;

        specialinvoke $r5.<android.telecom.RemoteConnectionManager: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests> = $r6;

        $r7 = new android.telecom.ConnectionServiceAdapter;

        specialinvoke $r7.<android.telecom.ConnectionServiceAdapter: void <init>()>();

        r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter> = $r7;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = 0;

        $r8 = new android.telecom.ConnectionService$1;

        specialinvoke $r8.<android.telecom.ConnectionService$1: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.os.IBinder mBinder> = $r8;

        $r9 = new android.telecom.ConnectionService$2;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r9.<android.telecom.ConnectionService$2: void <init>(android.telecom.ConnectionService,android.os.Looper)>(r0, $r10);

        r0.<android.telecom.ConnectionService: android.os.Handler mHandler> = $r9;

        $r11 = new android.telecom.ConnectionService$3;

        specialinvoke $r11.<android.telecom.ConnectionService$3: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener> = $r11;

        $r12 = new android.telecom.ConnectionService$4;

        specialinvoke $r12.<android.telecom.ConnectionService$4: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener> = $r12;

        return;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.telecom.ConnectionService r0;
        android.content.Intent r1;
        android.os.IBinder $r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.telecom.ConnectionService: android.os.IBinder mBinder>;

        return $r2;
    }

    public boolean onUnbind(android.content.Intent)
    {
        android.telecom.ConnectionService r0;
        android.content.Intent r1;
        boolean $z0;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.telecom.ConnectionService: void endAllConnections()>();

        $z0 = specialinvoke r0.<android.app.Service: boolean onUnbind(android.content.Intent)>(r1);

        return $z0;
    }

    private void createConnection(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1, $r20;
        java.lang.String r2, r6, $r12, $r14, $r15, $r16, $r21;
        android.telecom.ConnectionRequest r3;
        boolean z0, z1, $z2, $z3;
        android.telecom.Connection r4, $r10;
        android.net.Uri r5, $r22;
        java.lang.Object[] $r7, $r11, $r13, $r18;
        java.lang.Boolean $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.telecom.ParcelableConnection $r17;
        android.telecom.ConnectionServiceAdapter $r19;
        com.android.internal.telecom.IVideoProvider $r23;
        android.telecom.Connection$VideoProvider $r24, $r25;
        android.telecom.StatusHints $r26;
        android.telecom.DisconnectCause $r27, $r28;
        java.util.List $r29, $r30;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.telecom.ConnectionRequest;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r7 = newarray (java.lang.Object)[5];

        $r7[0] = r1;

        $r7[1] = r2;

        $r7[2] = r3;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r7[3] = $r8;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r7[4] = $r9;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, callManagerAccount: %s, callId: %s, request: %s, isIncoming: %b, isUnknown: %b", $r7);

        if z1 == 0 goto label1;

        $r10 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateUnknownConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

        goto label3;

     label1:
        if z0 == 0 goto label2;

        $r10 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

        goto label3;

     label2:
        $r10 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

     label3:
        r4 = $r10;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r4;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, connection: %s", $r11);

        if r4 != null goto label4;

        $r28 = new android.telecom.DisconnectCause;

        specialinvoke $r28.<android.telecom.DisconnectCause: void <init>(int)>(1);

        r4 = staticinvoke <android.telecom.Connection: android.telecom.Connection createFailedConnection(android.telecom.DisconnectCause)>($r28);

     label4:
        $i0 = virtualinvoke r4.<android.telecom.Connection: int getState()>();

        if $i0 == 6 goto label5;

        specialinvoke r0.<android.telecom.ConnectionService: void addConnection(java.lang.String,android.telecom.Connection)>(r2, r4);

     label5:
        r5 = virtualinvoke r4.<android.telecom.Connection: android.net.Uri getAddress()>();

        if r5 != null goto label6;

        $r12 = "null";

        goto label7;

     label6:
        $r12 = virtualinvoke r5.<android.net.Uri: java.lang.String getSchemeSpecificPart()>();

     label7:
        r6 = $r12;

        $r13 = newarray (java.lang.Object)[3];

        $r14 = staticinvoke <android.telecom.Connection: java.lang.String toLogSafePhoneNumber(java.lang.String)>(r6);

        $r13[0] = $r14;

        $i1 = virtualinvoke r4.<android.telecom.Connection: int getState()>();

        $r15 = staticinvoke <android.telecom.Connection: java.lang.String stateToString(int)>($i1);

        $r13[1] = $r15;

        $i2 = virtualinvoke r4.<android.telecom.Connection: int getCallCapabilities()>();

        $r16 = staticinvoke <android.telecom.PhoneCapabilities: java.lang.String toString(int)>($i2);

        $r13[2] = $r16;

        staticinvoke <android.telecom.Log: void v(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, number: %s, state: %s, capabilities: %s", $r13);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r2;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, calling handleCreateConnectionSuccessful %s", $r18);

        $r19 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $r17 = new android.telecom.ParcelableConnection;

        $r20 = virtualinvoke r3.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        $i3 = virtualinvoke r4.<android.telecom.Connection: int getState()>();

        $i4 = virtualinvoke r4.<android.telecom.Connection: int getCallCapabilities()>();

        $r22 = virtualinvoke r4.<android.telecom.Connection: android.net.Uri getAddress()>();

        $i6 = virtualinvoke r4.<android.telecom.Connection: int getAddressPresentation()>();

        $r21 = virtualinvoke r4.<android.telecom.Connection: java.lang.String getCallerDisplayName()>();

        $i5 = virtualinvoke r4.<android.telecom.Connection: int getCallerDisplayNamePresentation()>();

        $r24 = virtualinvoke r4.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        if $r24 != null goto label8;

        $r23 = null;

        goto label9;

     label8:
        $r25 = virtualinvoke r4.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        $r23 = virtualinvoke $r25.<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()>();

     label9:
        $i7 = virtualinvoke r4.<android.telecom.Connection: int getVideoState()>();

        $z2 = virtualinvoke r4.<android.telecom.Connection: boolean isRingbackRequested()>();

        $z3 = virtualinvoke r4.<android.telecom.Connection: boolean getAudioModeIsVoip()>();

        $r26 = virtualinvoke r4.<android.telecom.Connection: android.telecom.StatusHints getStatusHints()>();

        $r27 = virtualinvoke r4.<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()>();

        $r30 = virtualinvoke r4.<android.telecom.Connection: java.util.List getConferenceableConnections()>();

        $r29 = specialinvoke r0.<android.telecom.ConnectionService: java.util.List createConnectionIdList(java.util.List)>($r30);

        specialinvoke $r17.<android.telecom.ParcelableConnection: void <init>(android.telecom.PhoneAccountHandle,int,int,android.net.Uri,int,java.lang.String,int,com.android.internal.telecom.IVideoProvider,int,boolean,boolean,android.telecom.StatusHints,android.telecom.DisconnectCause,java.util.List)>($r20, $i3, $i4, $r22, $i6, $r21, $i5, $r23, $i7, $z2, $z3, $r26, $r27, $r29);

        virtualinvoke $r19.<android.telecom.ConnectionServiceAdapter: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection)>(r2, r3, $r17);

        return;
    }

    private void abort(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "abort %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "abort");

        virtualinvoke $r3.<android.telecom.Connection: void onAbort()>();

        return;
    }

    private void answerVideo(java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "answerVideo %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r3.<android.telecom.Connection: void onAnswer(int)>(i0);

        return;
    }

    private void answer(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "answer %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r3.<android.telecom.Connection: void onAnswer()>();

        return;
    }

    private void reject(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "reject %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "reject");

        virtualinvoke $r3.<android.telecom.Connection: void onReject()>();

        return;
    }

    private void disconnect(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "disconnect %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "disconnect");

        virtualinvoke $r5.<android.telecom.Connection: void onDisconnect()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "disconnect");

        virtualinvoke $r4.<android.telecom.Conference: void onDisconnect()>();

     label2:
        return;
    }

    private void hold(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "hold %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "hold");

        virtualinvoke $r5.<android.telecom.Connection: void onHold()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "hold");

        virtualinvoke $r4.<android.telecom.Conference: void onHold()>();

     label2:
        return;
    }

    private void unhold(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "unhold %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "unhold");

        virtualinvoke $r5.<android.telecom.Connection: void onUnhold()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "unhold");

        virtualinvoke $r4.<android.telecom.Conference: void onUnhold()>();

     label2:
        return;
    }

    private void onAudioStateChanged(java.lang.String, android.telecom.AudioState)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.AudioState r2;
        java.lang.Object[] $r3;
        java.util.Map $r4;
        boolean $z0;
        android.telecom.Conference $r5;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.AudioState;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onAudioStateChanged %s %s", $r3);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "onAudioStateChanged");

        virtualinvoke $r6.<android.telecom.Connection: void setAudioState(android.telecom.AudioState)>(r2);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "onAudioStateChanged");

        virtualinvoke $r5.<android.telecom.Conference: void setAudioState(android.telecom.AudioState)>(r2);

     label2:
        return;
    }

    private void playDtmfTone(java.lang.String, char)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        char c0;
        java.lang.Object[] $r2;
        java.lang.Character $r3;
        java.util.Map $r4;
        boolean $z0;
        android.telecom.Conference $r5;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2[1] = $r3;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "playDtmfTone %s %c", $r2);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "playDtmfTone");

        virtualinvoke $r6.<android.telecom.Connection: void onPlayDtmfTone(char)>(c0);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "playDtmfTone");

        virtualinvoke $r5.<android.telecom.Conference: void onPlayDtmfTone(char)>(c0);

     label2:
        return;
    }

    private void stopDtmfTone(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "stopDtmfTone %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r5.<android.telecom.Connection: void onStopDtmfTone()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r4.<android.telecom.Conference: void onStopDtmfTone()>();

     label2:
        return;
    }

    private void conference(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        android.telecom.Connection r3, r4, $r7, $r8;
        android.telecom.Conference r5, $r9;
        java.lang.Object[] $r6, $r10, $r11;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "conference %s, %s", $r6);

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r2, "conference");

        $r7 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r3 != $r7 goto label1;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r2;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection2 missing in conference request %s.", $r11);

        return;

     label1:
        r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "conference");

        $r8 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r4 != $r8 goto label4;

        r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "addConnection");

        $r9 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        if r5 != $r9 goto label2;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection1 or Conference1 missing in conference request %s.", $r10);

        goto label3;

     label2:
        virtualinvoke r5.<android.telecom.Conference: void onMerge(android.telecom.Connection)>(r3);

     label3:
        goto label5;

     label4:
        virtualinvoke r0.<android.telecom.ConnectionService: void onConference(android.telecom.Connection,android.telecom.Connection)>(r4, r3);

     label5:
        return;
    }

    private void splitFromConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection r2, $r5;
        android.telecom.Conference r3;
        java.lang.Object[] $r4, $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "splitFromConference(%s)", $r4);

        r2 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "splitFromConference");

        $r5 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r2 != $r5 goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection missing in conference request %s.", $r6);

        return;

     label1:
        r3 = virtualinvoke r2.<android.telecom.Connection: android.telecom.Conference getConference()>();

        if r3 == null goto label2;

        virtualinvoke r3.<android.telecom.Conference: void onSeparate(android.telecom.Connection)>(r2);

     label2:
        return;
    }

    private void mergeConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Conference r2;
        java.lang.Object[] $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "mergeConference(%s)", $r3);

        r2 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "mergeConference");

        if r2 == null goto label1;

        virtualinvoke r2.<android.telecom.Conference: void onMerge()>();

     label1:
        return;
    }

    private void swapConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Conference r2;
        java.lang.Object[] $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "swapConference(%s)", $r3);

        r2 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "swapConference");

        if r2 == null goto label1;

        virtualinvoke r2.<android.telecom.Conference: void onSwap()>();

     label1:
        return;
    }

    private void onPostDialContinue(java.lang.String, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onPostDialContinue(%s)", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r3.<android.telecom.Connection: void onPostDialContinue(boolean)>(z0);

        return;
    }

    private void onAdapterAttached()
    {
        android.telecom.ConnectionService r0;
        boolean $z0;
        android.telecom.ConnectionService$5 $r1;
        android.telecom.ConnectionServiceAdapter $r2;

        r0 := @this: android.telecom.ConnectionService;

        $z0 = r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $r1 = new android.telecom.ConnectionService$5;

        specialinvoke $r1.<android.telecom.ConnectionService$5: void <init>(android.telecom.ConnectionService)>(r0);

        virtualinvoke $r2.<android.telecom.ConnectionServiceAdapter: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback)>($r1);

        return;
    }

    public final android.telecom.RemoteConnection createRemoteIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;
        android.telecom.RemoteConnectionManager $r3;
        android.telecom.RemoteConnection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        $r4 = virtualinvoke $r3.<android.telecom.RemoteConnectionManager: android.telecom.RemoteConnection createRemoteConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest,boolean)>(r1, r2, 1);

        return $r4;
    }

    public final android.telecom.RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;
        android.telecom.RemoteConnectionManager $r3;
        android.telecom.RemoteConnection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        $r4 = virtualinvoke $r3.<android.telecom.RemoteConnectionManager: android.telecom.RemoteConnection createRemoteConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest,boolean)>(r1, r2, 0);

        return $r4;
    }

    public final void conferenceRemoteConnections(android.telecom.RemoteConnection, android.telecom.RemoteConnection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnection r1, r2;
        android.telecom.RemoteConnectionManager $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConnection;

        r2 := @parameter1: android.telecom.RemoteConnection;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        virtualinvoke $r3.<android.telecom.RemoteConnectionManager: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)>(r1, r2);

        return;
    }

    public final void addConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.lang.String r2, r7;
        java.util.ArrayList r3, $r8;
        java.util.Iterator r4, r23;
        android.telecom.Connection r5, r6;
        java.util.List $r9, $r13;
        boolean $z0, $z1, $z2;
        android.telecom.ParcelableConference $r10, r22;
        android.telecom.PhoneAccountHandle $r11;
        int $i0, $i1;
        android.telecom.ConnectionServiceAdapter $r12, $r18;
        java.lang.Object $r14, $r15, $r17, $r20;
        java.util.Map $r16, $r19, $r21;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        r2 = specialinvoke r0.<android.telecom.ConnectionService: java.lang.String addConferenceInternal(android.telecom.Conference)>(r1);

        if r2 == null goto label6;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(2);

        r3 = $r8;

        $r9 = virtualinvoke r1.<android.telecom.Conference: java.util.List getConnections()>();

        r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.telecom.Connection) $r17;

        $r19 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z2 == 0 goto label2;

        $r21 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r20 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r20);

     label2:
        goto label1;

     label3:
        $r10 = new android.telecom.ParcelableConference;

        $r11 = virtualinvoke r1.<android.telecom.Conference: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>();

        $i0 = virtualinvoke r1.<android.telecom.Conference: int getState()>();

        $i1 = virtualinvoke r1.<android.telecom.Conference: int getCapabilities()>();

        specialinvoke $r10.<android.telecom.ParcelableConference: void <init>(android.telecom.PhoneAccountHandle,int,int,java.util.List)>($r11, $i0, $i1, r3);

        r22 = $r10;

        $r12 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r12.<android.telecom.ConnectionServiceAdapter: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference)>(r2, r22);

        $r13 = virtualinvoke r1.<android.telecom.Conference: java.util.List getConnections()>();

        r23 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r14 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.telecom.Connection) $r14;

        $r16 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r15 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (java.lang.String) $r15;

        if r7 == null goto label5;

        $r18 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r18.<android.telecom.ConnectionServiceAdapter: void setIsConferenced(java.lang.String,java.lang.String)>(r7, r2);

     label5:
        goto label4;

     label6:
        return;
    }

    public final java.util.Collection getAllConnections()
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public android.telecom.Connection onCreateUnknownConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onConference(android.telecom.Connection, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1, r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        r2 := @parameter1: android.telecom.Connection;

        return;
    }

    public void onRemoteConferenceAdded(android.telecom.RemoteConference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConference;

        return;
    }

    public boolean containsConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r2 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    void addRemoteConference(android.telecom.RemoteConference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConference;

        virtualinvoke r0.<android.telecom.ConnectionService: void onRemoteConferenceAdded(android.telecom.RemoteConference)>(r1);

        return;
    }

    private void onAccountsInitialized()
    {
        android.telecom.ConnectionService r0;
        java.util.Iterator r1;
        java.lang.Runnable r2;
        java.util.List $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: android.telecom.ConnectionService;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = 1;

        $r3 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Runnable) $r5;

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        $r4 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        return;
    }

    private void addConnection(java.lang.String, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection r2;
        java.util.Map $r3, $r5;
        android.telecom.Connection$Listener $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.Connection;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        $r7 = r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener>;

        virtualinvoke r2.<android.telecom.Connection: android.telecom.Connection addConnectionListener(android.telecom.Connection$Listener)>($r7);

        virtualinvoke r2.<android.telecom.Connection: void setConnectionService(android.telecom.ConnectionService)>(r0);

        return;
    }

    private void removeConnection(android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;
        java.lang.String r2;
        java.util.Map $r3, $r7, $r8, $r11;
        java.lang.Object $r4, $r9;
        android.telecom.Connection$Listener $r5;
        android.telecom.ConnectionServiceAdapter $r13;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.String) $r4;

        virtualinvoke r1.<android.telecom.Connection: void unsetConnectionService(android.telecom.ConnectionService)>(r0);

        $r5 = r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener>;

        virtualinvoke r1.<android.telecom.Connection: android.telecom.Connection removeConnectionListener(android.telecom.Connection$Listener)>($r5);

        $r8 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $r7 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        $r11 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r13 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r13.<android.telecom.ConnectionServiceAdapter: void removeCall(java.lang.String)>(r2);

        return;
    }

    private java.lang.String addConferenceInternal(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.lang.String r2;
        java.util.Map $r3, $r5, $r7;
        boolean $z0;
        java.util.UUID $r4;
        android.telecom.Conference$Listener $r9;
        java.lang.Object[] $r11;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Re-adding an existing conference: %s.", $r11);

        goto label2;

     label1:
        if r1 == null goto label2;

        $r4 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r2 = virtualinvoke $r4.<java.util.UUID: java.lang.String toString()>();

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        $r7 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r9 = r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener>;

        virtualinvoke r1.<android.telecom.Conference: android.telecom.Conference addListener(android.telecom.Conference$Listener)>($r9);

        return r2;

     label2:
        return null;
    }

    private void removeConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.lang.String r2;
        java.util.Map $r3, $r6, $r8, $r10;
        boolean $z0;
        android.telecom.Conference$Listener $r4;
        java.lang.Object $r7;
        android.telecom.ConnectionServiceAdapter $r12;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener>;

        virtualinvoke r1.<android.telecom.Conference: android.telecom.Conference removeListener(android.telecom.Conference$Listener)>($r4);

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.String) $r7;

        $r8 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r10 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r12 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r12.<android.telecom.ConnectionServiceAdapter: void removeCall(java.lang.String)>(r2);

     label1:
        return;
    }

    private android.telecom.Connection findConnectionForAction(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        boolean $z0;
        java.lang.Object[] $r4;
        android.telecom.Connection $r5, $r8;
        java.lang.Object $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (android.telecom.Connection) $r7;

        return $r8;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r2;

        $r4[1] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "%s - Cannot find Connection %s", $r4);

        $r5 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        return $r5;
    }

    static synchronized android.telecom.Connection getNullConnection()
    {
        android.telecom.Connection $r0, $r1;
        android.telecom.ConnectionService$6 $r2;

        $r0 = <android.telecom.ConnectionService: android.telecom.Connection sNullConnection>;

        if $r0 != null goto label1;

        $r2 = new android.telecom.ConnectionService$6;

        specialinvoke $r2.<android.telecom.ConnectionService$6: void <init>()>();

        <android.telecom.ConnectionService: android.telecom.Connection sNullConnection> = $r2;

     label1:
        $r1 = <android.telecom.ConnectionService: android.telecom.Connection sNullConnection>;

        return $r1;
    }

    private android.telecom.Conference findConferenceForAction(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        boolean $z0;
        java.lang.Object[] $r4;
        android.telecom.Conference $r5, $r8;
        java.lang.Object $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (android.telecom.Conference) $r7;

        return $r8;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r2;

        $r4[1] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "%s - Cannot find conference %s", $r4);

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        return $r5;
    }

    private java.util.List createConnectionIdList(java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.util.List r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        android.telecom.Connection r4;
        boolean $z0, $z1;
        java.lang.Object $r6, $r9;
        java.util.Map $r7, $r8;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.telecom.Connection) $r6;

        $r7 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r8 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        return r2;
    }

    private android.telecom.Conference getNullConference()
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference $r1, $r2;
        android.telecom.ConnectionService$7 $r3;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference>;

        if $r1 != null goto label1;

        $r3 = new android.telecom.ConnectionService$7;

        specialinvoke $r3.<android.telecom.ConnectionService$7: void <init>(android.telecom.ConnectionService,android.telecom.PhoneAccountHandle)>(r0, null);

        r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference> = $r3;

     label1:
        $r2 = r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference>;

        return $r2;
    }

    private void endAllConnections()
    {
        android.telecom.ConnectionService r0;
        java.util.Iterator r1, r10;
        android.telecom.Connection r2;
        java.util.Map $r3, $r5;
        java.util.Set $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8;
        android.telecom.Conference $r9, r11;

        r0 := @this: android.telecom.ConnectionService;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.telecom.Connection) $r8;

        $r9 = virtualinvoke r2.<android.telecom.Connection: android.telecom.Conference getConference()>();

        if $r9 != null goto label2;

        virtualinvoke r2.<android.telecom.Connection: void onDisconnect()>();

     label2:
        goto label1;

     label3:
        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r10 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.telecom.Conference) $r7;

        virtualinvoke r11.<android.telecom.Conference: void onDisconnect()>();

        goto label4;

     label5:
        return;
    }

    static android.os.Handler access$000(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.os.Handler mHandler>;

        return $r1;
    }

    static android.telecom.ConnectionServiceAdapter access$100(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.telecom.ConnectionServiceAdapter $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        return $r1;
    }

    static void access$200(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;

        r0 := @parameter0: android.telecom.ConnectionService;

        specialinvoke r0.<android.telecom.ConnectionService: void onAdapterAttached()>();

        return;
    }

    static boolean access$300(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        boolean $z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        $z0 = r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized>;

        return $z0;
    }

    static void access$400(android.telecom.ConnectionService, android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0, z1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.PhoneAccountHandle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.telecom.ConnectionRequest;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean)>(r1, r2, r3, z0, z1);

        return;
    }

    static java.util.List access$500(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.List $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        return $r1;
    }

    static void access$600(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void abort(java.lang.String)>(r1);

        return;
    }

    static void access$700(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void answer(java.lang.String)>(r1);

        return;
    }

    static void access$800(android.telecom.ConnectionService, java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.telecom.ConnectionService: void answerVideo(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$900(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void reject(java.lang.String)>(r1);

        return;
    }

    static void access$1000(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void disconnect(java.lang.String)>(r1);

        return;
    }

    static void access$1100(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void hold(java.lang.String)>(r1);

        return;
    }

    static void access$1200(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void unhold(java.lang.String)>(r1);

        return;
    }

    static void access$1300(android.telecom.ConnectionService, java.lang.String, android.telecom.AudioState)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.AudioState r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.AudioState;

        specialinvoke r0.<android.telecom.ConnectionService: void onAudioStateChanged(java.lang.String,android.telecom.AudioState)>(r1, r2);

        return;
    }

    static void access$1400(android.telecom.ConnectionService, java.lang.String, char)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        char c0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        specialinvoke r0.<android.telecom.ConnectionService: void playDtmfTone(java.lang.String,char)>(r1, c0);

        return;
    }

    static void access$1500(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void stopDtmfTone(java.lang.String)>(r1);

        return;
    }

    static void access$1600(android.telecom.ConnectionService, java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void conference(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1700(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void splitFromConference(java.lang.String)>(r1);

        return;
    }

    static void access$1800(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void mergeConference(java.lang.String)>(r1);

        return;
    }

    static void access$1900(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void swapConference(java.lang.String)>(r1);

        return;
    }

    static void access$2000(android.telecom.ConnectionService, java.lang.String, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void onPostDialContinue(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static java.util.Map access$2100(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        return $r1;
    }

    static java.util.List access$2200(android.telecom.ConnectionService, java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.util.List r1, $r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.util.List;

        $r2 = specialinvoke r0.<android.telecom.ConnectionService: java.util.List createConnectionIdList(java.util.List)>(r1);

        return $r2;
    }

    static void access$2300(android.telecom.ConnectionService, android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.Conference;

        specialinvoke r0.<android.telecom.ConnectionService: void removeConference(android.telecom.Conference)>(r1);

        return;
    }

    static java.util.Map access$2400(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        return $r1;
    }

    static void access$2500(android.telecom.ConnectionService, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.Connection;

        specialinvoke r0.<android.telecom.ConnectionService: void removeConnection(android.telecom.Connection)>(r1);

        return;
    }

    static android.telecom.RemoteConnectionManager access$2600(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnectionManager $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        return $r1;
    }

    static void access$2700(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;

        r0 := @parameter0: android.telecom.ConnectionService;

        specialinvoke r0.<android.telecom.ConnectionService: void onAccountsInitialized()>();

        return;
    }

    static boolean access$302(android.telecom.ConnectionService, boolean)
    {
        android.telecom.ConnectionService r0;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        z0 := @parameter1: boolean;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = z0;

        return z0;
    }

    static void <clinit>()
    {
        boolean $z0;

        <android.telecom.ConnectionService: int MSG_SWAP_CONFERENCE> = 19;

        <android.telecom.ConnectionService: int MSG_MERGE_CONFERENCE> = 18;

        <android.telecom.ConnectionService: int MSG_ANSWER_VIDEO> = 17;

        <android.telecom.ConnectionService: int MSG_REMOVE_CONNECTION_SERVICE_ADAPTER> = 16;

        <android.telecom.ConnectionService: int MSG_ON_POST_DIAL_CONTINUE> = 14;

        <android.telecom.ConnectionService: int MSG_SPLIT_FROM_CONFERENCE> = 13;

        <android.telecom.ConnectionService: int MSG_CONFERENCE> = 12;

        <android.telecom.ConnectionService: int MSG_STOP_DTMF_TONE> = 11;

        <android.telecom.ConnectionService: int MSG_PLAY_DTMF_TONE> = 10;

        <android.telecom.ConnectionService: int MSG_ON_AUDIO_STATE_CHANGED> = 9;

        <android.telecom.ConnectionService: int MSG_UNHOLD> = 8;

        <android.telecom.ConnectionService: int MSG_HOLD> = 7;

        <android.telecom.ConnectionService: int MSG_DISCONNECT> = 6;

        <android.telecom.ConnectionService: int MSG_REJECT> = 5;

        <android.telecom.ConnectionService: int MSG_ANSWER> = 4;

        <android.telecom.ConnectionService: int MSG_ABORT> = 3;

        <android.telecom.ConnectionService: int MSG_CREATE_CONNECTION> = 2;

        <android.telecom.ConnectionService: int MSG_ADD_CONNECTION_SERVICE_ADAPTER> = 1;

        <android.telecom.ConnectionService: java.lang.String SERVICE_INTERFACE> = "android.telecom.ConnectionService";

        $z0 = staticinvoke <android.telecom.Log: boolean isLoggable(int)>(3);

        <android.telecom.ConnectionService: boolean PII_DEBUG> = $z0;

        return;
    }
}
