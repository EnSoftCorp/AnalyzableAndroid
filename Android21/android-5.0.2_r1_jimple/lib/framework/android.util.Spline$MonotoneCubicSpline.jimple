public class android.util.Spline$MonotoneCubicSpline extends android.util.Spline
{
    private float[] mX;
    private float[] mY;
    private float[] mM;

    public void <init>(float[], float[])
    {
        android.util.Spline$MonotoneCubicSpline r0;
        float[] r1, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i16, $i17, $i18, $i20, $i21, i22, i23;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        byte $b11, $b13, $b14, $b15, $b19;

        r0 := @this: android.util.Spline$MonotoneCubicSpline;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        specialinvoke r0.<android.util.Spline: void <init>()>();

        if r1 == null goto label01;

        if r2 == null goto label01;

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $i4 = lengthof r1;

        if $i4 >= 2 goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least two control points and the arrays must be of equal length.");

        throw $r5;

     label02:
        i0 = lengthof r1;

        $i5 = i0 - 1;

        r3 = newarray (float)[$i5];

        r4 = newarray (float)[i0];

        i1 = 0;

     label03:
        $i6 = i0 - 1;

        if i1 >= $i6 goto label05;

        $i20 = i1 + 1;

        $f21 = r1[$i20];

        $f22 = r1[i1];

        f0 = $f21 - $f22;

        $b19 = f0 cmpg 0.0F;

        if $b19 > 0 goto label04;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The control points must all have strictly increasing X values.");

        throw $r7;

     label04:
        $i21 = i1 + 1;

        $f24 = r2[$i21];

        $f25 = r2[i1];

        $f23 = $f24 - $f25;

        $f26 = $f23 / f0;

        r3[i1] = $f26;

        i1 = i1 + 1;

        goto label03;

     label05:
        $f4 = r3[0];

        r4[0] = $f4;

        i22 = 1;

     label06:
        $i8 = i0 - 1;

        if i22 >= $i8 goto label07;

        $i17 = i22 - 1;

        $f20 = r3[$i17];

        $f19 = r3[i22];

        $f17 = $f20 + $f19;

        $f18 = $f17 * 0.5F;

        r4[i22] = $f18;

        i22 = i22 + 1;

        goto label06;

     label07:
        $i9 = i0 - 1;

        $i7 = i0 - 2;

        $f5 = r3[$i7];

        r4[$i9] = $f5;

        i23 = 0;

     label08:
        $i10 = i0 - 1;

        if i23 >= $i10 goto label13;

        $f6 = r3[i23];

        $b11 = $f6 cmpl 0.0F;

        if $b11 != 0 goto label09;

        r4[i23] = 0.0F;

        $i16 = i23 + 1;

        r4[$i16] = 0.0F;

        goto label12;

     label09:
        $f8 = r4[i23];

        $f7 = r3[i23];

        f27 = $f8 / $f7;

        $i12 = i23 + 1;

        $f9 = r4[$i12];

        $f10 = r3[i23];

        f1 = $f9 / $f10;

        $b13 = f27 cmpg 0.0F;

        if $b13 < 0 goto label10;

        $b15 = f1 cmpg 0.0F;

        if $b15 >= 0 goto label11;

     label10:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The control points must have monotonic Y values.");

        throw $r6;

     label11:
        f2 = staticinvoke <android.util.FloatMath: float hypot(float,float)>(f27, f1);

        $b14 = f2 cmpl 9.0F;

        if $b14 <= 0 goto label12;

        f3 = 3.0F / f2;

        $f14 = f3 * f27;

        $f11 = r3[i23];

        $f15 = $f14 * $f11;

        r4[i23] = $f15;

        $i18 = i23 + 1;

        $f13 = f3 * f1;

        $f12 = r3[i23];

        $f16 = $f13 * $f12;

        r4[$i18] = $f16;

     label12:
        i23 = i23 + 1;

        goto label08;

     label13:
        r0.<android.util.Spline$MonotoneCubicSpline: float[] mX> = r1;

        r0.<android.util.Spline$MonotoneCubicSpline: float[] mY> = r2;

        r0.<android.util.Spline$MonotoneCubicSpline: float[] mM> = r4;

        return;
    }

    public float interpolate(float)
    {
        android.util.Spline$MonotoneCubicSpline r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37;
        int i0, i1, $i3, $i5, $i6, $i8, $i9, $i11;
        float[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        boolean $z0;
        byte $b2, $b4, $b7, $b10;

        r0 := @this: android.util.Spline$MonotoneCubicSpline;

        f0 := @parameter0: float;

        $r1 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        i0 = lengthof $r1;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return f0;

     label1:
        $r2 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $f3 = $r2[0];

        $b2 = f0 cmpg $f3;

        if $b2 > 0 goto label2;

        $r15 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $f37 = $r15[0];

        return $f37;

     label2:
        $r3 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $i3 = i0 - 1;

        $f4 = $r3[$i3];

        $b4 = f0 cmpl $f4;

        if $b4 < 0 goto label3;

        $r13 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $i11 = i0 - 1;

        $f36 = $r13[$i11];

        return $f36;

     label3:
        i1 = 0;

     label4:
        $r4 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $i5 = i1 + 1;

        $f5 = $r4[$i5];

        $b7 = f0 cmpl $f5;

        if $b7 < 0 goto label5;

        i1 = i1 + 1;

        $r12 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $f33 = $r12[i1];

        $b10 = f0 cmpl $f33;

        if $b10 != 0 goto label4;

        $r14 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $f35 = $r14[i1];

        return $f35;

     label5:
        $r6 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $i6 = i1 + 1;

        $f6 = $r6[$i6];

        $r5 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $f7 = $r5[i1];

        f1 = $f6 - $f7;

        $r7 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $f8 = $r7[i1];

        $f9 = f0 - $f8;

        f2 = $f9 / f1;

        $r8 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $f12 = $r8[i1];

        $f11 = 2.0F * f2;

        $f10 = 1.0F + $f11;

        $f14 = $f12 * $f10;

        $r9 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mM>;

        $f15 = $r9[i1];

        $f16 = f1 * $f15;

        $f13 = $f16 * f2;

        $f20 = $f14 + $f13;

        $f19 = 1.0F - f2;

        $f18 = $f20 * $f19;

        $f17 = 1.0F - f2;

        $f29 = $f18 * $f17;

        $r10 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $i8 = i1 + 1;

        $f24 = $r10[$i8];

        $f21 = 2.0F * f2;

        $f22 = 3.0F - $f21;

        $f25 = $f24 * $f22;

        $r11 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mM>;

        $i9 = i1 + 1;

        $f23 = $r11[$i9];

        $f27 = f1 * $f23;

        $f28 = f2 - 1.0F;

        $f26 = $f27 * $f28;

        $f32 = $f25 + $f26;

        $f31 = $f32 * f2;

        $f30 = $f31 * f2;

        $f34 = $f29 + $f30;

        return $f34;
    }

    public java.lang.String toString()
    {
        android.util.Spline$MonotoneCubicSpline r0;
        java.lang.StringBuilder r1, $r2, $r7, $r10, $r12, $r16;
        int i0, i1;
        float[] $r3, $r8, $r11, $r14;
        java.lang.String $r6;
        float $f0, $f1, $f2;

        r0 := @this: android.util.Spline$MonotoneCubicSpline;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        i0 = lengthof $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MonotoneCubicSpline{[");

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        if i1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r8 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mX>;

        $f0 = $r8[i1];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mY>;

        $f1 = $r11[i1];

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = r0.<android.util.Spline$MonotoneCubicSpline: float[] mM>;

        $f2 = $r14[i1];

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]}");

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
