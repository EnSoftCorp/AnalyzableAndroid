public class android.os.MemoryFile extends java.lang.Object
{
    private static java.lang.String TAG;
    private static final int PROT_READ;
    private static final int PROT_WRITE;
    private java.io.FileDescriptor mFD;
    private long mAddress;
    private int mLength;
    private boolean mAllowPurging;

    private static native java.io.FileDescriptor native_open(java.lang.String, int) throws java.io.IOException;

    private static native long native_mmap(java.io.FileDescriptor, int, int) throws java.io.IOException;

    private static native void native_munmap(long, int) throws java.io.IOException;

    private static native void native_close(java.io.FileDescriptor);

    private static native int native_read(java.io.FileDescriptor, long, byte[], int, int, int, boolean) throws java.io.IOException;

    private static native void native_write(java.io.FileDescriptor, long, byte[], int, int, int, boolean) throws java.io.IOException;

    private static native void native_pin(java.io.FileDescriptor, boolean) throws java.io.IOException;

    private static native int native_get_size(java.io.FileDescriptor) throws java.io.IOException;

    public void <init>(java.lang.String, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        java.lang.String r1, $r6;
        int i0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.io.FileDescriptor $r7, $r8;
        long $l1;

        r0 := @this: android.os.MemoryFile;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.MemoryFile: boolean mAllowPurging> = 0;

        r0.<android.os.MemoryFile: int mLength> = i0;

        if i0 < 0 goto label1;

        $r7 = staticinvoke <android.os.MemoryFile: java.io.FileDescriptor native_open(java.lang.String,int)>(r1, i0);

        r0.<android.os.MemoryFile: java.io.FileDescriptor mFD> = $r7;

        goto label2;

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        if i0 <= 0 goto label3;

        $r8 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        $l1 = staticinvoke <android.os.MemoryFile: long native_mmap(java.io.FileDescriptor,int,int)>($r8, i0, 3);

        r0.<android.os.MemoryFile: long mAddress> = $l1;

        goto label4;

     label3:
        r0.<android.os.MemoryFile: long mAddress> = 0L;

     label4:
        return;
    }

    public void close()
    {
        android.os.MemoryFile r0;
        boolean $z0;
        java.io.FileDescriptor $r1;

        r0 := @this: android.os.MemoryFile;

        virtualinvoke r0.<android.os.MemoryFile: void deactivate()>();

        $z0 = specialinvoke r0.<android.os.MemoryFile: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        staticinvoke <android.os.MemoryFile: void native_close(java.io.FileDescriptor)>($r1);

     label1:
        return;
    }

    void deactivate()
    {
        android.os.MemoryFile r0;
        java.io.IOException r1, $r2;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.String $r3, $r4;

        r0 := @this: android.os.MemoryFile;

        $z0 = specialinvoke r0.<android.os.MemoryFile: boolean isDeactivated()>();

        if $z0 != 0 goto label4;

     label1:
        $l1 = r0.<android.os.MemoryFile: long mAddress>;

        $i0 = r0.<android.os.MemoryFile: int mLength>;

        staticinvoke <android.os.MemoryFile: void native_munmap(long,int)>($l1, $i0);

        r0.<android.os.MemoryFile: long mAddress> = 0L;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = <android.os.MemoryFile: java.lang.String TAG>;

        $r4 = virtualinvoke r1.<java.io.IOException: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r3, $r4);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean isDeactivated()
    {
        android.os.MemoryFile r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: android.os.MemoryFile;

        $l0 = r0.<android.os.MemoryFile: long mAddress>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isClosed()
    {
        android.os.MemoryFile r0;
        java.io.FileDescriptor $r1;
        boolean $z0, $z1;

        r0 := @this: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        $z0 = virtualinvoke $r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void finalize()
    {
        android.os.MemoryFile r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: android.os.MemoryFile;

        $z0 = specialinvoke r0.<android.os.MemoryFile: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r1 = <android.os.MemoryFile: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, "MemoryFile.finalize() called while ashmem still open");

        virtualinvoke r0.<android.os.MemoryFile: void close()>();

     label1:
        return;
    }

    public int length()
    {
        android.os.MemoryFile r0;
        int $i0;

        r0 := @this: android.os.MemoryFile;

        $i0 = r0.<android.os.MemoryFile: int mLength>;

        return $i0;
    }

    public boolean isPurgingAllowed()
    {
        android.os.MemoryFile r0;
        boolean $z0;

        r0 := @this: android.os.MemoryFile;

        $z0 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        return $z0;
    }

    public synchronized boolean allowPurging(boolean) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        boolean z0, z1, $z2;
        java.io.FileDescriptor $r1;

        r0 := @this: android.os.MemoryFile;

        z0 := @parameter0: boolean;

        z1 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        if z1 == z0 goto label3;

        $r1 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        if z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.os.MemoryFile: void native_pin(java.io.FileDescriptor,boolean)>($r1, $z2);

        r0.<android.os.MemoryFile: boolean mAllowPurging> = z0;

     label3:
        return z1;
    }

    public java.io.InputStream getInputStream()
    {
        android.os.MemoryFile r0;
        android.os.MemoryFile$MemoryInputStream $r1;

        r0 := @this: android.os.MemoryFile;

        $r1 = new android.os.MemoryFile$MemoryInputStream;

        specialinvoke $r1.<android.os.MemoryFile$MemoryInputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>(r0, null);

        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        android.os.MemoryFile r0;
        android.os.MemoryFile$MemoryOutputStream $r1;

        r0 := @this: android.os.MemoryFile;

        $r1 = new android.os.MemoryFile$MemoryOutputStream;

        specialinvoke $r1.<android.os.MemoryFile$MemoryOutputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>(r0, null);

        return $r1;
    }

    public int readBytes(byte[], int, int, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r2;
        long $l9;
        java.io.FileDescriptor $r3;
        java.io.IOException $r4;

        r0 := @this: android.os.MemoryFile;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = specialinvoke r0.<android.os.MemoryFile: boolean isDeactivated()>();

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Can\'t read from deactivated memory file.");

        throw $r4;

     label1:
        if i1 < 0 goto label2;

        $i3 = lengthof r1;

        if i1 > $i3 goto label2;

        if i2 < 0 goto label2;

        $i4 = lengthof r1;

        $i5 = $i4 - i1;

        if i2 > $i5 goto label2;

        if i0 < 0 goto label2;

        $i6 = r0.<android.os.MemoryFile: int mLength>;

        if i0 > $i6 goto label2;

        $i7 = r0.<android.os.MemoryFile: int mLength>;

        $i8 = $i7 - i0;

        if i2 <= $i8 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        $l9 = r0.<android.os.MemoryFile: long mAddress>;

        $z1 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        $i10 = staticinvoke <android.os.MemoryFile: int native_read(java.io.FileDescriptor,long,byte[],int,int,int,boolean)>($r3, $l9, r1, i0, i1, i2, $z1);

        return $i10;
    }

    public void writeBytes(byte[], int, int, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r2;
        long $l9;
        java.io.FileDescriptor $r3;
        java.io.IOException $r4;

        r0 := @this: android.os.MemoryFile;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = specialinvoke r0.<android.os.MemoryFile: boolean isDeactivated()>();

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Can\'t write to deactivated memory file.");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        $i3 = lengthof r1;

        if i0 > $i3 goto label2;

        if i2 < 0 goto label2;

        $i4 = lengthof r1;

        $i5 = $i4 - i0;

        if i2 > $i5 goto label2;

        if i1 < 0 goto label2;

        $i6 = r0.<android.os.MemoryFile: int mLength>;

        if i1 > $i6 goto label2;

        $i7 = r0.<android.os.MemoryFile: int mLength>;

        $i8 = $i7 - i1;

        if i2 <= $i8 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        $l9 = r0.<android.os.MemoryFile: long mAddress>;

        $z1 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        staticinvoke <android.os.MemoryFile: void native_write(java.io.FileDescriptor,long,byte[],int,int,int,boolean)>($r3, $l9, r1, i0, i1, i2, $z1);

        return;
    }

    public java.io.FileDescriptor getFileDescriptor() throws java.io.IOException
    {
        android.os.MemoryFile r0;
        java.io.FileDescriptor $r1;

        r0 := @this: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: java.io.FileDescriptor mFD>;

        return $r1;
    }

    public static int getSize(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int $i0;

        r0 := @parameter0: java.io.FileDescriptor;

        $i0 = staticinvoke <android.os.MemoryFile: int native_get_size(java.io.FileDescriptor)>(r0);

        return $i0;
    }

    static int access$200(android.os.MemoryFile)
    {
        android.os.MemoryFile r0;
        int $i0;

        r0 := @parameter0: android.os.MemoryFile;

        $i0 = r0.<android.os.MemoryFile: int mLength>;

        return $i0;
    }

    static void <clinit>()
    {
        <android.os.MemoryFile: int PROT_WRITE> = 2;

        <android.os.MemoryFile: int PROT_READ> = 1;

        <android.os.MemoryFile: java.lang.String TAG> = "MemoryFile";

        return;
    }
}
