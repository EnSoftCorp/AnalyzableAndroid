public class android.filterpacks.imageproc.ToPackedGrayFilter extends android.filterfw.core.Filter
{
    private int mOWidth;
    private int mOHeight;
    private boolean mKeepAspectRatio;
    private android.filterfw.core.Program mProgram;
    private final java.lang.String mColorToPackedGrayShader;

    public void <init>(java.lang.String)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOWidth> = 0;

        r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOHeight> = 0;

        r0.<android.filterpacks.imageproc.ToPackedGrayFilter: boolean mKeepAspectRatio> = 0;

        r0.<android.filterpacks.imageproc.ToPackedGrayFilter: java.lang.String mColorToPackedGrayShader> = "precision mediump float;\nconst vec4 coeff_y = vec4(0.299, 0.587, 0.114, 0);\nuniform sampler2D tex_sampler_0;\nuniform float pix_stride;\nvarying vec2 v_texcoord;\nvoid main() {\n  for (int i = 0; i < 4; ++i) {\n    vec4 p = texture2D(tex_sampler_0,\n                       v_texcoord + vec2(pix_stride * float(i), 0.0));\n    gl_FragColor[i] = dot(p, coeff_y);\n  }\n}\n";

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        android.filterfw.core.MutableFrameFormat $r1;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        $r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 3);

        virtualinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>("image", $r1);

        virtualinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>("image", "image");

        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2, $r3;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        $r3 = specialinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.FrameFormat convertInputFormat(android.filterfw.core.FrameFormat)>(r2);

        return $r3;
    }

    private void checkOutputDimensions(int, int)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        int i0, i1;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid output dimensions: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        return;
    }

    private android.filterfw.core.FrameFormat convertInputFormat(android.filterfw.core.FrameFormat)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        android.filterfw.core.FrameFormat r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean $z0;
        android.filterfw.core.MutableFrameFormat $r2;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        i0 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOWidth>;

        i1 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOHeight>;

        i2 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getWidth()>();

        i3 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i4 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOWidth>;

        if $i4 != 0 goto label1;

        i0 = i2;

     label1:
        $i5 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: int mOHeight>;

        if $i5 != 0 goto label2;

        i1 = i3;

     label2:
        $z0 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: boolean mKeepAspectRatio>;

        if $z0 == 0 goto label4;

        if i2 <= i3 goto label3;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $i9 = i0 * i3;

        i1 = $i9 / i2;

        goto label4;

     label3:
        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $i8 = i1 * i2;

        i0 = $i8 / i3;

     label4:
        if i0 <= 0 goto label5;

        if i0 >= 4 goto label5;

        $i7 = 4;

        goto label6;

     label5:
        $i6 = i0 / 4;

        $i7 = $i6 * 4;

     label6:
        i10 = $i7;

        $r2 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>(i10, i1, 1, 2);

        return $r2;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.ShaderProgram $r2;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = new android.filterfw.core.ShaderProgram;

        specialinvoke $r2.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r1, "precision mediump float;\nconst vec4 coeff_y = vec4(0.299, 0.587, 0.114, 0);\nuniform sampler2D tex_sampler_0;\nuniform float pix_stride;\nvarying vec2 v_texcoord;\nvoid main() {\n  for (int i = 0; i < 4; ++i) {\n    vec4 p = texture2D(tex_sampler_0,\n                       v_texcoord + vec2(pix_stride * float(i), 0.0));\n    gl_FragColor[i] = dot(p, coeff_y);\n  }\n}\n");

        r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.Program mProgram> = $r2;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.imageproc.ToPackedGrayFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r6, r7;
        android.filterfw.core.FrameFormat r3, r4;
        int i0, i1, $i2;
        android.filterfw.core.MutableFrameFormat r5;
        float $f0, $f1;
        android.filterfw.core.Program $r8, $r12;
        java.lang.Float $r9;
        android.filterfw.core.FrameManager $r10, $r11;

        r0 := @this: android.filterpacks.imageproc.ToPackedGrayFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("image");

        r3 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r4 = specialinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.FrameFormat convertInputFormat(android.filterfw.core.FrameFormat)>(r3);

        i0 = virtualinvoke r4.<android.filterfw.core.FrameFormat: int getWidth()>();

        i1 = virtualinvoke r4.<android.filterfw.core.FrameFormat: int getHeight()>();

        specialinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: void checkOutputDimensions(int,int)>(i0, i1);

        $r8 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.Program mProgram>;

        $f0 = (float) i0;

        $f1 = 1.0F / $f0;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke $r8.<android.filterfw.core.Program: void setHostValue(java.lang.String,java.lang.Object)>("pix_stride", $r9);

        r5 = virtualinvoke r3.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        $i2 = i0 / 4;

        virtualinvoke r5.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>($i2, i1);

        $r10 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r6 = virtualinvoke $r10.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r5);

        $r12 = r0.<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.Program mProgram>;

        virtualinvoke $r12.<android.filterfw.core.Program: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r6);

        $r11 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        r7 = virtualinvoke $r11.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>(r4);

        virtualinvoke r7.<android.filterfw.core.Frame: void setDataFromFrame(android.filterfw.core.Frame)>(r6);

        virtualinvoke r6.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        virtualinvoke r0.<android.filterpacks.imageproc.ToPackedGrayFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("image", r7);

        virtualinvoke r7.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        return;
    }
}
