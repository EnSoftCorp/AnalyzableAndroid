public interface  android.view.WindowManagerPolicy extends java.lang.Object
{
    public static final int FLAG_WAKE;
    public static final int FLAG_VIRTUAL;
    public static final int FLAG_INJECTED;
    public static final int FLAG_TRUSTED;
    public static final int FLAG_FILTERED;
    public static final int FLAG_DISABLE_KEY_REPEAT;
    public static final int FLAG_INTERACTIVE;
    public static final int FLAG_PASS_TO_USER;
    public static final int PRESENCE_INTERNAL;
    public static final int PRESENCE_EXTERNAL;
    public static final boolean WATCH_POINTER;
    public static final java.lang.String ACTION_HDMI_PLUGGED;
    public static final java.lang.String EXTRA_HDMI_PLUGGED_STATE;
    public static final int ACTION_PASS_TO_USER;
    public static final int TRANSIT_ENTER;
    public static final int TRANSIT_EXIT;
    public static final int TRANSIT_SHOW;
    public static final int TRANSIT_HIDE;
    public static final int TRANSIT_PREVIEW_DONE;
    public static final int OFF_BECAUSE_OF_ADMIN;
    public static final int OFF_BECAUSE_OF_USER;
    public static final int OFF_BECAUSE_OF_TIMEOUT;
    public static final int USER_ROTATION_FREE;
    public static final int USER_ROTATION_LOCKED;
    public static final int FINISH_LAYOUT_REDO_LAYOUT;
    public static final int FINISH_LAYOUT_REDO_CONFIG;
    public static final int FINISH_LAYOUT_REDO_WALLPAPER;
    public static final int FINISH_LAYOUT_REDO_ANIM;

    public abstract void init(android.content.Context, android.view.IWindowManager, android.view.WindowManagerPolicy$WindowManagerFuncs);

    public abstract boolean isDefaultOrientationForced();

    public abstract void setInitialDisplaySize(android.view.Display, int, int, int);

    public abstract void setDisplayOverscan(android.view.Display, int, int, int, int);

    public abstract int checkAddPermission(android.view.WindowManager$LayoutParams, int[]);

    public abstract boolean checkShowToOwnerOnly(android.view.WindowManager$LayoutParams);

    public abstract void adjustWindowParamsLw(android.view.WindowManager$LayoutParams);

    public abstract void adjustConfigurationLw(android.content.res.Configuration, int, int);

    public abstract int windowTypeToLayerLw(int);

    public abstract int subWindowTypeToLayerLw(int);

    public abstract int getMaxWallpaperLayer();

    public abstract int getAboveUniverseLayer();

    public abstract int getNonDecorDisplayWidth(int, int, int);

    public abstract int getNonDecorDisplayHeight(int, int, int);

    public abstract int getConfigDisplayWidth(int, int, int);

    public abstract int getConfigDisplayHeight(int, int, int);

    public abstract boolean isForceHiding(android.view.WindowManager$LayoutParams);

    public abstract boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams);

    public abstract boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams);

    public abstract android.view.WindowManagerPolicy$WindowState getWinShowWhenLockedLw();

    public abstract android.view.View addStartingWindow(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int);

    public abstract void removeStartingWindow(android.os.IBinder, android.view.View);

    public abstract int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams);

    public abstract void removeWindowLw(android.view.WindowManagerPolicy$WindowState);

    public abstract int selectAnimationLw(android.view.WindowManagerPolicy$WindowState, int);

    public abstract void selectRotationAnimationLw(int[]);

    public abstract boolean validateRotationAnimationLw(int, int, boolean);

    public abstract android.view.animation.Animation createForceHideEnterAnimation(boolean, boolean);

    public abstract android.view.animation.Animation createForceHideWallpaperExitAnimation(boolean);

    public abstract int interceptKeyBeforeQueueing(android.view.KeyEvent, int);

    public abstract int interceptMotionBeforeQueueingNonInteractive(long, int);

    public abstract long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int);

    public abstract android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState, android.view.KeyEvent, int);

    public abstract void beginLayoutLw(boolean, int, int, int);

    public abstract int getSystemDecorLayerLw();

    public abstract void getContentRectLw(android.graphics.Rect);

    public abstract void layoutWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState);

    public abstract void getContentInsetHintLw(android.view.WindowManager$LayoutParams, android.graphics.Rect);

    public abstract void finishLayoutLw();

    public abstract void beginPostLayoutPolicyLw(int, int);

    public abstract void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams);

    public abstract int finishPostLayoutPolicyLw();

    public abstract boolean allowAppAnimationsLw();

    public abstract int focusChangedLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState);

    public abstract void wakingUp();

    public abstract void goingToSleep(int);

    public abstract void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener);

    public abstract void screenTurnedOff();

    public abstract boolean isScreenOn();

    public abstract void notifyLidSwitchChanged(long, boolean);

    public abstract void notifyCameraLensCoverSwitchChanged(long, boolean);

    public abstract void enableKeyguard(boolean);

    public abstract void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult);

    public abstract boolean isKeyguardLocked();

    public abstract boolean isKeyguardSecure();

    public abstract boolean inKeyguardRestrictedKeyInputMode();

    public abstract void dismissKeyguardLw();

    public abstract void notifyActivityDrawnForKeyguardLw();

    public abstract boolean isKeyguardDrawnLw();

    public abstract int rotationForOrientationLw(int, int);

    public abstract boolean rotationHasCompatibleMetricsLw(int, int);

    public abstract void setRotationLw(int);

    public abstract void setSafeMode(boolean);

    public abstract void systemReady();

    public abstract void systemBooted();

    public abstract void showBootMessage(java.lang.CharSequence, boolean);

    public abstract void hideBootMessages();

    public abstract void userActivity();

    public abstract void enableScreenAfterBoot();

    public abstract void setCurrentOrientationLw(int);

    public abstract boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState, int, boolean);

    public abstract void keepScreenOnStartedLw();

    public abstract void keepScreenOnStoppedLw();

    public abstract int getUserRotationMode();

    public abstract void setUserRotationMode(int, int);

    public abstract int adjustSystemUiVisibilityLw(int);

    public abstract boolean hasNavigationBar();

    public abstract void lockNow(android.os.Bundle);

    public abstract void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManagerPolicy$WindowState);

    public abstract void showRecentApps();

    public abstract void showGlobalActions();

    public abstract int getInputMethodWindowVisibleHeightLw();

    public abstract void setCurrentUserLw(int);

    public abstract void dump(java.lang.String, java.io.PrintWriter, java.lang.String[]);

    public abstract boolean canMagnifyWindow(int);

    public abstract boolean isTopLevelWindow(int);

    public abstract void startKeyguardExitAnimation(long, long);

    public static void <clinit>()
    {
        <android.view.WindowManagerPolicy: int FINISH_LAYOUT_REDO_ANIM> = 8;

        <android.view.WindowManagerPolicy: int FINISH_LAYOUT_REDO_WALLPAPER> = 4;

        <android.view.WindowManagerPolicy: int FINISH_LAYOUT_REDO_CONFIG> = 2;

        <android.view.WindowManagerPolicy: int FINISH_LAYOUT_REDO_LAYOUT> = 1;

        <android.view.WindowManagerPolicy: int USER_ROTATION_LOCKED> = 1;

        <android.view.WindowManagerPolicy: int USER_ROTATION_FREE> = 0;

        <android.view.WindowManagerPolicy: int OFF_BECAUSE_OF_TIMEOUT> = 3;

        <android.view.WindowManagerPolicy: int OFF_BECAUSE_OF_USER> = 2;

        <android.view.WindowManagerPolicy: int OFF_BECAUSE_OF_ADMIN> = 1;

        <android.view.WindowManagerPolicy: int TRANSIT_PREVIEW_DONE> = 5;

        <android.view.WindowManagerPolicy: int TRANSIT_HIDE> = 4;

        <android.view.WindowManagerPolicy: int TRANSIT_SHOW> = 3;

        <android.view.WindowManagerPolicy: int TRANSIT_EXIT> = 2;

        <android.view.WindowManagerPolicy: int TRANSIT_ENTER> = 1;

        <android.view.WindowManagerPolicy: int ACTION_PASS_TO_USER> = 1;

        <android.view.WindowManagerPolicy: java.lang.String EXTRA_HDMI_PLUGGED_STATE> = "state";

        <android.view.WindowManagerPolicy: java.lang.String ACTION_HDMI_PLUGGED> = "android.intent.action.HDMI_PLUGGED";

        <android.view.WindowManagerPolicy: boolean WATCH_POINTER> = 0;

        <android.view.WindowManagerPolicy: int PRESENCE_EXTERNAL> = 2;

        <android.view.WindowManagerPolicy: int PRESENCE_INTERNAL> = 1;

        <android.view.WindowManagerPolicy: int FLAG_PASS_TO_USER> = 1073741824;

        <android.view.WindowManagerPolicy: int FLAG_INTERACTIVE> = 536870912;

        <android.view.WindowManagerPolicy: int FLAG_DISABLE_KEY_REPEAT> = 134217728;

        <android.view.WindowManagerPolicy: int FLAG_FILTERED> = 67108864;

        <android.view.WindowManagerPolicy: int FLAG_TRUSTED> = 33554432;

        <android.view.WindowManagerPolicy: int FLAG_INJECTED> = 16777216;

        <android.view.WindowManagerPolicy: int FLAG_VIRTUAL> = 2;

        <android.view.WindowManagerPolicy: int FLAG_WAKE> = 1;

        return;
    }
}
