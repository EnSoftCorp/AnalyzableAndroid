public class android.net.DhcpStateMachine extends com.android.internal.util.StateMachine
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private com.android.internal.util.StateMachine mController;
    private android.content.Context mContext;
    private android.content.BroadcastReceiver mBroadcastReceiver;
    private android.app.AlarmManager mAlarmManager;
    private android.app.PendingIntent mDhcpRenewalIntent;
    private android.os.PowerManager$WakeLock mDhcpRenewWakeLock;
    private static final java.lang.String WAKELOCK_TAG;
    private android.net.DhcpResults mDhcpResults;
    private static final int DHCP_RENEW;
    private static final java.lang.String ACTION_DHCP_RENEW;
    private static final int MIN_RENEWAL_TIME_SECS;
    private final java.lang.String mInterfaceName;
    private boolean mRegisteredForPreDhcpNotification;
    private static final int BASE;
    public static final int CMD_START_DHCP;
    public static final int CMD_STOP_DHCP;
    public static final int CMD_RENEW_DHCP;
    public static final int CMD_PRE_DHCP_ACTION;
    public static final int CMD_POST_DHCP_ACTION;
    public static final int CMD_ON_QUIT;
    public static final int CMD_PRE_DHCP_ACTION_COMPLETE;
    public static final int DHCP_SUCCESS;
    public static final int DHCP_FAILURE;
    private com.android.internal.util.State mDefaultState;
    private com.android.internal.util.State mStoppedState;
    private com.android.internal.util.State mWaitBeforeStartState;
    private com.android.internal.util.State mRunningState;
    private com.android.internal.util.State mWaitBeforeRenewalState;

    private void <init>(android.content.Context, com.android.internal.util.StateMachine, java.lang.String)
    {
        android.net.DhcpStateMachine r0;
        android.content.Context r1, $r11, $r15, $r16, $r22;
        com.android.internal.util.StateMachine r2;
        java.lang.String r3;
        android.content.Intent r4, $r14;
        android.os.PowerManager r5;
        android.net.DhcpStateMachine$DefaultState $r6;
        android.net.DhcpStateMachine$StoppedState $r7;
        android.net.DhcpStateMachine$WaitBeforeStartState $r8;
        android.net.DhcpStateMachine$RunningState $r9;
        android.net.DhcpStateMachine$WaitBeforeRenewalState $r10;
        java.lang.Object $r12, $r19;
        android.app.AlarmManager $r13;
        android.app.PendingIntent $r17;
        android.os.PowerManager$WakeLock $r18, $r21;
        android.net.DhcpStateMachine$1 $r20;
        android.content.IntentFilter $r23;
        android.content.BroadcastReceiver $r25;
        com.android.internal.util.State $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;

        r0 := @this: android.net.DhcpStateMachine;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.util.StateMachine;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String)>("DhcpStateMachine");

        r0.<android.net.DhcpStateMachine: boolean mRegisteredForPreDhcpNotification> = 0;

        $r6 = new android.net.DhcpStateMachine$DefaultState;

        specialinvoke $r6.<android.net.DhcpStateMachine$DefaultState: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState> = $r6;

        $r7 = new android.net.DhcpStateMachine$StoppedState;

        specialinvoke $r7.<android.net.DhcpStateMachine$StoppedState: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: com.android.internal.util.State mStoppedState> = $r7;

        $r8 = new android.net.DhcpStateMachine$WaitBeforeStartState;

        specialinvoke $r8.<android.net.DhcpStateMachine$WaitBeforeStartState: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeStartState> = $r8;

        $r9 = new android.net.DhcpStateMachine$RunningState;

        specialinvoke $r9.<android.net.DhcpStateMachine$RunningState: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: com.android.internal.util.State mRunningState> = $r9;

        $r10 = new android.net.DhcpStateMachine$WaitBeforeRenewalState;

        specialinvoke $r10.<android.net.DhcpStateMachine$WaitBeforeRenewalState: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeRenewalState> = $r10;

        r0.<android.net.DhcpStateMachine: android.content.Context mContext> = r1;

        r0.<android.net.DhcpStateMachine: com.android.internal.util.StateMachine mController> = r2;

        r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName> = r3;

        $r11 = r0.<android.net.DhcpStateMachine: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r13 = (android.app.AlarmManager) $r12;

        r0.<android.net.DhcpStateMachine: android.app.AlarmManager mAlarmManager> = $r13;

        $r14 = new android.content.Intent;

        specialinvoke $r14.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.net.wifi.DHCP_RENEW", null);

        r4 = $r14;

        $r15 = r0.<android.net.DhcpStateMachine: android.content.Context mContext>;

        $r17 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r15, 0, r4, 0);

        r0.<android.net.DhcpStateMachine: android.app.PendingIntent mDhcpRenewalIntent> = $r17;

        $r16 = r0.<android.net.DhcpStateMachine: android.content.Context mContext>;

        $r19 = virtualinvoke $r16.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r5 = (android.os.PowerManager) $r19;

        $r18 = virtualinvoke r5.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "DHCP");

        r0.<android.net.DhcpStateMachine: android.os.PowerManager$WakeLock mDhcpRenewWakeLock> = $r18;

        $r21 = r0.<android.net.DhcpStateMachine: android.os.PowerManager$WakeLock mDhcpRenewWakeLock>;

        virtualinvoke $r21.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r20 = new android.net.DhcpStateMachine$1;

        specialinvoke $r20.<android.net.DhcpStateMachine$1: void <init>(android.net.DhcpStateMachine)>(r0);

        r0.<android.net.DhcpStateMachine: android.content.BroadcastReceiver mBroadcastReceiver> = $r20;

        $r22 = r0.<android.net.DhcpStateMachine: android.content.Context mContext>;

        $r25 = r0.<android.net.DhcpStateMachine: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r23 = new android.content.IntentFilter;

        specialinvoke $r23.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.DHCP_RENEW");

        virtualinvoke $r22.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r25, $r23);

        $r27 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void addState(com.android.internal.util.State)>($r27);

        $r29 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mStoppedState>;

        $r26 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r29, $r26);

        $r31 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeStartState>;

        $r28 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r31, $r28);

        $r34 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mRunningState>;

        $r30 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r34, $r30);

        $r32 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeRenewalState>;

        $r35 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mDefaultState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>($r32, $r35);

        $r33 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mStoppedState>;

        virtualinvoke r0.<android.net.DhcpStateMachine: void setInitialState(com.android.internal.util.State)>($r33);

        return;
    }

    public static android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context, com.android.internal.util.StateMachine, java.lang.String)
    {
        android.content.Context r0;
        com.android.internal.util.StateMachine r1;
        java.lang.String r2;
        android.net.DhcpStateMachine r3, $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.internal.util.StateMachine;

        r2 := @parameter2: java.lang.String;

        $r4 = new android.net.DhcpStateMachine;

        specialinvoke $r4.<android.net.DhcpStateMachine: void <init>(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)>(r0, r1, r2);

        r3 = $r4;

        virtualinvoke r3.<android.net.DhcpStateMachine: void start()>();

        return r3;
    }

    public void registerForPreDhcpNotification()
    {
        android.net.DhcpStateMachine r0;

        r0 := @this: android.net.DhcpStateMachine;

        r0.<android.net.DhcpStateMachine: boolean mRegisteredForPreDhcpNotification> = 1;

        return;
    }

    public void doQuit()
    {
        android.net.DhcpStateMachine r0;

        r0 := @this: android.net.DhcpStateMachine;

        virtualinvoke r0.<android.net.DhcpStateMachine: void quit()>();

        return;
    }

    protected void onQuitting()
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.StateMachine $r1;

        r0 := @this: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.StateMachine mController>;

        virtualinvoke $r1.<com.android.internal.util.StateMachine: void sendMessage(int)>(196614);

        return;
    }

    private boolean runDhcp(android.net.DhcpStateMachine$DhcpAction)
    {
        android.net.DhcpStateMachine r0;
        android.net.DhcpStateMachine$DhcpAction r1, $r4, $r5;
        boolean z0;
        android.net.DhcpResults r2, $r3, $r23;
        long l0, $l5, $l6, $l7;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r13;
        java.lang.String $r8, $r11, $r12, $r14, $r20, $r22, $r24;
        com.android.internal.util.StateMachine $r15, $r17;
        int $i2;
        android.os.Message $r16, $r18;
        byte $b3, $b4;
        android.app.AlarmManager $r19;
        android.app.PendingIntent $r21;

        r0 := @this: android.net.DhcpStateMachine;

        r1 := @parameter0: android.net.DhcpStateMachine$DhcpAction;

        z0 = 0;

        $r3 = new android.net.DhcpResults;

        specialinvoke $r3.<android.net.DhcpResults: void <init>()>();

        r2 = $r3;

        $r4 = <android.net.DhcpStateMachine$DhcpAction: android.net.DhcpStateMachine$DhcpAction START>;

        if r1 != $r4 goto label1;

        $r24 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r24);

        $r22 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        z0 = staticinvoke <android.net.NetworkUtils: boolean runDhcp(java.lang.String,android.net.DhcpResults)>($r22, r2);

        goto label2;

     label1:
        $r5 = <android.net.DhcpStateMachine$DhcpAction: android.net.DhcpStateMachine$DhcpAction RENEW>;

        if r1 != $r5 goto label2;

        $r20 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        z0 = staticinvoke <android.net.NetworkUtils: boolean runDhcpRenew(java.lang.String,android.net.DhcpResults)>($r20, r2);

        if z0 == 0 goto label2;

        $r23 = r0.<android.net.DhcpStateMachine: android.net.DhcpResults mDhcpResults>;

        virtualinvoke r2.<android.net.DhcpResults: void updateFromDhcpRequest(android.net.DhcpResults)>($r23);

     label2:
        if z0 == 0 goto label5;

        $i2 = r2.<android.net.DhcpResults: int leaseDuration>;

        l0 = (long) $i2;

        $b3 = l0 cmp 0L;

        if $b3 < 0 goto label4;

        $b4 = l0 cmp 300L;

        if $b4 >= 0 goto label3;

        l0 = 300L;

     label3:
        $r19 = r0.<android.net.DhcpStateMachine: android.app.AlarmManager mAlarmManager>;

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = l0 * 480L;

        $l7 = $l6 + $l5;

        $r21 = r0.<android.net.DhcpStateMachine: android.app.PendingIntent mDhcpRenewalIntent>;

        virtualinvoke $r19.<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>(2, $l7, $r21);

     label4:
        r0.<android.net.DhcpStateMachine: android.net.DhcpResults mDhcpResults> = r2;

        $r17 = r0.<android.net.DhcpStateMachine: com.android.internal.util.StateMachine mController>;

        $r18 = virtualinvoke $r17.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(196613, 1, 0, r2);

        virtualinvoke $r18.<android.os.Message: void sendToTarget()>();

        goto label6;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DHCP failed on ");

        $r8 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = staticinvoke <android.net.NetworkUtils: java.lang.String getDhcpError()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DhcpStateMachine", $r12);

        $r14 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r14);

        $r15 = r0.<android.net.DhcpStateMachine: com.android.internal.util.StateMachine mController>;

        $r16 = virtualinvoke $r15.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(196613, 2, 0);

        virtualinvoke $r16.<android.os.Message: void sendToTarget()>();

     label6:
        return z0;
    }

    static android.os.PowerManager$WakeLock access$000(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: android.os.PowerManager$WakeLock mDhcpRenewWakeLock>;

        return $r1;
    }

    static android.content.BroadcastReceiver access$100(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        android.content.BroadcastReceiver $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: android.content.BroadcastReceiver mBroadcastReceiver>;

        return $r1;
    }

    static android.content.Context access$200(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        android.content.Context $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: android.content.Context mContext>;

        return $r1;
    }

    static java.lang.String access$300(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: java.lang.String mInterfaceName>;

        return $r1;
    }

    static boolean access$400(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        boolean $z0;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $z0 = r0.<android.net.DhcpStateMachine: boolean mRegisteredForPreDhcpNotification>;

        return $z0;
    }

    static com.android.internal.util.StateMachine access$500(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.StateMachine $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.StateMachine mController>;

        return $r1;
    }

    static com.android.internal.util.State access$600(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeStartState>;

        return $r1;
    }

    static void access$700(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static boolean access$800(android.net.DhcpStateMachine, android.net.DhcpStateMachine$DhcpAction)
    {
        android.net.DhcpStateMachine r0;
        android.net.DhcpStateMachine$DhcpAction r1;
        boolean $z0;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: android.net.DhcpStateMachine$DhcpAction;

        $z0 = specialinvoke r0.<android.net.DhcpStateMachine: boolean runDhcp(android.net.DhcpStateMachine$DhcpAction)>(r1);

        return $z0;
    }

    static com.android.internal.util.State access$900(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mRunningState>;

        return $r1;
    }

    static void access$1000(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1100(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$1200(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mStoppedState>;

        return $r1;
    }

    static void access$1300(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1400(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static android.app.PendingIntent access$1500(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        android.app.PendingIntent $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: android.app.PendingIntent mDhcpRenewalIntent>;

        return $r1;
    }

    static android.app.AlarmManager access$1600(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        android.app.AlarmManager $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    static void access$1700(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$1800(android.net.DhcpStateMachine)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        $r1 = r0.<android.net.DhcpStateMachine: com.android.internal.util.State mWaitBeforeRenewalState>;

        return $r1;
    }

    static void access$1900(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2000(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2100(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2200(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2300(android.net.DhcpStateMachine, com.android.internal.util.IState)
    {
        android.net.DhcpStateMachine r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: android.net.DhcpStateMachine;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<android.net.DhcpStateMachine: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <android.net.DhcpStateMachine: int DHCP_FAILURE> = 2;

        <android.net.DhcpStateMachine: int DHCP_SUCCESS> = 1;

        <android.net.DhcpStateMachine: int CMD_PRE_DHCP_ACTION_COMPLETE> = 196615;

        <android.net.DhcpStateMachine: int CMD_ON_QUIT> = 196614;

        <android.net.DhcpStateMachine: int CMD_POST_DHCP_ACTION> = 196613;

        <android.net.DhcpStateMachine: int CMD_PRE_DHCP_ACTION> = 196612;

        <android.net.DhcpStateMachine: int CMD_RENEW_DHCP> = 196611;

        <android.net.DhcpStateMachine: int CMD_STOP_DHCP> = 196610;

        <android.net.DhcpStateMachine: int CMD_START_DHCP> = 196609;

        <android.net.DhcpStateMachine: int BASE> = 196608;

        <android.net.DhcpStateMachine: int MIN_RENEWAL_TIME_SECS> = 300;

        <android.net.DhcpStateMachine: java.lang.String ACTION_DHCP_RENEW> = "android.net.wifi.DHCP_RENEW";

        <android.net.DhcpStateMachine: int DHCP_RENEW> = 0;

        <android.net.DhcpStateMachine: java.lang.String WAKELOCK_TAG> = "DHCP";

        <android.net.DhcpStateMachine: boolean DBG> = 0;

        <android.net.DhcpStateMachine: java.lang.String TAG> = "DhcpStateMachine";

        return;
    }
}
