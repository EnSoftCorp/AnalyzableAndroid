public class android.net.Network extends java.lang.Object implements android.os.Parcelable
{
    public final int netId;
    private volatile android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory;
    private volatile com.android.okhttp.ConnectionPool mConnectionPool;
    private volatile com.android.okhttp.HostResolver mHostResolver;
    private java.lang.Object mLock;
    private static final boolean httpKeepAlive;
    private static final int httpMaxConnections;
    private static final long httpKeepAliveDurationMs;
    public static final android.os.Parcelable$Creator CREATOR;

    public void <init>(int)
    {
        android.net.Network r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: android.net.Network;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory> = null;

        r0.<android.net.Network: com.android.okhttp.ConnectionPool mConnectionPool> = null;

        r0.<android.net.Network: com.android.okhttp.HostResolver mHostResolver> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: java.lang.Object mLock> = $r1;

        r0.<android.net.Network: int netId> = i0;

        return;
    }

    public void <init>(android.net.Network)
    {
        android.net.Network r0, r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @this: android.net.Network;

        r1 := @parameter0: android.net.Network;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory> = null;

        r0.<android.net.Network: com.android.okhttp.ConnectionPool mConnectionPool> = null;

        r0.<android.net.Network: com.android.okhttp.HostResolver mHostResolver> = null;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: java.lang.Object mLock> = $r2;

        $i0 = r1.<android.net.Network: int netId>;

        r0.<android.net.Network: int netId> = $i0;

        return;
    }

    public java.net.InetAddress[] getAllByName(java.lang.String) throws java.net.UnknownHostException
    {
        android.net.Network r0;
        java.lang.String r1;
        int $i0;
        java.net.InetAddress[] $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.net.Network: int netId>;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByNameOnNet(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public java.net.InetAddress getByName(java.lang.String) throws java.net.UnknownHostException
    {
        android.net.Network r0;
        java.lang.String r1;
        int $i0;
        java.net.InetAddress $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.net.Network: int netId>;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByNameOnNet(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public javax.net.SocketFactory getSocketFactory()
    {
        android.net.Network r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r8;
        android.net.Network$NetworkBoundSocketFactory $r3, $r4, $r6, $r7;
        int $i0;

        r0 := @this: android.net.Network;

        $r3 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        if $r3 != null goto label6;

        $r5 = r0.<android.net.Network: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        if $r6 != null goto label2;

        $r7 = new android.net.Network$NetworkBoundSocketFactory;

        $i0 = r0.<android.net.Network: int netId>;

        specialinvoke $r7.<android.net.Network$NetworkBoundSocketFactory: void <init>(android.net.Network,int)>(r0, $i0);

        r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory> = $r7;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r4 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void maybeInitHttpClient()
    {
        android.net.Network r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        com.android.okhttp.HostResolver $r4;
        com.android.okhttp.ConnectionPool $r5, $r6;
        long $l0;
        int $i1;
        android.net.Network$1 $r7;

        r0 := @this: android.net.Network;

        $r3 = r0.<android.net.Network: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.net.Network: com.android.okhttp.HostResolver mHostResolver>;

        if $r4 != null goto label2;

        $r7 = new android.net.Network$1;

        specialinvoke $r7.<android.net.Network$1: void <init>(android.net.Network)>(r0);

        r0.<android.net.Network: com.android.okhttp.HostResolver mHostResolver> = $r7;

     label2:
        $r5 = r0.<android.net.Network: com.android.okhttp.ConnectionPool mConnectionPool>;

        if $r5 != null goto label3;

        $r6 = new com.android.okhttp.ConnectionPool;

        $i1 = <android.net.Network: int httpMaxConnections>;

        $l0 = <android.net.Network: long httpKeepAliveDurationMs>;

        specialinvoke $r6.<com.android.okhttp.ConnectionPool: void <init>(int,long)>($i1, $l0);

        r0.<android.net.Network: com.android.okhttp.ConnectionPool mConnectionPool> = $r6;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.URL r1;
        java.lang.String r2, $r8;
        com.android.okhttp.OkHttpClient r3, $r10, $r13, $r15;
        boolean $z0, $z1;
        java.net.MalformedURLException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        javax.net.SocketFactory $r9;
        com.android.okhttp.HostResolver $r11;
        com.android.okhttp.ConnectionPool $r12;
        java.net.HttpURLConnection $r14;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<android.net.Network: void maybeInitHttpClient()>();

        r2 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        r3 = staticinvoke <com.android.okhttp.HttpHandler: com.android.okhttp.OkHttpClient createHttpOkHttpClient(java.net.Proxy)>(null);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label2;

        r3 = staticinvoke <com.android.okhttp.HttpsHandler: com.android.okhttp.OkHttpClient createHttpsOkHttpClient(java.net.Proxy)>(null);

        goto label3;

     label2:
        $r4 = new java.net.MalformedURLException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URL or unrecognized protocol ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.MalformedURLException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        $r9 = virtualinvoke r0.<android.net.Network: javax.net.SocketFactory getSocketFactory()>();

        $r10 = virtualinvoke r3.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setSocketFactory(javax.net.SocketFactory)>($r9);

        $r11 = r0.<android.net.Network: com.android.okhttp.HostResolver mHostResolver>;

        $r13 = virtualinvoke $r10.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setHostResolver(com.android.okhttp.HostResolver)>($r11);

        $r12 = r0.<android.net.Network: com.android.okhttp.ConnectionPool mConnectionPool>;

        $r15 = virtualinvoke $r13.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient setConnectionPool(com.android.okhttp.ConnectionPool)>($r12);

        $r14 = virtualinvoke $r15.<com.android.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)>(r1);

        return $r14;
    }

    public void bindSocket(java.net.Socket) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.Socket r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.io.FileDescriptor $r2;
        android.system.ErrnoException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.net.SocketException $r8, $r9;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.Socket;

        $z0 = virtualinvoke r1.<java.net.Socket: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r8 = new java.net.SocketException;

        specialinvoke $r8.<java.net.SocketException: void <init>(java.lang.String)>("Socket is connected");

        throw $r8;

     label1:
        virtualinvoke r1.<java.net.Socket: boolean getReuseAddress()>();

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        $i1 = virtualinvoke $r2.<java.io.FileDescriptor: int getInt$()>();

        $i2 = r0.<android.net.Network: int netId>;

        i0 = staticinvoke <android.net.NetworkUtils: int bindSocketToNetwork(int,int)>($i1, $i2);

        if i0 == 0 goto label2;

        $r3 = new android.system.ErrnoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding socket to network ");

        $i3 = r0.<android.net.Network: int netId>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = neg i0;

        specialinvoke $r3.<android.system.ErrnoException: void <init>(java.lang.String,int)>($r7, $i4);

        $r9 = virtualinvoke $r3.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r9;

     label2:
        return;
    }

    public int describeContents()
    {
        android.net.Network r0;

        r0 := @this: android.net.Network;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.Network r0;
        android.os.Parcel r1;
        int i0, $i1;

        r0 := @this: android.net.Network;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<android.net.Network: int netId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.Network r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.net.Network;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.net.Network) r1;

        $i1 = r0.<android.net.Network: int netId>;

        $i0 = r2.<android.net.Network: int netId>;

        if $i1 != $i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int hashCode()
    {
        android.net.Network r0;
        int $i0, $i1;

        r0 := @this: android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        $i1 = $i0 * 11;

        return $i1;
    }

    public java.lang.String toString()
    {
        android.net.Network r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r3;
        boolean $z0, $z1;
        long $l0;
        android.net.Network$2 $r2;
        int $i1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.keepAlive", "true");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        <android.net.Network: boolean httpKeepAlive> = $z0;

        $z1 = <android.net.Network: boolean httpKeepAlive>;

        if $z1 == 0 goto label1;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.maxConnections", "5");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        goto label2;

     label1:
        $i1 = 0;

     label2:
        <android.net.Network: int httpMaxConnections> = $i1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.keepAliveDuration", "300000");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        <android.net.Network: long httpKeepAliveDurationMs> = $l0;

        $r2 = new android.net.Network$2;

        specialinvoke $r2.<android.net.Network$2: void <init>()>();

        <android.net.Network: android.os.Parcelable$Creator CREATOR> = $r2;

        return;
    }
}
