public abstract class android.view.ViewGroup extends android.view.View implements android.view.ViewParent, android.view.ViewManager
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    public static boolean DEBUG_DRAW;
    protected java.util.ArrayList mDisappearingChildren;
    protected android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener;
    private android.view.View mFocused;
    private android.view.animation.Transformation mChildTransformation;
    android.graphics.RectF mInvalidateRegion;
    android.view.animation.Transformation mInvalidationTransformation;
    private android.view.View mCurrentDragView;
    private android.view.DragEvent mCurrentDrag;
    private java.util.HashSet mDragNotifiedChildren;
    private boolean mChildAcceptsDrag;
    private android.graphics.PointF mLocalPoint;
    private android.view.animation.LayoutAnimationController mLayoutAnimationController;
    private android.view.animation.Animation$AnimationListener mAnimationListener;
    private android.view.ViewGroup$TouchTarget mFirstTouchTarget;
    private long mLastTouchDownTime;
    private int mLastTouchDownIndex;
    private float mLastTouchDownX;
    private float mLastTouchDownY;
    private android.view.ViewGroup$HoverTarget mFirstHoverTarget;
    private boolean mHoveredSelf;
    protected int mGroupFlags;
    private int mLayoutMode;
    static final int FLAG_CLIP_CHILDREN;
    private static final int FLAG_CLIP_TO_PADDING;
    static final int FLAG_INVALIDATE_REQUIRED;
    private static final int FLAG_RUN_ANIMATION;
    static final int FLAG_ANIMATION_DONE;
    private static final int FLAG_PADDING_NOT_NULL;
    private static final int FLAG_ANIMATION_CACHE;
    static final int FLAG_OPTIMIZE_INVALIDATE;
    static final int FLAG_CLEAR_TRANSFORMATION;
    private static final int FLAG_NOTIFY_ANIMATION_LISTENER;
    protected static final int FLAG_USE_CHILD_DRAWING_ORDER;
    protected static final int FLAG_SUPPORT_STATIC_TRANSFORMATIONS;
    private static final int FLAG_ADD_STATES_FROM_CHILDREN;
    static final int FLAG_ALWAYS_DRAWN_WITH_CACHE;
    static final int FLAG_CHILDREN_DRAWN_WITH_CACHE;
    private static final int FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE;
    private static final int FLAG_MASK_FOCUSABILITY;
    public static final int FOCUS_BEFORE_DESCENDANTS;
    public static final int FOCUS_AFTER_DESCENDANTS;
    public static final int FOCUS_BLOCK_DESCENDANTS;
    private static final int[] DESCENDANT_FOCUSABILITY_FLAGS;
    protected static final int FLAG_DISALLOW_INTERCEPT;
    private static final int FLAG_SPLIT_MOTION_EVENTS;
    private static final int FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    private static final int FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET;
    static final int FLAG_IS_TRANSITION_GROUP;
    static final int FLAG_IS_TRANSITION_GROUP_SET;
    static final int FLAG_TOUCHSCREEN_BLOCKS_FOCUS;
    protected int mPersistentDrawingCache;
    public static final int PERSISTENT_NO_CACHE;
    public static final int PERSISTENT_ANIMATION_CACHE;
    public static final int PERSISTENT_SCROLLING_CACHE;
    public static final int PERSISTENT_ALL_CACHES;
    private static final int LAYOUT_MODE_UNDEFINED;
    public static final int LAYOUT_MODE_CLIP_BOUNDS;
    public static final int LAYOUT_MODE_OPTICAL_BOUNDS;
    public static int LAYOUT_MODE_DEFAULT;
    protected static final int CLIP_TO_PADDING_MASK;
    private static final int CHILD_LEFT_INDEX;
    private static final int CHILD_TOP_INDEX;
    private android.view.View[] mChildren;
    private int mChildrenCount;
    boolean mSuppressLayout;
    private boolean mLayoutCalledWhileSuppressed;
    private static final int ARRAY_INITIAL_CAPACITY;
    private static final int ARRAY_CAPACITY_INCREMENT;
    private static android.graphics.Paint sDebugPaint;
    private static float[] sDebugLines;
    android.graphics.Paint mCachePaint;
    private android.animation.LayoutTransition mTransition;
    private java.util.ArrayList mTransitioningViews;
    private java.util.ArrayList mVisibilityChangingChildren;
    private java.util.ArrayList mPreSortedChildren;
    private int mChildCountWithTransientState;
    private int mNestedScrollAxes;
    private android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener;

    public void <init>(android.content.Context)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1;
        android.view.ViewGroup$3 $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = -1;

        r0.<android.view.ViewGroup: int mLayoutMode> = -1;

        r0.<android.view.ViewGroup: boolean mSuppressLayout> = 0;

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = 0;

        $r3 = new android.view.ViewGroup$3;

        specialinvoke $r3.<android.view.ViewGroup$3: void <init>(android.view.ViewGroup)>(r0);

        r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener> = $r3;

        specialinvoke r0.<android.view.ViewGroup: void initViewGroup()>();

        specialinvoke r0.<android.view.ViewGroup: void initFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        return;
    }

    private boolean debugDraw()
    {
        android.view.ViewGroup r0;
        boolean $z0, $z1, $z2;
        android.view.View$AttachInfo $r1, $r2;

        r0 := @this: android.view.ViewGroup;

        $z0 = <android.view.ViewGroup: boolean DEBUG_DRAW>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label2;

        $r2 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r2.<android.view.View$AttachInfo: boolean mDebugLayout>;

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void initViewGroup()
    {
        android.view.ViewGroup r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        android.view.View[] $r3;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean debugDraw()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void setFlags(int,int)>(128, 128);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 1;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 2;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 16;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        $i6 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = $i6 | 64;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i7;

        $i8 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i9 = $i8 | 16384;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i9;

        $r1 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i10 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i10 < 11 goto label2;

        $i12 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i11 = $i12 | 2097152;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i11;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void setDescendantFocusability(int)>(131072);

        $r3 = newarray (android.view.View)[12];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = $r3;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        r0.<android.view.ViewGroup: int mPersistentDrawingCache> = 2;

        return;
    }

    private void initFromAttributes(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1, $r8;
        android.util.AttributeSet r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        android.content.res.TypedArray r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int[] $r4, $r6;
        android.animation.LayoutTransition $r5;
        android.view.animation.LayoutAnimationController $r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = <com.android.internal.R$styleable: int[] ViewGroup>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r4, i0, i1);

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getIndexCount()>();

        i3 = 0;

     label01:
        if i3 >= i2 goto label16;

        i4 = virtualinvoke r3.<android.content.res.TypedArray: int getIndex(int)>(i3);

        tableswitch(i4)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label08;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label07;
            case 6: goto label06;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            default: goto label15;
        };

     label02:
        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setClipChildren(boolean)>($z1);

        goto label15;

     label03:
        $z8 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setClipToPadding(boolean)>($z8);

        goto label15;

     label04:
        $z7 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>($z7);

        goto label15;

     label05:
        $i9 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i4, 2);

        virtualinvoke r0.<android.view.ViewGroup: void setPersistentDrawingCache(int)>($i9);

        goto label15;

     label06:
        $z5 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>($z5);

        goto label15;

     label07:
        $z6 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>($z6);

        goto label15;

     label08:
        i5 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i4, -1);

        if i5 <= 0 goto label15;

        $r8 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r7 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>($r8, i5);

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>($r7);

        goto label15;

     label09:
        $r6 = <android.view.ViewGroup: int[] DESCENDANT_FOCUSABILITY_FLAGS>;

        $i7 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i4, 0);

        $i8 = $r6[$i7];

        virtualinvoke r0.<android.view.ViewGroup: void setDescendantFocusability(int)>($i8);

        goto label15;

     label10:
        $z4 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>($z4);

        goto label15;

     label11:
        z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 0);

        if z0 == 0 goto label15;

        $r5 = new android.animation.LayoutTransition;

        specialinvoke $r5.<android.animation.LayoutTransition: void <init>()>();

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>($r5);

        goto label15;

     label12:
        $i6 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i4, -1);

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutMode(int)>($i6);

        goto label15;

     label13:
        $z2 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setTransitionGroup(boolean)>($z2);

        goto label15;

     label14:
        $z3 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i4, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>($z3);

     label15:
        i3 = i3 + 1;

        goto label01;

     label16:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public int getDescendantFocusability()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 393216;

        return $i1;
    }

    public void setDescendantFocusability(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 131072: goto label1;
            case 262144: goto label1;
            case 393216: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must be one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS");

        throw $r1;

     label3:
        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & -393217;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = i0 & 393216;

        $i5 = $i4 | $i3;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        return;
    }

    void handleFocusGainInternal(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0;
        android.graphics.Rect r1;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        virtualinvoke $r3.<android.view.View: void unFocus(android.view.View)>(r0);

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

     label1:
        specialinvoke r0.<android.view.View: void handleFocusGainInternal(int,android.graphics.Rect)>(i0, r1);

        return;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2, $r3, $r6, $r7;
        int $i0;
        android.view.ViewParent $r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 393216 goto label1;

        return;

     label1:
        specialinvoke r0.<android.view.View: void unFocus(android.view.View)>(r2);

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r3 == r1 goto label3;

        $r6 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r6 == null goto label2;

        $r7 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        virtualinvoke $r7.<android.view.View: void unFocus(android.view.View)>(r2);

     label2:
        r0.<android.view.ViewGroup: android.view.View mFocused> = r1;

     label3:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r4 == null goto label4;

        $r5 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>(r0, r2);

     label4:
        return;
    }

    public void focusableViewAvailable(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label3;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 393216 goto label3;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z2 != 0 goto label3;

     label1:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocused()>();

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i1 != 262144 goto label3;

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r1);

     label3:
        return;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r3.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;
        android.view.ViewParent $r3, $r4;
        android.view.ActionMode $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r5 = interfaceinvoke $r4.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>(r1, r2);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r4, $r6;
        int i0;
        boolean $z0;
        android.view.ViewParent $r2, $r3;
        android.view.FocusFinder $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isRootNamespace()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r6 = virtualinvoke $r5.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>(r0, r1, i0);

        return $r6;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r4 = interfaceinvoke $r3.<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>(r1, i0);

        return $r4;

     label2:
        return null;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        return 0;
    }

    public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.ViewParent r3;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if r3 != null goto label1;

        return 0;

     label1:
        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2);

        if z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r3.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r2);

        return $z1;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.View$AccessibilityDelegate $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $z1 = virtualinvoke $r4.<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1, r2);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestSendAccessibilityEventInternal(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2);

        return $z0;
    }

    boolean onRequestSendAccessibilityEventInternal(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        return 1;
    }

    boolean translateBoundsAndIntersectionsInWindowCoordinates(android.view.View, android.graphics.RectF, java.util.List)
    {
        android.view.ViewGroup r0, r20;
        android.view.View r1, r6, $r15;
        android.graphics.RectF r2, r5, r7, r8, $r14;
        java.util.List r3;
        android.graphics.Matrix r4, $r16;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.view.View$AttachInfo $r9, $r13;
        byte $b7, $b9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z12, z15;
        android.view.ViewParent $r10, $r12;
        java.lang.Object $r11, $r18;
        android.view.View[] $r17;
        java.util.ArrayList r19;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: java.util.List;

        $r9 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r9 != null goto label01;

        return 0;

     label01:
        $f0 = virtualinvoke r0.<android.view.ViewGroup: float getAlpha()>();

        $b7 = $f0 cmpg 0.0F;

        if $b7 <= 0 goto label02;

        $f1 = virtualinvoke r0.<android.view.ViewGroup: float getTransitionAlpha()>();

        $b9 = $f1 cmpg 0.0F;

        if $b9 <= 0 goto label02;

        $i8 = virtualinvoke r0.<android.view.ViewGroup: int getVisibility()>();

        if $i8 == 0 goto label03;

     label02:
        return 0;

     label03:
        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label05;

        r4 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r4.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

        i0 = interfaceinvoke r3.<java.util.List: int size()>();

        i1 = 0;

     label04:
        if i1 >= i0 goto label05;

        $r18 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (android.graphics.RectF) $r18;

        virtualinvoke r4.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r5);

        i1 = i1 + 1;

        goto label04;

     label05:
        $i12 = r1.<android.view.View: int mLeft>;

        $i10 = r0.<android.view.ViewGroup: int mScrollX>;

        i24 = $i12 - $i10;

        $i13 = r1.<android.view.View: int mTop>;

        $i11 = r0.<android.view.ViewGroup: int mScrollY>;

        i25 = $i13 - $i11;

        $f4 = (float) i24;

        $f2 = (float) i25;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f4, $f2);

        $f5 = (float) i24;

        $f3 = (float) i25;

        staticinvoke <android.view.ViewGroup: void offsetRects(java.util.List,float,float)>(r3, $f5, $f3);

        $i15 = virtualinvoke r0.<android.view.ViewGroup: int getWidth()>();

        $f6 = (float) $i15;

        $i14 = virtualinvoke r0.<android.view.ViewGroup: int getHeight()>();

        $f7 = (float) $i14;

        $z1 = virtualinvoke r2.<android.graphics.RectF: boolean intersects(float,float,float,float)>(0.0F, 0.0F, $f6, $f7);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        r19 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r19 != null goto label07;

        $z9 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z9 == 0 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        z15 = $z10;

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i3 = i2 - 1;

     label09:
        if i3 < 0 goto label20;

        if z15 == 0 goto label10;

        $i23 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i2, i3);

        goto label11;

     label10:
        $i23 = i3;

     label11:
        i4 = $i23;

        if r19 != null goto label12;

        $r17 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r15 = $r17[i4];

        goto label13;

     label12:
        $r11 = virtualinvoke r19.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r15 = (android.view.View) $r11;

     label13:
        r6 = $r15;

        if r6 != r1 goto label14;

        goto label20;

     label14:
        $i16 = virtualinvoke r6.<android.view.View: int getVisibility()>();

        if $i16 == 0 goto label15;

        goto label19;

     label15:
        $z4 = virtualinvoke r6.<android.view.View: boolean isClickable()>();

        if $z4 != 0 goto label16;

        $z12 = virtualinvoke r6.<android.view.View: boolean isLongClickable()>();

        if $z12 != 0 goto label16;

        goto label19;

     label16:
        $r13 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r7 = $r13.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect1>;

        $i18 = virtualinvoke r6.<android.view.View: int getWidth()>();

        $f8 = (float) $i18;

        $i17 = virtualinvoke r6.<android.view.View: int getHeight()>();

        $f9 = (float) $i17;

        virtualinvoke r7.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f8, $f9);

        $z5 = virtualinvoke r6.<android.view.View: boolean hasIdentityMatrix()>();

        if $z5 != 0 goto label17;

        $r16 = virtualinvoke r6.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r16.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r7);

     label17:
        $i19 = r6.<android.view.View: int mLeft>;

        $i20 = r0.<android.view.ViewGroup: int mScrollX>;

        i5 = $i19 - $i20;

        $i21 = r6.<android.view.View: int mTop>;

        $i22 = r0.<android.view.ViewGroup: int mScrollY>;

        i6 = $i21 - $i22;

        $f10 = (float) i5;

        $f11 = (float) i6;

        virtualinvoke r7.<android.graphics.RectF: void offset(float,float)>($f10, $f11);

        $z8 = virtualinvoke r7.<android.graphics.RectF: boolean intersect(android.graphics.RectF)>(r2);

        if $z8 == 0 goto label19;

        $z7 = virtualinvoke r7.<android.graphics.RectF: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label18;

        return 0;

     label18:
        $r14 = new android.graphics.RectF;

        specialinvoke $r14.<android.graphics.RectF: void <init>(android.graphics.RectF)>(r7);

        r8 = $r14;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r8);

     label19:
        i3 = i3 + -1;

        goto label09;

     label20:
        $r10 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z3 = $r10 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label21;

        $r12 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        r20 = (android.view.ViewGroup) $r12;

        $z2 = virtualinvoke r20.<android.view.ViewGroup: boolean translateBoundsAndIntersectionsInWindowCoordinates(android.view.View,android.graphics.RectF,java.util.List)>(r0, r2, r3);

        return $z2;

     label21:
        return 1;
    }

    public void childHasTransientStateChanged(android.view.View, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        boolean z0, z1, z2;
        java.lang.AbstractMethodError r2, $r5;
        int $i0, $i1, $i2, $i3;
        android.view.ViewParent $r3, $r4, $r7;
        java.lang.StringBuilder $r6, $r10, $r11;
        java.lang.String $r8, $r12;
        java.lang.Class $r9;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 = virtualinvoke r0.<android.view.ViewGroup: boolean hasTransientState()>();

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        $i3 = $i2 + 1;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        $i1 = $i0 - 1;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = $i1;

     label2:
        z2 = virtualinvoke r0.<android.view.ViewGroup: boolean hasTransientState()>();

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r3 == null goto label6;

        if z1 == z2 goto label6;

     label3:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>(r0, z2);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewGroup", $r12, r2);

     label6:
        return;

        catch java.lang.AbstractMethodError from label3 to label4 with label5;
    }

    public boolean hasTransientState()
    {
        android.view.ViewGroup r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        if $i0 > 0 goto label1;

        $z0 = specialinvoke r0.<android.view.View: boolean hasTransientState()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean dispatchUnhandledMove(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2, $r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>(r1, i0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void clearChildFocus(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void clearChildFocus(android.view.View)>(r0);

     label1:
        return;
    }

    public void clearFocus()
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2;

        r0 := @this: android.view.ViewGroup;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.view.View: void clearFocus()>();

        goto label2;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

        virtualinvoke r1.<android.view.View: void clearFocus()>();

     label2:
        return;
    }

    void unFocus(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.view.View: void unFocus(android.view.View)>(r1);

        goto label2;

     label1:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        virtualinvoke $r3.<android.view.View: void unFocus(android.view.View)>(r1);

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

     label2:
        return;
    }

    public android.view.View getFocusedChild()
    {
        android.view.ViewGroup r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        return $r1;
    }

    android.view.View getDeepestFocusedChild()
    {
        android.view.ViewGroup r0, $r2;
        android.view.View r1, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 = r0;

     label1:
        if r1 == null goto label5;

        $z0 = virtualinvoke r1.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r2 = (android.view.ViewGroup) r1;

        $r3 = virtualinvoke $r2.<android.view.ViewGroup: android.view.View getFocusedChild()>();

        goto label4;

     label3:
        $r3 = null;

     label4:
        r1 = $r3;

        goto label1;

     label5:
        return null;
    }

    public boolean hasFocus()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 != 0 goto label1;

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r1 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public android.view.View findFocus()
    {
        android.view.ViewGroup r0;
        boolean $z0;
        android.view.View $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocused()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r1 == null goto label2;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $r3 = virtualinvoke $r2.<android.view.View: android.view.View findFocus()>();

        return $r3;

     label2:
        return null;
    }

    public boolean hasFocusable()
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4;
        android.view.View[] r1;
        android.view.View r2;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        $i3 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusable()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if i0 == 393216 goto label5;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r2 = r1[i2];

        $z1 = virtualinvoke r2.<android.view.View: boolean hasFocusable()>();

        if $z1 == 0 goto label4;

        return 1;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 0;
    }

    public void addFocusables(java.util.ArrayList, int, int)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        android.view.View[] r2;
        android.view.View r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i3 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if i3 == 393216 goto label4;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z2 == 0 goto label1;

        i1 = i1 | 1;

     label1:
        i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i5 = 0;

     label2:
        if i5 >= i4 goto label4;

        r3 = r2[i5];

        $i8 = r3.<android.view.View: int mViewFlags>;

        $i7 = $i8 & 12;

        if $i7 != 0 goto label3;

        virtualinvoke r3.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i1);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        if i3 != 262144 goto label5;

        $i6 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i2 != $i6 goto label7;

     label5:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z1 != 0 goto label7;

     label6:
        specialinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i1);

     label7:
        return;
    }

    public void setTouchscreenBlocksFocus(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1, $z2;
        android.view.View r1, r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 67108864;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z1 == 0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getDeepestFocusedChild()>();

        $z2 = virtualinvoke r1.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z2 != 0 goto label1;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View focusSearch(int)>(2);

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View: boolean requestFocus()>();

     label1:
        goto label3;

     label2:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -67108865;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label3:
        return;
    }

    public boolean getTouchscreenBlocksFocus()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean shouldBlockFocusForTouchscreen()
    {
        android.view.ViewGroup r0;
        boolean $z0, $z1, $z2;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.touchscreen");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        java.lang.CharSequence r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.view.View[] r3;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>(r1, r2, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r4 = r3[i2];

        $i3 = r4.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 != 0 goto label2;

        $i5 = r4.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 8;

        if $i6 != 0 goto label2;

        virtualinvoke r4.<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>(r1, r2, i0);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public android.view.View findViewByAccessibilityIdTraversal(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View r1, r3, r4;
        android.view.View[] r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>(i0);

        if r1 == null goto label1;

        return r1;

     label1:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r3 = r2[i2];

        r4 = virtualinvoke r3.<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>(i0);

        if r4 == null goto label3;

        return r4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return null;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void dispatchWindowFocusChanged(boolean)>(z0);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchWindowFocusChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void addTouchables(java.util.ArrayList)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, i1, $i2, $i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        specialinvoke r0.<android.view.View: void addTouchables(java.util.ArrayList)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label2;

        virtualinvoke r3.<android.view.View: void addTouchables(java.util.ArrayList)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void makeOptionalFitsSystemWindows()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void makeOptionalFitsSystemWindows()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void makeOptionalFitsSystemWindows()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchDisplayHint(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchDisplayHint(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchDisplayHint(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected void onChildVisibilityChanged(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        android.animation.LayoutTransition $r2, $r4, $r10;
        android.view.DragEvent $r3;
        java.util.ArrayList $r5, $r6, $r7, $r8, $r9;
        boolean $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r2 == null goto label3;

        if i1 != 0 goto label1;

        $r10 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r10.<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>(r0, r1, i0);

        goto label3;

     label1:
        $r4 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r4.<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>(r0, r1, i1);

        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r5 == null goto label3;

        $r6 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r7 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        if $r7 != null goto label2;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren> = $r9;

     label2:
        $r8 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

     label3:
        $r3 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        if $r3 == null goto label4;

        if i1 != 0 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: boolean notifyChildOfDrag(android.view.View)>(r1);

     label4:
        return;
    }

    protected void dispatchVisibilityChanged(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, i1, i2;
        android.view.View[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r1, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r3 = r2[i2];

        virtualinvoke $r3.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r1, i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchWindowVisibilityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration)
    {
        android.view.ViewGroup r0;
        android.content.res.Configuration r1;
        int i0, i1;
        android.view.View[] r2;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void recomputeViewAttributes(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent r2;
        android.view.View$AttachInfo $r3, $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r4.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if r2 == null goto label1;

        interfaceinvoke r2.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    void dispatchCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.ViewGroup r0;
        android.view.View$AttachInfo r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i3 = i0 & 12;

        if $i3 != 0 goto label2;

        specialinvoke r0.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r3 = r2[i2];

        $i4 = r3.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 12;

        $i6 = i0 | $i5;

        virtualinvoke r3.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, $i6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void bringChildToFront(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        if i0 < 0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, $i1);

        r1.<android.view.View: android.view.ViewParent mParent> = r0;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label1:
        return;
    }

    private android.graphics.PointF getLocalPoint()
    {
        android.view.ViewGroup r0;
        android.graphics.PointF $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.PointF;

        specialinvoke $r3.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint>;

        return $r2;
    }

    public boolean dispatchDragEvent(android.view.DragEvent)
    {
        android.view.ViewGroup r0;
        android.view.DragEvent r1, $r6, $r16, $r17;
        boolean z0, z1, $z2, $z4, $z5;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.view.ViewRootImpl r2;
        android.graphics.PointF r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        android.view.View[] r4;
        android.view.View r5, $r9, $r11, $r18, $r19, r21, r22, r23, r24, r25;
        java.util.HashSet $r7, $r8, $r10, $r12, $r13, $r14;
        java.lang.Object $r15;
        java.util.Iterator r20;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.DragEvent;

        z0 = 0;

        f0 = r1.<android.view.DragEvent: float mX>;

        f1 = r1.<android.view.DragEvent: float mY>;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewRootImpl getViewRootImpl()>();

        r3 = specialinvoke r0.<android.view.ViewGroup: android.graphics.PointF getLocalPoint()>();

        $i2 = r1.<android.view.DragEvent: int mAction>;

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label12;
            case 3: goto label18;
            case 4: goto label08;
            case 5: goto label19;
            case 6: goto label17;
            default: goto label19;
        };

     label01:
        r0.<android.view.ViewGroup: android.view.View mCurrentDragView> = null;

        $r6 = staticinvoke <android.view.DragEvent: android.view.DragEvent obtain(android.view.DragEvent)>(r1);

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag> = $r6;

        $r8 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        if $r8 != null goto label02;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren> = $r10;

        goto label03;

     label02:
        $r7 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        virtualinvoke $r7.<java.util.HashSet: void clear()>();

     label03:
        r0.<android.view.ViewGroup: boolean mChildAcceptsDrag> = 0;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r4 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        r5 = r4[i1];

        $i4 = r5.<android.view.View: int mPrivateFlags2>;

        $i3 = $i4 & -4;

        r5.<android.view.View: int mPrivateFlags2> = $i3;

        $i5 = virtualinvoke r5.<android.view.View: int getVisibility()>();

        if $i5 != 0 goto label05;

        $r9 = r4[i1];

        z1 = virtualinvoke r0.<android.view.ViewGroup: boolean notifyChildOfDrag(android.view.View)>($r9);

        if z1 == 0 goto label05;

        r0.<android.view.ViewGroup: boolean mChildAcceptsDrag> = 1;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        $z2 = r0.<android.view.ViewGroup: boolean mChildAcceptsDrag>;

        if $z2 == 0 goto label07;

        z0 = 1;

     label07:
        goto label19;

     label08:
        $r12 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        if $r12 == null goto label11;

        $r14 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        r20 = virtualinvoke $r14.<java.util.HashSet: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r15 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (android.view.View) $r15;

        virtualinvoke r21.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $i8 = r21.<android.view.View: int mPrivateFlags2>;

        $i9 = $i8 & -4;

        r21.<android.view.View: int mPrivateFlags2> = $i9;

        virtualinvoke r21.<android.view.View: void refreshDrawableState()>();

        goto label09;

     label10:
        $r13 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        virtualinvoke $r13.<java.util.HashSet: void clear()>();

        $r16 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        if $r16 == null goto label11;

        $r17 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        virtualinvoke $r17.<android.view.DragEvent: void recycle()>();

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag> = null;

     label11:
        $z4 = r0.<android.view.ViewGroup: boolean mChildAcceptsDrag>;

        if $z4 == 0 goto label19;

        z0 = 1;

        goto label19;

     label12:
        $f6 = r1.<android.view.DragEvent: float mX>;

        $f7 = r1.<android.view.DragEvent: float mY>;

        r22 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>($f6, $f7, r3);

        $r18 = r0.<android.view.ViewGroup: android.view.View mCurrentDragView>;

        if $r18 == r22 goto label15;

        virtualinvoke r2.<android.view.ViewRootImpl: void setDragFocus(android.view.View)>(r22);

        i14 = r1.<android.view.DragEvent: int mAction>;

        $r19 = r0.<android.view.ViewGroup: android.view.View mCurrentDragView>;

        if $r19 == null goto label13;

        r23 = r0.<android.view.ViewGroup: android.view.View mCurrentDragView>;

        r1.<android.view.DragEvent: int mAction> = 6;

        virtualinvoke r23.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $i13 = r23.<android.view.View: int mPrivateFlags2>;

        $i12 = $i13 & -3;

        r23.<android.view.View: int mPrivateFlags2> = $i12;

        virtualinvoke r23.<android.view.View: void refreshDrawableState()>();

     label13:
        r0.<android.view.ViewGroup: android.view.View mCurrentDragView> = r22;

        if r22 == null goto label14;

        r1.<android.view.DragEvent: int mAction> = 5;

        virtualinvoke r22.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $i11 = r22.<android.view.View: int mPrivateFlags2>;

        $i10 = $i11 | 2;

        r22.<android.view.View: int mPrivateFlags2> = $i10;

        virtualinvoke r22.<android.view.View: void refreshDrawableState()>();

     label14:
        r1.<android.view.DragEvent: int mAction> = i14;

     label15:
        if r22 == null goto label16;

        $f9 = r3.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f9;

        $f8 = r3.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f8;

        z0 = virtualinvoke r22.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        r1.<android.view.DragEvent: float mX> = f0;

        r1.<android.view.DragEvent: float mY> = f1;

     label16:
        goto label19;

     label17:
        $r11 = r0.<android.view.ViewGroup: android.view.View mCurrentDragView>;

        if $r11 == null goto label19;

        r24 = r0.<android.view.ViewGroup: android.view.View mCurrentDragView>;

        virtualinvoke r24.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        $i7 = r24.<android.view.View: int mPrivateFlags2>;

        $i6 = $i7 & -3;

        r24.<android.view.View: int mPrivateFlags2> = $i6;

        virtualinvoke r24.<android.view.View: void refreshDrawableState()>();

        r0.<android.view.ViewGroup: android.view.View mCurrentDragView> = null;

        goto label19;

     label18:
        $f3 = r1.<android.view.DragEvent: float mX>;

        $f2 = r1.<android.view.DragEvent: float mY>;

        r25 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>($f3, $f2, r3);

        if r25 == null goto label19;

        $f5 = r3.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f5;

        $f4 = r3.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f4;

        z0 = virtualinvoke r25.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        r1.<android.view.DragEvent: float mX> = f0;

        r1.<android.view.DragEvent: float mY> = f1;

     label19:
        if z0 != 0 goto label20;

        z0 = specialinvoke r0.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

     label20:
        return z0;
    }

    android.view.View findFrontmostDroppableChildAt(float, float, android.graphics.PointF)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        android.graphics.PointF r1;
        int i0, i1;
        android.view.View[] r2;
        android.view.View r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.PointF;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label4;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<android.view.View: boolean canAcceptDrag()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r3, r1);

        if $z1 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return null;
    }

    boolean notifyChildOfDrag(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        boolean z0, $z1, $z3;
        java.util.HashSet $r2, $r3;
        android.view.DragEvent $r4;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        z0 = 0;

        $r2 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        $z1 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r3 = r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        z0 = virtualinvoke r1.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>($r4);

        if z0 == 0 goto label1;

        $z3 = virtualinvoke r1.<android.view.View: boolean canAcceptDrag()>();

        if $z3 != 0 goto label1;

        $i0 = r1.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 | 1;

        r1.<android.view.View: int mPrivateFlags2> = $i1;

        virtualinvoke r1.<android.view.View: void refreshDrawableState()>();

     label1:
        return z0;
    }

    public void dispatchWindowSystemUiVisiblityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchSystemUiVisibilityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    boolean updateLocalSystemUiVisibility(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        boolean z0, $z1;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = specialinvoke r0.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>(i0, i1);

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r2 = r1[i3];

        $z1 = virtualinvoke r2.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>(i0, i1);

        z0 = z0 | $z1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return z0;
    }

    public boolean dispatchKeyEventPreIme(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        int $i0, $i1, $i2, $i3;
        android.view.View $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>(r1);

        return $z1;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i2 = $r3.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r4 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        android.view.InputEventConsistencyVerifier $r2, $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3;
        android.view.View $r3, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label1;

        $r8 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r8.<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>(r1, 1);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label2;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r3 == null goto label3;

        $r6 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i2 = $r6.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label3;

        $r7 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r7.<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r4 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r4 == null goto label4;

        $r5 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r5.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label4:
        return 0;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        int $i0, $i1, $i2, $i3;
        android.view.View $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z1;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i2 = $r3.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r4 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        android.view.InputEventConsistencyVerifier $r2, $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3;
        android.view.View $r3, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label1;

        $r8 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r8.<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>(r1, 1);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label2;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r3 == null goto label3;

        $r6 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i2 = $r6.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label3;

        $r7 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r7.<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r4 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r4 == null goto label4;

        $r5 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r5.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label4:
        return 0;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1, r2;
        int i0, i1, i2, i3, $i4;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z10, $z13, $z14, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, z25, z26, z27;
        android.view.ViewGroup$HoverTarget r3, r6, r7, r9, $r12, r15;
        float f0, f1;
        java.util.ArrayList r4;
        android.view.View[] r5;
        android.view.View r8, $r11, $r13, r14;
        java.lang.Object $r10;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

        r2 = r1;

        z1 = 0;

        r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = null;

        if z0 != 0 goto label22;

        if i0 == 10 goto label22;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 == 0 goto label22;

        r4 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r4 != null goto label01;

        $z24 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z24 == 0 goto label01;

        $z23 = 1;

        goto label02;

     label01:
        $z23 = 0;

     label02:
        z2 = $z23;

        r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r6 = null;

        i2 = i1 - 1;

     label03:
        if i2 < 0 goto label21;

        if z2 == 0 goto label04;

        $i4 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i1, i2);

        goto label05;

     label04:
        $i4 = i2;

     label05:
        i3 = $i4;

        if r4 != null goto label06;

        $r13 = r5[i3];

        goto label07;

     label06:
        $r10 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r13 = (android.view.View) $r10;

     label07:
        r8 = $r13;

        $z17 = staticinvoke <android.view.ViewGroup: boolean canViewReceivePointerEvents(android.view.View)>(r8);

        if $z17 == 0 goto label20;

        $z18 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r8, null);

        if $z18 != 0 goto label08;

        goto label20;

     label08:
        r7 = r3;

        r9 = null;

     label09:
        if r7 != null goto label10;

        r7 = staticinvoke <android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget obtain(android.view.View)>(r8);

        z3 = 0;

        goto label14;

     label10:
        $r11 = r7.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if $r11 != r8 goto label13;

        if r9 == null goto label11;

        $r12 = r7.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        r9.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = $r12;

        goto label12;

     label11:
        r3 = r7.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

     label12:
        r7.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = null;

        z3 = 1;

        goto label14;

     label13:
        r9 = r7;

        r7 = r7.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        goto label09;

     label14:
        if r6 == null goto label15;

        r6.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = r7;

        goto label16;

     label15:
        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = r7;

     label16:
        r6 = r7;

        if i0 != 9 goto label17;

        if z3 != 0 goto label19;

        $z21 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r8);

        z1 = z1 | $z21;

        goto label19;

     label17:
        if i0 != 7 goto label19;

        if z3 != 0 goto label18;

        r2 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r2);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(9);

        $z19 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r2, r8);

        z25 = z1 | $z19;

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(i0);

        $z22 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r2, r8);

        z1 = z25 | $z22;

        goto label19;

     label18:
        $z20 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r8);

        z1 = z1 | $z20;

     label19:
        if z1 == 0 goto label20;

        goto label21;

     label20:
        i2 = i2 + -1;

        goto label03;

     label21:
        if r4 == null goto label22;

        virtualinvoke r4.<java.util.ArrayList: void clear()>();

     label22:
        if r3 == null goto label26;

        r14 = r3.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if i0 != 10 goto label23;

        $z16 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r14);

        z1 = z1 | $z16;

        goto label25;

     label23:
        if i0 != 7 goto label24;

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r14);

     label24:
        r2 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r2);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(10);

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r2, r14);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(i0);

     label25:
        r15 = r3.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        virtualinvoke r3.<android.view.ViewGroup$HoverTarget: void recycle()>();

        r3 = r15;

        goto label22;

     label26:
        if z1 != 0 goto label27;

        $z14 = 1;

        goto label28;

     label27:
        $z14 = 0;

     label28:
        z26 = $z14;

        $z5 = r0.<android.view.ViewGroup: boolean mHoveredSelf>;

        if z26 != $z5 goto label29;

        if z26 == 0 goto label35;

        $z13 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z1 = z1 | $z13;

        goto label35;

     label29:
        $z4 = r0.<android.view.ViewGroup: boolean mHoveredSelf>;

        if $z4 == 0 goto label33;

        if i0 != 10 goto label30;

        $z10 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z1 = z1 | $z10;

        goto label32;

     label30:
        if i0 != 7 goto label31;

        specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

     label31:
        r2 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r2);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(10);

        specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r2);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(i0);

     label32:
        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 0;

     label33:
        if z26 == 0 goto label35;

        if i0 != 9 goto label34;

        $z7 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z1 = z1 | $z7;

        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 1;

        goto label35;

     label34:
        if i0 != 7 goto label35;

        r2 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r2);

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(9);

        $z6 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r2);

        z27 = z1 | $z6;

        virtualinvoke r2.<android.view.MotionEvent: void setAction(int)>(i0);

        $z8 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r2);

        z1 = z27 | $z8;

        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 1;

     label35:
        if r2 == r1 goto label36;

        virtualinvoke r2.<android.view.MotionEvent: void recycle()>();

     label36:
        return z1;
    }

    private void exitHoverTargets()
    {
        android.view.ViewGroup r0;
        long l0;
        android.view.MotionEvent r1;
        boolean $z0;
        android.view.ViewGroup$HoverTarget $r2;

        r0 := @this: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mHoveredSelf>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        if $r2 == null goto label2;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 10, 0.0F, 0.0F, 0);

        virtualinvoke r1.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

     label2:
        return;
    }

    private void cancelHoverTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r6;
        android.view.ViewGroup$HoverTarget r2, r3, r4;
        long l0;
        android.view.MotionEvent r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = null;

        r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

     label1:
        if r3 == null goto label5;

        r4 = r3.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        $r6 = r3.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if $r6 != r1 goto label4;

        if r2 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = r4;

        goto label3;

     label2:
        r2.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = r4;

     label3:
        virtualinvoke r3.<android.view.ViewGroup$HoverTarget: void recycle()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 10, 0.0F, 0.0F, 0);

        virtualinvoke r5.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r1.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r5);

        virtualinvoke r5.<android.view.MotionEvent: void recycle()>();

        return;

     label4:
        r2 = r3;

        r3 = r4;

        goto label1;

     label5:
        return;
    }

    protected boolean hasHoveredChild()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$HoverTarget $r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void addChildrenForAccessibility(java.util.ArrayList)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        android.view.ViewGroup$ChildListForAccessibility r2;
        int i0, i1, $i2, $i3;
        android.view.View r3;
        java.lang.Throwable r4, $r5;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        r2 = staticinvoke <android.view.ViewGroup$ChildListForAccessibility: android.view.ViewGroup$ChildListForAccessibility obtain(android.view.ViewGroup,boolean)>(r0, 1);

     label1:
        i0 = virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r3 = virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>(i1);

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label4;

        $z0 = virtualinvoke r3.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label4;

     label3:
        virtualinvoke r3.<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>(r1);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        goto label8;

     label6:
        $r5 := @caughtexception;

        r4 = $r5;

     label7:
        virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean onInterceptHoverEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    private static android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)
    {
        android.view.MotionEvent r0, $r1;
        int $i0;

        r0 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r0.<android.view.MotionEvent: int getHistorySize()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r0);

        return $r1;
    }

    protected boolean dispatchGenericPointerEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, $i3;
        float f0, f1;
        java.util.ArrayList r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.view.View[] r3;
        android.view.View r4, $r6;
        java.lang.Object $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 == 0 goto label12;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label01;

        $z5 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z5 == 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = i0 - 1;

     label03:
        if i1 < 0 goto label11;

        if z0 == 0 goto label04;

        $i3 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i1);

        goto label05;

     label04:
        $i3 = i1;

     label05:
        i2 = $i3;

        if r2 != null goto label06;

        $r6 = r3[i2];

        goto label07;

     label06:
        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (android.view.View) $r5;

     label07:
        r4 = $r6;

        $z3 = staticinvoke <android.view.ViewGroup: boolean canViewReceivePointerEvents(android.view.View)>(r4);

        if $z3 == 0 goto label10;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r4, null);

        if $z2 != 0 goto label08;

        goto label10;

     label08:
        $z4 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r4);

        if $z4 == 0 goto label10;

        if r2 == null goto label09;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label09:
        return 1;

     label10:
        i1 = i1 + -1;

        goto label03;

     label11:
        if r2 == null goto label12;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label12:
        $z1 = specialinvoke r0.<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int $i0, $i1, $i2, $i3;
        android.view.View $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>(r1);

        return $z1;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i2 = $r3.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r4 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    private boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1, r3;
        android.view.View r2;
        float f0, f1, $f2, $f3;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Matrix $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        r2 := @parameter1: android.view.View;

        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r2.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        f0 = (float) $i2;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r2.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        f1 = (float) $i5;

        $z1 = virtualinvoke r2.<android.view.View: boolean hasIdentityMatrix()>();

        if $z1 != 0 goto label1;

        r3 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>(r1);

        virtualinvoke r3.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        $r4 = virtualinvoke r2.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r3.<android.view.MotionEvent: void transform(android.graphics.Matrix)>($r4);

        z0 = virtualinvoke r2.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r3);

        virtualinvoke r3.<android.view.MotionEvent: void recycle()>();

        goto label2;

     label1:
        virtualinvoke r1.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        z0 = virtualinvoke r2.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r1.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

     label2:
        return z0;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z20, z21;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, i22, i23;
        android.view.ViewGroup$TouchTarget r2, $r9, $r12, $r13, $r19, r21, r22, r23;
        float f0, f1, $f2, $f3;
        java.util.ArrayList r3;
        android.view.View[] r4, $r17;
        android.view.View r5, $r10, $r11, $r15, $r16, $r18;
        android.view.InputEventConsistencyVerifier $r6, $r7, $r8, $r20;
        java.lang.Object $r14;
        long $l16;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r6 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r6 == null goto label01;

        $r20 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r20.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r1, 1);

     label01:
        z0 = 0;

        $z6 = virtualinvoke r0.<android.view.ViewGroup: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>(r1);

        if $z6 == 0 goto label52;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        i1 = i0 & 255;

        if i1 != 0 goto label02;

        specialinvoke r0.<android.view.ViewGroup: void cancelAndClearTouchTargets(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void resetTouchState()>();

     label02:
        if i1 == 0 goto label03;

        $r19 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r19 == null goto label08;

     label03:
        $i8 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i9 = $i8 & 524288;

        if $i9 == 0 goto label04;

        $z17 = 1;

        goto label05;

     label04:
        $z17 = 0;

     label05:
        z2 = $z17;

        if z2 != 0 goto label06;

        z1 = virtualinvoke r0.<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

        goto label07;

     label06:
        z1 = 0;

     label07:
        goto label09;

     label08:
        z1 = 1;

     label09:
        $z7 = staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r0);

        if $z7 != 0 goto label10;

        if i1 != 3 goto label11;

     label10:
        $z19 = 1;

        goto label12;

     label11:
        $z19 = 0;

     label12:
        z20 = $z19;

        $i11 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i10 = $i11 & 2097152;

        if $i10 == 0 goto label13;

        $z18 = 1;

        goto label14;

     label13:
        $z18 = 0;

     label14:
        z3 = $z18;

        r2 = null;

        z4 = 0;

        if z20 != 0 goto label38;

        if z1 != 0 goto label38;

        if i1 == 0 goto label16;

        if z3 == 0 goto label15;

        if i1 == 5 goto label16;

     label15:
        if i1 != 7 goto label38;

     label16:
        i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        if z3 == 0 goto label17;

        $i17 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i2);

        $i21 = 1 << $i17;

        goto label18;

     label17:
        $i21 = -1;

     label18:
        i3 = $i21;

        specialinvoke r0.<android.view.ViewGroup: void removePointersFromTouchTargets(int)>(i3);

        i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if r2 != null goto label35;

        if i4 == 0 goto label35;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i2);

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i2);

        r3 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r3 != null goto label19;

        $z15 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z15 == 0 goto label19;

        $z16 = 1;

        goto label20;

     label19:
        $z16 = 0;

     label20:
        z5 = $z16;

        r4 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i6 = i4 - 1;

     label21:
        if i6 < 0 goto label34;

        if z5 == 0 goto label22;

        $i20 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i4, i6);

        goto label23;

     label22:
        $i20 = i6;

     label23:
        i5 = $i20;

        if r3 != null goto label24;

        $r18 = r4[i5];

        goto label25;

     label24:
        $r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r18 = (android.view.View) $r14;

     label25:
        r5 = $r18;

        $z13 = staticinvoke <android.view.ViewGroup: boolean canViewReceivePointerEvents(android.view.View)>(r5);

        if $z13 == 0 goto label33;

        $z12 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r5, null);

        if $z12 != 0 goto label26;

        goto label33;

     label26:
        r2 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget getTouchTarget(android.view.View)>(r5);

        if r2 == null goto label27;

        $i18 = r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i19 = $i18 | i3;

        r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i19;

        goto label34;

     label27:
        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r5);

        $z14 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, 0, r5, i3);

        if $z14 == 0 goto label33;

        $l16 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

        r0.<android.view.ViewGroup: long mLastTouchDownTime> = $l16;

        if r3 == null goto label31;

        i7 = 0;

     label28:
        if i7 >= i4 goto label30;

        $r15 = r4[i5];

        $r17 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r16 = $r17[i7];

        if $r15 != $r16 goto label29;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = i7;

        goto label30;

     label29:
        i7 = i7 + 1;

        goto label28;

     label30:
        goto label32;

     label31:
        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = i5;

     label32:
        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<android.view.ViewGroup: float mLastTouchDownX> = $f3;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<android.view.ViewGroup: float mLastTouchDownY> = $f2;

        r2 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget addTouchTarget(android.view.View,int)>(r5, i3);

        z4 = 1;

        goto label34;

     label33:
        i6 = i6 + -1;

        goto label21;

     label34:
        if r3 == null goto label35;

        virtualinvoke r3.<java.util.ArrayList: void clear()>();

     label35:
        if r2 != null goto label38;

        $r12 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r12 == null goto label38;

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label36:
        $r13 = r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        if $r13 == null goto label37;

        r2 = r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label36;

     label37:
        $i14 = r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i15 = $i14 | i3;

        r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i15;

     label38:
        $r9 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r9 != null goto label39;

        z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, z20, null, -1);

        goto label49;

     label39:
        r21 = null;

        r22 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label40:
        if r22 == null goto label49;

        r23 = r22.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        if z4 == 0 goto label41;

        if r22 != r2 goto label41;

        z0 = 1;

        goto label48;

     label41:
        $r11 = r22.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $z8 = staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>($r11);

        if $z8 != 0 goto label42;

        if z1 == 0 goto label43;

     label42:
        $z10 = 1;

        goto label44;

     label43:
        $z10 = 0;

     label44:
        z21 = $z10;

        $r10 = r22.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $i13 = r22.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $z9 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, z21, $r10, $i13);

        if $z9 == 0 goto label45;

        z0 = 1;

     label45:
        if z21 == 0 goto label48;

        if r21 != null goto label46;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r23;

        goto label47;

     label46:
        r21.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r23;

     label47:
        virtualinvoke r22.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r22 = r23;

        goto label40;

     label48:
        r21 = r22;

        r22 = r23;

        goto label40;

     label49:
        if z20 != 0 goto label50;

        if i1 == 1 goto label50;

        if i1 != 7 goto label51;

     label50:
        specialinvoke r0.<android.view.ViewGroup: void resetTouchState()>();

        goto label52;

     label51:
        if z3 == 0 goto label52;

        if i1 != 6 goto label52;

        i22 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        $i12 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i22);

        i23 = 1 << $i12;

        specialinvoke r0.<android.view.ViewGroup: void removePointersFromTouchTargets(int)>(i23);

     label52:
        if z0 != 0 goto label53;

        $r8 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r8 == null goto label53;

        $r7 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r7.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label53:
        return z0;
    }

    private void resetTouchState()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void clearTouchTargets()>();

        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r0);

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -524289;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        r0.<android.view.ViewGroup: int mNestedScrollAxes> = 0;

        return;
    }

    private static boolean resetCancelNextUpFlag(android.view.View)
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -67108865;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return 1;

     label1:
        return 0;
    }

    private void clearTouchTargets()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$TouchTarget r1, r2;

        r0 := @this: android.view.ViewGroup;

        r1 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if r1 == null goto label2;

     label1:
        r2 = r1.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        virtualinvoke r1.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r1 = r2;

        if r1 != null goto label1;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = null;

     label2:
        return;
    }

    private void cancelAndClearTouchTargets(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        boolean z0;
        long l0;
        android.view.ViewGroup$TouchTarget $r2, r5;
        android.view.View $r3, $r4;
        int $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r2 == null goto label4;

        z0 = 0;

        if r1 != null goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 3, 0.0F, 0.0F, 0);

        virtualinvoke r1.<android.view.MotionEvent: void setSource(int)>(4098);

        z0 = 1;

     label1:
        r5 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label2:
        if r5 == null goto label3;

        $r3 = r5.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>($r3);

        $r4 = r5.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $i1 = r5.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, 1, $r4, $i1);

        r5 = r5.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label2;

     label3:
        specialinvoke r0.<android.view.ViewGroup: void clearTouchTargets()>();

        if z0 == 0 goto label4;

        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

     label4:
        return;
    }

    private android.view.ViewGroup$TouchTarget getTouchTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        android.view.ViewGroup$TouchTarget r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r2 == null goto label3;

        $r3 = r2.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        if $r3 != r1 goto label2;

        return r2;

     label2:
        r2 = r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label1;

     label3:
        return null;
    }

    private android.view.ViewGroup$TouchTarget addTouchTarget(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$TouchTarget r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 = staticinvoke <android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget obtain(android.view.View,int)>(r1, i0);

        $r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = $r3;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r2;

        return r2;
    }

    private void removePointersFromTouchTargets(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.ViewGroup$TouchTarget r1, r2, r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = null;

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r2 == null goto label5;

        r3 = r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        $i1 = r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label4;

        $i4 = r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i3 = i0 ^ -1;

        $i5 = $i4 & $i3;

        r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i5;

        $i6 = r2.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        if $i6 != 0 goto label4;

        if r1 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r3;

        goto label3;

     label2:
        r1.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r3;

     label3:
        virtualinvoke r2.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r2 = r3;

        goto label1;

     label4:
        r1 = r2;

        r2 = r3;

        goto label1;

     label5:
        return;
    }

    private void cancelTouchTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r6;
        android.view.ViewGroup$TouchTarget r2, r3, r4;
        long l0;
        android.view.MotionEvent r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = null;

        r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r3 == null goto label5;

        r4 = r3.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        $r6 = r3.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        if $r6 != r1 goto label4;

        if r2 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r4;

        goto label3;

     label2:
        r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r4;

     label3:
        virtualinvoke r3.<android.view.ViewGroup$TouchTarget: void recycle()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 3, 0.0F, 0.0F, 0);

        virtualinvoke r5.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r1.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r5);

        virtualinvoke r5.<android.view.MotionEvent: void recycle()>();

        return;

     label4:
        r2 = r3;

        r3 = r4;

        goto label1;

     label5:
        return;
    }

    private static boolean canViewReceivePointerEvents(android.view.View)
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.animation.Animation $r1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r1 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean isTransformedTouchPointInView(float, float, android.view.View, android.graphics.PointF)
    {
        android.view.ViewGroup r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.view.View r1;
        android.graphics.PointF r2;
        float[] r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, z1;
        android.view.View$AttachInfo $r4, $r5;
        android.graphics.Matrix $r6;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.view.View;

        r2 := @parameter3: android.graphics.PointF;

        $i0 = r0.<android.view.ViewGroup: int mScrollX>;

        $f4 = (float) $i0;

        $f6 = f0 + $f4;

        $i1 = r1.<android.view.View: int mLeft>;

        $f5 = (float) $i1;

        f2 = $f6 - $f5;

        $i2 = r0.<android.view.ViewGroup: int mScrollY>;

        $f7 = (float) $i2;

        $f8 = f1 + $f7;

        $i3 = r1.<android.view.View: int mTop>;

        $f9 = (float) $i3;

        f3 = $f8 - $f9;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r4.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        r3[0] = f2;

        r3[1] = f3;

        $r6 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke $r6.<android.graphics.Matrix: void mapPoints(float[])>(r3);

        f2 = r3[0];

        f3 = r3[1];

     label1:
        z1 = virtualinvoke r1.<android.view.View: boolean pointInView(float,float)>(f2, f3);

        if z1 == 0 goto label2;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.PointF: void set(float,float)>(f2, f3);

     label2:
        return z1;
    }

    private boolean dispatchTransformedTouchEvent(android.view.MotionEvent, boolean, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1, r3;
        boolean z0, z1, $z2, $z3, z4, z5;
        android.view.View r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        float f0, f1, $f2, $f3, f4, f5;
        android.graphics.Matrix $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.view.View;

        i0 := @parameter3: int;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if z0 != 0 goto label01;

        if i1 != 3 goto label04;

     label01:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(3);

        if r2 != null goto label02;

        z1 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        goto label03;

     label02:
        z1 = virtualinvoke r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

     label03:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i1);

        return z1;

     label04:
        i2 = virtualinvoke r1.<android.view.MotionEvent: int getPointerIdBits()>();

        i3 = i2 & i0;

        if i3 != 0 goto label05;

        return 0;

     label05:
        if i3 != i2 goto label10;

        if r2 == null goto label06;

        $z3 = virtualinvoke r2.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 == 0 goto label09;

     label06:
        if r2 != null goto label07;

        z4 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        goto label08;

     label07:
        $i12 = r0.<android.view.ViewGroup: int mScrollX>;

        $i10 = r2.<android.view.View: int mLeft>;

        $i11 = $i12 - $i10;

        f0 = (float) $i11;

        $i13 = r0.<android.view.ViewGroup: int mScrollY>;

        $i14 = r2.<android.view.View: int mTop>;

        $i15 = $i13 - $i14;

        f1 = (float) $i15;

        virtualinvoke r1.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        z4 = virtualinvoke r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r1.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

     label08:
        return z4;

     label09:
        r3 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>(r1);

        goto label11;

     label10:
        r3 = virtualinvoke r1.<android.view.MotionEvent: android.view.MotionEvent split(int)>(i3);

     label11:
        if r2 != null goto label12;

        z5 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

        goto label14;

     label12:
        $i6 = r0.<android.view.ViewGroup: int mScrollX>;

        $i4 = r2.<android.view.View: int mLeft>;

        $i5 = $i6 - $i4;

        f4 = (float) $i5;

        $i7 = r0.<android.view.ViewGroup: int mScrollY>;

        $i8 = r2.<android.view.View: int mTop>;

        $i9 = $i7 - $i8;

        f5 = (float) $i9;

        virtualinvoke r3.<android.view.MotionEvent: void offsetLocation(float,float)>(f4, f5);

        $z2 = virtualinvoke r2.<android.view.View: boolean hasIdentityMatrix()>();

        if $z2 != 0 goto label13;

        $r4 = virtualinvoke r2.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r3.<android.view.MotionEvent: void transform(android.graphics.Matrix)>($r4);

     label13:
        z5 = virtualinvoke r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

     label14:
        virtualinvoke r3.<android.view.MotionEvent: void recycle()>();

        return z5;
    }

    public void setMotionEventSplittingEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 2097152;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -2097153;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label2:
        return;
    }

    public boolean isMotionEventSplittingEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 2097152;

        if $i1 != 2097152 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTransitionGroup()
    {
        android.view.ViewGroup r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.drawable.Drawable $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 33554432;

        if $i1 == 0 goto label3;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & 16777216;

        if $i3 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.graphics.drawable.Drawable getBackground()>();

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: java.lang.String getTransitionName()>();

        if $r2 == null goto label5;

     label4:
        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public void setTransitionGroup(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 33554432;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        if z0 == 0 goto label1;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 16777216;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        goto label2;

     label1:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & -16777217;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

     label2:
        return;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 524288;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if z0 != $z1 goto label3;

        return;

     label3:
        if z0 == 0 goto label4;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 524288;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        goto label5;

     label4:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & -524289;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

     label5:
        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r1 == null goto label6;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(z0);

     label6:
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.graphics.Rect r1;
        boolean z0, $z1, $z2, $z3, z4;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        i1 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        lookupswitch(i1)
        {
            case 131072: goto label2;
            case 262144: goto label5;
            case 393216: goto label1;
            default: goto label8;
        };

     label1:
        $z1 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        return $z1;

     label2:
        z0 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        if z0 == 0 goto label3;

        $z3 = z0;

        goto label4;

     label3:
        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>(i0, r1);

     label4:
        return $z3;

     label5:
        z4 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>(i0, r1);

        if z4 == 0 goto label6;

        $z2 = z4;

        goto label7;

     label6:
        $z2 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

     label7:
        return $z2;

     label8:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected boolean onRequestFocusInDescendants(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8;
        android.graphics.Rect r1;
        byte b2;
        android.view.View[] r2;
        android.view.View r3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i6 = i0 & 2;

        if $i6 == 0 goto label1;

        i1 = 0;

        b2 = 1;

        i3 = i4;

        goto label2;

     label1:
        i1 = i4 - 1;

        b2 = -1;

        i3 = -1;

     label2:
        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i5 = i1;

     label3:
        if i5 == i3 goto label5;

        r3 = r2[i5];

        $i7 = r3.<android.view.View: int mViewFlags>;

        $i8 = $i7 & 12;

        if $i8 != 0 goto label4;

        $z0 = virtualinvoke r3.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i5 = i5 + b2;

        goto label3;

     label5:
        return 0;
    }

    public void dispatchStartTemporaryDetach()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchStartTemporaryDetach()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchStartTemporaryDetach()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchFinishTemporaryDetach()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchFinishTemporaryDetach()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchFinishTemporaryDetach()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void dispatchAttachedToWindow(android.view.View$AttachInfo, int)
    {
        android.view.ViewGroup r0;
        android.view.View$AttachInfo r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = $i3 | 4194304;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

        specialinvoke r0.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, i0);

        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i5 & -4194305;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i6;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r3 = r2[i2];

        $i7 = r3.<android.view.View: int mViewFlags>;

        $i8 = $i7 & 12;

        $i9 = i0 | $i8;

        virtualinvoke r3.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, $i9);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void dispatchScreenStateChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchScreenStateChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchScreenStateChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.ViewGroup$ChildListForAccessibility r2;
        int i0, i1, $i2, $i3;
        android.view.View r3;
        boolean z1, $z2, z3, z4;
        java.lang.Throwable r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean includeForAccessibility()>();

        if $z2 == 0 goto label1;

        z3 = specialinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        if z3 == 0 goto label1;

        return z3;

     label1:
        r2 = staticinvoke <android.view.ViewGroup$ChildListForAccessibility: android.view.ViewGroup$ChildListForAccessibility obtain(android.view.ViewGroup,boolean)>(r0, 1);

     label2:
        i0 = virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r3 = virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>(i1);

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label5;

        z4 = virtualinvoke r3.<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        if z4 == 0 goto label5;

        z1 = z4;

     label4:
        virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        return z1;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        goto label9;

     label7:
        $r5 := @caughtexception;

        r4 = $r5;

     label8:
        virtualinvoke r2.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        throw r4;

     label9:
        return 0;

        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.ViewGroup r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.util.ArrayList r2;
        int i0, i1;
        android.view.View r3;
        android.view.View$AttachInfo $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label3;

        $r5 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r5.<android.view.View$AttachInfo: java.util.ArrayList mTempArrayList>;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        virtualinvoke r0.<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>(r2);

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (android.view.View) $r6;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addChildUnchecked(android.view.View)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label3:
        return;
    }

    void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.view.View: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        $r2 = class "android/view/ViewGroup";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r3);

        return;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0, $i1;
        java.lang.AbstractMethodError r3, $r6;
        android.view.ViewParent $r4, $r5, $r8;
        java.lang.StringBuilder $r7, $r11, $r12;
        java.lang.Class $r9;
        java.lang.String $r10, $r13;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getAccessibilityLiveRegion()>();

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void notifyViewAccessibilityStateChangedIfNeeded(int)>(i0);

        goto label5;

     label1:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r4 == null goto label5;

     label2:
        $r5 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>(r0, r2, i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r13, r3);

     label5:
        return;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    void resetSubtreeAccessibilityStateChanged()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.DragEvent $r2, $r4;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void cancelAndClearTouchTargets(android.view.MotionEvent)>(null);

        specialinvoke r0.<android.view.ViewGroup: void exitHoverTargets()>();

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

        r0.<android.view.ViewGroup: java.util.HashSet mDragNotifiedChildren> = null;

        $r2 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        if $r2 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag>;

        virtualinvoke $r4.<android.view.DragEvent: void recycle()>();

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDrag> = null;

     label1:
        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        virtualinvoke $r3.<android.view.View: void dispatchDetachedFromWindow()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void clearDisappearingChildren()>();

        specialinvoke r0.<android.view.View: void dispatchDetachedFromWindow()>();

        return;
    }

    protected void internalSetPadding(int, int, int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        $i5 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i4 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i7 = $i5 | $i4;

        $i6 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i9 = $i7 | $i6;

        $i8 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i10 = $i9 | $i8;

        if $i10 == 0 goto label1;

        $i13 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i14 = $i13 | 32;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i14;

        goto label2;

     label1:
        $i11 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i12 = $i11 & -33;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i12;

     label2:
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;
        int i0, i1, $i2, $i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 536870912;

        if $i3 == 536870912 goto label2;

        virtualinvoke r3.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void dispatchFreezeSelfOnly(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;
        int i0, i1, $i2, $i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 536870912;

        if $i3 == 536870912 goto label2;

        virtualinvoke r3.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void dispatchThawSelfOnly(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    protected void setChildrenDrawingCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, i1, $i2, $i3;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        $i3 = $i2 & 3;

        if $i3 == 3 goto label3;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void setDrawingCacheEnabled(boolean)>(z0);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    protected void onAnimationStart()
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View[] r1;
        boolean z0, $z1, $z2;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onAnimationStart()>();

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & 64;

        if $i3 != 64 goto label6;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isHardwareAccelerated()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        $i6 = r2.<android.view.View: int mViewFlags>;

        $i7 = $i6 & 12;

        if $i7 != 0 goto label4;

        virtualinvoke r2.<android.view.View: void setDrawingCacheEnabled(boolean)>(1);

        if z0 == 0 goto label4;

        virtualinvoke r2.<android.view.View: void buildDrawingCache(boolean)>(1);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 32768;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

     label6:
        return;
    }

    protected void onAnimationEnd()
    {
        android.view.ViewGroup r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onAnimationEnd()>();

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 64;

        if $i1 != 64 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & -32769;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $i4 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        $i5 = $i4 & 1;

        if $i5 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>(0);

     label1:
        return;
    }

    android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config, int, boolean)
    {
        android.view.ViewGroup r0;
        android.graphics.Bitmap$Config r1;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        boolean z0;
        int[] r2;
        android.view.View r3, $r4;
        android.graphics.Bitmap r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = null;

        if z0 == 0 goto label3;

        r2 = newarray (int)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $i4 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        r2[i2] = $i4;

        $i5 = r2[i2];

        if $i5 != 0 goto label2;

        virtualinvoke r3.<android.view.View: void setVisibility(int)>(4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        r5 = specialinvoke r0.<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)>(r1, i0, z0);

        if z0 == 0 goto label5;

        i6 = 0;

     label4:
        if i6 >= i1 goto label5;

        $r4 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i6);

        $i3 = r2[i6];

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>($i3);

        i6 = i6 + 1;

        goto label4;

     label5:
        return r5;
    }

    boolean isLayoutModeOptical()
    {
        android.view.ViewGroup r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    android.graphics.Insets computeOpticalInsets()
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.view.View r1;
        android.graphics.Insets r2, $r3, $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isLayoutModeOptical()>();

        if $z0 == 0 goto label4;

        i0 = 0;

        i1 = 0;

        i2 = 0;

        i3 = 0;

        i4 = 0;

     label1:
        $i5 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i4 >= $i5 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        $i6 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i6 != 0 goto label2;

        r2 = virtualinvoke r1.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i7 = r2.<android.graphics.Insets: int left>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i7);

        $i8 = r2.<android.graphics.Insets: int top>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i8);

        $i9 = r2.<android.graphics.Insets: int right>;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i9);

        $i10 = r2.<android.graphics.Insets: int bottom>;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i10);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r4 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i0, i1, i2, i3);

        return $r4;

     label4:
        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        return $r3;
    }

    private static void fillRect(android.graphics.Canvas, android.graphics.Paint, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        if i0 == i2 goto label3;

        if i1 == i3 goto label3;

        if i0 <= i2 goto label1;

        i4 = i0;

        i0 = i2;

        i2 = i4;

     label1:
        if i1 <= i3 goto label2;

        i5 = i1;

        i1 = i3;

        i3 = i5;

     label2:
        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r0.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r1);

     label3:
        return;
    }

    private static int sign(int)
    {
        int i0;
        byte $b1;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;
    }

    private static void drawCorner(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $i5 = i0 + i2;

        $i6 = staticinvoke <android.view.ViewGroup: int sign(int)>(i3);

        $i7 = i4 * $i6;

        $i8 = i1 + $i7;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i5, $i8);

        $i9 = staticinvoke <android.view.ViewGroup: int sign(int)>(i2);

        $i10 = i4 * $i9;

        $i12 = i0 + $i10;

        $i11 = i1 + i3;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i12, $i11);

        return;
    }

    private int dipsToPixels(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        float f0, $f1, $f2, $f3;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.util.DisplayMetrics $r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        f0 = $r3.<android.util.DisplayMetrics: float density>;

        $f1 = (float) i0;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        $i1 = (int) $f3;

        return $i1;
    }

    private static void drawRectCorners(android.graphics.Canvas, int, int, int, int, android.graphics.Paint, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Paint;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i0, i1, i4, i4, i5);

        $i6 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i0, i3, i4, $i6, i5);

        $i7 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i2, i1, $i7, i4, i5);

        $i9 = neg i4;

        $i8 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i2, i3, $i9, $i8, i5);

        return;
    }

    private static void fillDifference(android.graphics.Canvas, int, int, int, int, int, int, int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        r1 := @parameter9: android.graphics.Paint;

        i8 = i0 - i4;

        i9 = i1 - i5;

        i10 = i2 + i6;

        i11 = i3 + i7;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i8, i9, i10, i1);

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i8, i1, i0, i3);

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i2, i1, i10, i3);

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i8, i3, i10, i11);

        return;
    }

    protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        int i0, $i1;
        android.view.View r3;
        android.view.ViewGroup$LayoutParams $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i0 >= $i1 goto label2;

        r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        $r4 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        virtualinvoke $r4.<android.view.ViewGroup$LayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)>(r3, r1, r2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    protected void onDebugDraw(android.graphics.Canvas)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25;
        android.view.View r3, r5;
        android.graphics.Insets r4;
        android.graphics.Paint$Style $r6, $r7, $r8;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = staticinvoke <android.view.ViewGroup: android.graphics.Paint getDebugPaint()>();

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>(-65536);

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i0 >= $i1 goto label2;

        r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        r4 = virtualinvoke r3.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i10 = virtualinvoke r3.<android.view.View: int getLeft()>();

        $i9 = r4.<android.graphics.Insets: int left>;

        $i12 = $i10 + $i9;

        $i11 = virtualinvoke r3.<android.view.View: int getTop()>();

        $i14 = r4.<android.graphics.Insets: int top>;

        $i13 = $i11 + $i14;

        $i16 = virtualinvoke r3.<android.view.View: int getRight()>();

        $i15 = r4.<android.graphics.Insets: int right>;

        $i19 = $i16 - $i15;

        $i20 = $i19 - 1;

        $i17 = virtualinvoke r3.<android.view.View: int getBottom()>();

        $i18 = r4.<android.graphics.Insets: int bottom>;

        $i21 = $i17 - $i18;

        $i22 = $i21 - 1;

        staticinvoke <android.view.ViewGroup: void drawRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r1, r2, $i12, $i13, $i20, $i22);

        i0 = i0 + 1;

        goto label1;

     label2:
        $i2 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(63, 255, 0, 255);

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i2);

        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);

        virtualinvoke r0.<android.view.ViewGroup: void onDebugDrawMargins(android.graphics.Canvas,android.graphics.Paint)>(r1, r2);

        $i3 = staticinvoke <android.graphics.Color: int rgb(int,int,int)>(63, 127, 255);

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i3);

        $r8 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r8);

        i23 = specialinvoke r0.<android.view.ViewGroup: int dipsToPixels(int)>(8);

        i24 = specialinvoke r0.<android.view.ViewGroup: int dipsToPixels(int)>(1);

        i25 = 0;

     label3:
        $i4 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i25 >= $i4 goto label4;

        r5 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i25);

        $i6 = virtualinvoke r5.<android.view.View: int getLeft()>();

        $i5 = virtualinvoke r5.<android.view.View: int getTop()>();

        $i8 = virtualinvoke r5.<android.view.View: int getRight()>();

        $i7 = virtualinvoke r5.<android.view.View: int getBottom()>();

        staticinvoke <android.view.ViewGroup: void drawRectCorners(android.graphics.Canvas,int,int,int,int,android.graphics.Paint,int,int)>(r1, $i6, $i5, $i8, $i7, r2, i23, i24);

        i25 = i25 + 1;

        goto label3;

     label4:
        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        boolean z0, z1, z2, z3, $z4, $z5, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, i52, i54, i55, i56;
        android.view.View[] r2;
        android.view.View r3, r6, r8, $r15;
        android.view.ViewGroup$LayoutParams r4;
        java.util.ArrayList r5, $r9, $r10, r21;
        android.view.RenderNode $r7;
        android.view.animation.LayoutAnimationController $r11, r20;
        java.lang.Object $r12, $r14;
        android.view.ViewGroup$1 $r13, r22;
        android.view.animation.Animation $r16, $r17;
        android.view.animation.Animation$AnimationListener $r18, $r19;
        long l53;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        $r7 = r0.<android.view.ViewGroup: android.view.RenderNode mRenderNode>;

        z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isRecordingFor(java.lang.Object)>($r7);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = i1 & 8;

        if $i5 == 0 goto label10;

        $z15 = virtualinvoke r0.<android.view.ViewGroup: boolean canAnimate()>();

        if $z15 == 0 goto label10;

        $i42 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i43 = $i42 & 64;

        if $i43 != 64 goto label01;

        $z16 = 1;

        goto label02;

     label01:
        $z16 = 0;

     label02:
        z1 = $z16;

        $z12 = virtualinvoke r0.<android.view.ViewGroup: boolean isHardwareAccelerated()>();

        if $z12 != 0 goto label03;

        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        z2 = $z17;

        i2 = 0;

     label05:
        if i2 >= i0 goto label07;

        r3 = r2[i2];

        $i49 = r3.<android.view.View: int mViewFlags>;

        $i51 = $i49 & 12;

        if $i51 != 0 goto label06;

        r4 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        virtualinvoke r0.<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>(r3, r4, i2, i0);

        specialinvoke r0.<android.view.ViewGroup: void bindLayoutAnimation(android.view.View)>(r3);

        if z1 == 0 goto label06;

        virtualinvoke r3.<android.view.View: void setDrawingCacheEnabled(boolean)>(1);

        if z2 == 0 goto label06;

        virtualinvoke r3.<android.view.View: void buildDrawingCache(boolean)>(1);

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        r20 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        $z13 = virtualinvoke r20.<android.view.animation.LayoutAnimationController: boolean willOverlap()>();

        if $z13 == 0 goto label08;

        $i45 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i50 = $i45 | 128;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i50;

     label08:
        virtualinvoke r20.<android.view.animation.LayoutAnimationController: void start()>();

        $i40 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i41 = $i40 & -9;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i41;

        $i48 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i47 = $i48 & -17;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i47;

        if z1 == 0 goto label09;

        $i44 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i46 = $i44 | 32768;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i46;

     label09:
        $r19 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        if $r19 == null goto label10;

        $r18 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        $r17 = virtualinvoke r20.<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>();

        interfaceinvoke $r18.<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>($r17);

     label10:
        i52 = 0;

        $i7 = i1 & 34;

        if $i7 != 34 goto label11;

        $z14 = 1;

        goto label12;

     label11:
        $z14 = 0;

     label12:
        z18 = $z14;

        if z18 == 0 goto label13;

        i52 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i24 = r0.<android.view.ViewGroup: int mScrollX>;

        $i20 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i35 = $i24 + $i20;

        $i22 = r0.<android.view.ViewGroup: int mScrollY>;

        $i23 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i34 = $i22 + $i23;

        $i28 = r0.<android.view.ViewGroup: int mScrollX>;

        $i21 = r0.<android.view.ViewGroup: int mRight>;

        $i26 = $i28 + $i21;

        $i27 = r0.<android.view.ViewGroup: int mLeft>;

        $i32 = $i26 - $i27;

        $i25 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i33 = $i32 - $i25;

        $i30 = r0.<android.view.ViewGroup: int mScrollY>;

        $i31 = r0.<android.view.ViewGroup: int mBottom>;

        $i36 = $i30 + $i31;

        $i29 = r0.<android.view.ViewGroup: int mTop>;

        $i38 = $i36 - $i29;

        $i37 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i39 = $i38 - $i37;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>($i35, $i34, $i33, $i39);

     label13:
        $i6 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i9 = $i6 & -65;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i9;

        $i8 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i10 = $i8 & -5;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i10;

        z19 = 0;

        l53 = virtualinvoke r0.<android.view.ViewGroup: long getDrawingTime()>();

        if z0 == 0 goto label14;

        virtualinvoke r1.<android.graphics.Canvas: void insertReorderBarrier()>();

     label14:
        if z0 == 0 goto label15;

        $r10 = null;

        goto label16;

     label15:
        $r10 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

     label16:
        r5 = $r10;

        if r5 != null goto label17;

        $z10 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z10 == 0 goto label17;

        $z9 = 1;

        goto label18;

     label17:
        $z9 = 0;

     label18:
        z3 = $z9;

        i3 = 0;

     label19:
        if i3 >= i0 goto label26;

        if z3 == 0 goto label20;

        $i19 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i3);

        goto label21;

     label20:
        $i19 = i3;

     label21:
        i4 = $i19;

        if r5 != null goto label22;

        $r15 = r2[i4];

        goto label23;

     label22:
        $r14 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r15 = (android.view.View) $r14;

     label23:
        r6 = $r15;

        $i17 = r6.<android.view.View: int mViewFlags>;

        $i18 = $i17 & 12;

        if $i18 == 0 goto label24;

        $r16 = virtualinvoke r6.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r16 == null goto label25;

     label24:
        $z8 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r6, l53);

        z19 = z19 | $z8;

     label25:
        i3 = i3 + 1;

        goto label19;

     label26:
        if r5 == null goto label27;

        virtualinvoke r5.<java.util.ArrayList: void clear()>();

     label27:
        $r9 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if $r9 == null goto label29;

        r21 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        $i16 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        i54 = $i16 - 1;

        i55 = i54;

     label28:
        if i55 < 0 goto label29;

        $r12 = virtualinvoke r21.<java.util.ArrayList: java.lang.Object get(int)>(i55);

        r8 = (android.view.View) $r12;

        $z7 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r8, l53);

        z19 = z19 | $z7;

        i55 = i55 + -1;

        goto label28;

     label29:
        if z0 == 0 goto label30;

        virtualinvoke r1.<android.graphics.Canvas: void insertInorderBarrier()>();

     label30:
        $z4 = specialinvoke r0.<android.view.ViewGroup: boolean debugDraw()>();

        if $z4 == 0 goto label31;

        virtualinvoke r0.<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>(r1);

     label31:
        if z18 == 0 goto label32;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i52);

     label32:
        i56 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i11 = i56 & 4;

        if $i11 != 4 goto label33;

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label33:
        $i13 = i56 & 16;

        if $i13 != 0 goto label34;

        $i12 = i56 & 512;

        if $i12 != 0 goto label34;

        $r11 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        $z5 = virtualinvoke $r11.<android.view.animation.LayoutAnimationController: boolean isDone()>();

        if $z5 == 0 goto label34;

        if z19 != 0 goto label34;

        $i14 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i15 = $i14 | 512;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i15;

        $r13 = new android.view.ViewGroup$1;

        specialinvoke $r13.<android.view.ViewGroup$1: void <init>(android.view.ViewGroup)>(r0);

        r22 = $r13;

        virtualinvoke r0.<android.view.ViewGroup: boolean post(java.lang.Runnable)>(r22);

     label34:
        return;
    }

    public android.view.ViewGroupOverlay getOverlay()
    {
        android.view.ViewGroup r0;
        android.view.ViewOverlay $r1, $r2;
        android.view.ViewGroupOverlay $r3, $r4;
        android.content.Context $r5;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        if $r1 != null goto label1;

        $r4 = new android.view.ViewGroupOverlay;

        $r5 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        specialinvoke $r4.<android.view.ViewGroupOverlay: void <init>(android.content.Context,android.view.View)>($r5, r0);

        r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay> = $r4;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        $r3 = (android.view.ViewGroupOverlay) $r2;

        return $r3;
    }

    protected int getChildDrawingOrder(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return i1;
    }

    private boolean hasChildWithZ()
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        android.view.View[] $r1;
        android.view.View $r2;
        float $f0;
        byte $b2;

        r0 := @this: android.view.ViewGroup;

        i0 = 0;

     label1:
        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r2 = $r1[i0];

        $f0 = virtualinvoke $r2.<android.view.View: float getZ()>();

        $b2 = $f0 cmpl 0.0F;

        if $b2 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    java.util.ArrayList buildOrderedChildList()
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8;
        boolean z0, $z1;
        android.view.View r1, $r9;
        float f0, $f1;
        java.util.ArrayList $r2, $r3, $r4, $r6, $r8, $r10;
        android.view.View[] $r5;
        java.lang.Object $r7;
        byte $b7;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 <= 1 goto label01;

        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean hasChildWithZ()>();

        if $z1 != 0 goto label02;

     label01:
        return null;

     label02:
        $r2 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        if $r2 != null goto label03;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren> = $r10;

        goto label04;

     label03:
        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        virtualinvoke $r3.<java.util.ArrayList: void ensureCapacity(int)>(i0);

     label04:
        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        i1 = 0;

     label05:
        $i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 >= $i4 goto label10;

        if z0 == 0 goto label06;

        $i6 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i8 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>($i6, i1);

        goto label07;

     label06:
        $i8 = i1;

     label07:
        i2 = $i8;

        $r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r1 = $r5[i2];

        f0 = virtualinvoke r1.<android.view.View: float getZ()>();

        i3 = i1;

     label08:
        if i3 <= 0 goto label09;

        $r8 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        $i5 = i3 - 1;

        $r7 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r9 = (android.view.View) $r7;

        $f1 = virtualinvoke $r9.<android.view.View: float getZ()>();

        $b7 = $f1 cmpl f0;

        if $b7 <= 0 goto label09;

        i3 = i3 + -1;

        goto label08;

     label09:
        $r6 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        virtualinvoke $r6.<java.util.ArrayList: void add(int,java.lang.Object)>(i3, r1);

        i1 = i1 + 1;

        goto label05;

     label10:
        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        return $r4;
    }

    private void notifyAnimationListener()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$2 r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.animation.Animation$AnimationListener $r2;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -513;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 16;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $r2 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        if $r2 == null goto label1;

        $r3 = new android.view.ViewGroup$2;

        specialinvoke $r3.<android.view.ViewGroup$2: void <init>(android.view.ViewGroup)>(r0);

        r1 = $r3;

        virtualinvoke r0.<android.view.ViewGroup: boolean post(java.lang.Runnable)>(r1);

     label1:
        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 64;

        if $i5 != 64 goto label2;

        $i6 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = $i6 & -32769;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i7;

        $i8 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        $i9 = $i8 & 1;

        if $i9 != 0 goto label2;

        virtualinvoke r0.<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>(0);

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    protected void dispatchGetDisplayList()
    {
        android.view.ViewGroup r0, r9;
        int i0, i1, i2, $i3, $i4, i5;
        android.view.View[] r1;
        android.view.View r2, r3;
        android.view.ViewOverlay $r4, $r7;
        java.util.ArrayList $r5, r10;
        java.lang.Object $r6;
        boolean $z0;
        android.view.animation.Animation $r8;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $i3 = r2.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 == 0 goto label2;

        $r8 = virtualinvoke r2.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r8 == null goto label3;

     label2:
        $z0 = virtualinvoke r2.<android.view.View: boolean hasStaticLayer()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>(r2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        if $r4 == null goto label5;

        $r7 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        r9 = virtualinvoke $r7.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>(r9);

     label5:
        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if $r5 == null goto label7;

        r10 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        i5 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        i2 = 0;

     label6:
        if i2 >= i5 goto label7;

        $r6 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (android.view.View) $r6;

        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>(r3);

        i2 = i2 + 1;

        goto label6;

     label7:
        return;
    }

    private void recreateChildDisplayList(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -2147483648;

        if $i1 != -2147483648 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r1.<android.view.View: boolean mRecreateDisplayList> = $z0;

        $i2 = r1.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 2147483647;

        r1.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r1.<android.view.View: android.view.RenderNode getDisplayList()>();

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        return;
    }

    protected boolean drawChild(android.graphics.Canvas, android.view.View, long)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.view.View r2;
        long l0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.view.View;

        l0 := @parameter2: long;

        $z0 = virtualinvoke r2.<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)>(r1, r0, l0);

        return $z0;
    }

    public boolean getClipChildren()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setClipChildren(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, z1, $z3;
        int i0, $i1, $i2, $i3;
        android.view.View r1;
        android.view.RenderNode $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & 1;

        if $i2 != 1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z1 = $z3;

        if z0 == z1 goto label6;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(1, z0);

        i0 = 0;

     label3:
        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 >= $i3 goto label5;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        $r2 = r1.<android.view.View: android.view.RenderNode mRenderNode>;

        if $r2 == null goto label4;

        $r3 = r1.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.view.RenderNode: boolean setClipToBounds(boolean)>(z0);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label6:
        return;
    }

    public void setClipToPadding(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(2);

        if $z1 == z0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(2, z0);

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public boolean getClipToPadding()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(2);

        return $z0;
    }

    public void dispatchSetSelected(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void setSelected(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchSetActivated(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void setActivated(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void dispatchSetPressed(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1, $z2;
        android.view.View[] r1;
        int i0, i1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<android.view.View: boolean isClickable()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r2.<android.view.View: boolean isLongClickable()>();

        if $z2 != 0 goto label3;

     label2:
        virtualinvoke r2.<android.view.View: void setPressed(boolean)>(z0);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    void dispatchCancelPendingInputEvents()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchCancelPendingInputEvents()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchCancelPendingInputEvents()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void setStaticTransformationsEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(2048, z0);

        return;
    }

    protected boolean getChildStaticTransformation(android.view.View, android.view.animation.Transformation)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.Transformation r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.animation.Transformation;

        return 0;
    }

    android.view.animation.Transformation getChildTransformation()
    {
        android.view.ViewGroup r0;
        android.view.animation.Transformation $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation>;

        if $r1 != null goto label1;

        $r3 = new android.view.animation.Transformation;

        specialinvoke $r3.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation>;

        return $r2;
    }

    protected android.view.View findViewTraversal(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.View[] r1;
        android.view.View r2, r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.ViewGroup: int mID>;

        if i0 != $i3 goto label1;

        return r0;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r2 = r1[i2];

        $i4 = r2.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 8;

        if $i5 != 0 goto label3;

        r3 = virtualinvoke r2.<android.view.View: android.view.View findViewById(int)>(i0);

        if r3 == null goto label3;

        return r3;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return null;
    }

    protected android.view.View findViewWithTagTraversal(java.lang.Object)
    {
        android.view.ViewGroup r0;
        java.lang.Object r1, $r4;
        android.view.View[] r2;
        int i0, i1, $i2, $i3;
        android.view.View r3, r5;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: java.lang.Object mTag>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $i2 = r3.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 8;

        if $i3 != 0 goto label3;

        r5 = virtualinvoke r3.<android.view.View: android.view.View findViewWithTag(java.lang.Object)>(r1);

        if r5 == null goto label3;

        return r5;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    protected android.view.View findViewByPredicateTraversal(com.android.internal.util.Predicate, android.view.View)
    {
        android.view.ViewGroup r0;
        com.android.internal.util.Predicate r1;
        android.view.View r2, r4, r5;
        android.view.View[] r3;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: com.android.internal.util.Predicate;

        r2 := @parameter1: android.view.View;

        $z0 = interfaceinvoke r1.<com.android.internal.util.Predicate: boolean apply(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        if r4 == r2 goto label3;

        $i2 = r4.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 8;

        if $i3 != 0 goto label3;

        r5 = virtualinvoke r4.<android.view.View: android.view.View findViewByPredicate(com.android.internal.util.Predicate)>(r1);

        if r5 == null goto label3;

        return r5;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public void addView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int)>(r1, -1);

        return;
    }

    public void addView(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>();

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("generateDefaultLayoutParams() cannot return null");

        throw $r3;

     label1:
        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, i0, r2);

        return;
    }

    public void addView(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>();

        r2.<android.view.ViewGroup$LayoutParams: int width> = i0;

        r2.<android.view.ViewGroup$LayoutParams: int height> = i1;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, -1, r2);

        return;
    }

    public void addView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, -1, r2);

        return;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        specialinvoke r0.<android.view.ViewGroup: void addViewInner(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, 0);

        return;
    }

    public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;
        android.view.ViewParent $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid LayoutParams supplied to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r3 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == r0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given view not a child of ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        virtualinvoke r1.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$OnHierarchyChangeListener r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$OnHierarchyChangeListener;

        r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener> = r1;

        return;
    }

    protected void onViewAdded(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$OnHierarchyChangeListener $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        interfaceinvoke $r3.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>(r0, r1);

     label1:
        return;
    }

    protected void onViewRemoved(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$OnHierarchyChangeListener $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        interfaceinvoke $r3.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>(r0, r1);

     label1:
        return;
    }

    private void clearCachedLayoutMode()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(8388608);

        if $z0 != 0 goto label1;

        r0.<android.view.ViewGroup: int mLayoutMode> = -1;

     label1:
        return;
    }

    protected void onAttachedToWindow()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onAttachedToWindow()>();

        specialinvoke r0.<android.view.ViewGroup: void clearCachedLayoutMode()>();

        return;
    }

    protected void onDetachedFromWindow()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        specialinvoke r0.<android.view.ViewGroup: void clearCachedLayoutMode()>();

        return;
    }

    protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, 0);

        return $z0;
    }

    protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, $i1, $i2, $i3;
        android.view.ViewGroup$LayoutParams r2;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        z0 := @parameter3: boolean;

        r1.<android.view.View: android.view.ViewParent mParent> = null;

        specialinvoke r0.<android.view.ViewGroup: void addViewInner(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, z0);

        $i1 = r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -6291457;

        $i3 = $i2 | 32;

        r1.<android.view.View: int mPrivateFlags> = $i3;

        return 1;
    }

    protected void cleanupLayoutState(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -4097;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    private void addViewInner(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.ViewGroup$LayoutParams r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.view.View$AttachInfo r3, $r7;
        android.animation.LayoutTransition $r4, $r6, $r9, $r10;
        android.view.ViewParent $r5;
        java.lang.IllegalStateException $r11;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        z0 := @parameter3: boolean;

        $r4 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r4 == null goto label01;

        $r10 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r10.<android.animation.LayoutTransition: void cancel(int)>(3);

     label01:
        $r5 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        if $r5 == null goto label02;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The specified child already has a parent. You must call removeView() on the child\'s parent first.");

        throw $r11;

     label02:
        $r6 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r6 == null goto label03;

        $r9 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r9.<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label03:
        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        if $z2 != 0 goto label04;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

     label04:
        if z0 == 0 goto label05;

        r1.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r2;

        goto label06;

     label05:
        virtualinvoke r1.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

     label06:
        if i0 >= 0 goto label07;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

     label07:
        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, i0);

        if z0 == 0 goto label08;

        virtualinvoke r1.<android.view.View: void assignParent(android.view.ViewParent)>(r0);

        goto label09;

     label08:
        r1.<android.view.View: android.view.ViewParent mParent> = r0;

     label09:
        $z3 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        if $z3 == 0 goto label10;

        $r8 = virtualinvoke r1.<android.view.View: android.view.View findFocus()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, $r8);

     label10:
        r3 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label12;

        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i8 = $i5 & 4194304;

        if $i8 != 0 goto label12;

        z1 = r3.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        r3.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 0;

        $r7 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $i7 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i9 = $i7 & 12;

        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>($r7, $i9);

        $z6 = r3.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z6 == 0 goto label11;

        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(1);

     label11:
        r3.<android.view.View$AttachInfo: boolean mKeepScreenOn> = z1;

     label12:
        $z4 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z4 == 0 goto label13;

        virtualinvoke r1.<android.view.View: void resetRtlProperties()>();

     label13:
        virtualinvoke r0.<android.view.ViewGroup: void onViewAdded(android.view.View)>(r1);

        $i1 = r1.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 4194304;

        if $i2 != 4194304 goto label14;

        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i3 | 65536;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i6;

     label14:
        $z5 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if $z5 == 0 goto label15;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 1);

     label15:
        $i4 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i4 == 8 goto label16;

        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label16:
        return;
    }

    private void addInArray(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.view.View[] r2, $r10, $r11, $r12, $r13, $r14;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i2 = lengthof r2;

        if i0 != i1 goto label2;

        if i2 != i1 goto label1;

        $i15 = i2 + 12;

        $r13 = newarray (android.view.View)[$i15];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = $r13;

        $r14 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r14, 0, i2);

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

     label1:
        $i14 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i13 = $i14 + 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i13;

        r2[$i14] = r1;

        goto label6;

     label2:
        if i0 >= i1 goto label5;

        if i2 != i1 goto label3;

        $i10 = i2 + 12;

        $r10 = newarray (android.view.View)[$i10];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = $r10;

        $r11 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r11, 0, i0);

        $r12 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $i12 = i0 + 1;

        $i11 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r12, $i12, $i11);

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        goto label4;

     label3:
        $i4 = i0 + 1;

        $i3 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, r2, $i4, $i3);

     label4:
        r2[i0] = r1;

        $i5 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i7 = $i5 + 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i7;

        $i6 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        if $i6 < i0 goto label6;

        $i9 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        $i8 = $i9 + 1;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = $i8;

        goto label6;

     label5:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label6:
        return;
    }

    private void removeFromArray(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.view.View[] r1;
        java.util.ArrayList $r2, $r6;
        android.view.View $r3, $r5;
        java.lang.IndexOutOfBoundsException $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r2 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r2 == null goto label1;

        $r6 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $r5 = r1[i0];

        $z0 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

     label1:
        $r3 = r1[i0];

        $r3.<android.view.View: android.view.ViewParent mParent> = null;

     label2:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i2 = i1 - 1;

        if i0 != $i2 goto label3;

        $i11 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i13 = $i11 - 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i13;

        r1[$i13] = null;

        goto label5;

     label3:
        if i0 < 0 goto label4;

        if i0 >= i1 goto label4;

        $i5 = i0 + 1;

        $i3 = i1 - i0;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r1, i0, $i4);

        $i6 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i7 = $i6 - 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i7;

        r1[$i7] = null;

        goto label5;

     label4:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label5:
        $i8 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        if $i8 != i0 goto label6;

        r0.<android.view.ViewGroup: long mLastTouchDownTime> = 0L;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = -1;

        goto label7;

     label6:
        $i9 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        if $i9 <= i0 goto label7;

        $i10 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        $i12 = $i10 - 1;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = $i12;

     label7:
        return;
    }

    private void removeFromArray(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        android.view.View[] r1;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i11 = staticinvoke <java.lang.Math: int max(int,int)>(0, i0);

        $i5 = i11 + i1;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i5);

        if i11 != i3 goto label1;

        return;

     label1:
        if i3 != i2 goto label4;

        i4 = i11;

     label2:
        if i4 >= i3 goto label3;

        $r3 = r1[i4];

        $r3.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i4] = null;

        i4 = i4 + 1;

        goto label2;

     label3:
        goto label8;

     label4:
        i12 = i11;

     label5:
        if i12 >= i3 goto label6;

        $r2 = r1[i12];

        $r2.<android.view.View: android.view.ViewParent mParent> = null;

        i12 = i12 + 1;

        goto label5;

     label6:
        $i6 = i2 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r1, i11, $i6);

        $i7 = i3 - i11;

        i13 = i2 - $i7;

     label7:
        if i13 >= i2 goto label8;

        r1[i13] = null;

        i13 = i13 + 1;

        goto label7;

     label8:
        $i9 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i8 = i3 - i11;

        $i10 = $i9 - $i8;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i10;

        return;
    }

    private void bindLayoutAnimation(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.Animation r2;
        android.view.animation.LayoutAnimationController $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        r2 = virtualinvoke $r3.<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>(r1);

        virtualinvoke r1.<android.view.View: void setAnimation(android.view.animation.Animation)>(r2);

        return;
    }

    protected void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup$LayoutParams, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        int i0, i1;
        android.view.animation.LayoutAnimationController$AnimationParameters r3, $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = r2.<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters>;

        if r3 != null goto label1;

        $r4 = new android.view.animation.LayoutAnimationController$AnimationParameters;

        specialinvoke $r4.<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>();

        r3 = $r4;

        r2.<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters> = r3;

     label1:
        r3.<android.view.animation.LayoutAnimationController$AnimationParameters: int count> = i1;

        r3.<android.view.animation.LayoutAnimationController$AnimationParameters: int index> = i0;

        return;
    }

    public void removeView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(android.view.View)>(r1);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeViewInLayout(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(android.view.View)>(r1);

        return;
    }

    public void removeViewsInLayout(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeViewsInternal(int,int)>(i0, i1);

        return;
    }

    public void removeViewAt(int)
    {
        android.view.ViewGroup r0;
        int i0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(int,android.view.View)>(i0, $r1);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeViews(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeViewsInternal(int,int)>(i0, i1);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    private void removeViewInternal(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        if i0 < 0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(int,android.view.View)>(i0, r1);

     label1:
        return;
    }

    private void removeViewInternal(int, android.view.View)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        android.view.View r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4;
        android.animation.LayoutTransition $r2, $r8;
        android.view.animation.Animation $r4;
        java.util.ArrayList $r5, $r7;
        android.view.View$AttachInfo $r6;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r2 == null goto label1;

        $r8 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r8.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label1:
        z0 = 0;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 != $r3 goto label2;

        virtualinvoke r1.<android.view.View: void unFocus(android.view.View)>(null);

        z0 = 1;

     label2:
        $z1 = virtualinvoke r1.<android.view.View: boolean isAccessibilityFocused()>();

        if $z1 == 0 goto label3;

        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

     label3:
        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r1);

        $r4 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r4 != null goto label4;

        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r5 == null goto label5;

        $r7 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z4 = virtualinvoke $r7.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

     label4:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

        goto label6;

     label5:
        $r6 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r6 == null goto label6;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label6:
        $z2 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if $z2 == 0 goto label7;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 0);

     label7:
        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        if z0 == 0 goto label8;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r1);

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z3 != 0 goto label8;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r0);

     label8:
        virtualinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r1);

        $i1 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i1 == 8 goto label9;

        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label9:
        return;
    }

    public void setLayoutTransition(android.animation.LayoutTransition)
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition r1, r2, $r3, $r4, $r6;
        android.animation.LayoutTransition$TransitionListener $r5, $r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.animation.LayoutTransition;

        $r3 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r3 == null goto label1;

        r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke r2.<android.animation.LayoutTransition: void cancel()>();

        $r7 = r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener>;

        virtualinvoke r2.<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>($r7);

     label1:
        r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition> = r1;

        $r4 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r4 == null goto label2;

        $r6 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        $r5 = r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener>;

        virtualinvoke $r6.<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>($r5);

     label2:
        return;
    }

    public android.animation.LayoutTransition getLayoutTransition()
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        return $r1;
    }

    private void removeViewsInternal(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        android.view.View r1, r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.view.View[] r2;
        android.view.View$AttachInfo $r4;
        android.animation.LayoutTransition $r5, $r9;
        android.view.animation.Animation $r6;
        java.util.ArrayList $r7, $r8;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        z1 = 0;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = i0 + i1;

        i3 = i0;

     label03:
        if i3 >= i2 goto label11;

        r3 = r2[i3];

        $r5 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r5 == null goto label04;

        $r9 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r9.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r3);

     label04:
        if r3 != r1 goto label05;

        virtualinvoke r3.<android.view.View: void unFocus(android.view.View)>(null);

        z1 = 1;

     label05:
        $z3 = virtualinvoke r3.<android.view.View: boolean isAccessibilityFocused()>();

        if $z3 == 0 goto label06;

        virtualinvoke r3.<android.view.View: void clearAccessibilityFocus()>();

     label06:
        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r3);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r3);

        $r6 = virtualinvoke r3.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r6 != null goto label07;

        $r8 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r8 == null goto label08;

        $r7 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z5 = virtualinvoke $r7.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z5 == 0 goto label08;

     label07:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r3);

        goto label09;

     label08:
        if z0 == 0 goto label09;

        virtualinvoke r3.<android.view.View: void dispatchDetachedFromWindow()>();

     label09:
        $z4 = virtualinvoke r3.<android.view.View: boolean hasTransientState()>();

        if $z4 == 0 goto label10;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r3, 0);

     label10:
        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r3);

        i3 = i3 + 1;

        goto label03;

     label11:
        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int,int)>(i0, i1);

        if z1 == 0 goto label12;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r1);

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z2 != 0 goto label12;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r1);

     label12:
        return;
    }

    public void removeAllViews()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        virtualinvoke r0.<android.view.ViewGroup: void removeAllViewsInLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeAllViewsInLayout()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View r2, r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.view.View$AttachInfo $r4;
        android.animation.LayoutTransition $r5, $r9;
        android.view.animation.Animation $r6;
        java.util.ArrayList $r7, $r8;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label01;

        return;

     label01:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        z0 = $z6;

        z1 = 0;

        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        i1 = i0 - 1;

     label04:
        if i1 < 0 goto label12;

        r3 = r1[i1];

        $r5 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r5 == null goto label05;

        $r9 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r9.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r3);

     label05:
        if r3 != r2 goto label06;

        virtualinvoke r3.<android.view.View: void unFocus(android.view.View)>(null);

        z1 = 1;

     label06:
        $z3 = virtualinvoke r3.<android.view.View: boolean isAccessibilityFocused()>();

        if $z3 == 0 goto label07;

        virtualinvoke r3.<android.view.View: void clearAccessibilityFocus()>();

     label07:
        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r3);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r3);

        $r6 = virtualinvoke r3.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r6 != null goto label08;

        $r7 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r7 == null goto label09;

        $r8 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z5 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z5 == 0 goto label09;

     label08:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r3);

        goto label10;

     label09:
        if z0 == 0 goto label10;

        virtualinvoke r3.<android.view.View: void dispatchDetachedFromWindow()>();

     label10:
        $z4 = virtualinvoke r3.<android.view.View: boolean hasTransientState()>();

        if $z4 == 0 goto label11;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r3, 0);

     label11:
        virtualinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r3);

        r3.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i1] = null;

        i1 = i1 + -1;

        goto label04;

     label12:
        if z1 == 0 goto label13;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r2);

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z2 != 0 goto label13;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r2);

     label13:
        return;
    }

    protected void removeDetachedView(android.view.View, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        boolean z0, $z1, $z2;
        android.animation.LayoutTransition $r2, $r8;
        java.util.ArrayList $r4, $r6;
        android.view.View$AttachInfo $r5;
        android.view.animation.Animation $r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r2 == null goto label1;

        $r8 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r8.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label1:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 != $r3 goto label2;

        virtualinvoke r1.<android.view.View: void clearFocus()>();

     label2:
        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r1);

        if z0 == 0 goto label3;

        $r7 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r7 != null goto label4;

     label3:
        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r4 == null goto label5;

        $r6 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z2 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label5;

     label4:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

        goto label6;

     label5:
        $r5 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label6;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label6:
        $z1 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if $z1 == 0 goto label7;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 0);

     label7:
        virtualinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r1);

        return;
    }

    protected void attachViewToParent(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        r1.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r2;

        if i0 >= 0 goto label1;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

     label1:
        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, i0);

        r1.<android.view.View: android.view.ViewParent mParent> = r0;

        $i1 = r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -6291457;

        $i3 = $i2 & -32769;

        $i4 = $i3 | 32;

        $i5 = $i4 | -2147483648;

        r1.<android.view.View: int mPrivateFlags> = $i5;

        $i6 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i7 = $i6 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i7;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r1.<android.view.View: android.view.View findFocus()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, $r3);

     label2:
        return;
    }

    protected void detachViewFromParent(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>($i0);

        return;
    }

    protected void detachViewFromParent(int)
    {
        android.view.ViewGroup r0;
        int i0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        return;
    }

    protected void detachViewsFromParent(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int,int)>(i0, i1);

        return;
    }

    protected void detachAllViewsFromParent()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label1;

        return;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        i1 = i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r1[i1];

        $r2.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i1] = null;

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    public final void invalidateChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r13;
        android.graphics.Rect r2;
        android.view.ViewParent r3;
        android.view.View$AttachInfo r4;
        boolean z0, z1, z2, $z3, $z4, $z6, $z7, $z9, $z10, $z12, $z13, $z14;
        android.graphics.Matrix r5, r8, $r11, r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        int[] r6;
        android.graphics.RectF r7, r15;
        android.view.animation.Transformation r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.view.ViewRootImpl $r10;
        android.view.animation.Animation $r12;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 = r0;

        r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if r4 == null goto label20;

        $i1 = r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 64;

        if $i2 != 64 goto label01;

        $z14 = 1;

        goto label02;

     label01:
        $z14 = 0;

     label02:
        z0 = $z14;

        r5 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        $z3 = virtualinvoke r1.<android.view.View: boolean isOpaque()>();

        if $z3 == 0 goto label03;

        if z0 != 0 goto label03;

        $r12 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r12 != null goto label03;

        $z12 = virtualinvoke r5.<android.graphics.Matrix: boolean isIdentity()>();

        if $z12 == 0 goto label03;

        $z13 = 1;

        goto label04;

     label03:
        $z13 = 0;

     label04:
        z1 = $z13;

        if z1 == 0 goto label05;

        $i28 = 4194304;

        goto label06;

     label05:
        $i28 = 2097152;

     label06:
        i0 = $i28;

        $i4 = r1.<android.view.View: int mLayerType>;

        if $i4 == 0 goto label07;

        $i29 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i30 = $i29 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i30;

        $i31 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i32 = $i31 & -32769;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i32;

     label07:
        r6 = r4.<android.view.View$AttachInfo: int[] mInvalidateChildLocation>;

        $i3 = r1.<android.view.View: int mLeft>;

        r6[0] = $i3;

        $i5 = r1.<android.view.View: int mTop>;

        r6[1] = $i5;

        $z4 = virtualinvoke r5.<android.graphics.Matrix: boolean isIdentity()>();

        if $z4 == 0 goto label08;

        $i24 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i25 = $i24 & 2048;

        if $i25 == 0 goto label13;

     label08:
        r7 = r4.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        virtualinvoke r7.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $i7 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i7 & 2048;

        if $i6 == 0 goto label11;

        r9 = r4.<android.view.View$AttachInfo: android.view.animation.Transformation mTmpTransformation>;

        z2 = virtualinvoke r0.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r1, r9);

        if z2 == 0 goto label09;

        r8 = r4.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r11 = virtualinvoke r9.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r8.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r11);

        $z10 = virtualinvoke r5.<android.graphics.Matrix: boolean isIdentity()>();

        if $z10 != 0 goto label10;

        virtualinvoke r8.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>(r5);

        goto label10;

     label09:
        r8 = r5;

     label10:
        goto label12;

     label11:
        r8 = r5;

     label12:
        virtualinvoke r8.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r7);

        $f0 = r7.<android.graphics.RectF: float left>;

        $f2 = $f0 - 0.5F;

        $i11 = (int) $f2;

        $f1 = r7.<android.graphics.RectF: float top>;

        $f4 = $f1 - 0.5F;

        $i9 = (int) $f4;

        $f3 = r7.<android.graphics.RectF: float right>;

        $f6 = $f3 + 0.5F;

        $i8 = (int) $f6;

        $f5 = r7.<android.graphics.RectF: float bottom>;

        $f7 = $f5 + 0.5F;

        $i10 = (int) $f7;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i9, $i8, $i10);

     label13:
        r13 = null;

        $z6 = r3 instanceof android.view.View;

        if $z6 == 0 goto label14;

        r13 = (android.view.View) r3;

     label14:
        if z0 == 0 goto label16;

        if r13 == null goto label15;

        $i26 = r13.<android.view.View: int mPrivateFlags>;

        $i27 = $i26 | 64;

        r13.<android.view.View: int mPrivateFlags> = $i27;

        goto label16;

     label15:
        $z9 = r3 instanceof android.view.ViewRootImpl;

        if $z9 == 0 goto label16;

        $r10 = (android.view.ViewRootImpl) r3;

        $r10.<android.view.ViewRootImpl: boolean mIsAnimating> = 1;

     label16:
        if r13 == null goto label18;

        $i15 = r13.<android.view.View: int mViewFlags>;

        $i14 = $i15 & 12288;

        if $i14 == 0 goto label17;

        $i22 = virtualinvoke r13.<android.view.View: int getSolidColor()>();

        if $i22 != 0 goto label17;

        i0 = 2097152;

     label17:
        $i21 = r13.<android.view.View: int mPrivateFlags>;

        $i20 = $i21 & 6291456;

        if $i20 == 2097152 goto label18;

        $i19 = r13.<android.view.View: int mPrivateFlags>;

        $i18 = $i19 & -6291457;

        $i23 = $i18 | i0;

        r13.<android.view.View: int mPrivateFlags> = $i23;

     label18:
        r3 = interfaceinvoke r3.<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(r6, r2);

        if r13 == null goto label19;

        r14 = virtualinvoke r13.<android.view.View: android.graphics.Matrix getMatrix()>();

        $z7 = virtualinvoke r14.<android.graphics.Matrix: boolean isIdentity()>();

        if $z7 != 0 goto label19;

        r15 = r4.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        virtualinvoke r15.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        virtualinvoke r14.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r15);

        $f8 = r15.<android.graphics.RectF: float left>;

        $f9 = $f8 - 0.5F;

        $i16 = (int) $f9;

        $f12 = r15.<android.graphics.RectF: float top>;

        $f13 = $f12 - 0.5F;

        $i17 = (int) $f13;

        $f10 = r15.<android.graphics.RectF: float right>;

        $f11 = $f10 + 0.5F;

        $i12 = (int) $f11;

        $f15 = r15.<android.graphics.RectF: float bottom>;

        $f14 = $f15 + 0.5F;

        $i13 = (int) $f14;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i16, $i17, $i12, $i13);

     label19:
        if r3 != null goto label13;

     label20:
        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int[] r1;
        android.graphics.Rect r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53;
        android.view.ViewParent $r3, $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        $i2 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i3 = $i2 & 32;

        if $i3 == 32 goto label1;

        $i51 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i50 = $i51 & 32768;

        if $i50 != 32768 goto label9;

     label1:
        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 144;

        if $i5 == 128 goto label5;

        $i30 = r1[0];

        $i26 = r0.<android.view.ViewGroup: int mScrollX>;

        $i34 = $i30 - $i26;

        $i28 = r1[1];

        $i31 = r0.<android.view.ViewGroup: int mScrollY>;

        $i29 = $i28 - $i31;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i34, $i29);

        $i35 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i32 = $i35 & 1;

        if $i32 != 0 goto label2;

        $i48 = r0.<android.view.ViewGroup: int mRight>;

        $i49 = r0.<android.view.ViewGroup: int mLeft>;

        $i52 = $i48 - $i49;

        $i46 = r0.<android.view.ViewGroup: int mBottom>;

        $i47 = r0.<android.view.ViewGroup: int mTop>;

        $i53 = $i46 - $i47;

        virtualinvoke r2.<android.graphics.Rect: void union(int,int,int,int)>(0, 0, $i52, $i53);

     label2:
        i0 = r0.<android.view.ViewGroup: int mLeft>;

        i1 = r0.<android.view.ViewGroup: int mTop>;

        $i33 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i38 = $i33 & 1;

        if $i38 != 1 goto label3;

        $i41 = r0.<android.view.ViewGroup: int mRight>;

        $i43 = $i41 - i0;

        $i45 = r0.<android.view.ViewGroup: int mBottom>;

        $i44 = $i45 - i1;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i43, $i44);

        if $z0 != 0 goto label3;

        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

     label3:
        $i39 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i36 = $i39 & -32769;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i36;

        r1[0] = i0;

        r1[1] = i1;

        $i37 = r0.<android.view.ViewGroup: int mLayerType>;

        if $i37 == 0 goto label4;

        $i42 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i40 = $i42 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i40;

     label4:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        return $r4;

     label5:
        $i6 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i7 = $i6 & -32801;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i7;

        $i8 = r0.<android.view.ViewGroup: int mLeft>;

        r1[0] = $i8;

        $i9 = r0.<android.view.ViewGroup: int mTop>;

        r1[1] = $i9;

        $i10 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i11 = $i10 & 1;

        if $i11 != 1 goto label6;

        $i23 = r0.<android.view.ViewGroup: int mRight>;

        $i20 = r0.<android.view.ViewGroup: int mLeft>;

        $i27 = $i23 - $i20;

        $i25 = r0.<android.view.ViewGroup: int mBottom>;

        $i22 = r0.<android.view.ViewGroup: int mTop>;

        $i24 = $i25 - $i22;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i27, $i24);

        goto label7;

     label6:
        $i14 = r0.<android.view.ViewGroup: int mRight>;

        $i12 = r0.<android.view.ViewGroup: int mLeft>;

        $i18 = $i14 - $i12;

        $i16 = r0.<android.view.ViewGroup: int mBottom>;

        $i13 = r0.<android.view.ViewGroup: int mTop>;

        $i15 = $i16 - $i13;

        virtualinvoke r2.<android.graphics.Rect: void union(int,int,int,int)>(0, 0, $i18, $i15);

     label7:
        $i17 = r0.<android.view.ViewGroup: int mLayerType>;

        if $i17 == 0 goto label8;

        $i19 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i21 = $i19 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i21;

     label8:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        return $r3;

     label9:
        return null;
    }

    public boolean damageChildDeferred(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent r2;
        boolean $z0, $z1;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewParent getParent()>();

     label1:
        if r2 == null goto label4;

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label2:
        $z1 = r2 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label3;

        $r3 = (android.view.ViewRootImpl) r2;

        virtualinvoke $r3.<android.view.ViewRootImpl: void invalidate()>();

        return 1;

     label3:
        r2 = null;

        goto label1;

     label4:
        return 0;
    }

    public void damageChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0, r5;
        android.view.View r1;
        android.graphics.Rect r2;
        android.view.ViewParent r3;
        android.view.View$AttachInfo r4;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2;
        android.graphics.Matrix $r6;
        int[] r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean damageChildDeferred(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r3 = r0;

        r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if r4 == null goto label7;

        i0 = r1.<android.view.View: int mLeft>;

        i1 = r1.<android.view.View: int mTop>;

        $r6 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        $z1 = virtualinvoke $r6.<android.graphics.Matrix: boolean isIdentity()>();

        if $z1 != 0 goto label2;

        virtualinvoke r1.<android.view.View: void transformRect(android.graphics.Rect)>(r2);

     label2:
        $z2 = r3 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label5;

        r5 = (android.view.ViewGroup) r3;

        $i2 = r5.<android.view.ViewGroup: int mLayerType>;

        if $i2 == 0 goto label3;

        virtualinvoke r5.<android.view.ViewGroup: void invalidate()>();

        r3 = null;

        goto label4;

     label3:
        r3 = virtualinvoke r5.<android.view.ViewGroup: android.view.ViewParent damageChildInParent(int,int,android.graphics.Rect)>(i0, i1, r2);

        i0 = r5.<android.view.ViewGroup: int mLeft>;

        i1 = r5.<android.view.ViewGroup: int mTop>;

     label4:
        goto label6;

     label5:
        r7 = r4.<android.view.View$AttachInfo: int[] mInvalidateChildLocation>;

        r7[0] = i0;

        r7[1] = i1;

        r3 = interfaceinvoke r3.<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(r7, r2);

     label6:
        if r3 != null goto label2;

     label7:
        return;
    }

    protected android.view.ViewParent damageChildInParent(int, int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        android.graphics.Rect r1;
        android.graphics.Matrix $r2;
        boolean $z0, $z1;
        android.view.ViewParent $r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $i2 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i3 = $i2 & 32;

        if $i3 != 0 goto label1;

        $i25 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i24 = $i25 & 32768;

        if $i24 == 0 goto label5;

     label1:
        $i4 = r0.<android.view.ViewGroup: int mScrollX>;

        $i7 = i0 - $i4;

        $i5 = r0.<android.view.ViewGroup: int mScrollY>;

        $i6 = i1 - $i5;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i7, $i6);

        $i8 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i9 = $i8 & 1;

        if $i9 != 0 goto label2;

        $i18 = r0.<android.view.ViewGroup: int mRight>;

        $i19 = r0.<android.view.ViewGroup: int mLeft>;

        $i22 = $i18 - $i19;

        $i20 = r0.<android.view.ViewGroup: int mBottom>;

        $i21 = r0.<android.view.ViewGroup: int mTop>;

        $i23 = $i20 - $i21;

        virtualinvoke r1.<android.graphics.Rect: void union(int,int,int,int)>(0, 0, $i22, $i23);

     label2:
        $i10 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i11 = $i10 & 1;

        if $i11 == 0 goto label3;

        $i14 = r0.<android.view.ViewGroup: int mRight>;

        $i12 = r0.<android.view.ViewGroup: int mLeft>;

        $i17 = $i14 - $i12;

        $i16 = r0.<android.view.ViewGroup: int mBottom>;

        $i13 = r0.<android.view.ViewGroup: int mTop>;

        $i15 = $i16 - $i13;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i17, $i15);

        if $z1 == 0 goto label5;

     label3:
        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.graphics.Matrix getMatrix()>();

        $z0 = virtualinvoke $r2.<android.graphics.Matrix: boolean isIdentity()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: void transformRect(android.graphics.Rect)>(r1);

     label4:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        return $r3;

     label5:
        return null;
    }

    public final void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>(r1, r2, 1, 0);

        return;
    }

    public final void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>(r1, r2, 0, 0);

        return;
    }

    void offsetRectBetweenParentAndChild(android.view.View, android.graphics.Rect, boolean, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r4, r6;
        android.graphics.Rect r2;
        boolean z0, z1, $z2;
        android.view.ViewParent r3;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if r1 != r0 goto label1;

        return;

     label1:
        r3 = r1.<android.view.View: android.view.ViewParent mParent>;

     label2:
        if r3 == null goto label6;

        $z2 = r3 instanceof android.view.View;

        if $z2 == 0 goto label6;

        if r3 == r0 goto label6;

        if z0 == 0 goto label3;

        $i24 = r1.<android.view.View: int mLeft>;

        $i23 = r1.<android.view.View: int mScrollX>;

        $i27 = $i24 - $i23;

        $i29 = r1.<android.view.View: int mTop>;

        $i28 = r1.<android.view.View: int mScrollY>;

        $i26 = $i29 - $i28;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i27, $i26);

        if z1 == 0 goto label5;

        r4 = (android.view.View) r3;

        $i33 = r4.<android.view.View: int mRight>;

        $i32 = r4.<android.view.View: int mLeft>;

        $i35 = $i33 - $i32;

        $i31 = r4.<android.view.View: int mBottom>;

        $i30 = r4.<android.view.View: int mTop>;

        $i34 = $i31 - $i30;

        virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i35, $i34);

        goto label5;

     label3:
        if z1 == 0 goto label4;

        r6 = (android.view.View) r3;

        $i20 = r6.<android.view.View: int mRight>;

        $i17 = r6.<android.view.View: int mLeft>;

        $i25 = $i20 - $i17;

        $i22 = r6.<android.view.View: int mBottom>;

        $i19 = r6.<android.view.View: int mTop>;

        $i21 = $i22 - $i19;

        virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i25, $i21);

     label4:
        $i14 = r1.<android.view.View: int mScrollX>;

        $i12 = r1.<android.view.View: int mLeft>;

        $i18 = $i14 - $i12;

        $i16 = r1.<android.view.View: int mScrollY>;

        $i13 = r1.<android.view.View: int mTop>;

        $i15 = $i16 - $i13;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i18, $i15);

     label5:
        r1 = (android.view.View) r3;

        r3 = r1.<android.view.View: android.view.ViewParent mParent>;

        goto label2;

     label6:
        if r3 != r0 goto label8;

        if z0 == 0 goto label7;

        $i7 = r1.<android.view.View: int mLeft>;

        $i6 = r1.<android.view.View: int mScrollX>;

        $i10 = $i7 - $i6;

        $i8 = r1.<android.view.View: int mTop>;

        $i9 = r1.<android.view.View: int mScrollY>;

        $i11 = $i8 - $i9;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i10, $i11);

        goto label9;

     label7:
        $i1 = r1.<android.view.View: int mScrollX>;

        $i0 = r1.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r1.<android.view.View: int mScrollY>;

        $i2 = r1.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i5, $i4);

        goto label9;

     label8:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameter must be a descendant of this view");

        throw $r5;

     label9:
        return;
    }

    public void offsetChildrenTopAndBottom(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.view.View[] r1;
        boolean z0;
        android.view.View r2;
        android.view.RenderNode $r3, $r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        z0 = 0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r2 = r1[i2];

        $i3 = r2.<android.view.View: int mTop>;

        $i4 = $i3 + i0;

        r2.<android.view.View: int mTop> = $i4;

        $i5 = r2.<android.view.View: int mBottom>;

        $i6 = $i5 + i0;

        r2.<android.view.View: int mBottom> = $i6;

        $r3 = r2.<android.view.View: android.view.RenderNode mRenderNode>;

        if $r3 == null goto label2;

        z0 = 1;

        $r4 = r2.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.view.RenderNode: boolean offsetTopAndBottom(int)>(i0);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label4:
        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        return;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;
        android.graphics.Point r3;
        android.graphics.RectF r4, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        float[] r5, $r12;
        android.view.View$AttachInfo $r6, $r10, $r13, $r14;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        android.view.ViewParent $r8, $r9;
        android.graphics.Matrix $r11, $r15;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        $r6 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r6 == null goto label1;

        $r14 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r14.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        goto label2;

     label1:
        $r7 = new android.graphics.RectF;

        specialinvoke $r7.<android.graphics.RectF: void <init>()>();

     label2:
        r4 = $r7;

        virtualinvoke r4.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label3;

        $r15 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r15.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r4);

     label3:
        $i3 = r1.<android.view.View: int mLeft>;

        $i2 = r0.<android.view.ViewGroup: int mScrollX>;

        i0 = $i3 - $i2;

        $i5 = r1.<android.view.View: int mTop>;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        i1 = $i5 - $i4;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r4.<android.graphics.RectF: void offset(float,float)>($f1, $f0);

        if r3 == null goto label7;

        $z3 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label6;

        $r10 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r10 == null goto label4;

        $r13 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r13.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        goto label5;

     label4:
        $r12 = newarray (float)[2];

     label5:
        r5 = $r12;

        $i18 = r3.<android.graphics.Point: int x>;

        $f13 = (float) $i18;

        r5[0] = $f13;

        $i21 = r3.<android.graphics.Point: int y>;

        $f12 = (float) $i21;

        r5[1] = $f12;

        $r11 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r11.<android.graphics.Matrix: void mapPoints(float[])>(r5);

        $f16 = r5[0];

        $f15 = $f16 + 0.5F;

        $i22 = (int) $f15;

        r3.<android.graphics.Point: int x> = $i22;

        $f14 = r5[1];

        $f17 = $f14 + 0.5F;

        $i23 = (int) $f17;

        r3.<android.graphics.Point: int y> = $i23;

     label6:
        $i16 = r3.<android.graphics.Point: int x>;

        $i17 = $i16 + i0;

        r3.<android.graphics.Point: int x> = $i17;

        $i19 = r3.<android.graphics.Point: int y>;

        $i20 = $i19 + i1;

        r3.<android.graphics.Point: int y> = $i20;

     label7:
        $i8 = r0.<android.view.ViewGroup: int mRight>;

        $i6 = r0.<android.view.ViewGroup: int mLeft>;

        $i7 = $i8 - $i6;

        $f3 = (float) $i7;

        $i9 = r0.<android.view.ViewGroup: int mBottom>;

        $i10 = r0.<android.view.ViewGroup: int mTop>;

        $i11 = $i9 - $i10;

        $f2 = (float) $i11;

        $z1 = virtualinvoke r4.<android.graphics.RectF: boolean intersect(float,float,float,float)>(0.0F, 0.0F, $f3, $f2);

        if $z1 == 0 goto label9;

        $r8 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r8 != null goto label8;

        return 1;

     label8:
        $f4 = r4.<android.graphics.RectF: float left>;

        $f6 = $f4 + 0.5F;

        $i13 = (int) $f6;

        $f5 = r4.<android.graphics.RectF: float top>;

        $f8 = $f5 + 0.5F;

        $i15 = (int) $f8;

        $f7 = r4.<android.graphics.RectF: float right>;

        $f10 = $f7 + 0.5F;

        $i14 = (int) $f10;

        $f11 = r4.<android.graphics.RectF: float bottom>;

        $f9 = $f11 + 0.5F;

        $i12 = (int) $f9;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i13, $i15, $i14, $i12);

        $r9 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r9.<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>(r0, r2, r3);

        return $z2;

     label9:
        return 0;
    }

    public final void layout(int, int, int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        boolean $z0, $z1;
        android.animation.LayoutTransition $r1, $r2, $r3, $r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<android.view.ViewGroup: boolean mSuppressLayout>;

        if $z0 != 0 goto label3;

        $r1 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r1 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        $z1 = virtualinvoke $r4.<android.animation.LayoutTransition: boolean isChangingLayout()>();

        if $z1 != 0 goto label3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke $r3.<android.animation.LayoutTransition: void layoutChange(android.view.ViewGroup)>(r0);

     label2:
        specialinvoke r0.<android.view.View: void layout(int,int,int,int)>(i0, i1, i2, i3);

        goto label4;

     label3:
        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 1;

     label4:
        return;
    }

    protected abstract void onLayout(boolean, int, int, int, int);

    protected boolean canAnimate()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void startLayoutAnimation()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        if $r1 == null goto label1;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label1:
        return;
    }

    public void scheduleLayoutAnimation()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        return;
    }

    public void setLayoutAnimation(android.view.animation.LayoutAnimationController)
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController r1, $r2;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.animation.LayoutAnimationController;

        r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController> = r1;

        $r2 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        if $r2 == null goto label1;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label1:
        return;
    }

    public android.view.animation.LayoutAnimationController getLayoutAnimation()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        return $r1;
    }

    public boolean isAnimationCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 64;

        if $i1 != 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setAnimationCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(64, z0);

        return;
    }

    public boolean isAlwaysDrawnWithCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setAlwaysDrawnWithCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(16384, z0);

        return;
    }

    protected boolean isChildrenDrawnWithCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 32768;

        if $i1 != 32768 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void setChildrenDrawnWithCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(32768, z0);

        return;
    }

    protected boolean isChildrenDrawingOrderEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 1024;

        if $i1 != 1024 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void setChildrenDrawingOrderEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(1024, z0);

        return;
    }

    private boolean hasBooleanFlag(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setBooleanFlag(int, boolean)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | i0;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        goto label2;

     label1:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = i0 ^ -1;

        $i3 = $i2 & $i1;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

     label2:
        return;
    }

    public int getPersistentDrawingCache()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        return $i0;
    }

    public void setPersistentDrawingCache(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = i0 & 3;

        r0.<android.view.ViewGroup: int mPersistentDrawingCache> = $i1;

        return;
    }

    private void setLayoutMode(int, boolean)
    {
        android.view.ViewGroup r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewGroup: int mLayoutMode> = i0;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(8388608, z0);

        return;
    }

    void invalidateInheritedLayoutMode(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4;
        boolean $z0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i3 == -1 goto label1;

        $i4 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i4 == i0 goto label1;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(8388608);

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(-1, 0);

        i1 = 0;

        i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

     label3:
        if i1 >= i2 goto label4;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke $r1.<android.view.View: void invalidateInheritedLayoutMode(int)>(i0);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public int getLayoutMode()
    {
        android.view.ViewGroup r0, $r3;
        int i0, $i1, $i2, $i3;
        android.view.ViewParent $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i1 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i1 != -1 goto label3;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r3 = (android.view.ViewGroup) $r2;

        $i3 = virtualinvoke $r3.<android.view.ViewGroup: int getLayoutMode()>();

        goto label2;

     label1:
        $i3 = <android.view.ViewGroup: int LAYOUT_MODE_DEFAULT>;

     label2:
        i0 = $i3;

        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(i0, 0);

     label3:
        $i2 = r0.<android.view.ViewGroup: int mLayoutMode>;

        return $i2;
    }

    public void setLayoutMode(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i1 == i0 goto label3;

        virtualinvoke r0.<android.view.ViewGroup: void invalidateInheritedLayoutMode(int)>(i0);

        if i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(i0, $z0);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label3:
        return;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.view.ViewGroup r0;
        android.util.AttributeSet r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.view.ViewGroup$LayoutParams;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.content.Context getContext()>();

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        return r1;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r1.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

        return $r1;
    }

    protected void debug(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4, $i6;
        java.lang.String r1, r14, r15, r16, r17, r18;
        android.view.View r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13;
        android.view.View[] $r7;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void debug(int)>(i0);

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r3 == null goto label1;

        r1 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFocused");

        r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r14);

     label1:
        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if $i3 == 0 goto label2;

        r15 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r16);

     label2:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        $r7 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r2 = $r7[i2];

        $i6 = i0 + 1;

        virtualinvoke r2.<android.view.View: void debug(int)>($i6);

        i2 = i2 + 1;

        goto label3;

     label4:
        $i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if $i4 == 0 goto label5;

        r17 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r18 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r18);

     label5:
        return;
    }

    public int indexOfChild(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, i1;
        android.view.View[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r2[i1];

        if $r3 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int getChildCount()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        return $i0;
    }

    public android.view.View getChildAt(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        android.view.View[] $r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r2 = $r1[i0];

        return $r2;
    }

    protected void measureChildren(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r2 = r1[i3];

        $i4 = r2.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 12;

        if $i5 == 8 goto label2;

        virtualinvoke r0.<android.view.ViewGroup: void measureChild(android.view.View,int,int)>(r2, i0, i1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    protected void measureChild(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i5 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i4 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i7 = $i5 + $i4;

        $i6 = r2.<android.view.ViewGroup$LayoutParams: int width>;

        i2 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i0, $i7, $i6);

        $i9 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i8 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i11 = $i9 + $i8;

        $i10 = r2.<android.view.ViewGroup$LayoutParams: int height>;

        i3 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i1, $i11, $i10);

        virtualinvoke r1.<android.view.View: void measure(int,int)>(i2, i3);

        return;
    }

    protected void measureChildWithMargins(android.view.View, int, int, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        android.view.ViewGroup$MarginLayoutParams r2;
        android.view.ViewGroup$LayoutParams $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.view.ViewGroup$MarginLayoutParams) $r3;

        $i7 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i6 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i9 = $i7 + $i6;

        $i8 = r2.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        $i11 = $i9 + $i8;

        $i10 = r2.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        $i13 = $i11 + $i10;

        $i14 = $i13 + i1;

        $i12 = r2.<android.view.ViewGroup$MarginLayoutParams: int width>;

        i4 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i0, $i14, $i12);

        $i15 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i16 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i17 = $i15 + $i16;

        $i18 = r2.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        $i19 = $i17 + $i18;

        $i20 = r2.<android.view.ViewGroup$MarginLayoutParams: int bottomMargin>;

        $i22 = $i19 + $i20;

        $i23 = $i22 + i3;

        $i21 = r2.<android.view.ViewGroup$MarginLayoutParams: int height>;

        i5 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i2, $i23, $i21);

        virtualinvoke r1.<android.view.View: void measure(int,int)>(i4, i5);

        return;
    }

    public static int getChildMeasureSpec(int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        $i8 = i4 - i1;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i8);

        i6 = 0;

        i7 = 0;

        lookupswitch(i3)
        {
            case -2147483648: goto label04;
            case 0: goto label07;
            case 1073741824: goto label01;
            default: goto label10;
        };

     label01:
        if i2 < 0 goto label02;

        i6 = i2;

        i7 = 1073741824;

        goto label10;

     label02:
        if i2 != -1 goto label03;

        i6 = i5;

        i7 = 1073741824;

        goto label10;

     label03:
        if i2 != -2 goto label10;

        i6 = i5;

        i7 = -2147483648;

        goto label10;

     label04:
        if i2 < 0 goto label05;

        i6 = i2;

        i7 = 1073741824;

        goto label10;

     label05:
        if i2 != -1 goto label06;

        i6 = i5;

        i7 = -2147483648;

        goto label10;

     label06:
        if i2 != -2 goto label10;

        i6 = i5;

        i7 = -2147483648;

        goto label10;

     label07:
        if i2 < 0 goto label08;

        i6 = i2;

        i7 = 1073741824;

        goto label10;

     label08:
        if i2 != -1 goto label09;

        i6 = 0;

        i7 = 0;

        goto label10;

     label09:
        if i2 != -2 goto label10;

        i6 = 0;

        i7 = 0;

     label10:
        $i9 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i6, i7);

        return $i9;
    }

    public void clearDisappearingChildren()
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.view.View r2;
        java.lang.Object $r3;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewGroup;

        r1 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r1 == null goto label4;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.view.View) $r3;

        $r4 = r2.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label2;

        virtualinvoke r2.<android.view.View: void dispatchDetachedFromWindow()>();

     label2:
        virtualinvoke r2.<android.view.View: void clearAnimation()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label4:
        return;
    }

    private void addDisappearingView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.ArrayList r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren> = $r3;

        r2 = $r3;

     label1:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    void finishAnimatingView(android.view.View, android.view.animation.Animation)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.Animation r2;
        java.util.ArrayList r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.animation.Animation;

        r3 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        virtualinvoke r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r4 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label1;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label1:
        virtualinvoke r1.<android.view.View: void clearAnimation()>();

        $i6 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = $i6 | 4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i7;

     label2:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<android.view.animation.Animation: boolean getFillAfter()>();

        if $z0 != 0 goto label3;

        virtualinvoke r1.<android.view.View: void clearAnimation()>();

     label3:
        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 65536;

        if $i1 != 65536 goto label4;

        virtualinvoke r1.<android.view.View: void onAnimationEnd()>();

        $i2 = r1.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -65537;

        r1.<android.view.View: int mPrivateFlags> = $i3;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

     label4:
        return;
    }

    boolean isViewTransitioning(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void startViewTransition(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        java.util.ArrayList $r3, $r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != r0 goto label2;

        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r3 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews> = $r5;

     label1:
        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void endViewTransition(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.ArrayList r2, $r3, $r4, $r5, $r8, $r9;
        boolean $z1, $z3;
        android.view.View$AttachInfo $r6;
        android.view.ViewParent $r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r3 == null goto label4;

        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        r2 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r2 == null goto label4;

        $z1 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        virtualinvoke r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        if $r5 == null goto label1;

        $r8 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        $z3 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z3 == 0 goto label1;

        $r9 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        virtualinvoke $r9.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        goto label3;

     label1:
        $r6 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r6 == null goto label2;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label2:
        $r7 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r7 == null goto label3;

        r1.<android.view.View: android.view.ViewParent mParent> = null;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label4:
        return;
    }

    public void suppressLayout(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewGroup: boolean mSuppressLayout> = z0;

        if z0 != 0 goto label1;

        $z1 = r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

     label1:
        return;
    }

    public boolean isLayoutSuppressed()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mSuppressLayout>;

        return $z0;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.ViewGroup r0;
        android.graphics.Region r1;
        boolean z0, z1, $z3, $z4, $z5;
        android.view.View[] r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.view.View r3;
        android.view.animation.Animation $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Region;

        $i2 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i3 = $i2 & 512;

        if $i3 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        if z0 == 0 goto label03;

        if r1 != null goto label03;

        return 1;

     label03:
        specialinvoke r0.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        z1 = 1;

        i1 = 0;

     label04:
        if i1 >= i0 goto label07;

        r3 = r2[i1];

        $i4 = r3.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 12;

        if $i5 == 0 goto label05;

        $r4 = virtualinvoke r3.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r4 == null goto label06;

     label05:
        $z4 = virtualinvoke r3.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        if $z4 != 0 goto label06;

        z1 = 0;

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        if z0 != 0 goto label08;

        if z1 == 0 goto label09;

     label08:
        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        return $z3;
    }

    public void requestTransparentRegion(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 512;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>(r0);

     label1:
        return;
    }

    public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsets r1, r3;
        int i0, i1;
        boolean $z0, $z1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsets;

        r3 = specialinvoke r0.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r1);

        $z0 = virtualinvoke r3.<android.view.WindowInsets: boolean isConsumed()>();

        if $z0 != 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        r3 = virtualinvoke $r2.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r3);

        $z1 = virtualinvoke r3.<android.view.WindowInsets: boolean isConsumed()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    public android.view.animation.Animation$AnimationListener getLayoutAnimationListener()
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        return $r1;
    }

    protected void drawableStateChanged()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void drawableStateChanged()>();

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & 65536;

        if $i3 == 0 goto label4;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 8192;

        if $i5 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("addStateFromChildren cannot be enabled if a child has duplicateParentState set to true");

        throw $r3;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $i6 = r2.<android.view.View: int mViewFlags>;

        $i7 = $i6 & 4194304;

        if $i7 == 0 goto label3;

        virtualinvoke r2.<android.view.View: void refreshDrawableState()>();

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void jumpDrawablesToCurrentState()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        android.view.View[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & 65536;

        if $i3 == 0 goto label4;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 8192;

        if $i5 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("addStateFromChildren cannot be enabled if a child has duplicateParentState set to true");

        throw $r3;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $i6 = r2.<android.view.View: int mViewFlags>;

        $i7 = $i6 & 4194304;

        if $i7 == 0 goto label3;

        virtualinvoke r2.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        int[] r1, r2, $r5, r6;
        android.view.View $r3, $r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 8192;

        if $i5 != 0 goto label1;

        $r5 = specialinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>(i0);

        return $r5;

     label1:
        i1 = 0;

        i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label4;

        $r4 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        r1 = virtualinvoke $r4.<android.view.View: int[] getDrawableState()>();

        if r1 == null goto label3;

        $i7 = lengthof r1;

        i1 = i1 + $i7;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $i6 = i0 + i1;

        r6 = specialinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>($i6);

        i8 = 0;

     label5:
        if i8 >= i2 goto label7;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i8);

        r2 = virtualinvoke $r3.<android.view.View: int[] getDrawableState()>();

        if r2 == null goto label6;

        r6 = staticinvoke <android.view.ViewGroup: int[] mergeDrawableStates(int[],int[])>(r6, r2);

     label6:
        i8 = i8 + 1;

        goto label5;

     label7:
        return r6;
    }

    public void setAddStatesFromChildren(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 8192;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -8193;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void refreshDrawableState()>();

        return;
    }

    public boolean addStatesFromChildren()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void childDrawableStateChanged(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void refreshDrawableState()>();

     label1:
        return;
    }

    public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.animation.Animation$AnimationListener;

        r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener> = r1;

        return;
    }

    public void requestTransitionStart(android.animation.LayoutTransition)
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition r1;
        android.view.ViewRootImpl r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.animation.LayoutTransition;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewRootImpl getViewRootImpl()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.ViewRootImpl: void requestTransitionStart(android.animation.LayoutTransition)>(r1);

     label1:
        return;
    }

    public boolean resolveRtlPropertiesIfNeeded()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean resolveLayoutDirection()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveLayoutDirection()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveLayoutDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean resolveTextDirection()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveTextDirection()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isTextDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveTextDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean resolveTextAlignment()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isTextAlignmentInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveTextAlignment()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public void resolvePadding()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolvePadding()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resolvePadding()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void resolveDrawables()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolveDrawables()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resolveDrawables()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resolveLayoutParams()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolveLayoutParams()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke r1.<android.view.View: void resolveLayoutParams()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void resetResolvedLayoutDirection()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedLayoutDirection()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedLayoutDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedTextDirection()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isTextDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedTextDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedTextAlignment()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isTextAlignmentInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedTextAlignment()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedPadding()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedPadding()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedPadding()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void resetResolvedDrawables()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedDrawables()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedDrawables()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        return 1;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return 0;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r0.<android.view.ViewGroup: int mNestedScrollAxes> = i0;

        return;
    }

    public void onStopNestedScroll(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void stopNestedScroll()>();

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, i3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        int[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        return;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        return 0;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return 0;
    }

    public int getNestedScrollAxes()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mNestedScrollAxes>;

        return $i0;
    }

    protected void onSetLayoutParams(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        return;
    }

    public void captureTransitioningViews(java.util.List)
    {
        android.view.ViewGroup r0;
        java.util.List r1;
        int i0, i1, $i2;
        android.view.View r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.List;

        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getVisibility()>();

        if $i2 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransitionGroup()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label4;

     label2:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke r2.<android.view.View: void captureTransitioningViews(java.util.List)>(r1);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public void findNamedViews(java.util.Map)
    {
        android.view.ViewGroup r0;
        java.util.Map r1;
        int i0, i1, $i2;
        android.view.View r2;
        android.view.GhostView $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.Map;

        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getVisibility()>();

        if $i2 == 0 goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.GhostView mGhostView>;

        if $r3 != null goto label1;

        return;

     label1:
        specialinvoke r0.<android.view.View: void findNamedViews(java.util.Map)>(r1);

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke r2.<android.view.View: void findNamedViews(java.util.Map)>(r1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private static android.graphics.Paint getDebugPaint()
    {
        android.graphics.Paint $r0, $r1, $r2, $r3;

        $r0 = <android.view.ViewGroup: android.graphics.Paint sDebugPaint>;

        if $r0 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <android.view.ViewGroup: android.graphics.Paint sDebugPaint> = $r2;

        $r3 = <android.view.ViewGroup: android.graphics.Paint sDebugPaint>;

        virtualinvoke $r3.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

     label1:
        $r1 = <android.view.ViewGroup: android.graphics.Paint sDebugPaint>;

        return $r1;
    }

    private static void drawRect(android.graphics.Canvas, android.graphics.Paint, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r2 = <android.view.ViewGroup: float[] sDebugLines>;

        if $r2 != null goto label1;

        $r20 = newarray (float)[16];

        <android.view.ViewGroup: float[] sDebugLines> = $r20;

     label1:
        $r3 = <android.view.ViewGroup: float[] sDebugLines>;

        $f0 = (float) i0;

        $r3[0] = $f0;

        $r4 = <android.view.ViewGroup: float[] sDebugLines>;

        $f1 = (float) i1;

        $r4[1] = $f1;

        $r5 = <android.view.ViewGroup: float[] sDebugLines>;

        $f2 = (float) i2;

        $r5[2] = $f2;

        $r6 = <android.view.ViewGroup: float[] sDebugLines>;

        $f3 = (float) i1;

        $r6[3] = $f3;

        $r7 = <android.view.ViewGroup: float[] sDebugLines>;

        $f4 = (float) i2;

        $r7[4] = $f4;

        $r8 = <android.view.ViewGroup: float[] sDebugLines>;

        $f5 = (float) i1;

        $r8[5] = $f5;

        $r9 = <android.view.ViewGroup: float[] sDebugLines>;

        $f6 = (float) i2;

        $r9[6] = $f6;

        $r10 = <android.view.ViewGroup: float[] sDebugLines>;

        $f7 = (float) i3;

        $r10[7] = $f7;

        $r11 = <android.view.ViewGroup: float[] sDebugLines>;

        $f8 = (float) i2;

        $r11[8] = $f8;

        $r12 = <android.view.ViewGroup: float[] sDebugLines>;

        $f9 = (float) i3;

        $r12[9] = $f9;

        $r13 = <android.view.ViewGroup: float[] sDebugLines>;

        $f10 = (float) i0;

        $r13[10] = $f10;

        $r14 = <android.view.ViewGroup: float[] sDebugLines>;

        $f11 = (float) i3;

        $r14[11] = $f11;

        $r16 = <android.view.ViewGroup: float[] sDebugLines>;

        $f12 = (float) i0;

        $r16[12] = $f12;

        $r15 = <android.view.ViewGroup: float[] sDebugLines>;

        $f14 = (float) i3;

        $r15[13] = $f14;

        $r19 = <android.view.ViewGroup: float[] sDebugLines>;

        $f13 = (float) i0;

        $r19[14] = $f13;

        $r17 = <android.view.ViewGroup: float[] sDebugLines>;

        $f15 = (float) i1;

        $r17[15] = $f15;

        $r18 = <android.view.ViewGroup: float[] sDebugLines>;

        virtualinvoke r0.<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>($r18, r1);

        return;
    }

    public volatile android.view.ViewOverlay getOverlay()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroupOverlay $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>();

        return $r1;
    }

    static void access$000(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;

        r0 := @parameter0: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void notifyAnimationListener()>();

        return;
    }

    static android.view.animation.LayoutAnimationController access$100(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        return $r1;
    }

    static android.view.animation.Animation$AnimationListener access$200(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        return $r1;
    }

    static boolean access$300(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed>;

        return $z0;
    }

    static boolean access$302(android.view.ViewGroup, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewGroup;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = z0;

        return z0;
    }

    static java.util.ArrayList access$400(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        return $r1;
    }

    static void access$500(android.graphics.Canvas, int, int, int, int, int, int, int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        r1 := @parameter9: android.graphics.Paint;

        staticinvoke <android.view.ViewGroup: void fillDifference(android.graphics.Canvas,int,int,int,int,int,int,int,int,android.graphics.Paint)>(r0, i0, i1, i2, i3, i4, i5, i6, i7, r1);

        return;
    }

    static void <clinit>()
    {
        int[] $r0;

        <android.view.ViewGroup: int ARRAY_CAPACITY_INCREMENT> = 12;

        <android.view.ViewGroup: int ARRAY_INITIAL_CAPACITY> = 12;

        <android.view.ViewGroup: int CHILD_TOP_INDEX> = 1;

        <android.view.ViewGroup: int CHILD_LEFT_INDEX> = 0;

        <android.view.ViewGroup: int CLIP_TO_PADDING_MASK> = 34;

        <android.view.ViewGroup: int LAYOUT_MODE_OPTICAL_BOUNDS> = 1;

        <android.view.ViewGroup: int LAYOUT_MODE_CLIP_BOUNDS> = 0;

        <android.view.ViewGroup: int LAYOUT_MODE_UNDEFINED> = -1;

        <android.view.ViewGroup: int PERSISTENT_ALL_CACHES> = 3;

        <android.view.ViewGroup: int PERSISTENT_SCROLLING_CACHE> = 2;

        <android.view.ViewGroup: int PERSISTENT_ANIMATION_CACHE> = 1;

        <android.view.ViewGroup: int PERSISTENT_NO_CACHE> = 0;

        <android.view.ViewGroup: int FLAG_TOUCHSCREEN_BLOCKS_FOCUS> = 67108864;

        <android.view.ViewGroup: int FLAG_IS_TRANSITION_GROUP_SET> = 33554432;

        <android.view.ViewGroup: int FLAG_IS_TRANSITION_GROUP> = 16777216;

        <android.view.ViewGroup: int FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET> = 8388608;

        <android.view.ViewGroup: int FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW> = 4194304;

        <android.view.ViewGroup: int FLAG_SPLIT_MOTION_EVENTS> = 2097152;

        <android.view.ViewGroup: int FLAG_DISALLOW_INTERCEPT> = 524288;

        <android.view.ViewGroup: int FOCUS_BLOCK_DESCENDANTS> = 393216;

        <android.view.ViewGroup: int FOCUS_AFTER_DESCENDANTS> = 262144;

        <android.view.ViewGroup: int FOCUS_BEFORE_DESCENDANTS> = 131072;

        <android.view.ViewGroup: int FLAG_MASK_FOCUSABILITY> = 393216;

        <android.view.ViewGroup: int FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE> = 65536;

        <android.view.ViewGroup: int FLAG_CHILDREN_DRAWN_WITH_CACHE> = 32768;

        <android.view.ViewGroup: int FLAG_ALWAYS_DRAWN_WITH_CACHE> = 16384;

        <android.view.ViewGroup: int FLAG_ADD_STATES_FROM_CHILDREN> = 8192;

        <android.view.ViewGroup: int FLAG_SUPPORT_STATIC_TRANSFORMATIONS> = 2048;

        <android.view.ViewGroup: int FLAG_USE_CHILD_DRAWING_ORDER> = 1024;

        <android.view.ViewGroup: int FLAG_NOTIFY_ANIMATION_LISTENER> = 512;

        <android.view.ViewGroup: int FLAG_CLEAR_TRANSFORMATION> = 256;

        <android.view.ViewGroup: int FLAG_OPTIMIZE_INVALIDATE> = 128;

        <android.view.ViewGroup: int FLAG_ANIMATION_CACHE> = 64;

        <android.view.ViewGroup: int FLAG_PADDING_NOT_NULL> = 32;

        <android.view.ViewGroup: int FLAG_ANIMATION_DONE> = 16;

        <android.view.ViewGroup: int FLAG_RUN_ANIMATION> = 8;

        <android.view.ViewGroup: int FLAG_INVALIDATE_REQUIRED> = 4;

        <android.view.ViewGroup: int FLAG_CLIP_TO_PADDING> = 2;

        <android.view.ViewGroup: int FLAG_CLIP_CHILDREN> = 1;

        <android.view.ViewGroup: boolean DBG> = 0;

        <android.view.ViewGroup: java.lang.String TAG> = "ViewGroup";

        <android.view.ViewGroup: boolean DEBUG_DRAW> = 0;

        $r0 = newarray (int)[3];

        $r0[0] = 131072;

        $r0[1] = 262144;

        $r0[2] = 393216;

        <android.view.ViewGroup: int[] DESCENDANT_FOCUSABILITY_FLAGS> = $r0;

        <android.view.ViewGroup: int LAYOUT_MODE_DEFAULT> = 0;

        return;
    }
}
