public final class android.app.UiAutomation extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final boolean DEBUG;
    private static final int CONNECTION_ID_UNDEFINED;
    private static final long CONNECT_TIMEOUT_MILLIS;
    public static final int ROTATION_UNFREEZE;
    public static final int ROTATION_FREEZE_CURRENT;
    public static final int ROTATION_FREEZE_0;
    public static final int ROTATION_FREEZE_90;
    public static final int ROTATION_FREEZE_180;
    public static final int ROTATION_FREEZE_270;
    private final java.lang.Object mLock;
    private final java.util.ArrayList mEventQueue;
    private final android.accessibilityservice.IAccessibilityServiceClient mClient;
    private final android.app.IUiAutomationConnection mUiAutomationConnection;
    private int mConnectionId;
    private android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener;
    private boolean mWaitingForEventDelivery;
    private long mLastEventTimeMillis;
    private boolean mIsConnecting;

    public void <init>(android.os.Looper, android.app.IUiAutomationConnection)
    {
        android.app.UiAutomation r0;
        android.os.Looper r1;
        android.app.IUiAutomationConnection r2;
        java.lang.Object $r3;
        java.util.ArrayList $r4;
        android.app.UiAutomation$IAccessibilityServiceClientImpl $r5;
        java.lang.IllegalArgumentException $r6, $r7;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.app.IUiAutomationConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.app.UiAutomation: java.lang.Object mLock> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue> = $r4;

        r0.<android.app.UiAutomation: int mConnectionId> = -1;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Looper cannot be null!");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection cannot be null!");

        throw $r6;

     label2:
        r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection> = r2;

        $r5 = new android.app.UiAutomation$IAccessibilityServiceClientImpl;

        specialinvoke $r5.<android.app.UiAutomation$IAccessibilityServiceClientImpl: void <init>(android.app.UiAutomation,android.os.Looper)>(r0, r1);

        r0.<android.app.UiAutomation: android.accessibilityservice.IAccessibilityServiceClient mClient> = $r5;

        return;
    }

    public void connect()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r6, $r9, $r10, r19;
        java.lang.Throwable r2, r4, r5, $r15, $r16, $r17;
        long l0, l1, $l2, l4;
        boolean $z0, $z1;
        android.accessibilityservice.IAccessibilityServiceClient $r7;
        android.app.IUiAutomationConnection $r8;
        byte $b3;
        java.lang.RuntimeException $r11, $r13;
        java.lang.InterruptedException $r12;
        android.os.RemoteException $r14, r18;

        r0 := @this: android.app.UiAutomation;

        $r6 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfConnectedLocked()>();

        $z0 = r0.<android.app.UiAutomation: boolean mIsConnecting>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 1;

        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r15 := @caughtexception;

        r2 = $r15;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        $r8 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $r7 = r0.<android.app.UiAutomation: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        interfaceinvoke $r8.<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)>($r7);

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        r18 = $r14;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error while connecting UiAutomation", r18);

        throw $r13;

     label10:
        $r9 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r19 = $r9;

        entermonitor $r9;

     label11:
        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label12:
        $z1 = specialinvoke r0.<android.app.UiAutomation: boolean isConnectedLocked()>();

        if $z1 == 0 goto label13;

        goto label18;

     label13:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l0 = $l2 - l4;

        l1 = 5000L - l0;

        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label14;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error while connecting UiAutomation");

        throw $r11;

     label14:
        $r10 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r10.<java.lang.Object: void wait(long)>(l1);

     label15:
        goto label17;

     label16:
        $r12 := @caughtexception;

     label17:
        goto label12;

     label18:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 0;

        goto label21;

     label19:
        $r16 := @caughtexception;

        r4 = $r16;

     label20:
        r0.<android.app.UiAutomation: boolean mIsConnecting> = 0;

        throw r4;

     label21:
        exitmonitor r19;

     label22:
        goto label25;

     label23:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r19;

     label24:
        throw r5;

     label25:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.InterruptedException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label11 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void disconnect()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        android.app.IUiAutomationConnection $r4;
        java.lang.IllegalStateException $r5;
        android.os.RemoteException $r6, r9;
        java.lang.RuntimeException $r7;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<android.app.UiAutomation: boolean mIsConnecting>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call disconnect() while connecting!");

        throw $r5;

     label2:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        r0.<android.app.UiAutomation: int mConnectionId> = -1;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void disconnect()>();

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error while disconnecting UiAutomation", r9);

        throw $r7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public int getConnectionId()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener)
    {
        android.app.UiAutomation r0;
        android.app.UiAutomation$OnAccessibilityEventListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: android.app.UiAutomation$OnAccessibilityEventListener;

        $r4 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<android.app.UiAutomation: android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean performGlobalAction(int)
    {
        android.app.UiAutomation r0;
        int i0, $i1;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        android.view.accessibility.AccessibilityInteractionClient $r5;
        boolean $z0;
        android.os.RemoteException $r7, r9;
        java.lang.String $r8;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r4 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r5 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i1 = r0.<android.app.UiAutomation: int mConnectionId>;

        r1 = virtualinvoke $r5.<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r1 == null goto label9;

     label6:
        $z0 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: boolean performGlobalAction(int)>(i0);

     label7:
        return $z0;

     label8:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Error while calling performGlobalAction", r9);

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public android.view.accessibility.AccessibilityNodeInfo findFocus(int)
    {
        android.app.UiAutomation r0;
        int i0, $i2;
        android.view.accessibility.AccessibilityInteractionClient $r1;
        long $l1;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i2 = r0.<android.app.UiAutomation: int mConnectionId>;

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findFocus(int,int,long,int)>($i2, -2, $l1, i0);

        return $r2;
    }

    public final android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()
    {
        android.app.UiAutomation r0;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        android.view.accessibility.AccessibilityInteractionClient $r5;
        int $i0;
        android.accessibilityservice.AccessibilityServiceInfo $r6;
        android.os.RemoteException $r8, r10;
        java.lang.String $r9;

        r0 := @this: android.app.UiAutomation;

        $r4 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r5 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        r1 = virtualinvoke $r5.<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r1 == null goto label9;

     label6:
        $r6 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

     label7:
        return $r6;

     label8:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Error while getting AccessibilityServiceInfo", r10);

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public final void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
    {
        android.app.UiAutomation r0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.accessibilityservice.IAccessibilityServiceConnection r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r10;
        android.view.accessibility.AccessibilityInteractionClient $r6, $r7;
        int $i0;
        android.os.RemoteException $r8, r11;
        java.lang.String $r9;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: android.accessibilityservice.AccessibilityServiceInfo;

        $r5 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r6 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        virtualinvoke $r6.<android.view.accessibility.AccessibilityInteractionClient: void clearCache()>();

        $r7 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        r2 = virtualinvoke $r7.<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>($i0);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        if r2 == null goto label9;

     label6:
        interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceConnection: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        r11 = $r8;

        $r9 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Error while setting AccessibilityServiceInfo", r11);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public java.util.List getWindows()
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.view.accessibility.AccessibilityInteractionClient $r4;
        java.util.List $r5;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r5 = virtualinvoke $r4.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getWindows(int)>(i0);

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.view.accessibility.AccessibilityInteractionClient $r4;
        android.view.accessibility.AccessibilityNodeInfo $r5;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>();

        $r5 = virtualinvoke $r4.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>(i0);

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        android.app.UiAutomation r0;
        android.view.InputEvent r1;
        boolean z0, $z1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        android.app.IUiAutomationConnection $r5;
        android.os.RemoteException $r7, r9;
        java.lang.String $r8;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        $r4 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r5 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $z1 = interfaceinvoke $r5.<android.app.IUiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean)>(r1, z0);

     label6:
        return $z1;

     label7:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Error while injecting input event!", r9);

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public boolean setRotation(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.app.IUiAutomationConnection $r4;
        java.lang.IllegalArgumentException $r5;
        android.os.RemoteException $r7, r9;
        java.lang.String $r8;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        tableswitch(i0)
        {
            case -2: goto label6;
            case -1: goto label6;
            case 0: goto label6;
            case 1: goto label6;
            case 2: goto label6;
            case 3: goto label6;
            default: goto label9;
        };

     label6:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: boolean setRotation(int)>(i0);

     label7:
        return 1;

     label8:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Error while setting rotation!", r9);

        return 0;

     label9:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid rotation.");

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable, android.app.UiAutomation$AccessibilityEventFilter, long) throws java.util.concurrent.TimeoutException
    {
        android.app.UiAutomation r0;
        java.lang.Runnable r1;
        android.app.UiAutomation$AccessibilityEventFilter r2;
        long l0, l1, l2, $l3, $l5, l7, l8;
        java.lang.Object r3, r5, $r10, $r13, $r15, $r21, $r27, $r29;
        java.lang.Throwable r4, r9, r11, $r25, $r30, $r31;
        android.view.accessibility.AccessibilityEvent r6, r7;
        java.util.ArrayList $r12, $r14, $r20, $r24, $r26;
        boolean $z0, $z1;
        byte $b4, $b6;
        java.lang.StringBuilder $r16, $r18, $r19, $r22;
        java.util.concurrent.TimeoutException $r17;
        java.lang.String $r23;
        java.lang.InterruptedException $r28;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: android.app.UiAutomation$AccessibilityEventFilter;

        l0 := @parameter2: long;

        $r10 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r3 = $r10;

        entermonitor $r10;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        $r12 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r12.<java.util.ArrayList: void clear()>();

        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 1;

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r30 := @caughtexception;

        r4 = $r30;

        exitmonitor r3;

     label04:
        throw r4;

     label05:
        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        $r13 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r5 = $r13;

        entermonitor $r13;

     label06:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label07:
        $r14 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        $z0 = virtualinvoke $r14.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label12;

        $r20 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        $r21 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r6 = (android.view.accessibility.AccessibilityEvent) $r21;

        $l5 = virtualinvoke r6.<android.view.accessibility.AccessibilityEvent: long getEventTime()>();

        $b6 = $l5 cmp l7;

        if $b6 >= 0 goto label08;

        goto label07;

     label08:
        $z1 = interfaceinvoke r2.<android.app.UiAutomation$AccessibilityEventFilter: boolean accept(android.view.accessibility.AccessibilityEvent)>(r6);

        if $z1 == 0 goto label11;

        r7 = r6;

     label09:
        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 0;

        $r24 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r24.<java.util.ArrayList: void clear()>();

        $r27 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r27.<java.lang.Object: void notifyAll()>();

        exitmonitor r5;

     label10:
        return r7;

     label11:
        virtualinvoke r6.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        goto label07;

     label12:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l8 = $l3 - l1;

        l2 = l0 - l8;

        $b4 = l2 cmp 0L;

        if $b4 > 0 goto label13;

        $r17 = new java.util.concurrent.TimeoutException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected event not received within: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label13:
        $r15 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r15.<java.lang.Object: void wait(long)>(l2);

     label14:
        goto label16;

     label15:
        $r28 := @caughtexception;

     label16:
        goto label07;

     label17:
        $r25 := @caughtexception;

        r9 = $r25;

     label18:
        r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery> = 0;

        $r26 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        virtualinvoke $r26.<java.util.ArrayList: void clear()>();

        $r29 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r29.<java.lang.Object: void notifyAll()>();

        throw r9;

     label19:
        $r31 := @caughtexception;

        r11 = $r31;

        exitmonitor r5;

     label20:
        throw r11;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label06 to label09 with label17;
        catch java.lang.Throwable from label11 to label18 with label17;
        catch java.lang.Throwable from label06 to label10 with label19;
        catch java.lang.Throwable from label11 to label20 with label19;
    }

    public void waitForIdle(long, long) throws java.util.concurrent.TimeoutException
    {
        android.app.UiAutomation r0;
        long l0, l1, l2, l3, l4, l5, l6, l7, $l9, $l12;
        java.lang.Object r1, $r4, $r5;
        java.lang.Throwable r2, $r12;
        byte $b8, $b10, $b11;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;
        java.util.concurrent.TimeoutException $r7;
        java.lang.String $r13;
        java.lang.InterruptedException $r14;

        r0 := @this: android.app.UiAutomation;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r4 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l9 = r0.<android.app.UiAutomation: long mLastEventTimeMillis>;

        $b8 = $l9 cmp 0L;

        if $b8 > 0 goto label02;

        r0.<android.app.UiAutomation: long mLastEventTimeMillis> = l2;

     label02:
        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l4 = l3 - l2;

        l5 = l1 - l4;

        $b10 = l5 cmp 0L;

        if $b10 > 0 goto label03;

        $r7 = new java.util.concurrent.TimeoutException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No idle state with idle timeout: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" within global timeout: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label03:
        $l12 = r0.<android.app.UiAutomation: long mLastEventTimeMillis>;

        l6 = l3 - $l12;

        l7 = l0 - l6;

        $b11 = l7 cmp 0L;

        if $b11 > 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $r5 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        virtualinvoke $r5.<java.lang.Object: void wait(long)>(l7);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        goto label02;

     label09:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label10 with label09;
    }

    public android.graphics.Bitmap takeScreenshot()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r18;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.os.RemoteException r3, $r16;
        android.graphics.Canvas r4, $r10;
        android.hardware.display.DisplayManagerGlobal $r6;
        android.graphics.Point $r7, r20;
        android.app.IUiAutomationConnection $r8;
        android.graphics.Bitmap$Config $r9;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r14, $r15;
        java.lang.String $r13, $r17;
        android.view.Display r19;
        android.graphics.Bitmap r21, r22;

        r0 := @this: android.app.UiAutomation;

        $r5 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r18 := @caughtexception;

        r2 = $r18;

        exitmonitor r1;

     label04:
        throw r2;

     label05:
        $r6 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r19 = virtualinvoke $r6.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        $r7 = new android.graphics.Point;

        specialinvoke $r7.<android.graphics.Point: void <init>()>();

        r20 = $r7;

        virtualinvoke r19.<android.view.Display: void getRealSize(android.graphics.Point)>(r20);

        i0 = r20.<android.graphics.Point: int x>;

        i1 = r20.<android.graphics.Point: int y>;

        i2 = virtualinvoke r19.<android.view.Display: int getRotation()>();

        tableswitch(i2)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        f0 = (float) i0;

        f1 = (float) i1;

        goto label11;

     label07:
        f0 = (float) i1;

        f1 = (float) i0;

        goto label11;

     label08:
        f0 = (float) i0;

        f1 = (float) i1;

        goto label11;

     label09:
        f0 = (float) i1;

        f1 = (float) i0;

        goto label11;

     label10:
        $r11 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid rotation: ");

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label11:
        $r8 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $i4 = (int) f0;

        $i3 = (int) f1;

        r21 = interfaceinvoke $r8.<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(int,int)>($i4, $i3);

        if r21 != null goto label13;

     label12:
        return null;

     label13:
        goto label15;

     label14:
        $r16 := @caughtexception;

        r3 = $r16;

        $r17 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r17, "Error while taking screnshot!", r3);

        return null;

     label15:
        if i2 == 0 goto label16;

        $r9 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r22 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, $r9);

        $r10 = new android.graphics.Canvas;

        specialinvoke $r10.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r22);

        r4 = $r10;

        $i6 = virtualinvoke r22.<android.graphics.Bitmap: int getWidth()>();

        $i5 = $i6 / 2;

        $f2 = (float) $i5;

        $i7 = virtualinvoke r22.<android.graphics.Bitmap: int getHeight()>();

        $i8 = $i7 / 2;

        $f3 = (float) $i8;

        virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f2, $f3);

        $f5 = staticinvoke <android.app.UiAutomation: float getDegreesForRotation(int)>(i2);

        virtualinvoke r4.<android.graphics.Canvas: void rotate(float)>($f5);

        $f4 = neg f0;

        $f6 = $f4 / 2.0F;

        $f7 = neg f1;

        $f8 = $f7 / 2.0F;

        virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f6, $f8);

        virtualinvoke r4.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r21, 0.0F, 0.0F, null);

        virtualinvoke r4.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        virtualinvoke r21.<android.graphics.Bitmap: void recycle()>();

        r21 = r22;

     label16:
        virtualinvoke r21.<android.graphics.Bitmap: void setHasAlpha(boolean)>(0);

        return r21;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.os.RemoteException from label11 to label12 with label14;
    }

    public void setRunAsMonkey(boolean)
    {
        android.app.UiAutomation r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.app.IActivityManager $r4;
        android.os.RemoteException $r6, r8;
        java.lang.String $r7;

        r0 := @this: android.app.UiAutomation;

        z0 := @parameter0: boolean;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r4.<android.app.IActivityManager: void setUserIsMonkey(boolean)>(z0);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error while setting run as monkey!", r8);

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public boolean clearWindowContentFrameStats(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.app.IUiAutomationConnection $r4;
        boolean $z0;
        android.os.RemoteException $r6, r8;
        java.lang.String $r7;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $z0 = interfaceinvoke $r4.<android.app.IUiAutomationConnection: boolean clearWindowContentFrameStats(int)>(i0);

     label6:
        return $z0;

     label7:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error clearing window content frame stats!", r8);

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(int)
    {
        android.app.UiAutomation r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        android.app.IUiAutomationConnection $r4;
        android.view.WindowContentFrameStats $r5;
        android.os.RemoteException $r6, r9;
        java.lang.String $r7;

        r0 := @this: android.app.UiAutomation;

        i0 := @parameter0: int;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $r5 = interfaceinvoke $r4.<android.app.IUiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>(i0);

     label6:
        return $r5;

     label7:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error getting window content frame stats!", r9);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void clearWindowAnimationFrameStats()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.app.IUiAutomationConnection $r4;
        android.os.RemoteException $r6, r8;
        java.lang.String $r7;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r4.<android.app.IUiAutomationConnection: void clearWindowAnimationFrameStats()>();

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Error clearing window animation frame stats!", r8);

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()
    {
        android.app.UiAutomation r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.app.IUiAutomationConnection $r4;
        android.view.WindowAnimationFrameStats $r5;
        android.os.RemoteException $r7, r9;
        java.lang.String $r8;

        r0 := @this: android.app.UiAutomation;

        $r3 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        $r5 = interfaceinvoke $r4.<android.app.IUiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>();

     label6:
        return $r5;

     label7:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Error getting window animation frame stats!", r9);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)
    {
        android.app.UiAutomation r0;
        java.lang.String r1, $r9, $r11;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, r5, $r12, $r13;
        android.os.ParcelFileDescriptor[] r4;
        android.app.IUiAutomationConnection $r7;
        java.io.IOException $r8, r16;
        android.os.RemoteException $r10, r17;
        android.os.ParcelFileDescriptor r14, r15;

        r0 := @this: android.app.UiAutomation;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        specialinvoke r0.<android.app.UiAutomation: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        r14 = null;

        r15 = null;

     label06:
        r4 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

        r14 = r4[0];

        r15 = r4[1];

        $r7 = r0.<android.app.UiAutomation: android.app.IUiAutomationConnection mUiAutomationConnection>;

        interfaceinvoke $r7.<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor)>(r1, r15);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        goto label14;

     label08:
        $r8 := @caughtexception;

        r16 = $r8;

        $r9 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Error executing shell command!", r16);

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        goto label14;

     label10:
        $r10 := @caughtexception;

        r17 = $r10;

        $r11 = <android.app.UiAutomation: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Error executing shell command!", r17);

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        goto label14;

     label12:
        $r13 := @caughtexception;

        r5 = $r13;

     label13:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        throw r5;

     label14:
        return r14;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.io.IOException from label06 to label07 with label08;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static float getDegreesForRotation(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        return 270.0F;

     label2:
        return 180.0F;

     label3:
        return 90.0F;

     label4:
        return 0.0F;
    }

    private boolean isConnectedLocked()
    {
        android.app.UiAutomation r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.app.UiAutomation;

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void throwIfConnectedLocked()
    {
        android.app.UiAutomation r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomation;

        $i0 = r0.<android.app.UiAutomation: int mConnectionId>;

        if $i0 == -1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UiAutomation not connected!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfNotConnectedLocked()
    {
        android.app.UiAutomation r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomation;

        $z0 = specialinvoke r0.<android.app.UiAutomation: boolean isConnectedLocked()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("UiAutomation not connected!");

        throw $r1;

     label1:
        return;
    }

    static java.lang.Object access$000(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: java.lang.Object mLock>;

        return $r1;
    }

    static int access$102(android.app.UiAutomation, int)
    {
        android.app.UiAutomation r0;
        int i0;

        r0 := @parameter0: android.app.UiAutomation;

        i0 := @parameter1: int;

        r0.<android.app.UiAutomation: int mConnectionId> = i0;

        return i0;
    }

    static long access$202(android.app.UiAutomation, long)
    {
        android.app.UiAutomation r0;
        long l0;

        r0 := @parameter0: android.app.UiAutomation;

        l0 := @parameter1: long;

        r0.<android.app.UiAutomation: long mLastEventTimeMillis> = l0;

        return l0;
    }

    static boolean access$300(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        boolean $z0;

        r0 := @parameter0: android.app.UiAutomation;

        $z0 = r0.<android.app.UiAutomation: boolean mWaitingForEventDelivery>;

        return $z0;
    }

    static java.util.ArrayList access$400(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: java.util.ArrayList mEventQueue>;

        return $r1;
    }

    static android.app.UiAutomation$OnAccessibilityEventListener access$500(android.app.UiAutomation)
    {
        android.app.UiAutomation r0;
        android.app.UiAutomation$OnAccessibilityEventListener $r1;

        r0 := @parameter0: android.app.UiAutomation;

        $r1 = r0.<android.app.UiAutomation: android.app.UiAutomation$OnAccessibilityEventListener mOnAccessibilityEventListener>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.app.UiAutomation: int ROTATION_FREEZE_270> = 3;

        <android.app.UiAutomation: int ROTATION_FREEZE_180> = 2;

        <android.app.UiAutomation: int ROTATION_FREEZE_90> = 1;

        <android.app.UiAutomation: int ROTATION_FREEZE_0> = 0;

        <android.app.UiAutomation: int ROTATION_FREEZE_CURRENT> = -1;

        <android.app.UiAutomation: int ROTATION_UNFREEZE> = -2;

        <android.app.UiAutomation: long CONNECT_TIMEOUT_MILLIS> = 5000L;

        <android.app.UiAutomation: int CONNECTION_ID_UNDEFINED> = -1;

        <android.app.UiAutomation: boolean DEBUG> = 0;

        $r0 = class "android/app/UiAutomation";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.app.UiAutomation: java.lang.String LOG_TAG> = $r1;

        return;
    }
}
