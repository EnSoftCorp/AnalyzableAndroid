public final class android.net.IpPrefix extends java.lang.Object implements android.os.Parcelable
{
    private final byte[] address;
    private final int prefixLength;
    public static final android.os.Parcelable$Creator CREATOR;

    private void checkAndMaskAddressAndPrefixLength()
    {
        android.net.IpPrefix r0;
        byte[] $r1, $r2, $r3, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $i0 = lengthof $r1;

        if $i0 == 4 goto label1;

        $r3 = r0.<android.net.IpPrefix: byte[] address>;

        $i2 = lengthof $r3;

        if $i2 == 16 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IpPrefix has ");

        $r7 = r0.<android.net.IpPrefix: byte[] address>;

        $i3 = lengthof $r7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes which is neither 4 nor 16");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>($r2, $i1);

        return;
    }

    public void <init>(byte[], int)
    {
        android.net.IpPrefix r0;
        byte[] r1, $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        r0.<android.net.IpPrefix: byte[] address> = $r3;

        r0.<android.net.IpPrefix: int prefixLength> = i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    public void <init>(java.net.InetAddress, int)
    {
        android.net.IpPrefix r0;
        java.net.InetAddress r1;
        int i0;
        byte[] $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.IpPrefix: byte[] address> = $r2;

        r0.<android.net.IpPrefix: int prefixLength> = i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        android.net.IpPrefix r0;
        java.lang.String r1;
        android.util.Pair r2;
        java.lang.Object $r3, $r6;
        java.net.InetAddress $r4;
        byte[] $r5;
        java.lang.Integer $r7;
        int $i0;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = staticinvoke <android.net.NetworkUtils: android.util.Pair parseIpAndMask(java.lang.String)>(r1);

        $r3 = r2.<android.util.Pair: java.lang.Object first>;

        $r4 = (java.net.InetAddress) $r3;

        $r5 = virtualinvoke $r4.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.IpPrefix: byte[] address> = $r5;

        $r6 = r2.<android.util.Pair: java.lang.Object second>;

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r0.<android.net.IpPrefix: int prefixLength> = $i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.IpPrefix r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        byte[] $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.net.IpPrefix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.net.IpPrefix) r1;

        $r4 = r0.<android.net.IpPrefix: byte[] address>;

        $r3 = r2.<android.net.IpPrefix: byte[] address>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        if $z1 == 0 goto label2;

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        $i0 = r2.<android.net.IpPrefix: int prefixLength>;

        if $i1 != $i0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        android.net.IpPrefix r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        $i2 = 11 * $i1;

        $i3 = $i0 + $i2;

        return $i3;
    }

    public java.net.InetAddress getAddress()
    {
        android.net.IpPrefix r0;
        byte[] $r2;
        java.net.InetAddress $r3;
        java.net.UnknownHostException $r4;

        r0 := @this: android.net.IpPrefix;

     label1:
        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public byte[] getRawAddress()
    {
        android.net.IpPrefix r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int getPrefixLength()
    {
        android.net.IpPrefix r0;
        int $i0;

        r0 := @this: android.net.IpPrefix;

        $i0 = r0.<android.net.IpPrefix: int prefixLength>;

        return $i0;
    }

    public java.lang.String toString()
    {
        android.net.IpPrefix r0;
        java.net.UnknownHostException r1, $r10;
        java.lang.StringBuilder $r2, $r6, $r7, $r8;
        byte[] $r3;
        java.net.InetAddress $r4;
        java.lang.String $r5, $r9;
        int $i0;
        java.lang.IllegalStateException $r11;

        r0 := @this: android.net.IpPrefix;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<android.net.IpPrefix: byte[] address>;

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r3);

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = r0.<android.net.IpPrefix: int prefixLength>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("IpPrefix with invalid address! Shouldn\'t happen.", r1);

        throw $r11;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public int describeContents()
    {
        android.net.IpPrefix r0;

        r0 := @this: android.net.IpPrefix;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.IpPrefix r0;
        android.os.Parcel r1;
        int i0, $i1;
        byte[] $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>($r2);

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }

    static void <clinit>()
    {
        android.net.IpPrefix$1 $r0;

        $r0 = new android.net.IpPrefix$1;

        specialinvoke $r0.<android.net.IpPrefix$1: void <init>()>();

        <android.net.IpPrefix: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
}
