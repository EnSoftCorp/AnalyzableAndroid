public class android.ddm.DdmHandleHello extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_HELO;
    public static final int CHUNK_WAIT;
    public static final int CHUNK_FEAT;
    private static android.ddm.DdmHandleHello mInstance;
    private static final java.lang.String[] FRAMEWORK_FEATURES;

    private void <init>()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        specialinvoke r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    public static void register()
    {
        android.ddm.DdmHandleHello $r0, $r1;
        int $i0, $i1;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        $r0 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        $r1 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i1, $r1);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r8, $r9;
        int i0, $i1, $i2;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 = r1.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        if i0 != $i1 goto label1;

        $r9 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r9;

     label1:
        $i2 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        if i0 != $i2 goto label2;

        $r8 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r8;

     label2:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r5 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, r12, $r28;
        java.nio.ByteBuffer r2, r11;
        java.lang.String r3, r4, r5, r6, r8, r9, r10, $r33, $r36;
        dalvik.system.VMRuntime r7;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r30, $r31, $r32, $r34, $r35;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.nio.ByteOrder $r20;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r2 = staticinvoke <android.ddm.DdmHandleHello: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.name", "?");

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.version", "?");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <android.ddm.DdmHandleAppName: java.lang.String getAppName()>();

        r7 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z0 = virtualinvoke r7.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z0 == 0 goto label1;

        $r36 = "64-bit";

        goto label2;

     label1:
        $r36 = "32-bit";

     label2:
        r8 = $r36;

        r9 = virtualinvoke r7.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        if r9 == null goto label3;

        $i20 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i20 <= 0 goto label3;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r30 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r8 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CheckJNI=");

        $z1 = virtualinvoke r7.<dalvik.system.VMRuntime: boolean isCheckJniEnabled()>();

        if $z1 == 0 goto label4;

        $r33 = "true";

        goto label5;

     label4:
        $r33 = "false";

     label5:
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        r10 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        $i1 = $i3 * 2;

        $i2 = 28 + $i1;

        $i6 = virtualinvoke r6.<java.lang.String: int length()>();

        $i7 = $i6 * 2;

        $i4 = $i2 + $i7;

        $i5 = virtualinvoke r8.<java.lang.String: int length()>();

        $i10 = $i5 * 2;

        $i11 = $i4 + $i10;

        $i8 = virtualinvoke r10.<java.lang.String: int length()>();

        $i9 = $i8 * 2;

        $i12 = $i11 + $i9;

        r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i12);

        $r20 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r20);

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1);

        $i14 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i14);

        $i13 = virtualinvoke r5.<java.lang.String: int length()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i13);

        $i16 = virtualinvoke r6.<java.lang.String: int length()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i16);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r11, r5);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r11, r6);

        $i15 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i15);

        $i18 = virtualinvoke r8.<java.lang.String: int length()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i18);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r11, r8);

        $i17 = virtualinvoke r10.<java.lang.String: int length()>();

        virtualinvoke r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i17);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r11, r10);

        $r28 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i19 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        specialinvoke $r28.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i19, r11);

        r12 = $r28;

        $z2 = staticinvoke <android.os.Debug: boolean waitingForDebugger()>();

        if $z2 == 0 goto label6;

        staticinvoke <android.ddm.DdmHandleHello: void sendWAIT(int)>(0);

     label6:
        return r12;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r10;
        java.lang.String[] r2, $r3, $r4, $r7, $r9, $r12, $r15, $r17;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22;
        java.nio.ByteOrder $r6;
        java.lang.String $r11, $r14, $r16, $r18, $r20, $r21;
        java.nio.ByteBuffer r22;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r2 = staticinvoke <android.os.Debug: java.lang.String[] getVmFeatureList()>();

        $i4 = lengthof r2;

        $r3 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i3 = lengthof $r3;

        $i5 = $i4 + $i3;

        $i6 = 4 * $i5;

        i0 = 4 + $i6;

        $i7 = lengthof r2;

        i1 = $i7 - 1;

     label1:
        if i1 < 0 goto label2;

        $r21 = r2[i1];

        $i17 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i20 = $i17 * 2;

        i0 = i0 + $i20;

        i1 = i1 + -1;

        goto label1;

     label2:
        $r4 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i8 = lengthof $r4;

        i21 = $i8 - 1;

     label3:
        if i21 < 0 goto label4;

        $r17 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r18 = $r17[i21];

        $i18 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i19 = $i18 * 2;

        i0 = i0 + $i19;

        i21 = i21 + -1;

        goto label3;

     label4:
        r22 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r6 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r22.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        $i11 = lengthof r2;

        $r7 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i9 = lengthof $r7;

        $i10 = $i11 + $i9;

        virtualinvoke r22.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i10);

        $i12 = lengthof r2;

        i2 = $i12 - 1;

     label5:
        if i2 < 0 goto label6;

        $r14 = r2[i2];

        $i16 = virtualinvoke $r14.<java.lang.String: int length()>();

        virtualinvoke r22.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i16);

        $r20 = r2[i2];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r22, $r20);

        i2 = i2 + -1;

        goto label5;

     label6:
        $r9 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i13 = lengthof $r9;

        i22 = $i13 - 1;

     label7:
        if i22 < 0 goto label8;

        $r12 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r11 = $r12[i22];

        $i15 = virtualinvoke $r11.<java.lang.String: int length()>();

        virtualinvoke r22.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i15);

        $r15 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r16 = $r15[i22];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r22, $r16);

        i22 = i22 + -1;

        goto label7;

     label8:
        $r10 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i14 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        specialinvoke $r10.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i14, r22);

        return $r10;
    }

    public static void sendWAIT(int)
    {
        int i0, $i2;
        byte[] r0, $r2;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r3;
        byte $b1;

        i0 := @parameter0: int;

        $r2 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r2[0] = $b1;

        r0 = $r2;

        $r3 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i2 = <android.ddm.DdmHandleHello: int CHUNK_WAIT>;

        specialinvoke $r3.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i2, r0, 0, 1);

        r1 = $r3;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2;
        android.ddm.DdmHandleHello $r0;
        java.lang.String[] $r1;

        $i0 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("HELO");

        <android.ddm.DdmHandleHello: int CHUNK_HELO> = $i0;

        $i1 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("WAIT");

        <android.ddm.DdmHandleHello: int CHUNK_WAIT> = $i1;

        $i2 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("FEAT");

        <android.ddm.DdmHandleHello: int CHUNK_FEAT> = $i2;

        $r0 = new android.ddm.DdmHandleHello;

        specialinvoke $r0.<android.ddm.DdmHandleHello: void <init>()>();

        <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "opengl-tracing";

        $r1[1] = "view-hierarchy";

        <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES> = $r1;

        return;
    }
}
