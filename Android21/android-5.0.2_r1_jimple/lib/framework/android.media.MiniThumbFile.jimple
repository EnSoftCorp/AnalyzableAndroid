public class android.media.MiniThumbFile extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int MINI_THUMB_DATA_FILE_VERSION;
    public static final int BYTES_PER_MINTHUMB;
    private static final int HEADER_SIZE;
    private android.net.Uri mUri;
    private java.io.RandomAccessFile mMiniThumbFile;
    private java.nio.channels.FileChannel mChannel;
    private java.nio.ByteBuffer mBuffer;
    private static final java.util.Hashtable sThumbFiles;

    public static synchronized void reset()
    {
        java.util.Iterator r0;
        android.media.MiniThumbFile r1;
        java.util.Hashtable $r2, $r4;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r5;

        $r2 = <android.media.MiniThumbFile: java.util.Hashtable sThumbFiles>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Collection values()>();

        r0 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.media.MiniThumbFile) $r5;

        virtualinvoke r1.<android.media.MiniThumbFile: void deactivate()>();

        goto label1;

     label2:
        $r4 = <android.media.MiniThumbFile: java.util.Hashtable sThumbFiles>;

        virtualinvoke $r4.<java.util.Hashtable: void clear()>();

        return;
    }

    public static synchronized android.media.MiniThumbFile instance(android.net.Uri)
    {
        android.net.Uri r0, $r13;
        java.lang.String r1, $r12;
        android.media.MiniThumbFile r2, $r7;
        java.util.List $r3;
        java.lang.Object $r4, $r6;
        java.util.Hashtable $r5, $r14;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @parameter0: android.net.Uri;

        $r3 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(1);

        r1 = (java.lang.String) $r4;

        $r5 = <android.media.MiniThumbFile: java.util.Hashtable sThumbFiles>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.media.MiniThumbFile) $r6;

        if r2 != null goto label1;

        $r7 = new android.media.MiniThumbFile;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content://media/external/");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/media");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r12);

        specialinvoke $r7.<android.media.MiniThumbFile: void <init>(android.net.Uri)>($r13);

        r2 = $r7;

        $r14 = <android.media.MiniThumbFile: java.util.Hashtable sThumbFiles>;

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return r2;
    }

    private java.lang.String randomAccessFilePath(int)
    {
        android.media.MiniThumbFile r0;
        int i0, $i1;
        java.lang.String r1, $r4, $r13;
        java.lang.StringBuilder $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14;
        java.io.File $r3;
        android.net.Uri $r12;

        r0 := @this: android.media.MiniThumbFile;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/DCIM/.thumbnails");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.thumbdata");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r12 = r0.<android.media.MiniThumbFile: android.net.Uri mUri>;

        $i1 = virtualinvoke $r12.<android.net.Uri: int hashCode()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private void removeOldFile()
    {
        android.media.MiniThumbFile r0;
        java.lang.String r1;
        java.io.File r2, $r4;
        boolean $z0;
        java.lang.SecurityException $r5;

        r0 := @this: android.media.MiniThumbFile;

        r1 = specialinvoke r0.<android.media.MiniThumbFile: java.lang.String randomAccessFilePath(int)>(2);

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r4;

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

     label1:
        virtualinvoke r2.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private java.io.RandomAccessFile miniThumbDataFile()
    {
        android.media.MiniThumbFile r0;
        java.lang.String r1, $r15, $r17;
        java.io.File r2, r3, $r8, $r9;
        java.io.RandomAccessFile $r6, $r7, $r10, $r11, $r12, $r21;
        boolean $z0, $z1;
        java.nio.channels.FileChannel $r13;
        java.lang.StringBuilder $r14, $r16, $r18;
        java.io.IOException $r19, $r20;

        r0 := @this: android.media.MiniThumbFile;

        $r6 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        if $r6 != null goto label9;

        specialinvoke r0.<android.media.MiniThumbFile: void removeOldFile()>();

        r1 = specialinvoke r0.<android.media.MiniThumbFile: java.lang.String randomAccessFilePath(int)>(3);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = virtualinvoke $r8.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create .thumbnails directory ");

        $r15 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MiniThumbFile", $r17);

     label1:
        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r1);

        r3 = $r9;

     label2:
        $r10 = new java.io.RandomAccessFile;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "rw");

        r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile> = $r10;

     label3:
        goto label8;

     label4:
        $r19 := @caughtexception;

     label5:
        $r21 = new java.io.RandomAccessFile;

        specialinvoke $r21.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "r");

        r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile> = $r21;

     label6:
        goto label8;

     label7:
        $r20 := @caughtexception;

     label8:
        $r11 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        if $r11 == null goto label9;

        $r12 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        $r13 = virtualinvoke $r12.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel> = $r13;

     label9:
        $r7 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        return $r7;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void <init>(android.net.Uri)
    {
        android.media.MiniThumbFile r0;
        android.net.Uri r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.media.MiniThumbFile;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MiniThumbFile: android.net.Uri mUri> = r1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(10000);

        r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer> = $r2;

        return;
    }

    public synchronized void deactivate()
    {
        android.media.MiniThumbFile r0;
        java.io.RandomAccessFile $r2, $r3;
        java.io.IOException $r4;

        r0 := @this: android.media.MiniThumbFile;

        $r2 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void close()>();

        r0.<android.media.MiniThumbFile: java.io.RandomAccessFile mMiniThumbFile> = null;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized long getMagic(long)
    {
        android.media.MiniThumbFile r0;
        long l0, l1, l2;
        java.io.RandomAccessFile r1;
        java.nio.channels.FileLock r2;
        java.lang.Throwable r4, $r27;
        java.nio.ByteBuffer $r6, $r8, $r11, $r14, $r15, $r16;
        java.nio.channels.FileChannel $r9, $r12;
        int $i3;
        byte $b4;
        java.lang.RuntimeException $r17, r35;
        java.io.IOException $r18, $r24, $r28, $r29, $r30, $r31, r33;
        java.lang.StringBuilder $r19, $r20, $r22, $r23, $r25;
        java.lang.Class $r21;
        java.lang.String $r26;

        r0 := @this: android.media.MiniThumbFile;

        l0 := @parameter0: long;

        r1 = specialinvoke r0.<android.media.MiniThumbFile: java.io.RandomAccessFile miniThumbDataFile()>();

        if r1 == null goto label22;

        l1 = l0 * 10000L;

        r2 = null;

     label01:
        $r6 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r8 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(9);

        $r9 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        r2 = virtualinvoke $r9.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(l1, 9L, 1);

        $r12 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        $r11 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        $i3 = virtualinvoke $r12.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r11, l1);

        if $i3 != 9 goto label06;

        $r14 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r15 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        $b4 = virtualinvoke $r15.<java.nio.ByteBuffer: byte get()>();

        if $b4 != 1 goto label06;

        $r16 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        l2 = virtualinvoke $r16.<java.nio.ByteBuffer: long getLong()>();

     label02:
        if r2 == null goto label03;

        virtualinvoke r2.<java.nio.channels.FileLock: void release()>();

     label03:
        goto label05;

     label04:
        $r18 := @caughtexception;

     label05:
        return l2;

     label06:
        if r2 == null goto label07;

        virtualinvoke r2.<java.nio.channels.FileLock: void release()>();

     label07:
        goto label22;

     label08:
        $r29 := @caughtexception;

        goto label22;

     label09:
        $r24 := @caughtexception;

        r33 = $r24;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("MiniThumbFile", "Got exception checking file magic: ", r33);

     label10:
        if r2 == null goto label11;

        virtualinvoke r2.<java.nio.channels.FileLock: void release()>();

     label11:
        goto label22;

     label12:
        $r31 := @caughtexception;

        goto label22;

     label13:
        $r17 := @caughtexception;

        r35 = $r17;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got exception when reading magic, id = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", disk full or mount read-only? ");

        $r21 = virtualinvoke r35.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MiniThumbFile", $r26);

     label14:
        if r2 == null goto label15;

        virtualinvoke r2.<java.nio.channels.FileLock: void release()>();

     label15:
        goto label22;

     label16:
        $r30 := @caughtexception;

        goto label22;

     label17:
        $r27 := @caughtexception;

        r4 = $r27;

     label18:
        if r2 == null goto label19;

        virtualinvoke r2.<java.nio.channels.FileLock: void release()>();

     label19:
        goto label21;

     label20:
        $r28 := @caughtexception;

     label21:
        throw r4;

     label22:
        return 0L;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.RuntimeException from label01 to label02 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public synchronized void saveMiniThumbToFile(byte[], long, long) throws java.io.IOException
    {
        android.media.MiniThumbFile r0;
        byte[] r1;
        long l0, l1, l2;
        java.io.RandomAccessFile r2;
        java.nio.channels.FileLock r3;
        java.lang.Throwable r5, $r34;
        int $i3, $i4;
        java.nio.ByteBuffer $r7, $r8, $r10, $r14, $r16, $r18, $r21;
        java.nio.channels.FileChannel $r19, $r20;
        java.io.IOException $r22, $r24, $r32, $r38, $r39, r42;
        java.lang.RuntimeException $r23, r43;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r30, $r33, $r35, $r36, $r37;
        java.lang.String $r29, $r40;
        java.lang.Class $r31;

        r0 := @this: android.media.MiniThumbFile;

        r1 := @parameter0: byte[];

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<android.media.MiniThumbFile: java.io.RandomAccessFile miniThumbDataFile()>();

        if r2 != null goto label01;

        return;

     label01:
        l2 = l0 * 10000L;

        r3 = null;

     label02:
        if r1 == null goto label08;

        $i3 = lengthof r1;

        if $i3 <= 9987 goto label07;

     label03:
        if r3 == null goto label04;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label04:
        goto label06;

     label05:
        $r24 := @caughtexception;

     label06:
        return;

     label07:
        $r7 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r8 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(1);

        $r10 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l1);

        $r14 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        $i4 = lengthof r1;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

        $r16 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r16.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        $r18 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r19 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        r3 = virtualinvoke $r19.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(l2, 10000L, 0);

        $r20 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        $r21 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r20.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>($r21, l2);

     label08:
        if r3 == null goto label09;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label09:
        goto label21;

     label10:
        $r38 := @caughtexception;

        goto label21;

     label11:
        $r32 := @caughtexception;

        r42 = $r32;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t save mini thumbnail data for ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MiniThumbFile", $r40, r42);

        throw r42;

     label12:
        $r23 := @caughtexception;

        r43 = $r23;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t save mini thumbnail data for ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; disk full or mount read-only? ");

        $r31 = virtualinvoke r43.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MiniThumbFile", $r29);

     label13:
        if r3 == null goto label14;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label14:
        goto label21;

     label15:
        $r39 := @caughtexception;

        goto label21;

     label16:
        $r34 := @caughtexception;

        r5 = $r34;

     label17:
        if r3 == null goto label18;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label18:
        goto label20;

     label19:
        $r22 := @caughtexception;

     label20:
        throw r5;

     label21:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.RuntimeException from label07 to label08 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label13 with label16;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public synchronized byte[] getMiniThumbFromFile(long, byte[])
    {
        android.media.MiniThumbFile r0;
        long l0, l1, l4;
        byte[] r1, r4;
        java.io.RandomAccessFile r2;
        java.nio.channels.FileLock r3;
        int i2, i5, $i7, $i8;
        byte b3, $b6;
        java.lang.Throwable r6, $r40;
        java.nio.ByteBuffer $r9, $r12, $r13, $r14, $r16, $r17, $r20;
        java.nio.channels.FileChannel $r10, $r11;
        java.io.IOException $r18, $r19, $r23, $r35, $r38, $r39, r42;
        java.lang.StringBuilder $r22, $r24, $r25, $r27, $r28, $r29, $r32, $r33, $r34, $r37;
        java.lang.String $r26, $r36;
        java.lang.RuntimeException $r30, r44;
        java.lang.Class $r31;

        r0 := @this: android.media.MiniThumbFile;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        r2 = specialinvoke r0.<android.media.MiniThumbFile: java.io.RandomAccessFile miniThumbDataFile()>();

        if r2 != null goto label01;

        return null;

     label01:
        l1 = l0 * 10000L;

        r3 = null;

     label02:
        $r9 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r10 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        r3 = virtualinvoke $r10.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(l1, 10000L, 1);

        $r11 = r0.<android.media.MiniThumbFile: java.nio.channels.FileChannel mChannel>;

        $r12 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        i2 = virtualinvoke $r11.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>($r12, l1);

        if i2 <= 13 goto label07;

        $r13 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r14 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        b3 = virtualinvoke $r14.<java.nio.ByteBuffer: byte get()>();

        $r16 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        l4 = virtualinvoke $r16.<java.nio.ByteBuffer: long getLong()>();

        $r17 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        i5 = virtualinvoke $r17.<java.nio.ByteBuffer: int getInt()>();

        $i8 = 13 + i5;

        if i2 < $i8 goto label07;

        if i5 == 0 goto label07;

        $b6 = l4 cmp 0L;

        if $b6 == 0 goto label07;

        if b3 != 1 goto label07;

        $i7 = lengthof r1;

        if $i7 < i5 goto label07;

        $r20 = r0.<android.media.MiniThumbFile: java.nio.ByteBuffer mBuffer>;

        virtualinvoke $r20.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 0, i5);

        r4 = r1;

     label03:
        if r3 == null goto label04;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

     label06:
        return r4;

     label07:
        if r3 == null goto label08;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label08:
        goto label23;

     label09:
        $r18 := @caughtexception;

        goto label23;

     label10:
        $r23 := @caughtexception;

        r42 = $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got exception when reading thumbnail id=");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", exception: ");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MiniThumbFile", $r26);

     label11:
        if r3 == null goto label12;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label12:
        goto label23;

     label13:
        $r38 := @caughtexception;

        goto label23;

     label14:
        $r30 := @caughtexception;

        r44 = $r30;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got exception when reading thumbnail, id = ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", disk full or mount read-only? ");

        $r31 = virtualinvoke r44.<java.lang.Object: java.lang.Class getClass()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MiniThumbFile", $r36);

     label15:
        if r3 == null goto label16;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label16:
        goto label23;

     label17:
        $r35 := @caughtexception;

        goto label23;

     label18:
        $r40 := @caughtexception;

        r6 = $r40;

     label19:
        if r3 == null goto label20;

        virtualinvoke r3.<java.nio.channels.FileLock: void release()>();

     label20:
        goto label22;

     label21:
        $r39 := @caughtexception;

     label22:
        throw r6;

     label23:
        return null;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.RuntimeException from label02 to label03 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <android.media.MiniThumbFile: int HEADER_SIZE> = 13;

        <android.media.MiniThumbFile: int BYTES_PER_MINTHUMB> = 10000;

        <android.media.MiniThumbFile: int MINI_THUMB_DATA_FILE_VERSION> = 3;

        <android.media.MiniThumbFile: java.lang.String TAG> = "MiniThumbFile";

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <android.media.MiniThumbFile: java.util.Hashtable sThumbFiles> = $r0;

        return;
    }
}
