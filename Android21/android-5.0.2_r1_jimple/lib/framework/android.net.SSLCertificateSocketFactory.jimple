public class android.net.SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory
{
    private static final java.lang.String TAG;
    private static final javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER;
    private javax.net.ssl.SSLSocketFactory mInsecureFactory;
    private javax.net.ssl.SSLSocketFactory mSecureFactory;
    private javax.net.ssl.TrustManager[] mTrustManagers;
    private javax.net.ssl.KeyManager[] mKeyManagers;
    private byte[] mNpnProtocols;
    private byte[] mAlpnProtocols;
    private java.security.PrivateKey mChannelIdPrivateKey;
    private final int mHandshakeTimeoutMillis;
    private final com.android.org.conscrypt.SSLClientSessionCache mSessionCache;
    private final boolean mSecure;

    public void <init>(int)
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        i0 := @parameter0: int;

        specialinvoke r0.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, null, 1);

        return;
    }

    private void <init>(int, android.net.SSLSessionCache, boolean)
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0;
        android.net.SSLSessionCache r1;
        boolean z0;
        com.android.org.conscrypt.SSLClientSessionCache $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.SSLSessionCache;

        z0 := @parameter2: boolean;

        specialinvoke r0.<javax.net.ssl.SSLSocketFactory: void <init>()>();

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers> = null;

        r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols> = null;

        r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols> = null;

        r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey> = null;

        r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis> = i0;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r1.<android.net.SSLSessionCache: com.android.org.conscrypt.SSLClientSessionCache mSessionCache>;

     label2:
        r0.<android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.SSLClientSessionCache mSessionCache> = $r2;

        r0.<android.net.SSLCertificateSocketFactory: boolean mSecure> = z0;

        return;
    }

    public static javax.net.SocketFactory getDefault(int)
    {
        int i0;
        android.net.SSLCertificateSocketFactory $r0;

        i0 := @parameter0: int;

        $r0 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r0.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, null, 1);

        return $r0;
    }

    public static javax.net.ssl.SSLSocketFactory getDefault(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        android.net.SSLCertificateSocketFactory $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r1.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 1);

        return $r1;
    }

    public static javax.net.ssl.SSLSocketFactory getInsecure(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        android.net.SSLCertificateSocketFactory $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r1.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 0);

        return $r1;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        org.apache.http.conn.ssl.SSLSocketFactory $r1;
        android.net.SSLCertificateSocketFactory $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r2 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r2.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 1);

        specialinvoke $r1.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLSocketFactory)>($r2);

        return $r1;
    }

    public static void verifyHostname(java.net.Socket, java.lang.String) throws java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1, $r9;
        javax.net.ssl.SSLSocket r2;
        javax.net.ssl.SSLSession r3;
        boolean $z0, $z1, $z2;
        javax.net.ssl.HostnameVerifier $r4;
        javax.net.ssl.SSLPeerUnverifiedException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        javax.net.ssl.SSLException $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        $z0 = r0 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attempt to verify non-SSL socket");

        throw $r11;

     label1:
        $z1 = staticinvoke <android.net.SSLCertificateSocketFactory: boolean isSslCheckRelaxed()>();

        if $z1 != 0 goto label3;

        r2 = (javax.net.ssl.SSLSocket) r0;

        virtualinvoke r2.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r3 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        if r3 != null goto label2;

        $r10 = new javax.net.ssl.SSLException;

        specialinvoke $r10.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Cannot verify SSL socket without session");

        throw $r10;

     label2:
        $r4 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>();

        $z2 = interfaceinvoke $r4.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>(r1, r3);

        if $z2 != 0 goto label3;

        $r5 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot verify hostname: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        return;
    }

    private javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.KeyManager[] r1;
        javax.net.ssl.TrustManager[] r2;
        com.android.org.conscrypt.OpenSSLContextImpl r3, $r4;
        com.android.org.conscrypt.ClientSessionContext $r5;
        com.android.org.conscrypt.SSLClientSessionCache $r6;
        javax.net.ssl.SSLSocketFactory $r7, $r10;
        java.security.KeyManagementException $r8, r11;
        javax.net.SocketFactory $r9;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r2 := @parameter1: javax.net.ssl.TrustManager[];

     label1:
        $r4 = new com.android.org.conscrypt.OpenSSLContextImpl;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLContextImpl: void <init>()>();

        r3 = $r4;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLContextImpl: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r1, r2, null);

        $r5 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLContextImpl: com.android.org.conscrypt.ClientSessionContext engineGetClientSessionContext()>();

        $r6 = r0.<android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.SSLClientSessionCache mSessionCache>;

        virtualinvoke $r5.<com.android.org.conscrypt.ClientSessionContext: void setPersistentCache(com.android.org.conscrypt.SSLClientSessionCache)>($r6);

        $r7 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLContextImpl: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>();

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r11 = $r8;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", r11);

        $r9 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();

        $r10 = (javax.net.ssl.SSLSocketFactory) $r9;

        return $r10;

        catch java.security.KeyManagementException from label1 to label2 with label3;
    }

    private static boolean isSslCheckRelaxed()
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        $r0 = "1";

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = "yes";

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("socket.relaxsslcheck");

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private synchronized javax.net.ssl.SSLSocketFactory getDelegate()
    {
        android.net.SSLCertificateSocketFactory r0;
        boolean $z0, $z1, $z2;
        javax.net.ssl.SSLSocketFactory $r1, $r2, $r5, $r6, $r7, $r10;
        javax.net.ssl.TrustManager[] $r3, $r8;
        javax.net.ssl.KeyManager[] $r4, $r9;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <android.net.SSLCertificateSocketFactory: boolean isSslCheckRelaxed()>();

        if $z2 == 0 goto label5;

     label1:
        $r1 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory>;

        if $r1 != null goto label4;

        $z1 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "*** BYPASSING SSL SECURITY CHECKS (socket.relaxsslcheck=yes) ***");

        goto label3;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "Bypassing SSL security checks at caller\'s request");

     label3:
        $r4 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers>;

        $r3 = <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER>;

        $r5 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[])>($r4, $r3);

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = $r5;

     label4:
        $r2 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory>;

        return $r2;

     label5:
        $r6 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory>;

        if $r6 != null goto label6;

        $r9 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers>;

        $r8 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers>;

        $r10 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[])>($r9, $r8);

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = $r10;

     label6:
        $r7 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory>;

        return $r7;
    }

    public void setTrustManagers(javax.net.ssl.TrustManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.TrustManager[] r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: javax.net.ssl.TrustManager[];

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers> = r1;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        return;
    }

    public void setNpnProtocols(byte[][])
    {
        android.net.SSLCertificateSocketFactory r0;
        byte[][] r1;
        byte[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: byte[][];

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>(r1);

        r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols> = $r2;

        return;
    }

    public void setAlpnProtocols(byte[][])
    {
        android.net.SSLCertificateSocketFactory r0;
        byte[][] r1;
        byte[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: byte[][];

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>(r1);

        r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols> = $r2;

        return;
    }

    static transient byte[] toLengthPrefixedList(byte[][])
    {
        byte[][] r0, r1, r12;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        byte[] r2, r3, r4, r11;
        byte b6, $b10;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.IllegalArgumentException $r6, $r10;
        java.lang.String $r8;

        r0 := @parameter0: byte[][];

        $i7 = lengthof r0;

        if $i7 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("items.length == 0");

        throw $r10;

     label1:
        i0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        r2 = r1[i2];

        $i11 = lengthof r2;

        if $i11 == 0 goto label3;

        $i15 = lengthof r2;

        if $i15 <= 255 goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s.length == 0 || s.length > 255: ");

        $i13 = lengthof r2;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label4:
        $i14 = lengthof r2;

        $i16 = 1 + $i14;

        i0 = i0 + $i16;

        i2 = i2 + 1;

        goto label2;

     label5:
        r11 = newarray (byte)[i0];

        i17 = 0;

        r12 = r0;

        i18 = lengthof r12;

        i3 = 0;

     label6:
        if i3 >= i18 goto label9;

        r3 = r12[i3];

        $i8 = i17;

        i17 = i17 + 1;

        $i9 = lengthof r3;

        $b10 = (byte) $i9;

        r11[$i8] = $b10;

        r4 = r3;

        i4 = lengthof r4;

        i5 = 0;

     label7:
        if i5 >= i4 goto label8;

        b6 = r4[i5];

        $i12 = i17;

        i17 = i17 + 1;

        r11[$i12] = b6;

        i5 = i5 + 1;

        goto label7;

     label8:
        i3 = i3 + 1;

        goto label6;

     label9:
        return r11;
    }

    public byte[] getNpnSelectedProtocol(java.net.Socket)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;
        byte[] $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        $r3 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()>();

        return $r3;
    }

    public byte[] getAlpnSelectedProtocol(java.net.Socket)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;
        byte[] $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        $r3 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getAlpnSelectedProtocol()>();

        return $r3;
    }

    public void setKeyManagers(javax.net.ssl.KeyManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.KeyManager[] r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers> = r1;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = null;

        return;
    }

    public void setChannelIdPrivateKey(java.security.PrivateKey)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.security.PrivateKey r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.security.PrivateKey;

        r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey> = r1;

        return;
    }

    public void setUseSessionTickets(java.net.Socket, boolean)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        boolean z0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setUseSessionTickets(boolean)>(z0);

        return;
    }

    public void setHostname(java.net.Socket, java.lang.String)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        java.lang.String r2;
        com.android.org.conscrypt.OpenSSLSocketImpl $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHostname(java.lang.String)>(r2);

        return;
    }

    public void setSoWriteTimeout(java.net.Socket, int) throws java.net.SocketException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        int i0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>(i0);

        return;
    }

    private static com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)
    {
        java.net.Socket r0;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.net.Socket;

        $z0 = r0 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket not created by this factory: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = (com.android.org.conscrypt.OpenSSLSocketImpl) r0;

        return $r1;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1, $r5;
        java.lang.String r2;
        int i0, $i1;
        boolean z0, $z1;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        javax.net.ssl.SSLSocketFactory $r4;
        byte[] $r6, $r7;
        java.security.PrivateKey $r8;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, z0);

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r5;

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r6);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r7);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r8 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r8);

        $z1 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z1 == 0 goto label1;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r3, r2);

     label1:
        return r3;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        com.android.org.conscrypt.OpenSSLSocketImpl r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;
        byte[] $r4, $r5;
        int $i0;
        java.security.PrivateKey $r6;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r2 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r1 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r4);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r5);

        $i0 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i0);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r6);

        return r1;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.InetAddress r1, r2;
        int i0, i1, $i2;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.net.Socket $r5;
        byte[] $r6, $r7;
        java.security.PrivateKey $r8;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r4 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r5;

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r6);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r7);

        $i2 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i2);

        $r8 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r8);

        return r3;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.InetAddress r1;
        int i0, $i1;
        com.android.org.conscrypt.OpenSSLSocketImpl r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Socket $r4;
        byte[] $r5, $r6;
        java.security.PrivateKey $r7;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r3 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>(r1, i0);

        r2 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r4;

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r5);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r6);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r7);

        return r2;
    }

    public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.net.InetAddress r2;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.net.Socket $r5;
        byte[] $r6, $r7;
        java.security.PrivateKey $r8;
        boolean $z0;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r4 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r5;

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r6);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r7);

        $i2 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i2);

        $r8 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r8);

        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label1;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r3, r1);

     label1:
        return r3;
    }

    public java.net.Socket createSocket(java.lang.String, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.org.conscrypt.OpenSSLSocketImpl r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Socket $r4;
        byte[] $r5, $r6;
        java.security.PrivateKey $r7;
        boolean $z0;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>(r1, i0);

        r2 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r4;

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r5);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r6);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r7);

        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label1;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r2, r1);

     label1:
        return r2;
    }

    public java.lang.String[] getDefaultCipherSuites()
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r2;
    }

    static void <clinit>()
    {
        javax.net.ssl.TrustManager[] $r0;
        android.net.SSLCertificateSocketFactory$1 $r1;

        <android.net.SSLCertificateSocketFactory: java.lang.String TAG> = "SSLCertificateSocketFactory";

        $r0 = newarray (javax.net.ssl.TrustManager)[1];

        $r1 = new android.net.SSLCertificateSocketFactory$1;

        specialinvoke $r1.<android.net.SSLCertificateSocketFactory$1: void <init>()>();

        $r0[0] = $r1;

        <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER> = $r0;

        return;
    }
}
