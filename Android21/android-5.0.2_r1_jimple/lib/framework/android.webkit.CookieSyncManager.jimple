public final class android.webkit.CookieSyncManager extends android.webkit.WebSyncManager
{
    private static android.webkit.CookieSyncManager sRef;
    private static boolean sGetInstanceAllowed;

    private void <init>()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void <init>(android.content.Context,java.lang.String)>(null, null);

        return;
    }

    public static synchronized android.webkit.CookieSyncManager getInstance()
    {
        android.webkit.CookieSyncManager $r0, $r1, $r2;

        staticinvoke <android.webkit.CookieSyncManager: void checkInstanceIsAllowed()>();

        $r0 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

        if $r0 != null goto label1;

        $r2 = new android.webkit.CookieSyncManager;

        specialinvoke $r2.<android.webkit.CookieSyncManager: void <init>()>();

        <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef> = $r2;

     label1:
        $r1 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

        return $r1;
    }

    public static synchronized android.webkit.CookieSyncManager createInstance(android.content.Context)
    {
        android.content.Context r0;
        android.webkit.CookieSyncManager $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: android.content.Context;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid context argument");

        throw $r2;

     label1:
        staticinvoke <android.webkit.CookieSyncManager: void setGetInstanceIsAllowed()>();

        $r1 = staticinvoke <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>();

        return $r1;
    }

    public void sync()
    {
        android.webkit.CookieSyncManager r0;
        android.webkit.CookieManager $r1;

        r0 := @this: android.webkit.CookieSyncManager;

        $r1 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r1.<android.webkit.CookieManager: void flush()>();

        return;
    }

    protected void syncFromRamToFlash()
    {
        android.webkit.CookieSyncManager r0;
        android.webkit.CookieManager $r1;

        r0 := @this: android.webkit.CookieSyncManager;

        $r1 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r1.<android.webkit.CookieManager: void flush()>();

        return;
    }

    public void resetSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    public void startSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    public void stopSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    static void setGetInstanceIsAllowed()
    {
        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 1;

        return;
    }

    private static void checkInstanceIsAllowed()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;

        $z0 = <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed>;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CookieSyncManager::createInstance() needs to be called before CookieSyncManager::getInstance()");

        throw $r0;

     label1:
        return;
    }

    public volatile void run()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void run()>();

        return;
    }

    static void <clinit>()
    {
        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 0;

        return;
    }
}
