public class android.media.MediaRouter$UserRouteInfo extends android.media.MediaRouter$RouteInfo
{
    android.media.RemoteControlClient mRcc;
    android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp;

    void <init>(android.media.MediaRouter$RouteCategory)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.MediaRouter$RouteCategory r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.MediaRouter$RouteCategory;

        specialinvoke r0.<android.media.MediaRouter$RouteInfo: void <init>(android.media.MediaRouter$RouteCategory)>(r1);

        r0.<android.media.MediaRouter$UserRouteInfo: int mSupportedTypes> = 8388608;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType> = 1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling> = 0;

        return;
    }

    public void setName(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mName> = r1;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setName(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        r0.<android.media.MediaRouter$UserRouteInfo: int mNameResId> = i0;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mName> = null;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setDescription(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mDescription> = r1;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setStatus(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setStatusInt(java.lang.CharSequence)>(r1);

        return;
    }

    public void setRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.RemoteControlClient r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.RemoteControlClient;

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc> = r1;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void updatePlaybackInfoOnRcc()>();

        return;
    }

    public android.media.RemoteControlClient getRemoteControlClient()
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.RemoteControlClient $r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        return $r1;
    }

    public void setIconDrawable(android.graphics.drawable.Drawable)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r0.<android.media.MediaRouter$UserRouteInfo: android.graphics.drawable.Drawable mIcon> = r1;

        return;
    }

    public void setIconResource(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0;
        android.media.MediaRouter$Static $r1;
        android.content.res.Resources $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $r1 = <android.media.MediaRouter: android.media.MediaRouter$Static sStatic>;

        $r2 = $r1.<android.media.MediaRouter$Static: android.content.res.Resources mResources>;

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setIconDrawable(android.graphics.drawable.Drawable)>($r3);

        return;
    }

    public void setVolumeCallback(android.media.MediaRouter$VolumeCallback)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.MediaRouter$VolumeCallback r1;
        android.media.MediaRouter$VolumeCallbackInfo $r2;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.MediaRouter$VolumeCallback;

        $r2 = new android.media.MediaRouter$VolumeCallbackInfo;

        specialinvoke $r2.<android.media.MediaRouter$VolumeCallbackInfo: void <init>(android.media.MediaRouter$VolumeCallback,android.media.MediaRouter$RouteInfo)>(r1, r0);

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb> = $r2;

        return;
    }

    public void setPlaybackType(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void configureSessionVolume()>();

     label1:
        return;
    }

    public void setVolumeHandling(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void configureSessionVolume()>();

     label1:
        return;
    }

    public void setVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider $r1, $r4;
        android.media.MediaRouter$RouteGroup $r2, $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: int getVolumeMax()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i3 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolume>;

        if $i3 == i5 goto label2;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolume> = i5;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        if $r1 == null goto label1;

        $r4 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        $i4 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolume>;

        virtualinvoke $r4.<android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider: void setCurrentVolume(int)>($i4);

     label1:
        staticinvoke <android.media.MediaRouter: void dispatchRouteVolumeChanged(android.media.MediaRouter$RouteInfo)>(r0);

        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$RouteGroup mGroup>;

        if $r2 == null goto label2;

        $r3 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$RouteGroup mGroup>;

        virtualinvoke $r3.<android.media.MediaRouter$RouteGroup: void memberVolumeChanged(android.media.MediaRouter$RouteInfo)>(r0);

     label2:
        return;
    }

    public void requestSetVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;
        android.media.MediaRouter$VolumeCallbackInfo $r1, $r2;
        android.media.MediaRouter$VolumeCallback $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 != 1 goto label2;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaRouter", "Cannot requestSetVolume on user route - no volume callback set");

        return;

     label1:
        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        $r3 = $r2.<android.media.MediaRouter$VolumeCallbackInfo: android.media.MediaRouter$VolumeCallback vcb>;

        virtualinvoke $r3.<android.media.MediaRouter$VolumeCallback: void onVolumeSetRequest(android.media.MediaRouter$RouteInfo,int)>(r0, i0);

     label2:
        return;
    }

    public void requestUpdateVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;
        android.media.MediaRouter$VolumeCallbackInfo $r1, $r2;
        android.media.MediaRouter$VolumeCallback $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 != 1 goto label2;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaRouter", "Cannot requestChangeVolume on user route - no volumec callback set");

        return;

     label1:
        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        $r3 = $r2.<android.media.MediaRouter$VolumeCallbackInfo: android.media.MediaRouter$VolumeCallback vcb>;

        virtualinvoke $r3.<android.media.MediaRouter$VolumeCallback: void onVolumeUpdateRequest(android.media.MediaRouter$RouteInfo,int)>(r0, i0);

     label2:
        return;
    }

    public void setVolumeMax(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void configureSessionVolume()>();

     label1:
        return;
    }

    public void setPlaybackStream(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void configureSessionVolume()>();

     label1:
        return;
    }

    private void updatePlaybackInfoOnRcc()
    {
        android.media.MediaRouter$UserRouteInfo r0;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void configureSessionVolume()>();

        return;
    }

    private void configureSessionVolume()
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.session.MediaSession r1;
        byte b0;
        android.media.RemoteControlClient $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.media.AudioAttributes$Builder $r4, r17;
        android.media.AudioAttributes $r6;
        android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.CharSequence $r15;
        java.lang.String $r16;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        if $r2 != null goto label02;

        $z1 = staticinvoke <android.media.MediaRouter: boolean access$000()>();

        if $z1 == 0 goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No Rcc to configure volume for route ");

        $r15 = r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mName>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaRouter", $r16);

     label01:
        return;

     label02:
        $r3 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        r1 = virtualinvoke $r3.<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()>();

        if r1 != null goto label04;

        $z0 = staticinvoke <android.media.MediaRouter: boolean access$000()>();

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaRouter", "Rcc has no session to configure volume");

     label03:
        return;

     label04:
        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType>;

        if $i1 != 1 goto label09;

        b0 = 0;

        $i3 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        lookupswitch($i3)
        {
            case 0: goto label06;
            case 1: goto label05;
            default: goto label06;
        };

     label05:
        b0 = 2;

        goto label06;

     label06:
        $r7 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        if $r7 == null goto label07;

        $r9 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        $i6 = virtualinvoke $r9.<android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider: int getVolumeControl()>();

        if $i6 != b0 goto label07;

        $r11 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        $i8 = virtualinvoke $r11.<android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider: int getMaxVolume()>();

        $i7 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax>;

        if $i8 == $i7 goto label08;

     label07:
        $r8 = new android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider;

        $i5 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax>;

        $i4 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolume>;

        specialinvoke $r8.<android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider: void <init>(android.media.MediaRouter$UserRouteInfo,int,int,int)>(r0, b0, $i5, $i4);

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp> = $r8;

        $r10 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp>;

        virtualinvoke r1.<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>($r10);

     label08:
        goto label10;

     label09:
        $r4 = new android.media.AudioAttributes$Builder;

        specialinvoke $r4.<android.media.AudioAttributes$Builder: void <init>()>();

        r17 = $r4;

        $i2 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream>;

        virtualinvoke r17.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>($i2);

        $r6 = virtualinvoke r17.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke r1.<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>($r6);

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$UserRouteInfo$SessionVolumeProvider mSvp> = null;

     label10:
        return;
    }
}
