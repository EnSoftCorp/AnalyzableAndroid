public class android.media.ImageReader extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final int ACQUIRE_SUCCESS;
    private static final int ACQUIRE_NO_BUFS;
    private static final int ACQUIRE_MAX_IMAGES;
    private final int mWidth;
    private final int mHeight;
    private final int mFormat;
    private final int mMaxImages;
    private final int mNumPlanes;
    private final android.view.Surface mSurface;
    private final java.lang.Object mListenerLock;
    private android.media.ImageReader$OnImageAvailableListener mListener;
    private android.media.ImageReader$ListenerHandler mListenerHandler;
    private long mNativeContext;

    public static android.media.ImageReader newInstance(int, int, int, int)
    {
        int i0, i1, i2, i3;
        android.media.ImageReader $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new android.media.ImageReader;

        specialinvoke $r0.<android.media.ImageReader: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        return $r0;
    }

    protected void <init>(int, int, int, int)
    {
        android.media.ImageReader r0;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r2, $r5, $r6;
        java.lang.ref.WeakReference $r3;
        android.view.Surface $r4;

        r0 := @this: android.media.ImageReader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.ImageReader: java.lang.Object mListenerLock> = $r1;

        r0.<android.media.ImageReader: int mWidth> = i0;

        r0.<android.media.ImageReader: int mHeight> = i1;

        r0.<android.media.ImageReader: int mFormat> = i2;

        r0.<android.media.ImageReader: int mMaxImages> = i3;

        if i0 < 1 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The image dimensions must be positive");

        throw $r2;

     label2:
        $i4 = r0.<android.media.ImageReader: int mMaxImages>;

        if $i4 >= 1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum outstanding image count must be at least 1");

        throw $r6;

     label3:
        if i2 != 17 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NV21 format is not supported");

        throw $r5;

     label4:
        $i5 = specialinvoke r0.<android.media.ImageReader: int getNumPlanesFromFormat()>();

        r0.<android.media.ImageReader: int mNumPlanes> = $i5;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        specialinvoke r0.<android.media.ImageReader: void nativeInit(java.lang.Object,int,int,int,int)>($r3, i0, i1, i2, i3);

        $r4 = specialinvoke r0.<android.media.ImageReader: android.view.Surface nativeGetSurface()>();

        r0.<android.media.ImageReader: android.view.Surface mSurface> = $r4;

        return;
    }

    public int getWidth()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mWidth>;

        return $i0;
    }

    public int getHeight()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mHeight>;

        return $i0;
    }

    public int getImageFormat()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        return $i0;
    }

    public int getMaxImages()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mMaxImages>;

        return $i0;
    }

    public android.view.Surface getSurface()
    {
        android.media.ImageReader r0;
        android.view.Surface $r1;

        r0 := @this: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: android.view.Surface mSurface>;

        return $r1;
    }

    public android.media.Image acquireLatestImage()
    {
        android.media.ImageReader r0;
        android.media.Image r1, r2, r3, r4;
        java.lang.Throwable r5, $r6;

        r0 := @this: android.media.ImageReader;

        r1 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireNextImage()>();

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireNextImageNoThrowISE()>();

        if r2 != null goto label4;

        r3 = r1;

        r1 = null;

        r4 = r3;

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<android.media.Image: void close()>();

     label3:
        return r4;

     label4:
        virtualinvoke r1.<android.media.Image: void close()>();

        r1 = r2;

        goto label1;

     label5:
        $r6 := @caughtexception;

        r5 = $r6;

     label6:
        if r1 == null goto label7;

        virtualinvoke r1.<android.media.Image: void close()>();

     label7:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public android.media.Image acquireNextImageNoThrowISE()
    {
        android.media.ImageReader r0;
        android.media.ImageReader$SurfaceImage r1, $r2, $r3;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $r2 = new android.media.ImageReader$SurfaceImage;

        specialinvoke $r2.<android.media.ImageReader$SurfaceImage: void <init>(android.media.ImageReader)>(r0);

        r1 = $r2;

        $i0 = specialinvoke r0.<android.media.ImageReader: int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)>(r1);

        if $i0 != 0 goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)
    {
        android.media.ImageReader r0;
        android.media.ImageReader$SurfaceImage r1;
        int i0;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.ImageReader$SurfaceImage;

        i0 = specialinvoke r0.<android.media.ImageReader: int nativeImageSetup(android.media.Image)>(r1);

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        staticinvoke <android.media.ImageReader$SurfaceImage: void access$000(android.media.ImageReader$SurfaceImage)>(r1);

        staticinvoke <android.media.ImageReader$SurfaceImage: void access$100(android.media.ImageReader$SurfaceImage,boolean)>(r1, 1);

     label2:
        goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown nativeImageSetup return code ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r2;

     label4:
        return i0;
    }

    public android.media.Image acquireNextImage()
    {
        android.media.ImageReader r0;
        android.media.ImageReader$SurfaceImage r1, $r2;
        int i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6, $r11;
        java.lang.AssertionError $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: android.media.ImageReader;

        $r2 = new android.media.ImageReader$SurfaceImage;

        specialinvoke $r2.<android.media.ImageReader$SurfaceImage: void <init>(android.media.ImageReader)>(r0);

        r1 = $r2;

        i0 = specialinvoke r0.<android.media.ImageReader: int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)>(r1);

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return r1;

     label2:
        return null;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = newarray (java.lang.Object)[1];

        $i1 = r0.<android.media.ImageReader: int mMaxImages>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("maxImages (%d) has already been acquired, call #close before acquiring more.", $r4);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label4:
        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown nativeImageSetup return code ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;
    }

    private void releaseImage(android.media.Image)
    {
        android.media.ImageReader r0, $r3;
        android.media.Image r1;
        android.media.ImageReader$SurfaceImage r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.Image;

        $z0 = r1 instanceof android.media.ImageReader$SurfaceImage;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This image was not produced by an ImageReader");

        throw $r5;

     label1:
        r2 = (android.media.ImageReader$SurfaceImage) r1;

        $r3 = virtualinvoke r2.<android.media.ImageReader$SurfaceImage: android.media.ImageReader getReader()>();

        if $r3 == r0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This image was not produced by this ImageReader");

        throw $r4;

     label2:
        staticinvoke <android.media.ImageReader$SurfaceImage: void access$200(android.media.ImageReader$SurfaceImage)>(r2);

        specialinvoke r0.<android.media.ImageReader: void nativeReleaseImage(android.media.Image)>(r1);

        staticinvoke <android.media.ImageReader$SurfaceImage: void access$100(android.media.ImageReader$SurfaceImage,boolean)>(r2, 0);

        return;
    }

    public void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener, android.os.Handler)
    {
        android.media.ImageReader r0;
        android.media.ImageReader$OnImageAvailableListener r1;
        android.os.Handler r2;
        java.lang.Object r3, $r6;
        android.os.Looper r4, $r7, $r11;
        java.lang.Throwable r5, $r13;
        android.media.ImageReader$ListenerHandler $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.ImageReader$OnImageAvailableListener;

        r2 := @parameter1: android.os.Handler;

        $r6 = r0.<android.media.ImageReader: java.lang.Object mListenerLock>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        if r1 == null goto label07;

        if r2 == null goto label02;

        $r7 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        goto label03;

     label02:
        $r7 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

     label03:
        r4 = $r7;

        if r4 != null goto label04;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handler is null but the current thread is not a looper");

        throw $r12;

     label04:
        $r8 = r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        if $r8 == null goto label05;

        $r10 = r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        $r11 = virtualinvoke $r10.<android.media.ImageReader$ListenerHandler: android.os.Looper getLooper()>();

        if $r11 == r4 goto label06;

     label05:
        $r9 = new android.media.ImageReader$ListenerHandler;

        specialinvoke $r9.<android.media.ImageReader$ListenerHandler: void <init>(android.media.ImageReader,android.os.Looper)>(r0, r4);

        r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler> = $r9;

     label06:
        r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener> = r1;

        goto label08;

     label07:
        r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener> = null;

        r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler> = null;

     label08:
        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r3;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void close()
    {
        android.media.ImageReader r0;

        r0 := @this: android.media.ImageReader;

        virtualinvoke r0.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>(null, null);

        specialinvoke r0.<android.media.ImageReader: void nativeClose()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.media.ImageReader r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.media.ImageReader;

     label1:
        virtualinvoke r0.<android.media.ImageReader: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getNumPlanesFromFormat()
    {
        android.media.ImageReader r0;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 16: goto label2;
            case 17: goto label1;
            case 20: goto label3;
            case 32: goto label3;
            case 35: goto label1;
            case 37: goto label3;
            case 256: goto label3;
            case 538982489: goto label3;
            case 540422489: goto label3;
            case 842094169: goto label1;
            default: goto label4;
        };

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = newarray (java.lang.Object)[1];

        $i1 = r0.<android.media.ImageReader: int mFormat>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid format specified %d", $r2);

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    private static void postEventFromNative(java.lang.Object)
    {
        java.lang.Object r0, r4, $r6, $r7;
        java.lang.ref.WeakReference r1;
        android.media.ImageReader r2;
        android.media.ImageReader$ListenerHandler r3;
        java.lang.Throwable r5, $r8;

        r0 := @parameter0: java.lang.Object;

        r1 = (java.lang.ref.WeakReference) r0;

        $r6 = virtualinvoke r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.ImageReader) $r6;

        if r2 != null goto label1;

        return;

     label1:
        $r7 = r2.<android.media.ImageReader: java.lang.Object mListenerLock>;

        r4 = $r7;

        entermonitor $r7;

     label2:
        r3 = r2.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        if r3 == null goto label7;

        virtualinvoke r3.<android.os.Handler: boolean sendEmptyMessage(int)>(0);

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private synchronized native void nativeInit(java.lang.Object, int, int, int, int);

    private synchronized native void nativeClose();

    private synchronized native void nativeReleaseImage(android.media.Image);

    private synchronized native android.view.Surface nativeGetSurface();

    private synchronized native int nativeImageSetup(android.media.Image);

    private static native void nativeClassInit();

    static java.lang.Object access$300(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: java.lang.Object mListenerLock>;

        return $r1;
    }

    static android.media.ImageReader$OnImageAvailableListener access$400(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        android.media.ImageReader$OnImageAvailableListener $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener>;

        return $r1;
    }

    static void access$500(android.media.ImageReader, android.media.Image)
    {
        android.media.ImageReader r0;
        android.media.Image r1;

        r0 := @parameter0: android.media.ImageReader;

        r1 := @parameter1: android.media.Image;

        specialinvoke r0.<android.media.ImageReader: void releaseImage(android.media.Image)>(r1);

        return;
    }

    static int access$600(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        return $i0;
    }

    static int access$700(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mWidth>;

        return $i0;
    }

    static int access$800(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mHeight>;

        return $i0;
    }

    static int access$1000(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mNumPlanes>;

        return $i0;
    }

    static void <clinit>()
    {
        <android.media.ImageReader: int ACQUIRE_MAX_IMAGES> = 2;

        <android.media.ImageReader: int ACQUIRE_NO_BUFS> = 1;

        <android.media.ImageReader: int ACQUIRE_SUCCESS> = 0;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.ImageReader: void nativeClassInit()>();

        return;
    }
}
