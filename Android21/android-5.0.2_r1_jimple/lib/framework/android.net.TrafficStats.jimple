public class android.net.TrafficStats extends java.lang.Object
{
    public static final int UNSUPPORTED;
    public static final long KB_IN_BYTES;
    public static final long MB_IN_BYTES;
    public static final long GB_IN_BYTES;
    public static final int UID_REMOVED;
    public static final int UID_TETHERING;
    public static final int TAG_SYSTEM_DOWNLOAD;
    public static final int TAG_SYSTEM_MEDIA;
    public static final int TAG_SYSTEM_BACKUP;
    private static android.net.INetworkStatsService sStatsService;
    private static android.net.NetworkStats sActiveProfilingStart;
    private static java.lang.Object sProfilingLock;
    private static final int TYPE_RX_BYTES;
    private static final int TYPE_RX_PACKETS;
    private static final int TYPE_TX_BYTES;
    private static final int TYPE_TX_PACKETS;
    private static final int TYPE_TCP_RX_PACKETS;
    private static final int TYPE_TCP_TX_PACKETS;

    public void <init>()
    {
        android.net.TrafficStats r0;

        r0 := @this: android.net.TrafficStats;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static synchronized android.net.INetworkStatsService getStatsService()
    {
        android.net.INetworkStatsService $r0, $r1, $r3;
        android.os.IBinder $r2;

        $r0 = <android.net.TrafficStats: android.net.INetworkStatsService sStatsService>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("netstats");

        $r3 = staticinvoke <android.net.INetworkStatsService$Stub: android.net.INetworkStatsService asInterface(android.os.IBinder)>($r2);

        <android.net.TrafficStats: android.net.INetworkStatsService sStatsService> = $r3;

     label1:
        $r1 = <android.net.TrafficStats: android.net.INetworkStatsService sStatsService>;

        return $r1;
    }

    public static void setThreadStatsTag(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsTag(int)>(i0);

        return;
    }

    public static void setThreadStatsTagBackup()
    {
        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(-253);

        return;
    }

    public static int getThreadStatsTag()
    {
        int $i0;

        $i0 = staticinvoke <com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>();

        return $i0;
    }

    public static void clearThreadStatsTag()
    {
        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsTag(int)>(-1);

        return;
    }

    public static void setThreadStatsUid(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsUid(int)>(i0);

        return;
    }

    public static void clearThreadStatsUid()
    {
        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsUid(int)>(-1);

        return;
    }

    public static void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        java.net.Socket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.Socket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void tag(java.net.Socket)>(r0);

        return;
    }

    public static void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        java.net.Socket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.Socket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void untag(java.net.Socket)>(r0);

        return;
    }

    public static void startDataProfiling(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        android.net.NetworkStats $r4, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @parameter0: android.content.Context;

        $r3 = <android.net.TrafficStats: java.lang.Object sProfilingLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        if $r4 == null goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already profiling data");

        throw $r6;

     label2:
        $r5 = staticinvoke <android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)>(r0);

        <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart> = $r5;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static android.net.NetworkStats stopDataProfiling(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r5;
        android.net.NetworkStats r2, r3, $r6, $r7;
        java.lang.Throwable r4, $r9;
        java.lang.IllegalStateException $r8;

        r0 := @parameter0: android.content.Context;

        $r5 = <android.net.TrafficStats: java.lang.Object sProfilingLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        if $r6 != null goto label2;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not profiling data");

        throw $r8;

     label2:
        r2 = staticinvoke <android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)>(r0);

        $r7 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        r3 = staticinvoke <android.net.NetworkStats: android.net.NetworkStats subtract(android.net.NetworkStats,android.net.NetworkStats,android.net.NetworkStats$NonMonotonicObserver,java.lang.Object)>(r2, $r7, null, null);

        <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart> = null;

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r1;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void incrementOperationCount(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.net.TrafficStats: int getThreadStatsTag()>();

        staticinvoke <android.net.TrafficStats: void incrementOperationCount(int,int)>(i1, i0);

        return;
    }

    public static void incrementOperationCount(int, int)
    {
        int i0, i1, i2;
        android.os.RemoteException r0, $r2;
        android.net.INetworkStatsService $r1;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.os.Process: int myUid()>();

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        interfaceinvoke $r1.<android.net.INetworkStatsService: void incrementOperationCount(int,int,int)>(i2, i0, i1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r3;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void closeQuietly(android.net.INetworkStatsSession)
    {
        android.net.INetworkStatsSession r0;
        java.lang.RuntimeException r1, $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: android.net.INetworkStatsSession;

        if r0 == null goto label5;

     label1:
        interfaceinvoke r0.<android.net.INetworkStatsSession: void close()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        throw r1;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static long getMobileTxPackets()
    {
        long l0, $l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = r0[i2];

        $l3 = staticinvoke <android.net.TrafficStats: long getTxPackets(java.lang.String)>(r1);

        l0 = l0 + $l3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static long getMobileRxPackets()
    {
        long l0, $l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = r0[i2];

        $l3 = staticinvoke <android.net.TrafficStats: long getRxPackets(java.lang.String)>(r1);

        l0 = l0 + $l3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static long getMobileTxBytes()
    {
        long l0, $l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = r0[i2];

        $l3 = staticinvoke <android.net.TrafficStats: long getTxBytes(java.lang.String)>(r1);

        l0 = l0 + $l3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static long getMobileRxBytes()
    {
        long l0, $l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r1 = r0[i2];

        $l3 = staticinvoke <android.net.TrafficStats: long getRxBytes(java.lang.String)>(r1);

        l0 = l0 + $l3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static long getMobileTcpRxPackets()
    {
        long l0, l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;
        byte $b4;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r1 = r0[i2];

        l3 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r1, 4);

        $b4 = l3 cmp -1L;

        if $b4 == 0 goto label2;

        l0 = l0 + l3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return l0;
    }

    public static long getMobileTcpTxPackets()
    {
        long l0, l3;
        java.lang.String[] r0;
        int i1, i2;
        java.lang.String r1;
        byte $b4;

        l0 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r1 = r0[i2];

        l3 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r1, 5);

        $b4 = l3 cmp -1L;

        if $b4 == 0 goto label2;

        l0 = l0 + l3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return l0;
    }

    public static long getTxPackets(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r0, 3);

        return $l0;
    }

    public static long getRxPackets(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r0, 1);

        return $l0;
    }

    public static long getTxBytes(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r0, 2);

        return $l0;
    }

    public static long getRxBytes(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetIfaceStat(java.lang.String,int)>(r0, 0);

        return $l0;
    }

    public static long getTotalTxPackets()
    {
        long $l0;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetTotalStat(int)>(3);

        return $l0;
    }

    public static long getTotalRxPackets()
    {
        long $l0;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetTotalStat(int)>(1);

        return $l0;
    }

    public static long getTotalTxBytes()
    {
        long $l0;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetTotalStat(int)>(2);

        return $l0;
    }

    public static long getTotalRxBytes()
    {
        long $l0;

        $l0 = staticinvoke <android.net.TrafficStats: long nativeGetTotalStat(int)>(0);

        return $l0;
    }

    public static long getUidTxBytes(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.net.TrafficStats: long nativeGetUidStat(int,int)>(i0, 2);

        return $l1;
    }

    public static long getUidRxBytes(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.net.TrafficStats: long nativeGetUidStat(int,int)>(i0, 0);

        return $l1;
    }

    public static long getUidTxPackets(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.net.TrafficStats: long nativeGetUidStat(int,int)>(i0, 3);

        return $l1;
    }

    public static long getUidRxPackets(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.net.TrafficStats: long nativeGetUidStat(int,int)>(i0, 1);

        return $l1;
    }

    public static long getUidTcpTxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpRxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpTxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpRxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpTxSegments(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpRxSegments(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpTxPackets(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpRxPackets(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    private static android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)
    {
        android.content.Context r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.net.INetworkStatsService $r2;
        android.net.NetworkStats $r3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: android.content.Context;

        i0 = staticinvoke <android.os.Process: int myUid()>();

     label1:
        $r2 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        $r3 = interfaceinvoke $r2.<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static java.lang.String[] getMobileIfaces()
    {
        android.os.RemoteException r0, $r3;
        android.net.INetworkStatsService $r1;
        java.lang.String[] $r2;
        java.lang.RuntimeException $r4;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        $r2 = interfaceinvoke $r1.<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static native long nativeGetTotalStat(int);

    private static native long nativeGetIfaceStat(java.lang.String, int);

    private static native long nativeGetUidStat(int, int);

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.net.TrafficStats: int TYPE_TCP_TX_PACKETS> = 5;

        <android.net.TrafficStats: int TYPE_TCP_RX_PACKETS> = 4;

        <android.net.TrafficStats: int TYPE_TX_PACKETS> = 3;

        <android.net.TrafficStats: int TYPE_TX_BYTES> = 2;

        <android.net.TrafficStats: int TYPE_RX_PACKETS> = 1;

        <android.net.TrafficStats: int TYPE_RX_BYTES> = 0;

        <android.net.TrafficStats: int TAG_SYSTEM_BACKUP> = -253;

        <android.net.TrafficStats: int TAG_SYSTEM_MEDIA> = -254;

        <android.net.TrafficStats: int TAG_SYSTEM_DOWNLOAD> = -255;

        <android.net.TrafficStats: int UID_TETHERING> = -5;

        <android.net.TrafficStats: int UID_REMOVED> = -4;

        <android.net.TrafficStats: long GB_IN_BYTES> = 1073741824L;

        <android.net.TrafficStats: long MB_IN_BYTES> = 1048576L;

        <android.net.TrafficStats: long KB_IN_BYTES> = 1024L;

        <android.net.TrafficStats: int UNSUPPORTED> = -1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.net.TrafficStats: java.lang.Object sProfilingLock> = $r0;

        return;
    }
}
