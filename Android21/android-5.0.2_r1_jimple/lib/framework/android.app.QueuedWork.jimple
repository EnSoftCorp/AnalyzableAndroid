public class android.app.QueuedWork extends java.lang.Object
{
    private static final java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers;
    private static java.util.concurrent.ExecutorService sSingleThreadExecutor;

    public void <init>()
    {
        android.app.QueuedWork r0;

        r0 := @this: android.app.QueuedWork;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.ExecutorService singleThreadExecutor()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r5;
        java.util.concurrent.ExecutorService $r2, $r3, $r4;

        r0 = class "android/app/QueuedWork";

        entermonitor class "android/app/QueuedWork";

     label1:
        $r2 = <android.app.QueuedWork: java.util.concurrent.ExecutorService sSingleThreadExecutor>;

        if $r2 != null goto label2;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        <android.app.QueuedWork: java.util.concurrent.ExecutorService sSingleThreadExecutor> = $r4;

     label2:
        $r3 = <android.app.QueuedWork: java.util.concurrent.ExecutorService sSingleThreadExecutor>;

        exitmonitor r0;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void add(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = <android.app.QueuedWork: java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static void remove(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = <android.app.QueuedWork: java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public static void waitToFinish()
    {
        java.lang.Runnable r0, $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r1;
        java.lang.Object $r2;

     label1:
        $r1 = <android.app.QueuedWork: java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        $r3 = (java.lang.Runnable) $r2;

        r0 = $r3;

        if $r3 == null goto label2;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        return;
    }

    public static boolean hasPendingWork()
    {
        java.util.concurrent.ConcurrentLinkedQueue $r0;
        boolean $z0, $z1;

        $r0 = <android.app.QueuedWork: java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentLinkedQueue $r0;

        $r0 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        <android.app.QueuedWork: java.util.concurrent.ConcurrentLinkedQueue sPendingWorkFinishers> = $r0;

        <android.app.QueuedWork: java.util.concurrent.ExecutorService sSingleThreadExecutor> = null;

        return;
    }
}
