public class android.filterpacks.base.OutputStreamTarget extends android.filterfw.core.Filter
{
    private java.io.OutputStream mOutputStream;

    public void <init>(java.lang.String)
    {
        android.filterpacks.base.OutputStreamTarget r0;
        java.lang.String r1;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        return;
    }

    public void setupPorts()
    {
        android.filterpacks.base.OutputStreamTarget r0;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        virtualinvoke r0.<android.filterpacks.base.OutputStreamTarget: void addInputPort(java.lang.String)>("data");

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.base.OutputStreamTarget r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2;
        java.nio.ByteBuffer r3;
        java.lang.String r4, $r15, $r19;
        android.filterfw.core.FrameFormat $r5;
        java.lang.Class $r6;
        java.io.OutputStream $r7, $r9;
        byte[] $r8, $r11;
        int $i0;
        java.lang.Object $r10;
        java.io.IOException $r12, r20;
        java.lang.StringBuilder $r13, $r16, $r17, $r18;
        java.lang.RuntimeException $r14;

        r0 := @this: android.filterpacks.base.OutputStreamTarget;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.base.OutputStreamTarget: android.filterfw.core.Frame pullInput(java.lang.String)>("data");

        $r5 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $r6 = virtualinvoke $r5.<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()>();

        if $r6 != class "java/lang/String" goto label1;

        $r10 = virtualinvoke r2.<android.filterfw.core.Frame: java.lang.Object getObjectValue()>();

        r4 = (java.lang.String) $r10;

        $r11 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r11);

        goto label2;

     label1:
        r3 = virtualinvoke r2.<android.filterfw.core.Frame: java.nio.ByteBuffer getData()>();

     label2:
        $r7 = r0.<android.filterpacks.base.OutputStreamTarget: java.io.OutputStream mOutputStream>;

        $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[],int,int)>($r8, 0, $i0);

        $r9 = r0.<android.filterpacks.base.OutputStreamTarget: java.io.OutputStream mOutputStream>;

        virtualinvoke $r9.<java.io.OutputStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r20 = $r12;

        $r14 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OutputStreamTarget: Could not write to stream: ");

        $r15 = virtualinvoke r20.<java.io.IOException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }
}
