public class com.android.internal.widget.LockPatternView extends android.view.View
{
    private static final int ASPECT_SQUARE;
    private static final int ASPECT_LOCK_WIDTH;
    private static final int ASPECT_LOCK_HEIGHT;
    private static final boolean PROFILE_DRAWING;
    private final com.android.internal.widget.LockPatternView$CellState[][] mCellStates;
    private final int mDotSize;
    private final int mDotSizeActivated;
    private final int mPathWidth;
    private boolean mDrawingProfilingStarted;
    private android.graphics.Paint mPaint;
    private android.graphics.Paint mPathPaint;
    private static final int MILLIS_PER_CIRCLE_ANIMATING;
    private static final float DRAG_THRESHHOLD;
    private com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener;
    private java.util.ArrayList mPattern;
    private boolean[][] mPatternDrawLookup;
    private float mInProgressX;
    private float mInProgressY;
    private long mAnimatingPeriodStart;
    private com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode;
    private boolean mInputEnabled;
    private boolean mInStealthMode;
    private boolean mEnableHapticFeedback;
    private boolean mPatternInProgress;
    private float mHitFactor;
    private float mSquareWidth;
    private float mSquareHeight;
    private final android.graphics.Path mCurrentPath;
    private final android.graphics.Rect mInvalidate;
    private final android.graphics.Rect mTmpInvalidateRect;
    private int mAspect;
    private int mRegularColor;
    private int mErrorColor;
    private int mSuccessColor;
    private android.view.animation.Interpolator mFastOutSlowInInterpolator;
    private android.view.animation.Interpolator mLinearOutSlowInInterpolator;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternView r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.LockPatternView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.content.res.TypedArray r3;
        java.lang.String r4, $r14, $r15, $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.graphics.Paint $r5, $r6, $r17, $r19, $r23, $r24, $r26, $r28, $r32, $r34, $r35;
        java.util.ArrayList $r7;
        boolean[][] $r8;
        com.android.internal.widget.LockPatternView$DisplayMode $r9;
        android.graphics.Path $r10;
        android.graphics.Rect $r11, $r12;
        int[] $r13;
        boolean $z0, $z1, $z2;
        android.content.res.Resources $r18, $r20, $r21, $r29, $r30, $r31;
        android.graphics.Paint$Style $r22;
        android.graphics.Paint$Cap $r25;
        android.graphics.Paint$Join $r27;
        float $f0, $f1;
        com.android.internal.widget.LockPatternView$CellState[][] $r33, $r37, $r42;
        com.android.internal.widget.LockPatternView$CellState $r36, $r40;
        android.view.animation.Interpolator $r38, $r39;
        com.android.internal.widget.LockPatternView$CellState[] $r41, $r43;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<com.android.internal.widget.LockPatternView: boolean mDrawingProfilingStarted> = 0;

        $r5 = new android.graphics.Paint;

        specialinvoke $r5.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint> = $r5;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(9);

        r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern> = $r7;

        $r8 = newmultiarray (boolean)[3][3];

        r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup> = $r8;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = -1.0F;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = -1.0F;

        $r9 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r9;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = 0;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        r0.<com.android.internal.widget.LockPatternView: float mHitFactor> = 0.6F;

        $r10 = new android.graphics.Path;

        specialinvoke $r10.<android.graphics.Path: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath> = $r10;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect> = $r12;

        $r13 = <com.android.internal.R$styleable: int[] LockPatternView>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r2, $r13);

        r4 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        $r14 = "square";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

        goto label4;

     label1:
        $r15 = "lock_width";

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 1;

        goto label4;

     label2:
        $r16 = "lock_height";

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label3;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 2;

        goto label4;

     label3:
        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setClickable(boolean)>(1);

        $r17 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r17.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r19 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r19.<android.graphics.Paint: void setDither(boolean)>(1);

        $r18 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r18.<android.content.res.Resources: int getColor(int)>(17170506);

        r0.<com.android.internal.widget.LockPatternView: int mRegularColor> = $i3;

        $r20 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke $r20.<android.content.res.Resources: int getColor(int)>(17170508);

        r0.<com.android.internal.widget.LockPatternView: int mErrorColor> = $i4;

        $r21 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i7 = virtualinvoke $r21.<android.content.res.Resources: int getColor(int)>(17170507);

        r0.<com.android.internal.widget.LockPatternView: int mSuccessColor> = $i7;

        $i8 = r0.<com.android.internal.widget.LockPatternView: int mRegularColor>;

        $i5 = virtualinvoke r3.<android.content.res.TypedArray: int getColor(int,int)>(2, $i8);

        r0.<com.android.internal.widget.LockPatternView: int mRegularColor> = $i5;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mErrorColor>;

        $i11 = virtualinvoke r3.<android.content.res.TypedArray: int getColor(int,int)>(3, $i6);

        r0.<com.android.internal.widget.LockPatternView: int mErrorColor> = $i11;

        $i12 = r0.<com.android.internal.widget.LockPatternView: int mSuccessColor>;

        $i9 = virtualinvoke r3.<android.content.res.TypedArray: int getColor(int,int)>(4, $i12);

        r0.<com.android.internal.widget.LockPatternView: int mSuccessColor> = $i9;

        $i10 = r0.<com.android.internal.widget.LockPatternView: int mRegularColor>;

        i0 = virtualinvoke r3.<android.content.res.TypedArray: int getColor(int,int)>(1, $i10);

        $r24 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r24.<android.graphics.Paint: void setColor(int)>(i0);

        $r23 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r22 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r23.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r22);

        $r28 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r27 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        virtualinvoke $r28.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r27);

        $r26 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r25 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r26.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r25);

        $r29 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i14 = virtualinvoke $r29.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105049);

        r0.<com.android.internal.widget.LockPatternView: int mPathWidth> = $i14;

        $r32 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $i13 = r0.<com.android.internal.widget.LockPatternView: int mPathWidth>;

        $f0 = (float) $i13;

        virtualinvoke $r32.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $r31 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i15 = virtualinvoke $r31.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105050);

        r0.<com.android.internal.widget.LockPatternView: int mDotSize> = $i15;

        $r30 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i16 = virtualinvoke $r30.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105051);

        r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated> = $i16;

        $r35 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r35.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r34 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r34.<android.graphics.Paint: void setDither(boolean)>(1);

        $r33 = newmultiarray (com.android.internal.widget.LockPatternView$CellState)[3][3];

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates> = $r33;

        i1 = 0;

     label5:
        if i1 >= 3 goto label8;

        i2 = 0;

     label6:
        if i2 >= 3 goto label7;

        $r37 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r41 = $r37[i1];

        $r36 = new com.android.internal.widget.LockPatternView$CellState;

        specialinvoke $r36.<com.android.internal.widget.LockPatternView$CellState: void <init>()>();

        $r41[i2] = $r36;

        $r42 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r43 = $r42[i1];

        $r40 = $r43[i2];

        $i17 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $f1 = (float) $i17;

        $r40.<com.android.internal.widget.LockPatternView$CellState: float size> = $f1;

        i2 = i2 + 1;

        goto label6;

     label7:
        i1 = i1 + 1;

        goto label5;

     label8:
        $r39 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, 17563661);

        r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator> = $r39;

        $r38 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, 17563662);

        r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mLinearOutSlowInInterpolator> = $r38;

        return;
    }

    public com.android.internal.widget.LockPatternView$CellState[][] getCellStates()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState[][] $r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        return $r1;
    }

    public boolean isInStealthMode()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        return $z0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        return $z0;
    }

    public void setInStealthMode(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = z0;

        return;
    }

    public void setTactileFeedbackEnabled(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = z0;

        return;
    }

    public void setOnPatternListener(com.android.internal.widget.LockPatternView$OnPatternListener)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$OnPatternListener;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener> = r1;

        return;
    }

    public void setPattern(com.android.internal.widget.LockPatternView$DisplayMode, java.util.List)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode r1;
        java.util.List r2;
        java.util.Iterator r3;
        com.android.internal.widget.LockPatternView$Cell r4;
        java.util.ArrayList $r5, $r6;
        boolean $z1;
        java.lang.Object $r7;
        boolean[][] $r8;
        int $i0, $i1;
        boolean[] $r9;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r2 := @parameter1: java.util.List;

        $r5 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        $r6 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r7;

        $r8 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r9 = $r8[$i0];

        $i1 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r9[$i1] = 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)>(r1);

        return;
    }

    public void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode r1, $r3;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.util.ArrayList $r4, $r5;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.Object $r6;
        float $f0, $f1;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = r1;

        $r3 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if r1 != $r3 goto label2;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("you must have a pattern to animate if you want to set the display mode to animate");

        throw $r7;

     label1:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart> = $l1;

        $r5 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r6;

        $i2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i2);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f0;

        $i3 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $f1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i3);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    private void notifyCellAdded()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040292);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke $r3.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)>($r2);

     label1:
        return;
    }

    private void notifyPatternStarted()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040290);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        interfaceinvoke $r2.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternStart()>();

     label1:
        return;
    }

    private void notifyPatternDetected()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040293);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke $r3.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)>($r2);

     label1:
        return;
    }

    private void notifyPatternCleared()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040291);

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        interfaceinvoke $r2.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCleared()>();

     label1:
        return;
    }

    public void clearPattern()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        return;
    }

    private void resetPattern()
    {
        com.android.internal.widget.LockPatternView r0;
        java.util.ArrayList $r1;
        com.android.internal.widget.LockPatternView$DisplayMode $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r2;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    private void clearPatternDrawLookup()
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1;
        boolean[][] $r1;
        boolean[] $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 = 0;

     label1:
        if i0 >= 3 goto label4;

        i1 = 0;

     label2:
        if i1 >= 3 goto label3;

        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i0];

        $r2[i1] = 0;

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public void disableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 0;

        return;
    }

    public void enableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $i8 = i0 - $i6;

        $i7 = r0.<com.android.internal.widget.LockPatternView: int mPaddingRight>;

        i4 = $i8 - $i7;

        $f0 = (float) i4;

        $f1 = $f0 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareWidth> = $f1;

        $i9 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $i11 = i1 - $i9;

        $i10 = r0.<com.android.internal.widget.LockPatternView: int mPaddingBottom>;

        i5 = $i11 - $i10;

        $f2 = (float) i5;

        $f3 = $f2 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareHeight> = $f3;

        return;
    }

    private int resolveMeasured(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, $i3, i4;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        lookupswitch($i3)
        {
            case -2147483648: goto label2;
            case 0: goto label1;
            case 1073741824: goto label3;
            default: goto label3;
        };

     label1:
        i4 = i1;

        goto label4;

     label2:
        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i1);

        goto label4;

     label3:
        i4 = i2;

     label4:
        return i4;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()>();

        i3 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()>();

        i4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i0, i2);

        i5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i1, i3);

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mAspect>;

        tableswitch($i6)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        i5 = $i7;

        i4 = $i7;

        goto label4;

     label2:
        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        goto label4;

     label3:
        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setMeasuredDimension(int,int)>(i4, i5);

        return;
    }

    private com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        com.android.internal.widget.LockPatternView$Cell r1, r2, r4;
        java.util.ArrayList r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19;
        boolean $z0, $z1, $z3;
        boolean[][] $r5;
        boolean[] $r6;
        java.lang.Object $r7;
        byte $b17, $b18;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell checkForNewHit(float,float)>(f0, f1);

        if r1 == null goto label10;

        r2 = null;

        r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label07;

        $i7 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $i6 = $i7 - 1;

        $r7 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r7;

        $i10 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $i8 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i0 = $i10 - $i8;

        $i12 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $i9 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        i1 = $i12 - $i9;

        i2 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i3 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $i11 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if $i11 != 2 goto label03;

        $i19 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i19 == 1 goto label03;

        $i16 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        if i0 <= 0 goto label01;

        $b17 = 1;

        goto label02;

     label01:
        $b17 = -1;

     label02:
        i2 = $i16 + $b17;

     label03:
        $i13 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i13 != 2 goto label06;

        $i15 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if $i15 == 1 goto label06;

        $i14 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        if i1 <= 0 goto label04;

        $b18 = 1;

        goto label05;

     label04:
        $b18 = -1;

     label05:
        i3 = $i14 + $b18;

     label06:
        r2 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i2, i3);

     label07:
        if r2 == null goto label08;

        $r5 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i4 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r6 = $r5[$i4];

        $i5 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z3 = $r6[$i5];

        if $z3 != 0 goto label08;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r2);

     label08:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r1);

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        if $z1 == 0 goto label09;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean performHapticFeedback(int,int)>(1, 3);

     label09:
        return r1;

     label10:
        return null;
    }

    private void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$Cell r1;
        boolean[][] $r2;
        int $i0, $i1;
        boolean[] $r3;
        java.util.ArrayList $r4;
        boolean $z1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$Cell;

        $r2 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r3 = $r2[$i0];

        $i1 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r3[$i1] = 1;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startCellActivatedAnimation(com.android.internal.widget.LockPatternView$Cell)>(r1);

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyCellAdded()>();

        return;
    }

    private void startCellActivatedAnimation(com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$Cell r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.LockPatternView$CellState[][] $r3;
        com.android.internal.widget.LockPatternView$CellState[] $r4;
        com.android.internal.widget.LockPatternView$1 $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.view.animation.Interpolator $r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$Cell;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $i0 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r4 = $r3[$i0];

        $i1 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        r2 = $r4[$i1];

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $f0 = (float) $i2;

        $i3 = r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated>;

        $f1 = (float) $i3;

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mLinearOutSlowInInterpolator>;

        $r5 = new com.android.internal.widget.LockPatternView$1;

        specialinvoke $r5.<com.android.internal.widget.LockPatternView$1: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r2);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startSizeAnimation(float,float,long,android.view.animation.Interpolator,com.android.internal.widget.LockPatternView$CellState,java.lang.Runnable)>($f0, $f1, 96L, $r6, r2, $r5);

        $f2 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $i4 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i4);

        $i5 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $f5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i5);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startLineEndAnimation(com.android.internal.widget.LockPatternView$CellState,float,float,float,float)>(r2, $f2, $f4, $f3, $f5);

        return;
    }

    private void startLineEndAnimation(com.android.internal.widget.LockPatternView$CellState, float, float, float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        float f0, f1, f2, f3;
        android.animation.ValueAnimator r2;
        float[] $r3;
        com.android.internal.widget.LockPatternView$2 $r4;
        com.android.internal.widget.LockPatternView$3 $r5;
        android.view.animation.Interpolator $r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r3 = newarray (float)[2];

        $r3[0] = 0.0F;

        $r3[1] = 1.0F;

        r2 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>($r3);

        $r4 = new com.android.internal.widget.LockPatternView$2;

        specialinvoke $r4.<com.android.internal.widget.LockPatternView$2: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState,float,float,float,float)>(r0, r1, f0, f2, f1, f3);

        virtualinvoke r2.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r4);

        $r5 = new com.android.internal.widget.LockPatternView$3;

        specialinvoke $r5.<com.android.internal.widget.LockPatternView$3: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r1);

        virtualinvoke r2.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r5);

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator>;

        virtualinvoke r2.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r6);

        virtualinvoke r2.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(100L);

        virtualinvoke r2.<android.animation.ValueAnimator: void start()>();

        r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator> = r2;

        return;
    }

    private void startSizeAnimation(float, float, long, android.view.animation.Interpolator, com.android.internal.widget.LockPatternView$CellState, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        long l0;
        android.view.animation.Interpolator r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        java.lang.Runnable r3;
        android.animation.ValueAnimator r4;
        float[] $r5;
        com.android.internal.widget.LockPatternView$4 $r6;
        com.android.internal.widget.LockPatternView$5 $r8;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        l0 := @parameter2: long;

        r1 := @parameter3: android.view.animation.Interpolator;

        r2 := @parameter4: com.android.internal.widget.LockPatternView$CellState;

        r3 := @parameter5: java.lang.Runnable;

        $r5 = newarray (float)[2];

        $r5[0] = f0;

        $r5[1] = f1;

        r4 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>($r5);

        $r6 = new com.android.internal.widget.LockPatternView$4;

        specialinvoke $r6.<com.android.internal.widget.LockPatternView$4: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r2);

        virtualinvoke r4.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r6);

        if r3 == null goto label1;

        $r8 = new com.android.internal.widget.LockPatternView$5;

        specialinvoke $r8.<com.android.internal.widget.LockPatternView$5: void <init>(com.android.internal.widget.LockPatternView,java.lang.Runnable)>(r0, r3);

        virtualinvoke r4.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r8);

     label1:
        virtualinvoke r4.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r1);

        virtualinvoke r4.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(l0);

        virtualinvoke r4.<android.animation.ValueAnimator: void start()>();

        return;
    }

    private com.android.internal.widget.LockPatternView$Cell checkForNewHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        int i0, i1;
        boolean[][] $r1;
        boolean[] $r2;
        boolean $z0;
        com.android.internal.widget.LockPatternView$Cell $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getRowHit(float)>(f1);

        if i0 >= 0 goto label1;

        return null;

     label1:
        i1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getColumnHit(float)>(f0);

        if i1 >= 0 goto label2;

        return null;

     label2:
        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i0];

        $z0 = $r2[i1];

        if $z0 == 0 goto label3;

        return null;

     label3:
        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i0, i1);

        return $r3;
    }

    private int getRowHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0, $i1;
        byte $b2, $b3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = f1 * $f5;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f8 = (float) $i1;

        $f6 = f1 - f2;

        $f7 = $f6 / 2.0F;

        f3 = $f8 + $f7;

        i0 = 0;

     label1:
        if i0 >= 3 goto label3;

        $f9 = (float) i0;

        $f10 = f1 * $f9;

        f4 = f3 + $f10;

        $b2 = f0 cmpl f4;

        if $b2 < 0 goto label2;

        $f11 = f4 + f2;

        $b3 = f0 cmpg $f11;

        if $b3 > 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int getColumnHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0, $i1;
        byte $b2, $b3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = f1 * $f5;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f8 = (float) $i1;

        $f6 = f1 - f2;

        $f7 = $f6 / 2.0F;

        f3 = $f8 + $f7;

        i0 = 0;

     label1:
        if i0 >= 3 goto label3;

        $f9 = (float) i0;

        $f10 = f1 * $f9;

        f4 = f3 + $f10;

        $b2 = f0 cmpl f4;

        if $b2 < 0 goto label2;

        $f11 = f4 + f2;

        $b3 = f0 cmpg $f11;

        if $b3 > 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        int i0;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z0 == 0 goto label5;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch(i0)
        {
            case 7: goto label2;
            case 8: goto label4;
            case 9: goto label1;
            case 10: goto label3;
            default: goto label4;
        };

     label1:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(0);

        goto label4;

     label2:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(2);

        goto label4;

     label3:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(1);

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

     label5:
        $z1 = specialinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean isEnabled()>();

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label8;
        };

     label3:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionDown(android.view.MotionEvent)>(r1);

        return 1;

     label4:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionUp(android.view.MotionEvent)>(r1);

        return 1;

     label5:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionMove(android.view.MotionEvent)>(r1);

        return 1;

     label6:
        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z2 == 0 goto label7;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

     label7:
        return 1;

     label8:
        return 0;
    }

    private void handleActionMove(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean z0, $z1;
        com.android.internal.widget.LockPatternView$Cell r2, r4;
        java.util.ArrayList r3, $r11;
        android.graphics.Rect $r5, $r6, $r7, $r8, $r9, $r10, $r13;
        byte $b5, $b15;
        java.lang.Object $r12;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $i3 = r0.<com.android.internal.widget.LockPatternView: int mPathWidth>;

        f0 = (float) $i3;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getHistorySize()>();

        $r5 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r5.<android.graphics.Rect: void setEmpty()>();

        z0 = 0;

        i1 = 0;

     label01:
        $i4 = i0 + 1;

        if i1 >= $i4 goto label11;

        if i1 >= i0 goto label02;

        $f17 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalX(int)>(i1);

        goto label03;

     label02:
        $f17 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

     label03:
        f1 = $f17;

        if i1 >= i0 goto label04;

        $f18 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalY(int)>(i1);

        goto label05;

     label04:
        $f18 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

     label05:
        f2 = $f18;

        r2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f1, f2);

        $r11 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if r2 == null goto label06;

        if i2 != 1 goto label06;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

     label06:
        $f20 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f21 = f1 - $f20;

        f3 = staticinvoke <java.lang.Math: float abs(float)>($f21);

        $f19 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $f22 = f2 - $f19;

        f4 = staticinvoke <java.lang.Math: float abs(float)>($f22);

        $b5 = f3 cmpl 0.0F;

        if $b5 > 0 goto label07;

        $b15 = f4 cmpl 0.0F;

        if $b15 <= 0 goto label08;

     label07:
        z0 = 1;

     label08:
        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z1 == 0 goto label10;

        if i2 <= 0 goto label10;

        r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i7 = i2 - 1;

        $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r12;

        $i6 = r4.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i6);

        $i8 = r4.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f6 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i8);

        $f24 = staticinvoke <java.lang.Math: float min(float,float)>(f5, f1);

        f8 = $f24 - f0;

        $f23 = staticinvoke <java.lang.Math: float max(float,float)>(f5, f1);

        f7 = $f23 + f0;

        $f26 = staticinvoke <java.lang.Math: float min(float,float)>(f6, f2);

        f10 = $f26 - f0;

        $f25 = staticinvoke <java.lang.Math: float max(float,float)>(f6, f2);

        f9 = $f25 + f0;

        if r2 == null goto label09;

        $f27 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f12 = $f27 * 0.5F;

        $f30 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f11 = $f30 * 0.5F;

        $i13 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f14 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i13);

        $i14 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f13 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i14);

        $f28 = f14 - f12;

        f8 = staticinvoke <java.lang.Math: float min(float,float)>($f28, f8);

        $f29 = f14 + f12;

        f7 = staticinvoke <java.lang.Math: float max(float,float)>($f29, f7);

        $f31 = f13 - f11;

        f10 = staticinvoke <java.lang.Math: float min(float,float)>($f31, f10);

        $f32 = f13 + f11;

        f9 = staticinvoke <java.lang.Math: float max(float,float)>($f32, f9);

     label09:
        $r13 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        $i9 = staticinvoke <java.lang.Math: int round(float)>(f8);

        $i12 = staticinvoke <java.lang.Math: int round(float)>(f10);

        $i11 = staticinvoke <java.lang.Math: int round(float)>(f7);

        $i10 = staticinvoke <java.lang.Math: int round(float)>(f9);

        virtualinvoke $r13.<android.graphics.Rect: void union(int,int,int,int)>($i9, $i12, $i11, $i10);

     label10:
        i1 = i1 + 1;

        goto label01;

     label11:
        $f16 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f16;

        $f15 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f15;

        if z0 == 0 goto label12;

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r6.<android.graphics.Rect: void union(android.graphics.Rect)>($r7);

        $r9 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(android.graphics.Rect)>($r9);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r10 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r10);

     label12:
        return;
    }

    private void sendAccessEvent(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(i0);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void announceForAccessibility(java.lang.CharSequence)>($r2);

        return;
    }

    private void handleActionUp(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        java.util.ArrayList $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void cancelLineAnimations()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternDetected()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label1:
        return;
    }

    private void cancelLineAnimations()
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1;
        com.android.internal.widget.LockPatternView$CellState r1;
        com.android.internal.widget.LockPatternView$CellState[][] $r2;
        com.android.internal.widget.LockPatternView$CellState[] $r3;
        android.animation.ValueAnimator $r4, $r5;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 = 0;

     label1:
        if i0 >= 3 goto label5;

        i1 = 0;

     label2:
        if i1 >= 3 goto label4;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r3 = $r2[i0];

        r1 = $r3[i1];

        $r4 = r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator>;

        if $r4 == null goto label3;

        $r5 = r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator>;

        virtualinvoke $r5.<android.animation.ValueAnimator: void cancel()>();

        r1.<com.android.internal.widget.LockPatternView$CellState: float lineEndX> = 1.4E-45F;

        r1.<com.android.internal.widget.LockPatternView$CellState: float lineEndY> = 1.4E-45F;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }

    private void handleActionDown(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        com.android.internal.widget.LockPatternView$Cell r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.LockPatternView$DisplayMode $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f0, f1);

        if r2 == null goto label1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 1;

        $r3 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r3;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

        goto label2;

     label1:
        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z0 == 0 goto label2;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

     label2:
        if r2 == null goto label3;

        $i0 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i0);

        $i1 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i1);

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f4 = $f6 / 2.0F;

        $f8 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f5 = $f8 / 2.0F;

        $f7 = f2 - f4;

        $i5 = (int) $f7;

        $f10 = f3 - f5;

        $i3 = (int) $f10;

        $f9 = f2 + f4;

        $i4 = (int) $f9;

        $f11 = f3 + f5;

        $i2 = (int) $f11;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(int,int,int,int)>($i5, $i3, $i4, $i2);

     label3:
        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = f0;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = f1;

        return;
    }

    private float getCenterXForColumn(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f3 = (float) $i1;

        $f1 = (float) i0;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f2 = $f1 * $f0;

        $f6 = $f3 + $f2;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f5 = $f4 / 2.0F;

        $f7 = $f6 + $f5;

        return $f7;
    }

    private float getCenterYForRow(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f3 = (float) $i1;

        $f1 = (float) i0;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f2 = $f1 * $f0;

        $f6 = $f3 + $f2;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f5 = $f4 / 2.0F;

        $f7 = $f6 + $f5;

        return $f7;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        java.util.ArrayList r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32;
        boolean[][] r3;
        com.android.internal.widget.LockPatternView$Cell r4, r5, r6, r28;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28, f29, f30, f31, f32, f33, f34, f35;
        com.android.internal.widget.LockPatternView$DisplayMode $r7, $r8, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        android.graphics.Paint $r9, $r10, $r11, $r18;
        java.lang.Object $r12, $r22, $r23, $r24;
        boolean[] $r15, $r21, $r25;
        com.android.internal.widget.LockPatternView$CellState[] $r16, $r19;
        com.android.internal.widget.LockPatternView$CellState[][] $r17, $r20;
        byte $b13, $b14;
        long $l18, $l19, $l22;
        android.graphics.Path r26;
        com.android.internal.widget.LockPatternView$CellState r27, r29;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r3 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r8 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r7 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r8 != $r7 goto label06;

        $i17 = i0 + 1;

        i1 = $i17 * 700;

        $l18 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l19 = r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart>;

        $l22 = $l18 - $l19;

        $i23 = (int) $l22;

        i2 = $i23 % i1;

        i3 = i2 / 700;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        i4 = 0;

     label01:
        if i4 >= i3 goto label02;

        $r24 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r24;

        $i28 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r25 = r3[$i28];

        $i29 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r25[$i29] = 1;

        i4 = i4 + 1;

        goto label01;

     label02:
        if i3 <= 0 goto label03;

        if i3 >= i0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z6 = $z5;

        if z6 == 0 goto label05;

        $i24 = i2 % 700;

        $f20 = (float) $i24;

        f27 = $f20 / 700.0F;

        $i20 = i3 - 1;

        $r22 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i20);

        r5 = (com.android.internal.widget.LockPatternView$Cell) $r22;

        $i21 = r5.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i21);

        $i26 = r5.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i26);

        $r23 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r6 = (com.android.internal.widget.LockPatternView$Cell) $r23;

        $i27 = r6.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f22 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i27);

        $f21 = $f22 - f0;

        f2 = f27 * $f21;

        $i25 = r6.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $f23 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i25);

        $f25 = $f23 - f1;

        f3 = f27 * $f25;

        $f24 = f0 + f2;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f24;

        $f26 = f1 + f3;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f26;

     label05:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label06:
        r26 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath>;

        virtualinvoke r26.<android.graphics.Path: void rewind()>();

        i30 = 0;

     label07:
        if i30 >= 3 goto label10;

        f28 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>(i30);

        i31 = 0;

     label08:
        if i31 >= 3 goto label09;

        $r20 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r19 = $r20[i30];

        r27 = $r19[i31];

        f29 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>(i31);

        $f16 = r27.<com.android.internal.widget.LockPatternView$CellState: float size>;

        $f14 = r27.<com.android.internal.widget.LockPatternView$CellState: float scale>;

        f30 = $f16 * $f14;

        f31 = r27.<com.android.internal.widget.LockPatternView$CellState: float translateY>;

        $i16 = (int) f29;

        $f17 = (float) $i16;

        $i15 = (int) f28;

        $f15 = (float) $i15;

        $f19 = $f15 + f31;

        $r21 = r3[i30];

        $z4 = $r21[i31];

        $f18 = r27.<com.android.internal.widget.LockPatternView$CellState: float alpha>;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void drawCircle(android.graphics.Canvas,float,float,float,boolean,float)>(r1, $f17, $f19, f30, $z4, $f18);

        i31 = i31 + 1;

        goto label08;

     label09:
        i30 = i30 + 1;

        goto label07;

     label10:
        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z0 != 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        z7 = $z3;

        if z7 == 0 goto label20;

        $r9 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $i5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getCurrentColor(boolean)>(1);

        virtualinvoke $r9.<android.graphics.Paint: void setColor(int)>($i5);

        z8 = 0;

        f32 = 0.0F;

        f33 = 0.0F;

        i32 = 0;

     label13:
        if i32 >= i0 goto label18;

        $r12 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        r28 = (com.android.internal.widget.LockPatternView$Cell) $r12;

        $i7 = r28.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r15 = r3[$i7];

        $i9 = r28.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z2 = $r15[$i9];

        if $z2 != 0 goto label14;

        goto label18;

     label14:
        z8 = 1;

        $i8 = r28.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f34 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i8);

        $i11 = r28.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f35 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i11);

        if i32 == 0 goto label17;

        $r17 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $i10 = r28.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r16 = $r17[$i10];

        $i12 = r28.<com.android.internal.widget.LockPatternView$Cell: int column>;

        r29 = $r16[$i12];

        virtualinvoke r26.<android.graphics.Path: void rewind()>();

        virtualinvoke r26.<android.graphics.Path: void moveTo(float,float)>(f32, f33);

        $f10 = r29.<com.android.internal.widget.LockPatternView$CellState: float lineEndX>;

        $b14 = $f10 cmpl 1.4E-45F;

        if $b14 == 0 goto label15;

        $f11 = r29.<com.android.internal.widget.LockPatternView$CellState: float lineEndY>;

        $b13 = $f11 cmpl 1.4E-45F;

        if $b13 == 0 goto label15;

        $f12 = r29.<com.android.internal.widget.LockPatternView$CellState: float lineEndX>;

        $f13 = r29.<com.android.internal.widget.LockPatternView$CellState: float lineEndY>;

        virtualinvoke r26.<android.graphics.Path: void lineTo(float,float)>($f12, $f13);

        goto label16;

     label15:
        virtualinvoke r26.<android.graphics.Path: void lineTo(float,float)>(f34, f35);

     label16:
        $r18 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r26, $r18);

     label17:
        f32 = f34;

        f33 = f35;

        i32 = i32 + 1;

        goto label13;

     label18:
        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z1 != 0 goto label19;

        $r14 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r13 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r14 != $r13 goto label20;

     label19:
        if z8 == 0 goto label20;

        virtualinvoke r26.<android.graphics.Path: void rewind()>();

        virtualinvoke r26.<android.graphics.Path: void moveTo(float,float)>(f32, f33);

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        virtualinvoke r26.<android.graphics.Path: void lineTo(float,float)>($f6, $f4);

        $r10 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $f7 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $f9 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float calculateLastSegmentAlpha(float,float,float,float)>($f7, $f5, f32, f33);

        $f8 = $f9 * 255.0F;

        $i6 = (int) $f8;

        virtualinvoke $r10.<android.graphics.Paint: void setAlpha(int)>($i6);

        $r11 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r26, $r11);

     label20:
        return;
    }

    private float calculateLastSegmentAlpha(float, float, float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        double $d0, $d1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 = f0 - f2;

        f5 = f1 - f3;

        $f9 = f4 * f4;

        $f8 = f5 * f5;

        $f10 = $f9 + $f8;

        $d0 = (double) $f10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f6 = (float) $d1;

        $f11 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f7 = f6 / $f11;

        $f12 = f7 - 0.3F;

        $f13 = $f12 * 4.0F;

        $f15 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f13);

        $f14 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f15);

        return $f14;
    }

    private int getCurrentColor(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2;
        com.android.internal.widget.LockPatternView$DisplayMode $r1, $r2, $r3, $r4, $r5, $r6, $r10;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.String $r11;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z2 == 0 goto label2;

     label1:
        $i0 = r0.<com.android.internal.widget.LockPatternView: int mRegularColor>;

        return $i0;

     label2:
        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r1 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r2 != $r1 goto label3;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mErrorColor>;

        return $i2;

     label3:
        $r4 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r3 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        if $r4 == $r3 goto label4;

        $r6 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r5 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r6 != $r5 goto label5;

     label4:
        $i1 = r0.<com.android.internal.widget.LockPatternView: int mSuccessColor>;

        return $i1;

     label5:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown display mode ");

        $r10 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    private void drawCircle(android.graphics.Canvas, float, float, float, boolean, float)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        float f0, f1, f2, f3, $f4, $f5;
        boolean z0;
        android.graphics.Paint $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        z0 := @parameter4: boolean;

        f3 := @parameter5: float;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getCurrentColor(boolean)>(z0);

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $f4 = f3 * 255.0F;

        $i1 = (int) $f4;

        virtualinvoke $r3.<android.graphics.Paint: void setAlpha(int)>($i1);

        $f5 = f2 / 2.0F;

        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>(f0, f1, $f5, $r4);

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable r1;
        com.android.internal.widget.LockPatternView$SavedState $r2;
        java.util.ArrayList $r3;
        java.lang.String $r4;
        com.android.internal.widget.LockPatternView$DisplayMode $r5;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $r2 = new com.android.internal.widget.LockPatternView$SavedState;

        $r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $r4 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>($r3);

        $r5 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $i0 = virtualinvoke $r5.<com.android.internal.widget.LockPatternView$DisplayMode: int ordinal()>();

        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        specialinvoke $r2.<com.android.internal.widget.LockPatternView$SavedState: void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean,com.android.internal.widget.LockPatternView$1)>(r1, $r4, $i0, $z2, $z1, $z0, null);

        return $r2;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable r1, $r3;
        com.android.internal.widget.LockPatternView$SavedState r2;
        com.android.internal.widget.LockPatternView$DisplayMode $r4, $r8;
        java.lang.String $r5;
        java.util.List $r6;
        com.android.internal.widget.LockPatternView$DisplayMode[] $r7;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.os.Parcelable;

        r2 = (com.android.internal.widget.LockPatternView$SavedState) r1;

        $r3 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r3);

        $r4 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        $r5 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()>();

        $r6 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>($r5);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)>($r4, $r6);

        $r7 = staticinvoke <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode[] values()>();

        $i0 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()>();

        $r8 = $r7[$i0];

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r8;

        $z0 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isInputEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = $z0;

        $z1 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isInStealthMode()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = $z1;

        $z2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$SavedState: boolean isTactileFeedbackEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = $z2;

        return;
    }

    static int access$000(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated>;

        return $i0;
    }

    static int access$100(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        return $i0;
    }

    static android.view.animation.Interpolator access$200(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.animation.Interpolator $r1;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator>;

        return $r1;
    }

    static void access$300(com.android.internal.widget.LockPatternView, float, float, long, android.view.animation.Interpolator, com.android.internal.widget.LockPatternView$CellState, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        long l0;
        android.view.animation.Interpolator r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        java.lang.Runnable r3;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        r1 := @parameter4: android.view.animation.Interpolator;

        r2 := @parameter5: com.android.internal.widget.LockPatternView$CellState;

        r3 := @parameter6: java.lang.Runnable;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startSizeAnimation(float,float,long,android.view.animation.Interpolator,com.android.internal.widget.LockPatternView$CellState,java.lang.Runnable)>(f0, f1, l0, r1, r2, r3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternView: float DRAG_THRESHHOLD> = 0.0F;

        <com.android.internal.widget.LockPatternView: int MILLIS_PER_CIRCLE_ANIMATING> = 700;

        <com.android.internal.widget.LockPatternView: boolean PROFILE_DRAWING> = 0;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_HEIGHT> = 2;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_WIDTH> = 1;

        <com.android.internal.widget.LockPatternView: int ASPECT_SQUARE> = 0;

        return;
    }
}
