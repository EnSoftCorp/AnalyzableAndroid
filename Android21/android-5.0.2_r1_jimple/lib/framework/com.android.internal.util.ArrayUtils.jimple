public class com.android.internal.util.ArrayUtils extends java.lang.Object
{
    private static final int CACHE_SIZE;
    private static java.lang.Object[] sCache;

    private void <init>()
    {
        com.android.internal.util.ArrayUtils r0;

        r0 := @this: com.android.internal.util.ArrayUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] newUnpaddedByteArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        byte[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        return $r4;
    }

    public static char[] newUnpaddedCharArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        char[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Character: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (char[]) $r2;

        $r4 = (char[]) $r3;

        return $r4;
    }

    public static int[] newUnpaddedIntArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        int[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (int[]) $r2;

        $r4 = (int[]) $r3;

        return $r4;
    }

    public static boolean[] newUnpaddedBooleanArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        boolean[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (boolean[]) $r2;

        $r4 = (boolean[]) $r3;

        return $r4;
    }

    public static long[] newUnpaddedLongArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        long[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Long: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (long[]) $r2;

        $r4 = (long[]) $r3;

        return $r4;
    }

    public static float[] newUnpaddedFloatArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        float[] $r3, $r4;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = <java.lang.Float: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>($r1, i0);

        $r3 = (float[]) $r2;

        $r4 = (float[]) $r3;

        return $r4;
    }

    public static java.lang.Object[] newUnpaddedObjectArray(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2, $r3;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r1 = virtualinvoke $r0.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>(class "java/lang/Object", i0);

        $r2 = (java.lang.Object[]) $r1;

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    public static java.lang.Object[] newUnpaddedArray(java.lang.Class, int)
    {
        java.lang.Class r0;
        int i0;
        dalvik.system.VMRuntime $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r2 = virtualinvoke $r1.<dalvik.system.VMRuntime: java.lang.Object newUnpaddedArray(java.lang.Class,int)>(r0, i0);

        $r3 = (java.lang.Object[]) $r2;

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public static boolean equals(byte[], byte[], int)
    {
        byte[] r0, r1;
        int i0, i1, $i2, $i3;
        byte $b4, $b5;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        if $i2 < i0 goto label3;

        $i3 = lengthof r1;

        if $i3 >= i0 goto label4;

     label3:
        return 0;

     label4:
        i1 = 0;

     label5:
        if i1 >= i0 goto label7;

        $b5 = r0[i1];

        $b4 = r1[i1];

        if $b5 == $b4 goto label6;

        return 0;

     label6:
        i1 = i1 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static java.lang.Object[] emptyArray(java.lang.Class)
    {
        java.lang.Class r0, $r6, $r7;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4, $r5, $r8, $r9;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "java/lang/Object" goto label1;

        $r8 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        $r9 = (java.lang.Object[]) $r8;

        return $r9;

     label1:
        $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i2 = $i1 & 2147483647;

        i0 = $i2 % 73;

        $r2 = <com.android.internal.util.ArrayUtils: java.lang.Object[] sCache>;

        r1 = $r2[i0];

        if r1 == null goto label2;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        if $r7 == r0 goto label3;

     label2:
        r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, 0);

        $r3 = <com.android.internal.util.ArrayUtils: java.lang.Object[] sCache>;

        $r3[i0] = r1;

     label3:
        $r4 = (java.lang.Object[]) r1;

        $r5 = (java.lang.Object[]) $r4;

        return $r5;
    }

    public static boolean isEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r0, r1);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1, $r2, $r3;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return -1;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label5;

        $r2 = r0[i0];

        if $r2 != null goto label3;

        if r1 != null goto label4;

        return i0;

     label3:
        if r1 == null goto label4;

        $r3 = r0[i0];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        return i0;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return -1;
    }

    public static boolean containsAll(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2;
        int i0, i1;
        java.lang.Object r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r0, r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static boolean contains(int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        i3 = r1[i2];

        if i3 != i0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean contains(long[], long)
    {
        long[] r0, r1;
        long l0, l3;
        int i1, i2;
        byte $b4;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        l3 = r1[i2];

        $b4 = l3 cmp l0;

        if $b4 != 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static long total(long[])
    {
        long[] r0, r1;
        long l0, l3;
        int i1, i2;

        r0 := @parameter0: long[];

        l0 = 0L;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        l3 = r1[i2];

        l0 = l0 + l3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static java.lang.Object[] appendElement(java.lang.Class, java.lang.Object[], java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object[] r1, r3, $r5, $r7;
        java.lang.Object r2, $r4, $r6;
        int i0, $i1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object;

        if r1 == null goto label1;

        i0 = lengthof r1;

        $i1 = i0 + 1;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, $i1);

        $r7 = (java.lang.Object[]) $r6;

        r3 = (java.lang.Object[]) $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, i0);

        goto label2;

     label1:
        i0 = 0;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, 1);

        $r5 = (java.lang.Object[]) $r4;

        r3 = (java.lang.Object[]) $r5;

     label2:
        r3[i0] = r2;

        return r3;
    }

    public static java.lang.Object[] removeElement(java.lang.Class, java.lang.Object[], java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object[] r1, r3, $r6;
        java.lang.Object r2, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object;

        if r1 == null goto label4;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r4 = r1[i1];

        if $r4 != r2 goto label3;

        if i0 != 1 goto label2;

        return null;

     label2:
        $i2 = i0 - 1;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, $i2);

        $r6 = (java.lang.Object[]) $r5;

        r3 = (java.lang.Object[]) $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, i1);

        $i5 = i1 + 1;

        $i3 = i0 - i1;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r3, i1, $i4);

        return r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r1;
    }

    public static int[] appendInt(int[], int)
    {
        int[] r0, $r1, r2;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = newarray (int)[1];

        $r1[0] = i0;

        return $r1;

     label1:
        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $i4 = r0[i2];

        if $i4 != i0 goto label3;

        return r0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i3 = i1 + 1;

        r2 = newarray (int)[$i3];

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r0, 0, r2, 0, i1);

        r2[i1] = i0;

        return r2;
    }

    public static int[] removeInt(int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label6;

        $i3 = r0[i2];

        if $i3 != i0 goto label5;

        $i4 = i1 - 1;

        r1 = newarray (int)[$i4];

        if i2 <= 0 goto label3;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r0, 0, r1, 0, i2);

     label3:
        $i5 = i1 - 1;

        if i2 >= $i5 goto label4;

        $i8 = i2 + 1;

        $i6 = i1 - i2;

        $i7 = $i6 - 1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r0, $i8, r1, i2, $i7);

     label4:
        return r1;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        return r0;
    }

    public static long[] appendLong(long[], long)
    {
        long[] r0, $r1, r2;
        long l0, $l4;
        int i1, i2, $i3;
        byte $b5;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        if r0 != null goto label1;

        $r1 = newarray (long)[1];

        $r1[0] = l0;

        return $r1;

     label1:
        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $l4 = r0[i2];

        $b5 = $l4 cmp l0;

        if $b5 != 0 goto label3;

        return r0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i3 = i1 + 1;

        r2 = newarray (long)[$i3];

        staticinvoke <java.lang.System: void arraycopy(long[],int,long[],int,int)>(r0, 0, r2, 0, i1);

        r2[i1] = l0;

        return r2;
    }

    public static long[] removeLong(long[], long)
    {
        long[] r0, r1;
        long l0, $l3;
        int i1, i2, $i5, $i6, $i7, $i8, $i9;
        byte $b4;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        if r0 != null goto label1;

        return null;

     label1:
        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label6;

        $l3 = r0[i2];

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label5;

        $i5 = i1 - 1;

        r1 = newarray (long)[$i5];

        if i2 <= 0 goto label3;

        staticinvoke <java.lang.System: void arraycopy(long[],int,long[],int,int)>(r0, 0, r1, 0, i2);

     label3:
        $i6 = i1 - 1;

        if i2 >= $i6 goto label4;

        $i9 = i2 + 1;

        $i7 = i1 - i2;

        $i8 = $i7 - 1;

        staticinvoke <java.lang.System: void arraycopy(long[],int,long[],int,int)>(r0, $i9, r1, i2, $i8);

     label4:
        return r1;

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        return r0;
    }

    public static long[] cloneOrNull(long[])
    {
        long[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: long[];

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (long[]) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static android.util.ArraySet add(android.util.ArraySet, java.lang.Object)
    {
        android.util.ArraySet r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        r0 = $r2;

     label1:
        virtualinvoke r0.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public static android.util.ArraySet remove(android.util.ArraySet, java.lang.Object)
    {
        android.util.ArraySet r0;
        java.lang.Object r1;
        boolean $z1;

        r0 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        $z1 = virtualinvoke r0.<android.util.ArraySet: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return null;

     label2:
        return r0;
    }

    public static boolean contains(android.util.ArraySet, java.lang.Object)
    {
        android.util.ArraySet r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.ArrayList add(java.util.ArrayList, java.lang.Object)
    {
        java.util.ArrayList r0, $r2;
        java.lang.Object r1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0 = $r2;

     label1:
        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public static java.util.ArrayList remove(java.util.ArrayList, java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        boolean $z1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $z1 = virtualinvoke r0.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return null;

     label2:
        return r0;
    }

    public static boolean contains(java.util.ArrayList, java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        <com.android.internal.util.ArrayUtils: int CACHE_SIZE> = 73;

        $r0 = newarray (java.lang.Object)[73];

        <com.android.internal.util.ArrayUtils: java.lang.Object[] sCache> = $r0;

        return;
    }
}
