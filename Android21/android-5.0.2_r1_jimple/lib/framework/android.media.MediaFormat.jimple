public final class android.media.MediaFormat extends java.lang.Object
{
    public static final java.lang.String MIMETYPE_VIDEO_VP8;
    public static final java.lang.String MIMETYPE_VIDEO_VP9;
    public static final java.lang.String MIMETYPE_VIDEO_AVC;
    public static final java.lang.String MIMETYPE_VIDEO_HEVC;
    public static final java.lang.String MIMETYPE_VIDEO_MPEG4;
    public static final java.lang.String MIMETYPE_VIDEO_H263;
    public static final java.lang.String MIMETYPE_VIDEO_MPEG2;
    public static final java.lang.String MIMETYPE_VIDEO_RAW;
    public static final java.lang.String MIMETYPE_AUDIO_AMR_NB;
    public static final java.lang.String MIMETYPE_AUDIO_AMR_WB;
    public static final java.lang.String MIMETYPE_AUDIO_MPEG;
    public static final java.lang.String MIMETYPE_AUDIO_AAC;
    public static final java.lang.String MIMETYPE_AUDIO_QCELP;
    public static final java.lang.String MIMETYPE_AUDIO_VORBIS;
    public static final java.lang.String MIMETYPE_AUDIO_OPUS;
    public static final java.lang.String MIMETYPE_AUDIO_G711_ALAW;
    public static final java.lang.String MIMETYPE_AUDIO_G711_MLAW;
    public static final java.lang.String MIMETYPE_AUDIO_RAW;
    public static final java.lang.String MIMETYPE_AUDIO_FLAC;
    public static final java.lang.String MIMETYPE_AUDIO_MSGSM;
    public static final java.lang.String MIMETYPE_AUDIO_AC3;
    public static final java.lang.String MIMETYPE_TEXT_VTT;
    public static final java.lang.String MIMETYPE_TEXT_CEA_608;
    private java.util.Map mMap;
    public static final java.lang.String KEY_MIME;
    public static final java.lang.String KEY_LANGUAGE;
    public static final java.lang.String KEY_SAMPLE_RATE;
    public static final java.lang.String KEY_CHANNEL_COUNT;
    public static final java.lang.String KEY_WIDTH;
    public static final java.lang.String KEY_HEIGHT;
    public static final java.lang.String KEY_MAX_WIDTH;
    public static final java.lang.String KEY_MAX_HEIGHT;
    public static final java.lang.String KEY_MAX_INPUT_SIZE;
    public static final java.lang.String KEY_BIT_RATE;
    public static final java.lang.String KEY_COLOR_FORMAT;
    public static final java.lang.String KEY_FRAME_RATE;
    public static final java.lang.String KEY_CAPTURE_RATE;
    public static final java.lang.String KEY_I_FRAME_INTERVAL;
    public static final java.lang.String KEY_TEMPORAL_LAYERING;
    public static final java.lang.String KEY_STRIDE;
    public static final java.lang.String KEY_SLICE_HEIGHT;
    public static final java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER;
    public static final java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP;
    public static final java.lang.String KEY_DURATION;
    public static final java.lang.String KEY_IS_ADTS;
    public static final java.lang.String KEY_CHANNEL_MASK;
    public static final java.lang.String KEY_AAC_PROFILE;
    public static final java.lang.String KEY_AAC_SBR_MODE;
    public static final java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT;
    public static final java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL;
    public static final java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL;
    public static final java.lang.String KEY_AAC_DRC_BOOST_FACTOR;
    public static final java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR;
    public static final java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION;
    public static final java.lang.String KEY_FLAC_COMPRESSION_LEVEL;
    public static final java.lang.String KEY_COMPLEXITY;
    public static final java.lang.String KEY_QUALITY;
    public static final java.lang.String KEY_PROFILE;
    public static final java.lang.String KEY_BITRATE_MODE;
    public static final java.lang.String KEY_AUDIO_SESSION_ID;
    public static final java.lang.String KEY_IS_AUTOSELECT;
    public static final java.lang.String KEY_IS_DEFAULT;
    public static final java.lang.String KEY_IS_FORCED_SUBTITLE;
    public static final java.lang.String KEY_IS_TIMED_TEXT;
    public static final java.lang.String KEY_FEATURE_;

    void <init>(java.util.Map)
    {
        android.media.MediaFormat r0;
        java.util.Map r1;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaFormat: java.util.Map mMap> = r1;

        return;
    }

    public void <init>()
    {
        android.media.MediaFormat r0;
        java.util.HashMap $r1;

        r0 := @this: android.media.MediaFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaFormat: java.util.Map mMap> = $r1;

        return;
    }

    java.util.Map getMap()
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;

        r0 := @this: android.media.MediaFormat;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        return $r1;
    }

    public final boolean containsKey(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public final int getInteger(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public final int getInteger(java.lang.String, int)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.ClassCastException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke r0.<android.media.MediaFormat: int getInteger(java.lang.String)>(r1);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        return i0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public final long getLong(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public final float getFloat(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Float $r4;
        float $f0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public final java.lang.String getString(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public final java.nio.ByteBuffer getByteBuffer(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.nio.ByteBuffer $r4;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.nio.ByteBuffer) $r3;

        return $r4;
    }

    public boolean getFeatureEnabled(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r7;
        java.lang.Integer r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.util.Map $r4;
        java.lang.Object $r8;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r2 = (java.lang.Integer) $r8;

        if r2 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("feature is not specified");

        throw $r9;

     label1:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i0 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public final void setInteger(java.lang.String, int)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer $r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public final void setLong(java.lang.String, long)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        long l0;
        java.lang.Long $r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public final void setFloat(java.lang.String, float)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        float f0;
        java.lang.Float $r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = new java.lang.Float;

        specialinvoke $r2.<java.lang.Float: void <init>(float)>(f0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public final void setString(java.lang.String, java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public final void setByteBuffer(java.lang.String, java.nio.ByteBuffer)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.nio.ByteBuffer r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setFeatureEnabled(java.lang.String, boolean)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r5;
        boolean z0;
        java.lang.StringBuilder $r2, $r3, $r4;
        byte $b0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>($r5, $b0);

        return;
    }

    public static final android.media.MediaFormat createAudioFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.media.MediaFormat;

        specialinvoke $r2.<android.media.MediaFormat: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", i0);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", i1);

        return r1;
    }

    public static final android.media.MediaFormat createSubtitleFormat(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.media.MediaFormat r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.media.MediaFormat;

        specialinvoke $r3.<android.media.MediaFormat: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke r2.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("language", r1);

        return r2;
    }

    public static final android.media.MediaFormat createVideoFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.media.MediaFormat;

        specialinvoke $r2.<android.media.MediaFormat: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("width", i0);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("height", i1);

        return r1;
    }

    public java.lang.String toString()
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaFormat;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <android.media.MediaFormat: java.lang.String KEY_FEATURE_> = "feature-";

        <android.media.MediaFormat: java.lang.String KEY_IS_TIMED_TEXT> = "is-timed-text";

        <android.media.MediaFormat: java.lang.String KEY_IS_FORCED_SUBTITLE> = "is-forced-subtitle";

        <android.media.MediaFormat: java.lang.String KEY_IS_DEFAULT> = "is-default";

        <android.media.MediaFormat: java.lang.String KEY_IS_AUTOSELECT> = "is-autoselect";

        <android.media.MediaFormat: java.lang.String KEY_AUDIO_SESSION_ID> = "audio-session-id";

        <android.media.MediaFormat: java.lang.String KEY_BITRATE_MODE> = "bitrate-mode";

        <android.media.MediaFormat: java.lang.String KEY_PROFILE> = "profile";

        <android.media.MediaFormat: java.lang.String KEY_QUALITY> = "quality";

        <android.media.MediaFormat: java.lang.String KEY_COMPLEXITY> = "complexity";

        <android.media.MediaFormat: java.lang.String KEY_FLAC_COMPRESSION_LEVEL> = "flac-compression-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION> = "aac-drc-heavy-compression";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR> = "aac-drc-cut-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_BOOST_FACTOR> = "aac-drc-boost-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL> = "aac-encoded-target-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL> = "aac-target-ref-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT> = "aac-max-output-channel_count";

        <android.media.MediaFormat: java.lang.String KEY_AAC_SBR_MODE> = "aac-sbr-mode";

        <android.media.MediaFormat: java.lang.String KEY_AAC_PROFILE> = "aac-profile";

        <android.media.MediaFormat: java.lang.String KEY_CHANNEL_MASK> = "channel-mask";

        <android.media.MediaFormat: java.lang.String KEY_IS_ADTS> = "is-adts";

        <android.media.MediaFormat: java.lang.String KEY_DURATION> = "durationUs";

        <android.media.MediaFormat: java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP> = "push-blank-buffers-on-shutdown";

        <android.media.MediaFormat: java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER> = "repeat-previous-frame-after";

        <android.media.MediaFormat: java.lang.String KEY_SLICE_HEIGHT> = "slice-height";

        <android.media.MediaFormat: java.lang.String KEY_STRIDE> = "stride";

        <android.media.MediaFormat: java.lang.String KEY_TEMPORAL_LAYERING> = "ts-schema";

        <android.media.MediaFormat: java.lang.String KEY_I_FRAME_INTERVAL> = "i-frame-interval";

        <android.media.MediaFormat: java.lang.String KEY_CAPTURE_RATE> = "capture-rate";

        <android.media.MediaFormat: java.lang.String KEY_FRAME_RATE> = "frame-rate";

        <android.media.MediaFormat: java.lang.String KEY_COLOR_FORMAT> = "color-format";

        <android.media.MediaFormat: java.lang.String KEY_BIT_RATE> = "bitrate";

        <android.media.MediaFormat: java.lang.String KEY_MAX_INPUT_SIZE> = "max-input-size";

        <android.media.MediaFormat: java.lang.String KEY_MAX_HEIGHT> = "max-height";

        <android.media.MediaFormat: java.lang.String KEY_MAX_WIDTH> = "max-width";

        <android.media.MediaFormat: java.lang.String KEY_HEIGHT> = "height";

        <android.media.MediaFormat: java.lang.String KEY_WIDTH> = "width";

        <android.media.MediaFormat: java.lang.String KEY_CHANNEL_COUNT> = "channel-count";

        <android.media.MediaFormat: java.lang.String KEY_SAMPLE_RATE> = "sample-rate";

        <android.media.MediaFormat: java.lang.String KEY_LANGUAGE> = "language";

        <android.media.MediaFormat: java.lang.String KEY_MIME> = "mime";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_CEA_608> = "text/cea-608";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_VTT> = "text/vtt";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AC3> = "audio/ac3";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MSGSM> = "audio/gsm";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_FLAC> = "audio/flac";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_RAW> = "audio/raw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_MLAW> = "audio/g711-mlaw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_ALAW> = "audio/g711-alaw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_OPUS> = "audio/opus";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_VORBIS> = "audio/vorbis";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_QCELP> = "audio/qcelp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC> = "audio/mp4a-latm";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEG> = "audio/mpeg";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_WB> = "audio/amr-wb";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_NB> = "audio/3gpp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_RAW> = "video/raw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG2> = "video/mpeg2";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_H263> = "video/3gpp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG4> = "video/mp4v-es";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_HEVC> = "video/hevc";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_AVC> = "video/avc";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP9> = "video/x-vnd.on2.vp9";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP8> = "video/x-vnd.on2.vp8";

        return;
    }
}
