public class android.app.DownloadManager extends java.lang.Object
{
    public static final java.lang.String COLUMN_ID;
    public static final java.lang.String COLUMN_TITLE;
    public static final java.lang.String COLUMN_DESCRIPTION;
    public static final java.lang.String COLUMN_URI;
    public static final java.lang.String COLUMN_MEDIA_TYPE;
    public static final java.lang.String COLUMN_TOTAL_SIZE_BYTES;
    public static final java.lang.String COLUMN_LOCAL_URI;
    public static final java.lang.String COLUMN_LOCAL_FILENAME;
    public static final java.lang.String COLUMN_STATUS;
    public static final java.lang.String COLUMN_REASON;
    public static final java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR;
    public static final java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP;
    public static final java.lang.String COLUMN_MEDIAPROVIDER_URI;
    public static final java.lang.String COLUMN_ALLOW_WRITE;
    public static final int STATUS_PENDING;
    public static final int STATUS_RUNNING;
    public static final int STATUS_PAUSED;
    public static final int STATUS_SUCCESSFUL;
    public static final int STATUS_FAILED;
    public static final int ERROR_UNKNOWN;
    public static final int ERROR_FILE_ERROR;
    public static final int ERROR_UNHANDLED_HTTP_CODE;
    public static final int ERROR_HTTP_DATA_ERROR;
    public static final int ERROR_TOO_MANY_REDIRECTS;
    public static final int ERROR_INSUFFICIENT_SPACE;
    public static final int ERROR_DEVICE_NOT_FOUND;
    public static final int ERROR_CANNOT_RESUME;
    public static final int ERROR_FILE_ALREADY_EXISTS;
    public static final int ERROR_BLOCKED;
    public static final int PAUSED_WAITING_TO_RETRY;
    public static final int PAUSED_WAITING_FOR_NETWORK;
    public static final int PAUSED_QUEUED_FOR_WIFI;
    public static final int PAUSED_UNKNOWN;
    public static final java.lang.String ACTION_DOWNLOAD_COMPLETE;
    public static final java.lang.String ACTION_NOTIFICATION_CLICKED;
    public static final java.lang.String ACTION_VIEW_DOWNLOADS;
    public static final java.lang.String INTENT_EXTRAS_SORT_BY_SIZE;
    public static final java.lang.String EXTRA_DOWNLOAD_ID;
    public static final java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS;
    public static final java.lang.String[] UNDERLYING_COLUMNS;
    private android.content.ContentResolver mResolver;
    private java.lang.String mPackageName;
    private android.net.Uri mBaseUri;
    private static final java.lang.String NON_DOWNLOADMANAGER_DOWNLOAD;

    public void <init>(android.content.ContentResolver, java.lang.String)
    {
        android.app.DownloadManager r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        android.net.Uri $r3;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r3;

        r0.<android.app.DownloadManager: android.content.ContentResolver mResolver> = r1;

        r0.<android.app.DownloadManager: java.lang.String mPackageName> = r2;

        return;
    }

    public void setAccessAllDownloads(boolean)
    {
        android.app.DownloadManager r0;
        boolean z0;
        android.net.Uri $r1, $r2;

        r0 := @this: android.app.DownloadManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = <android.provider.Downloads$Impl: android.net.Uri ALL_DOWNLOADS_CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r2;

        goto label2;

     label1:
        $r1 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r0.<android.app.DownloadManager: android.net.Uri mBaseUri> = $r1;

     label2:
        return;
    }

    public long enqueue(android.app.DownloadManager$Request)
    {
        android.app.DownloadManager r0;
        android.app.DownloadManager$Request r1;
        android.content.ContentValues r2;
        android.net.Uri r3, $r5;
        long l0;
        java.lang.String $r4, $r7;
        android.content.ContentResolver $r6;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: android.app.DownloadManager$Request;

        $r4 = r0.<android.app.DownloadManager: java.lang.String mPackageName>;

        r2 = virtualinvoke r1.<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)>($r4);

        $r6 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r5 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r3 = virtualinvoke $r6.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r5, r2);

        $r7 = virtualinvoke r3.<android.net.Uri: java.lang.String getLastPathSegment()>();

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r7);

        return l0;
    }

    public transient int markRowDeleted(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        android.content.ContentValues r2, $r4;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i4;
        java.lang.Integer $r5;
        android.content.ContentResolver $r6, $r12;
        android.net.Uri $r7, $r10, $r11;
        java.lang.String $r8;
        java.lang.String[] $r9;
        long $l3;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input param \'ids\' can\'t be null");

        throw $r3;

     label2:
        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        r2 = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("deleted", $r5);

        $i1 = lengthof r1;

        if $i1 != 1 goto label3;

        $r12 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r10 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $l3 = r1[0];

        $r11 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r10, $l3);

        $i4 = virtualinvoke $r12.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r11, r2, null, null);

        return $i4;

     label3:
        $r6 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r7 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r8 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r1);

        $r9 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r1);

        $i2 = virtualinvoke $r6.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r7, r2, $r8, $r9);

        return $i2;
    }

    public transient int remove(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        int $i0;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        $i0 = virtualinvoke r0.<android.app.DownloadManager: int markRowDeleted(long[])>(r1);

        return $i0;
    }

    public android.database.Cursor query(android.app.DownloadManager$Query)
    {
        android.app.DownloadManager r0;
        android.app.DownloadManager$Query r1;
        android.database.Cursor r2;
        android.net.Uri $r3, $r7;
        java.lang.String[] $r4;
        android.content.ContentResolver $r5;
        android.app.DownloadManager$CursorTranslator $r6;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: android.app.DownloadManager$Query;

        $r5 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r4 = <android.app.DownloadManager: java.lang.String[] UNDERLYING_COLUMNS>;

        $r3 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        r2 = virtualinvoke r1.<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)>($r5, $r4, $r3);

        if r2 != null goto label1;

        return null;

     label1:
        $r6 = new android.app.DownloadManager$CursorTranslator;

        $r7 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        specialinvoke $r6.<android.app.DownloadManager$CursorTranslator: void <init>(android.database.Cursor,android.net.Uri)>(r2, $r7);

        return $r6;
    }

    public android.os.ParcelFileDescriptor openDownloadedFile(long) throws java.io.FileNotFoundException
    {
        android.app.DownloadManager r0;
        long l0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r1 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r2 = virtualinvoke r0.<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>(l0);

        $r3 = virtualinvoke $r1.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>($r2, "r");

        return $r3;
    }

    public android.net.Uri getUriForDownloadedFile(long)
    {
        android.app.DownloadManager r0;
        long l0;
        android.app.DownloadManager$Query r1, $r6;
        android.database.Cursor r2;
        int i1, i2, $i3, $i4, i5;
        android.net.Uri r3, r4, $r8;
        java.lang.Throwable r5, $r10;
        long[] $r7;
        boolean $z0;
        java.io.File $r9;
        java.lang.String r11;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r6 = new android.app.DownloadManager$Query;

        specialinvoke $r6.<android.app.DownloadManager$Query: void <init>()>();

        $r7 = newarray (long)[1];

        $r7[0] = l0;

        r1 = virtualinvoke $r6.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>($r7);

        r2 = null;

     label01:
        r2 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>(r1);

        if r2 != null goto label04;

     label02:
        if r2 == null goto label03;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label11;

        $i3 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("status");

        i5 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>($i3);

        if 8 != i5 goto label11;

        i1 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("destination");

        i2 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(i1);

        if i2 == 1 goto label05;

        if i2 == 5 goto label05;

        if i2 == 3 goto label05;

        if i2 != 2 goto label08;

     label05:
        $r8 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r3 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r8, l0);

     label06:
        if r2 == null goto label07;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label07:
        return r3;

     label08:
        $i4 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("local_filename");

        r11 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>($i4);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r11);

        r4 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r9);

     label09:
        if r2 == null goto label10;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label10:
        return r4;

     label11:
        if r2 == null goto label15;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label15;

     label12:
        $r10 := @caughtexception;

        r5 = $r10;

     label13:
        if r2 == null goto label14;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label14:
        throw r5;

     label15:
        return null;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public java.lang.String getMimeTypeForDownloadedFile(long)
    {
        android.app.DownloadManager r0;
        long l0;
        android.app.DownloadManager$Query r1, $r4;
        android.database.Cursor r2;
        java.lang.Throwable r3, $r6;
        long[] $r5;
        boolean $z0;
        int $i1;
        java.lang.String r7;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r4 = new android.app.DownloadManager$Query;

        specialinvoke $r4.<android.app.DownloadManager$Query: void <init>()>();

        $r5 = newarray (long)[1];

        $r5[0] = l0;

        r1 = virtualinvoke $r4.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>($r5);

        r2 = null;

     label01:
        r2 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>(r1);

        if r2 != null goto label04;

     label02:
        if r2 == null goto label03;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label07;

        $i1 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("media_type");

        r7 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label05:
        if r2 == null goto label06;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label06:
        return r7;

     label07:
        if r2 == null goto label11;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label11;

     label08:
        $r6 := @caughtexception;

        r3 = $r6;

     label09:
        if r2 == null goto label10;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label10:
        throw r3;

     label11:
        return null;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public transient void restartDownload(long[])
    {
        android.app.DownloadManager r0;
        long[] r1;
        android.database.Cursor r2;
        int i0, $i2, $i4;
        java.lang.Throwable r3, $r18;
        android.app.DownloadManager$Query $r4, $r5;
        boolean $z1;
        android.content.ContentValues $r6, r21;
        java.lang.Integer $r7, $r8, $r9, $r11;
        android.content.ContentResolver $r10;
        java.lang.String $r12, $r20;
        android.net.Uri $r13;
        java.lang.String[] $r14;
        java.lang.IllegalArgumentException $r15;
        java.lang.StringBuilder $r16, $r17, $r19;
        long $l3;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: long[];

        $r4 = new android.app.DownloadManager$Query;

        specialinvoke $r4.<android.app.DownloadManager$Query: void <init>()>();

        $r5 = virtualinvoke $r4.<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>(r1);

        r2 = virtualinvoke r0.<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>($r5);

     label1:
        interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

     label2:
        $z1 = interfaceinvoke r2.<android.database.Cursor: boolean isAfterLast()>();

        if $z1 != 0 goto label4;

        $i2 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndex(java.lang.String)>("status");

        i0 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>($i2);

        if i0 == 8 goto label3;

        if i0 == 16 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot restart incomplete download: ");

        $i4 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l3 = interfaceinvoke r2.<android.database.Cursor: long getLong(int)>($i4);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label3:
        interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        goto label2;

     label4:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label7;

     label5:
        $r18 := @caughtexception;

        r3 = $r18;

     label6:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        throw r3;

     label7:
        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        r21 = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r21.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("current_bytes", $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke r21.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("total_bytes", $r8);

        virtualinvoke r21.<android.content.ContentValues: void putNull(java.lang.String)>("_data");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(190);

        virtualinvoke r21.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("status", $r9);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r21.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("numfailed", $r11);

        $r10 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r13 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r12 = staticinvoke <android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>(r1);

        $r14 = staticinvoke <android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>(r1);

        virtualinvoke $r10.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r13, r21, $r12, $r14);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.Long getMaxBytesOverMobile(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver $r2;
        long $l0;
        java.lang.Long $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>($r2, "download_manager_max_bytes_over_mobile");

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver $r2;
        long $l0;
        java.lang.Long $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>($r2, "download_manager_recommended_max_bytes_over_mobile");

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public static boolean isActiveNetworkExpensive(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        return 0;
    }

    public static long getActiveNetworkWarningBytes(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        return -1L;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, r4;
        boolean z0, z1;
        long l0, $l1;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        $l1 = virtualinvoke r0.<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)>(r1, r2, z0, r3, r4, l0, z1, 0);

        return $l1;
    }

    public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, boolean)
    {
        android.app.DownloadManager r0;
        java.lang.String r1, r2, r3, r4, $r21;
        boolean z0, z1, z2;
        long l0, $l2;
        android.app.DownloadManager$Request r5, $r8, $r9, $r10;
        android.content.ContentValues r6;
        android.net.Uri r7, $r19;
        byte $b1, $b3, $b4, $b5;
        java.lang.Integer $r11, $r12, $r16, $r18, $r20;
        java.lang.Long $r14;
        android.content.ContentResolver $r22;
        java.lang.IllegalArgumentException $r23;

        r0 := @this: android.app.DownloadManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        l0 := @parameter5: long;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("title", r1);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("description", r2);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("path", r4);

        staticinvoke <android.app.DownloadManager: void validateArgumentIsNonEmpty(java.lang.String,java.lang.String)>("mimeType", r3);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(" invalid value for param: totalBytes");

        throw $r23;

     label1:
        $r8 = new android.app.DownloadManager$Request;

        specialinvoke $r8.<android.app.DownloadManager$Request: void <init>(java.lang.String)>("non-dwnldmngr-download-dont-retry2download");

        $r9 = virtualinvoke $r8.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)>(r1);

        $r10 = virtualinvoke $r9.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)>(r2);

        r5 = virtualinvoke $r10.<android.app.DownloadManager$Request: android.app.DownloadManager$Request setMimeType(java.lang.String)>(r3);

        r6 = virtualinvoke r5.<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)>(null);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("destination", $r11);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_data", r4);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("status", $r12);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("total_bytes", $r14);

        if z0 == 0 goto label2;

        $b3 = 0;

        goto label3;

     label2:
        $b3 = 2;

     label3:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b3);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("scanned", $r16);

        if z1 == 0 goto label4;

        $b5 = 3;

        goto label5;

     label4:
        $b5 = 2;

     label5:
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b5);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("visibility", $r18);

        if z2 == 0 goto label6;

        $b4 = 1;

        goto label7;

     label6:
        $b4 = 0;

     label7:
        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("allow_write", $r20);

        $r22 = r0.<android.app.DownloadManager: android.content.ContentResolver mResolver>;

        $r19 = <android.provider.Downloads$Impl: android.net.Uri CONTENT_URI>;

        r7 = virtualinvoke $r22.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r19, r6);

        if r7 != null goto label8;

        return -1L;

     label8:
        $r21 = virtualinvoke r7.<android.net.Uri: java.lang.String getLastPathSegment()>();

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21);

        return $l2;
    }

    private static void validateArgumentIsNonEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can\'t be null");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public android.net.Uri getDownloadUri(long)
    {
        android.app.DownloadManager r0;
        long l0;
        android.net.Uri $r1, $r2;

        r0 := @this: android.app.DownloadManager;

        l0 := @parameter0: long;

        $r1 = r0.<android.app.DownloadManager: android.net.Uri mBaseUri>;

        $r2 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r1, l0);

        return $r2;
    }

    static java.lang.String getWhereClauseForIds(long[])
    {
        long[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1;
        java.lang.String $r5;

        r0 := @parameter0: long[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OR ");

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ? ");

        i0 = i0 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static java.lang.String[] getWhereArgsForIds(long[])
    {
        long[] r0;
        java.lang.String[] r1;
        int i0, $i1, $i2;
        long $l3;
        java.lang.String $r2;

        r0 := @parameter0: long[];

        $i1 = lengthof r0;

        r1 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $l3 = r0[i0];

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3);

        r1[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.app.DownloadManager: java.lang.String NON_DOWNLOADMANAGER_DOWNLOAD> = "non-dwnldmngr-download-dont-retry2download";

        <android.app.DownloadManager: java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS> = "extra_click_download_ids";

        <android.app.DownloadManager: java.lang.String EXTRA_DOWNLOAD_ID> = "extra_download_id";

        <android.app.DownloadManager: java.lang.String INTENT_EXTRAS_SORT_BY_SIZE> = "android.app.DownloadManager.extra_sortBySize";

        <android.app.DownloadManager: java.lang.String ACTION_VIEW_DOWNLOADS> = "android.intent.action.VIEW_DOWNLOADS";

        <android.app.DownloadManager: java.lang.String ACTION_NOTIFICATION_CLICKED> = "android.intent.action.DOWNLOAD_NOTIFICATION_CLICKED";

        <android.app.DownloadManager: java.lang.String ACTION_DOWNLOAD_COMPLETE> = "android.intent.action.DOWNLOAD_COMPLETE";

        <android.app.DownloadManager: int PAUSED_UNKNOWN> = 4;

        <android.app.DownloadManager: int PAUSED_QUEUED_FOR_WIFI> = 3;

        <android.app.DownloadManager: int PAUSED_WAITING_FOR_NETWORK> = 2;

        <android.app.DownloadManager: int PAUSED_WAITING_TO_RETRY> = 1;

        <android.app.DownloadManager: int ERROR_BLOCKED> = 1010;

        <android.app.DownloadManager: int ERROR_FILE_ALREADY_EXISTS> = 1009;

        <android.app.DownloadManager: int ERROR_CANNOT_RESUME> = 1008;

        <android.app.DownloadManager: int ERROR_DEVICE_NOT_FOUND> = 1007;

        <android.app.DownloadManager: int ERROR_INSUFFICIENT_SPACE> = 1006;

        <android.app.DownloadManager: int ERROR_TOO_MANY_REDIRECTS> = 1005;

        <android.app.DownloadManager: int ERROR_HTTP_DATA_ERROR> = 1004;

        <android.app.DownloadManager: int ERROR_UNHANDLED_HTTP_CODE> = 1002;

        <android.app.DownloadManager: int ERROR_FILE_ERROR> = 1001;

        <android.app.DownloadManager: int ERROR_UNKNOWN> = 1000;

        <android.app.DownloadManager: int STATUS_FAILED> = 16;

        <android.app.DownloadManager: int STATUS_SUCCESSFUL> = 8;

        <android.app.DownloadManager: int STATUS_PAUSED> = 4;

        <android.app.DownloadManager: int STATUS_RUNNING> = 2;

        <android.app.DownloadManager: int STATUS_PENDING> = 1;

        <android.app.DownloadManager: java.lang.String COLUMN_ALLOW_WRITE> = "allow_write";

        <android.app.DownloadManager: java.lang.String COLUMN_MEDIAPROVIDER_URI> = "mediaprovider_uri";

        <android.app.DownloadManager: java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP> = "last_modified_timestamp";

        <android.app.DownloadManager: java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR> = "bytes_so_far";

        <android.app.DownloadManager: java.lang.String COLUMN_REASON> = "reason";

        <android.app.DownloadManager: java.lang.String COLUMN_STATUS> = "status";

        <android.app.DownloadManager: java.lang.String COLUMN_LOCAL_FILENAME> = "local_filename";

        <android.app.DownloadManager: java.lang.String COLUMN_LOCAL_URI> = "local_uri";

        <android.app.DownloadManager: java.lang.String COLUMN_TOTAL_SIZE_BYTES> = "total_size";

        <android.app.DownloadManager: java.lang.String COLUMN_MEDIA_TYPE> = "media_type";

        <android.app.DownloadManager: java.lang.String COLUMN_URI> = "uri";

        <android.app.DownloadManager: java.lang.String COLUMN_DESCRIPTION> = "description";

        <android.app.DownloadManager: java.lang.String COLUMN_TITLE> = "title";

        <android.app.DownloadManager: java.lang.String COLUMN_ID> = "_id";

        $r0 = newarray (java.lang.String)[16];

        $r0[0] = "_id";

        $r0[1] = "_data AS local_filename";

        $r0[2] = "mediaprovider_uri";

        $r0[3] = "destination";

        $r0[4] = "title";

        $r0[5] = "description";

        $r0[6] = "uri";

        $r0[7] = "status";

        $r0[8] = "hint";

        $r0[9] = "mimetype AS media_type";

        $r0[10] = "total_bytes AS total_size";

        $r0[11] = "lastmod AS last_modified_timestamp";

        $r0[12] = "current_bytes AS bytes_so_far";

        $r0[13] = "allow_write";

        $r0[14] = "\'placeholder\' AS local_uri";

        $r0[15] = "\'placeholder\' AS reason";

        <android.app.DownloadManager: java.lang.String[] UNDERLYING_COLUMNS> = $r0;

        return;
    }
}
