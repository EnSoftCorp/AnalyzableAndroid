public class com.android.internal.widget.LockPatternUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    public static final int FAILED_ATTEMPTS_BEFORE_TIMEOUT;
    public static final int FAILED_ATTEMPTS_BEFORE_RESET;
    public static final long FAILED_ATTEMPT_TIMEOUT_MS;
    public static final long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS;
    public static final int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE;
    public static final int MIN_LOCK_PATTERN_SIZE;
    public static final int MIN_PATTERN_REGISTER_FAIL;
    public static final java.lang.String KEYGUARD_SHOW_USER_SWITCHER;
    public static final java.lang.String KEYGUARD_SHOW_SECURITY_CHALLENGE;
    public static final java.lang.String KEYGUARD_SHOW_APPWIDGET;
    public static final int FLAG_BIOMETRIC_WEAK_LIVELINESS;
    public static final int ID_DEFAULT_STATUS_WIDGET;
    public static final java.lang.String LOCKOUT_PERMANENT_KEY;
    public static final java.lang.String LOCKOUT_ATTEMPT_DEADLINE;
    public static final java.lang.String PATTERN_EVER_CHOSEN_KEY;
    public static final java.lang.String PASSWORD_TYPE_KEY;
    public static final java.lang.String PASSWORD_TYPE_ALTERNATE_KEY;
    public static final java.lang.String LOCK_PASSWORD_SALT_KEY;
    public static final java.lang.String DISABLE_LOCKSCREEN_KEY;
    public static final java.lang.String LOCKSCREEN_OPTIONS;
    public static final java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK;
    public static final java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY;
    public static final java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS;
    public static final java.lang.String LOCKSCREEN_WIDGETS_ENABLED;
    public static final java.lang.String PASSWORD_HISTORY_KEY;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED;
    private static final java.lang.String ENABLED_TRUST_AGENTS;
    public static final int MAX_ALLOWED_SEQUENCE;
    private final android.content.Context mContext;
    private final android.content.ContentResolver mContentResolver;
    private android.app.admin.DevicePolicyManager mDevicePolicyManager;
    private com.android.internal.widget.ILockSettings mLockSettingsService;
    private final boolean mMultiUserMode;
    private static volatile int sCurrentUserId;

    public android.app.admin.DevicePolicyManager getDevicePolicyManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1, $r2, $r5, $r6;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r5 = (android.app.admin.DevicePolicyManager) $r4;

        r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager> = $r5;

        $r6 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        if $r6 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stack trace:");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Can\'t get DevicePolicyManagerService: is it running?", $r7);

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        return $r2;
    }

    private android.app.trust.TrustManager getTrustManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.trust.TrustManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("trust");

        r1 = (android.app.trust.TrustManager) $r3;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stack trace:");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Can\'t get TrustManagerService: is it running?", $r4);

     label1:
        return r1;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext> = r1;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver> = $r2;

        $i0 = virtualinvoke r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<com.android.internal.widget.LockPatternUtils: boolean mMultiUserMode> = $z0;

        return;
    }

    private com.android.internal.widget.ILockSettings getLockSettings()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r1, $r2, $r4;
        android.os.IBinder $r3;
        com.android.internal.widget.LockPatternUtilsCache $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r4 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r3);

        $r5 = staticinvoke <com.android.internal.widget.LockPatternUtilsCache: com.android.internal.widget.LockPatternUtilsCache getInstance(com.android.internal.widget.ILockSettings)>($r4);

        r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService> = $r5;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        return $r2;
    }

    public int getRequestedMinimumPasswordLength()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordHistoryLength()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumLetters()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumUpperCase()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumLowerCase()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNumeric()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumSymbols()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNonLetter()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public void reportFailedPasswordAttempt()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.admin.DevicePolicyManager $r1;
        android.app.trust.TrustManager $r2, $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)>(i0);

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r2.<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)>(0, i0);

        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r3.<android.app.trust.TrustManager: void reportRequireCredentialEntry(int)>(i0);

        return;
    }

    public void reportSuccessfulPasswordAttempt()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;
        android.app.trust.TrustManager $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>($i0);

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r2.<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)>(1, $i1);

        return;
    }

    public void setCurrentUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        <com.android.internal.widget.LockPatternUtils: int sCurrentUserId> = i0;

        return;
    }

    public int getCurrentUser()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int $i0, $i1, $i2;
        android.app.IActivityManager $r2;
        android.content.pm.UserInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i0 = <com.android.internal.widget.LockPatternUtils: int sCurrentUserId>;

        if $i0 == -10000 goto label1;

        $i2 = <com.android.internal.widget.LockPatternUtils: int sCurrentUserId>;

        return $i2;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        $i1 = $r3.<android.content.pm.UserInfo: int id>;

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void removeUser(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove lock settings for user ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int getCurrentOrCallingUserId()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = r0.<com.android.internal.widget.LockPatternUtils: boolean mMultiUserMode>;

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentUser()>();

        return $i1;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        return $i0;
    }

    public boolean checkPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.String $r4;
        boolean $z0;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r4 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>(r1);

        $z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean checkPattern(java.lang.String,int)>($r4, i0);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean checkPassword(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        boolean $z0;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean checkPassword(java.lang.String,int)>(r1, i0);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean checkVoldPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean checkVoldPassword(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean checkPasswordHistory(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte[] $r5;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.String;

        $i3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(r1, $i3);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        r2 = $r4;

        r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)>("lockscreen.passwordhistory");

        if r3 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>();

        if i1 != 0 goto label2;

        return 0;

     label2:
        $i4 = i0 * i1;

        $i5 = $i4 + i1;

        i2 = $i5 - 1;

        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i6 <= i2 goto label3;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

     label3:
        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        return $z0;
    }

    public boolean savedPatternExists()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r2;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean havePattern(int)>($i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean savedPasswordExists()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r2;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean havePassword(int)>($i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPatternEverChosen()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.patterneverchosen", 0);

        return $z0;
    }

    public boolean isBiometricWeakEverChosen()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.biometricweakeverchosen", 0);

        return $z0;
    }

    public int getActivePasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        long $l2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 = 0;

        $l2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        i1 = (int) $l2;

        lookupswitch(i1)
        {
            case 32768: goto label2;
            case 65536: goto label1;
            case 131072: goto label3;
            case 196608: goto label4;
            case 262144: goto label5;
            case 327680: goto label6;
            case 393216: goto label7;
            default: goto label8;
        };

     label1:
        $z5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z5 == 0 goto label8;

        i0 = 65536;

        goto label8;

     label2:
        $z6 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakInstalled()>();

        if $z6 == 0 goto label8;

        i0 = 32768;

        goto label8;

     label3:
        $z4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z4 == 0 goto label8;

        i0 = 131072;

        goto label8;

     label4:
        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z3 == 0 goto label8;

        i0 = 196608;

        goto label8;

     label5:
        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z2 == 0 goto label8;

        i0 = 262144;

        goto label8;

     label6:
        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z1 == 0 goto label8;

        i0 = 327680;

        goto label8;

     label7:
        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z0 == 0 goto label8;

        i0 = 393216;

     label8:
        return i0;
    }

    public void clearLock(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)>(null, 65536);

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)>(0);

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)>(null);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type_alternate", 0L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void onAfterChangingPassword()>();

        return;
    }

    public void setLockScreenDisabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        long $l0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l0 = 1L;

        goto label2;

     label1:
        $l0 = 0L;

     label2:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.disabled", $l0);

        return;
    }

    public boolean isLockScreenDisabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        long $l3;
        byte $b4;
        android.content.Context $r2;
        android.os.UserManager $r3;
        java.lang.Object $r4;
        android.content.pm.UserInfo $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isSecure()>();

        if $z0 != 0 goto label6;

        $l3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.disabled", 0L);

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label6;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r2);

        r1 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (android.content.pm.UserInfo) $r4;

        $z2 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean supportsSwitchTo()>();

        if $z2 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if i1 >= 2 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        return 0;
    }

    public void deleteTempGallery()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("com.android.facelock.DELETE_GALLERY");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("deleteTempGallery", 1);

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcast(android.content.Intent)>(r1);

        return;
    }

    void deleteGallery()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        boolean $z0;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z0 == 0 goto label1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("com.android.facelock.DELETE_GALLERY");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("deleteGallery", 1);

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcast(android.content.Intent)>(r1);

     label1:
        return;
    }

    public void saveLockPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List,boolean)>(r1, 0);

        return;
    }

    public void saveLockPattern(java.util.List, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;
        boolean z0, z1, $z2;
        int i0, $i1;
        android.app.admin.DevicePolicyManager r2;
        java.lang.String r3, $r5, $r9;
        com.android.internal.widget.ILockSettings $r4;
        java.lang.StringBuilder $r6, $r8, $r10;
        android.os.RemoteException $r7, r11;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

     label1:
        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r5 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>(r1);

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setLockPattern(java.lang.String,int)>($r5, i0);

        r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        if r1 == null goto label5;

        if i0 != 0 goto label3;

        $z2 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z2 == 0 goto label3;

        z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isCredentialRequiredToDecrypt(boolean)>(1);

        if z1 != 0 goto label2;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void clearEncryptionPassword()>();

        goto label3;

     label2:
        r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>(r1);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,java.lang.String)>(2, r3);

     label3:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.patterneverchosen", 1);

        if z0 != 0 goto label4;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(65536, $i1, 0, 0, 0, 0, 0, 0, i0);

        goto label6;

     label4:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 32768L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type_alternate", 65536L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void finishBiometricWeak()>();

        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(32768, 0, 0, 0, 0, 0, 0, 0, i0);

        goto label6;

     label5:
        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, i0);

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void onAfterChangingPassword()>();

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        r11 = $r7;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t save lock pattern ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

     label9:
        return;

        catch android.os.RemoteException from label1 to label7 with label8;
    }

    private void updateCryptoUserInfo()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String r1, $r5;
        android.os.IBinder r2;
        android.os.storage.IMountService r3;
        android.os.RemoteException r4, $r6;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        if i0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isOwnerInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getOwnerInfo(int)>(i0);

        goto label3;

     label2:
        $r5 = "";

     label3:
        r1 = $r5;

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r2 != null goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the user info");

        return;

     label4:
        r3 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>(r2);

     label5:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LockPatternUtils", "Setting owner info");

        interfaceinvoke r3.<android.os.storage.IMountService: void setField(java.lang.String,java.lang.String)>("OwnerInfo", r1);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        r4 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing user info", r4);

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void setOwnerInfo(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r1, i0);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateCryptoUserInfo()>();

        return;
    }

    public void setOwnerInfoEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_screen_owner_info_enabled", z0);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateCryptoUserInfo()>();

        return;
    }

    public java.lang.String getOwnerInfo(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)>("lock_screen_owner_info");

        return $r1;
    }

    public boolean isOwnerInfoEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_screen_owner_info_enabled", 0);

        return $z0;
    }

    public static int computePasswordQuality(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, z1, $z2;
        int i0, i1, $i2, $i3;
        char $c4;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        z1 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z2 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z1 = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z1 == 0 goto label5;

        if z0 == 0 goto label5;

        return 327680;

     label5:
        if z1 == 0 goto label6;

        return 262144;

     label6:
        if z0 == 0 goto label9;

        $i2 = staticinvoke <com.android.internal.widget.LockPatternUtils: int maxLengthSequence(java.lang.String)>(r0);

        if $i2 <= 3 goto label7;

        $i3 = 131072;

        goto label8;

     label7:
        $i3 = 196608;

     label8:
        return $i3;

     label9:
        return 0;
    }

    private static int categoryChar(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 97 > c0 goto label1;

        if c0 > 122 goto label1;

        return 0;

     label1:
        if 65 > c0 goto label2;

        if c0 > 90 goto label2;

        return 1;

     label2:
        if 48 > c0 goto label3;

        if c0 > 57 goto label3;

        return 2;

     label3:
        return 3;
    }

    private static int maxDiffCategory(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        return 1;

     label2:
        if i0 != 2 goto label3;

        return 10;

     label3:
        return 0;
    }

    public static int maxLengthSequence(java.lang.String)
    {
        java.lang.String r0;
        char c0, c6;
        int i1, i2, i3, i4, i5, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i9 != 0 goto label1;

        return 0;

     label1:
        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        i1 = staticinvoke <com.android.internal.widget.LockPatternUtils: int categoryChar(char)>(c0);

        i2 = 0;

        z0 = 0;

        i3 = 0;

        i4 = 0;

        i5 = 1;

     label2:
        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i10 goto label7;

        c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        i7 = staticinvoke <com.android.internal.widget.LockPatternUtils: int categoryChar(char)>(c6);

        i8 = c6 - c0;

        if i7 != i1 goto label3;

        $i15 = staticinvoke <java.lang.Math: int abs(int)>(i8);

        $i14 = staticinvoke <com.android.internal.widget.LockPatternUtils: int maxDiffCategory(int)>(i1);

        if $i15 <= $i14 goto label4;

     label3:
        $i13 = i5 - i4;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i13);

        i4 = i5;

        z0 = 0;

        i1 = i7;

        goto label6;

     label4:
        if z0 == 0 goto label5;

        if i8 == i2 goto label5;

        $i16 = i5 - i4;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i16);

        i4 = i5 - 1;

     label5:
        i2 = i8;

        z0 = 1;

     label6:
        c0 = c6;

        i5 = i5 + 1;

        goto label2;

     label7:
        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        $i12 = $i11 - i4;

        i17 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i12);

        return i17;
    }

    private void updateEncryptionPassword(int, java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String r1;
        android.os.IBinder r2;
        boolean $z0;
        com.android.internal.widget.LockPatternUtils$1 $r3;
        java.lang.Void[] $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r2 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the encryption password");

        return;

     label2:
        $r3 = new com.android.internal.widget.LockPatternUtils$1;

        specialinvoke $r3.<com.android.internal.widget.LockPatternUtils$1: void <init>(com.android.internal.widget.LockPatternUtils,android.os.IBinder,int,java.lang.String)>(r0, r2, i0, r1);

        $r4 = newarray (java.lang.Void)[0];

        virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils$1: android.os.AsyncTask execute(java.lang.Object[])>($r4);

        return;
    }

    public void saveLockPassword(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i0, 0, $i1);

        return;
    }

    public void saveLockPassword(java.lang.String, int, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i0, z0, $i1);

        return;
    }

    public void saveLockPassword(java.lang.String, int, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r5, $r10, $r13, r16, r17, r19;
        int i0, i1, i2, i4, i5, i6, i7, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, i24, i25, i26, i27;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        android.app.admin.DevicePolicyManager r2;
        byte b3, $b22;
        char c8;
        com.android.internal.widget.ILockSettings $r3, $r4;
        long $l10, $l18;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r14, $r15;
        android.os.RemoteException $r12, r20;
        byte[] r18;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

     label01:
        r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z3 != 0 goto label23;

        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setLockPassword(java.lang.String,int)>(r1, i1);

        i2 = staticinvoke <com.android.internal.widget.LockPatternUtils: int computePasswordQuality(java.lang.String)>(r1);

        if i1 != 0 goto label10;

        $z6 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z6 == 0 goto label10;

        $z5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isCredentialRequiredToDecrypt(boolean)>(1);

        if $z5 != 0 goto label02;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void clearEncryptionPassword()>();

        goto label10;

     label02:
        if i2 != 131072 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        z1 = $z7;

        if i2 != 196608 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z2 = $z4;

        if z1 != 0 goto label07;

        if z2 == 0 goto label08;

     label07:
        $b22 = 3;

        goto label09;

     label08:
        $b22 = 0;

     label09:
        b3 = $b22;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,java.lang.String)>(b3, r1);

     label10:
        if z0 != 0 goto label18;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $l18 = (long) $i17;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type", $l18, i1);

        if i2 == 0 goto label17;

        i24 = 0;

        i25 = 0;

        i26 = 0;

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i7 = 0;

     label11:
        $i20 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 >= $i20 goto label16;

        c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        if c8 < 65 goto label12;

        if c8 > 90 goto label12;

        i24 = i24 + 1;

        i25 = i25 + 1;

        goto label15;

     label12:
        if c8 < 97 goto label13;

        if c8 > 122 goto label13;

        i24 = i24 + 1;

        i26 = i26 + 1;

        goto label15;

     label13:
        if c8 < 48 goto label14;

        if c8 > 57 goto label14;

        i4 = i4 + 1;

        i6 = i6 + 1;

        goto label15;

     label14:
        i5 = i5 + 1;

        i6 = i6 + 1;

     label15:
        i7 = i7 + 1;

        goto label11;

     label16:
        $i21 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $i19 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>($i21, $i19, i24, i25, i26, i4, i5, i6, i1);

        goto label19;

     label17:
        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, i1);

        goto label19;

     label18:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type", 32768L, i1);

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $l10 = (long) $i9;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type_alternate", $l10, i1);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void finishBiometricWeak()>();

        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(32768, 0, 0, 0, 0, 0, 0, 0, i1);

     label19:
        r16 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.passwordhistory", i1);

        if r16 != null goto label20;

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>()>();

        r16 = $r10;

     label20:
        i27 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>();

        if i27 != 0 goto label21;

        r17 = "";

        goto label22;

     label21:
        r18 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(r1, i1);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>(r18);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        r19 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i12 = lengthof r18;

        $i13 = $i12 * i27;

        $i11 = $i13 + i27;

        $i15 = $i11 - 1;

        $i16 = virtualinvoke r19.<java.lang.String: int length()>();

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i16);

        r17 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i14);

     label22:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.passwordhistory", r17, i1);

        goto label25;

     label23:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setLockPassword(java.lang.String,int)>(null, i1);

        if i1 != 0 goto label24;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,java.lang.String)>(1, null);

     label24:
        virtualinvoke r2.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, i1);

     label25:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void onAfterChangingPassword()>();

     label26:
        goto label28;

     label27:
        $r12 := @caughtexception;

        r20 = $r12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to save lock password ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r13);

     label28:
        return;

        catch android.os.RemoteException from label01 to label26 with label27;
    }

    public static boolean isDeviceEncrypted()
    {
        android.os.storage.IMountService r0;
        android.os.RemoteException r1, $r3;
        android.os.IBinder $r2;
        int $i0, $i1;
        boolean $z0;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r0 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r2);

     label1:
        $i0 = interfaceinvoke r0.<android.os.storage.IMountService: int getEncryptionState()>();

        if $i0 == 1 goto label2;

        $i1 = interfaceinvoke r0.<android.os.storage.IMountService: int getPasswordType()>();

        if $i1 == 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error getting encryption state", r1);

        return 1;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public static boolean isDeviceEncryptionEnabled()
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.crypto.state", "unsupported");

        $r1 = "encrypted";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    public void clearEncryptionPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,java.lang.String)>(1, null);

        return;
    }

    public int getKeyguardStoredPasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality(int)>($i0);

        return $i1;
    }

    public int getKeyguardStoredPasswordQuality(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        long $l2, $l3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $l2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long,int)>("lockscreen.password_type", 0L, i0);

        i1 = (int) $l2;

        if i1 != 32768 goto label1;

        $l3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long,int)>("lockscreen.password_type_alternate", 0L, i0);

        i1 = (int) $l3;

     label1:
        return i1;
    }

    public boolean usingBiometricWeak()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        i0 = (int) $l1;

        if i0 != 32768 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.List stringToPattern(java.lang.String)
    {
        java.lang.String r0;
        java.util.ArrayList r1;
        byte[] r2;
        int i0, $i2, $i3, $i4;
        byte b1;
        com.android.internal.widget.LockPatternView$Cell $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        b1 = r2[i0];

        $i4 = b1 / 3;

        $i3 = b1 % 3;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>($i4, $i3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String patternToString(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        byte $b6;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return "";

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (byte)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r4;

        $i2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i3 = $i2 * 3;

        $i4 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i5 = $i3 + $i4;

        $b6 = (byte) $i5;

        r1[i1] = $b6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r1);

        return $r3;
    }

    public static byte[] patternToHash(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1, r6;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.lang.Object $r3;
        byte $b6;
        java.security.NoSuchAlgorithmException $r4;
        java.security.MessageDigest r5;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (byte)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r3;

        $i2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i3 = $i2 * 3;

        $i4 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i5 = $i3 + $i4;

        $b6 = (byte) $i5;

        r1[i1] = $b6;

        i1 = i1 + 1;

        goto label2;

     label3:
        r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        r6 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

        return r1;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    private java.lang.String getSalt(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        long l1;
        java.security.NoSuchAlgorithmException r1, $r9;
        byte $b2;
        java.lang.String $r2, $r7;
        java.security.SecureRandom $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long,int)>("lockscreen.password_salt", 0L, i0);

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label4;

     label1:
        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        l1 = virtualinvoke $r3.<java.security.SecureRandom: long nextLong()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_salt", l1, i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initialized lock password salt for user: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LockPatternUtils", $r7);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t get SecureRandom number", r1);

        throw $r8;

     label4:
        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        return $r2;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public byte[] passwordToHash(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, $r9, $r11, $r14, $r16, $r18, $r24;
        int i0;
        byte[] r3, r4, r5, r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r15, $r17, $r19, $r21, $r22, $r23;
        java.security.MessageDigest $r12, $r13;
        java.security.NoSuchAlgorithmException $r20;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = null;

        r3 = null;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>();

        r2 = "SHA-1";

        $r12 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        r5 = virtualinvoke $r12.<java.security.MessageDigest: byte[] digest(byte[])>(r4);

        r2 = "MD5";

        $r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        r6 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest(byte[])>(r4);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String toHex(byte[])>(r5);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String toHex(byte[])>(r6);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke $r18.<java.lang.String: byte[] getBytes()>();

     label3:
        goto label5;

     label4:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode string because of missing algorithm: ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LockPatternUtils", $r24);

     label5:
        return r3;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    private static java.lang.String toHex(byte[])
    {
        byte[] r0;
        java.lang.String r2, $r5, $r9, r11;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r10;
        byte $b2, $b3, $b4, $b6, $b7;
        char $c5, $c8;

        r0 := @parameter0: byte[];

        r2 = "";

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = "0123456789ABCDEF";

        $b2 = r0[i0];

        $b3 = $b2 >> 4;

        $b4 = $b3 & 15;

        $c5 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($b4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r9 = "0123456789ABCDEF";

        $b7 = r0[i0];

        $b6 = $b7 & 15;

        $c8 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($b6);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return r2;
    }

    public boolean isLockPasswordEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, l1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type_alternate", 0L);

        $b2 = l0 cmp 262144L;

        if $b2 == 0 goto label1;

        $b8 = l0 cmp 131072L;

        if $b8 == 0 goto label1;

        $b10 = l0 cmp 196608L;

        if $b10 == 0 goto label1;

        $b9 = l0 cmp 327680L;

        if $b9 == 0 goto label1;

        $b11 = l0 cmp 393216L;

        if $b11 != 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        z0 = $z6;

        $b3 = l1 cmp 262144L;

        if $b3 == 0 goto label4;

        $b4 = l1 cmp 131072L;

        if $b4 == 0 goto label4;

        $b5 = l1 cmp 196608L;

        if $b5 == 0 goto label4;

        $b7 = l1 cmp 327680L;

        if $b7 == 0 goto label4;

        $b6 = l1 cmp 393216L;

        if $b6 != 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        z1 = $z5;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPasswordExists()>();

        if $z2 == 0 goto label8;

        if z0 != 0 goto label7;

        $z4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z4 == 0 goto label8;

        if z1 == 0 goto label8;

     label7:
        $z3 = 1;

        goto label9;

     label8:
        $z3 = 0;

     label9:
        return $z3;
    }

    public boolean isLockPatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0, $z1, $z2, $z3, $z4;
        long $l0, $l2;
        byte $b1, $b3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type_alternate", 0L);

        $b1 = $l0 cmp 65536L;

        if $b1 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_pattern_autolock", 0);

        if $z1 == 0 goto label4;

        $l2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        $b3 = $l2 cmp 65536L;

        if $b3 == 0 goto label3;

        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z3 == 0 goto label4;

        if z0 == 0 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public boolean isBiometricWeakInstalled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.pm.PackageManager r1;
        android.content.Context $r3;
        boolean $z0, $z1;
        android.app.admin.DevicePolicyManager $r5;
        int $i0;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>("com.android.facelock", 1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        return 0;

     label4:
        $z0 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.camera.front");

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z1 = virtualinvoke $r5.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(null, $i0);

        if $z1 == 0 goto label6;

        return 0;

     label6:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public void setBiometricWeakLivelinessEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        long l0, l1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lock_biometric_weak_flags", 0L);

        if z0 == 0 goto label1;

        l1 = l0 | 1L;

        goto label2;

     label1:
        l1 = l0 & -2L;

     label2:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lock_biometric_weak_flags", l1);

        return;
    }

    public boolean isBiometricWeakLivelinessEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lock_biometric_weak_flags", 0L);

        $l1 = l0 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setLockPatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_autolock", z0);

        return;
    }

    public boolean isVisiblePatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_pattern_visible_pattern", 0);

        return $z0;
    }

    public void setVisiblePatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;
        android.os.IBinder r1;
        android.os.storage.IMountService r2;
        android.os.RemoteException r3, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_visible_pattern", z0);

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        if i0 == 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the user info");

        return;

     label2:
        r2 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>(r1);

     label3:
        if z0 == 0 goto label4;

        $r4 = "1";

        goto label5;

     label4:
        $r4 = "0";

     label5:
        interfaceinvoke r2.<android.os.storage.IMountService: void setField(java.lang.String,java.lang.String)>("PatternVisible", $r4);

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing pattern visible state", r3);

     label8:
        return;

        catch android.os.RemoteException from label3 to label6 with label7;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.ContentResolver $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "haptic_feedback_enabled", 1, -2);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long setLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, $l1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = $l1 + 30000L;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", l0);

        return l0;
    }

    public long getLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, l1, $l3;
        byte $b2, $b4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", 0L);

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $l3 = l1 + 30000L;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

     label1:
        return 0L;

     label2:
        return l0;
    }

    public boolean isPermanentlyLocked()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.lockedoutpermanently", 0);

        return $z0;
    }

    public void setPermanentlyLocked(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.lockedoutpermanently", z0);

        return;
    }

    public boolean isEmergencyCallCapable()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956931);

        return $z0;
    }

    public boolean isPukUnlockScreenEnable()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956917);

        return $z0;
    }

    public boolean isEmergencyCallEnabledWhileSimLocked()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956918);

        return $z0;
    }

    public android.app.AlarmManager$AlarmClockInfo getNextAlarm()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.AlarmManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.AlarmManager$AlarmClockInfo $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r1 = (android.app.AlarmManager) $r3;

        $r4 = virtualinvoke r1.<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>(-2);

        return $r4;
    }

    private boolean getBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $z1 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

     label2:
        return $z1;

     label3:
        $r4 := @caughtexception;

        return z0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean getBoolean(java.lang.String, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0, $z1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>(r1, z0, $i0);

        return $z1;
    }

    private void setBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r9;
        boolean z0;
        int i0;
        android.os.RemoteException r2, $r4;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write boolean ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setBoolean(java.lang.String, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>(r1, z0, $i0);

        return;
    }

    public int[] getAppWidgets()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int[] $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets(int)>(-2);

        return $r1;
    }

    private int[] getAppWidgets(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, r2, r5, $r13;
        java.lang.String[] r3;
        int[] r4, $r8;
        android.content.ContentResolver $r7;
        java.lang.Integer $r9;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.NumberFormatException $r11;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r7 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        r1 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r7, "lock_screen_appwidget_ids", i0);

        r2 = ",";

        if r1 == null goto label7;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label7;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(r2);

        $i3 = lengthof r3;

        r4 = newarray (int)[$i3];

        i1 = 0;

     label1:
        $i4 = lengthof r3;

        if i1 >= $i4 goto label6;

        r5 = r3[i1];

     label2:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r5);

        $i5 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        r4[i1] = $i5;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error when parsing widget id ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LockPatternUtils", $r13);

        return null;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return r4;

     label7:
        $r8 = newarray (int)[0];

        return $r8;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private static java.lang.String combineStrings(int[], java.lang.String)
    {
        int[] r0;
        java.lang.String r1, $r3, $r5, $r8, $r9;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String[] r2;
        java.lang.StringBuilder $r4, r10;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        return "";

     label2:
        $i5 = r0[0];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        return $r3;

     label3:
        i1 = 0;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = lengthof r0;

        r2 = newarray (java.lang.String)[$i6];

        i3 = 0;

     label4:
        if i3 >= i0 goto label6;

        $i9 = r0[i3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        r2[i3] = $r8;

        $r9 = r2[i3];

        $i10 = virtualinvoke $r9.<java.lang.String: int length()>();

        i1 = i1 + $i10;

        $i11 = i0 - 1;

        if i3 >= $i11 goto label5;

        i1 = i1 + i2;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i1);

        r10 = $r4;

        i4 = 0;

     label7:
        if i4 >= i0 goto label9;

        $i7 = r0[i4];

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $i8 = i0 - 1;

        if i4 >= $i8 goto label8;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label8:
        i4 = i4 + 1;

        goto label7;

     label9:
        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void writeFallbackAppWidgetId(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.content.ContentResolver $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "lock_screen_fallback_appwidget_id", i0, -2);

        return;
    }

    public int getFallbackAppWidgetId()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.ContentResolver $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "lock_screen_fallback_appwidget_id", 0, -2);

        return $i0;
    }

    private void writeAppWidgets(int[])
    {
        com.android.internal.widget.LockPatternUtils r0;
        int[] r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: int[];

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String combineStrings(int[],java.lang.String)>(r1, ",");

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r2, "lock_screen_appwidget_ids", $r3, -2);

        return;
    }

    public boolean addAppWidget(int, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1, r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()>();

        if r1 != null goto label1;

        return 0;

     label1:
        if i1 < 0 goto label2;

        $i4 = lengthof r1;

        if i1 <= $i4 goto label3;

     label2:
        return 0;

     label3:
        $i5 = lengthof r1;

        $i6 = $i5 + 1;

        r2 = newarray (int)[$i6];

        i2 = 0;

        i3 = 0;

     label4:
        $i7 = lengthof r2;

        if i2 >= $i7 goto label7;

        if i1 != i2 goto label5;

        r2[i2] = i0;

        i2 = i2 + 1;

     label5:
        $i8 = lengthof r2;

        if i2 >= $i8 goto label6;

        $i9 = r1[i3];

        r2[i2] = $i9;

        i3 = i3 + 1;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void writeAppWidgets(int[])>(r2);

        return 1;
    }

    public boolean removeAppWidget(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1, r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()>();

        $i3 = lengthof r1;

        if $i3 != 0 goto label1;

        return 0;

     label1:
        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        r2 = newarray (int)[$i5];

        i1 = 0;

        i2 = 0;

     label2:
        $i6 = lengthof r1;

        if i1 >= $i6 goto label6;

        $i7 = r1[i1];

        if $i7 != i0 goto label3;

        goto label5;

     label3:
        $i8 = lengthof r2;

        if i2 < $i8 goto label4;

        return 0;

     label4:
        $i9 = r1[i1];

        r2[i2] = $i9;

        i2 = i2 + 1;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void writeAppWidgets(int[])>(r2);

        return 1;
    }

    private long getLong(java.lang.String, long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        long l0, $l2;
        int i1;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $l2 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)>(r1, l0, i1);

     label2:
        return $l2;

     label3:
        $r4 := @caughtexception;

        return l0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private long getLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        long l0, $l2;
        com.android.internal.widget.ILockSettings $r3;
        int $i1;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $l2 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)>(r1, l0, $i1);

     label2:
        return $l2;

     label3:
        $r4 := @caughtexception;

        return l0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        long l0;
        int $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>(r1, l0, $i1);

        return;
    }

    private void setLong(java.lang.String, long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r9;
        long l0;
        int i1;
        android.os.RemoteException r2, $r4;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setLong(java.lang.String,long,int)>(r1, l0, i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write long ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.lang.String getString(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    private java.lang.String getString(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r4;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r4 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, null, i0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setString(java.lang.String, java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, $r10;
        int i0;
        android.os.RemoteException r3, $r5;
        com.android.internal.widget.ILockSettings $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setString(java.lang.String,java.lang.String,int)>(r1, r2, i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write string ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isSecure()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i1;
        byte $b2, $b3, $b4, $b5, $b6, $b7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()>();

        l0 = (long) $i1;

        $b2 = l0 cmp 65536L;

        if $b2 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        z0 = $z8;

        $b3 = l0 cmp 131072L;

        if $b3 == 0 goto label3;

        $b4 = l0 cmp 196608L;

        if $b4 == 0 goto label3;

        $b5 = l0 cmp 262144L;

        if $b5 == 0 goto label3;

        $b6 = l0 cmp 327680L;

        if $b6 == 0 goto label3;

        $b7 = l0 cmp 393216L;

        if $b7 != 0 goto label4;

     label3:
        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        z1 = $z7;

        if z0 == 0 goto label6;

        $z5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z5 == 0 goto label6;

        $z6 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPatternExists()>();

        if $z6 != 0 goto label7;

     label6:
        if z1 == 0 goto label8;

        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPasswordExists()>();

        if $z3 == 0 goto label8;

     label7:
        $z4 = 1;

        goto label9;

     label8:
        $z4 = 0;

     label9:
        z2 = $z4;

        return z2;
    }

    public void updateEmergencyCallButtonState(android.widget.Button, boolean, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.widget.Button r1;
        boolean z0, z1, $z2, $z3;
        int i0, i1, $i2, $i3, i4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: android.widget.Button;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isEmergencyCallCapable()>();

        if $z2 == 0 goto label1;

        if z0 == 0 goto label1;

        virtualinvoke r1.<android.widget.Button: void setVisibility(int)>(0);

        goto label2;

     label1:
        virtualinvoke r1.<android.widget.Button: void setVisibility(int)>(8);

        return;

     label2:
        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isInCall()>();

        if $z3 == 0 goto label5;

        i0 = 17040242;

        if z1 == 0 goto label3;

        $i3 = 17301636;

        goto label4;

     label3:
        $i3 = 0;

     label4:
        i1 = $i3;

        virtualinvoke r1.<android.widget.Button: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>(i1, 0, 0, 0);

        goto label8;

     label5:
        i0 = 17040241;

        if z1 == 0 goto label6;

        $i2 = 17302368;

        goto label7;

     label6:
        $i2 = 0;

     label7:
        i4 = $i2;

        virtualinvoke r1.<android.widget.Button: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>(i4, 0, 0, 0);

     label8:
        virtualinvoke r1.<android.widget.Button: void setText(int)>(i0);

        return;
    }

    public void resumeCall()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.telecom.TelecomManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.telecom.TelecomManager getTelecommManager()>();

        virtualinvoke $r1.<android.telecom.TelecomManager: void showInCallScreen(boolean)>(0);

        return;
    }

    public boolean isInCall()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.telecom.TelecomManager $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.telecom.TelecomManager getTelecommManager()>();

        $z0 = virtualinvoke $r1.<android.telecom.TelecomManager: boolean isInCall()>();

        return $z0;
    }

    private android.telecom.TelecomManager getTelecommManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        return $r3;
    }

    private void finishBiometricWeak()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.biometricweakeverchosen", 1);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.facelock", "com.android.facelock.SetupEndScreen");

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void startActivity(android.content.Intent)>(r1);

        return;
    }

    public void setPowerButtonInstantlyLocks(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.power_button_instantly_locks", z0);

        return;
    }

    public boolean getPowerButtonInstantlyLocks()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.power_button_instantly_locks", 1);

        return $z0;
    }

    public static boolean isSafeModeEnabled()
    {
        android.os.IBinder $r1;
        android.view.IWindowManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        $z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isSafeModeEnabled()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasWidgetsEnabledInKeyguard(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, $i2, $i3;
        int[] r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets(int)>(i0);

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $i3 = r1[i1];

        if $i3 <= 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean getWidgetsEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getWidgetsEnabled(int)>($i0);

        return $z0;
    }

    public boolean getWidgetsEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.widgets_enabled", 0, i0);

        return $z0;
    }

    public void setWidgetsEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setWidgetsEnabled(boolean,int)>(z0, $i0);

        return;
    }

    public void setWidgetsEnabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lockscreen.widgets_enabled", z0, i0);

        return;
    }

    public void setEnabledTrustAgents(java.util.Collection)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.Collection;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setEnabledTrustAgents(java.util.Collection,int)>(r1, $i0);

        return;
    }

    public java.util.List getEnabledTrustAgents()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.util.List getEnabledTrustAgents(int)>($i0);

        return $r1;
    }

    public void setEnabledTrustAgents(java.util.Collection, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.Collection r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder r2, $r5;
        java.util.Iterator r3;
        android.content.ComponentName r4;
        boolean $z0;
        java.lang.String $r6, $r9;
        android.app.trust.TrustManager $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.ComponentName) $r8;

        $i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r9 = virtualinvoke r4.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label1;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.enabledtrustagents", $r6, i0);

        $r7 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r7.<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)>($i1);

        return;
    }

    public java.util.List getEnabledTrustAgents(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, i2, $i3;
        java.lang.String r1, r5;
        java.lang.String[] r2, r4;
        java.util.ArrayList r3, $r6;
        boolean $z0, $z1;
        android.content.ComponentName $r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.enabledtrustagents", i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r6 = new java.util.ArrayList;

        $i3 = lengthof r2;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i3);

        r3 = $r6;

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r5 = r4[i2];

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z1 != 0 goto label3;

        $r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r5);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return r3;
    }

    public void requireCredentialEntry(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.trust.TrustManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r1.<android.app.trust.TrustManager: void reportRequireCredentialEntry(int)>(i0);

        return;
    }

    private void onAfterChangingPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.trust.TrustManager $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r1.<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)>($i0);

        return;
    }

    public boolean isCredentialRequiredToDecrypt(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0, $z1;
        int i0;
        android.content.ContentResolver $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "require_password_to_decrypt", -1);

        if i0 != -1 goto label1;

        $z1 = z0;

        goto label3;

     label1:
        if i0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void setCredentialRequiredToDecrypt(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int $i0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        byte $b1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentUser()>();

        if $i0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LockPatternUtils", "Only device owner may call setCredentialRequiredForDecrypt()");

        return;

     label1:
        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "require_password_to_decrypt", $b1);

        return;
    }

    static void <clinit>()
    {
        <com.android.internal.widget.LockPatternUtils: int MAX_ALLOWED_SEQUENCE> = 3;

        <com.android.internal.widget.LockPatternUtils: java.lang.String ENABLED_TRUST_AGENTS> = "lockscreen.enabledtrustagents";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED> = "lock_screen_owner_info_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO> = "lock_screen_owner_info";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_HISTORY_KEY> = "lockscreen.passwordhistory";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_WIDGETS_ENABLED> = "lockscreen.widgets_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS> = "lockscreen.power_button_instantly_locks";

        <com.android.internal.widget.LockPatternUtils: java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY> = "lockscreen.biometricweakeverchosen";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK> = "lockscreen.biometric_weak_fallback";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_OPTIONS> = "lockscreen.options";

        <com.android.internal.widget.LockPatternUtils: java.lang.String DISABLE_LOCKSCREEN_KEY> = "lockscreen.disabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_PASSWORD_SALT_KEY> = "lockscreen.password_salt";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_ALTERNATE_KEY> = "lockscreen.password_type_alternate";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_KEY> = "lockscreen.password_type";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PATTERN_EVER_CHOSEN_KEY> = "lockscreen.patterneverchosen";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_ATTEMPT_DEADLINE> = "lockscreen.lockoutattemptdeadline";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_PERMANENT_KEY> = "lockscreen.lockedoutpermanently";

        <com.android.internal.widget.LockPatternUtils: int ID_DEFAULT_STATUS_WIDGET> = -2;

        <com.android.internal.widget.LockPatternUtils: int FLAG_BIOMETRIC_WEAK_LIVELINESS> = 1;

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_APPWIDGET> = "showappwidget";

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_SECURITY_CHALLENGE> = "showsecuritychallenge";

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_USER_SWITCHER> = "showuserswitcher";

        <com.android.internal.widget.LockPatternUtils: int MIN_PATTERN_REGISTER_FAIL> = 4;

        <com.android.internal.widget.LockPatternUtils: int MIN_LOCK_PATTERN_SIZE> = 4;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE> = 5;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS> = 1000L;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_TIMEOUT_MS> = 30000L;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_RESET> = 20;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_TIMEOUT> = 5;

        <com.android.internal.widget.LockPatternUtils: boolean DEBUG> = 0;

        <com.android.internal.widget.LockPatternUtils: java.lang.String TAG> = "LockPatternUtils";

        <com.android.internal.widget.LockPatternUtils: int sCurrentUserId> = -10000;

        return;
    }
}
