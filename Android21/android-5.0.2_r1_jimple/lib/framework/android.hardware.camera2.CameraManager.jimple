public final class android.hardware.camera2.CameraManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final boolean DEBUG;
    private static final java.lang.String CAMERA_SERVICE_BINDER_NAME;
    private static final int USE_CALLING_UID;
    private static final int API_VERSION_1;
    private static final int API_VERSION_2;
    private android.hardware.ICameraService mCameraService;
    private java.util.ArrayList mDeviceIdList;
    private final android.util.ArrayMap mCallbackMap;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;
    private final android.hardware.camera2.CameraManager$CameraServiceListener mServiceListener;

    public void <init>(android.content.Context)
    {
        android.hardware.camera2.CameraManager r0;
        android.content.Context r1;
        java.lang.Object r2, $r5, $r7;
        java.lang.Throwable r3, $r8;
        android.util.ArrayMap $r4;
        android.hardware.camera2.CameraManager$CameraServiceListener $r6;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mCallbackMap> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock> = $r5;

        $r6 = new android.hardware.camera2.CameraManager$CameraServiceListener;

        specialinvoke $r6.<android.hardware.camera2.CameraManager$CameraServiceListener: void <init>(android.hardware.camera2.CameraManager,android.hardware.camera2.CameraManager$1)>(r0, null);

        r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraManager$CameraServiceListener mServiceListener> = $r6;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("CameraManager", 3);

        r0.<android.hardware.camera2.CameraManager: boolean DEBUG> = $z0;

        $r7 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        r0.<android.hardware.camera2.CameraManager: android.content.Context mContext> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraManager: void connectCameraServiceLocked()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String[] getCameraIdList() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        java.util.ArrayList $r4;
        java.lang.String[] $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r3 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<android.hardware.camera2.CameraManager: java.util.ArrayList getOrCreateDeviceIdListLocked()>();

        $r5 = newarray (java.lang.String)[0];

        $r6 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        exitmonitor r1;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback, android.os.Handler)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        android.os.Handler r2, r4, $r10;
        android.os.Looper r3;
        java.lang.Throwable r5, $r12;
        java.lang.Object $r6, $r8, r13;
        android.util.ArrayMap $r7;
        android.hardware.camera2.CameraManager$CameraServiceListener $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        r2 := @parameter1: android.os.Handler;

        if r2 != null goto label2;

        r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r3 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No handler given, and current thread has no looper!");

        throw $r11;

     label1:
        $r10 = new android.os.Handler;

        specialinvoke $r10.<android.os.Handler: void <init>(android.os.Looper)>(r3);

        r2 = $r10;

     label2:
        $r6 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r13 = $r6;

        entermonitor $r6;

     label3:
        $r7 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mCallbackMap>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r4 = (android.os.Handler) $r8;

        if r4 != null goto label4;

        $r9 = r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraManager$CameraServiceListener mServiceListener>;

        virtualinvoke $r9.<android.hardware.camera2.CameraManager$CameraServiceListener: void updateCallbackLocked(android.hardware.camera2.CameraManager$AvailabilityCallback,android.os.Handler)>(r1, r2);

     label4:
        exitmonitor r13;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r13;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        android.util.ArrayMap $r5;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        $r4 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mCallbackMap>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1, r5, $r18;
        java.lang.Object r2, $r8;
        int i0;
        android.hardware.ICameraService r3;
        java.lang.String[] r4;
        android.hardware.CameraInfo r6, $r13;
        java.lang.Throwable r7, $r17;
        java.util.ArrayList $r9;
        boolean $z0, $z1;
        java.lang.Integer $r10;
        android.hardware.camera2.impl.CameraMetadataNative $r11, r24;
        android.hardware.camera2.CameraCharacteristics $r12, r23;
        android.hardware.camera2.CameraAccessException $r14, $r20, $r21;
        java.lang.Object[] $r15;
        java.lang.IllegalArgumentException $r16;
        android.hardware.camera2.utils.CameraRuntimeException $r19, r25;
        android.os.RemoteException $r22, r26;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        $r9 = specialinvoke r0.<android.hardware.camera2.CameraManager: java.util.ArrayList getOrCreateDeviceIdListLocked()>();

        $z0 = virtualinvoke $r9.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r1;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Camera id %s does not match any currently connected camera device", $r15);

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label02:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r3 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService getCameraServiceLocked()>();

        if r3 != null goto label03;

        $r14 = new android.hardware.camera2.CameraAccessException;

        specialinvoke $r14.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>(2, "Camera service is currently unavailable");

        throw $r14;

     label03:
        $z1 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCamera2ApiLocked(java.lang.String)>(r1);

        if $z1 != 0 goto label04;

        r4 = newarray (java.lang.String)[1];

        interfaceinvoke r3.<android.hardware.ICameraService: int getLegacyParameters(int,java.lang.String[])>(i0, r4);

        r5 = r4[0];

        $r13 = new android.hardware.CameraInfo;

        specialinvoke $r13.<android.hardware.CameraInfo: void <init>()>();

        r6 = $r13;

        interfaceinvoke r3.<android.hardware.ICameraService: int getCameraInfo(int,android.hardware.CameraInfo)>(i0, r6);

        r23 = staticinvoke <android.hardware.camera2.legacy.LegacyMetadataMapper: android.hardware.camera2.CameraCharacteristics createCharacteristics(java.lang.String,android.hardware.CameraInfo)>(r5, r6);

        goto label05;

     label04:
        $r11 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r11.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r24 = $r11;

        interfaceinvoke r3.<android.hardware.ICameraService: int getCameraCharacteristics(int,android.hardware.camera2.impl.CameraMetadataNative)>(i0, r24);

        $r12 = new android.hardware.camera2.CameraCharacteristics;

        specialinvoke $r12.<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r24);

        r23 = $r12;

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        r25 = $r19;

        $r21 = virtualinvoke r25.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r21;

     label07:
        $r22 := @caughtexception;

        r26 = $r22;

        $r20 = new android.hardware.camera2.CameraAccessException;

        specialinvoke $r20.<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, "Camera service is currently unavailable", r26);

        throw $r20;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        r7 = $r17;

        exitmonitor r2;

     label11:
        throw r7;

     label12:
        return r23;

        catch android.hardware.camera2.utils.CameraRuntimeException from label03 to label05 with label06;
        catch android.os.RemoteException from label03 to label05 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1, $r16, $r34;
        android.hardware.camera2.CameraDevice$StateCallback r2;
        android.os.Handler r3;
        android.hardware.camera2.CameraCharacteristics r4;
        java.lang.Object r5, $r14;
        android.hardware.camera2.ICameraDeviceUser r6;
        android.hardware.camera2.impl.CameraDeviceImpl r7, $r13, r37;
        android.hardware.camera2.utils.BinderHolder r8, $r15;
        android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.hardware.ICameraService r10;
        android.hardware.camera2.utils.CameraRuntimeException r11, $r19, $r20, $r26, $r32, r35, r38;
        java.lang.Throwable r12, $r23;
        boolean $z0;
        android.content.Context $r17;
        android.os.IBinder $r18;
        android.hardware.camera2.CameraAccessException $r21, $r24, $r31;
        java.lang.AssertionError $r22;
        java.lang.NumberFormatException $r25;
        java.lang.StringBuilder $r27, $r28, $r29;
        java.lang.IllegalArgumentException $r30;
        android.os.RemoteException $r33, r36;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r3 := @parameter2: android.os.Handler;

        r4 = virtualinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>(r1);

     label01:
        $r14 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        r5 = $r14;

        entermonitor $r14;

     label02:
        r6 = null;

        $r13 = new android.hardware.camera2.impl.CameraDeviceImpl;

        specialinvoke $r13.<android.hardware.camera2.impl.CameraDeviceImpl: void <init>(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler,android.hardware.camera2.CameraCharacteristics)>(r1, r2, r3, r4);

        r7 = $r13;

        $r15 = new android.hardware.camera2.utils.BinderHolder;

        specialinvoke $r15.<android.hardware.camera2.utils.BinderHolder: void <init>()>();

        r8 = $r15;

        r9 = virtualinvoke r7.<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks getCallbacks()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label03:
        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCamera2ApiLocked(java.lang.String)>(r1);

        if $z0 == 0 goto label05;

        r10 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService getCameraServiceLocked()>();

        if r10 != null goto label04;

        $r19 = new android.hardware.camera2.utils.CameraRuntimeException;

        specialinvoke $r19.<android.hardware.camera2.utils.CameraRuntimeException: void <init>(int,java.lang.String)>(2, "Camera service is currently unavailable");

        throw $r19;

     label04:
        $r17 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r17.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke r10.<android.hardware.ICameraService: int connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,int,java.lang.String,int,android.hardware.camera2.utils.BinderHolder)>(r9, i0, $r16, -1, r8);

        $r18 = virtualinvoke r8.<android.hardware.camera2.utils.BinderHolder: android.os.IBinder getBinder()>();

        r6 = staticinvoke <android.hardware.camera2.ICameraDeviceUser$Stub: android.hardware.camera2.ICameraDeviceUser asInterface(android.os.IBinder)>($r18);

        goto label06;

     label05:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CameraManager", "Using legacy camera HAL.");

        r6 = staticinvoke <android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.legacy.CameraDeviceUserShim connectBinderShim(android.hardware.camera2.ICameraDeviceCallbacks,int)>(r9, i0);

     label06:
        goto label14;

     label07:
        $r20 := @caughtexception;

        r35 = $r20;

        $i3 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i3 != 1000 goto label08;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should\'ve gone down the shim path");

        throw $r22;

     label08:
        $i1 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i1 == 4 goto label09;

        $i4 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i4 == 5 goto label09;

        $i5 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i5 == 1 goto label09;

        $i7 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i7 == 2 goto label09;

        $i8 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i8 != 3 goto label11;

     label09:
        virtualinvoke r7.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteFailure(android.hardware.camera2.utils.CameraRuntimeException)>(r35);

        $i2 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i2 == 1 goto label10;

        $i6 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i6 != 2 goto label12;

     label10:
        $r21 = virtualinvoke r35.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r21;

     label11:
        throw r35;

     label12:
        goto label14;

     label13:
        $r33 := @caughtexception;

        r36 = $r33;

        $r32 = new android.hardware.camera2.utils.CameraRuntimeException;

        specialinvoke $r32.<android.hardware.camera2.utils.CameraRuntimeException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, "Camera service is currently unavailable", r36);

        r11 = $r32;

        virtualinvoke r7.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteFailure(android.hardware.camera2.utils.CameraRuntimeException)>(r11);

        $r31 = virtualinvoke r11.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r31;

     label14:
        virtualinvoke r7.<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)>(r6);

        r37 = r7;

        exitmonitor r5;

     label15:
        goto label18;

     label16:
        $r23 := @caughtexception;

        r12 = $r23;

        exitmonitor r5;

     label17:
        throw r12;

     label18:
        goto label21;

     label19:
        $r25 := @caughtexception;

        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected cameraId to be numeric, but it was: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label20:
        $r26 := @caughtexception;

        r38 = $r26;

        $r24 = virtualinvoke r38.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r24;

     label21:
        return r37;

        catch android.hardware.camera2.utils.CameraRuntimeException from label03 to label06 with label07;
        catch android.os.RemoteException from label03 to label06 with label13;
        catch java.lang.Throwable from label02 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.NumberFormatException from label01 to label18 with label19;
        catch android.hardware.camera2.utils.CameraRuntimeException from label01 to label18 with label20;
    }

    public void openCamera(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        android.hardware.camera2.CameraDevice$StateCallback r2;
        android.os.Handler r3, $r7;
        android.os.Looper $r5;
        java.lang.IllegalArgumentException $r6, $r8, $r9;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateCallback;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cameraId was null");

        throw $r9;

     label1:
        if r2 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback was null");

        throw $r8;

     label2:
        if r3 != null goto label4;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r5 == null goto label3;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>()>();

        r3 = $r7;

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Looper doesn\'t exist in the calling thread");

        throw $r6;

     label4:
        specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>(r1, r2, r3);

        return;
    }

    private java.util.ArrayList getOrCreateDeviceIdListLocked() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.ICameraService r1;
        java.util.ArrayList r2, $r5, $r6, $r7;
        android.hardware.camera2.utils.CameraRuntimeException r3, $r16, $r17, r25;
        int i0, $i3, i4;
        boolean z1, $z2;
        android.hardware.camera2.impl.CameraMetadataNative $r8, r24;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        java.lang.AssertionError $r10;
        java.lang.String $r14, $r15;
        android.hardware.camera2.CameraAccessException $r18, $r20;
        java.lang.IllegalArgumentException $r19;
        android.os.RemoteException $r21, $r22;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r5 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        if $r5 != null goto label18;

        r1 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService getCameraServiceLocked()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        if r1 != null goto label01;

        return r2;

     label01:
        i4 = interfaceinvoke r1.<android.hardware.ICameraService: int getNumberOfCameras()>();

     label02:
        goto label05;

     label03:
        $r17 := @caughtexception;

        r3 = $r17;

        $r20 = virtualinvoke r3.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r20;

     label04:
        $r21 := @caughtexception;

        return r2;

     label05:
        $r8 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r24 = $r8;

        i0 = 0;

     label06:
        if i0 >= i4 goto label17;

        z1 = 0;

     label07:
        interfaceinvoke r1.<android.hardware.ICameraService: int getCameraCharacteristics(int,android.hardware.camera2.impl.CameraMetadataNative)>(i0, r24);

        $z2 = virtualinvoke r24.<android.hardware.camera2.impl.CameraMetadataNative: boolean isEmpty()>();

        if $z2 != 0 goto label08;

        z1 = 1;

        goto label09;

     label08:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Expected to get non-empty characteristics");

        throw $r10;

     label09:
        goto label14;

     label10:
        $r19 := @caughtexception;

        goto label14;

     label11:
        $r16 := @caughtexception;

        r25 = $r16;

        $i3 = virtualinvoke r25.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i3 == 2 goto label12;

        $r18 = virtualinvoke r25.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r18;

     label12:
        goto label14;

     label13:
        $r22 := @caughtexception;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        return r2;

     label14:
        if z1 == 0 goto label15;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        goto label16;

     label15:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error querying camera device ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for listing.");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraManager", $r14);

     label16:
        i0 = i0 + 1;

        goto label06;

     label17:
        r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList> = r2;

     label18:
        $r6 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        return $r6;

        catch android.hardware.camera2.utils.CameraRuntimeException from label01 to label02 with label03;
        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label07 to label09 with label10;
        catch android.hardware.camera2.utils.CameraRuntimeException from label07 to label09 with label11;
        catch android.os.RemoteException from label07 to label09 with label13;
    }

    private void handleRecoverableSetupErrors(android.hardware.camera2.utils.CameraRuntimeException, java.lang.String)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.utils.CameraRuntimeException r1;
        java.lang.String r2, r3, $r8;
        int i0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.IllegalStateException $r9;
        android.hardware.camera2.CameraAccessException $r10;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.utils.CameraRuntimeException;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        lookupswitch(i0)
        {
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        r3 = staticinvoke <android.hardware.camera2.CameraAccessException: java.lang.String getDefaultMessage(int)>(i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CameraManager", $r8);

        goto label3;

     label2:
        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke r1.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(r2, $r10);

        throw $r9;

     label3:
        return;
    }

    private boolean supportsCamera2ApiLocked(java.lang.String)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.hardware.camera2.CameraManager: boolean supportsCameraApiLocked(java.lang.String,int)>(r1, 2);

        return $z0;
    }

    private boolean supportsCameraApiLocked(java.lang.String, int)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1, $r7;
        int i0, i1, i2, $i3;
        android.hardware.ICameraService r2;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        android.os.RemoteException $r8;
        android.hardware.camera2.utils.CameraRuntimeException $r9, r10;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label1:
        r2 = specialinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService getCameraServiceLocked()>();

        if r2 != null goto label3;

     label2:
        return 0;

     label3:
        i2 = interfaceinvoke r2.<android.hardware.ICameraService: int supportsCameraApi(int,int)>(i1, i0);

        if i2 == 0 goto label4;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected value ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r3;

     label4:
        return 1;

     label5:
        $r9 := @caughtexception;

        r10 = $r9;

        $i3 = virtualinvoke r10.<android.hardware.camera2.utils.CameraRuntimeException: int getReason()>();

        if $i3 == 1000 goto label6;

        throw r10;

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

     label8:
        return 0;

        catch android.hardware.camera2.utils.CameraRuntimeException from label1 to label2 with label5;
        catch android.hardware.camera2.utils.CameraRuntimeException from label3 to label4 with label5;
        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
    }

    private void connectCameraServiceLocked()
    {
        android.hardware.camera2.CameraManager r0;
        android.os.IBinder r1;
        android.hardware.ICameraService r3, r14;
        android.hardware.camera2.utils.CameraRuntimeException r4, $r10, $r11, r15;
        android.hardware.camera2.CameraManager$CameraServiceDeathListener $r5;
        java.lang.Object $r6;
        int $i0;
        android.hardware.camera2.CameraManager$CameraServiceListener $r7;
        android.os.RemoteException $r8, $r9;
        java.lang.IllegalStateException $r12;
        android.hardware.camera2.CameraAccessException $r13;

        r0 := @this: android.hardware.camera2.CameraManager;

        r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService> = null;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media.camera");

        if r1 != null goto label01;

        return;

     label01:
        $r5 = new android.hardware.camera2.CameraManager$CameraServiceDeathListener;

        specialinvoke $r5.<android.hardware.camera2.CameraManager$CameraServiceDeathListener: void <init>(android.hardware.camera2.CameraManager,android.hardware.camera2.CameraManager$1)>(r0, null);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        return;

     label04:
        r14 = staticinvoke <android.hardware.ICameraService$Stub: android.hardware.ICameraService asInterface(android.os.IBinder)>(r1);

        $r6 = staticinvoke <android.hardware.camera2.utils.CameraServiceBinderDecorator: java.lang.Object newInstance(java.lang.Object)>(r14);

        r3 = (android.hardware.ICameraService) $r6;

     label05:
        $i0 = staticinvoke <android.hardware.camera2.impl.CameraMetadataNative: int nativeSetupGlobalVendorTagDescriptor()>();

        staticinvoke <android.hardware.camera2.utils.CameraServiceBinderDecorator: void throwOnError(int)>($i0);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        r4 = $r10;

        specialinvoke r0.<android.hardware.camera2.CameraManager: void handleRecoverableSetupErrors(android.hardware.camera2.utils.CameraRuntimeException,java.lang.String)>(r4, "Failed to set up vendor tags");

     label08:
        $r7 = r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraManager$CameraServiceListener mServiceListener>;

        interfaceinvoke r3.<android.hardware.ICameraService: int addListener(android.hardware.ICameraServiceListener)>($r7);

        r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService> = r3;

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        r15 = $r11;

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke r15.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to register a camera service listener", $r13);

        throw $r12;

     label11:
        $r8 := @caughtexception;

     label12:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.hardware.camera2.utils.CameraRuntimeException from label05 to label06 with label07;
        catch android.hardware.camera2.utils.CameraRuntimeException from label08 to label09 with label10;
        catch android.os.RemoteException from label08 to label09 with label11;
    }

    private android.hardware.ICameraService getCameraServiceLocked()
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.ICameraService $r1, $r2, $r3;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("CameraManager", "getCameraServiceLocked: Reconnecting to camera service");

        specialinvoke r0.<android.hardware.camera2.CameraManager: void connectCameraServiceLocked()>();

        $r3 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        if $r3 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CameraManager", "Camera service is unavailable");

     label1:
        $r2 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        return $r2;
    }

    static java.lang.Object access$200(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        return $r1;
    }

    static android.hardware.ICameraService access$302(android.hardware.camera2.CameraManager, android.hardware.ICameraService)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.ICameraService r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        r1 := @parameter1: android.hardware.ICameraService;

        r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService> = r1;

        return r1;
    }

    static java.util.ArrayList access$400(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        return $r1;
    }

    static android.hardware.camera2.CameraManager$CameraServiceListener access$500(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$CameraServiceListener $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraManager$CameraServiceListener mServiceListener>;

        return $r1;
    }

    static boolean access$600(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $z0 = r0.<android.hardware.camera2.CameraManager: boolean DEBUG>;

        return $z0;
    }

    static android.util.ArrayMap access$700(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mCallbackMap>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.CameraManager: int API_VERSION_2> = 2;

        <android.hardware.camera2.CameraManager: int API_VERSION_1> = 1;

        <android.hardware.camera2.CameraManager: int USE_CALLING_UID> = -1;

        <android.hardware.camera2.CameraManager: java.lang.String CAMERA_SERVICE_BINDER_NAME> = "media.camera";

        <android.hardware.camera2.CameraManager: java.lang.String TAG> = "CameraManager";

        return;
    }
}
