public final class android.media.tv.TvInputManager$Session extends java.lang.Object
{
    static final int DISPATCH_IN_PROGRESS;
    static final int DISPATCH_NOT_HANDLED;
    static final int DISPATCH_HANDLED;
    private static final long INPUT_SESSION_NOT_RESPONDING_TIMEOUT;
    private final android.media.tv.ITvInputManager mService;
    private final int mUserId;
    private final int mSeq;
    private final android.media.tv.TvInputManager$Session$InputEventHandler mHandler;
    private final android.util.Pools$Pool mPendingEventPool;
    private final android.util.SparseArray mPendingEvents;
    private final android.util.SparseArray mSessionCallbackRecordMap;
    private android.os.IBinder mToken;
    private android.media.tv.TvInputManager$Session$TvInputEventSender mSender;
    private android.view.InputChannel mChannel;
    private final java.util.List mAudioTracks;
    private final java.util.List mVideoTracks;
    private final java.util.List mSubtitleTracks;
    private java.lang.String mSelectedAudioTrackId;
    private java.lang.String mSelectedVideoTrackId;
    private java.lang.String mSelectedSubtitleTrackId;

    private void <init>(android.os.IBinder, android.view.InputChannel, android.media.tv.ITvInputManager, int, int, android.util.SparseArray)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        android.view.InputChannel r2;
        android.media.tv.ITvInputManager r3;
        int i0, i1;
        android.util.SparseArray r4, $r8;
        android.media.tv.TvInputManager$Session$InputEventHandler $r5;
        android.os.Looper $r6;
        android.util.Pools$SimplePool $r7;
        java.util.ArrayList $r9, $r10, $r11;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.InputChannel;

        r3 := @parameter2: android.media.tv.ITvInputManager;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: android.util.SparseArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.media.tv.TvInputManager$Session$InputEventHandler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.media.tv.TvInputManager$Session$InputEventHandler: void <init>(android.media.tv.TvInputManager$Session,android.os.Looper)>(r0, $r6);

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler> = $r5;

        $r7 = new android.util.Pools$SimplePool;

        specialinvoke $r7.<android.util.Pools$SimplePool: void <init>(int)>(20);

        r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>(int)>(20);

        r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks> = $r11;

        r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken> = r1;

        r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel> = r2;

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService> = r3;

        r0.<android.media.tv.TvInputManager$Session: int mUserId> = i0;

        r0.<android.media.tv.TvInputManager$Session: int mSeq> = i1;

        r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap> = r4;

        return;
    }

    public void release()
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.RemoteException r1, $r5;
        android.os.IBinder $r2, $r3;
        int $i0;
        android.media.tv.ITvInputManager $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void releaseSession(android.os.IBinder,int)>($r3, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label4:
        specialinvoke r0.<android.media.tv.TvInputManager$Session: void releaseInternal()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void setMain()
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.RemoteException r1, $r5;
        android.os.IBinder $r2, $r3;
        int $i0;
        android.media.tv.ITvInputManager $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void setMainSession(android.os.IBinder,int)>($r3, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSurface(android.view.Surface)
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.Surface r1;
        android.os.RemoteException r2, $r6;
        android.os.IBinder $r3, $r4;
        int $i0;
        android.media.tv.ITvInputManager $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.view.Surface;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r5.<android.media.tv.ITvInputManager: void setSurface(android.os.IBinder,android.view.Surface,int)>($r4, r1, $i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchSurfaceChanged(int, int, int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, i1, i2, $i3;
        android.os.RemoteException r1, $r5;
        android.os.IBinder $r2, $r3;
        android.media.tv.ITvInputManager $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i3 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>($r3, i0, i1, i2, $i3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamVolume(float)
    {
        android.media.tv.TvInputManager$Session r0;
        float f0;
        android.os.RemoteException r1, $r6;
        android.os.IBinder $r2, $r4;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r3;
        int $i2;
        android.media.tv.ITvInputManager $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: android.media.tv.TvInputManager$Session;

        f0 := @parameter0: float;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label2;

        $b1 = f0 cmpl 1.0F;

        if $b1 <= 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("volume should be between 0.0f and 1.0f");

        throw $r3;

     label3:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i2 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r5.<android.media.tv.ITvInputManager: void setVolume(android.os.IBinder,float,int)>($r4, f0, $i2);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    public void tune(android.net.Uri)
    {
        android.media.tv.TvInputManager$Session r0;
        android.net.Uri r1;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.net.Uri;

        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void tune(android.net.Uri,android.os.Bundle)>(r1, null);

        return;
    }

    public void tune(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputManager$Session r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        android.os.RemoteException r3, $r11;
        android.os.IBinder $r4, $r8;
        java.util.List $r5, $r6, $r7;
        int $i0;
        android.media.tv.ITvInputManager $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.RuntimeException $r12;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("channelUri cannot be null");

        throw $r10;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r4 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label2:
        $r5 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r6 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r7 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId> = null;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId> = null;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId> = null;

     label3:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r8 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r9.<android.media.tv.ITvInputManager: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>($r8, r1, r2, $i0);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r12;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setCaptionEnabled(boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        boolean z0;
        android.os.RemoteException r1, $r5;
        android.os.IBinder $r2, $r3;
        int $i0;
        android.media.tv.ITvInputManager $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void setCaptionEnabled(android.os.IBinder,boolean,int)>($r3, z0, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void selectTrack(int, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, $i1;
        java.lang.String r1, $r7, $r15, $r20, $r27;
        android.os.RemoteException r2, $r25;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        android.os.IBinder $r8, $r9;
        android.media.tv.ITvInputManager $r10;
        java.util.List $r11, $r16, $r21;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r26;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 0 goto label1;

        if r1 == null goto label4;

        $r21 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        $z2 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r21, r1);

        if $z2 != 0 goto label4;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio trackId: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r27);

        return;

     label1:
        if i0 != 1 goto label2;

        if r1 == null goto label4;

        $r16 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        $z1 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r16, r1);

        if $z1 != 0 goto label4;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid video trackId: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r20);

        return;

     label2:
        if i0 != 2 goto label3;

        if r1 == null goto label4;

        $r11 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        $z0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r11, r1);

        if $z0 != 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtitle trackId: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r15);

        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        $r8 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r8 != null goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label5:
        $r10 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r9 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i1 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r10.<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>($r9, i0, r1, $i1);

     label6:
        goto label8;

     label7:
        $r25 := @caughtexception;

        r2 = $r25;

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r26;

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private boolean containsTrack(java.util.List, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        java.util.List r1;
        java.lang.String r2, $r6;
        java.util.Iterator r3;
        android.media.tv.TvTrackInfo r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.tv.TvTrackInfo) $r5;

        $r6 = virtualinvoke r4.<android.media.tv.TvTrackInfo: java.lang.String getId()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.List getTracks(int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.util.List $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        $r10 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        if $r10 != null goto label1;

        return null;

     label1:
        $r11 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        return $r11;

     label2:
        if i0 != 1 goto label4;

        $r8 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        if $r8 != null goto label3;

        return null;

     label3:
        $r9 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        return $r9;

     label4:
        if i0 != 2 goto label6;

        $r6 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        if $r6 != null goto label5;

        return null;

     label5:
        $r7 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        return $r7;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public java.lang.String getSelectedTrack(int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r6, $r7, $r8;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r8 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId>;

        return $r8;

     label1:
        if i0 != 1 goto label2;

        $r7 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId>;

        return $r7;

     label2:
        if i0 != 2 goto label3;

        $r6 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId>;

        return $r6;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public void sendAppPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.os.RemoteException r3, $r7;
        android.os.IBinder $r4, $r5;
        int $i0;
        android.media.tv.ITvInputManager $r6;
        java.lang.RuntimeException $r8;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r6 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r6.<android.media.tv.ITvInputManager: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>($r5, r1, r2, $i0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void createOverlayView(android.view.View, android.graphics.Rect)
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.View r1;
        android.graphics.Rect r2;
        android.os.RemoteException r3, $r12;
        android.os.IBinder $r4, $r5, $r7, $r8;
        android.media.tv.ITvInputManager $r6;
        int $i0;
        java.lang.IllegalStateException $r9;
        java.lang.IllegalArgumentException $r10, $r11;
        java.lang.RuntimeException $r13;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("view cannot be null");

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("frame cannot be null");

        throw $r10;

     label2:
        $r4 = virtualinvoke r1.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r4 != null goto label3;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("view must be attached to a window");

        throw $r9;

     label3:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r5 != null goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label4:
        $r6 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r7 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $r8 = virtualinvoke r1.<android.view.View: android.os.IBinder getWindowToken()>();

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r6.<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>($r7, $r8, r2, $i0);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        r3 = $r12;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r13;

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void relayoutOverlayView(android.graphics.Rect)
    {
        android.media.tv.TvInputManager$Session r0;
        android.graphics.Rect r1;
        android.os.RemoteException r2, $r7;
        android.os.IBinder $r3, $r4;
        int $i0;
        android.media.tv.ITvInputManager $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.RuntimeException $r8;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.graphics.Rect;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("frame cannot be null");

        throw $r6;

     label1:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r3 != null goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label2:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r5.<android.media.tv.ITvInputManager: void relayoutOverlayView(android.os.IBinder,android.graphics.Rect,int)>($r4, r1, $i0);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    void removeOverlayView()
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.RemoteException r1, $r5;
        android.os.IBinder $r2, $r3;
        int $i0;
        android.media.tv.ITvInputManager $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void removeOverlayView(android.os.IBinder,int)>($r3, $i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void requestUnblockContent(android.media.tv.TvContentRating)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvContentRating r1;
        android.os.RemoteException r2, $r8;
        android.os.IBinder $r3, $r5;
        android.media.tv.ITvInputManager $r4;
        java.lang.String $r6;
        int $i0;
        java.lang.IllegalArgumentException $r7;
        java.lang.RuntimeException $r9;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvContentRating;

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unblockedRating cannot be null");

        throw $r7;

     label2:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $r6 = virtualinvoke r1.<android.media.tv.TvContentRating: java.lang.String flattenToString()>();

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void requestUnblockContent(android.os.IBinder,java.lang.String,int)>($r5, $r6, $i0);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r9;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int dispatchInputEvent(android.view.InputEvent, java.lang.Object, android.media.tv.TvInputManager$Session$FinishedInputEventCallback, android.os.Handler)
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.InputEvent r1;
        java.lang.Object r2;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback r3;
        android.os.Handler r4;
        android.media.tv.TvInputManager$Session$InputEventHandler r5, $r9, $r13, $r14;
        android.media.tv.TvInputManager$Session$PendingEvent r6;
        android.os.Message r7;
        java.lang.Throwable r8, $r17;
        android.view.InputChannel $r10;
        android.os.Looper $r11, $r12;
        int $i0;
        java.lang.IllegalArgumentException $r15, $r16;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: android.media.tv.TvInputManager$Session$FinishedInputEventCallback;

        r4 := @parameter3: android.os.Handler;

        if r1 != null goto label01;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event cannot be null");

        throw $r15;

     label01:
        if r3 == null goto label02;

        if r4 != null goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handler cannot be null");

        throw $r16;

     label02:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r5 = $r9;

        entermonitor $r9;

     label03:
        $r10 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if $r10 != null goto label05;

        exitmonitor r5;

     label04:
        return 0;

     label05:
        r6 = specialinvoke r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$PendingEvent obtainPendingEventLocked(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r1, r2, r3, r4);

        $r11 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r12 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r11 != $r12 goto label07;

        $i0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r6);

        exitmonitor r5;

     label06:
        return $i0;

     label07:
        $r13 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r7 = virtualinvoke $r13.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r6);

        virtualinvoke r7.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r14 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r14.<android.media.tv.TvInputManager$Session$InputEventHandler: boolean sendMessage(android.os.Message)>(r7);

        exitmonitor r5;

     label08:
        return -1;

     label09:
        $r17 := @caughtexception;

        r8 = $r17;

        exitmonitor r5;

     label10:
        throw r8;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void sendInputEventAndReportResultOnMainLooper(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        android.media.tv.TvInputManager$Session$InputEventHandler r2, $r4;
        int i0;
        java.lang.Throwable r3, $r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        i0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r1);

        if i0 != -1 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent,boolean)>(r1, 0);

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        android.view.InputEvent r2;
        int i0;
        android.os.Message r3;
        android.view.InputChannel $r4, $r20;
        android.media.tv.TvInputManager$Session$TvInputEventSender $r5, $r6, $r18;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        android.os.IBinder $r9;
        java.lang.String $r12;
        android.util.SparseArray $r14;
        android.media.tv.TvInputManager$Session$InputEventHandler $r15, $r16, $r17;
        android.os.Looper $r19;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if $r4 == null goto label3;

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        if $r5 != null goto label1;

        $r18 = new android.media.tv.TvInputManager$Session$TvInputEventSender;

        $r20 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        $r17 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        $r19 = virtualinvoke $r17.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Looper getLooper()>();

        specialinvoke $r18.<android.media.tv.TvInputManager$Session$TvInputEventSender: void <init>(android.media.tv.TvInputManager$Session,android.view.InputChannel,android.os.Looper)>(r0, $r20, $r19);

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender> = $r18;

     label1:
        r2 = r1.<android.media.tv.TvInputManager$Session$PendingEvent: android.view.InputEvent mEvent>;

        i0 = virtualinvoke r2.<android.view.InputEvent: int getSequenceNumber()>();

        $r6 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        $z0 = virtualinvoke $r6.<android.media.tv.TvInputManager$Session$TvInputEventSender: boolean sendInputEvent(int,android.view.InputEvent)>(i0, r2);

        if $z0 == 0 goto label2;

        $r14 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        $r15 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r3 = virtualinvoke $r15.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        virtualinvoke r3.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r16 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r16.<android.media.tv.TvInputManager$Session$InputEventHandler: boolean sendMessageDelayed(android.os.Message,long)>(r3, 2500L);

        return -1;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send input event to session: ");

        $r9 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dropping:");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r12);

     label3:
        return 0;
    }

    void finishedInputEvent(int, boolean, boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, i1;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        android.media.tv.TvInputManager$Session$InputEventHandler r2, $r4, $r9;
        java.lang.Throwable r3, $r15;
        android.util.SparseArray $r5, $r6, $r8;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r12, $r14;
        android.os.IBinder $r11;
        java.lang.String $r13;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i1 = virtualinvoke $r5.<android.util.SparseArray: int indexOfKey(int)>(i0);

        if i1 >= 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (android.media.tv.TvInputManager$Session$PendingEvent) $r7;

        $r8 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r8.<android.util.SparseArray: void removeAt(int)>(i1);

        if z1 == 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for seesion to handle input event after 2500 ms: ");

        $r11 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r13);

        goto label5;

     label4:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r9.<android.media.tv.TvInputManager$Session$InputEventHandler: void removeMessages(int,java.lang.Object)>(2, r1);

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent,boolean)>(r1, z0);

        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent, boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        boolean z0, $z1;
        android.os.Message r2;
        android.os.Handler $r3, $r5;
        android.os.Looper $r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        z0 := @parameter1: boolean;

        r1.<android.media.tv.TvInputManager$Session$PendingEvent: boolean mHandled> = z0;

        $r3 = r1.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        $z1 = virtualinvoke $r4.<android.os.Looper: boolean isCurrentThread()>();

        if $z1 == 0 goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session$PendingEvent: void run()>();

        goto label2;

     label1:
        $r5 = r1.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler>;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r5, r1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    private void flushPendingEventsLocked()
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, i1, i2;
        android.os.Message r1;
        android.media.tv.TvInputManager$Session$InputEventHandler $r2, $r5;
        android.util.SparseArray $r3, $r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r2.<android.media.tv.TvInputManager$Session$InputEventHandler: void removeMessages(int)>(3);

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i2 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i1);

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r1 = virtualinvoke $r5.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,int,int)>(3, i2, 0);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private android.media.tv.TvInputManager$Session$PendingEvent obtainPendingEventLocked(android.view.InputEvent, java.lang.Object, android.media.tv.TvInputManager$Session$FinishedInputEventCallback, android.os.Handler)
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.InputEvent r1;
        java.lang.Object r2, $r7;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback r3;
        android.os.Handler r4;
        android.media.tv.TvInputManager$Session$PendingEvent r5, $r8;
        android.util.Pools$Pool $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: android.media.tv.TvInputManager$Session$FinishedInputEventCallback;

        r4 := @parameter3: android.os.Handler;

        $r6 = r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool>;

        $r7 = interfaceinvoke $r6.<android.util.Pools$Pool: java.lang.Object acquire()>();

        r5 = (android.media.tv.TvInputManager$Session$PendingEvent) $r7;

        if r5 != null goto label1;

        $r8 = new android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke $r8.<android.media.tv.TvInputManager$Session$PendingEvent: void <init>(android.media.tv.TvInputManager$Session,android.media.tv.TvInputManager$1)>(r0, null);

        r5 = $r8;

     label1:
        r5.<android.media.tv.TvInputManager$Session$PendingEvent: android.view.InputEvent mEvent> = r1;

        r5.<android.media.tv.TvInputManager$Session$PendingEvent: java.lang.Object mEventToken> = r2;

        r5.<android.media.tv.TvInputManager$Session$PendingEvent: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mCallback> = r3;

        r5.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler> = r4;

        return r5;
    }

    private void recyclePendingEventLocked(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        android.util.Pools$Pool $r2;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session$PendingEvent: void recycle()>();

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool>;

        interfaceinvoke $r2.<android.util.Pools$Pool: boolean release(java.lang.Object)>(r1);

        return;
    }

    android.os.IBinder getToken()
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder $r1;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        return $r1;
    }

    private void releaseInternal()
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$InputEventHandler r1, $r4;
        java.lang.Throwable r2, r3, $r11, $r12;
        android.view.InputChannel $r5, $r9;
        android.util.SparseArray $r6, $r7, r13;
        int $i0;
        android.media.tv.TvInputManager$Session$TvInputEventSender $r8, $r10;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken> = null;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if $r5 == null goto label03;

        $r8 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        if $r8 == null goto label02;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void flushPendingEventsLocked()>();

        $r10 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        virtualinvoke $r10.<android.media.tv.TvInputManager$Session$TvInputEventSender: void dispose()>();

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender> = null;

     label02:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        virtualinvoke $r9.<android.view.InputChannel: void dispose()>();

        r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel> = null;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        $r6 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap>;

        r13 = $r6;

        entermonitor $r6;

     label08:
        $r7 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mSeq>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>($i0);

        exitmonitor r13;

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r13;

     label11:
        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    static java.util.List access$200(android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvInputManager$Session r0;
        java.util.List $r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        $r1 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        return $r1;
    }

    static java.util.List access$300(android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvInputManager$Session r0;
        java.util.List $r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        $r1 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        return $r1;
    }

    static java.util.List access$400(android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvInputManager$Session r0;
        java.util.List $r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        $r1 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        return $r1;
    }

    static java.lang.String access$502(android.media.tv.TvInputManager$Session, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.String r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: java.lang.String;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId> = r1;

        return r1;
    }

    static java.lang.String access$602(android.media.tv.TvInputManager$Session, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.String r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: java.lang.String;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId> = r1;

        return r1;
    }

    static java.lang.String access$702(android.media.tv.TvInputManager$Session, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.String r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: java.lang.String;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId> = r1;

        return r1;
    }

    void <init>(android.os.IBinder, android.view.InputChannel, android.media.tv.ITvInputManager, int, int, android.util.SparseArray, android.media.tv.TvInputManager$1)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        android.view.InputChannel r2;
        android.media.tv.ITvInputManager r3;
        int i0, i1;
        android.util.SparseArray r4;
        android.media.tv.TvInputManager$1 r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.InputChannel;

        r3 := @parameter2: android.media.tv.ITvInputManager;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: android.util.SparseArray;

        r5 := @parameter6: android.media.tv.TvInputManager$1;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void <init>(android.os.IBinder,android.view.InputChannel,android.media.tv.ITvInputManager,int,int,android.util.SparseArray)>(r1, r2, r3, i0, i1, r4);

        return;
    }

    static void access$1300(android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvInputManager$Session r0;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void releaseInternal()>();

        return;
    }

    static void access$2000(android.media.tv.TvInputManager$Session, android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void sendInputEventAndReportResultOnMainLooper(android.media.tv.TvInputManager$Session$PendingEvent)>(r1);

        return;
    }

    static void access$2100(android.media.tv.TvInputManager$Session, android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void recyclePendingEventLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <android.media.tv.TvInputManager$Session: long INPUT_SESSION_NOT_RESPONDING_TIMEOUT> = 2500L;

        <android.media.tv.TvInputManager$Session: int DISPATCH_HANDLED> = 1;

        <android.media.tv.TvInputManager$Session: int DISPATCH_NOT_HANDLED> = 0;

        <android.media.tv.TvInputManager$Session: int DISPATCH_IN_PROGRESS> = -1;

        return;
    }
}
