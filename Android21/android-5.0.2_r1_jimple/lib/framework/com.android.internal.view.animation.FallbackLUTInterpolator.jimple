public class com.android.internal.view.animation.FallbackLUTInterpolator extends java.lang.Object implements com.android.internal.view.animation.NativeInterpolatorFactory, android.animation.TimeInterpolator
{
    private android.animation.TimeInterpolator mSourceInterpolator;
    private final float[] mLut;

    public void <init>(android.animation.TimeInterpolator, long)
    {
        com.android.internal.view.animation.FallbackLUTInterpolator r0;
        android.animation.TimeInterpolator r1;
        long l0;
        float[] $r2;

        r0 := @this: com.android.internal.view.animation.FallbackLUTInterpolator;

        r1 := @parameter0: android.animation.TimeInterpolator;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.view.animation.FallbackLUTInterpolator: android.animation.TimeInterpolator mSourceInterpolator> = r1;

        $r2 = staticinvoke <com.android.internal.view.animation.FallbackLUTInterpolator: float[] createLUT(android.animation.TimeInterpolator,long)>(r1, l0);

        r0.<com.android.internal.view.animation.FallbackLUTInterpolator: float[] mLut> = $r2;

        return;
    }

    private static float[] createLUT(android.animation.TimeInterpolator, long)
    {
        android.animation.TimeInterpolator r0;
        long l0, l1, $l5, $l6, $l7;
        int i2, i3, i4, $i8;
        float[] r1;
        float f0, f1, $f2, $f3;
        android.view.Choreographer $r2;
        double $d0, $d1;

        r0 := @parameter0: android.animation.TimeInterpolator;

        l0 := @parameter1: long;

        $r2 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        l1 = virtualinvoke $r2.<android.view.Choreographer: long getFrameIntervalNanos()>();

        $l5 = l1 / 1000000L;

        i2 = (int) $l5;

        $l6 = (long) i2;

        $l7 = l0 / $l6;

        $d1 = (double) $l7;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i3 = (int) $d0;

        r1 = newarray (float)[i3];

        $i8 = i3 - 1;

        f0 = (float) $i8;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        $f2 = (float) i4;

        f1 = $f2 / f0;

        $f3 = interfaceinvoke r0.<android.animation.TimeInterpolator: float getInterpolation(float)>(f1);

        r1[i4] = $f3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    public long createNativeInterpolator()
    {
        com.android.internal.view.animation.FallbackLUTInterpolator r0;
        float[] $r1;
        long $l0;

        r0 := @this: com.android.internal.view.animation.FallbackLUTInterpolator;

        $r1 = r0.<com.android.internal.view.animation.FallbackLUTInterpolator: float[] mLut>;

        $l0 = staticinvoke <com.android.internal.view.animation.NativeInterpolatorFactoryHelper: long createLutInterpolator(float[])>($r1);

        return $l0;
    }

    public static long createNativeInterpolator(android.animation.TimeInterpolator, long)
    {
        android.animation.TimeInterpolator r0;
        long l0, $l1;
        float[] r1;

        r0 := @parameter0: android.animation.TimeInterpolator;

        l0 := @parameter1: long;

        r1 = staticinvoke <com.android.internal.view.animation.FallbackLUTInterpolator: float[] createLUT(android.animation.TimeInterpolator,long)>(r0, l0);

        $l1 = staticinvoke <com.android.internal.view.animation.NativeInterpolatorFactoryHelper: long createLutInterpolator(float[])>(r1);

        return $l1;
    }

    public float getInterpolation(float)
    {
        com.android.internal.view.animation.FallbackLUTInterpolator r0;
        float f0, $f1;
        android.animation.TimeInterpolator $r1;

        r0 := @this: com.android.internal.view.animation.FallbackLUTInterpolator;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.internal.view.animation.FallbackLUTInterpolator: android.animation.TimeInterpolator mSourceInterpolator>;

        $f1 = interfaceinvoke $r1.<android.animation.TimeInterpolator: float getInterpolation(float)>(f0);

        return $f1;
    }
}
