public final class android.hardware.camera2.params.StreamConfigurationMap extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int HAL_PIXEL_FORMAT_BLOB;
    private static final int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
    private static final int HAL_PIXEL_FORMAT_RAW_OPAQUE;
    private static final int DURATION_MIN_FRAME;
    private static final int DURATION_STALL;
    private final android.hardware.camera2.params.StreamConfiguration[] mConfigurations;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations;
    private final android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations;
    private final android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations;
    private final java.util.HashMap mOutputFormats;
    private final java.util.HashMap mInputFormats;
    private final java.util.HashMap mHighSpeedVideoSizeMap;
    private final java.util.HashMap mHighSpeedVideoFpsRangeMap;

    public void <init>(android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.HighSpeedVideoConfiguration[])
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.hardware.camera2.params.StreamConfiguration[] r1, r5, $r17;
        android.hardware.camera2.params.StreamConfigurationDuration[] r2, r3, $r19, $r21;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r4, $r23, $r39, r43;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        android.hardware.camera2.params.StreamConfiguration r6;
        java.util.HashMap r7, $r11, $r12, $r13, $r15, $r22, $r26, $r28, $r30, $r32, $r40;
        java.lang.Integer r8, r9, r10, $r24, $r27, $r33, $r37, $r38, r42;
        java.lang.Object[] $r14, $r16, $r18, $r20;
        boolean $z0, $z1;
        java.lang.Object $r25, $r29, $r36;
        java.lang.AssertionError $r35;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r44;
        android.util.Size r45;
        android.util.Range r46;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.hardware.camera2.params.StreamConfiguration[];

        r2 := @parameter1: android.hardware.camera2.params.StreamConfigurationDuration[];

        r3 := @parameter2: android.hardware.camera2.params.StreamConfigurationDuration[];

        r4 := @parameter3: android.hardware.camera2.params.HighSpeedVideoConfiguration[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mOutputFormats> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mInputFormats> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap> = $r13;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap> = $r15;

        $r14 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r1, "configurations");

        $r17 = (android.hardware.camera2.params.StreamConfiguration[]) $r14;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations> = $r17;

        $r16 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r2, "minFrameDurations");

        $r19 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r16;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations> = $r19;

        $r18 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r3, "stallDurations");

        $r21 = (android.hardware.camera2.params.StreamConfigurationDuration[]) $r18;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations> = $r21;

        if r4 != null goto label01;

        $r39 = newarray (android.hardware.camera2.params.HighSpeedVideoConfiguration)[0];

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations> = $r39;

        goto label02;

     label01:
        $r20 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r4, "highSpeedVideoConfigurations");

        $r23 = (android.hardware.camera2.params.HighSpeedVideoConfiguration[]) $r20;

        r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations> = $r23;

     label02:
        r5 = r1;

        i0 = lengthof r5;

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        r6 = r5[i1];

        $z1 = virtualinvoke r6.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z1 == 0 goto label04;

        $r40 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mOutputFormats>;

        goto label05;

     label04:
        $r40 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mInputFormats>;

     label05:
        r7 = $r40;

        $i7 = virtualinvoke r6.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r36 = virtualinvoke r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r37);

        r8 = (java.lang.Integer) $r36;

        if r8 != null goto label06;

        r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label06:
        $i6 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        $i9 = $i6 + 1;

        r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $i8 = virtualinvoke r6.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r42);

        i1 = i1 + 1;

        goto label03;

     label07:
        $r22 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mOutputFormats>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        $z0 = virtualinvoke $r22.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r24);

        if $z0 != 0 goto label08;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>("At least one stream configuration for IMPLEMENTATION_DEFINED must exist");

        throw $r35;

     label08:
        r43 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i10 = lengthof r43;

        i11 = 0;

     label09:
        if i11 >= i10 goto label12;

        r44 = r43[i11];

        r45 = virtualinvoke r44.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        r46 = virtualinvoke r44.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        $r26 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $r25 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r45);

        r9 = (java.lang.Integer) $r25;

        if r9 != null goto label10;

        r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label10:
        $r28 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $i3 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $i2 = $i3 + 1;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r45, $r27);

        $r32 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $r29 = virtualinvoke $r32.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r46);

        r10 = (java.lang.Integer) $r29;

        if r10 != null goto label11;

        r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label11:
        $r30 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $i4 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        $i5 = $i4 + 1;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r46, $r33);

        i11 = i11 + 1;

        goto label09;

     label12:
        return;
    }

    public final int[] getOutputFormats()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getPublicFormats(boolean)>(1);

        return $r1;
    }

    public final int[] getInputFormats()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getPublicFormats(boolean)>(0);

        return $r1;
    }

    public android.util.Size[] getInputSizes(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        android.util.Size[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getPublicFormatSizes(int,boolean)>(i0, 0);

        return $r1;
    }

    public boolean isOutputSupportedFor(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i2;
        java.util.HashMap $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i0);

        i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap getFormatsMap(boolean)>(1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public static boolean isOutputSupportedFor(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "klass must not be null");

        if r0 != class "android/media/ImageReader" goto label1;

        return 1;

     label1:
        if r0 != class "android/media/MediaRecorder" goto label2;

        return 1;

     label2:
        if r0 != class "android/media/MediaCodec" goto label3;

        return 1;

     label3:
        if r0 != class "android/renderscript/Allocation" goto label4;

        return 1;

     label4:
        if r0 != class "android/view/SurfaceHolder" goto label5;

        return 1;

     label5:
        if r0 != class "android/graphics/SurfaceTexture" goto label6;

        return 1;

     label6:
        return 0;
    }

    public boolean isOutputSupportedFor(android.view.Surface)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.view.Surface r1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.view.Surface;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "surface must not be null");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented yet");

        throw $r3;
    }

    public android.util.Size[] getOutputSizes(java.lang.Class)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1, $r2;
        boolean $z0, $z1;
        android.util.Size[] $r3, $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = class "android/media/ImageReader";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $r4 = newarray (android.util.Size)[0];

        return $r4;

     label1:
        $z1 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z1 != 0 goto label2;

        return null;

     label2:
        $r3 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInternalFormatSizes(int,boolean)>(34, 1);

        return $r3;
    }

    public android.util.Size[] getOutputSizes(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        android.util.Size[] $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getPublicFormatSizes(int,boolean)>(i0, 1);

        return $r1;
    }

    public android.util.Size[] getHighSpeedVideoSizes()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.util.Set r1;
        java.util.HashMap $r2;
        int $i0;
        android.util.Size[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        r1 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r3 = newarray (android.util.Size)[$i0];

        $r4 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.util.Size[]) $r4;

        return $r5;
    }

    public android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Size r1, $r11;
        java.lang.Integer r2;
        android.util.Range[] r3;
        int i0, i1, i2, $i3, $i4, $i5;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r4;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object[] $r9;
        java.lang.String $r10;
        boolean $z0;
        android.util.Range $r12;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.util.Size;

        $r6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoSizeMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r7;

        if r2 == null goto label1;

        $i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i3 != 0 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Size %s does not support high speed video recording", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label2:
        $i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = newarray (android.util.Range)[$i4];

        i0 = 0;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i1 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r5 = r4[i2];

        $r11 = virtualinvoke r5.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        $z0 = virtualinvoke r1.<android.util.Size: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $i5 = i0;

        i0 = i0 + 1;

        $r12 = virtualinvoke r5.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        r3[$i5] = $r12;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return r3;
    }

    public android.util.Range[] getHighSpeedVideoFpsRanges()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.util.Set r1;
        java.util.HashMap $r2;
        int $i0;
        android.util.Range[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        r1 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r3 = newarray (android.util.Range)[$i0];

        $r4 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.util.Range[]) $r4;

        return $r5;
    }

    public android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.util.Range r1, $r11;
        java.lang.Integer r2;
        android.util.Size[] r3;
        int i0, i1, i2, $i3, $i4, $i5;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] r4;
        android.hardware.camera2.params.HighSpeedVideoConfiguration r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object[] $r9;
        java.lang.String $r10;
        boolean $z0;
        android.util.Size $r12;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: android.util.Range;

        $r6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mHighSpeedVideoFpsRangeMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r7;

        if r2 == null goto label1;

        $i3 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i3 != 0 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("FpsRange %s does not support high speed video recording", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label2:
        $i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = newarray (android.util.Size)[$i4];

        i0 = 0;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        i1 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r5 = r4[i2];

        $r11 = virtualinvoke r5.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()>();

        $z0 = virtualinvoke r1.<android.util.Range: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $i5 = i0;

        i0 = i0 + 1;

        $r12 = virtualinvoke r5.<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()>();

        r3[$i5] = $r12;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return r3;
    }

    public long getOutputMinFrameDuration(int, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2;
        android.util.Size r1;
        long $l3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "size must not be null");

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, 1);

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $l3 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,android.util.Size,int)>($i2, r1, 0);

        return $l3;
    }

    public long getOutputMinFrameDuration(java.lang.Class, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1;
        android.util.Size r2;
        boolean $z0;
        long $l0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.util.Size;

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("klass was not supported");

        throw $r3;

     label1:
        $l0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,android.util.Size,int)>(34, r2, 0);

        return $l0;
    }

    public long getOutputStallDuration(int, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, $i2;
        android.util.Size r1;
        long $l3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, 1);

        $i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $l3 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,android.util.Size,int)>($i2, r1, 1);

        return $l3;
    }

    public long getOutputStallDuration(java.lang.Class, android.util.Size)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        java.lang.Class r1;
        android.util.Size r2;
        boolean $z0;
        long $l0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.util.Size;

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("klass was not supported");

        throw $r3;

     label1:
        $l0 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: long getInternalFormatDuration(int,android.util.Size,int)>(34, r2, 1);

        return $l0;
    }

    public boolean equals(java.lang.Object)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.hardware.camera2.params.StreamConfiguration[] $r3, $r4;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r5, $r6, $r7, $r8;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] $r9, $r10;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $z0 = r1 instanceof android.hardware.camera2.params.StreamConfigurationMap;

        if $z0 == 0 goto label5;

        r2 = (android.hardware.camera2.params.StreamConfigurationMap) r1;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $r3 = r2.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $r5 = r2.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z2 == 0 goto label3;

        $r8 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $r7 = r2.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z3 == 0 goto label3;

        $r10 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $r9 = r2.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r10, $r9);

        if $z4 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;

     label5:
        return 0;
    }

    public int hashCode()
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        android.hardware.camera2.params.HighSpeedVideoConfiguration[] $r1;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r2, $r3;
        android.hardware.camera2.params.StreamConfiguration[] $r4;
        int $i0;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        $r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        $r3 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        $r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.HighSpeedVideoConfiguration[] mHighSpeedVideoConfigurations>;

        $i0 = staticinvoke <android.hardware.camera2.utils.HashCodeHelpers: int hashCode(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r4, $r3, $r2, $r1);

        return $i0;
    }

    private int checkArgumentFormatSupported(int, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1, $i3, $i4;
        boolean z0;
        int[] r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i0);

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>();

     label2:
        r1 = $r2;

        i1 = 0;

     label3:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label5;

        $i4 = r1[i1];

        if i0 != $i4 goto label4;

        return i0;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("format %x is not supported by this stream configuration map", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    static int checkArgumentFormatInternal(int)
    {
        int i0, $i1;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 33: goto label1;
            case 34: goto label1;
            case 36: goto label1;
            case 256: goto label2;
            default: goto label3;
        };

     label1:
        return i0;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageFormat.JPEG is an unknown internal format");

        throw $r0;

     label3:
        $i1 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormat(int)>(i0);

        return $i1;
    }

    static int checkArgumentFormat(int)
    {
        int i0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.graphics.ImageFormat: boolean isPublicFormat(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.graphics.PixelFormat: boolean isPublicFormat(int)>(i0);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("format 0x%x was not defined in either ImageFormat or PixelFormat", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label1:
        return i0;
    }

    static int imageFormatToPublic(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 33: goto label1;
            case 34: goto label3;
            case 256: goto label2;
            default: goto label4;
        };

     label1:
        return 256;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ImageFormat.JPEG is an unknown internal format");

        throw $r0;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IMPLEMENTATION_DEFINED must not leak to public API");

        throw $r1;

     label4:
        return i0;
    }

    static int[] imageFormatToPublic(int[])
    {
        int[] r0;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        $i2 = r0[i0];

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToPublic(int)>($i2);

        r0[i0] = $i3;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r0;
    }

    static int imageFormatToInternal(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 34: goto label2;
            case 256: goto label1;
            default: goto label3;
        };

     label1:
        return 33;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IMPLEMENTATION_DEFINED is not allowed via public API");

        throw $r0;

     label3:
        return i0;
    }

    public static int[] imageFormatToInternal(int[])
    {
        int[] r0;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return null;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        $i2 = r0[i0];

        $i3 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>($i2);

        r0[i0] = $i3;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r0;
    }

    private android.util.Size[] getPublicFormatSizes(int, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i2;
        boolean z0;
        android.util.Size[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int checkArgumentFormatSupported(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return null;

     label4:
        i2 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int imageFormatToInternal(int)>(i0);

        $r2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInternalFormatSizes(int,boolean)>(i2, z0);

        return $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private android.util.Size[] getInternalFormatSizes(int, boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        boolean z0, $z1;
        java.util.HashMap r1;
        java.lang.Integer r2, $r6;
        android.util.Size[] r3;
        android.hardware.camera2.params.StreamConfiguration[] r4;
        android.hardware.camera2.params.StreamConfiguration r5;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15;
        java.lang.AssertionError $r9;
        java.lang.String $r14;
        android.util.Size $r16;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap getFormatsMap(boolean)>(z0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r2 = (java.lang.Integer) $r7;

        if r2 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("format not available");

        throw $r17;

     label1:
        i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = newarray (android.util.Size)[i1];

        i2 = 0;

        r4 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfiguration[] mConfigurations>;

        i3 = lengthof r4;

        i4 = 0;

     label2:
        if i4 >= i3 goto label4;

        r5 = r4[i4];

        $i5 = virtualinvoke r5.<android.hardware.camera2.params.StreamConfiguration: int getFormat()>();

        if $i5 != i0 goto label3;

        $z1 = virtualinvoke r5.<android.hardware.camera2.params.StreamConfiguration: boolean isOutput()>();

        if $z1 != z0 goto label3;

        $i6 = i2;

        i2 = i2 + 1;

        $r16 = virtualinvoke r5.<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()>();

        r3[$i6] = $r16;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        if i2 == i1 goto label5;

        $r9 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few sizes (expected ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r9;

     label5:
        return r3;
    }

    private int[] getPublicFormats(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0, $z1;
        int[] r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r12;
        java.lang.String $r13;
        java.lang.Integer $r14;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        $i2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: int getPublicFormatCount(boolean)>(z0);

        r1 = newarray (int)[$i2];

        i0 = 0;

        $r3 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap getFormatsMap(boolean)>(z0);

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.Integer) $r12;

        i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if i1 == 34 goto label2;

        $i5 = i0;

        i0 = i0 + 1;

        r1[$i5] = i1;

     label2:
        goto label1;

     label3:
        $i3 = lengthof r1;

        if $i3 == i0 goto label4;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too few formats ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected ");

        $i4 = lengthof r1;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r6;

     label4:
        $r5 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: int[] imageFormatToPublic(int[])>(r1);

        return $r5;
    }

    private java.util.HashMap getFormatsMap(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0;
        java.util.HashMap $r1;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mOutputFormats>;

        goto label2;

     label1:
        $r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap mInputFormats>;

     label2:
        return $r1;
    }

    private long getInternalFormatDuration(int, android.util.Size, int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9;
        android.util.Size r1;
        android.hardware.camera2.params.StreamConfigurationDuration[] r2, r3;
        android.hardware.camera2.params.StreamConfigurationDuration r4;
        android.util.Size[] $r5;
        boolean $z0;
        long $l8;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        i1 := @parameter2: int;

        $r5 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInternalFormatSizes(int,boolean)>(i0, 1);

        $z0 = staticinvoke <android.hardware.camera2.params.StreamConfigurationMap: boolean arrayContains(java.lang.Object[],java.lang.Object)>($r5, r1);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size was not supported");

        throw $r6;

     label1:
        r2 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] getDurations(int)>(i1);

        r3 = r2;

        i2 = lengthof r3;

        i3 = 0;

     label2:
        if i3 >= i2 goto label4;

        r4 = r3[i3];

        $i4 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationDuration: int getFormat()>();

        if $i4 != i0 goto label3;

        $i5 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationDuration: int getWidth()>();

        $i6 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i5 != $i6 goto label3;

        $i7 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationDuration: int getHeight()>();

        $i9 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i7 != $i9 goto label3;

        $l8 = virtualinvoke r4.<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()>();

        return $l8;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0L;
    }

    private android.hardware.camera2.params.StreamConfigurationDuration[] getDurations(int)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        int i0;
        android.hardware.camera2.params.StreamConfigurationDuration[] $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mMinFrameDurations>;

        return $r2;

     label2:
        $r1 = r0.<android.hardware.camera2.params.StreamConfigurationMap: android.hardware.camera2.params.StreamConfigurationDuration[] mStallDurations>;

        return $r1;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("duration was invalid");

        throw $r3;
    }

    private int getPublicFormatCount(boolean)
    {
        android.hardware.camera2.params.StreamConfigurationMap r0;
        boolean z0, $z1;
        java.util.HashMap r1;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: android.hardware.camera2.params.StreamConfigurationMap;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<android.hardware.camera2.params.StreamConfigurationMap: java.util.HashMap getFormatsMap(boolean)>(z0);

        i0 = virtualinvoke r1.<java.util.HashMap: int size()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        $z1 = virtualinvoke r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        i0 = i0 + -1;

     label1:
        return i0;
    }

    private static boolean arrayContains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0, r2;
        java.lang.Object r1, r3;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r3, r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.params.StreamConfigurationMap: int DURATION_STALL> = 1;

        <android.hardware.camera2.params.StreamConfigurationMap: int DURATION_MIN_FRAME> = 0;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_RAW_OPAQUE> = 36;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED> = 34;

        <android.hardware.camera2.params.StreamConfigurationMap: int HAL_PIXEL_FORMAT_BLOB> = 33;

        <android.hardware.camera2.params.StreamConfigurationMap: java.lang.String TAG> = "StreamConfigurationMap";

        return;
    }
}
