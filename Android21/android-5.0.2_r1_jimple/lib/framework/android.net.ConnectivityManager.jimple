public class android.net.ConnectivityManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean LEGACY_DBG;
    public static final java.lang.String CONNECTIVITY_ACTION;
    public static final java.lang.String CONNECTIVITY_ACTION_IMMEDIATE;
    public static final java.lang.String EXTRA_NETWORK_INFO;
    public static final java.lang.String EXTRA_NETWORK_TYPE;
    public static final java.lang.String EXTRA_IS_FAILOVER;
    public static final java.lang.String EXTRA_OTHER_NETWORK_INFO;
    public static final java.lang.String EXTRA_NO_CONNECTIVITY;
    public static final java.lang.String EXTRA_REASON;
    public static final java.lang.String EXTRA_EXTRA_INFO;
    public static final java.lang.String EXTRA_INET_CONDITION;
    public static final java.lang.String ACTION_DATA_ACTIVITY_CHANGE;
    public static final java.lang.String EXTRA_DEVICE_TYPE;
    public static final java.lang.String EXTRA_IS_ACTIVE;
    public static final java.lang.String EXTRA_REALTIME_NS;
    public static final java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED;
    public static final java.lang.String INET_CONDITION_ACTION;
    public static final java.lang.String ACTION_TETHER_STATE_CHANGED;
    public static final java.lang.String EXTRA_AVAILABLE_TETHER;
    public static final java.lang.String EXTRA_ACTIVE_TETHER;
    public static final java.lang.String EXTRA_ERRORED_TETHER;
    public static final java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED;
    public static final java.lang.String EXTRA_IS_CAPTIVE_PORTAL;
    public static final int TYPE_NONE;
    public static final int TYPE_MOBILE;
    public static final int TYPE_WIFI;
    public static final int TYPE_MOBILE_MMS;
    public static final int TYPE_MOBILE_SUPL;
    public static final int TYPE_MOBILE_DUN;
    public static final int TYPE_MOBILE_HIPRI;
    public static final int TYPE_WIMAX;
    public static final int TYPE_BLUETOOTH;
    public static final int TYPE_DUMMY;
    public static final int TYPE_ETHERNET;
    public static final int TYPE_MOBILE_FOTA;
    public static final int TYPE_MOBILE_IMS;
    public static final int TYPE_MOBILE_CBS;
    public static final int TYPE_WIFI_P2P;
    public static final int TYPE_MOBILE_IA;
    public static final int TYPE_MOBILE_EMERGENCY;
    public static final int TYPE_PROXY;
    public static final int TYPE_VPN;
    public static final int MAX_RADIO_TYPE;
    public static final int MAX_NETWORK_TYPE;
    public static final int DEFAULT_NETWORK_PREFERENCE;
    public static final int CONNECTIVITY_CHANGE_DELAY_DEFAULT;
    public static final int REQUEST_ID_UNSET;
    public static final int NETID_UNSET;
    private final android.net.IConnectivityManager mService;
    private android.os.INetworkManagementService mNMService;
    private static java.util.HashMap sLegacyRequests;
    private final android.util.ArrayMap mNetworkActivityListeners;
    public static final int TETHER_ERROR_NO_ERROR;
    public static final int TETHER_ERROR_UNKNOWN_IFACE;
    public static final int TETHER_ERROR_SERVICE_UNAVAIL;
    public static final int TETHER_ERROR_UNSUPPORTED;
    public static final int TETHER_ERROR_UNAVAIL_IFACE;
    public static final int TETHER_ERROR_MASTER_ERROR;
    public static final int TETHER_ERROR_TETHER_IFACE_ERROR;
    public static final int TETHER_ERROR_UNTETHER_IFACE_ERROR;
    public static final int TETHER_ERROR_ENABLE_NAT_ERROR;
    public static final int TETHER_ERROR_DISABLE_NAT_ERROR;
    public static final int TETHER_ERROR_IFACE_CFG_ERROR;
    private static final int BASE;
    public static final int CALLBACK_PRECHECK;
    public static final int CALLBACK_AVAILABLE;
    public static final int CALLBACK_LOSING;
    public static final int CALLBACK_LOST;
    public static final int CALLBACK_UNAVAIL;
    public static final int CALLBACK_CAP_CHANGED;
    public static final int CALLBACK_IP_CHANGED;
    public static final int CALLBACK_RELEASED;
    public static final int CALLBACK_EXIT;
    private static final int EXPIRE_LEGACY_REQUEST;
    static final java.util.HashMap sNetworkCallback;
    static final java.util.concurrent.atomic.AtomicInteger sCallbackRefCount;
    static android.net.ConnectivityManager$CallbackHandler sCallbackHandler;
    private static final int LISTEN;
    private static final int REQUEST;
    public static final int MAX_NETWORK_REQUEST_TIMEOUT_MS;
    public static final java.lang.String EXTRA_NETWORK_REQUEST_NETWORK;
    public static final java.lang.String EXTRA_NETWORK_REQUEST_NETWORK_REQUEST;

    public static boolean isNetworkTypeValid(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 17 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getNetworkTypeName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label14;
            case 14: goto label15;
            case 15: goto label16;
            case 16: goto label17;
            default: goto label18;
        };

     label01:
        return "MOBILE";

     label02:
        return "WIFI";

     label03:
        return "MOBILE_MMS";

     label04:
        return "MOBILE_SUPL";

     label05:
        return "MOBILE_DUN";

     label06:
        return "MOBILE_HIPRI";

     label07:
        return "WIMAX";

     label08:
        return "BLUETOOTH";

     label09:
        return "DUMMY";

     label10:
        return "ETHERNET";

     label11:
        return "MOBILE_FOTA";

     label12:
        return "MOBILE_IMS";

     label13:
        return "MOBILE_CBS";

     label14:
        return "WIFI_P2P";

     label15:
        return "MOBILE_IA";

     label16:
        return "MOBILE_EMERGENCY";

     label17:
        return "PROXY";

     label18:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public static boolean isNetworkTypeMobile(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label1;
            case 13: goto label2;
            case 14: goto label1;
            case 15: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isNetworkTypeWifi(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 13: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public void setNetworkPreference(int)
    {
        android.net.ConnectivityManager r0;
        int i0;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        return;
    }

    public int getNetworkPreference()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        return -1;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        android.net.IConnectivityManager $r3;
        android.net.NetworkInfo $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfoForNetwork(android.net.Network)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkInfo[] $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network getNetworkForType(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.net.Network $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.Network getNetworkForType(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network[] getAllNetworks()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.Network[] $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.Network[] getAllNetworks()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.LinkProperties $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getLinkProperties(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        android.net.LinkProperties $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.LinkProperties getLinkPropertiesForType(int)>(i0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getLinkProperties(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        android.net.IConnectivityManager $r3;
        android.net.LinkProperties $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        android.net.IConnectivityManager $r3;
        android.net.NetworkCapabilities $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>(r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int startUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r13, $r21, $r25, $r37, $r42;
        android.net.NetworkCapabilities r2, r5;
        java.util.HashMap r3, $r7, $r16, $r18;
        java.util.Iterator r4;
        java.lang.Throwable r6, $r43;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r14, $r19, $r20, $r22, $r23, $r24, $r27, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41;
        java.util.Set $r15;
        boolean $z0;
        java.lang.Object $r17, $r28;
        android.net.NetworkRequest $r26, r45;
        android.net.Network $r29;
        android.net.ConnectivityManager$LegacyRequest r44;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(i0, r1);

        if r2 != null goto label01;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t satisfy startUsingNetworkFeature for ");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r42);

        return 3;

     label01:
        $r7 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking for legacyRequest for netCap with hash: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i1 = virtualinvoke r2.<android.net.NetworkCapabilities: int hashCode()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r13);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", "sLegacyRequests has:");

        $r16 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r15 = virtualinvoke $r16.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r28 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.net.NetworkCapabilities) $r28;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i2 = virtualinvoke r5.<android.net.NetworkCapabilities: int hashCode()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r37);

        goto label03;

     label04:
        $r18 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r17 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r44 = (android.net.ConnectivityManager$LegacyRequest) $r17;

        if r44 == null goto label08;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renewing startUsingNetworkFeature request ");

        $r26 = r44.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r25);

        specialinvoke r0.<android.net.ConnectivityManager: void renewRequestLocked(android.net.ConnectivityManager$LegacyRequest)>(r44);

        $r29 = r44.<android.net.ConnectivityManager$LegacyRequest: android.net.Network currentNetwork>;

        if $r29 == null goto label06;

        exitmonitor r3;

     label05:
        return 0;

     label06:
        exitmonitor r3;

     label07:
        return 1;

     label08:
        r45 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest requestNetworkForFeatureLocked(android.net.NetworkCapabilities)>(r2);

        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r43 := @caughtexception;

        r6 = $r43;

        exitmonitor r3;

     label11:
        throw r6;

     label12:
        if r45 == null goto label13;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("starting startUsingNetworkFeature for request ");

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r21);

        return 1;

     label13:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", " request Failed");

        return 3;

        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int stopUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.lang.String r1, $r9, $r14;
        android.net.NetworkCapabilities r2;
        android.net.ConnectivityManager$NetworkCallback r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(i0, r1);

        if r2 != null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t satisfy stopUsingNetworkFeature for ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r14);

        return -1;

     label1:
        r3 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$NetworkCallback removeRequestForFeature(android.net.NetworkCapabilities)>(r2);

        if r3 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r9);

        virtualinvoke r0.<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>(r3);

     label2:
        return 1;
    }

    public static void maybeMarkCapabilitiesRestricted(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0;
        int[] r1;
        int i0, i1, i2;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getCapabilities()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        i2 = r1[i1];

        tableswitch(i2)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label3;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        return;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(13);

        return;
    }

    private android.net.NetworkCapabilities networkCapabilitiesForFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.lang.String r1, $r3, $r7, $r8, $r9, $r12, $r14, $r15, $r16, $r17;
        android.net.NetworkCapabilities r2, $r4, $r10, $r11, r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte b2;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 0 goto label10;

        $r7 = "enableMMS";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label01;

        b2 = 0;

        goto label09;

     label01:
        $r8 = "enableSUPL";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label02;

        b2 = 1;

        goto label09;

     label02:
        $r9 = "enableDUN";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label03;

        $r12 = "enableDUNAlways";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label04;

     label03:
        b2 = 2;

        goto label09;

     label04:
        $r14 = "enableHIPRI";

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label05;

        b2 = 12;

        goto label09;

     label05:
        $r15 = "enableFOTA";

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label06;

        b2 = 3;

        goto label09;

     label06:
        $r16 = "enableIMS";

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label07;

        b2 = 4;

        goto label09;

     label07:
        $r17 = "enableCBS";

        $z8 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label08;

        b2 = 5;

        goto label09;

     label08:
        return null;

     label09:
        $r11 = new android.net.NetworkCapabilities;

        specialinvoke $r11.<android.net.NetworkCapabilities: void <init>()>();

        r2 = $r11;

        $r10 = virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(0);

        virtualinvoke $r10.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(b2);

        staticinvoke <android.net.ConnectivityManager: void maybeMarkCapabilitiesRestricted(android.net.NetworkCapabilities)>(r2);

        return r2;

     label10:
        if i0 != 1 goto label11;

        $r3 = "p2p";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label11;

        $r4 = new android.net.NetworkCapabilities;

        specialinvoke $r4.<android.net.NetworkCapabilities: void <init>()>();

        r18 = $r4;

        virtualinvoke r18.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(1);

        virtualinvoke r18.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(6);

        staticinvoke <android.net.ConnectivityManager: void maybeMarkCapabilitiesRestricted(android.net.NetworkCapabilities)>(r18);

        return r18;

     label11:
        return null;
    }

    private int inferLegacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        if r1 != null goto label01;

        return -1;

     label01:
        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 != 0 goto label02;

        return -1;

     label02:
        $z1 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(5);

        if $z1 == 0 goto label04;

        $r8 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableCBS");

        $z14 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r8);

        if $z14 == 0 goto label03;

        return 12;

     label03:
        return -1;

     label04:
        $z2 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(4);

        if $z2 == 0 goto label06;

        $r7 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableIMS");

        $z13 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r7);

        if $z13 == 0 goto label05;

        return 11;

     label05:
        return -1;

     label06:
        $z3 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(3);

        if $z3 == 0 goto label08;

        $r6 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableFOTA");

        $z12 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r6);

        if $z12 == 0 goto label07;

        return 10;

     label07:
        return -1;

     label08:
        $z4 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(2);

        if $z4 == 0 goto label10;

        $r5 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableDUN");

        $z11 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r5);

        if $z11 == 0 goto label09;

        return 4;

     label09:
        return -1;

     label10:
        $z5 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(1);

        if $z5 == 0 goto label12;

        $r4 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableSUPL");

        $z10 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r4);

        if $z10 == 0 goto label11;

        return 3;

     label11:
        return -1;

     label12:
        $z6 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(0);

        if $z6 == 0 goto label14;

        $r3 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableMMS");

        $z9 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r3);

        if $z9 == 0 goto label13;

        return 2;

     label13:
        return -1;

     label14:
        $z7 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(12);

        if $z7 == 0 goto label16;

        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(0, "enableHIPRI");

        $z8 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>($r2);

        if $z8 == 0 goto label15;

        return 5;

     label15:
        return -1;

     label16:
        return -1;
    }

    private int legacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        if r1 != null goto label1;

        return -1;

     label1:
        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(5);

        if $z0 == 0 goto label2;

        return 12;

     label2:
        $z1 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(4);

        if $z1 == 0 goto label3;

        return 11;

     label3:
        $z2 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(3);

        if $z2 == 0 goto label4;

        return 10;

     label4:
        $z3 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(2);

        if $z3 == 0 goto label5;

        return 4;

     label5:
        $z4 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(1);

        if $z4 == 0 goto label6;

        return 3;

     label6:
        $z5 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(0);

        if $z5 == 0 goto label7;

        return 2;

     label7:
        $z6 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(12);

        if $z6 == 0 goto label8;

        return 5;

     label8:
        $z7 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(6);

        if $z7 == 0 goto label9;

        return 13;

     label9:
        return -1;
    }

    private android.net.NetworkRequest findRequestForFeature(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        java.util.HashMap r2, $r5, $r6;
        android.net.ConnectivityManager$LegacyRequest r3;
        java.lang.Throwable r4, $r9;
        java.lang.Object $r7;
        android.net.NetworkRequest $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r5 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.net.ConnectivityManager$LegacyRequest) $r7;

        if r3 == null goto label3;

        $r8 = r3.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        exitmonitor r2;

     label2:
        return $r8;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void renewRequestLocked(android.net.ConnectivityManager$LegacyRequest)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$LegacyRequest r1;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        android.net.NetworkCapabilities $r6;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$LegacyRequest;

        $i0 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i1 = $i0 + 1;

        r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber> = $i1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renewing request to seqNum ");

        $i2 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r5);

        $r6 = r1.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i5 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i4 = r1.<android.net.ConnectivityManager$LegacyRequest: int delay>;

        specialinvoke r0.<android.net.ConnectivityManager: void sendExpireMsgForFeature(android.net.NetworkCapabilities,int,int)>($r6, $i5, $i4);

        return;
    }

    private void expireRequest(android.net.NetworkCapabilities, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0, $i2, i4;
        java.util.HashMap r2, $r5, $r6, $r14;
        android.net.ConnectivityManager$LegacyRequest r3;
        java.lang.Throwable r4, $r17;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;
        android.net.ConnectivityManager$NetworkCallback $r15;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        $r5 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.net.ConnectivityManager$LegacyRequest) $r7;

        if r3 != null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        i4 = r3.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i2 = r3.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        if $i2 != i0 goto label4;

        $r15 = r3.<android.net.ConnectivityManager$LegacyRequest: android.net.ConnectivityManager$NetworkCallback networkCallback>;

        virtualinvoke r0.<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>($r15);

        $r14 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expireRequest with ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r13);

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private android.net.NetworkRequest requestNetworkForFeatureLocked(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0, i1, $i2;
        android.net.IConnectivityManager $r3;
        android.net.ConnectivityManager$LegacyRequest $r4, r12;
        android.net.ConnectivityManager$NetworkCallback $r5;
        android.net.NetworkRequest $r6, $r7, $r10;
        java.util.HashMap $r8;
        android.os.RemoteException $r11;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 = -1;

        i1 = specialinvoke r0.<android.net.ConnectivityManager: int legacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)>(r1);

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int getRestoreDefaultNetworkDelay(int)>(i1);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        $r4 = new android.net.ConnectivityManager$LegacyRequest;

        specialinvoke $r4.<android.net.ConnectivityManager$LegacyRequest: void <init>(android.net.ConnectivityManager$1)>(null);

        r12 = $r4;

        r12.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkCapabilities networkCapabilities> = r1;

        r12.<android.net.ConnectivityManager$LegacyRequest: int delay> = i0;

        r12.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber> = 0;

        $r5 = r12.<android.net.ConnectivityManager$LegacyRequest: android.net.ConnectivityManager$NetworkCallback networkCallback>;

        $r6 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int)>(r1, $r5, 0, 2, i1);

        r12.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest> = $r6;

        $r7 = r12.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        if $r7 != null goto label5;

        return null;

     label5:
        $r8 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

        $i2 = r12.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        specialinvoke r0.<android.net.ConnectivityManager: void sendExpireMsgForFeature(android.net.NetworkCapabilities,int,int)>(r1, $i2, i0);

        $r10 = r12.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        return $r10;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendExpireMsgForFeature(android.net.NetworkCapabilities, int, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0, i1;
        android.os.Message r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        android.net.ConnectivityManager$CallbackHandler $r9, $r10;
        long $l3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending expire msg with seqNum ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and delay ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r8);

        $r9 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        r2 = virtualinvoke $r9.<android.net.ConnectivityManager$CallbackHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(524298, i0, 0, r1);

        $r10 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        $l3 = (long) i1;

        virtualinvoke $r10.<android.net.ConnectivityManager$CallbackHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, $l3);

     label1:
        return;
    }

    private android.net.ConnectivityManager$NetworkCallback removeRequestForFeature(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        java.util.HashMap r2, $r5, $r6;
        android.net.ConnectivityManager$LegacyRequest r3;
        java.lang.Throwable r4, $r9;
        java.lang.Object $r7;
        android.net.ConnectivityManager$NetworkCallback $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r5 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (android.net.ConnectivityManager$LegacyRequest) $r7;

        if r3 != null goto label3;

        exitmonitor r2;

     label2:
        return null;

     label3:
        $r8 = r3.<android.net.ConnectivityManager$LegacyRequest: android.net.ConnectivityManager$NetworkCallback networkCallback>;

        exitmonitor r2;

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean requestRouteToHost(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.net.InetAddress $r1;
        boolean $z0;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>(i1);

        $z0 = virtualinvoke r0.<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)>(i0, $r1);

        return $z0;
    }

    public boolean requestRouteToHostAddress(int, java.net.InetAddress)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.net.InetAddress r1;
        android.net.IConnectivityManager $r3;
        byte[] $r4;
        boolean $z0;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        $z0 = interfaceinvoke $r3.<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])>(i0, $r4);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getBackgroundDataSetting()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        return 1;
    }

    public void setBackgroundDataSetting(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        return;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.NetworkQuotaInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getMobileDataEnabled()
    {
        android.net.ConnectivityManager r0;
        android.os.IBinder r1;
        com.android.internal.telephony.ITelephony r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("phone");

        if r1 == null goto label4;

     label1:
        r2 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>(r1);

        $z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean getDataEnabled()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.os.INetworkManagementService getNetworkManagementService()
    {
        android.net.ConnectivityManager r0, r1;
        android.os.IBinder r2;
        java.lang.Throwable r3, $r9;
        android.os.INetworkManagementService $r5, $r6, $r7, $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService>;

        if $r5 == null goto label3;

        $r8 = r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService>;

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>(r2);

        r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService> = $r6;

        $r7 = r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService>;

        exitmonitor r1;

     label4:
        return $r7;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$OnNetworkActiveListener r1;
        android.net.ConnectivityManager$1 r2, $r4;
        android.os.INetworkManagementService $r5;
        android.util.ArrayMap $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$OnNetworkActiveListener;

        $r4 = new android.net.ConnectivityManager$1;

        specialinvoke $r4.<android.net.ConnectivityManager$1: void <init>(android.net.ConnectivityManager,android.net.ConnectivityManager$OnNetworkActiveListener)>(r0, r1);

        r2 = $r4;

     label1:
        $r5 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>(r2);

        $r6 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$OnNetworkActiveListener r1;
        android.os.INetworkActivityListener r2;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        android.os.INetworkManagementService $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        android.os.RemoteException $r12;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$OnNetworkActiveListener;

        $r4 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.os.INetworkActivityListener) $r5;

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listener not registered: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r6 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>(r2);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDefaultNetworkActive()
    {
        android.net.ConnectivityManager r0;
        android.os.INetworkManagementService $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        $z0 = interfaceinvoke $r2.<android.os.INetworkManagementService: boolean isNetworkActive()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void <init>(android.net.IConnectivityManager)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager r1, $r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.IConnectivityManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners> = $r2;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing IConnectivityManager");

        $r4 = (android.net.IConnectivityManager) $r3;

        r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService> = $r4;

        return;
    }

    public static android.net.ConnectivityManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r2 = (android.net.ConnectivityManager) $r1;

        return $r2;
    }

    public static final void enforceTetherChangePermission(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        java.lang.String[] $r2;
        int $i0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235989);

        $i0 = lengthof $r2;

        if $i0 != 2 goto label1;

        virtualinvoke r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        goto label2;

     label1:
        virtualinvoke r0.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_NETWORK_STATE", "ConnectivityService");

     label2:
        return;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetheredDhcpRanges()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetheredDhcpRanges()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int tether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int tether(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int untether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int untether(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isTetheringSupported()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isTetheringSupported()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String[] $r3, $r5;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setUsbTethering(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $i0 = interfaceinvoke $r2.<android.net.IConnectivityManager: int setUsbTethering(boolean)>(z0);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastTetherError(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $i0 = interfaceinvoke $r3.<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        return 2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportInetCondition(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void reportInetCondition(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportBadNetwork(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void reportBadNetwork(android.net.Network)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setGlobalProxy(android.net.ProxyInfo)
    {
        android.net.ConnectivityManager r0;
        android.net.ProxyInfo r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ProxyInfo;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyInfo getGlobalProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.ProxyInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.ProxyInfo getGlobalProxy()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyInfo getProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.ProxyInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.ProxyInfo getProxy()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDataDependency(int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setDataDependency(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNetworkSupported(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isNetworkSupported(int)>(i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActiveNetworkMetered()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isActiveNetworkMetered()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean updateLockdownVpn()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean updateLockdownVpn()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r1;
        boolean z0;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkInfo;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void captivePortalCheckCompleted(android.net.NetworkInfo,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void supplyMessenger(int, android.os.Messenger)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.os.Messenger r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Messenger;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void supplyMessenger(int,android.os.Messenger)>(i0, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkMobileProvisioning(int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 = -1;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r2.<android.net.IConnectivityManager: int checkMobileProvisioning(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return i1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMobileRedirectedProvisioningUrl()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = interfaceinvoke $r2.<android.net.IConnectivityManager: java.lang.String getMobileRedirectedProvisioningUrl()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo getLinkQualityInfo(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.LinkQualityInfo r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r1 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.LinkQualityInfo getLinkQualityInfo(int)>(i0);

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo getActiveLinkQualityInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.LinkQualityInfo r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r1 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.LinkQualityInfo getActiveLinkQualityInfo()>();

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkQualityInfo[] getAllLinkQualityInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.LinkQualityInfo[] r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r1 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.LinkQualityInfo[] getAllLinkQualityInfo()>();

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        int i0;
        java.lang.String r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>(z0, i0, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAirplaneMode(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setAirplaneMode(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerNetworkFactory(android.os.Messenger, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        android.os.Messenger r1;
        java.lang.String r2;
        android.net.IConnectivityManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r4.<android.net.IConnectivityManager: void registerNetworkFactory(android.os.Messenger,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterNetworkFactory(android.os.Messenger)
    {
        android.net.ConnectivityManager r0;
        android.os.Messenger r1;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.os.Messenger;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void unregisterNetworkFactory(android.os.Messenger)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkMisc)
    {
        android.net.ConnectivityManager r0;
        android.os.Messenger r1;
        android.net.NetworkInfo r2;
        android.net.LinkProperties r3;
        android.net.NetworkCapabilities r4;
        int i0;
        android.net.NetworkMisc r5;
        android.net.IConnectivityManager $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: android.net.NetworkInfo;

        r3 := @parameter2: android.net.LinkProperties;

        r4 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r5 := @parameter5: android.net.NetworkMisc;

     label1:
        $r7 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r7.<android.net.IConnectivityManager: void registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkMisc)>(r1, r2, r3, r4, i0, r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void incCallbackHandlerRefCount()
    {
        android.net.ConnectivityManager r0;
        java.util.concurrent.atomic.AtomicInteger r1, $r4, $r5, $r9;
        android.os.HandlerThread r2, $r6;
        java.lang.Throwable r3, $r11;
        int $i0;
        android.net.ConnectivityManager$CallbackHandler $r7;
        android.os.Looper $r8;
        java.util.HashMap $r10;

        r0 := @this: android.net.ConnectivityManager;

        $r4 = <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if $i0 != 1 goto label2;

        $r6 = new android.os.HandlerThread;

        specialinvoke $r6.<android.os.HandlerThread: void <init>(java.lang.String)>("ConnectivityManager");

        r2 = $r6;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r7 = new android.net.ConnectivityManager$CallbackHandler;

        $r8 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r10 = <android.net.ConnectivityManager: java.util.HashMap sNetworkCallback>;

        $r9 = <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount>;

        specialinvoke $r7.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Looper,java.util.HashMap,java.util.concurrent.atomic.AtomicInteger,android.net.ConnectivityManager)>(r0, $r8, $r10, $r9, r0);

        <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler> = $r7;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void decCallbackHandlerRefCount()
    {
        android.net.ConnectivityManager r0;
        java.util.concurrent.atomic.AtomicInteger r1, $r3, $r4;
        java.lang.Throwable r2, $r7;
        int $i0;
        android.net.ConnectivityManager$CallbackHandler $r5;
        android.os.Message $r6;

        r0 := @this: android.net.ConnectivityManager;

        $r3 = <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label2;

        $r5 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        $r6 = virtualinvoke $r5.<android.net.ConnectivityManager$CallbackHandler: android.os.Message obtainMessage(int)>(524297);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

        <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler> = null;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager$NetworkCallback, int, int, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        int i0, i1, i2;
        java.util.HashMap r3, $r5, $r14;
        java.lang.Throwable r4, $r26;
        android.os.Messenger $r6, $r19;
        android.net.ConnectivityManager$CallbackHandler $r7, $r18;
        android.net.IConnectivityManager $r8, $r21;
        android.os.Binder $r9, $r20;
        android.net.NetworkRequest $r10, $r12, $r13, $r15, $r17, $r23;
        java.lang.IllegalArgumentException $r24, $r25;
        android.os.RemoteException $r27;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if r2 != null goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null NetworkCallback");

        throw $r24;

     label01:
        if r1 != null goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null NetworkCapabilities");

        throw $r25;

     label02:
        specialinvoke r0.<android.net.ConnectivityManager: void incCallbackHandlerRefCount()>();

        $r5 = <android.net.ConnectivityManager: java.util.HashMap sNetworkCallback>;

        r3 = $r5;

        entermonitor $r5;

     label03:
        if i1 != 1 goto label04;

        $r21 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r19 = new android.os.Messenger;

        $r18 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        specialinvoke $r19.<android.os.Messenger: void <init>(android.os.Handler)>($r18);

        $r20 = new android.os.Binder;

        specialinvoke $r20.<android.os.Binder: void <init>()>();

        $r23 = interfaceinvoke $r21.<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>(r1, $r19, $r20);

        staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$202(android.net.ConnectivityManager$NetworkCallback,android.net.NetworkRequest)>(r2, $r23);

        goto label05;

     label04:
        $r8 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r6 = new android.os.Messenger;

        $r7 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        specialinvoke $r6.<android.os.Messenger: void <init>(android.os.Handler)>($r7);

        $r9 = new android.os.Binder;

        specialinvoke $r9.<android.os.Binder: void <init>()>();

        $r10 = interfaceinvoke $r8.<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>(r1, $r6, i0, $r9, i2);

        staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$202(android.net.ConnectivityManager$NetworkCallback,android.net.NetworkRequest)>(r2, $r10);

     label05:
        $r12 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r2);

        if $r12 == null goto label06;

        $r14 = <android.net.ConnectivityManager: java.util.HashMap sNetworkCallback>;

        $r17 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r2);

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r2);

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r26 := @caughtexception;

        r4 = $r26;

        exitmonitor r3;

     label09:
        throw r4;

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

     label12:
        $r13 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r2);

        if $r13 != null goto label13;

        specialinvoke r0.<android.net.ConnectivityManager: void decCallbackHandlerRefCount()>();

     label13:
        $r15 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r2);

        return $r15;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch android.os.RemoteException from label02 to label10 with label11;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.NetworkCapabilities $r3, $r4;
        int $i0;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r3 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i0 = specialinvoke r0.<android.net.ConnectivityManager: int inferLegacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)>($r3);

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int)>($r4, r2, 0, 2, $i0);

        return;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        int i0, $i1;
        android.net.NetworkCapabilities $r3, $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        i0 := @parameter2: int;

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r3 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i1 = specialinvoke r0.<android.net.ConnectivityManager: int inferLegacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)>($r3);

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int)>($r4, r2, i0, 2, $i1);

        return;
    }

    public void requestNetwork(android.net.NetworkRequest, android.app.PendingIntent)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.app.PendingIntent r2;
        android.net.NetworkCapabilities $r4;
        android.net.IConnectivityManager $r5;
        android.os.RemoteException $r7;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.app.PendingIntent;

     label1:
        $r5 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        interfaceinvoke $r5.<android.net.IConnectivityManager: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)>($r4, r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.NetworkCapabilities $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        $r3 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int)>($r3, r2, 0, 1, -1);

        return;
    }

    public void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        java.lang.IllegalArgumentException $r3;
        android.net.NetworkRequest $r4, $r5, $r7;
        int $i0;
        android.net.IConnectivityManager $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$NetworkCallback;

        if r1 == null goto label1;

        $r4 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r1);

        if $r4 == null goto label1;

        $r5 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r1);

        $i0 = $r5.<android.net.NetworkRequest: int requestId>;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid NetworkCallback");

        throw $r3;

     label2:
        $r6 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r7 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$200(android.net.ConnectivityManager$NetworkCallback)>(r1);

        interfaceinvoke $r6.<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>($r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static boolean setProcessDefaultNetwork(android.net.Network)
    {
        android.net.Network r0;
        int i0, $i1, $i2;
        boolean $z0;
        libcore.net.event.NetworkEventDispatcher $r1;

        r0 := @parameter0: android.net.Network;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = r0.<android.net.Network: int netId>;

     label2:
        i0 = $i2;

        $i1 = staticinvoke <android.net.NetworkUtils: int getNetworkBoundToProcess()>();

        if i0 != $i1 goto label3;

        return 1;

     label3:
        $z0 = staticinvoke <android.net.NetworkUtils: boolean bindProcessToNetwork(int)>(i0);

        if $z0 == 0 goto label4;

        staticinvoke <java.net.InetAddress: void clearDnsCache()>();

        $r1 = staticinvoke <libcore.net.event.NetworkEventDispatcher: libcore.net.event.NetworkEventDispatcher getInstance()>();

        virtualinvoke $r1.<libcore.net.event.NetworkEventDispatcher: void onNetworkConfigurationChanged()>();

        return 1;

     label4:
        return 0;
    }

    public static android.net.Network getProcessDefaultNetwork()
    {
        int i0;
        android.net.Network $r0;

        i0 = staticinvoke <android.net.NetworkUtils: int getNetworkBoundToProcess()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        $r0 = new android.net.Network;

        specialinvoke $r0.<android.net.Network: void <init>(int)>(i0);

        return $r0;
    }

    public static boolean setProcessDefaultNetworkForHostResolution(android.net.Network)
    {
        android.net.Network r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.net.Network;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = r0.<android.net.Network: int netId>;

     label2:
        $z0 = staticinvoke <android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>($i0);

        return $z0;
    }

    static void access$100(android.net.ConnectivityManager, android.net.NetworkCapabilities, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0;

        r0 := @parameter0: android.net.ConnectivityManager;

        r1 := @parameter1: android.net.NetworkCapabilities;

        i0 := @parameter2: int;

        specialinvoke r0.<android.net.ConnectivityManager: void expireRequest(android.net.NetworkCapabilities,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_REQUEST_NETWORK_REQUEST> = "networkRequestNetworkRequest";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_REQUEST_NETWORK> = "networkRequestNetwork";

        <android.net.ConnectivityManager: int MAX_NETWORK_REQUEST_TIMEOUT_MS> = 6000000;

        <android.net.ConnectivityManager: int REQUEST> = 2;

        <android.net.ConnectivityManager: int LISTEN> = 1;

        <android.net.ConnectivityManager: int EXPIRE_LEGACY_REQUEST> = 524298;

        <android.net.ConnectivityManager: int CALLBACK_EXIT> = 524297;

        <android.net.ConnectivityManager: int CALLBACK_RELEASED> = 524296;

        <android.net.ConnectivityManager: int CALLBACK_IP_CHANGED> = 524295;

        <android.net.ConnectivityManager: int CALLBACK_CAP_CHANGED> = 524294;

        <android.net.ConnectivityManager: int CALLBACK_UNAVAIL> = 524293;

        <android.net.ConnectivityManager: int CALLBACK_LOST> = 524292;

        <android.net.ConnectivityManager: int CALLBACK_LOSING> = 524291;

        <android.net.ConnectivityManager: int CALLBACK_AVAILABLE> = 524290;

        <android.net.ConnectivityManager: int CALLBACK_PRECHECK> = 524289;

        <android.net.ConnectivityManager: int BASE> = 524288;

        <android.net.ConnectivityManager: int TETHER_ERROR_IFACE_CFG_ERROR> = 10;

        <android.net.ConnectivityManager: int TETHER_ERROR_DISABLE_NAT_ERROR> = 9;

        <android.net.ConnectivityManager: int TETHER_ERROR_ENABLE_NAT_ERROR> = 8;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNTETHER_IFACE_ERROR> = 7;

        <android.net.ConnectivityManager: int TETHER_ERROR_TETHER_IFACE_ERROR> = 6;

        <android.net.ConnectivityManager: int TETHER_ERROR_MASTER_ERROR> = 5;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNAVAIL_IFACE> = 4;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNSUPPORTED> = 3;

        <android.net.ConnectivityManager: int TETHER_ERROR_SERVICE_UNAVAIL> = 2;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNKNOWN_IFACE> = 1;

        <android.net.ConnectivityManager: int TETHER_ERROR_NO_ERROR> = 0;

        <android.net.ConnectivityManager: int NETID_UNSET> = 0;

        <android.net.ConnectivityManager: int REQUEST_ID_UNSET> = 0;

        <android.net.ConnectivityManager: int CONNECTIVITY_CHANGE_DELAY_DEFAULT> = 3000;

        <android.net.ConnectivityManager: int DEFAULT_NETWORK_PREFERENCE> = 1;

        <android.net.ConnectivityManager: int MAX_NETWORK_TYPE> = 17;

        <android.net.ConnectivityManager: int MAX_RADIO_TYPE> = 17;

        <android.net.ConnectivityManager: int TYPE_VPN> = 17;

        <android.net.ConnectivityManager: int TYPE_PROXY> = 16;

        <android.net.ConnectivityManager: int TYPE_MOBILE_EMERGENCY> = 15;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IA> = 14;

        <android.net.ConnectivityManager: int TYPE_WIFI_P2P> = 13;

        <android.net.ConnectivityManager: int TYPE_MOBILE_CBS> = 12;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IMS> = 11;

        <android.net.ConnectivityManager: int TYPE_MOBILE_FOTA> = 10;

        <android.net.ConnectivityManager: int TYPE_ETHERNET> = 9;

        <android.net.ConnectivityManager: int TYPE_DUMMY> = 8;

        <android.net.ConnectivityManager: int TYPE_BLUETOOTH> = 7;

        <android.net.ConnectivityManager: int TYPE_WIMAX> = 6;

        <android.net.ConnectivityManager: int TYPE_MOBILE_HIPRI> = 5;

        <android.net.ConnectivityManager: int TYPE_MOBILE_DUN> = 4;

        <android.net.ConnectivityManager: int TYPE_MOBILE_SUPL> = 3;

        <android.net.ConnectivityManager: int TYPE_MOBILE_MMS> = 2;

        <android.net.ConnectivityManager: int TYPE_WIFI> = 1;

        <android.net.ConnectivityManager: int TYPE_MOBILE> = 0;

        <android.net.ConnectivityManager: int TYPE_NONE> = -1;

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_CAPTIVE_PORTAL> = "captivePortal";

        <android.net.ConnectivityManager: java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED> = "android.net.conn.CAPTIVE_PORTAL_TEST_COMPLETED";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ERRORED_TETHER> = "erroredArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ACTIVE_TETHER> = "activeArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_AVAILABLE_TETHER> = "availableArray";

        <android.net.ConnectivityManager: java.lang.String ACTION_TETHER_STATE_CHANGED> = "android.net.conn.TETHER_STATE_CHANGED";

        <android.net.ConnectivityManager: java.lang.String INET_CONDITION_ACTION> = "android.net.conn.INET_CONDITION_ACTION";

        <android.net.ConnectivityManager: java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED> = "android.net.conn.BACKGROUND_DATA_SETTING_CHANGED";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REALTIME_NS> = "tsNanos";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_ACTIVE> = "isActive";

        <android.net.ConnectivityManager: java.lang.String EXTRA_DEVICE_TYPE> = "deviceType";

        <android.net.ConnectivityManager: java.lang.String ACTION_DATA_ACTIVITY_CHANGE> = "android.net.conn.DATA_ACTIVITY_CHANGE";

        <android.net.ConnectivityManager: java.lang.String EXTRA_INET_CONDITION> = "inetCondition";

        <android.net.ConnectivityManager: java.lang.String EXTRA_EXTRA_INFO> = "extraInfo";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REASON> = "reason";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NO_CONNECTIVITY> = "noConnectivity";

        <android.net.ConnectivityManager: java.lang.String EXTRA_OTHER_NETWORK_INFO> = "otherNetwork";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_FAILOVER> = "isFailover";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_TYPE> = "networkType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_INFO> = "networkInfo";

        <android.net.ConnectivityManager: java.lang.String CONNECTIVITY_ACTION_IMMEDIATE> = "android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE";

        <android.net.ConnectivityManager: java.lang.String CONNECTIVITY_ACTION> = "android.net.conn.CONNECTIVITY_CHANGE";

        <android.net.ConnectivityManager: boolean LEGACY_DBG> = 1;

        <android.net.ConnectivityManager: java.lang.String TAG> = "ConnectivityManager";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.net.ConnectivityManager: java.util.HashMap sNetworkCallback> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <android.net.ConnectivityManager: java.util.concurrent.atomic.AtomicInteger sCallbackRefCount> = $r2;

        <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler> = null;

        return;
    }
}
