public class android.media.audiopolicy.AudioPolicyConfig extends java.lang.Object implements android.os.Parcelable
{
    private static final java.lang.String TAG;
    java.util.ArrayList mMixes;
    public static final android.os.Parcelable$Creator CREATOR;

    void <init>(java.util.ArrayList)
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        java.util.ArrayList r1;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter0: java.util.ArrayList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes> = r1;

        return;
    }

    public void addMix(android.media.audiopolicy.AudioMix) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        android.media.audiopolicy.AudioMix r1;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter0: android.media.audiopolicy.AudioMix;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioMix argument");

        throw $r3;

     label1:
        $r2 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public int describeContents()
    {
        android.media.audiopolicy.AudioPolicyConfig r0;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Iterator r2, r5;
        android.media.audiopolicy.AudioMix r3;
        java.util.ArrayList r4, $r7, $r8;
        android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion r6;
        boolean $z0, $z1;
        java.lang.Object $r9, $r14;
        android.media.AudioFormat $r10, $r11, $r12;
        android.media.audiopolicy.AudioMixingRule $r13;
        android.media.AudioAttributes $r15;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r7 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r8 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        r2 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.audiopolicy.AudioMix) $r9;

        $i2 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $r10 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i3 = virtualinvoke $r10.<android.media.AudioFormat: int getSampleRate()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $r11 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i4 = virtualinvoke $r11.<android.media.AudioFormat: int getEncoding()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $r12 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i5 = virtualinvoke $r12.<android.media.AudioFormat: int getChannelMask()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $r13 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()>();

        r4 = virtualinvoke $r13.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList getCriteria()>();

        $i6 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        r5 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion) $r14;

        $i7 = r6.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: int mRule>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $r15 = r6.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: android.media.AudioAttributes mAttr>;

        $i8 = virtualinvoke $r15.<android.media.AudioAttributes: int getUsage()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i8);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        android.os.Parcel r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;
        android.media.audiopolicy.AudioMix$Builder r2, $r7;
        android.media.AudioFormat r3;
        android.media.audiopolicy.AudioMixingRule$Builder r4, $r14;
        android.media.AudioAttributes r5;
        java.util.ArrayList $r6, $r15;
        android.media.AudioFormat$Builder $r9, $r10, $r11, $r12;
        android.media.audiopolicy.AudioMix $r16;
        android.media.audiopolicy.AudioMixingRule $r17;
        android.media.AudioAttributes$Builder $r19, $r21;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes> = $r6;

        i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        $r7 = new android.media.audiopolicy.AudioMix$Builder;

        specialinvoke $r7.<android.media.audiopolicy.AudioMix$Builder: void <init>()>();

        r2 = $r7;

        i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        virtualinvoke r2.<android.media.audiopolicy.AudioMix$Builder: android.media.audiopolicy.AudioMix$Builder setRouteFlags(int)>(i2);

        i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r10 = new android.media.AudioFormat$Builder;

        specialinvoke $r10.<android.media.AudioFormat$Builder: void <init>()>();

        $r9 = virtualinvoke $r10.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i3);

        $r12 = virtualinvoke $r9.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i5);

        $r11 = virtualinvoke $r12.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i4);

        r3 = virtualinvoke $r11.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        virtualinvoke r2.<android.media.audiopolicy.AudioMix$Builder: android.media.audiopolicy.AudioMix$Builder setFormat(android.media.AudioFormat)>(r3);

        i6 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r14 = new android.media.audiopolicy.AudioMixingRule$Builder;

        specialinvoke $r14.<android.media.audiopolicy.AudioMixingRule$Builder: void <init>()>();

        r4 = $r14;

        i7 = 0;

     label2:
        if i7 >= i6 goto label6;

        i8 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if i8 == 2 goto label3;

        if i8 != 1 goto label4;

     label3:
        i9 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r19 = new android.media.AudioAttributes$Builder;

        specialinvoke $r19.<android.media.AudioAttributes$Builder: void <init>()>();

        $r21 = virtualinvoke $r19.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(i9);

        r5 = virtualinvoke $r21.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke r4.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addRule(android.media.AudioAttributes,int)>(r5, i8);

        goto label5;

     label4:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioPolicyConfig", "Encountered unsupported rule, skipping");

        virtualinvoke r1.<android.os.Parcel: int readInt()>();

     label5:
        i7 = i7 + 1;

        goto label2;

     label6:
        $r17 = virtualinvoke r4.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule build()>();

        virtualinvoke r2.<android.media.audiopolicy.AudioMix$Builder: android.media.audiopolicy.AudioMix$Builder setMixingRule(android.media.audiopolicy.AudioMixingRule)>($r17);

        $r15 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        $r16 = virtualinvoke r2.<android.media.audiopolicy.AudioMix$Builder: android.media.audiopolicy.AudioMix build()>();

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        i1 = i1 + 1;

        goto label1;

     label7:
        return;
    }

    public java.lang.String toString()
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        java.lang.String r1, $r7, $r18, $r37, $r42, $r48, $r64, r67, r68, r69, r70, r71, r72, r73, r74;
        java.util.Iterator r2, r5;
        android.media.audiopolicy.AudioMix r3;
        java.util.ArrayList r4, $r10, $r13;
        android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion r6;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r39, $r40, $r41, $r44, $r45, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r66;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.lang.Object $r15, $r46;
        android.media.AudioFormat $r24, $r28, $r38;
        android.media.audiopolicy.AudioMixingRule $r43;
        android.media.AudioAttributes $r47, $r65;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(java.lang.String)>("android.media.audiopolicy.AudioPolicyConfig:\n");

        r1 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        $i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AudioMix:\n");

        r67 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = r0.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        r2 = virtualinvoke $r13.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.audiopolicy.AudioMix) $r15;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* route flags=0x");

        $i1 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r68 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  rate=");

        $r24 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i2 = virtualinvoke $r24.<android.media.AudioFormat: int getSampleRate()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz\n");

        r69 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r69);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  encoding=");

        $r28 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i3 = virtualinvoke $r28.<android.media.AudioFormat: int getEncoding()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r70 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r70);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  channels=0x");

        r71 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r38 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i4 = virtualinvoke $r38.<android.media.AudioFormat: int getChannelMask()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r42 = virtualinvoke $r37.<java.lang.String: java.lang.String toUpperCase()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r67 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = virtualinvoke r3.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()>();

        r4 = virtualinvoke $r43.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList getCriteria()>();

        r5 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r46 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion) $r46;

        $i5 = r6.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: int mRule>;

        lookupswitch($i5)
        {
            case 1: goto label4;
            case 2: goto label3;
            default: goto label5;
        };

     label3:
        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r50 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  exclude usage ");

        r72 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r47 = r6.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: android.media.AudioAttributes mAttr>;

        $r48 = virtualinvoke $r47.<android.media.AudioAttributes: java.lang.String usageToString()>();

        $r49 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        r73 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label4:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  match usage ");

        r74 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r74);

        $r65 = r6.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: android.media.AudioAttributes mAttr>;

        $r64 = virtualinvoke $r65.<android.media.AudioAttributes: java.lang.String usageToString()>();

        $r59 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        r73 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r66 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid rule!");

        r73 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r73);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r67 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label7:
        goto label1;

     label8:
        return r67;
    }

    void <init>(android.os.Parcel, android.media.audiopolicy.AudioPolicyConfig$1)
    {
        android.media.audiopolicy.AudioPolicyConfig r0;
        android.os.Parcel r1;
        android.media.audiopolicy.AudioPolicyConfig$1 r2;

        r0 := @this: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.media.audiopolicy.AudioPolicyConfig$1;

        specialinvoke r0.<android.media.audiopolicy.AudioPolicyConfig: void <init>(android.os.Parcel)>(r1);

        return;
    }

    static void <clinit>()
    {
        android.media.audiopolicy.AudioPolicyConfig$1 $r0;

        <android.media.audiopolicy.AudioPolicyConfig: java.lang.String TAG> = "AudioPolicyConfig";

        $r0 = new android.media.audiopolicy.AudioPolicyConfig$1;

        specialinvoke $r0.<android.media.audiopolicy.AudioPolicyConfig$1: void <init>()>();

        <android.media.audiopolicy.AudioPolicyConfig: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
}
