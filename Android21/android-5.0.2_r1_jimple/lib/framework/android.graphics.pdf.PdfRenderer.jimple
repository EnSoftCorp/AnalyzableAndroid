public final class android.graphics.pdf.PdfRenderer extends java.lang.Object implements java.lang.AutoCloseable
{
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.graphics.Point mTempPoint;
    private final long mNativeDocument;
    private final int mPageCount;
    private android.os.ParcelFileDescriptor mInput;
    private android.graphics.pdf.PdfRenderer$Page mCurrentPage;

    public void <init>(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.graphics.pdf.PdfRenderer r0;
        android.os.ParcelFileDescriptor r1, $r10;
        long l0, $l4, $l5;
        dalvik.system.CloseGuard $r3, $r11;
        android.graphics.Point $r4;
        libcore.io.Os $r5, $r7;
        java.io.FileDescriptor $r6, $r8;
        int $i1, $i3, $i6;
        android.system.StructStat $r9;
        android.system.ErrnoException $r12;
        java.lang.NullPointerException $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.Point mTempPoint> = $r4;

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("input cannot be null");

        throw $r13;

     label1:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r6 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i1 = <android.system.OsConstants: int SEEK_SET>;

        interfaceinvoke $r5.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>($r6, 0L, $i1);

        $r7 = <libcore.io.Libcore: libcore.io.Os os>;

        $r8 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r9 = interfaceinvoke $r7.<libcore.io.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r8);

        l0 = $r9.<android.system.StructStat: long st_size>;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file descriptor not seekable");

        throw $r14;

     label4:
        r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput> = r1;

        $r10 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        $i3 = virtualinvoke $r10.<android.os.ParcelFileDescriptor: int getFd()>();

        $l5 = staticinvoke <android.graphics.pdf.PdfRenderer: long nativeCreate(int,long)>($i3, l0);

        r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument> = $l5;

        $l4 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        $i6 = staticinvoke <android.graphics.pdf.PdfRenderer: int nativeGetPageCount(long)>($l4);

        r0.<android.graphics.pdf.PdfRenderer: int mPageCount> = $i6;

        $r11 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r11.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public void close()
    {
        android.graphics.pdf.PdfRenderer r0;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageOpened()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void doClose()>();

        return;
    }

    public int getPageCount()
    {
        android.graphics.pdf.PdfRenderer r0;
        int $i0;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        $i0 = r0.<android.graphics.pdf.PdfRenderer: int mPageCount>;

        return $i0;
    }

    public boolean shouldScaleForPrinting()
    {
        android.graphics.pdf.PdfRenderer r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        $z0 = staticinvoke <android.graphics.pdf.PdfRenderer: boolean nativeScaleForPrinting(long)>($l0);

        return $z0;
    }

    public android.graphics.pdf.PdfRenderer$Page openPage(int)
    {
        android.graphics.pdf.PdfRenderer r0;
        int i0;
        android.graphics.pdf.PdfRenderer$Page $r1, $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfClosed()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageOpened()>();

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void throwIfPageNotInDocument(int)>(i0);

        $r1 = new android.graphics.pdf.PdfRenderer$Page;

        specialinvoke $r1.<android.graphics.pdf.PdfRenderer$Page: void <init>(android.graphics.pdf.PdfRenderer,int,android.graphics.pdf.PdfRenderer$1)>(r0, i0, null);

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage> = $r1;

        $r2 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        return $r2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.pdf.PdfRenderer r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: android.graphics.pdf.PdfRenderer;

     label1:
        $r2 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

        $r3 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        if $r3 == null goto label2;

        specialinvoke r0.<android.graphics.pdf.PdfRenderer: void doClose()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void doClose()
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.pdf.PdfRenderer$Page $r2, $r5;
        long $l0;
        android.os.ParcelFileDescriptor $r3;
        dalvik.system.CloseGuard $r4;
        java.io.IOException $r6;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        $r2 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        if $r2 == null goto label1;

        $r5 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        virtualinvoke $r5.<android.graphics.pdf.PdfRenderer$Page: void close()>();

     label1:
        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeClose(long)>($l0);

     label2:
        $r3 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        virtualinvoke $r3.<android.os.ParcelFileDescriptor: void close()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput> = null;

        $r4 = r0.<android.graphics.pdf.PdfRenderer: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private void throwIfClosed()
    {
        android.graphics.pdf.PdfRenderer r0;
        android.os.ParcelFileDescriptor $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.os.ParcelFileDescriptor mInput>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already closed");

        throw $r2;

     label1:
        return;
    }

    private void throwIfPageOpened()
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.pdf.PdfRenderer$Page $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current page not closed");

        throw $r2;

     label1:
        return;
    }

    private void throwIfPageNotInDocument(int)
    {
        android.graphics.pdf.PdfRenderer r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.graphics.pdf.PdfRenderer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.graphics.pdf.PdfRenderer: int mPageCount>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid page index");

        throw $r1;

     label2:
        return;
    }

    private static native long nativeCreate(int, long);

    private static native void nativeClose(long);

    private static native int nativeGetPageCount(long);

    private static native boolean nativeScaleForPrinting(long);

    private static native void nativeRenderPage(long, long, long, int, int, int, int, long, int);

    private static native long nativeOpenPageAndGetSize(long, int, android.graphics.Point);

    private static native void nativeClosePage(long);

    static android.graphics.Point access$100(android.graphics.pdf.PdfRenderer)
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.Point $r1;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        $r1 = r0.<android.graphics.pdf.PdfRenderer: android.graphics.Point mTempPoint>;

        return $r1;
    }

    static long access$200(android.graphics.pdf.PdfRenderer)
    {
        android.graphics.pdf.PdfRenderer r0;
        long $l0;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        $l0 = r0.<android.graphics.pdf.PdfRenderer: long mNativeDocument>;

        return $l0;
    }

    static long access$300(long, int, android.graphics.Point)
    {
        long l0, $l2;
        int i1;
        android.graphics.Point r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Point;

        $l2 = staticinvoke <android.graphics.pdf.PdfRenderer: long nativeOpenPageAndGetSize(long,int,android.graphics.Point)>(l0, i1, r0);

        return $l2;
    }

    static void access$400(long, long, long, int, int, int, int, long, int)
    {
        long l0, l1, l2, l7;
        int i3, i4, i5, i6, i8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        l7 := @parameter7: long;

        i8 := @parameter8: int;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeRenderPage(long,long,long,int,int,int,int,long,int)>(l0, l1, l2, i3, i4, i5, i6, l7, i8);

        return;
    }

    static void access$500(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.graphics.pdf.PdfRenderer: void nativeClosePage(long)>(l0);

        return;
    }

    static android.graphics.pdf.PdfRenderer$Page access$602(android.graphics.pdf.PdfRenderer, android.graphics.pdf.PdfRenderer$Page)
    {
        android.graphics.pdf.PdfRenderer r0;
        android.graphics.pdf.PdfRenderer$Page r1;

        r0 := @parameter0: android.graphics.pdf.PdfRenderer;

        r1 := @parameter1: android.graphics.pdf.PdfRenderer$Page;

        r0.<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page mCurrentPage> = r1;

        return r1;
    }
}
