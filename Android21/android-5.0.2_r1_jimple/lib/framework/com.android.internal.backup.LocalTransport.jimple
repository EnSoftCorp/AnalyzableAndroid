public class com.android.internal.backup.LocalTransport extends android.app.backup.BackupTransport
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String TRANSPORT_DIR_NAME;
    private static final java.lang.String TRANSPORT_DESTINATION_STRING;
    private static final java.lang.String TRANSPORT_DATA_MANAGEMENT_LABEL;
    private static final java.lang.String INCREMENTAL_DIR;
    private static final java.lang.String FULL_DATA_DIR;
    private static final long CURRENT_SET_TOKEN;
    private android.content.Context mContext;
    private java.io.File mDataDir;
    private java.io.File mCurrentSetDir;
    private java.io.File mCurrentSetIncrementalDir;
    private java.io.File mCurrentSetFullDir;
    private android.content.pm.PackageInfo[] mRestorePackages;
    private int mRestorePackage;
    private int mRestoreType;
    private java.io.File mRestoreSetDir;
    private java.io.File mRestoreSetIncrementalDir;
    private java.io.File mRestoreSetFullDir;
    private long mRestoreToken;
    private java.lang.String mFullTargetPackage;
    private android.os.ParcelFileDescriptor mSocket;
    private java.io.FileInputStream mSocketInputStream;
    private java.io.BufferedOutputStream mFullBackupOutputStream;
    private byte[] mFullBackupBuffer;
    private java.io.File mFullRestoreSetDir;
    private java.util.HashSet mFullRestorePackages;
    private java.io.FileInputStream mCurFullRestoreStream;
    private java.io.FileOutputStream mFullRestoreSocketStream;
    private byte[] mFullRestoreBuffer;
    static final long[] POSSIBLE_SETS;

    public void <init>(android.content.Context)
    {
        com.android.internal.backup.LocalTransport r0;
        android.content.Context r1;
        java.io.File $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r18;
        java.lang.String $r6, $r19;
        java.lang.StringBuilder $r15, $r16, $r17;
        boolean $z3;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.backup.BackupTransport: void <init>()>();

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDownloadCacheDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "backup");

        r0.<com.android.internal.backup.LocalTransport: java.io.File mDataDir> = $r2;

        $r4 = new java.io.File;

        $r5 = r0.<com.android.internal.backup.LocalTransport: java.io.File mDataDir>;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(1L);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r6);

        r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir> = $r4;

        $r7 = new java.io.File;

        $r8 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "_delta");

        r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetIncrementalDir> = $r7;

        $r9 = new java.io.File;

        $r10 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "_full");

        r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetFullDir> = $r9;

        r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages> = null;

        r0.<com.android.internal.backup.LocalTransport: int mRestorePackage> = -1;

        r0.<com.android.internal.backup.LocalTransport: android.content.Context mContext> = r1;

        $r11 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        $r12 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetFullDir>;

        virtualinvoke $r12.<java.io.File: boolean mkdir()>();

        $r13 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetIncrementalDir>;

        virtualinvoke $r13.<java.io.File: boolean mkdir()>();

        $r14 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        $z3 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r14);

        if $z3 != 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELinux restorecon failed for ");

        $r18 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", $r19);

     label1:
        return;
    }

    public java.lang.String name()
    {
        com.android.internal.backup.LocalTransport r0;
        android.content.ComponentName $r1;
        android.content.Context $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r1 = new android.content.ComponentName;

        $r2 = r0.<com.android.internal.backup.LocalTransport: android.content.Context mContext>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r2, $r3);

        $r4 = virtualinvoke $r1.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        return $r4;
    }

    public android.content.Intent configurationIntent()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return null;
    }

    public java.lang.String currentDestinationString()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return "Backing up to debug-only private cache";
    }

    public android.content.Intent dataManagementIntent()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return null;
    }

    public java.lang.String dataManagementLabel()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return "";
    }

    public java.lang.String transportDirName()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return "com.android.internal.backup.LocalTransport";
    }

    public long requestBackupTime()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return 0L;
    }

    public int initializeDevice()
    {
        com.android.internal.backup.LocalTransport r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r1 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetDir>;

        specialinvoke r0.<com.android.internal.backup.LocalTransport: void deleteContents(java.io.File)>($r1);

        return 0;
    }

    public int performBackup(android.content.pm.PackageInfo, android.os.ParcelFileDescriptor)
    {
        com.android.internal.backup.LocalTransport r0;
        android.content.pm.PackageInfo r1;
        android.os.ParcelFileDescriptor r2;
        java.io.File r3, r8, $r12, $r13, $r20;
        android.app.backup.BackupDataInput r4, $r15;
        int i0, i1;
        byte[] r5, $r18, $r19;
        java.lang.String r6, r7, $r14, $r17, $r27, $r28;
        java.io.FileOutputStream r9, $r21;
        short s2;
        java.lang.Throwable r11, $r22;
        boolean $z1, $z2;
        java.io.FileDescriptor $r16;
        java.io.IOException $r23, $r25, r30;
        java.lang.StringBuilder $r24, $r26, $r29;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.content.pm.PackageInfo;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        $r12 = new java.io.File;

        $r13 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetIncrementalDir>;

        $r14 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, $r14);

        r3 = $r12;

        virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        $r15 = new android.app.backup.BackupDataInput;

        $r16 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r15.<android.app.backup.BackupDataInput: void <init>(java.io.FileDescriptor)>($r16);

        r4 = $r15;

     label01:
        i0 = 512;

        r5 = newarray (byte)[i0];

     label02:
        $z1 = virtualinvoke r4.<android.app.backup.BackupDataInput: boolean readNextHeader()>();

        if $z1 == 0 goto label15;

        r6 = virtualinvoke r4.<android.app.backup.BackupDataInput: java.lang.String getKey()>();

        $r17 = new java.lang.String;

        $r19 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        $r18 = staticinvoke <com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>($r19);

        specialinvoke $r17.<java.lang.String: void <init>(byte[])>($r18);

        r7 = $r17;

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, r7);

        r8 = $r20;

        i1 = virtualinvoke r4.<android.app.backup.BackupDataInput: int getDataSize()>();

        if i1 < 0 goto label13;

        $z2 = virtualinvoke r8.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label03;

        virtualinvoke r8.<java.io.File: boolean delete()>();

     label03:
        $r21 = new java.io.FileOutputStream;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>(r8);

        r9 = $r21;

        if i1 <= i0 goto label04;

        i0 = i1;

        r5 = newarray (byte)[i0];

     label04:
        virtualinvoke r4.<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)>(r5, 0, i1);

     label05:
        virtualinvoke r9.<java.io.FileOutputStream: void write(byte[],int,int)>(r5, 0, i1);

     label06:
        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

        goto label12;

     label07:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update key file ");

        $r28 = virtualinvoke r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", $r27);

        s2 = -1000;

     label08:
        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

     label09:
        return s2;

     label10:
        $r22 := @caughtexception;

        r11 = $r22;

     label11:
        virtualinvoke r9.<java.io.FileOutputStream: void close()>();

        throw r11;

     label12:
        goto label14;

     label13:
        virtualinvoke r8.<java.io.File: boolean delete()>();

     label14:
        goto label02;

     label15:
        return 0;

     label16:
        $r23 := @caughtexception;

        r30 = $r23;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalTransport", "Exception reading backup input:", r30);

        return -1000;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.io.IOException from label01 to label09 with label16;
        catch java.io.IOException from label10 to label15 with label16;
    }

    private void deleteContents(java.io.File)
    {
        com.android.internal.backup.LocalTransport r0;
        java.io.File r1, r4;
        java.io.File[] r2, r3;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: java.io.File;

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if r2 == null goto label3;

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $z0 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.backup.LocalTransport: void deleteContents(java.io.File)>(r4);

     label2:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public int clearBackupData(android.content.pm.PackageInfo)
    {
        com.android.internal.backup.LocalTransport r0;
        android.content.pm.PackageInfo r1;
        java.io.File r2, r5, r6, $r7, $r9, $r10, $r12, r13;
        java.io.File[] r3, r4, r14, r15;
        int i0, i1, i2, i3;
        java.lang.String $r8, $r11;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.content.pm.PackageInfo;

        $r7 = new java.io.File;

        $r9 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetIncrementalDir>;

        $r8 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r8);

        r2 = $r7;

        r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        if r3 == null goto label3;

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        virtualinvoke r5.<java.io.File: boolean delete()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<java.io.File: boolean delete()>();

     label3:
        $r10 = new java.io.File;

        $r12 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetFullDir>;

        $r11 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, $r11);

        r13 = $r10;

        r14 = virtualinvoke r13.<java.io.File: java.io.File[] listFiles()>();

        if r14 == null goto label6;

        r15 = r14;

        i2 = lengthof r15;

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        r6 = r15[i3];

        virtualinvoke r6.<java.io.File: boolean delete()>();

        i3 = i3 + 1;

        goto label4;

     label5:
        virtualinvoke r13.<java.io.File: boolean delete()>();

     label6:
        return 0;
    }

    public int finishBackup()
    {
        com.android.internal.backup.LocalTransport r0;
        int $i0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $i0 = specialinvoke r0.<com.android.internal.backup.LocalTransport: int tearDownFullBackup()>();

        return $i0;
    }

    private int tearDownFullBackup()
    {
        com.android.internal.backup.LocalTransport r0;
        short s0;
        java.lang.Throwable r2, $r7;
        android.os.ParcelFileDescriptor $r3, $r6;
        java.io.BufferedOutputStream $r4, $r5;
        java.io.IOException $r8;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r3 = r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket>;

        if $r3 == null goto label7;

     label1:
        $r4 = r0.<com.android.internal.backup.LocalTransport: java.io.BufferedOutputStream mFullBackupOutputStream>;

        virtualinvoke $r4.<java.io.BufferedOutputStream: void flush()>();

        $r5 = r0.<com.android.internal.backup.LocalTransport: java.io.BufferedOutputStream mFullBackupOutputStream>;

        virtualinvoke $r5.<java.io.BufferedOutputStream: void close()>();

        r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mSocketInputStream> = null;

        r0.<com.android.internal.backup.LocalTransport: java.lang.String mFullTargetPackage> = null;

        $r6 = r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket>;

        virtualinvoke $r6.<android.os.ParcelFileDescriptor: void close()>();

     label2:
        r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket> = null;

        goto label7;

     label3:
        $r8 := @caughtexception;

        s0 = -1000;

     label4:
        r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket> = null;

        return s0;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

     label6:
        r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket> = null;

        throw r2;

     label7:
        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.io.File tarballFile(java.lang.String)
    {
        com.android.internal.backup.LocalTransport r0;
        java.lang.String r1;
        java.io.File $r2, $r3;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.internal.backup.LocalTransport: java.io.File mCurrentSetFullDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1);

        return $r2;
    }

    public long requestFullBackupTime()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return 0L;
    }

    public int performFullBackup(android.content.pm.PackageInfo, android.os.ParcelFileDescriptor)
    {
        com.android.internal.backup.LocalTransport r0;
        android.content.pm.PackageInfo r1;
        android.os.ParcelFileDescriptor r2, $r5, $r7, $r9;
        java.io.File r4;
        java.io.FileDescriptor $r6, $r10;
        java.io.FileInputStream $r8;
        java.lang.String $r11, $r12;
        java.io.FileOutputStream $r13, r18;
        java.io.BufferedOutputStream $r14;
        byte[] $r15;
        java.io.IOException $r16;
        java.io.FileNotFoundException $r17;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.content.pm.PackageInfo;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        $r5 = r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket>;

        if $r5 == null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", "Attempt to initiate full backup while one is in progress");

        return -1000;

     label1:
        $r6 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r7 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>($r6);

        r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket> = $r7;

        $r8 = new java.io.FileInputStream;

        $r9 = r0.<com.android.internal.backup.LocalTransport: android.os.ParcelFileDescriptor mSocket>;

        $r10 = virtualinvoke $r9.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r10);

        r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mSocketInputStream> = $r8;

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", "Unable to process socket for full backup");

        return -1000;

     label4:
        $r11 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r0.<com.android.internal.backup.LocalTransport: java.lang.String mFullTargetPackage> = $r11;

     label5:
        $r12 = r0.<com.android.internal.backup.LocalTransport: java.lang.String mFullTargetPackage>;

        r4 = specialinvoke r0.<com.android.internal.backup.LocalTransport: java.io.File tarballFile(java.lang.String)>($r12);

        $r13 = new java.io.FileOutputStream;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>(r4);

        r18 = $r13;

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        return -1000;

     label8:
        $r14 = new java.io.BufferedOutputStream;

        specialinvoke $r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r18);

        r0.<com.android.internal.backup.LocalTransport: java.io.BufferedOutputStream mFullBackupOutputStream> = $r14;

        $r15 = newarray (byte)[4096];

        r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer> = $r15;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.FileNotFoundException from label5 to label6 with label7;
    }

    public int sendBackupData(int)
    {
        com.android.internal.backup.LocalTransport r0;
        int i0, i1, $i2;
        byte[] $r1, $r2, $r3, $r5, $r7;
        java.io.FileInputStream $r4;
        java.io.BufferedOutputStream $r6;
        java.io.IOException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12, $r13;

        r0 := @this: com.android.internal.backup.LocalTransport;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocalTransport", "Attempted sendBackupData before performFullBackup");

        return -1000;

     label1:
        $r2 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer>;

        $i2 = lengthof $r2;

        if i0 <= $i2 goto label2;

        $r7 = newarray (byte)[i0];

        r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer> = $r7;

     label2:
        if i0 <= 0 goto label8;

     label3:
        $r4 = r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mSocketInputStream>;

        $r3 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer>;

        i1 = virtualinvoke $r4.<java.io.FileInputStream: int read(byte[],int,int)>($r3, 0, i0);

        if i1 >= 0 goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocalTransport", "Unexpected EOD; failing backup");

     label4:
        return -1000;

     label5:
        $r6 = r0.<com.android.internal.backup.LocalTransport: java.io.BufferedOutputStream mFullBackupOutputStream>;

        $r5 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullBackupBuffer>;

        virtualinvoke $r6.<java.io.BufferedOutputStream: void write(byte[],int,int)>($r5, 0, i1);

        i0 = i0 - i1;

     label6:
        goto label2;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error handling backup data for ");

        $r12 = r0.<com.android.internal.backup.LocalTransport: java.lang.String mFullTargetPackage>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", $r13);

        return -1000;

     label8:
        return 0;

        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void cancelFullBackup()
    {
        com.android.internal.backup.LocalTransport r0;
        java.io.File r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r2 = r0.<com.android.internal.backup.LocalTransport: java.lang.String mFullTargetPackage>;

        r1 = specialinvoke r0.<com.android.internal.backup.LocalTransport: java.io.File tarballFile(java.lang.String)>($r2);

        specialinvoke r0.<com.android.internal.backup.LocalTransport: int tearDownFullBackup()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    public android.app.backup.RestoreSet[] getAvailableRestoreSets()
    {
        com.android.internal.backup.LocalTransport r0;
        long[] r1, r2, $r3;
        int i0, i1, i2, $i4, $i5, $i6, $i8, i9, i10;
        long l3, $l7;
        android.app.backup.RestoreSet $r4;
        java.io.File $r5, $r7;
        java.lang.String $r6;
        boolean $z0;
        android.app.backup.RestoreSet[] r8;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r3 = <com.android.internal.backup.LocalTransport: long[] POSSIBLE_SETS>;

        $i4 = lengthof $r3;

        $i5 = $i4 + 1;

        r1 = newarray (long)[$i5];

        i0 = 0;

        r2 = <com.android.internal.backup.LocalTransport: long[] POSSIBLE_SETS>;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        l3 = r2[i2];

        $r5 = new java.io.File;

        $r7 = r0.<com.android.internal.backup.LocalTransport: java.io.File mDataDir>;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l3);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r6);

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $i8 = i0;

        i0 = i0 + 1;

        r1[$i8] = l3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        i9 = i0 + 1;

        r1[i0] = 1L;

        r8 = newarray (android.app.backup.RestoreSet)[i9];

        i10 = 0;

     label4:
        $i6 = lengthof r8;

        if i10 >= $i6 goto label5;

        $r4 = new android.app.backup.RestoreSet;

        $l7 = r1[i10];

        specialinvoke $r4.<android.app.backup.RestoreSet: void <init>(java.lang.String,java.lang.String,long)>("Local disk image", "flash", $l7);

        r8[i10] = $r4;

        i10 = i10 + 1;

        goto label4;

     label5:
        return r8;
    }

    public long getCurrentRestoreSet()
    {
        com.android.internal.backup.LocalTransport r0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        return 1L;
    }

    public int startRestore(long, android.content.pm.PackageInfo[])
    {
        com.android.internal.backup.LocalTransport r0;
        long l0;
        android.content.pm.PackageInfo[] r1;
        java.io.File $r2, $r3, $r5, $r6, $r7, $r8;
        java.lang.String $r4;

        r0 := @this: com.android.internal.backup.LocalTransport;

        l0 := @parameter0: long;

        r1 := @parameter1: android.content.pm.PackageInfo[];

        r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages> = r1;

        r0.<com.android.internal.backup.LocalTransport: int mRestorePackage> = -1;

        r0.<com.android.internal.backup.LocalTransport: long mRestoreToken> = l0;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.internal.backup.LocalTransport: java.io.File mDataDir>;

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4);

        r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetDir> = $r2;

        $r5 = new java.io.File;

        $r6 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetDir>;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "_delta");

        r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetIncrementalDir> = $r5;

        $r7 = new java.io.File;

        $r8 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "_full");

        r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetFullDir> = $r7;

        return 0;
    }

    public android.app.backup.RestoreDescription nextRestorePackage()
    {
        com.android.internal.backup.LocalTransport r0;
        boolean z0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.io.File r3, $r9, $r10, $r12, $r13;
        android.content.pm.PackageInfo[] $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        android.app.backup.RestoreDescription $r6, $r11;
        android.content.pm.PackageInfo $r8;
        long $l5;
        byte $b7;
        java.lang.IllegalStateException $r14;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $r4 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        if $r4 != null goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRestore not called");

        throw $r14;

     label1:
        z0 = 0;

     label2:
        $i0 = r0.<com.android.internal.backup.LocalTransport: int mRestorePackage>;

        $i1 = $i0 + 1;

        r0.<com.android.internal.backup.LocalTransport: int mRestorePackage> = $i1;

        $r5 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label6;

        $r7 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        $i3 = r0.<com.android.internal.backup.LocalTransport: int mRestorePackage>;

        $r8 = $r7[$i3];

        r1 = $r8.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r9 = new java.io.File;

        $r10 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetIncrementalDir>;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, r1);

        r2 = virtualinvoke $r9.<java.io.File: java.lang.String[] list()>();

        if r2 == null goto label3;

        $i6 = lengthof r2;

        if $i6 <= 0 goto label3;

        r0.<com.android.internal.backup.LocalTransport: int mRestoreType> = 1;

        z0 = 1;

     label3:
        if z0 != 0 goto label4;

        $r12 = new java.io.File;

        $r13 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetFullDir>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, r1);

        r3 = $r12;

        $l5 = virtualinvoke r3.<java.io.File: long length()>();

        $b7 = $l5 cmp 0L;

        if $b7 <= 0 goto label4;

        r0.<com.android.internal.backup.LocalTransport: int mRestoreType> = 2;

        r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream> = null;

        z0 = 1;

     label4:
        if z0 == 0 goto label5;

        $r11 = new android.app.backup.RestoreDescription;

        $i4 = r0.<com.android.internal.backup.LocalTransport: int mRestoreType>;

        specialinvoke $r11.<android.app.backup.RestoreDescription: void <init>(java.lang.String,int)>(r1, $i4);

        return $r11;

     label5:
        goto label2;

     label6:
        $r6 = <android.app.backup.RestoreDescription: android.app.backup.RestoreDescription NO_MORE_PACKAGES>;

        return $r6;
    }

    public int getRestoreData(android.os.ParcelFileDescriptor)
    {
        com.android.internal.backup.LocalTransport r0;
        android.os.ParcelFileDescriptor r1;
        java.io.File r2, r7, $r12, $r16;
        java.util.ArrayList r3;
        android.app.backup.BackupDataOutput r4, $r18;
        java.util.Iterator r5;
        com.android.internal.backup.LocalTransport$DecodedFilename r6;
        java.io.FileInputStream r8, $r19;
        int i0, $i1, $i2, $i3;
        byte[] r9;
        java.lang.Throwable r10, $r27;
        android.content.pm.PackageInfo[] $r11, $r13;
        java.lang.String $r14, $r21, $r26;
        android.content.pm.PackageInfo $r15;
        java.io.FileDescriptor $r17;
        boolean $z0;
        java.lang.Object $r20;
        long $l5;
        java.lang.StringBuilder $r22, $r23, $r25;
        java.lang.IllegalStateException $r24, $r29, $r30;
        java.io.IOException $r28, r31;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        $r11 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        if $r11 != null goto label01;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRestore not called");

        throw $r30;

     label01:
        $i1 = r0.<com.android.internal.backup.LocalTransport: int mRestorePackage>;

        if $i1 >= 0 goto label02;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("nextRestorePackage not called");

        throw $r29;

     label02:
        $i2 = r0.<com.android.internal.backup.LocalTransport: int mRestoreType>;

        if $i2 == 1 goto label03;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getRestoreData(fd) for non-key/value dataset");

        throw $r24;

     label03:
        $r12 = new java.io.File;

        $r16 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetIncrementalDir>;

        $r13 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        $i3 = r0.<com.android.internal.backup.LocalTransport: int mRestorePackage>;

        $r15 = $r13[$i3];

        $r14 = $r15.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, $r14);

        r2 = $r12;

        r3 = specialinvoke r0.<com.android.internal.backup.LocalTransport: java.util.ArrayList contentsByKey(java.io.File)>(r2);

        if r3 != null goto label04;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No keys for package: ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", $r26);

        return -1000;

     label04:
        $r18 = new android.app.backup.BackupDataOutput;

        $r17 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r18.<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor)>($r17);

        r4 = $r18;

     label05:
        r5 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.internal.backup.LocalTransport$DecodedFilename) $r20;

        r7 = r6.<com.android.internal.backup.LocalTransport$DecodedFilename: java.io.File file>;

        $r19 = new java.io.FileInputStream;

        specialinvoke $r19.<java.io.FileInputStream: void <init>(java.io.File)>(r7);

        r8 = $r19;

     label07:
        $l5 = virtualinvoke r7.<java.io.File: long length()>();

        i0 = (int) $l5;

        r9 = newarray (byte)[i0];

        virtualinvoke r8.<java.io.FileInputStream: int read(byte[])>(r9);

        $r21 = r6.<com.android.internal.backup.LocalTransport$DecodedFilename: java.lang.String key>;

        virtualinvoke r4.<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>($r21, i0);

        virtualinvoke r4.<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>(r9, i0);

     label08:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

        goto label11;

     label09:
        $r27 := @caughtexception;

        r10 = $r27;

     label10:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

        throw r10;

     label11:
        goto label06;

     label12:
        return 0;

     label13:
        $r28 := @caughtexception;

        r31 = $r28;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocalTransport", "Unable to read backup records", r31);

        return -1000;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.IOException from label05 to label12 with label13;
    }

    private java.util.ArrayList contentsByKey(java.io.File)
    {
        com.android.internal.backup.LocalTransport r0;
        java.io.File r1, r5;
        java.io.File[] r2, r4;
        java.util.ArrayList r3, $r6;
        int i0, i1, $i2;
        com.android.internal.backup.LocalTransport$DecodedFilename $r7;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: java.io.File;

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if r2 == null goto label1;

        $i2 = lengthof r2;

        if $i2 != 0 goto label2;

     label1:
        return null;

     label2:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        r4 = r2;

        i0 = lengthof r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r5 = r4[i1];

        $r7 = new com.android.internal.backup.LocalTransport$DecodedFilename;

        specialinvoke $r7.<com.android.internal.backup.LocalTransport$DecodedFilename: void <init>(java.io.File)>(r5);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label3;

     label4:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r3);

        return r3;
    }

    public void finishRestore()
    {
        com.android.internal.backup.LocalTransport r0;
        int $i0;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $i0 = r0.<com.android.internal.backup.LocalTransport: int mRestoreType>;

        if $i0 != 2 goto label1;

        specialinvoke r0.<com.android.internal.backup.LocalTransport: void resetFullRestoreState()>();

     label1:
        r0.<com.android.internal.backup.LocalTransport: int mRestoreType> = 0;

        return;
    }

    private void resetFullRestoreState()
    {
        com.android.internal.backup.LocalTransport r0;
        java.io.FileInputStream $r2;
        java.io.IOException $r3;

        r0 := @this: com.android.internal.backup.LocalTransport;

     label1:
        $r2 = r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream>;

        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocalTransport", "Unable to close full restore input stream");

     label4:
        r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream> = null;

        r0.<com.android.internal.backup.LocalTransport: java.io.FileOutputStream mFullRestoreSocketStream> = null;

        r0.<com.android.internal.backup.LocalTransport: byte[] mFullRestoreBuffer> = null;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor)
    {
        com.android.internal.backup.LocalTransport r0;
        android.os.ParcelFileDescriptor r1;
        java.lang.String r2, $r23;
        java.io.File r3, $r12, $r15;
        java.lang.Throwable r5, $r26;
        int $i0, $i2, i4;
        java.io.FileInputStream $r6, $r8, $r14;
        byte[] $r7, $r9, $r19;
        java.io.FileOutputStream $r10, $r17;
        android.content.pm.PackageInfo[] $r11;
        android.content.pm.PackageInfo $r13;
        java.io.FileDescriptor $r16;
        java.lang.IllegalStateException $r18;
        java.lang.StringBuilder $r20, $r22, $r24;
        java.io.IOException $r21, $r25;
        short s5;

        r0 := @this: com.android.internal.backup.LocalTransport;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        $i0 = r0.<com.android.internal.backup.LocalTransport: int mRestoreType>;

        if $i0 == 2 goto label01;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Asked for full restore data for non-stream package");

        throw $r18;

     label01:
        $r6 = r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream>;

        if $r6 != null goto label06;

        $r11 = r0.<com.android.internal.backup.LocalTransport: android.content.pm.PackageInfo[] mRestorePackages>;

        $i2 = r0.<com.android.internal.backup.LocalTransport: int mRestorePackage>;

        $r13 = $r11[$i2];

        r2 = $r13.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r12 = new java.io.File;

        $r15 = r0.<com.android.internal.backup.LocalTransport: java.io.File mRestoreSetFullDir>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, r2);

        r3 = $r12;

     label02:
        $r14 = new java.io.FileInputStream;

        specialinvoke $r14.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream> = $r14;

     label03:
        goto label05;

     label04:
        $r21 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read archive for ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocalTransport", $r23);

        return -1002;

     label05:
        $r17 = new java.io.FileOutputStream;

        $r16 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r16);

        r0.<com.android.internal.backup.LocalTransport: java.io.FileOutputStream mFullRestoreSocketStream> = $r17;

        $r19 = newarray (byte)[2048];

        r0.<com.android.internal.backup.LocalTransport: byte[] mFullRestoreBuffer> = $r19;

     label06:
        $r8 = r0.<com.android.internal.backup.LocalTransport: java.io.FileInputStream mCurFullRestoreStream>;

        $r7 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullRestoreBuffer>;

        i4 = virtualinvoke $r8.<java.io.FileInputStream: int read(byte[])>($r7);

        if i4 >= 0 goto label07;

        i4 = -1;

        goto label09;

     label07:
        if i4 != 0 goto label08;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocalTransport", "read() of archive file returned 0; treating as EOF");

        i4 = -1;

        goto label09;

     label08:
        $r10 = r0.<com.android.internal.backup.LocalTransport: java.io.FileOutputStream mFullRestoreSocketStream>;

        $r9 = r0.<com.android.internal.backup.LocalTransport: byte[] mFullRestoreBuffer>;

        virtualinvoke $r10.<java.io.FileOutputStream: void write(byte[],int,int)>($r9, 0, i4);

     label09:
        goto label14;

     label10:
        $r25 := @caughtexception;

        s5 = -1000;

     label11:
        return s5;

     label12:
        $r26 := @caughtexception;

        r5 = $r26;

     label13:
        throw r5;

     label14:
        return i4;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label09 with label10;
        catch java.lang.Throwable from label06 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public int abortFullRestore()
    {
        com.android.internal.backup.LocalTransport r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.internal.backup.LocalTransport;

        $i0 = r0.<com.android.internal.backup.LocalTransport: int mRestoreType>;

        if $i0 == 2 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("abortFullRestore() but not currently restoring");

        throw $r1;

     label1:
        specialinvoke r0.<com.android.internal.backup.LocalTransport: void resetFullRestoreState()>();

        r0.<com.android.internal.backup.LocalTransport: int mRestoreType> = 0;

        return 0;
    }

    static void <clinit>()
    {
        long[] $r0;

        <com.android.internal.backup.LocalTransport: long CURRENT_SET_TOKEN> = 1L;

        <com.android.internal.backup.LocalTransport: java.lang.String FULL_DATA_DIR> = "_full";

        <com.android.internal.backup.LocalTransport: java.lang.String INCREMENTAL_DIR> = "_delta";

        <com.android.internal.backup.LocalTransport: java.lang.String TRANSPORT_DATA_MANAGEMENT_LABEL> = "";

        <com.android.internal.backup.LocalTransport: java.lang.String TRANSPORT_DESTINATION_STRING> = "Backing up to debug-only private cache";

        <com.android.internal.backup.LocalTransport: java.lang.String TRANSPORT_DIR_NAME> = "com.android.internal.backup.LocalTransport";

        <com.android.internal.backup.LocalTransport: boolean DEBUG> = 0;

        <com.android.internal.backup.LocalTransport: java.lang.String TAG> = "LocalTransport";

        $r0 = newarray (long)[8];

        $r0[0] = 2L;

        $r0[1] = 3L;

        $r0[2] = 4L;

        $r0[3] = 5L;

        $r0[4] = 6L;

        $r0[5] = 7L;

        $r0[6] = 8L;

        $r0[7] = 9L;

        <com.android.internal.backup.LocalTransport: long[] POSSIBLE_SETS> = $r0;

        return;
    }
}
