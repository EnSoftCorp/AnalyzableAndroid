public class android.net.NetworkUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final int RESET_IPV4_ADDRESSES;
    public static final int RESET_IPV6_ADDRESSES;
    public static final int RESET_ALL_ADDRESSES;

    public void <init>()
    {
        android.net.NetworkUtils r0;

        r0 := @this: android.net.NetworkUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native int resetConnections(java.lang.String, int);

    public static native boolean runDhcp(java.lang.String, android.net.DhcpResults);

    public static native boolean runDhcpRenew(java.lang.String, android.net.DhcpResults);

    public static native boolean stopDhcp(java.lang.String);

    public static native boolean releaseDhcpLease(java.lang.String);

    public static native java.lang.String getDhcpError();

    public static native boolean bindProcessToNetwork(int);

    public static native int getNetworkBoundToProcess();

    public static native boolean bindProcessToNetworkForHostResolution(int);

    public static native int bindSocketToNetwork(int, int);

    public static native boolean protectFromVpn(int);

    public static java.net.InetAddress intToInetAddress(int)
    {
        int i0, $i1, $i3, $i4, $i6, $i7, $i9, $i10;
        byte[] r0, $r2;
        byte $b2, $b5, $b8, $b11;
        java.net.InetAddress $r3;
        java.lang.AssertionError $r4;
        java.net.UnknownHostException $r5;

        i0 := @parameter0: int;

        $r2 = newarray (byte)[4];

        $i1 = 255 & i0;

        $b2 = (byte) $i1;

        $r2[0] = $b2;

        $i3 = i0 >> 8;

        $i4 = 255 & $i3;

        $b5 = (byte) $i4;

        $r2[1] = $b5;

        $i6 = i0 >> 16;

        $i7 = 255 & $i6;

        $b8 = (byte) $i7;

        $r2[2] = $b8;

        $i9 = i0 >> 24;

        $i10 = 255 & $i9;

        $b11 = (byte) $i10;

        $r2[3] = $b11;

        r0 = $r2;

     label1:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r0);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static int inetAddressToInt(java.net.Inet4Address) throws java.lang.IllegalArgumentException
    {
        java.net.Inet4Address r0;
        byte[] r1;
        byte $b0, $b2, $b6, $b10;
        short $s1, $s3, $s7, $s11;
        int $i4, $i5, $i8, $i9, $i12, $i13;

        r0 := @parameter0: java.net.Inet4Address;

        r1 = virtualinvoke r0.<java.net.Inet4Address: byte[] getAddress()>();

        $b0 = r1[3];

        $s1 = $b0 & 255;

        $i5 = $s1 << 24;

        $b2 = r1[2];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i9 = $i5 | $i4;

        $b6 = r1[1];

        $s7 = $b6 & 255;

        $i8 = $s7 << 8;

        $i12 = $i9 | $i8;

        $b10 = r1[0];

        $s11 = $b10 & 255;

        $i13 = $i12 | $s11;

        return $i13;
    }

    public static int prefixLengthToNetmaskInt(int) throws java.lang.IllegalArgumentException
    {
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 32 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid prefix length (0 <= prefix <= 32)");

        throw $r0;

     label2:
        $i2 = 32 - i0;

        i1 = -1 << $i2;

        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i1);

        return $i3;
    }

    public static int netmaskIntToPrefixLength(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        return $i1;
    }

    public static java.net.InetAddress numericToInetAddress(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r0);

        return $r1;
    }

    protected static void parcelInetAddress(android.os.Parcel, java.net.InetAddress, int)
    {
        android.os.Parcel r0;
        java.net.InetAddress r1;
        int i0;
        byte[] r2, $r3;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        r2 = $r3;

        virtualinvoke r0.<android.os.Parcel: void writeByteArray(byte[])>(r2);

        return;
    }

    protected static java.net.InetAddress unparcelInetAddress(android.os.Parcel)
    {
        android.os.Parcel r0;
        byte[] r1;
        java.net.InetAddress $r3;
        java.net.UnknownHostException $r4;

        r0 := @parameter0: android.os.Parcel;

        r1 = virtualinvoke r0.<android.os.Parcel: byte[] createByteArray()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static void maskRawAddress(byte[], int)
    {
        byte[] r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i14;
        byte b3, $b10, $b12, $b13;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $i5 = lengthof r0;

        $i6 = $i5 * 8;

        if i0 <= $i6 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IP address with ");

        $i4 = lengthof r0;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes has invalid prefix length ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        i1 = i0 / 8;

        i2 = i0 % 8;

        $i7 = 8 - i2;

        $i9 = 255 << $i7;

        b3 = (byte) $i9;

        $i8 = lengthof r0;

        if i1 >= $i8 goto label3;

        $b10 = r0[i1];

        $b13 = $b10 & b3;

        $b12 = (byte) $b13;

        r0[i1] = $b12;

     label3:
        i14 = i1 + 1;

     label4:
        $i11 = lengthof r0;

        if i14 >= $i11 goto label5;

        r0[i14] = 0;

        i14 = i14 + 1;

        goto label4;

     label5:
        return;
    }

    public static java.net.InetAddress getNetworkPart(java.net.InetAddress, int)
    {
        java.net.InetAddress r0, r10;
        int i0;
        byte[] r1;
        java.net.UnknownHostException r2, $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>(r1, i0);

     label1:
        r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getNetworkPart error - ");

        $r7 = virtualinvoke r2.<java.net.UnknownHostException: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        return r10;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static android.util.Pair parseIpAndMask(java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r9;
        java.net.InetAddress r1;
        int i0;
        java.lang.String[] r2;
        java.lang.IllegalArgumentException $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8;
        android.util.Pair $r10;
        java.lang.Integer $r11;
        java.lang.NumberFormatException $r12;
        java.lang.NullPointerException $r13;
        java.lang.ArrayIndexOutOfBoundsException $r14;

        r0 := @parameter0: java.lang.String;

        r1 = null;

        i0 = -1;

     label1:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", 2);

        $r3 = r2[1];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r2[0];

        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>($r4);

     label2:
        goto label7;

     label3:
        $r13 := @caughtexception;

        goto label7;

     label4:
        $r14 := @caughtexception;

        goto label7;

     label5:
        $r12 := @caughtexception;

        goto label7;

     label6:
        $r15 := @caughtexception;

     label7:
        if r1 == null goto label8;

        if i0 != -1 goto label9;

     label8:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid IP address and mask ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label9:
        $r10 = new android.util.Pair;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r10.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, $r11);

        return $r10;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label4;
        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
    }

    public static boolean addressTypeMatches(java.net.InetAddress, java.net.InetAddress)
    {
        java.net.InetAddress r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $z4 = r1 instanceof java.net.Inet4Address;

        if $z4 != 0 goto label2;

     label1:
        $z1 = r0 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label3;

        $z2 = r1 instanceof java.net.Inet6Address;

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public static java.net.InetAddress hexToInet6Address(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r20;
        java.lang.Exception r1, $r13;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.net.InetAddress $r14;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19;
        java.lang.IllegalArgumentException $r21;

        r0 := @parameter0: java.lang.String;

     label1:
        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[8];

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $r2[0] = $r4;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 8);

        $r2[1] = $r5;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(8, 12);

        $r2[2] = $r6;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(12, 16);

        $r2[3] = $r7;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(16, 20);

        $r2[4] = $r8;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(20, 24);

        $r2[5] = $r9;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(24, 28);

        $r2[6] = $r10;

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(28, 32);

        $r2[7] = $r12;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "%s:%s:%s:%s:%s:%s:%s:%s", $r2);

        $r14 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r11);

     label2:
        return $r14;

     label3:
        $r13 := @caughtexception;

        r1 = $r13;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error in hexToInet6Address(");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkUtils", $r20);

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r1);

        throw $r21;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String[] makeStrings(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.String[] r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        java.net.InetAddress r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.Collection;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (java.lang.String)[$i1];

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.net.InetAddress) $r4;

        $i2 = i0;

        i0 = i0 + 1;

        $r5 = virtualinvoke r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r1[$i2] = $r5;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String trimV4AddrZeros(java.lang.String)
    {
        java.lang.String r0, $r4, $r5, r7;
        java.lang.String[] r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2, $i3;
        java.lang.NumberFormatException $r6;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i1 = lengthof r1;

        if $i1 == 4 goto label02;

        return r0;

     label02:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(16);

        r2 = $r3;

        i0 = 0;

     label03:
        if i0 >= 4 goto label11;

     label04:
        $r4 = r1[i0];

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 <= 3 goto label06;

     label05:
        return r0;

     label06:
        $r5 = r1[i0];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        return r0;

     label09:
        if i0 >= 3 goto label10;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label10:
        i0 = i0 + 1;

        goto label03;

     label11:
        r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r7;

        catch java.lang.NumberFormatException from label04 to label05 with label08;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
    }

    public static void <clinit>()
    {
        <android.net.NetworkUtils: int RESET_ALL_ADDRESSES> = 3;

        <android.net.NetworkUtils: int RESET_IPV6_ADDRESSES> = 2;

        <android.net.NetworkUtils: int RESET_IPV4_ADDRESSES> = 1;

        <android.net.NetworkUtils: java.lang.String TAG> = "NetworkUtils";

        return;
    }
}
