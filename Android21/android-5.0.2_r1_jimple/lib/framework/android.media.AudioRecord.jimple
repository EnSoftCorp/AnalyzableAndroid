public class android.media.AudioRecord extends java.lang.Object
{
    public static final int STATE_UNINITIALIZED;
    public static final int STATE_INITIALIZED;
    public static final int RECORDSTATE_STOPPED;
    public static final int RECORDSTATE_RECORDING;
    public static final int SUCCESS;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_INVALID_OPERATION;
    private static final int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELMASK;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDSOURCE;
    private static final int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_POS;
    private static final java.lang.String TAG;
    public static final java.lang.String SUBMIX_FIXED_VOLUME;
    private long mNativeRecorderInJavaObj;
    private long mNativeCallbackCookie;
    private int mSampleRate;
    private int mChannelCount;
    private int mChannelMask;
    private int mAudioFormat;
    private int mRecordSource;
    private int mState;
    private int mRecordingState;
    private final java.lang.Object mRecordingStateLock;
    private android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener;
    private final java.lang.Object mPositionListenerLock;
    private android.media.AudioRecord$NativeEventHandler mEventHandler;
    private android.os.Looper mInitializationLooper;
    private int mNativeBufferSizeInBytes;
    private int mSessionId;
    private android.media.AudioAttributes mAudioAttributes;
    private boolean mIsSubmixFullVolume;
    private final android.os.IBinder mICallBack;

    public void <init>(int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, i2, i3, i4, $i5;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;
        android.media.AudioFormat$Builder $r4, $r5, $r6, $r7;
        android.media.AudioFormat $r8;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r4 = new android.media.AudioFormat$Builder;

        specialinvoke $r4.<android.media.AudioFormat$Builder: void <init>()>();

        $i5 = staticinvoke <android.media.AudioRecord: int getChannelMaskFromLegacyConfig(int,boolean)>(i2, 1);

        $r5 = virtualinvoke $r4.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>($i5);

        $r6 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i3);

        $r7 = virtualinvoke $r6.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i1);

        $r8 = virtualinvoke $r7.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        specialinvoke r0.<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>($r3, $r8, i4, 0);

        return;
    }

    public void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        android.media.AudioAttributes r1, $r9, $r11, $r17;
        android.media.AudioFormat r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20;
        java.util.Iterator r3;
        int[] r4;
        java.lang.Object $r5, $r6, $r19;
        android.os.Binder $r7;
        android.os.Looper $r8, $r23;
        java.lang.ref.WeakReference $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String $r16, $r20;
        boolean $z0, $z1;
        java.util.Set $r18;
        java.lang.IllegalArgumentException $r21, $r22;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioAttributes;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: int mState> = 0;

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock> = $r5;

        r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = null;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock> = $r6;

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = null;

        r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioRecord: int mSessionId> = 0;

        r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume> = 0;

        $r7 = new android.os.Binder;

        specialinvoke $r7.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioRecord: android.os.IBinder mICallBack> = $r7;

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        if r1 != null goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r21;

     label1:
        if r2 != null goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat");

        throw $r22;

     label2:
        $r8 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = $r8;

        if $r8 != null goto label3;

        $r23 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = $r23;

     label3:
        r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes> = r1;

        $r9 = r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes>;

        $i4 = virtualinvoke $r9.<android.media.AudioAttributes: int getCapturePreset()>();

        if $i4 != 8 goto label5;

        $r17 = r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes>;

        $r18 = virtualinvoke $r17.<android.media.AudioAttributes: java.util.Set getTags()>();

        r3 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r19 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.String) $r19;

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("fixedVolume");

        if $z1 == 0 goto label4;

        r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume> = 1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("android.media.AudioRecord", "Will record from REMOTE_SUBMIX at full fixed volume");

        goto label5;

     label5:
        $i5 = virtualinvoke r2.<android.media.AudioFormat: int getPropertySetMask()>();

        $i6 = $i5 & 2;

        if $i6 == 0 goto label6;

        i20 = virtualinvoke r2.<android.media.AudioFormat: int getSampleRate()>();

        goto label7;

     label6:
        i20 = staticinvoke <android.media.AudioSystem: int getPrimaryOutputSamplingRate()>();

        if i20 > 0 goto label7;

        i20 = 44100;

     label7:
        i2 = 1;

        $i8 = virtualinvoke r2.<android.media.AudioFormat: int getPropertySetMask()>();

        $i7 = $i8 & 1;

        if $i7 == 0 goto label8;

        i2 = virtualinvoke r2.<android.media.AudioFormat: int getEncoding()>();

     label8:
        $i10 = virtualinvoke r1.<android.media.AudioAttributes: int getCapturePreset()>();

        specialinvoke r0.<android.media.AudioRecord: void audioParamCheck(int,int,int)>($i10, i20, i2);

        $i9 = virtualinvoke r2.<android.media.AudioFormat: int getChannelMask()>();

        $i12 = staticinvoke <android.media.AudioFormat: int channelCountFromInChannelMask(int)>($i9);

        r0.<android.media.AudioRecord: int mChannelCount> = $i12;

        $i11 = virtualinvoke r2.<android.media.AudioFormat: int getChannelMask()>();

        $i13 = staticinvoke <android.media.AudioRecord: int getChannelMaskFromLegacyConfig(int,boolean)>($i11, 0);

        r0.<android.media.AudioRecord: int mChannelMask> = $i13;

        specialinvoke r0.<android.media.AudioRecord: void audioBuffSizeCheck(int)>(i0);

        r4 = newarray (int)[1];

        r4[0] = i1;

        $r10 = new java.lang.ref.WeakReference;

        specialinvoke $r10.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r11 = r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes>;

        $i16 = r0.<android.media.AudioRecord: int mSampleRate>;

        $i17 = r0.<android.media.AudioRecord: int mChannelMask>;

        $i14 = r0.<android.media.AudioRecord: int mAudioFormat>;

        $i15 = r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes>;

        i3 = specialinvoke r0.<android.media.AudioRecord: int native_setup(java.lang.Object,java.lang.Object,int,int,int,int,int[])>($r10, $r11, $i16, $i17, $i14, $i15, r4);

        if i3 == 0 goto label9;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing native AudioRecord object.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>($r16);

        return;

     label9:
        $i18 = r4[0];

        r0.<android.media.AudioRecord: int mSessionId> = $i18;

        r0.<android.media.AudioRecord: int mState> = 1;

        return;
    }

    private static int getChannelMaskFromLegacyConfig(int, boolean)
    {
        int i0, i1;
        boolean z0;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 12: goto label2;
            case 16: goto label1;
            case 48: goto label3;
            default: goto label4;
        };

     label1:
        i1 = 16;

        goto label5;

     label2:
        i1 = 12;

        goto label5;

     label3:
        i1 = i0;

        goto label5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r1;

     label5:
        if z0 != 0 goto label7;

        if i0 == 2 goto label6;

        if i0 != 3 goto label7;

     label6:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported deprecated configuration.");

        throw $r0;

     label7:
        return i1;
    }

    private void audioParamCheck(int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, i2, $i3;
        java.lang.IllegalArgumentException $r1, $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < 0 goto label1;

        $i3 = staticinvoke <android.media.MediaRecorder: int getAudioSourceMax()>();

        if i0 <= $i3 goto label2;

        if i0 == 1999 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio source.");

        throw $r1;

     label2:
        r0.<android.media.AudioRecord: int mRecordSource> = i0;

        if i1 < 4000 goto label3;

        if i1 <= 48000 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label4:
        r0.<android.media.AudioRecord: int mSampleRate> = i1;

        tableswitch(i2)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label6;
            default: goto label7;
        };

     label5:
        r0.<android.media.AudioRecord: int mAudioFormat> = 2;

        goto label8;

     label6:
        r0.<android.media.AudioRecord: int mAudioFormat> = i2;

        goto label8;

     label7:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported sample encoding. Should be ENCODING_PCM_8BIT or ENCODING_PCM_16BIT.");

        throw $r7;

     label8:
        return;
    }

    private void audioBuffSizeCheck(int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i3 = r0.<android.media.AudioRecord: int mChannelCount>;

        $i2 = r0.<android.media.AudioRecord: int mAudioFormat>;

        $i4 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i2);

        i1 = $i3 * $i4;

        $i5 = i0 % i1;

        if $i5 != 0 goto label1;

        if i0 >= 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio buffer size.");

        throw $r1;

     label2:
        r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = i0;

        return;
    }

    public void release()
    {
        android.media.AudioRecord r0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.AudioRecord;

     label1:
        virtualinvoke r0.<android.media.AudioRecord: void stop()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        specialinvoke r0.<android.media.AudioRecord: void native_release()>();

        r0.<android.media.AudioRecord: int mState> = 0;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void finalize()
    {
        android.media.AudioRecord r0;

        r0 := @this: android.media.AudioRecord;

        virtualinvoke r0.<android.media.AudioRecord: void release()>();

        return;
    }

    public int getSampleRate()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mSampleRate>;

        return $i0;
    }

    public int getAudioSource()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mRecordSource>;

        return $i0;
    }

    public int getAudioFormat()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mAudioFormat>;

        return $i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mChannelMask>;

        return $i0;
    }

    public int getChannelCount()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mChannelCount>;

        return $i0;
    }

    public int getState()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        return $i0;
    }

    public int getRecordingState()
    {
        android.media.AudioRecord r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $r3 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<android.media.AudioRecord: int mRecordingState>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke r0.<android.media.AudioRecord: int native_get_marker_pos()>();

        return $i0;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke r0.<android.media.AudioRecord: int native_get_pos_update_period()>();

        return $i0;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int i0, i1, i2, i3;
        byte b4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        lookupswitch(i1)
        {
            case 0: goto label3;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 12: goto label2;
            case 16: goto label1;
            case 48: goto label2;
            default: goto label3;
        };

     label1:
        b4 = 1;

        goto label4;

     label2:
        b4 = 2;

        goto label4;

     label3:
        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label4:
        if i2 == 2 goto label5;

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>("getMinBufferSize(): Invalid audio format.");

        return -2;

     label5:
        i3 = staticinvoke <android.media.AudioRecord: int native_get_min_buff_size(int,int,int)>(i0, b4, i2);

        if i3 != 0 goto label6;

        return -2;

     label6:
        if i3 != -1 goto label7;

        return -1;

     label7:
        return i3;
    }

    public int getAudioSessionId()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mSessionId>;

        return $i0;
    }

    public void startRecording() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording() called on an uninitialized AudioRecord.");

        throw $r4;

     label1:
        $r3 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $i1 = specialinvoke r0.<android.media.AudioRecord: int native_start(int,int)>(0, 0);

        if $i1 != 0 goto label3;

        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(1);

        r0.<android.media.AudioRecord: int mRecordingState> = 3;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void startRecording(android.media.MediaSyncEvent) throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        android.media.MediaSyncEvent r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.MediaSyncEvent;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 == 1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording() called on an uninitialized AudioRecord.");

        throw $r5;

     label1:
        $r4 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $i1 = virtualinvoke r1.<android.media.MediaSyncEvent: int getType()>();

        $i2 = virtualinvoke r1.<android.media.MediaSyncEvent: int getAudioSessionId()>();

        $i3 = specialinvoke r0.<android.media.AudioRecord: int native_start(int,int)>($i1, $i2);

        if $i3 != 0 goto label3;

        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(1);

        r0.<android.media.AudioRecord: int mRecordingState> = 3;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on an uninitialized AudioRecord.");

        throw $r4;

     label1:
        $r3 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(0);

        specialinvoke r0.<android.media.AudioRecord: void native_stop()>();

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void handleFullVolumeRec(boolean)
    {
        android.media.AudioRecord r0;
        boolean z0, $z1;
        android.os.IBinder r1, $r4;
        android.media.IAudioService r2;
        android.os.RemoteException r3, $r5;

        r0 := @this: android.media.AudioRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume>;

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>(r1);

     label2:
        $r4 = r0.<android.media.AudioRecord: android.os.IBinder mICallBack>;

        interfaceinvoke r2.<android.media.IAudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>(z0, $r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("android.media.AudioRecord", "Error talking to AudioService when handling full submix volume", r3);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int read(byte[], int, int)
    {
        android.media.AudioRecord r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<android.media.AudioRecord: int mState>;

        if $i2 == 1 goto label1;

        return -3;

     label1:
        if r1 == null goto label2;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i3 = i0 + i1;

        if $i3 < 0 goto label2;

        $i5 = i0 + i1;

        $i4 = lengthof r1;

        if $i5 <= $i4 goto label3;

     label2:
        return -2;

     label3:
        $i6 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_byte_array(byte[],int,int)>(r1, i0, i1);

        return $i6;
    }

    public int read(short[], int, int)
    {
        android.media.AudioRecord r0;
        short[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<android.media.AudioRecord: int mState>;

        if $i2 == 1 goto label1;

        return -3;

     label1:
        if r1 == null goto label2;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i3 = i0 + i1;

        if $i3 < 0 goto label2;

        $i5 = i0 + i1;

        $i4 = lengthof r1;

        if $i5 <= $i4 goto label3;

     label2:
        return -2;

     label3:
        $i6 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_short_array(short[],int,int)>(r1, i0, i1);

        return $i6;
    }

    public int read(java.nio.ByteBuffer, int)
    {
        android.media.AudioRecord r0;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $i1 = r0.<android.media.AudioRecord: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        if r1 == null goto label2;

        if i0 >= 0 goto label3;

     label2:
        return -2;

     label3:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int)>(r1, i0);

        return $i2;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener r1;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        virtualinvoke r0.<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener r1;
        android.os.Handler r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r10;
        android.media.AudioRecord$NativeEventHandler $r6, $r8;
        android.os.Looper $r7, $r9;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        r2 := @parameter1: android.os.Handler;

        $r5 = r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = r1;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $r8 = new android.media.AudioRecord$NativeEventHandler;

        $r9 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r8.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>(r0, r0, $r9);

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = $r8;

        goto label4;

     label2:
        $r6 = new android.media.AudioRecord$NativeEventHandler;

        $r7 = r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper>;

        specialinvoke $r6.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>(r0, r0, $r7);

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = $r6;

        goto label4;

     label3:
        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioRecord: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_set_marker_pos(int)>(i0);

        return $i2;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioRecord: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_set_pos_update_period(int)>(i0);

        return $i2;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        java.lang.Object r0, r1, $r5;
        int i0, i1, i2;
        android.media.AudioRecord r2;
        android.os.Message r3;
        java.lang.ref.WeakReference $r4;
        android.media.AudioRecord$NativeEventHandler $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $r4 = (java.lang.ref.WeakReference) r0;

        $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.AudioRecord) $r5;

        if r2 != null goto label1;

        return;

     label1:
        $r6 = r2.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        if $r6 == null goto label2;

        $r7 = r2.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        r3 = virtualinvoke $r7.<android.media.AudioRecord$NativeEventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r1);

        $r8 = r2.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        virtualinvoke $r8.<android.media.AudioRecord$NativeEventHandler: boolean sendMessage(android.os.Message)>(r3);

     label2:
        return;
    }

    private final native int native_setup(java.lang.Object, java.lang.Object, int, int, int, int, int[]);

    private final native void native_finalize();

    private final native void native_release();

    private final native int native_start(int, int);

    private final native void native_stop();

    private final native int native_read_in_byte_array(byte[], int, int);

    private final native int native_read_in_short_array(short[], int, int);

    private final native int native_read_in_direct_buffer(java.lang.Object, int);

    private final native int native_set_marker_pos(int);

    private final native int native_get_marker_pos();

    private final native int native_set_pos_update_period(int);

    private final native int native_get_pos_update_period();

    private static final native int native_get_min_buff_size(int, int, int);

    private static void logd(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("android.media.AudioRecord", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", r0);

        return;
    }

    static java.lang.Object access$000(android.media.AudioRecord)
    {
        android.media.AudioRecord r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        return $r1;
    }

    static android.media.AudioRecord$OnRecordPositionUpdateListener access$100(android.media.AudioRecord)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener $r1;

        r0 := @parameter0: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener>;

        return $r1;
    }

    static void access$200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>(r0);

        return;
    }

    public static void <clinit>()
    {
        <android.media.AudioRecord: java.lang.String SUBMIX_FIXED_VOLUME> = "fixedVolume";

        <android.media.AudioRecord: java.lang.String TAG> = "android.media.AudioRecord";

        <android.media.AudioRecord: int NATIVE_EVENT_NEW_POS> = 3;

        <android.media.AudioRecord: int NATIVE_EVENT_MARKER> = 2;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDSOURCE> = -19;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT> = -18;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELMASK> = -17;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT> = -16;

        <android.media.AudioRecord: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioRecord: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioRecord: int ERROR> = -1;

        <android.media.AudioRecord: int SUCCESS> = 0;

        <android.media.AudioRecord: int RECORDSTATE_RECORDING> = 3;

        <android.media.AudioRecord: int RECORDSTATE_STOPPED> = 1;

        <android.media.AudioRecord: int STATE_INITIALIZED> = 1;

        <android.media.AudioRecord: int STATE_UNINITIALIZED> = 0;

        return;
    }
}
