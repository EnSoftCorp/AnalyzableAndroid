class android.graphics.drawable.VectorDrawable$VPath extends java.lang.Object
{
    protected android.util.PathParser$PathDataNode[] mNodes;
    java.lang.String mPathName;
    int mChangingConfigurations;

    public void <init>()
    {
        android.graphics.drawable.VectorDrawable$VPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes> = null;

        return;
    }

    public void <init>(android.graphics.drawable.VectorDrawable$VPath)
    {
        android.graphics.drawable.VectorDrawable$VPath r0, r1;
        java.lang.String $r2;
        int $i0;
        android.util.PathParser$PathDataNode[] $r3, $r4;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        r1 := @parameter0: android.graphics.drawable.VectorDrawable$VPath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes> = null;

        $r2 = r1.<android.graphics.drawable.VectorDrawable$VPath: java.lang.String mPathName>;

        r0.<android.graphics.drawable.VectorDrawable$VPath: java.lang.String mPathName> = $r2;

        $i0 = r1.<android.graphics.drawable.VectorDrawable$VPath: int mChangingConfigurations>;

        r0.<android.graphics.drawable.VectorDrawable$VPath: int mChangingConfigurations> = $i0;

        $r3 = r1.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        $r4 = staticinvoke <android.util.PathParser: android.util.PathParser$PathDataNode[] deepCopyNodes(android.util.PathParser$PathDataNode[])>($r3);

        r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes> = $r4;

        return;
    }

    public void toPath(android.graphics.Path)
    {
        android.graphics.drawable.VectorDrawable$VPath r0;
        android.graphics.Path r1;
        android.util.PathParser$PathDataNode[] $r2, $r3;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        r1 := @parameter0: android.graphics.Path;

        virtualinvoke r1.<android.graphics.Path: void reset()>();

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        if $r2 == null goto label1;

        $r3 = r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        staticinvoke <android.util.PathParser$PathDataNode: void nodesToPath(android.util.PathParser$PathDataNode[],android.graphics.Path)>($r3, r1);

     label1:
        return;
    }

    public java.lang.String getPathName()
    {
        android.graphics.drawable.VectorDrawable$VPath r0;
        java.lang.String $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VPath: java.lang.String mPathName>;

        return $r1;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.VectorDrawable$VPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        return 0;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.VectorDrawable$VPath r0;
        android.content.res.Resources$Theme r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        r1 := @parameter0: android.content.res.Resources$Theme;

        return;
    }

    public boolean isClipPath()
    {
        android.graphics.drawable.VectorDrawable$VPath r0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        return 0;
    }

    public android.util.PathParser$PathDataNode[] getPathData()
    {
        android.graphics.drawable.VectorDrawable$VPath r0;
        android.util.PathParser$PathDataNode[] $r1;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        $r1 = r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        return $r1;
    }

    public void setPathData(android.util.PathParser$PathDataNode[])
    {
        android.graphics.drawable.VectorDrawable$VPath r0;
        android.util.PathParser$PathDataNode[] r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: android.graphics.drawable.VectorDrawable$VPath;

        r1 := @parameter0: android.util.PathParser$PathDataNode[];

        $r2 = r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        $z0 = staticinvoke <android.util.PathParser: boolean canMorph(android.util.PathParser$PathDataNode[],android.util.PathParser$PathDataNode[])>($r2, r1);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <android.util.PathParser: android.util.PathParser$PathDataNode[] deepCopyNodes(android.util.PathParser$PathDataNode[])>(r1);

        r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes> = $r4;

        goto label2;

     label1:
        $r3 = r0.<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathDataNode[] mNodes>;

        staticinvoke <android.util.PathParser: void updateNodes(android.util.PathParser$PathDataNode[],android.util.PathParser$PathDataNode[])>($r3, r1);

     label2:
        return;
    }
}
