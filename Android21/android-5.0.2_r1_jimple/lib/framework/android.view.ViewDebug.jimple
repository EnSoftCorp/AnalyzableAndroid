public class android.view.ViewDebug extends java.lang.Object
{
    public static final boolean TRACE_HIERARCHY;
    public static final boolean TRACE_RECYCLER;
    public static final boolean DEBUG_DRAG;
    private static java.util.HashMap mCapturedViewMethodsForClasses;
    private static java.util.HashMap mCapturedViewFieldsForClasses;
    private static final int CAPTURE_TIMEOUT;
    private static final java.lang.String REMOTE_COMMAND_CAPTURE;
    private static final java.lang.String REMOTE_COMMAND_DUMP;
    private static final java.lang.String REMOTE_COMMAND_DUMP_THEME;
    private static final java.lang.String REMOTE_COMMAND_INVALIDATE;
    private static final java.lang.String REMOTE_COMMAND_REQUEST_LAYOUT;
    private static final java.lang.String REMOTE_PROFILE;
    private static final java.lang.String REMOTE_COMMAND_CAPTURE_LAYERS;
    private static final java.lang.String REMOTE_COMMAND_OUTPUT_DISPLAYLIST;
    private static java.util.HashMap sFieldsForClasses;
    private static java.util.HashMap sMethodsForClasses;
    private static java.util.HashMap sAnnotations;

    public void <init>()
    {
        android.view.ViewDebug r0;

        r0 := @this: android.view.ViewDebug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long getViewInstanceCount()
    {
        long $l0;

        $l0 = staticinvoke <android.os.Debug: long countInstancesOfClass(java.lang.Class)>(class "android/view/View");

        return $l0;
    }

    public static long getViewRootImplCount()
    {
        long $l0;

        $l0 = staticinvoke <android.os.Debug: long countInstancesOfClass(java.lang.Class)>(class "android/view/ViewRootImpl");

        return $l0;
    }

    public static transient void trace(android.view.View, android.view.ViewDebug$RecyclerTraceType, int[])
    {
        android.view.View r0;
        android.view.ViewDebug$RecyclerTraceType r1;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewDebug$RecyclerTraceType;

        r2 := @parameter2: int[];

        return;
    }

    public static void startRecyclerTracing(java.lang.String, android.view.View)
    {
        java.lang.String r0;
        android.view.View r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.View;

        return;
    }

    public static void stopRecyclerTracing()
    {
        return;
    }

    public static void trace(android.view.View, android.view.ViewDebug$HierarchyTraceType)
    {
        android.view.View r0;
        android.view.ViewDebug$HierarchyTraceType r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewDebug$HierarchyTraceType;

        return;
    }

    public static void startHierarchyTracing(java.lang.String, android.view.View)
    {
        java.lang.String r0;
        android.view.View r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.View;

        return;
    }

    public static void stopHierarchyTracing()
    {
        return;
    }

    static void dispatchCommand(android.view.View, java.lang.String, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        android.view.View r0, r19;
        java.lang.String r1, r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.io.OutputStream r3;
        java.lang.String[] r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.io.DataOutputStream $r18;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.io.OutputStream;

        r19 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        $r5 = "DUMP";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <android.view.ViewDebug: void dump(android.view.View,boolean,boolean,java.io.OutputStream)>(r19, 0, 1, r3);

        goto label8;

     label1:
        $r6 = "DUMP_THEME";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        staticinvoke <android.view.ViewDebug: void dumpTheme(android.view.View,java.io.OutputStream)>(r19, r3);

        goto label8;

     label2:
        $r7 = "CAPTURE_LAYERS";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $r18 = new java.io.DataOutputStream;

        specialinvoke $r18.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r3);

        staticinvoke <android.view.ViewDebug: void captureLayers(android.view.View,java.io.DataOutputStream)>(r19, $r18);

        goto label8;

     label3:
        r4 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r8 = "CAPTURE";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z3 == 0 goto label4;

        $r16 = r4[0];

        staticinvoke <android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,java.lang.String)>(r19, r3, $r16);

        goto label8;

     label4:
        $r9 = "OUTPUT_DISPLAYLIST";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z4 == 0 goto label5;

        $r17 = r4[0];

        staticinvoke <android.view.ViewDebug: void outputDisplayList(android.view.View,java.lang.String)>(r19, $r17);

        goto label8;

     label5:
        $r10 = "INVALIDATE";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z5 == 0 goto label6;

        $r14 = r4[0];

        staticinvoke <android.view.ViewDebug: void invalidate(android.view.View,java.lang.String)>(r19, $r14);

        goto label8;

     label6:
        $r11 = "REQUEST_LAYOUT";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z6 == 0 goto label7;

        $r15 = r4[0];

        staticinvoke <android.view.ViewDebug: void requestLayout(android.view.View,java.lang.String)>(r19, $r15);

        goto label8;

     label7:
        $r12 = "PROFILE";

        $z7 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z7 == 0 goto label8;

        $r13 = r4[0];

        staticinvoke <android.view.ViewDebug: void profile(android.view.View,java.io.OutputStream,java.lang.String)>(r19, r3, $r13);

     label8:
        return;
    }

    public static android.view.View findView(android.view.View, java.lang.String)
    {
        android.view.View r0, r4, $r6, $r7, $r9;
        java.lang.String r1, r3, $r8;
        java.lang.String[] r2;
        int i0, $i1, i3;
        android.content.res.Resources $r5;
        long $l2;
        boolean $z0;
        android.view.ViewGroup $r10;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(64);

        if $i1 == -1 goto label2;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        r3 = r2[0];

        $r8 = r2[1];

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r8, 16);

        i0 = (int) $l2;

        r4 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        $z0 = r4 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r10 = (android.view.ViewGroup) r4;

        $r9 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r10, r3, i0);

        return $r9;

     label1:
        goto label3;

     label2:
        $r5 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        i3 = virtualinvoke $r5.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

        $r6 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        $r7 = virtualinvoke $r6.<android.view.View: android.view.View findViewById(int)>(i3);

        return $r7;

     label3:
        return null;
    }

    private static void invalidate(android.view.View, java.lang.String)
    {
        android.view.View r0, r2;
        java.lang.String r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r1);

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View: void postInvalidate()>();

     label1:
        return;
    }

    private static void requestLayout(android.view.View, java.lang.String)
    {
        android.view.View r0, r2;
        java.lang.String r1;
        android.view.ViewDebug$1 $r3;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r1);

        if r2 == null goto label1;

        $r3 = new android.view.ViewDebug$1;

        specialinvoke $r3.<android.view.ViewDebug$1: void <init>(android.view.View)>(r2);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    private static void profile(android.view.View, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        android.view.View r0, r3;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.io.BufferedWriter r4, $r7;
        java.lang.Exception r5, $r9;
        java.lang.Throwable r6, $r10;
        java.io.OutputStreamWriter $r8;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r2);

        r4 = null;

     label01:
        $r7 = new java.io.BufferedWriter;

        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r8, 32768);

        r4 = $r7;

        if r3 == null goto label02;

        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter)>(r3, r4);

        goto label03;

     label02:
        virtualinvoke r4.<java.io.BufferedWriter: void write(java.lang.String)>("-1 -1 -1");

        virtualinvoke r4.<java.io.BufferedWriter: void newLine()>();

     label03:
        virtualinvoke r4.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

        virtualinvoke r4.<java.io.BufferedWriter: void newLine()>();

     label04:
        if r4 == null goto label10;

        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

        goto label10;

     label05:
        $r9 := @caughtexception;

        r5 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem profiling the view:", r5);

     label06:
        if r4 == null goto label10;

        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

        goto label10;

     label07:
        $r10 := @caughtexception;

        r6 = $r10;

     label08:
        if r4 == null goto label09;

        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Exception from label01 to label04 with label05;
        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public static void profileViewAndChildren(android.view.View, java.io.BufferedWriter) throws java.io.IOException
    {
        android.view.View r0;
        java.io.BufferedWriter r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.BufferedWriter;

        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter,boolean)>(r0, r1, 1);

        return;
    }

    private static void profileViewAndChildren(android.view.View, java.io.BufferedWriter, boolean) throws java.io.IOException
    {
        android.view.View r0, $r9;
        java.io.BufferedWriter r1;
        boolean z0, $z1, $z2;
        long l0, l1, l2, $l5, $l6, $l7;
        android.view.ViewGroup r2;
        int i3, i4, $i8, $i9, $i10, $i11, $i12, $i13;
        android.view.ViewDebug$2 $r3;
        android.view.ViewDebug$3 $r4;
        android.view.ViewDebug$4 $r5;
        java.lang.String $r6, $r7, $r8;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.BufferedWriter;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label01;

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i11 & 2048;

        if $i13 == 0 goto label02;

     label01:
        $r3 = new android.view.ViewDebug$2;

        specialinvoke $r3.<android.view.ViewDebug$2: void <init>(android.view.View)>(r0);

        $l5 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r0, $r3);

        goto label03;

     label02:
        $l5 = 0L;

     label03:
        l0 = $l5;

        if z0 != 0 goto label04;

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i9 & 8192;

        if $i12 == 0 goto label05;

     label04:
        $r4 = new android.view.ViewDebug$3;

        specialinvoke $r4.<android.view.ViewDebug$3: void <init>(android.view.View)>(r0);

        $l6 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r0, $r4);

        goto label06;

     label05:
        $l6 = 0L;

     label06:
        l1 = $l6;

        if z0 != 0 goto label07;

        $z2 = virtualinvoke r0.<android.view.View: boolean willNotDraw()>();

        if $z2 == 0 goto label07;

        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i8 & 32;

        if $i10 == 0 goto label08;

     label07:
        $r5 = new android.view.ViewDebug$4;

        specialinvoke $r5.<android.view.ViewDebug$4: void <init>(android.view.View)>(r0);

        $l7 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r0, $r5);

        goto label09;

     label08:
        $l7 = 0L;

     label09:
        l2 = $l7;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r8);

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label11;

        r2 = (android.view.ViewGroup) r0;

        i3 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        i4 = 0;

     label10:
        if i4 >= i3 goto label11;

        $r9 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter,boolean)>($r9, r1, 0);

        i4 = i4 + 1;

        goto label10;

     label11:
        return;
    }

    private static long profileViewOperation(android.view.View, android.view.ViewDebug$ViewOperation)
    {
        android.view.View r0;
        android.view.ViewDebug$ViewOperation r1;
        java.util.concurrent.CountDownLatch r2, $r5;
        long[] r3;
        android.view.ViewDebug$5 $r6;
        java.util.concurrent.TimeUnit $r7;
        boolean $z1;
        long $l0;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15;
        java.lang.String $r11, $r16;
        java.lang.InterruptedException $r12;
        java.lang.Thread $r17;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewDebug$ViewOperation;

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = $r5;

        r3 = newarray (long)[1];

        $r6 = new android.view.ViewDebug$5;

        specialinvoke $r6.<android.view.ViewDebug$5: void <init>(android.view.ViewDebug$ViewOperation,long[],java.util.concurrent.CountDownLatch)>(r1, r3, r2);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r6);

     label1:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z1 = virtualinvoke r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(4000L, $r7);

        if $z1 != 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the profiling of the view ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r11);

     label2:
        return -1L;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the profiling of the view ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r16);

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r17.<java.lang.Thread: void interrupt()>();

        return -1L;

     label5:
        $l0 = r3[0];

        return $l0;

        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    public static void captureLayers(android.view.View, java.io.DataOutputStream) throws java.io.IOException
    {
        android.view.View r0;
        java.io.DataOutputStream r1;
        android.graphics.Rect r2, $r5;
        java.lang.Throwable r4, $r10;
        android.view.View$AttachInfo $r6, $r7;
        android.view.IWindow $r8;
        android.view.IWindowSession $r9;
        int $i0, $i1;
        android.os.RemoteException $r11;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.DataOutputStream;

     label1:
        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r2 = $r5;

     label2:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r6.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r9.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r8, r2);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        $i0 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i1 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>(r0, r1, 1);

        virtualinvoke r1.<java.io.DataOutputStream: void write(int)>(2);

     label6:
        virtualinvoke r1.<java.io.DataOutputStream: void close()>();

        goto label9;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

     label8:
        virtualinvoke r1.<java.io.DataOutputStream: void close()>();

        throw r4;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static void captureViewLayer(android.view.View, java.io.DataOutputStream, boolean) throws java.io.IOException
    {
        android.view.View r0, $r8;
        java.io.DataOutputStream r1;
        boolean z0, z1, $z2, $z4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, i13;
        java.lang.String r2;
        int[] r3;
        android.graphics.Bitmap r4;
        java.io.ByteArrayOutputStream r5, $r10;
        android.view.ViewOverlay $r6, $r7;
        java.lang.Class $r9;
        android.graphics.Bitmap$CompressFormat $r11;
        byte $b10;
        android.content.Context $r12;
        java.lang.Object $r13;
        android.view.ViewGroup r14;
        android.view.ViewOverlay$OverlayViewGroup r15;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.DataOutputStream;

        z0 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label01;

        if z0 == 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z1 = $z4;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 128;

        if $i3 == 128 goto label07;

        i0 = virtualinvoke r0.<android.view.View: int getId()>();

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        if i0 == -1 goto label03;

        $r12 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r13 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>($r12, i0);

        r2 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

     label03:
        virtualinvoke r1.<java.io.DataOutputStream: void write(int)>(1);

        virtualinvoke r1.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r2);

        if z1 == 0 goto label04;

        $b10 = 1;

        goto label05;

     label04:
        $b10 = 0;

     label05:
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>($b10);

        r3 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r3);

        $i5 = r3[0];

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i5);

        $i4 = r3[1];

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i4);

        virtualinvoke r1.<java.io.DataOutputStream: void flush()>();

        r4 = staticinvoke <android.view.ViewDebug: android.graphics.Bitmap performViewCapture(android.view.View,boolean)>(r0, 1);

        if r4 == null goto label06;

        $r10 = new java.io.ByteArrayOutputStream;

        $i7 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i6 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $i9 = $i7 * $i6;

        $i8 = $i9 * 2;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>(int)>($i8);

        r5 = $r10;

        $r11 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r4.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r11, 100, r5);

        $i11 = virtualinvoke r5.<java.io.ByteArrayOutputStream: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i11);

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

     label06:
        virtualinvoke r1.<java.io.DataOutputStream: void flush()>();

     label07:
        $z2 = r0 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label09;

        r14 = (android.view.ViewGroup) r0;

        i12 = virtualinvoke r14.<android.view.ViewGroup: int getChildCount()>();

        i13 = 0;

     label08:
        if i13 >= i12 goto label09;

        $r8 = virtualinvoke r14.<android.view.ViewGroup: android.view.View getChildAt(int)>(i13);

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>($r8, r1, z1);

        i13 = i13 + 1;

        goto label08;

     label09:
        $r6 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r6 == null goto label10;

        $r7 = virtualinvoke r0.<android.view.View: android.view.ViewOverlay getOverlay()>();

        r15 = $r7.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>(r15, r1, z1);

     label10:
        return;
    }

    private static void outputDisplayList(android.view.View, java.lang.String) throws java.io.IOException
    {
        android.view.View r0, r2;
        java.lang.String r1;
        android.view.ViewRootImpl $r3;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r1);

        $r3 = virtualinvoke r2.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r3.<android.view.ViewRootImpl: void outputDisplayList(android.view.View)>(r2);

        return;
    }

    public static void outputDisplayList(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        android.view.ViewRootImpl $r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void outputDisplayList(android.view.View)>(r1);

        return;
    }

    private static void capture(android.view.View, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        android.view.View r0, r3;
        java.io.OutputStream r1;
        java.lang.String r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r2);

        staticinvoke <android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,android.view.View)>(r0, r1, r3);

        return;
    }

    public static void capture(android.view.View, java.io.OutputStream, android.view.View) throws java.io.IOException
    {
        android.view.View r0, r2;
        java.io.OutputStream r1;
        android.graphics.Bitmap r3;
        java.io.BufferedOutputStream r4, $r6;
        java.lang.Throwable r5, $r11;
        android.graphics.Bitmap$CompressFormat $r7;
        android.content.res.Resources $r8;
        android.util.DisplayMetrics $r9;
        android.graphics.Bitmap$Config $r10;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: android.view.View;

        r3 = staticinvoke <android.view.ViewDebug: android.graphics.Bitmap performViewCapture(android.view.View,boolean)>(r2, 0);

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "Failed to create capture bitmap!");

        $r8 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r10 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>($r9, 1, 1, $r10);

     label1:
        r4 = null;

     label2:
        $r6 = new java.io.BufferedOutputStream;

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r1, 32768);

        r4 = $r6;

        $r7 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r3.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r7, 100, r4);

        virtualinvoke r4.<java.io.BufferedOutputStream: void flush()>();

     label3:
        if r4 == null goto label4;

        virtualinvoke r4.<java.io.BufferedOutputStream: void close()>();

     label4:
        virtualinvoke r3.<android.graphics.Bitmap: void recycle()>();

        goto label8;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

     label6:
        if r4 == null goto label7;

        virtualinvoke r4.<java.io.BufferedOutputStream: void close()>();

     label7:
        virtualinvoke r3.<android.graphics.Bitmap: void recycle()>();

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static android.graphics.Bitmap performViewCapture(android.view.View, boolean)
    {
        android.view.View r0;
        boolean z0;
        java.util.concurrent.CountDownLatch r1, $r4;
        android.graphics.Bitmap[] r2;
        android.view.ViewDebug$6 $r5;
        java.util.concurrent.TimeUnit $r6;
        android.graphics.Bitmap $r7;
        java.lang.InterruptedException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.Thread $r13;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        if r0 == null goto label4;

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r1 = $r4;

        r2 = newarray (android.graphics.Bitmap)[1];

        $r5 = new android.view.ViewDebug$6;

        specialinvoke $r5.<android.view.ViewDebug$6: void <init>(android.graphics.Bitmap[],android.view.View,boolean,java.util.concurrent.CountDownLatch)>(r2, r0, z0, r1);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r5);

     label1:
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(4000L, $r6);

        $r7 = r2[0];

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the capture of the view ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r12);

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

     label4:
        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void dump(android.view.View, boolean, boolean, java.io.OutputStream) throws java.io.IOException
    {
        android.view.View r0, r3;
        boolean z0, z1, $z2;
        java.io.OutputStream r1;
        java.io.BufferedWriter r2, $r6;
        android.view.ViewGroup r4;
        java.lang.Throwable r5, $r10;
        java.io.OutputStreamWriter $r7;
        android.content.Context $r8;
        java.lang.Exception $r9, r11;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: java.io.OutputStream;

        r2 = null;

     label1:
        $r6 = new java.io.BufferedWriter;

        $r7 = new java.io.OutputStreamWriter;

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r7, 32768);

        r2 = $r6;

        r3 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        $z2 = r3 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label2;

        r4 = (android.view.ViewGroup) r3;

        $r8 = virtualinvoke r4.<android.view.ViewGroup: android.content.Context getContext()>();

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchy(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>($r8, r4, r2, 0, z0, z1);

     label2:
        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

     label3:
        if r2 == null goto label9;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

        goto label9;

     label4:
        $r9 := @caughtexception;

        r11 = $r9;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem dumping the view:", r11);

     label5:
        if r2 == null goto label9;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

        goto label9;

     label6:
        $r10 := @caughtexception;

        r5 = $r10;

     label7:
        if r2 == null goto label8;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static void dumpTheme(android.view.View, java.io.OutputStream) throws java.io.IOException
    {
        android.view.View r0;
        java.io.OutputStream r1;
        java.io.BufferedWriter r2, $r5;
        java.lang.String[] r3;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r23;
        java.io.OutputStreamWriter $r6;
        android.content.Context $r7, $r9;
        android.content.res.Resources $r8;
        android.content.res.Resources$Theme $r10;
        java.lang.String $r11, $r14, $r15, $r19, $r20;
        java.lang.StringBuilder $r12, $r13, $r16, $r17, $r18, $r21;
        java.lang.Exception $r22, r24;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        r2 = null;

     label01:
        $r5 = new java.io.BufferedWriter;

        $r6 = new java.io.OutputStreamWriter;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r6, 32768);

        r2 = $r5;

        $r7 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        r3 = staticinvoke <android.view.ViewDebug: java.lang.String[] getStyleAttributesDump(android.content.res.Resources,android.content.res.Resources$Theme)>($r8, $r10);

        if r3 == null goto label04;

        i0 = 0;

     label02:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label04;

        $r11 = r3[i0];

        if $r11 == null goto label03;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = r3[i0];

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r15);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $i2 = i0 + 1;

        $r19 = r3[$i2];

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r20);

     label03:
        i0 = i0 + 2;

        goto label02;

     label04:
        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

     label05:
        if r2 == null goto label11;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

        goto label11;

     label06:
        $r22 := @caughtexception;

        r24 = $r22;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem dumping View Theme:", r24);

     label07:
        if r2 == null goto label11;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

        goto label11;

     label08:
        $r23 := @caughtexception;

        r4 = $r23;

     label09:
        if r2 == null goto label10;

        virtualinvoke r2.<java.io.BufferedWriter: void close()>();

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Exception from label01 to label05 with label06;
        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private static java.lang.String[] getStyleAttributesDump(android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        android.util.TypedValue r2, $r8;
        java.lang.String r3, $r9, $r11, $r13;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r4, r6;
        java.lang.String[] r5;
        boolean $z0;
        java.lang.CharSequence $r10;
        android.content.res.Resources$NotFoundException $r12;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        $r8 = new android.util.TypedValue;

        specialinvoke $r8.<android.util.TypedValue: void <init>()>();

        r2 = $r8;

        r3 = "null";

        i0 = 0;

        r4 = virtualinvoke r1.<android.content.res.Resources$Theme: int[] getAllAttributes()>();

        $i4 = lengthof r4;

        $i5 = $i4 * 2;

        r5 = newarray (java.lang.String)[$i5];

        r6 = r4;

        i1 = lengthof r6;

        i2 = 0;

     label1:
        if i2 >= i1 goto label8;

        i3 = r6[i2];

     label2:
        $r9 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>(i3);

        r5[i0] = $r9;

        $i6 = i0 + 1;

        $z0 = virtualinvoke r1.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(i3, r2, 1);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r2.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        $r13 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.String toString()>();

        goto label4;

     label3:
        $r13 = r3;

     label4:
        r5[$i6] = $r13;

        i0 = i0 + 2;

        $i7 = r2.<android.util.TypedValue: int type>;

        if $i7 != 1 goto label5;

        $i8 = i0 - 1;

        $i9 = r2.<android.util.TypedValue: int resourceId>;

        $r11 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>($i9);

        r5[$i8] = $r11;

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return r5;

        catch android.content.res.Resources$NotFoundException from label2 to label5 with label6;
    }

    private static android.view.View findView(android.view.ViewGroup, java.lang.String, int)
    {
        android.view.ViewGroup r0, $r8;
        java.lang.String r1;
        int i0, i1, i2;
        android.view.View r2, r3, r9, r10;
        boolean $z0, $z1, $z2, $z3;
        android.view.ViewOverlay $r4, $r7;
        android.view.ViewDebug$HierarchyHandler $r5;
        android.view.ViewOverlay$OverlayViewGroup $r6;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.view.ViewDebug: boolean isRequestedView(android.view.View,java.lang.String,int)>(r0, r1, i0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label8;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        $r8 = (android.view.ViewGroup) r2;

        r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r8, r1, i0);

        if r3 == null goto label3;

        return r3;

     label3:
        goto label5;

     label4:
        $z2 = staticinvoke <android.view.ViewDebug: boolean isRequestedView(android.view.View,java.lang.String,int)>(r2, r1, i0);

        if $z2 == 0 goto label5;

        return r2;

     label5:
        $r4 = r2.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r4 == null goto label6;

        $r7 = r2.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r6 = $r7.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        r9 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r6, r1, i0);

        if r9 == null goto label6;

        return r9;

     label6:
        $z3 = r2 instanceof android.view.ViewDebug$HierarchyHandler;

        if $z3 == 0 goto label7;

        $r5 = (android.view.ViewDebug$HierarchyHandler) r2;

        r10 = interfaceinvoke $r5.<android.view.ViewDebug$HierarchyHandler: android.view.View findHierarchyView(java.lang.String,int)>(r1, i0);

        if r10 == null goto label7;

        return r10;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return null;
    }

    private static boolean isRequestedView(android.view.View, java.lang.String, int)
    {
        android.view.View r0;
        java.lang.String r1, r2;
        int i0, $i1;
        java.lang.Class $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        if $i1 != i0 goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ViewOverlay");

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.view.ViewOverlay$OverlayViewGroup");

        return $z2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z1;

     label2:
        return 0;
    }

    private static void dumpViewHierarchy(android.content.Context, android.view.ViewGroup, java.io.BufferedWriter, int, boolean, boolean)
    {
        android.content.Context r0;
        android.view.ViewGroup r1, $r8;
        java.io.BufferedWriter r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, $z2, $z3, $z4;
        android.view.View r3;
        android.view.ViewOverlay r4, $r7;
        android.view.ViewOverlay$OverlayViewGroup r5;
        android.view.ViewDebug$HierarchyHandler $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.view.ViewGroup;

        r2 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $z2 = staticinvoke <android.view.ViewDebug: boolean dumpView(android.content.Context,android.view.View,java.io.BufferedWriter,int,boolean)>(r0, r1, r2, i0, z1);

        if $z2 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        return;

     label2:
        i1 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label3:
        if i2 >= i1 goto label7;

        r3 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $z4 = r3 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label4;

        $r8 = (android.view.ViewGroup) r3;

        $i5 = i0 + 1;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchy(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r0, $r8, r2, $i5, z0, z1);

        goto label5;

     label4:
        $i4 = i0 + 1;

        staticinvoke <android.view.ViewDebug: boolean dumpView(android.content.Context,android.view.View,java.io.BufferedWriter,int,boolean)>(r0, r3, r2, $i4, z1);

     label5:
        $r7 = r3.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r7 == null goto label6;

        r4 = virtualinvoke r3.<android.view.View: android.view.ViewOverlay getOverlay()>();

        r5 = r4.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        $i6 = i0 + 2;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchy(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r0, r5, r2, $i6, z0, z1);

     label6:
        i2 = i2 + 1;

        goto label3;

     label7:
        $z3 = r1 instanceof android.view.ViewDebug$HierarchyHandler;

        if $z3 == 0 goto label8;

        $r6 = (android.view.ViewDebug$HierarchyHandler) r1;

        $i3 = i0 + 1;

        interfaceinvoke $r6.<android.view.ViewDebug$HierarchyHandler: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)>(r2, $i3);

     label8:
        return;
    }

    private static boolean dumpView(android.content.Context, android.view.View, java.io.BufferedWriter, int, boolean)
    {
        android.content.Context r0;
        android.view.View r1;
        java.io.BufferedWriter r2;
        int i0, i1, $i2;
        boolean z0, $z1;
        java.lang.Class $r3;
        java.lang.String $r4, r6;
        java.io.IOException $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        virtualinvoke r2.<java.io.BufferedWriter: void write(int)>(32);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("android.view.ViewOverlay$OverlayViewGroup");

        if $z1 == 0 goto label4;

        r6 = "ViewOverlay";

     label4:
        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>(r6);

        virtualinvoke r2.<java.io.BufferedWriter: void write(int)>(64);

        $i2 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.BufferedWriter: void write(int)>(32);

        if z0 == 0 goto label5;

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter)>(r0, r1, r2);

     label5:
        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "Error while dumping hierarchy tree");

        return 0;

     label8:
        return 1;

        catch java.io.IOException from label1 to label6 with label7;
    }

    private static java.lang.reflect.Field[] getExportedPropertyFields(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap r1, $r5, $r6, $r13, $r14, $r16;
        java.lang.reflect.Field[] r2, $r9, r17, r18;
        java.util.ArrayList r3, $r8;
        int i0, i1, $i2;
        java.lang.reflect.Field r4;
        java.lang.Object $r7;
        java.lang.Object[] $r10;
        boolean $z1;
        java.lang.annotation.Annotation $r12;

        r0 := @parameter0: java.lang.Class;

        $r5 = <android.view.ViewDebug: java.util.HashMap sFieldsForClasses>;

        if $r5 != null goto label1;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        <android.view.ViewDebug: java.util.HashMap sFieldsForClasses> = $r16;

     label1:
        $r6 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        if $r6 != null goto label2;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>(int)>(512);

        <android.view.ViewDebug: java.util.HashMap sAnnotations> = $r14;

     label2:
        r1 = <android.view.ViewDebug: java.util.HashMap sFieldsForClasses>;

        $r7 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.reflect.Field[]) $r7;

        if r2 == null goto label3;

        return r2;

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = $r8;

        r17 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r17;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r4 = r17[i1];

        $z1 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "android/view/ViewDebug$ExportedProperty");

        if $z1 == 0 goto label5;

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $r13 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        $r12 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/view/ViewDebug$ExportedProperty");

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r12);

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r9 = newarray (java.lang.reflect.Field)[$i2];

        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r18 = (java.lang.reflect.Field[]) $r10;

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r18);

        return r18;
    }

    private static java.lang.reflect.Method[] getExportedPropertyMethods(java.lang.Class)
    {
        java.lang.Class r0, $r13;
        java.util.HashMap r1, $r5, $r6, $r14, $r17, $r18;
        java.lang.reflect.Method[] r2, $r9, r19, r20;
        java.util.ArrayList r3, $r8;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Method r4;
        java.lang.Object $r7;
        java.lang.Object[] $r10;
        java.lang.Class[] $r12;
        boolean $z0;
        java.lang.annotation.Annotation $r16;

        r0 := @parameter0: java.lang.Class;

        $r5 = <android.view.ViewDebug: java.util.HashMap sMethodsForClasses>;

        if $r5 != null goto label1;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>(int)>(100);

        <android.view.ViewDebug: java.util.HashMap sMethodsForClasses> = $r17;

     label1:
        $r6 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        if $r6 != null goto label2;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>(int)>(512);

        <android.view.ViewDebug: java.util.HashMap sAnnotations> = $r18;

     label2:
        r1 = <android.view.ViewDebug: java.util.HashMap sMethodsForClasses>;

        $r7 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.reflect.Method[]) $r7;

        if r2 == null goto label3;

        return r2;

     label3:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = $r8;

        r19 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r19;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r4 = r19[i1];

        $r12 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r12;

        if $i3 != 0 goto label5;

        $z0 = virtualinvoke r4.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "android/view/ViewDebug$ExportedProperty");

        if $z0 == 0 goto label5;

        $r13 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r13 == class "java/lang/Void" goto label5;

        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $r14 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        $r16 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/view/ViewDebug$ExportedProperty");

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r16);

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r9 = newarray (java.lang.reflect.Method)[$i2];

        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r20 = (java.lang.reflect.Method[]) $r10;

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r20);

        return r20;
    }

    private static void dumpViewProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1;
        java.io.BufferedWriter r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)>(r0, r1, r2, "");

        return;
    }

    private static void dumpViewProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1;
        java.io.BufferedWriter r2;
        java.lang.String r3, $r8;
        java.lang.Class r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        r3 := @parameter3: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=4,null ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r8);

        return;

     label1:
        r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        staticinvoke <android.view.ViewDebug: void exportFields(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.Class,java.lang.String)>(r0, r1, r2, r4, r3);

        staticinvoke <android.view.ViewDebug: void exportMethods(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.Class,java.lang.String)>(r0, r1, r2, r4, r3);

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r4 != class "java/lang/Object" goto label2;

        return;
    }

    private static java.lang.Object callMethodOnAppropriateTheadBlocking(java.lang.reflect.Method, java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.util.concurrent.TimeoutException
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1, $r11, $r16;
        android.view.View r2;
        android.view.ViewDebug$7 r3, $r8;
        java.util.concurrent.FutureTask r4, $r9;
        android.os.Handler r5, $r12;
        java.util.concurrent.ExecutionException r6, $r19;
        java.lang.Throwable r7;
        boolean $z0, $z2, $z3;
        java.util.concurrent.TimeUnit $r10;
        java.lang.Object[] $r13;
        android.os.Looper $r14;
        java.lang.InterruptedException $r15;
        java.lang.RuntimeException $r17, $r21;
        java.util.concurrent.CancellationException $r18, r24;
        java.lang.reflect.InvocationTargetException $r20;
        java.lang.IllegalAccessException $r22;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        $z0 = r1 instanceof android.view.View;

        if $z0 != 0 goto label1;

        $r13 = (java.lang.Object[]) null;

        $r16 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r13);

        return $r16;

     label1:
        r2 = (android.view.View) r1;

        $r8 = new android.view.ViewDebug$7;

        specialinvoke $r8.<android.view.ViewDebug$7: void <init>(java.lang.reflect.Method,android.view.View)>(r0, r2);

        r3 = $r8;

        $r9 = new java.util.concurrent.FutureTask;

        specialinvoke $r9.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r3);

        r4 = $r9;

        r5 = virtualinvoke r2.<android.view.View: android.os.Handler getHandler()>();

        if r5 != null goto label2;

        $r12 = new android.os.Handler;

        $r14 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r12.<android.os.Handler: void <init>(android.os.Looper)>($r14);

        r5 = $r12;

     label2:
        virtualinvoke r5.<android.os.Handler: boolean post(java.lang.Runnable)>(r4);

     label3:
        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r11 = virtualinvoke r4.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(4000L, $r10);

     label4:
        return $r11;

     label5:
        $r19 := @caughtexception;

        r6 = $r19;

        r7 = virtualinvoke r6.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z3 = r7 instanceof java.lang.IllegalAccessException;

        if $z3 == 0 goto label6;

        $r22 = (java.lang.IllegalAccessException) r7;

        throw $r22;

     label6:
        $z2 = r7 instanceof java.lang.reflect.InvocationTargetException;

        if $z2 == 0 goto label7;

        $r20 = (java.lang.reflect.InvocationTargetException) r7;

        throw $r20;

     label7:
        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", r7);

        throw $r21;

     label8:
        $r15 := @caughtexception;

        goto label3;

     label9:
        $r18 := @caughtexception;

        r24 = $r18;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected cancellation exception", r24);

        throw $r17;

        catch java.util.concurrent.ExecutionException from label3 to label4 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label8;
        catch java.util.concurrent.CancellationException from label3 to label4 with label9;
    }

    private static java.lang.String formatIntToHexString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r2, $r3, $r5;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void exportMethods(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.Class, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1, r7, $r15;
        java.io.BufferedWriter r2;
        java.lang.Class r3, r8, $r16;
        java.lang.String r4, r10, r11, $r14, $r21, $r22, $r24, $r26, $r27, $r30, $r33, $r34, $r38, $r41, $r45, $r52, $r53, r63;
        java.lang.reflect.Method[] r5;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.reflect.Method r6;
        android.view.ViewDebug$ExportedProperty r9;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.ViewDebug$IntToString r12;
        java.util.HashMap $r13;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r23, $r25, $r29, $r31, $r32, $r35, $r36, $r39, $r40, $r42, $r46, $r47, $r48, $r49, $r50, $r51, $r54, $r56;
        java.lang.String[] $r28, r65;
        int[] $r37, r62;
        java.lang.Integer $r43, $r44, $r55;
        java.lang.reflect.InvocationTargetException $r57;
        java.lang.IllegalAccessException $r58;
        java.util.concurrent.TimeoutException $r59;
        android.view.ViewDebug$FlagToString[] r60;
        android.view.ViewDebug$IntToString[] r61;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: java.lang.String;

        r5 = staticinvoke <android.view.ViewDebug: java.lang.reflect.Method[] getExportedPropertyMethods(java.lang.Class)>(r3);

        i0 = lengthof r5;

        i1 = 0;

     label01:
        if i1 >= i0 goto label27;

        r6 = r5[i1];

     label02:
        r7 = staticinvoke <android.view.ViewDebug: java.lang.Object callMethodOnAppropriateTheadBlocking(java.lang.reflect.Method,java.lang.Object)>(r6, r1);

        r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r13 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        $r15 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r9 = (android.view.ViewDebug$ExportedProperty) $r15;

        $r14 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        $i6 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i6 == 0 goto label03;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r52 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        $r51 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label03:
        $r53 = "";

     label04:
        r10 = $r53;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        if r8 != $r16 goto label11;

        $z4 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean resolveId()>();

        if $z4 == 0 goto label05;

        if r0 == null goto label05;

        $r55 = (java.lang.Integer) r7;

        i2 = virtualinvoke $r55.<java.lang.Integer: int intValue()>();

        r7 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>(r0, i2);

        goto label21;

     label05:
        r60 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        $i10 = lengthof r60;

        if $i10 <= 0 goto label06;

        $r43 = (java.lang.Integer) r7;

        i3 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r45 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r46 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r11 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void exportUnrolledFlags(java.io.BufferedWriter,android.view.ViewDebug$FlagToString[],int,java.lang.String)>(r2, r60, i3, r11);

     label06:
        r61 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i12 = lengthof r61;

        if $i12 <= 0 goto label10;

        $r44 = (java.lang.Integer) r7;

        i13 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        z0 = 0;

        i4 = lengthof r61;

        i5 = 0;

     label07:
        if i5 >= i4 goto label09;

        r12 = r61[i5];

        $i11 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i11 != i13 goto label08;

        r7 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        z0 = 1;

        goto label09;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        if z0 != 0 goto label10;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

     label10:
        goto label21;

     label11:
        if r8 != class "[I" goto label13;

        $r37 = (int[]) r7;

        r62 = (int[]) $r37;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r41 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r40 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r63 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void exportUnrolledArray(android.content.Context,java.io.BufferedWriter,android.view.ViewDebug$ExportedProperty,int[],java.lang.String,java.lang.String)>(r0, r2, r9, r62, r63, "()");

     label12:
        goto label26;

     label13:
        if r8 != class "[Ljava/lang/String;" goto label19;

        $r28 = (java.lang.String[]) r7;

        r65 = (java.lang.String[]) $r28;

        $z3 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>();

        if $z3 == 0 goto label18;

        if r65 == null goto label18;

        i14 = 0;

     label14:
        $i7 = lengthof r65;

        if i14 >= $i7 goto label18;

        $r27 = r65[i14];

        if $r27 == null goto label17;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = r65[i14];

        $i9 = i14 + 1;

        $r34 = r65[$i9];

        if $r34 != null goto label15;

        $r33 = "null";

        goto label16;

     label15:
        $i8 = i14 + 1;

        $r33 = r65[$i8];

     label16:
        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, $r30, $r38, "()", $r33);

     label17:
        i14 = i14 + 2;

        goto label14;

     label18:
        goto label26;

     label19:
        $z1 = virtualinvoke r8.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label21;

        $z2 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean deepExport()>();

        if $z2 == 0 goto label21;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)>(r0, r7, r2, $r24);

     label20:
        goto label26;

     label21:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, $r21, $r22, "()", r7);

     label22:
        goto label26;

     label23:
        $r58 := @caughtexception;

        goto label26;

     label24:
        $r57 := @caughtexception;

        goto label26;

     label25:
        $r59 := @caughtexception;

     label26:
        i1 = i1 + 1;

        goto label01;

     label27:
        return;

        catch java.lang.IllegalAccessException from label02 to label12 with label23;
        catch java.lang.IllegalAccessException from label13 to label18 with label23;
        catch java.lang.IllegalAccessException from label19 to label20 with label23;
        catch java.lang.IllegalAccessException from label21 to label22 with label23;
        catch java.lang.reflect.InvocationTargetException from label02 to label12 with label24;
        catch java.lang.reflect.InvocationTargetException from label13 to label18 with label24;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label24;
        catch java.lang.reflect.InvocationTargetException from label21 to label22 with label24;
        catch java.util.concurrent.TimeoutException from label02 to label12 with label25;
        catch java.util.concurrent.TimeoutException from label13 to label18 with label25;
        catch java.util.concurrent.TimeoutException from label19 to label20 with label25;
        catch java.util.concurrent.TimeoutException from label21 to label22 with label25;
    }

    private static void exportFields(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.Class, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1, r7, $r15, $r36, $r45, $r58;
        java.io.BufferedWriter r2;
        java.lang.Class r3, r8, $r16, $r21, $r25, $r40;
        java.lang.String r4, r10, r11, $r14, $r18, $r22, $r28, $r30, $r39, $r41, $r44, $r47, $r48, $r49, $r52, $r53, $r63, $r64, r70;
        java.lang.reflect.Field[] r5;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, i15, i16;
        java.lang.reflect.Field r6;
        android.view.ViewDebug$ExportedProperty r9;
        android.view.ViewDebug$IntToString r12;
        java.util.HashMap $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r17, $r19, $r20, $r23, $r26, $r27, $r31, $r32, $r33, $r34, $r35, $r37, $r38, $r42, $r43, $r50, $r51, $r54, $r55, $r56, $r59, $r60, $r62, $r65, $r66;
        java.lang.Byte $r24;
        byte $b9;
        java.lang.Integer $r29;
        java.lang.String[] $r46, r72;
        int[] $r57, r69;
        java.lang.IllegalAccessException $r61;
        android.view.ViewDebug$FlagToString[] r67;
        android.view.ViewDebug$IntToString[] r68;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: java.lang.String;

        r5 = staticinvoke <android.view.ViewDebug: java.lang.reflect.Field[] getExportedPropertyFields(java.lang.Class)>(r3);

        i0 = lengthof r5;

        i1 = 0;

     label01:
        if i1 >= i0 goto label29;

        r6 = r5[i1];

     label02:
        r7 = null;

        r8 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r13 = <android.view.ViewDebug: java.util.HashMap sAnnotations>;

        $r15 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r9 = (android.view.ViewDebug$ExportedProperty) $r15;

        $r14 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        $i6 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i6 == 0 goto label03;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r64 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r62 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label04;

     label03:
        $r63 = "";

     label04:
        r10 = $r63;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        if r8 == $r16 goto label05;

        $r40 = <java.lang.Byte: java.lang.Class TYPE>;

        if r8 != $r40 goto label14;

     label05:
        $z0 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean resolveId()>();

        if $z0 == 0 goto label06;

        if r0 == null goto label06;

        i2 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        r7 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>(r0, i2);

        goto label24;

     label06:
        r67 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        $i7 = lengthof r67;

        if $i7 <= 0 goto label07;

        i3 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r30 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r11 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void exportUnrolledFlags(java.io.BufferedWriter,android.view.ViewDebug$FlagToString[],int,java.lang.String)>(r2, r67, i3, r11);

     label07:
        r68 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i8 = lengthof r68;

        if $i8 <= 0 goto label11;

        i15 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        i5 = lengthof r68;

        i4 = 0;

     label08:
        if i4 >= i5 goto label10;

        r12 = r68[i4];

        $i11 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i11 != i15 goto label09;

        r7 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        goto label10;

     label09:
        i4 = i4 + 1;

        goto label08;

     label10:
        if r7 != null goto label11;

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

     label11:
        $z1 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>();

        if $z1 == 0 goto label13;

        r7 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        if r8 != $r21 goto label12;

        $r29 = (java.lang.Integer) r7;

        $i10 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        r7 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>($i10);

        goto label13;

     label12:
        $r25 = <java.lang.Byte: java.lang.Class TYPE>;

        if r8 != $r25 goto label13;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r24 = (java.lang.Byte) r7;

        $b9 = virtualinvoke $r24.<java.lang.Byte: byte byteValue()>();

        $r28 = staticinvoke <java.lang.Byte: java.lang.String toHexString(byte,boolean)>($b9, 1);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r7 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        goto label24;

     label14:
        if r8 != class "[I" goto label16;

        $r58 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r57 = (int[]) $r58;

        r69 = (int[]) $r57;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r54 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r53 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r70 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void exportUnrolledArray(android.content.Context,java.io.BufferedWriter,android.view.ViewDebug$ExportedProperty,int[],java.lang.String,java.lang.String)>(r0, r2, r9, r69, r70, "");

     label15:
        goto label28;

     label16:
        if r8 != class "[Ljava/lang/String;" goto label22;

        $r45 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r46 = (java.lang.String[]) $r45;

        r72 = (java.lang.String[]) $r46;

        $z4 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>();

        if $z4 == 0 goto label21;

        if r72 == null goto label21;

        i16 = 0;

     label17:
        $i12 = lengthof r72;

        if i16 >= $i12 goto label21;

        $r41 = r72[i16];

        if $r41 == null goto label20;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = r72[i16];

        $i14 = i16 + 1;

        $r47 = r72[$i14];

        if $r47 != null goto label18;

        $r49 = "null";

        goto label19;

     label18:
        $i13 = i16 + 1;

        $r49 = r72[$i13];

     label19:
        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, $r52, $r48, "", $r49);

     label20:
        i16 = i16 + 2;

        goto label17;

     label21:
        goto label28;

     label22:
        $z2 = virtualinvoke r8.<java.lang.Class: boolean isPrimitive()>();

        if $z2 != 0 goto label24;

        $z3 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: boolean deepExport()>();

        if $z3 == 0 goto label24;

        $r36 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r39 = interfaceinvoke r9.<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>();

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)>(r0, $r36, r2, $r44);

     label23:
        goto label28;

     label24:
        if r7 != null goto label25;

        r7 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label25:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, $r18, $r22, "", r7);

     label26:
        goto label28;

     label27:
        $r61 := @caughtexception;

     label28:
        i1 = i1 + 1;

        goto label01;

     label29:
        return;

        catch java.lang.IllegalAccessException from label02 to label15 with label27;
        catch java.lang.IllegalAccessException from label16 to label21 with label27;
        catch java.lang.IllegalAccessException from label22 to label23 with label27;
        catch java.lang.IllegalAccessException from label24 to label26 with label27;
    }

    private static void writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.Object) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.String r1, r2, r3;
        java.lang.Object r4;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r2);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r3);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("=");

        staticinvoke <android.view.ViewDebug: void writeValue(java.io.BufferedWriter,java.lang.Object)>(r0, r4);

        virtualinvoke r0.<java.io.BufferedWriter: void write(int)>(32);

        return;
    }

    private static void exportUnrolledFlags(java.io.BufferedWriter, android.view.ViewDebug$FlagToString[], int, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        android.view.ViewDebug$FlagToString[] r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String r2, r4, r5;
        android.view.ViewDebug$FlagToString r3;
        boolean z0, z1, $z2;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: android.view.ViewDebug$FlagToString[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        r3 = r1[i2];

        z0 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: boolean outputIf()>();

        $i4 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: int mask()>();

        i3 = i0 & $i4;

        $i5 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: int equals()>();

        if i3 != $i5 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z2;

        if z1 == 0 goto label4;

        if z0 != 0 goto label5;

     label4:
        if z1 != 0 goto label6;

        if z0 != 0 goto label6;

     label5:
        r4 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: java.lang.String name()>();

        r5 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>(i3);

        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r0, r2, r4, "", r5);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return;
    }

    private static void exportUnrolledArray(android.content.Context, java.io.BufferedWriter, android.view.ViewDebug$ExportedProperty, int[], java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.io.BufferedWriter r1;
        android.view.ViewDebug$ExportedProperty r2;
        int[] r3;
        java.lang.String r4, r5, r8, r9;
        android.view.ViewDebug$IntToString[] r6, r7;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, i10;
        android.view.ViewDebug$IntToString r10, r12;
        java.lang.Object $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.io.BufferedWriter;

        r2 := @parameter2: android.view.ViewDebug$ExportedProperty;

        r3 := @parameter3: int[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 = interfaceinvoke r2.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>();

        $i5 = lengthof r6;

        if $i5 <= 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        r7 = interfaceinvoke r2.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i6 = lengthof r7;

        if $i6 <= 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z1 = $z5;

        $z3 = interfaceinvoke r2.<android.view.ViewDebug$ExportedProperty: boolean resolveId()>();

        if $z3 == 0 goto label05;

        if r0 == null goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z2 = $z4;

        i0 = lengthof r3;

        i1 = 0;

     label07:
        if i1 >= i0 goto label16;

        r9 = null;

        i2 = r3[i1];

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        if z0 == 0 goto label10;

        i4 = lengthof r6;

        i3 = 0;

     label08:
        if i3 >= i4 goto label10;

        r10 = r6[i3];

        $i8 = interfaceinvoke r10.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i8 != i1 goto label09;

        r8 = interfaceinvoke r10.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        goto label10;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        if z1 == 0 goto label13;

        i9 = lengthof r7;

        i10 = 0;

     label11:
        if i10 >= i9 goto label13;

        r12 = r7[i10];

        $i7 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i7 != i2 goto label12;

        r9 = interfaceinvoke r12.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        goto label13;

     label12:
        i10 = i10 + 1;

        goto label11;

     label13:
        if z2 == 0 goto label14;

        if r9 != null goto label15;

        $r11 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>(r0, i2);

        r9 = (java.lang.String) $r11;

        goto label15;

     label14:
        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

     label15:
        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, r4, r8, r5, r9);

        i1 = i1 + 1;

        goto label07;

     label16:
        return;
    }

    static java.lang.Object resolveId(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        java.lang.String r1, $r5, $r8, $r14;
        android.content.res.Resources r2;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r11, $r12, $r13;
        android.content.res.Resources$NotFoundException $r10;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        if i0 < 0 goto label4;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r8 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id/");

        $r14 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        r1 = "NO_ID";

     label5:
        return r1;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    private static void writeValue(java.io.BufferedWriter, java.lang.Object) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.Object r1;
        java.lang.String r2, $r4, $r5, $r7, r8;
        java.lang.Throwable r3, $r6;
        int $i0, $i1;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label6;

        r2 = "[EXCEPTION]";

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r8 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");

     label2:
        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>($r5);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(",");

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r8);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>($r7);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(",");

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r2);

        throw r3;

     label5:
        goto label7;

     label6:
        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("4,null");

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static java.lang.reflect.Field[] capturedViewGetPropertyFields(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap r1, $r5, $r11;
        java.lang.reflect.Field[] r2, $r8, r12, r13;
        java.util.ArrayList r3, $r7;
        int i0, i1, $i2;
        java.lang.reflect.Field r4;
        java.lang.Object $r6;
        java.lang.Object[] $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r5 = <android.view.ViewDebug: java.util.HashMap mCapturedViewFieldsForClasses>;

        if $r5 != null goto label1;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        <android.view.ViewDebug: java.util.HashMap mCapturedViewFieldsForClasses> = $r11;

     label1:
        r1 = <android.view.ViewDebug: java.util.HashMap mCapturedViewFieldsForClasses>;

        $r6 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.reflect.Field[]) $r6;

        if r2 == null goto label2;

        return r2;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r12 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = lengthof r12;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r4 = r12[i1];

        $z0 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "android/view/ViewDebug$CapturedViewProperty");

        if $z0 == 0 goto label4;

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r8 = newarray (java.lang.reflect.Field)[$i2];

        $r9 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r13 = (java.lang.reflect.Field[]) $r9;

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r13);

        return r13;
    }

    private static java.lang.reflect.Method[] capturedViewGetPropertyMethods(java.lang.Class)
    {
        java.lang.Class r0, $r12;
        java.util.HashMap r1, $r5, $r13;
        java.lang.reflect.Method[] r2, $r8, r14, r15;
        java.util.ArrayList r3, $r7;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Method r4;
        java.lang.Object $r6;
        java.lang.Object[] $r9;
        java.lang.Class[] $r11;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r5 = <android.view.ViewDebug: java.util.HashMap mCapturedViewMethodsForClasses>;

        if $r5 != null goto label1;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        <android.view.ViewDebug: java.util.HashMap mCapturedViewMethodsForClasses> = $r13;

     label1:
        r1 = <android.view.ViewDebug: java.util.HashMap mCapturedViewMethodsForClasses>;

        $r6 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.reflect.Method[]) $r6;

        if r2 == null goto label2;

        return r2;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r14 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r14;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r4 = r14[i1];

        $r11 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r11;

        if $i3 != 0 goto label4;

        $z0 = virtualinvoke r4.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "android/view/ViewDebug$CapturedViewProperty");

        if $z0 == 0 goto label4;

        $r12 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r12 == class "java/lang/Void" goto label4;

        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r8 = newarray (java.lang.reflect.Method)[$i2];

        $r9 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r15 = (java.lang.reflect.Method[]) $r9;

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15);

        return r15;
    }

    private static java.lang.String capturedViewExportMethods(java.lang.Object, java.lang.Class, java.lang.String)
    {
        java.lang.Object r0, r6;
        java.lang.Class r1, r7;
        java.lang.String r2, r9, $r11, $r14, $r20, $r24, $r25, $r28;
        java.lang.StringBuilder r3, $r10, $r21, $r23, $r27;
        java.lang.reflect.Method[] r4;
        int i0, i1;
        java.lang.reflect.Method r5;
        android.view.ViewDebug$CapturedViewProperty r8;
        java.lang.Object[] $r12;
        boolean $z0;
        java.lang.annotation.Annotation $r13;
        java.lang.reflect.InvocationTargetException $r29;
        java.lang.IllegalAccessException $r30;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return "null";

     label01:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r3 = $r10;

        r4 = staticinvoke <android.view.ViewDebug: java.lang.reflect.Method[] capturedViewGetPropertyMethods(java.lang.Class)>(r1);

        i0 = lengthof r4;

        i1 = 0;

     label02:
        if i1 >= i0 goto label11;

        r5 = r4[i1];

     label03:
        $r12 = (java.lang.Object[]) null;

        r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r12);

        r7 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/view/ViewDebug$CapturedViewProperty");

        r8 = (android.view.ViewDebug$CapturedViewProperty) $r13;

        $z0 = interfaceinvoke r8.<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>();

        if $z0 == 0 goto label04;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = staticinvoke <android.view.ViewDebug: java.lang.String capturedViewExportMethods(java.lang.Object,java.lang.Class,java.lang.String)>(r6, r7, $r28);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label07;

     label04:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()=");

        if r6 == null goto label05;

        $r20 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        r9 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        goto label06;

     label05:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label06:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

     label07:
        goto label10;

     label08:
        $r30 := @caughtexception;

        goto label10;

     label09:
        $r29 := @caughtexception;

     label10:
        i1 = i1 + 1;

        goto label02;

     label11:
        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.IllegalAccessException from label03 to label07 with label08;
        catch java.lang.reflect.InvocationTargetException from label03 to label07 with label09;
    }

    private static java.lang.String capturedViewExportFields(java.lang.Object, java.lang.Class, java.lang.String)
    {
        java.lang.Object r0, r6;
        java.lang.Class r1;
        java.lang.String r2, r7, $r9, $r11, $r16;
        java.lang.StringBuilder r3, $r8;
        java.lang.reflect.Field[] r4;
        int i0, i1;
        java.lang.reflect.Field r5;
        java.lang.IllegalAccessException $r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return "null";

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r3 = $r8;

        r4 = staticinvoke <android.view.ViewDebug: java.lang.reflect.Field[] capturedViewGetPropertyFields(java.lang.Class)>(r1);

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label9;

        r5 = r4[i1];

     label3:
        r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        if r6 == null goto label4;

        $r16 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        r7 = virtualinvoke $r16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        goto label5;

     label4:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

     label8:
        i1 = i1 + 1;

        goto label2;

     label9:
        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

        catch java.lang.IllegalAccessException from label3 to label6 with label7;
    }

    public static void dumpCapturedView(java.lang.String, java.lang.Object)
    {
        java.lang.String r0, $r6, $r9, $r10, $r12, $r14;
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.StringBuilder r3, $r4, $r5, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = new java.lang.StringBuilder;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        r3 = $r4;

        $r10 = staticinvoke <android.view.ViewDebug: java.lang.String capturedViewExportFields(java.lang.Object,java.lang.Class,java.lang.String)>(r1, r2, "");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = staticinvoke <android.view.ViewDebug: java.lang.String capturedViewExportMethods(java.lang.Object,java.lang.Class,java.lang.String)>(r1, r2, "");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r0, $r14);

        return;
    }

    public static java.lang.Object invokeViewMethod(android.view.View, java.lang.reflect.Method, java.lang.Object[])
    {
        android.view.View r0;
        java.lang.reflect.Method r1;
        java.lang.Object[] r2;
        java.util.concurrent.CountDownLatch r3, $r7;
        java.util.concurrent.atomic.AtomicReference r4, r5, $r8, $r9;
        java.lang.InterruptedException r6, $r15;
        android.view.ViewDebug$8 $r10;
        java.lang.Object $r11, $r12, $r14;
        java.lang.RuntimeException $r13, $r17;
        java.lang.Throwable $r16;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

        $r7 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r7.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r4 = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r5 = $r9;

        $r10 = new android.view.ViewDebug$8;

        specialinvoke $r10.<android.view.ViewDebug$8: void <init>(java.util.concurrent.atomic.AtomicReference,java.lang.reflect.Method,android.view.View,java.lang.Object[],java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>(r4, r1, r0, r2, r5, r3);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r10);

     label1:
        virtualinvoke r3.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r6 = $r15;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r17;

     label4:
        $r11 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r11 == null goto label5;

        $r13 = new java.lang.RuntimeException;

        $r14 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r16 = (java.lang.Throwable) $r14;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16);

        throw $r13;

     label5:
        $r12 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r12;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void setLayoutParameter(android.view.View, java.lang.String, int) throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException
    {
        android.view.View r0;
        java.lang.String r1, $r14, $r16;
        int i0;
        android.view.ViewGroup$LayoutParams r2;
        java.lang.reflect.Field r3;
        java.lang.Class $r4, $r5, $r6, $r15;
        java.lang.Integer $r7;
        android.view.ViewDebug$9 $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r17;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r5 == $r6 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only integer layout parameters can be set. Field ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is of type ");

        $r15 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r14 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, $r7);

        $r8 = new android.view.ViewDebug$9;

        specialinvoke $r8.<android.view.ViewDebug$9: void <init>(android.view.View,android.view.ViewGroup$LayoutParams)>(r0, r2);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r8);

        return;
    }

    static void <clinit>()
    {
        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_OUTPUT_DISPLAYLIST> = "OUTPUT_DISPLAYLIST";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_CAPTURE_LAYERS> = "CAPTURE_LAYERS";

        <android.view.ViewDebug: java.lang.String REMOTE_PROFILE> = "PROFILE";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_REQUEST_LAYOUT> = "REQUEST_LAYOUT";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_INVALIDATE> = "INVALIDATE";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_DUMP_THEME> = "DUMP_THEME";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_DUMP> = "DUMP";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_CAPTURE> = "CAPTURE";

        <android.view.ViewDebug: int CAPTURE_TIMEOUT> = 4000;

        <android.view.ViewDebug: boolean DEBUG_DRAG> = 0;

        <android.view.ViewDebug: boolean TRACE_RECYCLER> = 0;

        <android.view.ViewDebug: boolean TRACE_HIERARCHY> = 0;

        <android.view.ViewDebug: java.util.HashMap mCapturedViewMethodsForClasses> = null;

        <android.view.ViewDebug: java.util.HashMap mCapturedViewFieldsForClasses> = null;

        return;
    }
}
