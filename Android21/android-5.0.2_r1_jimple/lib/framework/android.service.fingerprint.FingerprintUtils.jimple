public class android.service.fingerprint.FingerprintUtils extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;

    public void <init>()
    {
        android.service.fingerprint.FingerprintUtils r0;

        r0 := @this: android.service.fingerprint.FingerprintUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int[] getFingerprintIdsForUser(android.content.ContentResolver, int)
    {
        android.content.ContentResolver r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r1, $r5, $r6, $r7, $r11, $r13;
        int[] r2;
        java.lang.String[] r3;
        boolean $z0;
        java.lang.Integer $r8;
        java.lang.NumberFormatException $r9;
        java.lang.StringBuilder $r10, $r12, $r14;

        r0 := @parameter0: android.content.ContentResolver;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, "user_fingerprint_ids", i0);

        r2 = newarray (int)[0];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label6;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("[", "");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("]", "");

        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(", ");

        $i2 = lengthof r3;

        r2 = newarray (int)[$i2];

        i1 = 0;

     label1:
        $i3 = lengthof r2;

        if i1 >= $i3 goto label6;

     label2:
        $r7 = r3[i1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>($r7);

        $i4 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r2[i1] = $i4;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error when parsing finger id ");

        $r11 = r3[i1];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("FingerprintUtils", $r13);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return r2;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public static void addFingerprintIdForUser(int, android.content.ContentResolver, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.content.ContentResolver r0;
        int[] r1, r3;
        java.lang.String $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: android.content.ContentResolver;

        i1 := @parameter2: int;

        r1 = staticinvoke <android.service.fingerprint.FingerprintUtils: int[] getFingerprintIdsForUser(android.content.ContentResolver,int)>(r0, i1);

        if i0 != 0 goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label4;

        $i7 = r1[i2];

        if $i7 != i0 goto label3;

        return;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i4 = lengthof r1;

        $i5 = $i4 + 1;

        r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i5);

        $i6 = lengthof r1;

        r3[$i6] = i0;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r3);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, "user_fingerprint_ids", $r2, i1);

        return;
    }

    public static boolean removeFingerprintIdForUser(int, android.content.ContentResolver, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.content.ContentResolver r0;
        int[] r1, r2, $r3;
        java.lang.String $r4;
        java.lang.IllegalStateException $r5;

        i0 := @parameter0: int;

        r0 := @parameter1: android.content.ContentResolver;

        i1 := @parameter2: int;

        if i0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bad fingerId");

        throw $r5;

     label1:
        r1 = staticinvoke <android.service.fingerprint.FingerprintUtils: int[] getFingerprintIdsForUser(android.content.ContentResolver,int)>(r0, i1);

        $i4 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i4);

        i2 = 0;

        i3 = 0;

     label2:
        $i5 = lengthof r1;

        if i3 >= $i5 goto label4;

        $i6 = r1[i3];

        if i0 == $i6 goto label3;

        $i8 = i2;

        i2 = i2 + 1;

        $i7 = r1[i3];

        r2[$i8] = $i7;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        if i2 <= 0 goto label5;

        $r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, i2);

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r3);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, "user_fingerprint_ids", $r4, i1);

        return 1;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <android.service.fingerprint.FingerprintUtils: java.lang.String TAG> = "FingerprintUtils";

        <android.service.fingerprint.FingerprintUtils: boolean DEBUG> = 1;

        return;
    }
}
