public class com.android.internal.content.NativeLibraryHelper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG_NATIVE;
    public static final java.lang.String LIB_DIR_NAME;
    public static final java.lang.String LIB64_DIR_NAME;
    public static final java.lang.String CLEAR_ABI_OVERRIDE;
    private static final int BITCODE_PRESENT;

    public void <init>()
    {
        com.android.internal.content.NativeLibraryHelper r0;

        r0 := @this: com.android.internal.content.NativeLibraryHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static native long nativeOpenApk(java.lang.String);

    private static native void nativeClose(long);

    private static native long nativeSumNativeBinaries(long, java.lang.String);

    private static native int nativeCopyNativeBinaries(long, java.lang.String, java.lang.String);

    private static long sumNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String r1;
        long l0, l3, $l4;
        long[] r2;
        int i1, i2;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String;

        l0 = 0L;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        l3 = r2[i2];

        $l4 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long nativeSumNativeBinaries(long,java.lang.String)>(l3, r1);

        l0 = l0 + $l4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public static int copyNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.io.File r1;
        java.lang.String r2, $r4;
        long[] r3;
        int i0, i1, i3;
        long l2;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

        r3 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        l2 = r3[i1];

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        i3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int nativeCopyNativeBinaries(long,java.lang.String,java.lang.String)>(l2, $r4, r2);

        if i3 == 1 goto label2;

        return i3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String[])
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String[] r1;
        int i0, i1, i2, i4;
        long[] r2;
        long l3;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String[];

        i0 = -114;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        l3 = r2[i2];

        i4 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int nativeFindSupportedAbi(long,java.lang.String[])>(l3, r1);

        if i4 != -114 goto label2;

        goto label6;

     label2:
        if i4 != -113 goto label3;

        if i0 >= 0 goto label6;

        i0 = -113;

        goto label6;

     label3:
        if i4 < 0 goto label5;

        if i0 < 0 goto label4;

        if i4 >= i0 goto label6;

     label4:
        i0 = i4;

        goto label6;

     label5:
        return i4;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return i0;
    }

    private static native int nativeFindSupportedAbi(long, java.lang.String[]);

    public static void removeNativeBinariesLI(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>($r1, 0);

        return;
    }

    public static void removeNativeBinariesFromDirLI(java.io.File, boolean)
    {
        java.io.File r0, $r7, $r8, $r12, $r15;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.File[] r1;
        int i0, $i2;
        java.lang.StringBuilder $r2, $r3, $r5, $r9, $r10, $r14;
        java.lang.String $r4, $r6, $r11, $r13;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label5;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 == null goto label4;

        i0 = 0;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label4;

        $r7 = r1[i0];

        $z3 = virtualinvoke $r7.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label2;

        $r15 = r1[i0];

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>($r15, 1);

        goto label3;

     label2:
        $r8 = r1[i0];

        $z4 = virtualinvoke $r8.<java.io.File: boolean delete()>();

        if $z4 != 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete native binary: ");

        $r12 = r1[i0];

        $r11 = virtualinvoke $r12.<java.io.File: java.lang.String getPath()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r13);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete native binary directory: ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r6);

     label5:
        return;
    }

    private static void createNativeLibrarySubdir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        android.system.ErrnoException r1, $r16;
        boolean $z0, $z1, $z3;
        java.io.IOException $r2, $r10, $r15;
        java.lang.StringBuilder $r3, $r4, $r6, $r9, $r12, $r14, $r17, $r18, $r21;
        java.lang.String $r5, $r7, $r8, $r11, $r13, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<java.io.File: boolean delete()>();

        $z3 = virtualinvoke r0.<java.io.File: boolean mkdir()>();

        if $z3 != 0 goto label1;

        $r10 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create ");

        $r11 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label1:
        $r8 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $i1 = <android.system.OsConstants: int S_IRWXU>;

        $i0 = <android.system.OsConstants: int S_IRGRP>;

        $i4 = $i1 | $i0;

        $i2 = <android.system.OsConstants: int S_IXGRP>;

        $i6 = $i4 | $i2;

        $i3 = <android.system.OsConstants: int S_IROTH>;

        $i8 = $i6 | $i3;

        $i5 = <android.system.OsConstants: int S_IXOTH>;

        $i7 = $i8 | $i5;

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r8, $i7);

     label2:
        goto label5;

     label3:
        $r16 := @caughtexception;

        r1 = $r16;

        $r15 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot chmod native library directory ");

        $r20 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r19, r1);

        throw $r15;

     label4:
        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r0);

        if $z1 != 0 goto label5;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set SELinux context for ");

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label5:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private static long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String[])
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String[] r1;
        int i0;
        java.lang.String $r2;
        long $l1;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String[];

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r1);

        if i0 < 0 goto label1;

        $r2 = r1[i0];

        $l1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String)>(r0, $r2);

        return $l1;

     label1:
        return 0L;
    }

    public static int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String[], boolean) throws java.io.IOException
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.io.File r1, r4, r5, $r8;
        java.lang.String[] r2;
        boolean z0;
        int i0, i1;
        java.lang.String r3, $r6, $r7;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r1);

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r2);

        if i0 < 0 goto label3;

        $r6 = r2[i0];

        r3 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r6);

        if z0 == 0 goto label1;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r3);

        r5 = $r8;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r5);

        r4 = r5;

        goto label2;

     label1:
        r4 = r1;

     label2:
        $r7 = r2[i0];

        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(r0, r4, $r7);

        if i1 == 1 goto label3;

        return i1;

     label3:
        return i0;
    }

    public static int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.io.File r1;
        java.lang.String r2, $r4, $r9, $r17, $r22, $r24, r26;
        java.lang.String[] r3, $r5, $r11, $r12, $r13, $r14, $r20;
        int i1, $i2, $i4, $i5, i10, i11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r15, $r16, $r18, $r19, $r21, $r23;
        java.io.IOException $r25, r27;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

     label01:
        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean multiArch>;

        if $z0 == 0 goto label07;

        if r2 == null goto label02;

        $r24 = "-";

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label02;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", "Ignoring abiOverride for multi arch application.");

     label02:
        $r11 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i4 = lengthof $r11;

        if $i4 <= 0 goto label04;

        $r20 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        i10 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(r0, r1, $r20, 1);

        if i10 >= 0 goto label04;

        if i10 == -114 goto label04;

        if i10 == -113 goto label04;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying 32 bit native libraries; copyRet=");

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r22);

     label03:
        return i10;

     label04:
        $r13 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i5 = lengthof $r13;

        if $i5 <= 0 goto label06;

        $r14 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i11 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(r0, r1, $r14, 1);

        if i11 >= 0 goto label06;

        if i11 == -114 goto label06;

        if i11 == -113 goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying 64 bit native libraries; copyRet=");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r17);

     label05:
        return i11;

     label06:
        goto label14;

     label07:
        r26 = null;

        $r4 = "-";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label08;

        r26 = null;

        goto label09;

     label08:
        if r2 == null goto label09;

        r26 = r2;

     label09:
        if r26 == null goto label10;

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = r26;

        goto label11;

     label10:
        $r12 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label11:
        r3 = $r12;

        $r5 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i2 = lengthof $r5;

        if $i2 <= 0 goto label12;

        if r26 != null goto label12;

        $z2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(r0);

        if $z2 == 0 goto label12;

        r3 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label12:
        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean)>(r0, r1, r3, 1);

        if i1 >= 0 goto label14;

        if i1 == -114 goto label14;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying native libraries [errorCode=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r9);

     label13:
        return i1;

     label14:
        return 1;

     label15:
        $r25 := @caughtexception;

        r27 = $r25;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NativeHelper", "Copying native libraries failed", r27);

        return -110;

        catch java.io.IOException from label01 to label03 with label15;
        catch java.io.IOException from label04 to label05 with label15;
        catch java.io.IOException from label06 to label13 with label15;
    }

    public static long sumNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String) throws java.io.IOException
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String r1, r2, $r4, $r11;
        long l0, $l2, $l5, $l6;
        java.lang.String[] r3, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        int $i1, $i3, $i4;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String;

        l0 = 0L;

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean multiArch>;

        if $z0 == 0 goto label3;

        if r1 == null goto label1;

        $r11 = "-";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", "Ignoring abiOverride for multi arch application.");

     label1:
        $r7 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i3 = lengthof $r7;

        if $i3 <= 0 goto label2;

        $r10 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $l6 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, $r10);

        l0 = l0 + $l6;

     label2:
        $r8 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i4 = lengthof $r8;

        if $i4 <= 0 goto label9;

        $r9 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $l5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, $r9);

        l0 = l0 + $l5;

        goto label9;

     label3:
        r2 = null;

        $r4 = "-";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        r2 = null;

        goto label5;

     label4:
        if r1 == null goto label5;

        r2 = r1;

     label5:
        if r2 == null goto label6;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r2;

        goto label7;

     label6:
        $r6 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label7:
        r3 = $r6;

        $r5 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i1 = lengthof $r5;

        if $i1 <= 0 goto label8;

        if r2 != null goto label8;

        $z2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(r0);

        if $z2 == 0 goto label8;

        r3 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label8:
        $l2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r3);

        l0 = l0 + $l2;

     label9:
        return l0;
    }

    private static native int hasRenderscriptBitcode(long);

    public static boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle) throws java.io.IOException
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        long[] r1;
        int i0, i1, i3;
        long l2;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        l2 = r1[i1];

        i3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int hasRenderscriptBitcode(long)>(l2);

        if i3 >= 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error scanning APK, code: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        if i3 != 1 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    static long access$000(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long nativeOpenApk(java.lang.String)>(r0);

        return $l0;
    }

    static void access$100(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void nativeClose(long)>(l0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.content.NativeLibraryHelper: int BITCODE_PRESENT> = 1;

        <com.android.internal.content.NativeLibraryHelper: java.lang.String CLEAR_ABI_OVERRIDE> = "-";

        <com.android.internal.content.NativeLibraryHelper: java.lang.String LIB64_DIR_NAME> = "lib64";

        <com.android.internal.content.NativeLibraryHelper: java.lang.String LIB_DIR_NAME> = "lib";

        <com.android.internal.content.NativeLibraryHelper: boolean DEBUG_NATIVE> = 0;

        <com.android.internal.content.NativeLibraryHelper: java.lang.String TAG> = "NativeHelper";

        return;
    }
}
