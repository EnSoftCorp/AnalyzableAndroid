public final class android.view.InputEventConsistencyVerifier extends java.lang.Object
{
    private static final boolean IS_ENG_BUILD;
    private static final java.lang.String EVENT_TYPE_KEY;
    private static final java.lang.String EVENT_TYPE_TRACKBALL;
    private static final java.lang.String EVENT_TYPE_TOUCH;
    private static final java.lang.String EVENT_TYPE_GENERIC_MOTION;
    private static final int RECENT_EVENTS_TO_LOG;
    private final java.lang.Object mCaller;
    private final int mFlags;
    private final java.lang.String mLogTag;
    private int mLastEventSeq;
    private java.lang.String mLastEventType;
    private int mLastNestingLevel;
    private android.view.InputEvent[] mRecentEvents;
    private boolean[] mRecentEventsUnhandled;
    private int mMostRecentEventIndex;
    private android.view.InputEvent mCurrentEvent;
    private java.lang.String mCurrentEventType;
    private android.view.InputEventConsistencyVerifier$KeyState mKeyStateList;
    private boolean mTrackballDown;
    private boolean mTrackballUnhandled;
    private int mTouchEventStreamPointers;
    private int mTouchEventStreamDeviceId;
    private int mTouchEventStreamSource;
    private boolean mTouchEventStreamIsTainted;
    private boolean mTouchEventStreamUnhandled;
    private boolean mHoverEntered;
    private java.lang.StringBuilder mViolationMessage;
    public static final int FLAG_RAW_DEVICE_INPUT;

    public void <init>(java.lang.Object, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        java.lang.Object r1;
        int i0;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int,java.lang.String)>(r1, i0, null);

        return;
    }

    public void <init>(java.lang.Object, int, java.lang.String)
    {
        android.view.InputEventConsistencyVerifier r0;
        java.lang.Object r1;
        int i0;
        java.lang.String r2, $r3;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamDeviceId> = -1;

        r0.<android.view.InputEventConsistencyVerifier: java.lang.Object mCaller> = r1;

        r0.<android.view.InputEventConsistencyVerifier: int mFlags> = i0;

        if r2 == null goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = "InputEventConsistencyVerifier";

     label2:
        r0.<android.view.InputEventConsistencyVerifier: java.lang.String mLogTag> = $r3;

        return;
    }

    public static boolean isInstrumentationEnabled()
    {
        boolean $z0;

        $z0 = <android.view.InputEventConsistencyVerifier: boolean IS_ENG_BUILD>;

        return $z0;
    }

    public void reset()
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.InputEventConsistencyVerifier$KeyState r1, $r2, $r3;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r0.<android.view.InputEventConsistencyVerifier: int mLastEventSeq> = -1;

        r0.<android.view.InputEventConsistencyVerifier: int mLastNestingLevel> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballUnhandled> = 0;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamUnhandled> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mHoverEntered> = 0;

     label1:
        $r2 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList>;

        if $r2 == null goto label2;

        r1 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList>;

        $r3 = r1.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next>;

        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList> = $r3;

        virtualinvoke r1.<android.view.InputEventConsistencyVerifier$KeyState: void recycle()>();

        goto label1;

     label2:
        return;
    }

    public void onInputEvent(android.view.InputEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.InputEvent r1;
        int i0, $i1, $i2;
        android.view.KeyEvent r2;
        boolean $z0, $z1;
        android.view.MotionEvent r3;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        $z0 = r1 instanceof android.view.KeyEvent;

        if $z0 == 0 goto label1;

        r2 = (android.view.KeyEvent) r1;

        virtualinvoke r0.<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>(r2, i0);

        goto label4;

     label1:
        r3 = (android.view.MotionEvent) r1;

        $z1 = virtualinvoke r3.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r3, i0);

        goto label4;

     label2:
        $i1 = virtualinvoke r3.<android.view.MotionEvent: int getSource()>();

        $i2 = $i1 & 4;

        if $i2 == 0 goto label3;

        virtualinvoke r0.<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>(r3, i0);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.InputEventConsistencyVerifier: void onGenericMotionEvent(android.view.MotionEvent,int)>(r3, i0);

     label4:
        return;
    }

    public void onKeyEvent(android.view.KeyEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.KeyEvent r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        android.view.InputEventConsistencyVerifier$KeyState r2, r11;
        java.lang.Throwable r3, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.lang.String $r5, $r10;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: boolean startEvent(android.view.InputEvent,int,java.lang.String)>(r1, i0, "KeyEvent");

        if $z0 != 0 goto label01;

        return;

     label01:
        $i5 = virtualinvoke r1.<android.view.KeyEvent: int getMetaState()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureMetaStateIsNormalized(int)>($i5);

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        i2 = virtualinvoke r1.<android.view.KeyEvent: int getDeviceId()>();

        i3 = virtualinvoke r1.<android.view.KeyEvent: int getSource()>();

        i4 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        tableswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label05;
            case 2: goto label07;
            default: goto label08;
        };

     label02:
        r2 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState findKeyState(int,int,int,boolean)>(i2, i3, i4, 0);

        if r2 == null goto label04;

        $z1 = r2.<android.view.InputEventConsistencyVerifier$KeyState: boolean unhandled>;

        if $z1 == 0 goto label03;

        r2.<android.view.InputEventConsistencyVerifier$KeyState: boolean unhandled> = 0;

        goto label09;

     label03:
        $i6 = r0.<android.view.InputEventConsistencyVerifier: int mFlags>;

        $i8 = $i6 & 1;

        if $i8 != 0 goto label09;

        $i7 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i7 != 0 goto label09;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_DOWN but key is already down and this event is not a key repeat.");

        goto label09;

     label04:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void addKeyState(int,int,int)>(i2, i3, i4);

        goto label09;

     label05:
        r11 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState findKeyState(int,int,int,boolean)>(i2, i3, i4, 1);

        if r11 != null goto label06;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_UP but key was not down.");

        goto label09;

     label06:
        virtualinvoke r11.<android.view.InputEventConsistencyVerifier$KeyState: void recycle()>();

        goto label09;

     label07:
        goto label09;

     label08:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid action ");

        $r5 = staticinvoke <android.view.KeyEvent: java.lang.String actionToString(int)>(i1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for key event.");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r10);

     label09:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        goto label12;

     label10:
        $r9 := @caughtexception;

        r3 = $r9;

     label11:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void onTrackballEvent(android.view.MotionEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.Throwable r2, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        float $f0, $f1;
        byte $b5, $b6;
        java.lang.StringBuilder $r3, $r4, $r5, $r8;
        java.lang.String $r6, $r7;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: boolean startEvent(android.view.InputEvent,int,java.lang.String)>(r1, i0, "TrackballEvent");

        if $z0 != 0 goto label01;

        return;

     label01:
        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureMetaStateIsNormalized(int)>($i3);

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        i2 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        $i4 = i2 & 4;

        if $i4 == 0 goto label12;

        tableswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label05;
            case 2: goto label08;
            default: goto label09;
        };

     label02:
        $z1 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown>;

        if $z1 == 0 goto label03;

        $z5 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballUnhandled>;

        if $z5 != 0 goto label03;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_DOWN but trackball is already down.");

        goto label04;

     label03:
        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown> = 1;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballUnhandled> = 0;

     label04:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label10;

     label05:
        $z4 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown>;

        if $z4 != 0 goto label06;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_UP but trackball is not down.");

        goto label07;

     label06:
        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballUnhandled> = 0;

     label07:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label10;

     label08:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label10;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid action ");

        $r6 = staticinvoke <android.view.MotionEvent: java.lang.String actionToString(int)>(i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for trackball event.");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r7);

     label10:
        $z2 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown>;

        if $z2 == 0 goto label11;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getPressure()>();

        $b6 = $f1 cmpg 0.0F;

        if $b6 > 0 goto label11;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Trackball is down but pressure is not greater than 0.");

        goto label13;

     label11:
        $z3 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown>;

        if $z3 != 0 goto label13;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getPressure()>();

        $b5 = $f0 cmpl 0.0F;

        if $b5 == 0 goto label13;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Trackball is up but pressure is not equal to 0.");

        goto label13;

     label12:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Source was not SOURCE_CLASS_TRACKBALL.");

     label13:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        goto label16;

     label14:
        $r9 := @caughtexception;

        r2 = $r9;

     label15:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        throw r2;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void onTouchEvent(android.view.MotionEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r2, $r52;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r48, $r49, $r50, $r51;
        java.lang.String $r7, $r11, $r13, $r21, $r29, $r30, $r37, $r42, $r46, $r47;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $z1 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: boolean startEvent(android.view.InputEvent,int,java.lang.String)>(r1, i0, "TouchEvent");

        if $z1 != 0 goto label01;

        return;

     label01:
        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i1 == 0 goto label02;

        if i1 == 3 goto label02;

        if i1 != 4 goto label03;

     label02:
        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z0 = $z3;

        if z0 == 0 goto label06;

        $z4 = r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted>;

        if $z4 != 0 goto label05;

        $z5 = r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamUnhandled>;

        if $z5 == 0 goto label06;

     label05:
        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamUnhandled> = 0;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = 0;

     label06:
        $z2 = r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted>;

        if $z2 == 0 goto label07;

        virtualinvoke r1.<android.view.MotionEvent: void setTainted(boolean)>(1);

     label07:
        $i9 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureMetaStateIsNormalized(int)>($i9);

        i2 = virtualinvoke r1.<android.view.MotionEvent: int getDeviceId()>();

        i3 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        if z0 != 0 goto label09;

        $i24 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamDeviceId>;

        if $i24 == -1 goto label09;

        $i28 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamDeviceId>;

        if $i28 != i2 goto label08;

        $i30 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamSource>;

        if $i30 == i3 goto label09;

     label08:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Touch event stream contains events from multiple sources: previous device id ");

        $i29 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamDeviceId>;

        $r41 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", previous source ");

        $i27 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamSource>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i27);

        $r49 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", new device id ");

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", new source ");

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r45 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r47);

     label09:
        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamDeviceId> = i2;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamSource> = i3;

        i4 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        $i11 = i3 & 2;

        if $i11 == 0 goto label29;

        tableswitch(i1)
        {
            case 0: goto label10;
            case 1: goto label12;
            case 2: goto label13;
            case 3: goto label14;
            case 4: goto label15;
            default: goto label17;
        };

     label10:
        $i10 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        if $i10 == 0 goto label11;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_DOWN but pointers are already down.  Probably missing ACTION_UP from previous gesture.");

     label11:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        $i12 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        $i14 = 1 << $i12;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = $i14;

        goto label30;

     label12:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 0;

        goto label30;

     label13:
        $i15 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        i5 = staticinvoke <java.lang.Integer: int bitCount(int)>($i15);

        if i4 == i5 goto label30;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACTION_MOVE contained ");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pointers but there are currently ");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pointers down.");

        $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r7);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

        goto label30;

     label14:
        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = 0;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 0;

        goto label30;

     label15:
        $i13 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        if $i13 == 0 goto label16;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_OUTSIDE but pointers are still down.");

     label16:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 0;

        goto label30;

     label17:
        i31 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        i6 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        if i31 != 5 goto label23;

        $i21 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        if $i21 != 0 goto label18;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_POINTER_DOWN but no other pointers were down.");

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

     label18:
        if i6 < 0 goto label19;

        if i6 < i4 goto label20;

     label19:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACTION_POINTER_DOWN index is ");

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but the pointer count is ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r30 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r30);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

        goto label22;

     label20:
        i7 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i6);

        i8 = 1 << i7;

        $i22 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        $i23 = $i22 & i8;

        if $i23 == 0 goto label21;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACTION_POINTER_DOWN specified pointer id ");

        $r35 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is already down.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r37);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

        goto label22;

     label21:
        $i25 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        $i26 = $i25 | i8;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = $i26;

     label22:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        goto label30;

     label23:
        if i31 != 6 goto label28;

        if i6 < 0 goto label24;

        if i6 < i4 goto label25;

     label24:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACTION_POINTER_UP index is ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but the pointer count is ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r21);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

        goto label27;

     label25:
        i32 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i6);

        i33 = 1 << i32;

        $i16 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        $i20 = $i16 & i33;

        if $i20 != 0 goto label26;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACTION_POINTER_UP specified pointer id ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i32);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not currently down.");

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r29);

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamIsTainted> = 1;

        goto label27;

     label26:
        $i18 = r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers>;

        $i19 = i33 ^ -1;

        $i17 = $i18 & $i19;

        r0.<android.view.InputEventConsistencyVerifier: int mTouchEventStreamPointers> = $i17;

     label27:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        goto label30;

     label28:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid action ");

        $r11 = staticinvoke <android.view.MotionEvent: java.lang.String actionToString(int)>(i1);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for touch event.");

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r13);

        goto label30;

     label29:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Source was not SOURCE_CLASS_POINTER.");

     label30:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        goto label33;

     label31:
        $r52 := @caughtexception;

        r2 = $r52;

     label32:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        throw r2;

     label33:
        return;

        catch java.lang.Throwable from label07 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    public void onGenericMotionEvent(android.view.MotionEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Throwable r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: boolean startEvent(android.view.InputEvent,int,java.lang.String)>(r1, i0, "GenericMotionEvent");

        if $z0 != 0 goto label01;

        return;

     label01:
        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureMetaStateIsNormalized(int)>($i3);

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        i2 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        $i4 = i2 & 2;

        if $i4 == 0 goto label08;

        tableswitch(i1)
        {
            case 7: goto label03;
            case 8: goto label06;
            case 9: goto label02;
            case 10: goto label04;
            default: goto label07;
        };

     label02:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        r0.<android.view.InputEventConsistencyVerifier: boolean mHoverEntered> = 1;

        goto label11;

     label03:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label11;

     label04:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        $z1 = r0.<android.view.InputEventConsistencyVerifier: boolean mHoverEntered>;

        if $z1 != 0 goto label05;

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("ACTION_HOVER_EXIT without prior ACTION_HOVER_ENTER");

     label05:
        r0.<android.view.InputEventConsistencyVerifier: boolean mHoverEntered> = 0;

        goto label11;

     label06:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label11;

     label07:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Invalid action for generic pointer event.");

        goto label11;

     label08:
        $i5 = i2 & 16;

        if $i5 == 0 goto label11;

        lookupswitch(i1)
        {
            case 2: goto label09;
            default: goto label10;
        };

     label09:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>(r1);

        goto label11;

     label10:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>("Invalid action for generic joystick event.");

     label11:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        goto label14;

     label12:
        $r3 := @caughtexception;

        r2 = $r3;

     label13:
        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void finishEvent()>();

        throw r2;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void onUnhandledEvent(android.view.InputEvent, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.InputEvent r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.view.KeyEvent r2;
        android.view.InputEventConsistencyVerifier$KeyState r3;
        boolean[] $r4, $r5;
        boolean $z0, $z1, $z2;
        android.view.MotionEvent r6;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        $i4 = r0.<android.view.InputEventConsistencyVerifier: int mLastNestingLevel>;

        if i0 == $i4 goto label1;

        return;

     label1:
        $r4 = r0.<android.view.InputEventConsistencyVerifier: boolean[] mRecentEventsUnhandled>;

        if $r4 == null goto label2;

        $r5 = r0.<android.view.InputEventConsistencyVerifier: boolean[] mRecentEventsUnhandled>;

        $i7 = r0.<android.view.InputEventConsistencyVerifier: int mMostRecentEventIndex>;

        $r5[$i7] = 1;

     label2:
        $z0 = r1 instanceof android.view.KeyEvent;

        if $z0 == 0 goto label4;

        r2 = (android.view.KeyEvent) r1;

        i1 = virtualinvoke r2.<android.view.KeyEvent: int getDeviceId()>();

        i2 = virtualinvoke r2.<android.view.KeyEvent: int getSource()>();

        i3 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        r3 = specialinvoke r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState findKeyState(int,int,int,boolean)>(i1, i2, i3, 0);

        if r3 == null goto label3;

        r3.<android.view.InputEventConsistencyVerifier$KeyState: boolean unhandled> = 1;

     label3:
        goto label6;

     label4:
        r6 = (android.view.MotionEvent) r1;

        $z1 = virtualinvoke r6.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z1 == 0 goto label5;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTouchEventStreamUnhandled> = 1;

        goto label6;

     label5:
        $i5 = virtualinvoke r6.<android.view.MotionEvent: int getSource()>();

        $i6 = $i5 & 4;

        if $i6 == 0 goto label6;

        $z2 = r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballDown>;

        if $z2 == 0 goto label6;

        r0.<android.view.InputEventConsistencyVerifier: boolean mTrackballUnhandled> = 1;

     label6:
        return;
    }

    private void ensureMetaStateIsNormalized(int)
    {
        android.view.InputEventConsistencyVerifier r0;
        int i0, i1;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.view.KeyEvent: int normalizeMetaState(int)>(i0);

        if i1 == i0 goto label1;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Metastate not normalized.  Was 0x%08x but expected 0x%08x.", $r1);

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r4);

     label1:
        return;
    }

    private void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.MotionEvent r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if i0 == 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pointer count is ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but it should always be 1 for ");

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $r6 = staticinvoke <android.view.MotionEvent: java.lang.String actionToString(int)>($i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r8);

     label1:
        return;
    }

    private void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.MotionEvent r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getHistorySize()>();

        if i0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("History size is ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but it should always be 0 for ");

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $r6 = staticinvoke <android.view.MotionEvent: java.lang.String actionToString(int)>($i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>($r8);

     label1:
        return;
    }

    private boolean startEvent(android.view.InputEvent, int, java.lang.String)
    {
        android.view.InputEventConsistencyVerifier r0;
        android.view.InputEvent r1;
        int i0, i1, $i2, $i3;
        java.lang.String r2, $r3;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 = virtualinvoke r1.<android.view.InputEvent: int getSequenceNumber()>();

        $i2 = r0.<android.view.InputEventConsistencyVerifier: int mLastEventSeq>;

        if i1 != $i2 goto label1;

        $i3 = r0.<android.view.InputEventConsistencyVerifier: int mLastNestingLevel>;

        if i0 >= $i3 goto label1;

        $r3 = r0.<android.view.InputEventConsistencyVerifier: java.lang.String mLastEventType>;

        if r2 != $r3 goto label1;

        return 0;

     label1:
        if i0 <= 0 goto label2;

        r0.<android.view.InputEventConsistencyVerifier: int mLastEventSeq> = i1;

        r0.<android.view.InputEventConsistencyVerifier: java.lang.String mLastEventType> = r2;

        r0.<android.view.InputEventConsistencyVerifier: int mLastNestingLevel> = i0;

        goto label3;

     label2:
        r0.<android.view.InputEventConsistencyVerifier: int mLastEventSeq> = -1;

        r0.<android.view.InputEventConsistencyVerifier: java.lang.String mLastEventType> = null;

        r0.<android.view.InputEventConsistencyVerifier: int mLastNestingLevel> = 0;

     label3:
        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent> = r1;

        r0.<android.view.InputEventConsistencyVerifier: java.lang.String mCurrentEventType> = r2;

        return 1;
    }

    private void finishEvent()
    {
        android.view.InputEventConsistencyVerifier r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i10;
        android.view.InputEvent r1, $r5, $r6, $r8, $r11, $r15, $r22, $r30;
        java.lang.StringBuilder $r2, $r14, $r16, $r17, $r19, $r20, $r25, $r27, $r31, $r33, $r36;
        android.view.InputEvent[] $r3, $r4, $r7, $r10, $r13, $r24, $r32;
        boolean[] $r9, $r12, $r35;
        boolean $z0, $z1;
        java.lang.Object $r18;
        java.lang.String $r26, $r28;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        $r2 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        if $r2 == null goto label5;

        $r14 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $i4 = virtualinvoke $r14.<java.lang.StringBuilder: int length()>();

        if $i4 == 0 goto label5;

        $r15 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent>;

        $z0 = virtualinvoke $r15.<android.view.InputEvent: boolean isTainted()>();

        if $z0 != 0 goto label4;

        $r16 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  in ");

        $r18 = r0.<android.view.InputEventConsistencyVerifier: java.lang.Object mCaller>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  ");

        $r25 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $r22 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent>;

        staticinvoke <android.view.InputEventConsistencyVerifier: void appendEvent(java.lang.StringBuilder,int,android.view.InputEvent,boolean)>($r25, 0, $r22, 0);

        $r24 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        if $r24 == null goto label3;

        $r31 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  -- recent events --");

        i0 = 0;

     label1:
        if i0 >= 5 goto label3;

        $i6 = r0.<android.view.InputEventConsistencyVerifier: int mMostRecentEventIndex>;

        $i7 = $i6 + 5;

        $i8 = $i7 - i0;

        i1 = $i8 % 5;

        $r32 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        r1 = $r32[i1];

        if r1 != null goto label2;

        goto label3;

     label2:
        $r33 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  ");

        $r36 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $i9 = i0 + 1;

        $r35 = r0.<android.view.InputEventConsistencyVerifier: boolean[] mRecentEventsUnhandled>;

        $z1 = $r35[i1];

        staticinvoke <android.view.InputEventConsistencyVerifier: void appendEvent(java.lang.StringBuilder,int,android.view.InputEvent,boolean)>($r36, $i9, r1, $z1);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r28 = r0.<android.view.InputEventConsistencyVerifier: java.lang.String mLogTag>;

        $r27 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r28, $r26);

        $r30 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent>;

        virtualinvoke $r30.<android.view.InputEvent: void setTainted(boolean)>(1);

     label4:
        $r17 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r17.<java.lang.StringBuilder: void setLength(int)>(0);

     label5:
        $r3 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        if $r3 != null goto label6;

        $r13 = newarray (android.view.InputEvent)[5];

        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents> = $r13;

        $r12 = newarray (boolean)[5];

        r0.<android.view.InputEventConsistencyVerifier: boolean[] mRecentEventsUnhandled> = $r12;

     label6:
        $i2 = r0.<android.view.InputEventConsistencyVerifier: int mMostRecentEventIndex>;

        $i3 = $i2 + 1;

        i10 = $i3 % 5;

        r0.<android.view.InputEventConsistencyVerifier: int mMostRecentEventIndex> = i10;

        $r4 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        $r5 = $r4[i10];

        if $r5 == null goto label7;

        $r10 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        $r11 = $r10[i10];

        virtualinvoke $r11.<android.view.InputEvent: void recycle()>();

     label7:
        $r7 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent[] mRecentEvents>;

        $r6 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent>;

        $r8 = virtualinvoke $r6.<android.view.InputEvent: android.view.InputEvent copy()>();

        $r7[i10] = $r8;

        $r9 = r0.<android.view.InputEventConsistencyVerifier: boolean[] mRecentEventsUnhandled>;

        $r9[i10] = 0;

        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEvent mCurrentEvent> = null;

        r0.<android.view.InputEventConsistencyVerifier: java.lang.String mCurrentEventType> = null;

        return;
    }

    private static void appendEvent(java.lang.StringBuilder, int, android.view.InputEvent, boolean)
    {
        java.lang.StringBuilder r0, $r2, $r3;
        int i0;
        android.view.InputEvent r1;
        boolean z0;
        long $l1;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.InputEvent;

        z0 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": sent at ");

        $l1 = virtualinvoke r1.<android.view.InputEvent: long getEventTimeNano()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        if z0 == 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(unhandled) ");

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        return;
    }

    private void problem(java.lang.String)
    {
        android.view.InputEventConsistencyVerifier r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r9, $r10, $r12;
        int $i0;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        if $r2 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage> = $r12;

     label1:
        $r3 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label2;

        $r9 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        $r8 = r0.<android.view.InputEventConsistencyVerifier: java.lang.String mCurrentEventType>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        goto label3;

     label2:
        $r4 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  ");

     label3:
        $r6 = r0.<android.view.InputEventConsistencyVerifier: java.lang.StringBuilder mViolationMessage>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;
    }

    private android.view.InputEventConsistencyVerifier$KeyState findKeyState(int, int, int, boolean)
    {
        android.view.InputEventConsistencyVerifier r0;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean z0;
        android.view.InputEventConsistencyVerifier$KeyState r1, r2, $r3, $r4;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 = null;

        r2 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList>;

     label1:
        if r2 == null goto label6;

        $i3 = r2.<android.view.InputEventConsistencyVerifier$KeyState: int deviceId>;

        if $i3 != i0 goto label5;

        $i4 = r2.<android.view.InputEventConsistencyVerifier$KeyState: int source>;

        if $i4 != i1 goto label5;

        $i5 = r2.<android.view.InputEventConsistencyVerifier$KeyState: int keyCode>;

        if $i5 != i2 goto label5;

        if z0 == 0 goto label4;

        if r1 == null goto label2;

        $r4 = r2.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next>;

        r1.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next> = $r4;

        goto label3;

     label2:
        $r3 = r2.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next>;

        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList> = $r3;

     label3:
        r2.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next> = null;

     label4:
        return r2;

     label5:
        r1 = r2;

        r2 = r2.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next>;

        goto label1;

     label6:
        return null;
    }

    private void addKeyState(int, int, int)
    {
        android.view.InputEventConsistencyVerifier r0;
        int i0, i1, i2;
        android.view.InputEventConsistencyVerifier$KeyState r1, $r2;

        r0 := @this: android.view.InputEventConsistencyVerifier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState obtain(int,int,int)>(i0, i1, i2);

        $r2 = r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList>;

        r1.<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState next> = $r2;

        r0.<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState mKeyStateList> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        <android.view.InputEventConsistencyVerifier: int FLAG_RAW_DEVICE_INPUT> = 1;

        <android.view.InputEventConsistencyVerifier: int RECENT_EVENTS_TO_LOG> = 5;

        <android.view.InputEventConsistencyVerifier: java.lang.String EVENT_TYPE_GENERIC_MOTION> = "GenericMotionEvent";

        <android.view.InputEventConsistencyVerifier: java.lang.String EVENT_TYPE_TOUCH> = "TouchEvent";

        <android.view.InputEventConsistencyVerifier: java.lang.String EVENT_TYPE_TRACKBALL> = "TrackballEvent";

        <android.view.InputEventConsistencyVerifier: java.lang.String EVENT_TYPE_KEY> = "KeyEvent";

        $r1 = "eng";

        $r0 = <android.os.Build: java.lang.String TYPE>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        <android.view.InputEventConsistencyVerifier: boolean IS_ENG_BUILD> = $z0;

        return;
    }
}
