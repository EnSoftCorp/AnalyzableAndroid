public class android.filterpacks.videoproc.BackDropperFilter extends android.filterfw.core.Filter
{
    private final int BACKGROUND_STRETCH;
    private final int BACKGROUND_FIT;
    private final int BACKGROUND_FILL_CROP;
    private int mBackgroundFitMode;
    private int mLearningDuration;
    private int mLearningVerifyDuration;
    private float mAcceptStddev;
    private float mHierarchyLrgScale;
    private float mHierarchyMidScale;
    private float mHierarchySmlScale;
    private int mMaskWidthExp;
    private int mMaskHeightExp;
    private int mHierarchyLrgExp;
    private int mHierarchyMidExp;
    private int mHierarchySmlExp;
    private float mLumScale;
    private float mChromaScale;
    private float mMaskBg;
    private float mMaskFg;
    private float mExposureChange;
    private float mWhiteBalanceRedChange;
    private float mWhiteBalanceBlueChange;
    private int mAutoWBToggle;
    private float mAdaptRateLearning;
    private float mAdaptRateBg;
    private float mAdaptRateFg;
    private float mVerifyRate;
    private android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener;
    private boolean mUseTheForce;
    private boolean mProvideDebugOutputs;
    private boolean mMirrorBg;
    private int mOrientation;
    private static final int DEFAULT_LEARNING_DURATION;
    private static final int DEFAULT_LEARNING_VERIFY_DURATION;
    private static final float DEFAULT_ACCEPT_STDDEV;
    private static final float DEFAULT_HIER_LRG_SCALE;
    private static final float DEFAULT_HIER_MID_SCALE;
    private static final float DEFAULT_HIER_SML_SCALE;
    private static final int DEFAULT_MASK_WIDTH_EXPONENT;
    private static final int DEFAULT_MASK_HEIGHT_EXPONENT;
    private static final int DEFAULT_HIER_LRG_EXPONENT;
    private static final int DEFAULT_HIER_MID_EXPONENT;
    private static final int DEFAULT_HIER_SML_EXPONENT;
    private static final float DEFAULT_Y_SCALE_FACTOR;
    private static final float DEFAULT_UV_SCALE_FACTOR;
    private static final float DEFAULT_MASK_BLEND_BG;
    private static final float DEFAULT_MASK_BLEND_FG;
    private static final float DEFAULT_EXPOSURE_CHANGE;
    private static final float DEFAULT_WHITE_BALANCE_RED_CHANGE;
    private static final float DEFAULT_WHITE_BALANCE_BLUE_CHANGE;
    private static final int DEFAULT_WHITE_BALANCE_TOGGLE;
    private static final float DEFAULT_LEARNING_ADAPT_RATE;
    private static final float DEFAULT_ADAPT_RATE_BG;
    private static final float DEFAULT_ADAPT_RATE_FG;
    private static final float DEFAULT_MASK_VERIFY_RATE;
    private static final int DEFAULT_LEARNING_DONE_THRESHOLD;
    private static final float[] DEFAULT_BG_FIT_TRANSFORM;
    private static final java.lang.String MASK_SMOOTH_EXPONENT;
    private static final java.lang.String DISTANCE_STORAGE_SCALE;
    private static final java.lang.String VARIANCE_STORAGE_SCALE;
    private static final java.lang.String DEFAULT_AUTO_WB_SCALE;
    private static final java.lang.String MIN_VARIANCE;
    private static final java.lang.String RGB_TO_YUV_MATRIX;
    private static final java.lang.String[] mInputNames;
    private static final java.lang.String[] mOutputNames;
    private static final java.lang.String[] mDebugOutputNames;
    private android.filterfw.core.FrameFormat mOutputFormat;
    private android.filterfw.core.MutableFrameFormat mMemoryFormat;
    private android.filterfw.core.MutableFrameFormat mMaskFormat;
    private android.filterfw.core.MutableFrameFormat mAverageFormat;
    private final boolean mLogVerbose;
    private static final java.lang.String TAG;
    private static java.lang.String mSharedUtilShader;
    private static final java.lang.String mBgDistanceShader;
    private static final java.lang.String mBgMaskShader;
    private static final java.lang.String mAutomaticWhiteBalance;
    private static final java.lang.String mBgSubtractShader;
    private static final java.lang.String mBgSubtractForceShader;
    private static final java.lang.String mUpdateBgModelMeanShader;
    private static final java.lang.String mUpdateBgModelVarianceShader;
    private static final java.lang.String mMaskVerifyShader;
    private android.filterfw.core.ShaderProgram mBgDistProgram;
    private android.filterfw.core.ShaderProgram mBgMaskProgram;
    private android.filterfw.core.ShaderProgram mBgSubtractProgram;
    private android.filterfw.core.ShaderProgram mBgUpdateMeanProgram;
    private android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram;
    private android.filterfw.core.ShaderProgram mCopyOutProgram;
    private android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram;
    private android.filterfw.core.ShaderProgram mMaskVerifyProgram;
    private android.filterfw.core.ShaderProgram copyShaderProgram;
    private boolean mPingPong;
    private android.filterfw.core.GLFrame[] mBgMean;
    private android.filterfw.core.GLFrame[] mBgVariance;
    private android.filterfw.core.GLFrame[] mMaskVerify;
    private android.filterfw.core.GLFrame mDistance;
    private android.filterfw.core.GLFrame mAutoWB;
    private android.filterfw.core.GLFrame mMask;
    private android.filterfw.core.GLFrame mVideoInput;
    private android.filterfw.core.GLFrame mBgInput;
    private android.filterfw.core.GLFrame mMaskAverage;
    private boolean isOpen;
    private int mFrameCount;
    private boolean mStartLearning;
    private boolean mBackgroundFitModeChanged;
    private float mRelativeAspect;
    private int mPyramidDepth;
    private int mSubsampleLevel;
    private long startTime;

    public void <init>(java.lang.String)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        java.lang.String r1, r2, $r9, $r13;
        boolean $z0, $z1;
        int $i0;
        float $f0, $f1, $f2, $f3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r14;
        java.lang.NumberFormatException $r11;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.filterfw.core.Filter: void <init>(java.lang.String)>(r1);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_STRETCH> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_FIT> = 1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int BACKGROUND_FILL_CROP> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mBackgroundFitMode> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration> = 40;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration> = 10;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev> = 0.85F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale> = 0.7F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale> = 0.6F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale> = 0.5F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp> = 8;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp> = 8;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp> = 3;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp> = 2;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale> = 0.4F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale> = 1.35F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg> = 0.65F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg> = 0.95F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange> = 1.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning> = 0.2F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg> = 0.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mVerifyRate> = 0.25F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener> = null;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mUseTheForce> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mMirrorBg> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mOrientation> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = -1L;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("BackDropperFilter", 2);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose> = $z0;

        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.media.effect.bgdropper.adj");

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

     label1:
        $f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);

        $f2 = $f0 + $f1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev> = $f2;

        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjusting accept threshold by ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", now ");

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r9);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Badly formatted property ro.media.effect.bgdropper.adj: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BackDropperFilter", $r13);

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void setupPorts()
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.MutableFrameFormat r1;
        java.lang.String[] r2, r4, r6;
        int i0, i1, i2, i3, i4, i5;
        java.lang.String r3, r5, r7;
        boolean $z0;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 = staticinvoke <android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>(3, 0);

        r2 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mInputNames>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addMaskedInputPort(java.lang.String,android.filterfw.core.FrameFormat)>(r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        r4 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames>;

        i2 = lengthof r4;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r5 = r4[i3];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>(r5, "video");

        i3 = i3 + 1;

        goto label3;

     label4:
        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs>;

        if $z0 == 0 goto label6;

        r6 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mDebugOutputNames>;

        i4 = lengthof r6;

        i5 = 0;

     label5:
        if i5 >= i4 goto label6;

        r7 = r6[i5];

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void addOutputBasedOnInput(java.lang.String,java.lang.String)>(r7, "video");

        i5 = i5 + 1;

        goto label5;

     label6:
        return;
    }

    public android.filterfw.core.FrameFormat getOutputFormat(java.lang.String, android.filterfw.core.FrameFormat)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        java.lang.String r1;
        android.filterfw.core.FrameFormat r2;
        android.filterfw.core.MutableFrameFormat r3;
        java.lang.String[] $r4;
        java.util.List $r5;
        boolean $z0;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FrameFormat;

        r3 = virtualinvoke r2.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        $r4 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r3.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(0, 0);

     label1:
        return r3;
    }

    private boolean createMemoryFormat(android.filterfw.core.FrameFormat)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FrameFormat r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        android.filterfw.core.MutableFrameFormat $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.RuntimeException $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.lang.StringBuilder $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27;
        boolean $z0;
        java.lang.String $r16, $r25, $r28;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        $r2 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        if $r2 == null goto label1;

        return 0;

     label1:
        $i6 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getWidth()>();

        if $i6 == 0 goto label2;

        $i7 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getHeight()>();

        if $i7 != 0 goto label3;

     label2:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Attempting to process input frame with unknown size");

        throw $r3;

     label3:
        $r4 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat> = $r4;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $d0 = (double) $i8;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        i0 = (int) $d1;

        $i9 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $d2 = (double) $i9;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d2);

        i1 = (int) $d3;

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        virtualinvoke $r5.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i0, i1);

        $i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i11 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i11);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth> = $i12;

        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r7 = virtualinvoke $r6.<android.filterfw.core.MutableFrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat> = $r7;

        $i13 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i15 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getWidth()>();

        $i14 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: int pyramidLevel(int)>($i15);

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i14);

        $i16 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i18 = virtualinvoke r1.<android.filterfw.core.FrameFormat: int getHeight()>();

        $i17 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: int pyramidLevel(int)>($i18);

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i16, $i17);

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i3);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth> = $i19;

        $d4 = (double) i2;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d4);

        $i20 = (int) $d5;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i20);

        $d6 = (double) i3;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d6);

        $i22 = (int) $d7;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i22);

        $r8 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        virtualinvoke $r8.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(i4, i5);

        $i26 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth>;

        $i25 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskWidthExp>;

        $i21 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mMaskHeightExp>;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>($i25, $i21);

        $i24 = $i26 - $i23;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel> = $i24;

        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mask frames size ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pyramid levels ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Memory frames size ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r28);

     label4:
        $r11 = virtualinvoke r1.<android.filterfw.core.FrameFormat: android.filterfw.core.MutableFrameFormat mutableCopy()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat> = $r11;

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat>;

        virtualinvoke $r10.<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)>(1, 1);

        return 1;
    }

    public void prepare(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        boolean $z0;
        android.filterfw.core.GLFrame[] $r2, $r3, $r4;
        android.filterfw.core.ShaderProgram $r5;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Preparing BackDropperFilter!");

     label1:
        $r2 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean> = $r2;

        $r3 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance> = $r3;

        $r4 = newarray (android.filterfw.core.GLFrame)[2];

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify> = $r4;

        $r5 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r1);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram> = $r5;

        return;
    }

    private void allocateFrames(android.filterfw.core.FrameFormat, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FrameFormat r1;
        android.filterfw.core.FilterContext r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, i20;
        byte[] r3, r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.filterfw.core.MutableFrameFormat $r6, $r8, $r13, $r17, $r21, $r25, $r26, $r123, $r131, $r142, $r144;
        android.filterfw.core.FrameManager $r7, $r10, $r14, $r18, $r22, $r29, $r129, $r132, $r139;
        android.filterfw.core.Frame $r9, $r12, $r16, $r20, $r24, $r27, $r134, $r141, $r145;
        android.filterfw.core.GLFrame $r11, $r15, $r19, $r23, $r28, $r32, $r127, $r133, $r136, $r138, $r143, $r146;
        java.lang.StringBuilder $r30, $r35, $r36, $r39, $r41, $r44, $r60, $r61, $r63, $r65, $r82, $r84, $r87, $r89, $r90, $r91, $r95, $r96, $r103, $r105, $r106, $r112, $r116, $r118, $r120, $r121, $r122, $r124, $r126;
        java.lang.String $r31, $r34, $r40, $r43, $r62, $r70, $r85, $r86, $r88, $r92, $r94, $r97, $r104, $r111, $r115, $r119, $r125;
        android.filterfw.core.ShaderProgram $r33, $r38, $r42, $r46, $r47, $r49, $r51, $r53, $r55, $r56, $r58, $r64, $r68, $r69, $r73, $r75, $r76, $r78, $r80, $r83, $r93, $r98, $r99, $r101, $r102, $r108, $r109, $r113, $r117;
        java.lang.Float $r37, $r45, $r50, $r52, $r54, $r57, $r59, $r66, $r67, $r72, $r74, $r77, $r79, $r81, $r100, $r107, $r110;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        float[] $r48, $r71, r148;
        java.lang.Integer $r114;
        android.filterfw.core.GLFrame[] $r128, $r130, $r135, $r137, $r140, $r147;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FrameFormat;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: boolean createMemoryFormat(android.filterfw.core.FrameFormat)>(r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z1 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Allocating BackDropperFilter frames");

     label02:
        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        i0 = virtualinvoke $r6.<android.filterfw.core.MutableFrameFormat: int getSize()>();

        r3 = newarray (byte)[i0];

        r4 = newarray (byte)[i0];

        r5 = newarray (byte)[i0];

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        r3[i1] = -128;

        r4[i1] = 10;

        r5[i1] = 0;

        i1 = i1 + 1;

        goto label03;

     label04:
        i20 = 0;

     label05:
        if i20 >= 2 goto label06;

        $r140 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r139 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r142 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r141 = virtualinvoke $r139.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r142);

        $r136 = (android.filterfw.core.GLFrame) $r141;

        $r140[i20] = $r136;

        $r135 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r138 = $r135[i20];

        virtualinvoke $r138.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r3, 0, i0);

        $r137 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r132 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r131 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r134 = virtualinvoke $r132.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r131);

        $r133 = (android.filterfw.core.GLFrame) $r134;

        $r137[i20] = $r133;

        $r128 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r127 = $r128[i20];

        virtualinvoke $r127.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r4, 0, i0);

        $r130 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r129 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r144 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r145 = virtualinvoke $r129.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r144);

        $r146 = (android.filterfw.core.GLFrame) $r145;

        $r130[i20] = $r146;

        $r147 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r143 = $r147[i20];

        virtualinvoke $r143.<android.filterfw.core.GLFrame: void setData(byte[],int,int)>(r5, 0, i0);

        i20 = i20 + 1;

        goto label05;

     label06:
        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label07;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Done allocating texture for Mean and Variance objects!");

     label07:
        $r7 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r8 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r9 = virtualinvoke $r7.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r8);

        $r11 = (android.filterfw.core.GLFrame) $r9;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance> = $r11;

        $r10 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r13 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMaskFormat>;

        $r12 = virtualinvoke $r10.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r13);

        $r15 = (android.filterfw.core.GLFrame) $r12;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask> = $r15;

        $r14 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r17 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat>;

        $r16 = virtualinvoke $r14.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r17);

        $r19 = (android.filterfw.core.GLFrame) $r16;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB> = $r19;

        $r18 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r21 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $r20 = virtualinvoke $r18.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r21);

        $r23 = (android.filterfw.core.GLFrame) $r20;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput> = $r23;

        $r22 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r25 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $r24 = virtualinvoke $r22.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r25);

        $r28 = (android.filterfw.core.GLFrame) $r24;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput> = $r28;

        $r29 = virtualinvoke r2.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r26 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mAverageFormat>;

        $r27 = virtualinvoke $r29.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r26);

        $r32 = (android.filterfw.core.GLFrame) $r27;

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage> = $r32;

        $r33 = new android.filterfw.core.ShaderProgram;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n\n  float dist_y = gauss_dist_y(fg.r, mean.r, variance.r);\n  float dist_uv = gauss_dist_uv(fg.gb, mean.gb, variance.gb);\n  gl_FragColor = vec4(0.5*fg.rg, dist_scale*dist_y, dist_scale*dist_uv);\n}\n");

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r34);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgDistProgram> = $r33;

        $r38 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgDistProgram>;

        $i2 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f0 = (float) $i2;

        $r37 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r38.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r37);

        $r42 = new android.filterfw.core.ShaderProgram;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform float accept_variance;\nuniform vec2 yuv_weights;\nuniform float scale_lrg;\nuniform float scale_mid;\nuniform float scale_sml;\nuniform float exp_lrg;\nuniform float exp_mid;\nuniform float exp_sml;\nvarying vec2 v_texcoord;\nbool is_fg(vec2 dist_yc, float accept_variance) {\n  return ( dot(yuv_weights, dist_yc) >= accept_variance );\n}\nvoid main() {\n  vec4 dist_lrg_sc = texture2D(tex_sampler_0, v_texcoord, exp_lrg);\n  vec4 dist_mid_sc = texture2D(tex_sampler_0, v_texcoord, exp_mid);\n  vec4 dist_sml_sc = texture2D(tex_sampler_0, v_texcoord, exp_sml);\n  vec2 dist_lrg = inv_dist_scale * dist_lrg_sc.ba;\n  vec2 dist_mid = inv_dist_scale * dist_mid_sc.ba;\n  vec2 dist_sml = inv_dist_scale * dist_sml_sc.ba;\n  vec2 norm_dist = 0.75 * dist_sml / accept_variance;\n  bool is_fg_lrg = is_fg(dist_lrg, accept_variance * scale_lrg);\n  bool is_fg_mid = is_fg_lrg || is_fg(dist_mid, accept_variance * scale_mid);\n  float is_fg_sml =\n      float(is_fg_mid || is_fg(dist_sml, accept_variance * scale_sml));\n  float alpha = 0.5 * is_fg_sml + 0.3 * float(is_fg_mid) + 0.2 * float(is_fg_lrg);\n  gl_FragColor = vec4(alpha, norm_dist, is_fg_sml);\n}\n");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r43);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram> = $r42;

        $r46 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f1 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f2 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f3 = $f1 * $f2;

        $r45 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r46.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("accept_variance", $r45);

        $r48 = newarray (float)[2];

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale>;

        $r48[0] = $f5;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale>;

        $r48[1] = $f4;

        r148 = $r48;

        $r47 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        virtualinvoke $r47.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("yuv_weights", r148);

        $r51 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f7 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale>;

        $r52 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r51.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_lrg", $r52);

        $r49 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f6 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale>;

        $r50 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r49.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_mid", $r50);

        $r53 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale>;

        $r54 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r53.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_sml", $r54);

        $r56 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i4 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i3 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp>;

        $i5 = $i4 + $i3;

        $f8 = (float) $i5;

        $r57 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r56.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_lrg", $r57);

        $r55 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i7 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp>;

        $i6 = $i7 + $i8;

        $f10 = (float) $i6;

        $r59 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        virtualinvoke $r55.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_mid", $r59);

        $r58 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i11 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp>;

        $i9 = $i10 + $i11;

        $f11 = (float) $i9;

        $r66 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f11);

        virtualinvoke $r58.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_sml", $r66);

        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mUseTheForce>;

        if $z3 == 0 goto label08;

        $r117 = new android.filterfw.core.ShaderProgram;

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r115 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r116 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r115);

        $r120 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n");

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  vec4 ghost_rgb = (fg_adjusted * 0.7 + vec4(0.3,0.3,0.4,0.))*0.65 + \n                   0.35*bg_rgb;\n  float glow_start = 0.75 * mask_blend_bg; \n  float glow_max   = mask_blend_bg; \n  gl_FragColor = mask.a < glow_start ? bg_rgb : \n                 mask.a < glow_max ? mix(bg_rgb, vec4(0.9,0.9,1.0,1.0), \n                                     (mask.a - glow_start) / (glow_max - glow_start) ) : \n                 mask.a < mask_blend_fg ? mix(vec4(0.9,0.9,1.0,1.0), ghost_rgb, \n                                    (mask.a - glow_max) / (mask_blend_fg - glow_max) ) : \n                 ghost_rgb;\n}\n");

        $r119 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r117.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r119);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram> = $r117;

        goto label09;

     label08:
        $r64 = new android.filterfw.core.ShaderProgram;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r62 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r63 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r60 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

        $r70 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r70);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram> = $r64;

     label09:
        $r69 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $r71 = <android.filterpacks.videoproc.BackDropperFilter: float[] DEFAULT_BG_FIT_TRANSFORM>;

        virtualinvoke $r69.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_fit_transform", $r71);

        $r68 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f13 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg>;

        $r67 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f13);

        virtualinvoke $r68.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_bg", $r67);

        $r75 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f12 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg>;

        $r74 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        virtualinvoke $r75.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_fg", $r74);

        $r73 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f15 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange>;

        $r72 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f15);

        virtualinvoke $r73.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exposure_change", $r72);

        $r80 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f14 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange>;

        $r79 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f14);

        virtualinvoke $r80.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalanceblue_change", $r79);

        $r78 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f16 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange>;

        $r77 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f16);

        virtualinvoke $r78.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalancered_change", $r77);

        $r76 = new android.filterfw.core.ShaderProgram;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r88 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 new_mean = mix(mean, fg, alpha);\n  gl_FragColor = new_mean;\n}\n");

        $r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r76.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r92);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram> = $r76;

        $r93 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $i12 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f17 = (float) $i12;

        $r81 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f17);

        virtualinvoke $r93.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r81);

        $r83 = new android.filterfw.core.ShaderProgram;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r85 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_3, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 cur_variance = (fg-mean)*(fg-mean);\n  vec4 new_variance = mix(variance, cur_variance, alpha);\n  new_variance = max(new_variance, vec4(min_variance));\n  gl_FragColor = var_scale * new_variance;\n}\n");

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r83.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r86);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram> = $r83;

        $r99 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $i14 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $f19 = (float) $i14;

        $r100 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f19);

        virtualinvoke $r99.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("subsample_level", $r100);

        $r101 = staticinvoke <android.filterfw.core.ShaderProgram: android.filterfw.core.ShaderProgram createIdentity(android.filterfw.core.FilterContext)>(r2);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram> = $r101;

        $r102 = new android.filterfw.core.ShaderProgram;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r94 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r95 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float pyramid_depth;\nuniform bool autowb_toggle;\nvarying vec2 v_texcoord;\nvoid main() {\n   vec4 mean_video = texture2D(tex_sampler_0, v_texcoord, pyramid_depth);\n   vec4 mean_bg = texture2D(tex_sampler_1, v_texcoord, pyramid_depth);\n   float green_normalizer = mean_video.g / mean_bg.g;\n   vec4 adjusted_value = vec4(mean_bg.r / mean_video.r * green_normalizer, 1., \n                         mean_bg.b / mean_video.b * green_normalizer, 1.) * auto_wb_scale; \n   gl_FragColor = autowb_toggle ? adjusted_value : vec4(auto_wb_scale);\n}\n");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r102.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r97);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram> = $r102;

        $r98 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $i13 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mPyramidDepth>;

        $f18 = (float) $i13;

        $r110 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f18);

        virtualinvoke $r98.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("pyramid_depth", $r110);

        $r109 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $i15 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle>;

        $r114 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        virtualinvoke $r109.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("autowb_toggle", $r114);

        $r113 = new android.filterfw.core.ShaderProgram;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r111 = <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader>;

        $r106 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111);

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float verify_rate;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 lastmask = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  float newmask = mix(lastmask.a, mask.a, verify_rate);\n  gl_FragColor = vec4(0., 0., 0., newmask);\n}\n");

        $r104 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r113.<android.filterfw.core.ShaderProgram: void <init>(android.filterfw.core.FilterContext,java.lang.String)>(r2, $r104);

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mMaskVerifyProgram> = $r113;

        $r108 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mMaskVerifyProgram>;

        $f20 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mVerifyRate>;

        $r107 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f20);

        virtualinvoke $r108.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("verify_rate", $r107);

        $z4 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z4 == 0 goto label10;

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shader width set to ");

        $r123 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        $i18 = virtualinvoke $r123.<android.filterfw.core.MutableFrameFormat: int getWidth()>();

        $r126 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r125 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r125);

     label10:
        r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect> = 1.0F;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = 0;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

        return;
    }

    public void process(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        android.filterfw.core.Frame r2, r3, r140, r144, r145;
        byte b0, b1, $b11, $b21, $b22, $b34, $b36, $b37;
        android.filterfw.core.Frame[] r4, r5, r6, $r18, $r30, $r41, $r45, $r60, $r113, r141, r142, r143;
        byte[] r7;
        short s2;
        android.filterfw.core.FrameFormat $r8, $r37, $r87;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.filterfw.core.GLFrame $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r19, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r35, $r36, $r39, $r40, $r44, $r46, $r49, $r51, $r52, $r55, $r57, $r59, $r61, $r62, $r64, $r67, $r69, $r92, $r94, $r95, $r97, $r104, $r106, $r109, $r110, $r111, $r112, $r118, $r132, $r133;
        android.filterfw.core.ShaderProgram $r11, $r13, $r22, $r31, $r34, $r43, $r47, $r68, $r86, $r89, $r96, $r108, $r115, $r119, $r122, $r124, $r126, $r128, $r130, $r134, $r136, $r138;
        android.filterfw.core.GLFrame[] $r20, $r23, $r48, $r50, $r53, $r54, $r56, $r58, $r63, $r65, $r66, $r93, $r105, $r107, $r114, $r116, $r117, $r120;
        android.filterfw.core.FrameManager $r38, $r79, $r91;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        long $l12, $l15, $l16, $l17, $l18, $l19, l39;
        java.lang.StringBuilder $r70, $r72, $r74, $r75, $r82;
        java.lang.Object[] $r71, $r78, $r101;
        android.filterfw.core.GLEnvironment $r73, $r80;
        java.lang.Double $r76, $r84;
        java.lang.String $r77, $r81, $r83, $r99;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.filterfw.core.MutableFrameFormat $r90;
        java.lang.Integer $r98, $r100;
        android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener $r102, $r103;
        java.lang.Float $r121, $r123, $r125, $r127, $r129, $r131, $r135, $r137;
        java.nio.ByteBuffer r139;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        r2 = virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("video");

        r3 = virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.Frame pullInput(java.lang.String)>("background");

        $r8 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void allocateFrames(android.filterfw.core.FrameFormat,android.filterfw.core.FilterContext)>($r8, r1);

        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning>;

        if $z0 == 0 goto label02;

        $z10 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z10 == 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Starting learning");

     label01:
        $r130 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f8 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r131 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r130.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r131);

        $r128 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f7 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r129 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r128.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r129);

        $r138 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f6 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r137 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r138.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r137);

        $r136 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateLearning>;

        $r135 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r136.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r135);

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = 0;

     label02:
        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong>;

        if $z1 == 0 goto label03;

        $b37 = 0;

        goto label04;

     label03:
        $b37 = 1;

     label04:
        b0 = $b37;

        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong>;

        if $z3 == 0 goto label05;

        $b36 = 1;

        goto label06;

     label05:
        $b36 = 0;

     label06:
        b1 = $b36;

        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong>;

        if $z2 != 0 goto label07;

        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mPingPong> = $z11;

        $z4 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged>;

        specialinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void updateBgScaling(android.filterfw.core.Frame,android.filterfw.core.Frame,boolean)>(r2, r3, $z4);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged> = 0;

        $r11 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r9 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r11.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, $r9);

        $r13 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r13.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r3, $r10);

        $r12 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r12.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r15 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r15.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r14 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r14.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r16 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r16.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $z5 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning>;

        if $z5 == 0 goto label09;

        $r134 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r133 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r120 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r132 = $r120[b0];

        virtualinvoke $r134.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r133, $r132);

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 0;

     label09:
        $r18 = newarray (android.filterfw.core.Frame)[3];

        $r17 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r18[0] = $r17;

        $r20 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r19 = $r20[b0];

        $r18[1] = $r19;

        $r23 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r24 = $r23[b0];

        $r18[2] = $r24;

        r4 = $r18;

        $r22 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgDistProgram>;

        $r21 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r22.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r4, $r21);

        $r27 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r27.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r28 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r28.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r31 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $r26 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        $r25 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r31.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r26, $r25);

        $r32 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r32.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r29 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r29.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r30 = newarray (android.filterfw.core.Frame)[2];

        $r35 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r30[0] = $r35;

        $r36 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        $r30[1] = $r36;

        r5 = $r30;

        $r34 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $r33 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        virtualinvoke $r34.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r5, $r33);

        $i3 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i4 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        if $i3 > $i4 goto label16;

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r2);

        $i28 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i26 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        $i25 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration>;

        $i27 = $i26 - $i25;

        if $i28 != $i27 goto label10;

        $r108 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r110 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r105 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r109 = $r105[b1];

        virtualinvoke $r108.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r110, $r109);

        $r126 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f2 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $r127 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r126.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r127);

        $r124 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $r125 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        virtualinvoke $r124.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r125);

        $r122 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $r123 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        virtualinvoke $r122.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_adapt_rate", $r123);

        $r119 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $r121 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r119.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("fg_adapt_rate", $r121);

        goto label11;

     label10:
        $i32 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i30 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        $i29 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration>;

        $i31 = $i30 - $i29;

        if $i32 <= $i31 goto label11;

        $r113 = newarray (android.filterfw.core.Frame)[2];

        $r114 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r111 = $r114[b0];

        $r113[0] = $r111;

        $r112 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r113[1] = $r112;

        r6 = $r113;

        $r115 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mMaskVerifyProgram>;

        $r117 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r118 = $r117[b1];

        virtualinvoke $r115.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r6, $r118);

        $r116 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r106 = $r116[b1];

        virtualinvoke $r106.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r107 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r104 = $r107[b1];

        virtualinvoke $r104.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

     label11:
        $i24 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i23 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        if $i24 != $i23 goto label17;

        $r96 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram copyShaderProgram>;

        $r93 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r95 = $r93[b1];

        $r94 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        virtualinvoke $r96.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r95, $r94);

        $r97 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        r139 = virtualinvoke $r97.<android.filterfw.core.GLFrame: java.nio.ByteBuffer getData()>();

        r7 = virtualinvoke r139.<java.nio.ByteBuffer: byte[] array()>();

        $b34 = r7[3];

        s2 = $b34 & 255;

        $z9 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z9 == 0 goto label12;

        $r101 = newarray (java.lang.Object)[2];

        $r98 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(s2);

        $r101[0] = $r98;

        $r100 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r101[1] = $r100;

        $r99 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mask_average is %d, threshold is %d", $r101);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r99);

     label12:
        if s2 < 20 goto label13;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

        goto label15;

     label13:
        $z8 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z8 == 0 goto label14;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Learning done");

     label14:
        $r103 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener>;

        if $r103 == null goto label15;

        $r102 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningDoneListener>;

        interfaceinvoke $r102.<android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener: void onLearningDone(android.filterpacks.videoproc.BackDropperFilter)>(r0);

     label15:
        goto label17;

     label16:
        $r38 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r37 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r140 = virtualinvoke $r38.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r37);

        $r41 = newarray (android.filterfw.core.Frame)[4];

        $r41[0] = r2;

        $r41[1] = r3;

        $r40 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r41[2] = $r40;

        $r39 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        $r41[3] = $r39;

        r141 = $r41;

        $r43 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        virtualinvoke $r43.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r141, r140);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("video", r140);

        virtualinvoke r140.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

     label17:
        $i7 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i5 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningDuration>;

        $i6 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mLearningVerifyDuration>;

        $i8 = $i5 - $i6;

        if $i7 < $i8 goto label18;

        $f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateBg>;

        $d5 = (double) $f0;

        $b21 = $d5 cmpl 0.0;

        if $b21 > 0 goto label18;

        $f1 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAdaptRateFg>;

        $d6 = (double) $f1;

        $b22 = $d6 cmpl 0.0;

        if $b22 <= 0 goto label19;

     label18:
        $r45 = newarray (android.filterfw.core.Frame)[3];

        $r44 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r45[0] = $r44;

        $r50 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r51 = $r50[b0];

        $r45[1] = $r51;

        $r52 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r45[2] = $r52;

        r142 = $r45;

        $r47 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateMeanProgram>;

        $r53 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r46 = $r53[b1];

        virtualinvoke $r47.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r142, $r46);

        $r48 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r49 = $r48[b1];

        virtualinvoke $r49.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r58 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r59 = $r58[b1];

        virtualinvoke $r59.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

        $r60 = newarray (android.filterfw.core.Frame)[4];

        $r61 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        $r60[0] = $r61;

        $r54 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r55 = $r54[b0];

        $r60[1] = $r55;

        $r56 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r57 = $r56[b0];

        $r60[2] = $r57;

        $r67 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        $r60[3] = $r67;

        r143 = $r60;

        $r68 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgUpdateVarianceProgram>;

        $r66 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r69 = $r66[b1];

        virtualinvoke $r68.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>(r143, $r69);

        $r63 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r62 = $r63[b1];

        virtualinvoke $r62.<android.filterfw.core.GLFrame: void generateMipMap()>();

        $r65 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r64 = $r65[b1];

        virtualinvoke $r64.<android.filterfw.core.GLFrame: void setTextureParameter(int,int)>(10241, 9985);

     label19:
        $z6 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mProvideDebugOutputs>;

        if $z6 == 0 goto label20;

        $r79 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r87 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        r144 = virtualinvoke $r79.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r87);

        $r89 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram>;

        virtualinvoke $r89.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>(r2, r144);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("debug1", r144);

        virtualinvoke r144.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

        $r91 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>();

        $r90 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        r145 = virtualinvoke $r91.<android.filterfw.core.FrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>($r90);

        $r86 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mCopyOutProgram>;

        $r92 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r86.<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame,android.filterfw.core.Frame)>($r92, r145);

        virtualinvoke r0.<android.filterpacks.videoproc.BackDropperFilter: void pushOutput(java.lang.String,android.filterfw.core.Frame)>("debug2", r145);

        virtualinvoke r145.<android.filterfw.core.Frame: android.filterfw.core.Frame release()>();

     label20:
        $i13 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i14 = $i13 + 1;

        r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount> = $i14;

        $z7 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z7 == 0 goto label22;

        $i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mFrameCount>;

        $i9 = $i10 % 30;

        if $i9 != 0 goto label22;

        $l12 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $b11 = $l12 cmp -1L;

        if $b11 != 0 goto label21;

        $r80 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        virtualinvoke $r80.<android.filterfw.core.GLEnvironment: void activate()>();

        staticinvoke <android.opengl.GLES20: void glFinish()>();

        $l19 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = $l19;

        goto label22;

     label21:
        $r73 = virtualinvoke r1.<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>();

        virtualinvoke $r73.<android.filterfw.core.GLEnvironment: void activate()>();

        staticinvoke <android.opengl.GLES20: void glFinish()>();

        l39 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Avg. frame duration: ");

        $r71 = newarray (java.lang.Object)[1];

        $l15 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $l16 = l39 - $l15;

        $d0 = (double) $l16;

        $d1 = $d0 / 30.0;

        $r76 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r71[0] = $r76;

        $r77 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.2f", $r71);

        $r74 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms. Avg. fps: ");

        $r78 = newarray (java.lang.Object)[1];

        $l18 = r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime>;

        $l17 = l39 - $l18;

        $d4 = (double) $l17;

        $d3 = $d4 / 30.0;

        $d2 = 1000.0 / $d3;

        $r84 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r78[0] = $r84;

        $r83 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.2f", $r78);

        $r82 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r81 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r81);

        r0.<android.filterpacks.videoproc.BackDropperFilter: long startTime> = l39;

     label22:
        return;
    }

    public void close(android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.FilterContext r1;
        int i0;
        android.filterfw.core.MutableFrameFormat $r2;
        boolean $z0;
        android.filterfw.core.GLFrame $r3, $r5, $r7, $r9, $r11, $r13, $r17, $r18, $r23;
        android.filterfw.core.GLFrame[] $r14, $r19, $r20;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.FilterContext;

        $r2 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat>;

        if $r2 != null goto label1;

        return;

     label1:
        $z0 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Filter Closing!");

     label2:
        i0 = 0;

     label3:
        if i0 >= 2 goto label4;

        $r14 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgMean>;

        $r17 = $r14[i0];

        virtualinvoke $r17.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r19 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mBgVariance>;

        $r18 = $r19[i0];

        virtualinvoke $r18.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r20 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame[] mMaskVerify>;

        $r23 = $r20[i0];

        virtualinvoke $r23.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        i0 = i0 + 1;

        goto label3;

     label4:
        $r3 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mDistance>;

        virtualinvoke $r3.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMask>;

        virtualinvoke $r5.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r7 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mAutoWB>;

        virtualinvoke $r7.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r9 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mVideoInput>;

        virtualinvoke $r9.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r11 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mBgInput>;

        virtualinvoke $r11.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        $r13 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.GLFrame mMaskAverage>;

        virtualinvoke $r13.<android.filterfw.core.GLFrame: android.filterfw.core.Frame release()>();

        r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.MutableFrameFormat mMemoryFormat> = null;

        return;
    }

    public synchronized void relearn()
    {
        android.filterpacks.videoproc.BackDropperFilter r0;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mStartLearning> = 1;

        return;
    }

    public void fieldPortValueUpdated(java.lang.String, android.filterfw.core.FilterContext)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        java.lang.String r1;
        android.filterfw.core.FilterContext r2;
        float[] r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.filterfw.core.ShaderProgram $r5, $r6, $r8, $r11, $r13, $r15, $r17, $r19, $r20, $r23, $r24, $r26, $r28, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Integer $r7;
        java.lang.Float $r9, $r10, $r12, $r14, $r16, $r18, $r21, $r22, $r25, $r27, $r30, $r31;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.filterfw.core.FilterContext;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("backgroundFitMode");

        if $z0 == 0 goto label01;

        r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mBackgroundFitModeChanged> = 1;

        goto label16;

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("acceptStddev");

        if $z1 == 0 goto label02;

        $r29 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f15 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f13 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mAcceptStddev>;

        $f14 = $f15 * $f13;

        $r30 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f14);

        virtualinvoke $r29.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("accept_variance", $r30);

        goto label16;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierLrgScale");

        if $z2 == 0 goto label03;

        $r26 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f11 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyLrgScale>;

        $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f11);

        virtualinvoke $r26.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_lrg", $r31);

        goto label16;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierMidScale");

        if $z3 == 0 goto label04;

        $r28 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f12 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchyMidScale>;

        $r25 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f12);

        virtualinvoke $r28.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_mid", $r25);

        goto label16;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierSmlScale");

        if $z4 == 0 goto label05;

        $r23 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $f9 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mHierarchySmlScale>;

        $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f9);

        virtualinvoke $r23.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("scale_sml", $r27);

        goto label16;

     label05:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierLrgExp");

        if $z5 == 0 goto label06;

        $r24 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i7 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i8 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyLrgExp>;

        $i9 = $i7 + $i8;

        $f10 = (float) $i9;

        $r22 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f10);

        virtualinvoke $r24.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_lrg", $r22);

        goto label16;

     label06:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierMidExp");

        if $z6 == 0 goto label07;

        $r20 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i6 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i4 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchyMidExp>;

        $i5 = $i6 + $i4;

        $f8 = (float) $i5;

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f8);

        virtualinvoke $r20.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_mid", $r21);

        goto label16;

     label07:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("hierSmlExp");

        if $z7 == 0 goto label08;

        $r19 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        $i2 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mSubsampleLevel>;

        $i3 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mHierarchySmlExp>;

        $i1 = $i2 + $i3;

        $f7 = (float) $i1;

        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        virtualinvoke $r19.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exp_sml", $r18);

        goto label16;

     label08:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lumScale");

        if $z8 != 0 goto label09;

        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("chromaScale");

        if $z9 == 0 goto label10;

     label09:
        $r4 = newarray (float)[2];

        $f0 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mLumScale>;

        $r4[0] = $f0;

        $f1 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mChromaScale>;

        $r4[1] = $f1;

        r3 = $r4;

        $r5 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgMaskProgram>;

        virtualinvoke $r5.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("yuv_weights", r3);

        goto label16;

     label10:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("maskBg");

        if $z11 == 0 goto label11;

        $r17 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f6 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskBg>;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f6);

        virtualinvoke $r17.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_bg", $r16);

        goto label16;

     label11:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("maskFg");

        if $z10 == 0 goto label12;

        $r15 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f5 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mMaskFg>;

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f5);

        virtualinvoke $r15.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("mask_blend_fg", $r14);

        goto label16;

     label12:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("exposureChange");

        if $z13 == 0 goto label13;

        $r13 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mExposureChange>;

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        virtualinvoke $r13.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("exposure_change", $r12);

        goto label16;

     label13:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("whitebalanceredChange");

        if $z12 == 0 goto label14;

        $r11 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f3 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceRedChange>;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        virtualinvoke $r11.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalancered_change", $r10);

        goto label16;

     label14:
        $z15 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("whitebalanceblueChange");

        if $z15 == 0 goto label15;

        $r8 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        $f2 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mWhiteBalanceBlueChange>;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        virtualinvoke $r8.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("whitebalanceblue_change", $r9);

        goto label16;

     label15:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("autowbToggle");

        if $z14 == 0 goto label16;

        $r6 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mAutomaticWhiteBalanceProgram>;

        $i0 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mAutoWBToggle>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r6.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("autowb_toggle", $r7);

     label16:
        return;
    }

    private void updateBgScaling(android.filterfw.core.Frame, android.filterfw.core.Frame, boolean)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        android.filterfw.core.Frame r1, r2;
        boolean z0, $z1, $z2, $z3;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25;
        float[] r3, $r8;
        android.filterfw.core.FrameFormat $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i10;
        byte $b4, $b8, $b11;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        android.filterfw.core.ShaderProgram $r10;
        java.lang.String $r21;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        r1 := @parameter0: android.filterfw.core.Frame;

        r2 := @parameter1: android.filterfw.core.Frame;

        z0 := @parameter2: boolean;

        $r4 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i0 = virtualinvoke $r4.<android.filterfw.core.FrameFormat: int getWidth()>();

        $f7 = (float) $i0;

        $r5 = virtualinvoke r1.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i1 = virtualinvoke $r5.<android.filterfw.core.FrameFormat: int getHeight()>();

        $f8 = (float) $i1;

        f0 = $f7 / $f8;

        $r6 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i2 = virtualinvoke $r6.<android.filterfw.core.FrameFormat: int getWidth()>();

        $f9 = (float) $i2;

        $r7 = virtualinvoke r2.<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>();

        $i3 = virtualinvoke $r7.<android.filterfw.core.FrameFormat: int getHeight()>();

        $f10 = (float) $i3;

        f1 = $f9 / $f10;

        f2 = f0 / f1;

        $f11 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $b4 = f2 cmpl $f11;

        if $b4 != 0 goto label01;

        if z0 == 0 goto label13;

     label01:
        r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect> = f2;

        f3 = 0.0F;

        f4 = 1.0F;

        f5 = 0.0F;

        f6 = 1.0F;

        $i5 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mBackgroundFitMode>;

        tableswitch($i5)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label05;
            default: goto label07;
        };

     label02:
        goto label07;

     label03:
        $f19 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $b11 = $f19 cmpl 1.0F;

        if $b11 <= 0 goto label04;

        $f22 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $f21 = 0.5F * $f22;

        f3 = 0.5F - $f21;

        $f25 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        f4 = 1.0F * $f25;

        goto label07;

     label04:
        $f18 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $f24 = 0.5F / $f18;

        f5 = 0.5F - $f24;

        $f23 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        f6 = 1.0F / $f23;

        goto label07;

     label05:
        $f13 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $b8 = $f13 cmpl 1.0F;

        if $b8 <= 0 goto label06;

        $f15 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $f14 = 0.5F / $f15;

        f5 = 0.5F - $f14;

        $f20 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        f6 = 1.0F / $f20;

        goto label07;

     label06:
        $f17 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $f16 = 0.5F * $f17;

        f3 = 0.5F - $f16;

        f4 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

     label07:
        $z1 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mMirrorBg>;

        if $z1 == 0 goto label11;

        $z3 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z3 == 0 goto label08;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", "Mirroring the background!");

     label08:
        $i6 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mOrientation>;

        if $i6 == 0 goto label09;

        $i10 = r0.<android.filterpacks.videoproc.BackDropperFilter: int mOrientation>;

        if $i10 != 180 goto label10;

     label09:
        f4 = neg f4;

        f3 = 1.0F - f3;

        goto label11;

     label10:
        f6 = neg f6;

        f5 = 1.0F - f5;

     label11:
        $z2 = r0.<android.filterpacks.videoproc.BackDropperFilter: boolean mLogVerbose>;

        if $z2 == 0 goto label12;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bgTransform: xMin, yMin, xWidth, yWidth : ");

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRelAspRatio = ");

        $f12 = r0.<android.filterpacks.videoproc.BackDropperFilter: float mRelativeAspect>;

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f12);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("BackDropperFilter", $r21);

     label12:
        $r8 = newarray (float)[9];

        $r8[0] = f4;

        $r8[1] = 0.0F;

        $r8[2] = 0.0F;

        $r8[3] = 0.0F;

        $r8[4] = f6;

        $r8[5] = 0.0F;

        $r8[6] = f3;

        $r8[7] = f5;

        $r8[8] = 1.0F;

        r3 = $r8;

        $r10 = r0.<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.ShaderProgram mBgSubtractProgram>;

        virtualinvoke $r10.<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)>("bg_fit_transform", r3);

     label13:
        return;
    }

    private int pyramidLevel(int)
    {
        android.filterpacks.videoproc.BackDropperFilter r0;
        int i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: android.filterpacks.videoproc.BackDropperFilter;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log10(double)>(2.0);

        $d3 = $d1 / $d2;

        $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3);

        $i1 = (int) $d4;

        $i2 = $i1 - 1;

        return $i2;
    }

    static void <clinit>()
    {
        float[] $r0;
        java.lang.String[] $r1, $r2, $r3;

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mMaskVerifyShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float verify_rate;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 lastmask = texture2D(tex_sampler_0, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_1, v_texcoord);\n  float newmask = mix(lastmask.a, mask.a, verify_rate);\n  gl_FragColor = vec4(0., 0., 0., newmask);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mUpdateBgModelVarianceShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_3, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 cur_variance = (fg-mean)*(fg-mean);\n  vec4 new_variance = mix(variance, cur_variance, alpha);\n  new_variance = max(new_variance, vec4(min_variance));\n  gl_FragColor = var_scale * new_variance;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mUpdateBgModelMeanShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n\n  float alpha = local_adapt_rate(mask.a);\n  vec4 new_mean = mix(mean, fg, alpha);\n  gl_FragColor = new_mean;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgSubtractForceShader> = "  vec4 ghost_rgb = (fg_adjusted * 0.7 + vec4(0.3,0.3,0.4,0.))*0.65 + \n                   0.35*bg_rgb;\n  float glow_start = 0.75 * mask_blend_bg; \n  float glow_max   = mask_blend_bg; \n  gl_FragColor = mask.a < glow_start ? bg_rgb : \n                 mask.a < glow_max ? mix(bg_rgb, vec4(0.9,0.9,1.0,1.0), \n                                     (mask.a - glow_start) / (glow_max - glow_start) ) : \n                 mask.a < mask_blend_fg ? mix(vec4(0.9,0.9,1.0,1.0), ghost_rgb, \n                                    (mask.a - glow_max) / (mask_blend_fg - glow_max) ) : \n                 ghost_rgb;\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgSubtractShader> = "uniform mat3 bg_fit_transform;\nuniform float mask_blend_bg;\nuniform float mask_blend_fg;\nuniform float exposure_change;\nuniform float whitebalancered_change;\nuniform float whitebalanceblue_change;\nuniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform sampler2D tex_sampler_3;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec2 bg_texcoord = (bg_fit_transform * vec3(v_texcoord, 1.)).xy;\n  vec4 bg_rgb = texture2D(tex_sampler_1, bg_texcoord);\n  vec4 wb_auto_scale = texture2D(tex_sampler_3, v_texcoord) * exposure_change / auto_wb_scale;\n  vec4 wb_manual_scale = vec4(1. + whitebalancered_change, 1., 1. + whitebalanceblue_change, 1.);\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord);\n  vec4 fg_adjusted = fg_rgb * wb_manual_scale * wb_auto_scale;\n  vec4 mask = texture2D(tex_sampler_2, v_texcoord, \n                      2.0);\n  float alpha = smoothstep(mask_blend_bg, mask_blend_fg, mask.a);\n  gl_FragColor = mix(bg_rgb, fg_adjusted, alpha);\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mAutomaticWhiteBalance> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform float pyramid_depth;\nuniform bool autowb_toggle;\nvarying vec2 v_texcoord;\nvoid main() {\n   vec4 mean_video = texture2D(tex_sampler_0, v_texcoord, pyramid_depth);\n   vec4 mean_bg = texture2D(tex_sampler_1, v_texcoord, pyramid_depth);\n   float green_normalizer = mean_video.g / mean_bg.g;\n   vec4 adjusted_value = vec4(mean_bg.r / mean_video.r * green_normalizer, 1., \n                         mean_bg.b / mean_video.b * green_normalizer, 1.) * auto_wb_scale; \n   gl_FragColor = autowb_toggle ? adjusted_value : vec4(auto_wb_scale);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgMaskShader> = "uniform sampler2D tex_sampler_0;\nuniform float accept_variance;\nuniform vec2 yuv_weights;\nuniform float scale_lrg;\nuniform float scale_mid;\nuniform float scale_sml;\nuniform float exp_lrg;\nuniform float exp_mid;\nuniform float exp_sml;\nvarying vec2 v_texcoord;\nbool is_fg(vec2 dist_yc, float accept_variance) {\n  return ( dot(yuv_weights, dist_yc) >= accept_variance );\n}\nvoid main() {\n  vec4 dist_lrg_sc = texture2D(tex_sampler_0, v_texcoord, exp_lrg);\n  vec4 dist_mid_sc = texture2D(tex_sampler_0, v_texcoord, exp_mid);\n  vec4 dist_sml_sc = texture2D(tex_sampler_0, v_texcoord, exp_sml);\n  vec2 dist_lrg = inv_dist_scale * dist_lrg_sc.ba;\n  vec2 dist_mid = inv_dist_scale * dist_mid_sc.ba;\n  vec2 dist_sml = inv_dist_scale * dist_sml_sc.ba;\n  vec2 norm_dist = 0.75 * dist_sml / accept_variance;\n  bool is_fg_lrg = is_fg(dist_lrg, accept_variance * scale_lrg);\n  bool is_fg_mid = is_fg_lrg || is_fg(dist_mid, accept_variance * scale_mid);\n  float is_fg_sml =\n      float(is_fg_mid || is_fg(dist_sml, accept_variance * scale_sml));\n  float alpha = 0.5 * is_fg_sml + 0.3 * float(is_fg_mid) + 0.2 * float(is_fg_lrg);\n  gl_FragColor = vec4(alpha, norm_dist, is_fg_sml);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mBgDistanceShader> = "uniform sampler2D tex_sampler_0;\nuniform sampler2D tex_sampler_1;\nuniform sampler2D tex_sampler_2;\nuniform float subsample_level;\nvarying vec2 v_texcoord;\nvoid main() {\n  vec4 fg_rgb = texture2D(tex_sampler_0, v_texcoord, subsample_level);\n  vec4 fg = coeff_yuv * vec4(fg_rgb.rgb, 1.);\n  vec4 mean = texture2D(tex_sampler_1, v_texcoord);\n  vec4 variance = inv_var_scale * texture2D(tex_sampler_2, v_texcoord);\n\n  float dist_y = gauss_dist_y(fg.r, mean.r, variance.r);\n  float dist_uv = gauss_dist_uv(fg.gb, mean.gb, variance.gb);\n  gl_FragColor = vec4(0.5*fg.rg, dist_scale*dist_y, dist_scale*dist_uv);\n}\n";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String TAG> = "BackDropperFilter";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String RGB_TO_YUV_MATRIX> = "0.299, -0.168736,  0.5,      0.000, 0.587, -0.331264, -0.418688, 0.000, 0.114,  0.5,      -0.081312, 0.000, 0.000,  0.5,       0.5,      1.000 ";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String MIN_VARIANCE> = "3.0";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String DEFAULT_AUTO_WB_SCALE> = "0.25";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String VARIANCE_STORAGE_SCALE> = "5.0";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String DISTANCE_STORAGE_SCALE> = "0.6";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String MASK_SMOOTH_EXPONENT> = "2.0";

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_DONE_THRESHOLD> = 20;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_VERIFY_RATE> = 0.25F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ADAPT_RATE_FG> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ADAPT_RATE_BG> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_LEARNING_ADAPT_RATE> = 0.2F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_WHITE_BALANCE_TOGGLE> = 0;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_WHITE_BALANCE_BLUE_CHANGE> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_WHITE_BALANCE_RED_CHANGE> = 0.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_EXPOSURE_CHANGE> = 1.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_BLEND_FG> = 0.95F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_MASK_BLEND_BG> = 0.65F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_UV_SCALE_FACTOR> = 1.35F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_Y_SCALE_FACTOR> = 0.4F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_SML_EXPONENT> = 0;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_MID_EXPONENT> = 2;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_HIER_LRG_EXPONENT> = 3;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_MASK_HEIGHT_EXPONENT> = 8;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_MASK_WIDTH_EXPONENT> = 8;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_SML_SCALE> = 0.5F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_MID_SCALE> = 0.6F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_HIER_LRG_SCALE> = 0.7F;

        <android.filterpacks.videoproc.BackDropperFilter: float DEFAULT_ACCEPT_STDDEV> = 0.85F;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_VERIFY_DURATION> = 10;

        <android.filterpacks.videoproc.BackDropperFilter: int DEFAULT_LEARNING_DURATION> = 40;

        $r0 = newarray (float)[9];

        $r0[0] = 1.0F;

        $r0[1] = 0.0F;

        $r0[2] = 0.0F;

        $r0[3] = 0.0F;

        $r0[4] = 1.0F;

        $r0[5] = 0.0F;

        $r0[6] = 0.0F;

        $r0[7] = 0.0F;

        $r0[8] = 1.0F;

        <android.filterpacks.videoproc.BackDropperFilter: float[] DEFAULT_BG_FIT_TRANSFORM> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "video";

        $r1[1] = "background";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mInputNames> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "video";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mOutputNames> = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "debug1";

        $r3[1] = "debug2";

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String[] mDebugOutputNames> = $r3;

        <android.filterpacks.videoproc.BackDropperFilter: java.lang.String mSharedUtilShader> = "precision mediump float;\nuniform float fg_adapt_rate;\nuniform float bg_adapt_rate;\nconst mat4 coeff_yuv = mat4(0.299, -0.168736,  0.5,      0.000, 0.587, -0.331264, -0.418688, 0.000, 0.114,  0.5,      -0.081312, 0.000, 0.000,  0.5,       0.5,      1.000 );\nconst float dist_scale = 0.6;\nconst float inv_dist_scale = 1. / dist_scale;\nconst float var_scale=5.0;\nconst float inv_var_scale = 1. / var_scale;\nconst float min_variance = inv_var_scale *3.0/ 256.;\nconst float auto_wb_scale = 0.25;\n\nfloat gauss_dist_y(float y, float mean, float variance) {\n  float dist = (y - mean) * (y - mean) / variance;\n  return dist;\n}\nfloat gauss_dist_uv(vec2 uv, vec2 mean, vec2 variance) {\n  vec2 dist = (uv - mean) * (uv - mean) / variance;\n  return dist.r + dist.g;\n}\nfloat local_adapt_rate(float alpha) {\n  return mix(bg_adapt_rate, fg_adapt_rate, alpha);\n}\n\n";

        return;
    }
}
