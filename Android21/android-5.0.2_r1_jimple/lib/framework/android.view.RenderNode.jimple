public class android.view.RenderNode extends java.lang.Object
{
    public static final int FLAG_CLIP_CHILDREN;
    public static final int STATUS_DONE;
    public static final int STATUS_DRAW;
    public static final int STATUS_INVOKE;
    public static final int STATUS_DREW;
    private boolean mValid;
    final long mNativeRenderNode;
    private final android.view.View mOwningView;

    private void <init>(java.lang.String, android.view.View)
    {
        android.view.RenderNode r0;
        java.lang.String r1;
        android.view.View r2;
        long $l0;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <android.view.RenderNode: long nCreate(java.lang.String)>(r1);

        r0.<android.view.RenderNode: long mNativeRenderNode> = $l0;

        r0.<android.view.RenderNode: android.view.View mOwningView> = r2;

        return;
    }

    private void <init>(long)
    {
        android.view.RenderNode r0;
        long l0;

        r0 := @this: android.view.RenderNode;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.RenderNode: long mNativeRenderNode> = l0;

        r0.<android.view.RenderNode: android.view.View mOwningView> = null;

        return;
    }

    public static android.view.RenderNode create(java.lang.String, android.view.View)
    {
        java.lang.String r0;
        android.view.View r1;
        android.view.RenderNode $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.View;

        $r2 = new android.view.RenderNode;

        specialinvoke $r2.<android.view.RenderNode: void <init>(java.lang.String,android.view.View)>(r0, r1);

        return $r2;
    }

    public static android.view.RenderNode adopt(long)
    {
        long l0;
        android.view.RenderNode $r0;

        l0 := @parameter0: long;

        $r0 = new android.view.RenderNode;

        specialinvoke $r0.<android.view.RenderNode: void <init>(long)>(l0);

        return $r0;
    }

    public android.view.HardwareCanvas start(int, int)
    {
        android.view.RenderNode r0;
        int i0, i1;
        android.view.GLES20RecordingCanvas r1;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas obtain(android.view.RenderNode)>(r0);

        virtualinvoke r1.<android.view.HardwareCanvas: void setViewport(int,int)>(i0, i1);

        virtualinvoke r1.<android.view.HardwareCanvas: int onPreDraw(android.graphics.Rect)>(null);

        return r1;
    }

    public void end(android.view.HardwareCanvas)
    {
        android.view.RenderNode r0;
        android.view.HardwareCanvas r1;
        android.view.GLES20RecordingCanvas r2;
        long l0, $l1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.view.HardwareCanvas;

        $z0 = r1 instanceof android.view.GLES20RecordingCanvas;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Passed an invalid canvas to end!");

        throw $r3;

     label1:
        r2 = (android.view.GLES20RecordingCanvas) r1;

        virtualinvoke r2.<android.view.GLES20RecordingCanvas: void onPostDraw()>();

        l0 = virtualinvoke r2.<android.view.GLES20RecordingCanvas: long finishRecording()>();

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.RenderNode: void nSetDisplayListData(long,long)>($l1, l0);

        virtualinvoke r2.<android.view.GLES20RecordingCanvas: void recycle()>();

        r0.<android.view.RenderNode: boolean mValid> = 1;

        return;
    }

    public void destroyDisplayListData()
    {
        android.view.RenderNode r0;
        boolean $z0;
        long $l0;

        r0 := @this: android.view.RenderNode;

        $z0 = r0.<android.view.RenderNode: boolean mValid>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.RenderNode: void nSetDisplayListData(long,long)>($l0, 0L);

        r0.<android.view.RenderNode: boolean mValid> = 0;

        return;
    }

    public boolean isValid()
    {
        android.view.RenderNode r0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $z0 = r0.<android.view.RenderNode: boolean mValid>;

        return $z0;
    }

    long getNativeDisplayList()
    {
        android.view.RenderNode r0;
        boolean $z0;
        long $l0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.view.RenderNode;

        $z0 = r0.<android.view.RenderNode: boolean mValid>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The display list is not valid.");

        throw $r1;

     label1:
        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        return $l0;
    }

    public boolean hasIdentityMatrix()
    {
        android.view.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nHasIdentityMatrix(long)>($l0);

        return $z0;
    }

    public void getMatrix(android.graphics.Matrix)
    {
        android.view.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.view.RenderNode: void nGetTransformMatrix(long,long)>($l1, $l0);

        return;
    }

    public void getInverseMatrix(android.graphics.Matrix)
    {
        android.view.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.view.RenderNode: void nGetInverseTransformMatrix(long,long)>($l1, $l0);

        return;
    }

    public boolean setLayerType(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetLayerType(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setLayerPaint(android.graphics.Paint)
    {
        android.view.RenderNode r0;
        android.graphics.Paint r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Paint;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        if r1 == null goto label1;

        $l1 = r1.<android.graphics.Paint: long mNativePaint>;

        goto label2;

     label1:
        $l1 = 0L;

     label2:
        $z0 = staticinvoke <android.view.RenderNode: boolean nSetLayerPaint(long,long)>($l0, $l1);

        return $z0;
    }

    public boolean setClipBounds(android.graphics.Rect)
    {
        android.view.RenderNode r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;
        long $l4, $l5;
        boolean $z0, $z1;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Rect;

        if r1 != null goto label1;

        $l5 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetClipBoundsEmpty(long)>($l5);

        return $z1;

     label1:
        $l4 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetClipBounds(long,int,int,int,int)>($l4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean setClipToBounds(boolean)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetClipToBounds(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setProjectBackwards(boolean)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetProjectBackwards(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setProjectionReceiver(boolean)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetProjectionReceiver(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean setOutline(android.graphics.Outline)
    {
        android.view.RenderNode r0;
        android.graphics.Outline r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.graphics.Rect $r2, $r6, $r7, $r8, $r9;
        android.graphics.Path $r3, $r5;
        java.lang.IllegalArgumentException $r4;
        float $f0, $f1, $f2;
        long $l0, $l1, $l5, $l7, $l8;
        int $i2, $i3, $i4, $i6;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Outline;

        if r1 != null goto label1;

        $l8 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z4 = staticinvoke <android.view.RenderNode: boolean nSetOutlineNone(long)>($l8);

        return $z4;

     label1:
        $z0 = virtualinvoke r1.<android.graphics.Outline: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $l7 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z3 = staticinvoke <android.view.RenderNode: boolean nSetOutlineEmpty(long)>($l7);

        return $z3;

     label2:
        $r2 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        if $r2 == null goto label3;

        $l5 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $r6 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i6 = $r6.<android.graphics.Rect: int left>;

        $r7 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i3 = $r7.<android.graphics.Rect: int top>;

        $r8 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i4 = $r8.<android.graphics.Rect: int right>;

        $r9 = r1.<android.graphics.Outline: android.graphics.Rect mRect>;

        $i2 = $r9.<android.graphics.Rect: int bottom>;

        $f2 = r1.<android.graphics.Outline: float mRadius>;

        $f1 = r1.<android.graphics.Outline: float mAlpha>;

        $z2 = staticinvoke <android.view.RenderNode: boolean nSetOutlineRoundRect(long,int,int,int,int,float,float)>($l5, $i6, $i3, $i4, $i2, $f2, $f1);

        return $z2;

     label3:
        $r3 = r1.<android.graphics.Outline: android.graphics.Path mPath>;

        if $r3 == null goto label4;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $r5 = r1.<android.graphics.Outline: android.graphics.Path mPath>;

        $l0 = $r5.<android.graphics.Path: long mNativePath>;

        $f0 = r1.<android.graphics.Outline: float mAlpha>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetOutlineConvexPath(long,long,float)>($l1, $l0, $f0);

        return $z1;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized outline?");

        throw $r4;
    }

    public boolean hasShadow()
    {
        android.view.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nHasShadow(long)>($l0);

        return $z0;
    }

    public boolean setClipToOutline(boolean)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetClipToOutline(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean getClipToOutline()
    {
        android.view.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nGetClipToOutline(long)>($l0);

        return $z0;
    }

    public boolean setRevealClip(boolean, float, float, float)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        float f0, f1, f2;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetRevealClip(long,boolean,float,float,float)>($l0, z0, f0, f1, f2);

        return $z1;
    }

    public boolean setStaticMatrix(android.graphics.Matrix)
    {
        android.view.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetStaticMatrix(long,long)>($l1, $l0);

        return $z0;
    }

    public boolean setAnimationMatrix(android.graphics.Matrix)
    {
        android.view.RenderNode r0;
        android.graphics.Matrix r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.graphics.Matrix;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        if r1 == null goto label1;

        $l1 = r1.<android.graphics.Matrix: long native_instance>;

        goto label2;

     label1:
        $l1 = 0L;

     label2:
        $z0 = staticinvoke <android.view.RenderNode: boolean nSetAnimationMatrix(long,long)>($l0, $l1);

        return $z0;
    }

    public boolean setAlpha(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetAlpha(long,float)>($l0, f0);

        return $z0;
    }

    public float getAlpha()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetAlpha(long)>($l0);

        return $f0;
    }

    public boolean setHasOverlappingRendering(boolean)
    {
        android.view.RenderNode r0;
        boolean z0, $z1;
        long $l0;

        r0 := @this: android.view.RenderNode;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z1 = staticinvoke <android.view.RenderNode: boolean nSetHasOverlappingRendering(long,boolean)>($l0, z0);

        return $z1;
    }

    public boolean hasOverlappingRendering()
    {
        android.view.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nHasOverlappingRendering(long)>($l0);

        return $z0;
    }

    public boolean setElevation(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetElevation(long,float)>($l0, f0);

        return $z0;
    }

    public float getElevation()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetElevation(long)>($l0);

        return $f0;
    }

    public boolean setTranslationX(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetTranslationX(long,float)>($l0, f0);

        return $z0;
    }

    public float getTranslationX()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetTranslationX(long)>($l0);

        return $f0;
    }

    public boolean setTranslationY(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetTranslationY(long,float)>($l0, f0);

        return $z0;
    }

    public float getTranslationY()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetTranslationY(long)>($l0);

        return $f0;
    }

    public boolean setTranslationZ(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetTranslationZ(long,float)>($l0, f0);

        return $z0;
    }

    public float getTranslationZ()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetTranslationZ(long)>($l0);

        return $f0;
    }

    public boolean setRotation(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetRotation(long,float)>($l0, f0);

        return $z0;
    }

    public float getRotation()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetRotation(long)>($l0);

        return $f0;
    }

    public boolean setRotationX(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetRotationX(long,float)>($l0, f0);

        return $z0;
    }

    public float getRotationX()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetRotationX(long)>($l0);

        return $f0;
    }

    public boolean setRotationY(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetRotationY(long,float)>($l0, f0);

        return $z0;
    }

    public float getRotationY()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetRotationY(long)>($l0);

        return $f0;
    }

    public boolean setScaleX(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetScaleX(long,float)>($l0, f0);

        return $z0;
    }

    public float getScaleX()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetScaleX(long)>($l0);

        return $f0;
    }

    public boolean setScaleY(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetScaleY(long,float)>($l0, f0);

        return $z0;
    }

    public float getScaleY()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetScaleY(long)>($l0);

        return $f0;
    }

    public boolean setPivotX(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetPivotX(long,float)>($l0, f0);

        return $z0;
    }

    public float getPivotX()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetPivotX(long)>($l0);

        return $f0;
    }

    public boolean setPivotY(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetPivotY(long,float)>($l0, f0);

        return $z0;
    }

    public float getPivotY()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetPivotY(long)>($l0);

        return $f0;
    }

    public boolean isPivotExplicitlySet()
    {
        android.view.RenderNode r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nIsPivotExplicitlySet(long)>($l0);

        return $z0;
    }

    public boolean setCameraDistance(float)
    {
        android.view.RenderNode r0;
        float f0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetCameraDistance(long,float)>($l0, f0);

        return $z0;
    }

    public float getCameraDistance()
    {
        android.view.RenderNode r0;
        long $l0;
        float $f0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $f0 = staticinvoke <android.view.RenderNode: float nGetCameraDistance(long)>($l0);

        return $f0;
    }

    public boolean setLeft(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetLeft(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setTop(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetTop(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setRight(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetRight(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setBottom(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetBottom(long,int)>($l1, i0);

        return $z0;
    }

    public boolean setLeftTopRightBottom(int, int, int, int)
    {
        android.view.RenderNode r0;
        int i0, i1, i2, i3;
        long $l4;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nSetLeftTopRightBottom(long,int,int,int,int)>($l4, i0, i1, i2, i3);

        return $z0;
    }

    public boolean offsetLeftAndRight(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nOffsetLeftAndRight(long,int)>($l1, i0);

        return $z0;
    }

    public boolean offsetTopAndBottom(int)
    {
        android.view.RenderNode r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.RenderNode;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $z0 = staticinvoke <android.view.RenderNode: boolean nOffsetTopAndBottom(long,int)>($l1, i0);

        return $z0;
    }

    public void output()
    {
        android.view.RenderNode r0;
        long $l0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.RenderNode: void nOutput(long)>($l0);

        return;
    }

    public int getDebugSize()
    {
        android.view.RenderNode r0;
        long $l0;
        int $i1;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $i1 = staticinvoke <android.view.RenderNode: int nGetDebugSize(long)>($l0);

        return $i1;
    }

    public void addAnimator(android.view.RenderNodeAnimator)
    {
        android.view.RenderNode r0;
        android.view.RenderNodeAnimator r1;
        android.view.View $r2, $r4, $r6;
        java.lang.IllegalStateException $r3;
        android.view.View$AttachInfo $r5, $r7;
        long $l0, $l1;
        android.view.ViewRootImpl $r8;

        r0 := @this: android.view.RenderNode;

        r1 := @parameter0: android.view.RenderNodeAnimator;

        $r2 = r0.<android.view.RenderNode: android.view.View mOwningView>;

        if $r2 == null goto label1;

        $r4 = r0.<android.view.RenderNode: android.view.View mOwningView>;

        $r5 = $r4.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot start this animator on a detached view!");

        throw $r3;

     label2:
        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        $l1 = virtualinvoke r1.<android.view.RenderNodeAnimator: long getNativeAnimator()>();

        staticinvoke <android.view.RenderNode: void nAddAnimator(long,long)>($l0, $l1);

        $r6 = r0.<android.view.RenderNode: android.view.View mOwningView>;

        $r7 = $r6.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r8.<android.view.ViewRootImpl: void registerAnimatingRenderNode(android.view.RenderNode)>(r0);

        return;
    }

    public void endAllAnimators()
    {
        android.view.RenderNode r0;
        long $l0;

        r0 := @this: android.view.RenderNode;

        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.RenderNode: void nEndAllAnimators(long)>($l0);

        return;
    }

    private static native long nCreate(java.lang.String);

    private static native void nDestroyRenderNode(long);

    private static native void nSetDisplayListData(long, long);

    private static native void nGetTransformMatrix(long, long);

    private static native void nGetInverseTransformMatrix(long, long);

    private static native boolean nHasIdentityMatrix(long);

    private static native boolean nOffsetTopAndBottom(long, int);

    private static native boolean nOffsetLeftAndRight(long, int);

    private static native boolean nSetLeftTopRightBottom(long, int, int, int, int);

    private static native boolean nSetBottom(long, int);

    private static native boolean nSetRight(long, int);

    private static native boolean nSetTop(long, int);

    private static native boolean nSetLeft(long, int);

    private static native boolean nSetCameraDistance(long, float);

    private static native boolean nSetPivotY(long, float);

    private static native boolean nSetPivotX(long, float);

    private static native boolean nSetLayerType(long, int);

    private static native boolean nSetLayerPaint(long, long);

    private static native boolean nSetClipToBounds(long, boolean);

    private static native boolean nSetClipBounds(long, int, int, int, int);

    private static native boolean nSetClipBoundsEmpty(long);

    private static native boolean nSetProjectBackwards(long, boolean);

    private static native boolean nSetProjectionReceiver(long, boolean);

    private static native boolean nSetOutlineRoundRect(long, int, int, int, int, float, float);

    private static native boolean nSetOutlineConvexPath(long, long, float);

    private static native boolean nSetOutlineEmpty(long);

    private static native boolean nSetOutlineNone(long);

    private static native boolean nHasShadow(long);

    private static native boolean nSetClipToOutline(long, boolean);

    private static native boolean nSetRevealClip(long, boolean, float, float, float);

    private static native boolean nSetAlpha(long, float);

    private static native boolean nSetHasOverlappingRendering(long, boolean);

    private static native boolean nSetElevation(long, float);

    private static native boolean nSetTranslationX(long, float);

    private static native boolean nSetTranslationY(long, float);

    private static native boolean nSetTranslationZ(long, float);

    private static native boolean nSetRotation(long, float);

    private static native boolean nSetRotationX(long, float);

    private static native boolean nSetRotationY(long, float);

    private static native boolean nSetScaleX(long, float);

    private static native boolean nSetScaleY(long, float);

    private static native boolean nSetStaticMatrix(long, long);

    private static native boolean nSetAnimationMatrix(long, long);

    private static native boolean nHasOverlappingRendering(long);

    private static native boolean nGetClipToOutline(long);

    private static native float nGetAlpha(long);

    private static native float nGetCameraDistance(long);

    private static native float nGetScaleX(long);

    private static native float nGetScaleY(long);

    private static native float nGetElevation(long);

    private static native float nGetTranslationX(long);

    private static native float nGetTranslationY(long);

    private static native float nGetTranslationZ(long);

    private static native float nGetRotation(long);

    private static native float nGetRotationX(long);

    private static native float nGetRotationY(long);

    private static native boolean nIsPivotExplicitlySet(long);

    private static native float nGetPivotX(long);

    private static native float nGetPivotY(long);

    private static native void nOutput(long);

    private static native int nGetDebugSize(long);

    private static native void nAddAnimator(long, long);

    private static native void nEndAllAnimators(long);

    protected void finalize() throws java.lang.Throwable
    {
        android.view.RenderNode r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: android.view.RenderNode;

     label1:
        $l0 = r0.<android.view.RenderNode: long mNativeRenderNode>;

        staticinvoke <android.view.RenderNode: void nDestroyRenderNode(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <android.view.RenderNode: int STATUS_DREW> = 4;

        <android.view.RenderNode: int STATUS_INVOKE> = 2;

        <android.view.RenderNode: int STATUS_DRAW> = 1;

        <android.view.RenderNode: int STATUS_DONE> = 0;

        <android.view.RenderNode: int FLAG_CLIP_CHILDREN> = 1;

        return;
    }
}
