public class android.speech.SpeechRecognizer extends java.lang.Object
{
    private static final boolean DBG;
    private static final java.lang.String TAG;
    public static final java.lang.String RESULTS_RECOGNITION;
    public static final java.lang.String CONFIDENCE_SCORES;
    public static final int ERROR_NETWORK_TIMEOUT;
    public static final int ERROR_NETWORK;
    public static final int ERROR_AUDIO;
    public static final int ERROR_SERVER;
    public static final int ERROR_CLIENT;
    public static final int ERROR_SPEECH_TIMEOUT;
    public static final int ERROR_NO_MATCH;
    public static final int ERROR_RECOGNIZER_BUSY;
    public static final int ERROR_INSUFFICIENT_PERMISSIONS;
    private static final int MSG_START;
    private static final int MSG_STOP;
    private static final int MSG_CANCEL;
    private static final int MSG_CHANGE_LISTENER;
    private android.speech.IRecognitionService mService;
    private android.speech.SpeechRecognizer$Connection mConnection;
    private final android.content.Context mContext;
    private final android.content.ComponentName mServiceComponent;
    private android.os.Handler mHandler;
    private final java.util.Queue mPendingTasks;
    private final android.speech.SpeechRecognizer$InternalListener mListener;

    private void <init>(android.content.Context, android.content.ComponentName)
    {
        android.speech.SpeechRecognizer r0;
        android.content.Context r1;
        android.content.ComponentName r2;
        android.speech.SpeechRecognizer$1 $r3;
        java.util.LinkedList $r4;
        android.speech.SpeechRecognizer$InternalListener $r5;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.ComponentName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.speech.SpeechRecognizer$1;

        specialinvoke $r3.<android.speech.SpeechRecognizer$1: void <init>(android.speech.SpeechRecognizer)>(r0);

        r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<android.speech.SpeechRecognizer: java.util.Queue mPendingTasks> = $r4;

        $r5 = new android.speech.SpeechRecognizer$InternalListener;

        specialinvoke $r5.<android.speech.SpeechRecognizer$InternalListener: void <init>(android.speech.SpeechRecognizer$1)>(null);

        r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener> = $r5;

        r0.<android.speech.SpeechRecognizer: android.content.Context mContext> = r1;

        r0.<android.speech.SpeechRecognizer: android.content.ComponentName mServiceComponent> = r2;

        return;
    }

    public static boolean isRecognitionAvailable(android.content.Context)
    {
        android.content.Context r0;
        java.util.List r1;
        android.content.pm.PackageManager $r2;
        android.content.Intent $r3;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.speech.RecognitionService");

        r1 = virtualinvoke $r2.<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>($r3, 0);

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)
    {
        android.content.Context r0;
        android.speech.SpeechRecognizer $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>(r0, null);

        return $r1;
    }

    public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context, android.content.ComponentName)
    {
        android.content.Context r0;
        android.content.ComponentName r1;
        android.speech.SpeechRecognizer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.ComponentName;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Context cannot be null)");

        throw $r3;

     label1:
        staticinvoke <android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>();

        $r2 = new android.speech.SpeechRecognizer;

        specialinvoke $r2.<android.speech.SpeechRecognizer: void <init>(android.content.Context,android.content.ComponentName)>(r0, r1);

        return $r2;
    }

    public void setRecognitionListener(android.speech.RecognitionListener)
    {
        android.speech.SpeechRecognizer r0;
        android.speech.RecognitionListener r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.speech.RecognitionListener;

        staticinvoke <android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>();

        $r2 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r2, 4, r1);

        specialinvoke r0.<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>($r3);

        return;
    }

    public void startListening(android.content.Intent)
    {
        android.speech.SpeechRecognizer r0;
        android.content.Intent r1, r2, $r8;
        java.lang.String r3;
        android.speech.SpeechRecognizer$Connection $r4, $r7, $r12;
        android.os.Handler $r5;
        android.os.Message $r6;
        android.content.ComponentName $r9, $r10, $r17;
        android.content.Context $r13, $r14;
        boolean $z0, $z1;
        android.speech.SpeechRecognizer$InternalListener $r15, $r20;
        android.content.ContentResolver $r16;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.content.Intent;

        if r1 != null goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("intent must not be null");

        throw $r19;

     label1:
        staticinvoke <android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>();

        $r4 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection>;

        if $r4 != null goto label5;

        $r7 = new android.speech.SpeechRecognizer$Connection;

        specialinvoke $r7.<android.speech.SpeechRecognizer$Connection: void <init>(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$1)>(r0, null);

        r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection> = $r7;

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.speech.RecognitionService");

        r2 = $r8;

        $r9 = r0.<android.speech.SpeechRecognizer: android.content.ComponentName mServiceComponent>;

        if $r9 != null goto label3;

        $r14 = r0.<android.speech.SpeechRecognizer: android.content.Context mContext>;

        $r16 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r16, "voice_recognition_service");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SpeechRecognizer", "no selected voice recognition service");

        $r20 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r20.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

        return;

     label2:
        $r17 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r3);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r17);

        goto label4;

     label3:
        $r10 = r0.<android.speech.SpeechRecognizer: android.content.ComponentName mServiceComponent>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r10);

     label4:
        $r13 = r0.<android.speech.SpeechRecognizer: android.content.Context mContext>;

        $r12 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection>;

        $z0 = virtualinvoke $r13.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r2, $r12, 1);

        if $z0 != 0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SpeechRecognizer", "bind to recognition service failed");

        r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection> = null;

        r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService> = null;

        $r15 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r15.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

        return;

     label5:
        $r5 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        $r6 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r5, 1, r1);

        specialinvoke r0.<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>($r6);

        return;
    }

    public void stopListening()
    {
        android.speech.SpeechRecognizer r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: android.speech.SpeechRecognizer;

        staticinvoke <android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>();

        $r1 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r1, 2);

        specialinvoke r0.<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>($r2);

        return;
    }

    public void cancel()
    {
        android.speech.SpeechRecognizer r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: android.speech.SpeechRecognizer;

        staticinvoke <android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>();

        $r1 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r1, 3);

        specialinvoke r0.<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>($r2);

        return;
    }

    private static void checkIsCalledFromMainThread()
    {
        android.os.Looper $r0, $r1;
        java.lang.RuntimeException $r2;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 == $r1 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("SpeechRecognizer should be used only from the application\'s main thread");

        throw $r2;

     label1:
        return;
    }

    private void putMessage(android.os.Message)
    {
        android.speech.SpeechRecognizer r0;
        android.os.Message r1;
        android.speech.IRecognitionService $r2;
        android.os.Handler $r3;
        java.util.Queue $r4;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        if $r2 != null goto label1;

        $r4 = r0.<android.speech.SpeechRecognizer: java.util.Queue mPendingTasks>;

        interfaceinvoke $r4.<java.util.Queue: boolean offer(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

     label2:
        return;
    }

    private void handleStartListening(android.content.Intent)
    {
        android.speech.SpeechRecognizer r0;
        android.content.Intent r1;
        android.os.RemoteException r2, $r5;
        boolean $z0;
        android.speech.SpeechRecognizer$InternalListener $r3, $r6;
        android.speech.IRecognitionService $r4;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.content.Intent;

        $z0 = specialinvoke r0.<android.speech.SpeechRecognizer: boolean checkOpenConnection()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        $r3 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        interfaceinvoke $r4.<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)>(r1, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SpeechRecognizer", "startListening() failed", r2);

        $r6 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r6.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handleStopMessage()
    {
        android.speech.SpeechRecognizer r0;
        android.os.RemoteException r1, $r4;
        boolean $z0;
        android.speech.SpeechRecognizer$InternalListener $r2, $r5;
        android.speech.IRecognitionService $r3;

        r0 := @this: android.speech.SpeechRecognizer;

        $z0 = specialinvoke r0.<android.speech.SpeechRecognizer: boolean checkOpenConnection()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        interfaceinvoke $r3.<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SpeechRecognizer", "stopListening() failed", r1);

        $r5 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r5.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handleCancelMessage()
    {
        android.speech.SpeechRecognizer r0;
        android.os.RemoteException r1, $r4;
        boolean $z0;
        android.speech.SpeechRecognizer$InternalListener $r2, $r5;
        android.speech.IRecognitionService $r3;

        r0 := @this: android.speech.SpeechRecognizer;

        $z0 = specialinvoke r0.<android.speech.SpeechRecognizer: boolean checkOpenConnection()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        interfaceinvoke $r3.<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SpeechRecognizer", "cancel() failed", r1);

        $r5 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r5.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean checkOpenConnection()
    {
        android.speech.SpeechRecognizer r0;
        android.speech.IRecognitionService $r1;
        android.speech.SpeechRecognizer$InternalListener $r2;

        r0 := @this: android.speech.SpeechRecognizer;

        $r1 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        virtualinvoke $r2.<android.speech.SpeechRecognizer$InternalListener: void onError(int)>(5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SpeechRecognizer", "not connected to the recognition service");

        return 0;
    }

    private void handleChangeListener(android.speech.RecognitionListener)
    {
        android.speech.SpeechRecognizer r0;
        android.speech.RecognitionListener r1;
        android.speech.SpeechRecognizer$InternalListener $r2;

        r0 := @this: android.speech.SpeechRecognizer;

        r1 := @parameter0: android.speech.RecognitionListener;

        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        staticinvoke <android.speech.SpeechRecognizer$InternalListener: android.speech.RecognitionListener access$1002(android.speech.SpeechRecognizer$InternalListener,android.speech.RecognitionListener)>($r2, r1);

        return;
    }

    public void destroy()
    {
        android.speech.SpeechRecognizer r0;
        android.speech.IRecognitionService $r2, $r10;
        android.speech.SpeechRecognizer$Connection $r3, $r7;
        java.util.Queue $r4;
        android.speech.SpeechRecognizer$InternalListener $r5, $r9;
        android.content.Context $r8;
        android.os.RemoteException $r11;

        r0 := @this: android.speech.SpeechRecognizer;

        $r2 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        if $r2 == null goto label4;

     label1:
        $r10 = r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService>;

        $r9 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        interfaceinvoke $r10.<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>($r9);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        $r3 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection>;

        if $r3 == null goto label5;

        $r8 = r0.<android.speech.SpeechRecognizer: android.content.Context mContext>;

        $r7 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection>;

        virtualinvoke $r8.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r7);

     label5:
        $r4 = r0.<android.speech.SpeechRecognizer: java.util.Queue mPendingTasks>;

        interfaceinvoke $r4.<java.util.Queue: void clear()>();

        r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService> = null;

        r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection> = null;

        $r5 = r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$InternalListener mListener>;

        staticinvoke <android.speech.SpeechRecognizer$InternalListener: android.speech.RecognitionListener access$1002(android.speech.SpeechRecognizer$InternalListener,android.speech.RecognitionListener)>($r5, null);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void access$000(android.speech.SpeechRecognizer, android.content.Intent)
    {
        android.speech.SpeechRecognizer r0;
        android.content.Intent r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)>(r1);

        return;
    }

    static void access$100(android.speech.SpeechRecognizer)
    {
        android.speech.SpeechRecognizer r0;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        specialinvoke r0.<android.speech.SpeechRecognizer: void handleStopMessage()>();

        return;
    }

    static void access$200(android.speech.SpeechRecognizer)
    {
        android.speech.SpeechRecognizer r0;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        specialinvoke r0.<android.speech.SpeechRecognizer: void handleCancelMessage()>();

        return;
    }

    static void access$300(android.speech.SpeechRecognizer, android.speech.RecognitionListener)
    {
        android.speech.SpeechRecognizer r0;
        android.speech.RecognitionListener r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        r1 := @parameter1: android.speech.RecognitionListener;

        specialinvoke r0.<android.speech.SpeechRecognizer: void handleChangeListener(android.speech.RecognitionListener)>(r1);

        return;
    }

    static android.speech.IRecognitionService access$502(android.speech.SpeechRecognizer, android.speech.IRecognitionService)
    {
        android.speech.SpeechRecognizer r0;
        android.speech.IRecognitionService r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        r1 := @parameter1: android.speech.IRecognitionService;

        r0.<android.speech.SpeechRecognizer: android.speech.IRecognitionService mService> = r1;

        return r1;
    }

    static java.util.Queue access$600(android.speech.SpeechRecognizer)
    {
        android.speech.SpeechRecognizer r0;
        java.util.Queue $r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        $r1 = r0.<android.speech.SpeechRecognizer: java.util.Queue mPendingTasks>;

        return $r1;
    }

    static android.os.Handler access$700(android.speech.SpeechRecognizer)
    {
        android.speech.SpeechRecognizer r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        $r1 = r0.<android.speech.SpeechRecognizer: android.os.Handler mHandler>;

        return $r1;
    }

    static android.speech.SpeechRecognizer$Connection access$802(android.speech.SpeechRecognizer, android.speech.SpeechRecognizer$Connection)
    {
        android.speech.SpeechRecognizer r0;
        android.speech.SpeechRecognizer$Connection r1;

        r0 := @parameter0: android.speech.SpeechRecognizer;

        r1 := @parameter1: android.speech.SpeechRecognizer$Connection;

        r0.<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection mConnection> = r1;

        return r1;
    }

    public static void <clinit>()
    {
        <android.speech.SpeechRecognizer: int MSG_CHANGE_LISTENER> = 4;

        <android.speech.SpeechRecognizer: int MSG_CANCEL> = 3;

        <android.speech.SpeechRecognizer: int MSG_STOP> = 2;

        <android.speech.SpeechRecognizer: int MSG_START> = 1;

        <android.speech.SpeechRecognizer: int ERROR_INSUFFICIENT_PERMISSIONS> = 9;

        <android.speech.SpeechRecognizer: int ERROR_RECOGNIZER_BUSY> = 8;

        <android.speech.SpeechRecognizer: int ERROR_NO_MATCH> = 7;

        <android.speech.SpeechRecognizer: int ERROR_SPEECH_TIMEOUT> = 6;

        <android.speech.SpeechRecognizer: int ERROR_CLIENT> = 5;

        <android.speech.SpeechRecognizer: int ERROR_SERVER> = 4;

        <android.speech.SpeechRecognizer: int ERROR_AUDIO> = 3;

        <android.speech.SpeechRecognizer: int ERROR_NETWORK> = 2;

        <android.speech.SpeechRecognizer: int ERROR_NETWORK_TIMEOUT> = 1;

        <android.speech.SpeechRecognizer: java.lang.String CONFIDENCE_SCORES> = "confidence_scores";

        <android.speech.SpeechRecognizer: java.lang.String RESULTS_RECOGNITION> = "results_recognition";

        <android.speech.SpeechRecognizer: java.lang.String TAG> = "SpeechRecognizer";

        <android.speech.SpeechRecognizer: boolean DBG> = 0;

        return;
    }
}
