<?xml version="1.0" encoding="ISO-8859-1"?>
<attributes>
<attribute>
<srcPos sline="0" eline="0" spos="0" epos="0"/>
<jmpPos sline="3" eline="3" spos="0" epos="0"/>
<text info="Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Landroid/filterfw/core/GenerateFieldPort; num elems: 2 elems: 
Annotation Element: kind: s name: name value: tile_size
Annotation Element: kind: Z name: hasDefault value: 1

" aType="VisibilityAnnotationTag"/>
</attribute>
<attribute>
<srcPos sline="0" eline="0" spos="0" epos="0"/>
<jmpPos sline="9" eline="9" spos="0" epos="0"/>
<text info="ConstantValue: precision mediump float;
uniform sampler2D tex_sampler_0;
uniform vec2 seed;
uniform float stepsizeX;
uniform float stepsizeY;
uniform float stepsize;
uniform vec2 scale;
uniform float inv_max_dist;
varying vec2 v_texcoord;
float rand(vec2 loc) {
  float theta1 = dot(loc, vec2(0.9898, 0.233));
  float theta2 = dot(loc, vec2(12.0, 78.0));
  float value = cos(theta1) * sin(theta2) + sin(theta1) * cos(theta2);
  float temp = mod(197.0 * value, 1.0) + value;
  float part1 = mod(220.0 * temp, 1.0) + temp;
  float part2 = value * 0.5453;
  float part3 = cos(theta1 + theta2) * 0.43758;
  return fract(part1 + part2 + part3);
}
void main() {
  vec3 nbr_color = vec3(0.0, 0.0, 0.0);
  vec2 coord;
  vec4 color = texture2D(tex_sampler_0, v_texcoord);
  coord.x = v_texcoord.x - 0.5 * stepsizeX;
  coord.y = v_texcoord.y - stepsizeY;
  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;
  coord.x = v_texcoord.x - stepsizeX;
  coord.y = v_texcoord.y + 0.5 * stepsizeY;
  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;
  coord.x = v_texcoord.x + stepsizeX;
  coord.y = v_texcoord.y - 0.5 * stepsizeY;
  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;
  coord.x = v_texcoord.x + stepsizeX;
  coord.y = v_texcoord.y + 0.5 * stepsizeY;
  nbr_color += texture2D(tex_sampler_0, coord).rgb - color.rgb;
  vec3 s_color = vec3(color.rgb + 0.3 * nbr_color);
  vec3 c_color = vec3(0.0, 0.0, 0.0);
  float value;
  if (s_color.r &lt; 0.5) {
    value = s_color.r;
  } else {
    value = 1.0 - s_color.r;
  }
  float red = 4.0 * value * value * value;
  if (s_color.r &lt; 0.5) {
    c_color.r = red;
  } else {
    c_color.r = 1.0 - red;
  }
  if (s_color.g &lt; 0.5) {
    value = s_color.g;
  } else {
    value = 1.0 - s_color.g;
  }
  float green = 2.0 * value * value;
  if (s_color.g &lt; 0.5) {
    c_color.g = green;
  } else {
    c_color.g = 1.0 - green;
  }
  c_color.b = s_color.b * 0.5 + 0.25;
  float dither = rand(v_texcoord + seed);
  vec3 xform = clamp((c_color.rgb - 0.15) * 1.53846, 0.0, 1.0);
  vec3 temp = clamp((color.rgb + stepsize - 0.15) * 1.53846, 0.0, 1.0);
  vec3 bw_color = clamp(xform + (temp - xform) * (dither - 0.5), 0.0, 1.0);
  coord = v_texcoord - vec2(0.5, 0.5);
  float dist = length(coord * scale);
  float lumen = 0.85 / (1.0 + exp((dist * inv_max_dist - 0.73) * 20.0)) + 0.15;
  gl_FragColor = vec4(bw_color * lumen, color.a);
}
" aType="StringConstantValueTag"/>
</attribute>
</attributes>
