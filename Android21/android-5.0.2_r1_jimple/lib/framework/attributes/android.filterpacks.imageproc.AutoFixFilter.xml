<?xml version="1.0" encoding="ISO-8859-1"?>
<attributes>
<attribute>
<srcPos sline="0" eline="0" spos="0" epos="0"/>
<jmpPos sline="3" eline="3" spos="0" epos="0"/>
<text info="Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Landroid/filterfw/core/GenerateFieldPort; num elems: 2 elems: 
Annotation Element: kind: s name: name value: tile_size
Annotation Element: kind: Z name: hasDefault value: 1

" aType="VisibilityAnnotationTag"/>
</attribute>
<attribute>
<srcPos sline="0" eline="0" spos="0" epos="0"/>
<jmpPos sline="4" eline="4" spos="0" epos="0"/>
<text info="Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Landroid/filterfw/core/GenerateFieldPort; num elems: 1 elems: 
Annotation Element: kind: s name: name value: scale

" aType="VisibilityAnnotationTag"/>
</attribute>
<attribute>
<srcPos sline="0" eline="0" spos="0" epos="0"/>
<jmpPos sline="6" eline="6" spos="0" epos="0"/>
<text info="ConstantValue: precision mediump float;
uniform sampler2D tex_sampler_0;
uniform sampler2D tex_sampler_1;
uniform sampler2D tex_sampler_2;
uniform float scale;
uniform float shift_scale;
uniform float hist_offset;
uniform float hist_scale;
uniform float density_offset;
uniform float density_scale;
varying vec2 v_texcoord;
void main() {
  const vec3 weights = vec3(0.33333, 0.33333, 0.33333);
  vec4 color = texture2D(tex_sampler_0, v_texcoord);
  float energy = dot(color.rgb, weights);
  float mask_value = energy - 0.5;
  float alpha;
  if (mask_value &gt; 0.0) {
    alpha = (pow(2.0 * mask_value, 1.5) - 1.0) * scale + 1.0;
  } else { 
    alpha = (pow(2.0 * mask_value, 2.0) - 1.0) * scale + 1.0;
  }
  float index = energy * hist_scale + hist_offset;
  vec4 temp = texture2D(tex_sampler_1, vec2(index, 0.5));
  float value = temp.g + temp.r * shift_scale;
  index = value * density_scale + density_offset;
  temp = texture2D(tex_sampler_2, vec2(index, 0.5));
  value = temp.g + temp.r * shift_scale;
  float dst_energy = energy * alpha + value * (1.0 - alpha);
  float max_energy = energy / max(color.r, max(color.g, color.b));
  if (dst_energy &gt; max_energy) {
    dst_energy = max_energy;
  }
  if (energy == 0.0) {
    gl_FragColor = color;
  } else {
    gl_FragColor = vec4(color.rgb * dst_energy / energy, color.a);
  }
}
" aType="StringConstantValueTag"/>
</attribute>
</attributes>
