public class android.os.PerformanceCollector extends java.lang.Object
{
    public static final java.lang.String METRIC_KEY_ITERATIONS;
    public static final java.lang.String METRIC_KEY_LABEL;
    public static final java.lang.String METRIC_KEY_CPU_TIME;
    public static final java.lang.String METRIC_KEY_EXECUTION_TIME;
    public static final java.lang.String METRIC_KEY_PRE_RECEIVED_TRANSACTIONS;
    public static final java.lang.String METRIC_KEY_PRE_SENT_TRANSACTIONS;
    public static final java.lang.String METRIC_KEY_RECEIVED_TRANSACTIONS;
    public static final java.lang.String METRIC_KEY_SENT_TRANSACTIONS;
    public static final java.lang.String METRIC_KEY_GC_INVOCATION_COUNT;
    public static final java.lang.String METRIC_KEY_JAVA_ALLOCATED;
    public static final java.lang.String METRIC_KEY_JAVA_FREE;
    public static final java.lang.String METRIC_KEY_JAVA_PRIVATE_DIRTY;
    public static final java.lang.String METRIC_KEY_JAVA_PSS;
    public static final java.lang.String METRIC_KEY_JAVA_SHARED_DIRTY;
    public static final java.lang.String METRIC_KEY_JAVA_SIZE;
    public static final java.lang.String METRIC_KEY_NATIVE_ALLOCATED;
    public static final java.lang.String METRIC_KEY_NATIVE_FREE;
    public static final java.lang.String METRIC_KEY_NATIVE_PRIVATE_DIRTY;
    public static final java.lang.String METRIC_KEY_NATIVE_PSS;
    public static final java.lang.String METRIC_KEY_NATIVE_SHARED_DIRTY;
    public static final java.lang.String METRIC_KEY_NATIVE_SIZE;
    public static final java.lang.String METRIC_KEY_GLOBAL_ALLOC_COUNT;
    public static final java.lang.String METRIC_KEY_GLOBAL_ALLOC_SIZE;
    public static final java.lang.String METRIC_KEY_GLOBAL_FREED_COUNT;
    public static final java.lang.String METRIC_KEY_GLOBAL_FREED_SIZE;
    public static final java.lang.String METRIC_KEY_OTHER_PRIVATE_DIRTY;
    public static final java.lang.String METRIC_KEY_OTHER_PSS;
    public static final java.lang.String METRIC_KEY_OTHER_SHARED_DIRTY;
    private android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter;
    private android.os.Bundle mPerfSnapshot;
    private android.os.Bundle mPerfMeasurement;
    private long mSnapshotCpuTime;
    private long mSnapshotExecTime;
    private long mCpuTime;
    private long mExecTime;

    public void <init>()
    {
        android.os.PerformanceCollector r0;

        r0 := @this: android.os.PerformanceCollector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(android.os.PerformanceCollector$PerformanceResultsWriter)
    {
        android.os.PerformanceCollector r0;
        android.os.PerformanceCollector$PerformanceResultsWriter r1;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: android.os.PerformanceCollector$PerformanceResultsWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<android.os.PerformanceCollector: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)>(r1);

        return;
    }

    public void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)
    {
        android.os.PerformanceCollector r0;
        android.os.PerformanceCollector$PerformanceResultsWriter r1;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: android.os.PerformanceCollector$PerformanceResultsWriter;

        r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter> = r1;

        return;
    }

    public void beginSnapshot(java.lang.String)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        android.os.PerformanceCollector$PerformanceResultsWriter $r2, $r3;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r2 == null goto label1;

        $r3 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        interfaceinvoke $r3.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeBeginSnapshot(java.lang.String)>(r1);

     label1:
        specialinvoke r0.<android.os.PerformanceCollector: void startPerformanceSnapshot()>();

        return;
    }

    public android.os.Bundle endSnapshot()
    {
        android.os.PerformanceCollector r0;
        android.os.PerformanceCollector$PerformanceResultsWriter $r1, $r4;
        android.os.Bundle $r2, $r3;

        r0 := @this: android.os.PerformanceCollector;

        specialinvoke r0.<android.os.PerformanceCollector: void endPerformanceSnapshot()>();

        $r1 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r1 == null goto label1;

        $r4 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        $r3 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        interfaceinvoke $r4.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeEndSnapshot(android.os.Bundle)>($r3);

     label1:
        $r2 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        return $r2;
    }

    public void startTiming(java.lang.String)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        android.os.PerformanceCollector$PerformanceResultsWriter $r2, $r6;
        android.os.Bundle $r3, $r5;
        java.util.ArrayList $r4;
        long $l0, $l1;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r2 == null goto label1;

        $r6 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        interfaceinvoke $r6.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeStartTiming(java.lang.String)>(r1);

     label1:
        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r0.<android.os.PerformanceCollector: android.os.Bundle mPerfMeasurement> = $r3;

        $r5 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfMeasurement>;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r5.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("iterations", $r4);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.os.PerformanceCollector: long mExecTime> = $l0;

        $l1 = staticinvoke <android.os.Process: long getElapsedCpuTime()>();

        r0.<android.os.PerformanceCollector: long mCpuTime> = $l1;

        return;
    }

    public android.os.Bundle addIteration(java.lang.String)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        android.os.Bundle r2, $r3, $r4;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.util.ArrayList $r5;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        $l0 = staticinvoke <android.os.Process: long getElapsedCpuTime()>();

        $l1 = r0.<android.os.PerformanceCollector: long mCpuTime>;

        $l2 = $l0 - $l1;

        r0.<android.os.PerformanceCollector: long mCpuTime> = $l2;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = r0.<android.os.PerformanceCollector: long mExecTime>;

        $l5 = $l3 - $l4;

        r0.<android.os.PerformanceCollector: long mExecTime> = $l5;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("label", r1);

        $l6 = r0.<android.os.PerformanceCollector: long mExecTime>;

        virtualinvoke r2.<android.os.Bundle: void putLong(java.lang.String,long)>("execution_time", $l6);

        $l7 = r0.<android.os.PerformanceCollector: long mCpuTime>;

        virtualinvoke r2.<android.os.Bundle: void putLong(java.lang.String,long)>("cpu_time", $l7);

        $r4 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfMeasurement>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("iterations");

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.os.PerformanceCollector: long mExecTime> = $l8;

        $l9 = staticinvoke <android.os.Process: long getElapsedCpuTime()>();

        r0.<android.os.PerformanceCollector: long mCpuTime> = $l9;

        return r2;
    }

    public android.os.Bundle stopTiming(java.lang.String)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        android.os.PerformanceCollector$PerformanceResultsWriter $r3, $r6;
        android.os.Bundle $r4, $r5;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.os.PerformanceCollector: android.os.Bundle addIteration(java.lang.String)>(r1);

        $r3 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r3 == null goto label1;

        $r6 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        $r5 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfMeasurement>;

        interfaceinvoke $r6.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeStopTiming(android.os.Bundle)>($r5);

     label1:
        $r4 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfMeasurement>;

        return $r4;
    }

    public void addMeasurement(java.lang.String, long)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        long l0;
        android.os.PerformanceCollector$PerformanceResultsWriter $r2, $r3;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r2 == null goto label1;

        $r3 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        interfaceinvoke $r3.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeMeasurement(java.lang.String,long)>(r1, l0);

     label1:
        return;
    }

    public void addMeasurement(java.lang.String, float)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1;
        float f0;
        android.os.PerformanceCollector$PerformanceResultsWriter $r2, $r3;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r2 == null goto label1;

        $r3 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        interfaceinvoke $r3.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeMeasurement(java.lang.String,float)>(r1, f0);

     label1:
        return;
    }

    public void addMeasurement(java.lang.String, java.lang.String)
    {
        android.os.PerformanceCollector r0;
        java.lang.String r1, r2;
        android.os.PerformanceCollector$PerformanceResultsWriter $r3, $r4;

        r0 := @this: android.os.PerformanceCollector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        if $r3 == null goto label1;

        $r4 = r0.<android.os.PerformanceCollector: android.os.PerformanceCollector$PerformanceResultsWriter mPerfWriter>;

        interfaceinvoke $r4.<android.os.PerformanceCollector$PerformanceResultsWriter: void writeMeasurement(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    private void startPerformanceSnapshot()
    {
        android.os.PerformanceCollector r0;
        android.os.Bundle r1, $r4, $r8;
        java.util.Iterator r2;
        java.lang.String r3, $r11;
        java.util.Set $r5;
        boolean $z0;
        long $l0, $l1, $l2;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: android.os.PerformanceCollector;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot> = $r4;

        r1 = staticinvoke <android.os.PerformanceCollector: android.os.Bundle getBinderCounts()>();

        $r5 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r8 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pre_");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = virtualinvoke r1.<android.os.Bundle: long getLong(java.lang.String)>(r3);

        virtualinvoke $r8.<android.os.Bundle: void putLong(java.lang.String,long)>($r11, $l2);

        goto label1;

     label2:
        staticinvoke <android.os.PerformanceCollector: void startAllocCounting()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<android.os.PerformanceCollector: long mSnapshotExecTime> = $l0;

        $l1 = staticinvoke <android.os.Process: long getElapsedCpuTime()>();

        r0.<android.os.PerformanceCollector: long mSnapshotCpuTime> = $l1;

        return;
    }

    private void endPerformanceSnapshot()
    {
        android.os.PerformanceCollector r0;
        long l0, l1, l2, l3, l4, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l20, $l22, $l23, $l26, $l28, $l30, $l33, $l34, $l35, $l37, $l38;
        android.os.Debug$MemoryInfo r1, $r7;
        java.lang.Runtime r2;
        android.os.Bundle r3, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, r31;
        java.lang.String r4, r6;
        java.util.Iterator r5, r32;
        boolean $z0, $z1;
        java.util.Set $r8, $r9;
        int $i19, $i21, $i24, $i25, $i27, $i29, $i31, $i32, $i36;
        java.lang.Object $r26, $r30;

        r0 := @this: android.os.PerformanceCollector;

        $l6 = staticinvoke <android.os.Process: long getElapsedCpuTime()>();

        $l8 = r0.<android.os.PerformanceCollector: long mSnapshotCpuTime>;

        $l7 = $l6 - $l8;

        r0.<android.os.PerformanceCollector: long mSnapshotCpuTime> = $l7;

        $l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l9 = r0.<android.os.PerformanceCollector: long mSnapshotExecTime>;

        $l12 = $l10 - $l9;

        r0.<android.os.PerformanceCollector: long mSnapshotExecTime> = $l12;

        staticinvoke <android.os.PerformanceCollector: void stopAllocCounting()>();

        $l11 = staticinvoke <android.os.Debug: long getNativeHeapSize()>();

        l0 = $l11 / 1024L;

        $l14 = staticinvoke <android.os.Debug: long getNativeHeapAllocatedSize()>();

        l1 = $l14 / 1024L;

        $l13 = staticinvoke <android.os.Debug: long getNativeHeapFreeSize()>();

        l2 = $l13 / 1024L;

        $r7 = new android.os.Debug$MemoryInfo;

        specialinvoke $r7.<android.os.Debug$MemoryInfo: void <init>()>();

        r1 = $r7;

        staticinvoke <android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>(r1);

        r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l16 = virtualinvoke r2.<java.lang.Runtime: long totalMemory()>();

        l3 = $l16 / 1024L;

        $l15 = virtualinvoke r2.<java.lang.Runtime: long freeMemory()>();

        l4 = $l15 / 1024L;

        l5 = l3 - l4;

        r3 = staticinvoke <android.os.PerformanceCollector: android.os.Bundle getBinderCounts()>();

        $r8 = virtualinvoke r3.<android.os.Bundle: java.util.Set keySet()>();

        r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r30 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r30;

        $r29 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $l38 = virtualinvoke r3.<android.os.Bundle: long getLong(java.lang.String)>(r4);

        virtualinvoke $r29.<android.os.Bundle: void putLong(java.lang.String,long)>(r4, $l38);

        goto label1;

     label2:
        r31 = staticinvoke <android.os.PerformanceCollector: android.os.Bundle getAllocCounts()>();

        $r9 = virtualinvoke r31.<android.os.Bundle: java.util.Set keySet()>();

        r32 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r26 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r26;

        $r27 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $l34 = virtualinvoke r31.<android.os.Bundle: long getLong(java.lang.String)>(r6);

        virtualinvoke $r27.<android.os.Bundle: void putLong(java.lang.String,long)>(r6, $l34);

        goto label3;

     label4:
        $r11 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $l18 = r0.<android.os.PerformanceCollector: long mSnapshotExecTime>;

        virtualinvoke $r11.<android.os.Bundle: void putLong(java.lang.String,long)>("execution_time", $l18);

        $r10 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $l17 = r0.<android.os.PerformanceCollector: long mSnapshotCpuTime>;

        virtualinvoke $r10.<android.os.Bundle: void putLong(java.lang.String,long)>("cpu_time", $l17);

        $r13 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r13.<android.os.Bundle: void putLong(java.lang.String,long)>("native_size", l0);

        $r14 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r14.<android.os.Bundle: void putLong(java.lang.String,long)>("native_allocated", l1);

        $r12 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r12.<android.os.Bundle: void putLong(java.lang.String,long)>("native_free", l2);

        $r15 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i19 = r1.<android.os.Debug$MemoryInfo: int nativePss>;

        $l22 = (long) $i19;

        virtualinvoke $r15.<android.os.Bundle: void putLong(java.lang.String,long)>("native_pss", $l22);

        $r17 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i21 = r1.<android.os.Debug$MemoryInfo: int nativePrivateDirty>;

        $l20 = (long) $i21;

        virtualinvoke $r17.<android.os.Bundle: void putLong(java.lang.String,long)>("native_private_dirty", $l20);

        $r16 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i24 = r1.<android.os.Debug$MemoryInfo: int nativeSharedDirty>;

        $l23 = (long) $i24;

        virtualinvoke $r16.<android.os.Bundle: void putLong(java.lang.String,long)>("native_shared_dirty", $l23);

        $r20 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r20.<android.os.Bundle: void putLong(java.lang.String,long)>("java_size", l3);

        $r19 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r19.<android.os.Bundle: void putLong(java.lang.String,long)>("java_allocated", l5);

        $r18 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        virtualinvoke $r18.<android.os.Bundle: void putLong(java.lang.String,long)>("java_free", l4);

        $r21 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i25 = r1.<android.os.Debug$MemoryInfo: int dalvikPss>;

        $l28 = (long) $i25;

        virtualinvoke $r21.<android.os.Bundle: void putLong(java.lang.String,long)>("java_pss", $l28);

        $r23 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i27 = r1.<android.os.Debug$MemoryInfo: int dalvikPrivateDirty>;

        $l26 = (long) $i27;

        virtualinvoke $r23.<android.os.Bundle: void putLong(java.lang.String,long)>("java_private_dirty", $l26);

        $r24 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i32 = r1.<android.os.Debug$MemoryInfo: int dalvikSharedDirty>;

        $l33 = (long) $i32;

        virtualinvoke $r24.<android.os.Bundle: void putLong(java.lang.String,long)>("java_shared_dirty", $l33);

        $r22 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i29 = r1.<android.os.Debug$MemoryInfo: int otherPss>;

        $l30 = (long) $i29;

        virtualinvoke $r22.<android.os.Bundle: void putLong(java.lang.String,long)>("other_pss", $l30);

        $r28 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i31 = r1.<android.os.Debug$MemoryInfo: int otherPrivateDirty>;

        $l35 = (long) $i31;

        virtualinvoke $r28.<android.os.Bundle: void putLong(java.lang.String,long)>("other_private_dirty", $l35);

        $r25 = r0.<android.os.PerformanceCollector: android.os.Bundle mPerfSnapshot>;

        $i36 = r1.<android.os.Debug$MemoryInfo: int otherSharedDirty>;

        $l37 = (long) $i36;

        virtualinvoke $r25.<android.os.Bundle: void putLong(java.lang.String,long)>("other_shared_dirty", $l37);

        return;
    }

    private static void startAllocCounting()
    {
        java.lang.Runtime $r0, $r1, $r2;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r0.<java.lang.Runtime: void gc()>();

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r1.<java.lang.Runtime: void runFinalization()>();

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r2.<java.lang.Runtime: void gc()>();

        staticinvoke <android.os.Debug: void resetAllCounts()>();

        staticinvoke <android.os.Debug: void startAllocCounting()>();

        return;
    }

    private static void stopAllocCounting()
    {
        java.lang.Runtime $r0, $r1, $r2;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r0.<java.lang.Runtime: void gc()>();

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r1.<java.lang.Runtime: void runFinalization()>();

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r2.<java.lang.Runtime: void gc()>();

        staticinvoke <android.os.Debug: void stopAllocCounting()>();

        return;
    }

    private static android.os.Bundle getAllocCounts()
    {
        android.os.Bundle r0, $r1;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0 = $r1;

        $i0 = staticinvoke <android.os.Debug: int getGlobalAllocCount()>();

        $l1 = (long) $i0;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("global_alloc_count", $l1);

        $i2 = staticinvoke <android.os.Debug: int getGlobalAllocSize()>();

        $l3 = (long) $i2;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("global_alloc_size", $l3);

        $i4 = staticinvoke <android.os.Debug: int getGlobalFreedCount()>();

        $l5 = (long) $i4;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("global_freed_count", $l5);

        $i6 = staticinvoke <android.os.Debug: int getGlobalFreedSize()>();

        $l7 = (long) $i6;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("global_freed_size", $l7);

        $i8 = staticinvoke <android.os.Debug: int getGlobalGcInvocationCount()>();

        $l9 = (long) $i8;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("gc_invocation_count", $l9);

        return r0;
    }

    private static android.os.Bundle getBinderCounts()
    {
        android.os.Bundle r0, $r1;
        int $i0, $i2;
        long $l1, $l3;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0 = $r1;

        $i0 = staticinvoke <android.os.Debug: int getBinderSentTransactions()>();

        $l1 = (long) $i0;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("sent_transactions", $l1);

        $i2 = staticinvoke <android.os.Debug: int getBinderReceivedTransactions()>();

        $l3 = (long) $i2;

        virtualinvoke r0.<android.os.Bundle: void putLong(java.lang.String,long)>("received_transactions", $l3);

        return r0;
    }

    public static void <clinit>()
    {
        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_OTHER_SHARED_DIRTY> = "other_shared_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_OTHER_PSS> = "other_pss";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_OTHER_PRIVATE_DIRTY> = "other_private_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_GLOBAL_FREED_SIZE> = "global_freed_size";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_GLOBAL_FREED_COUNT> = "global_freed_count";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_GLOBAL_ALLOC_SIZE> = "global_alloc_size";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_GLOBAL_ALLOC_COUNT> = "global_alloc_count";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_SIZE> = "native_size";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_SHARED_DIRTY> = "native_shared_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_PSS> = "native_pss";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_PRIVATE_DIRTY> = "native_private_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_FREE> = "native_free";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_NATIVE_ALLOCATED> = "native_allocated";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_SIZE> = "java_size";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_SHARED_DIRTY> = "java_shared_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_PSS> = "java_pss";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_PRIVATE_DIRTY> = "java_private_dirty";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_FREE> = "java_free";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_JAVA_ALLOCATED> = "java_allocated";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_GC_INVOCATION_COUNT> = "gc_invocation_count";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_SENT_TRANSACTIONS> = "sent_transactions";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_RECEIVED_TRANSACTIONS> = "received_transactions";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_PRE_SENT_TRANSACTIONS> = "pre_sent_transactions";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_PRE_RECEIVED_TRANSACTIONS> = "pre_received_transactions";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_EXECUTION_TIME> = "execution_time";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_CPU_TIME> = "cpu_time";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_LABEL> = "label";

        <android.os.PerformanceCollector: java.lang.String METRIC_KEY_ITERATIONS> = "iterations";

        return;
    }
}
