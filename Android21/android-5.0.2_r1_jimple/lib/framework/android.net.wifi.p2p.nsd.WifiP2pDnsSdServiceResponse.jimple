public class android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse extends android.net.wifi.p2p.nsd.WifiP2pServiceResponse
{
    private java.lang.String mDnsQueryName;
    private java.lang.String mInstanceName;
    private int mDnsType;
    private int mVersion;
    private final java.util.HashMap mTxtRecord;
    private static final java.util.Map sVmpack;

    public java.lang.String getDnsQueryName()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $r1 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        return $r1;
    }

    public int getDnsType()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        int $i0;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $i0 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mDnsType>;

        return $i0;
    }

    public int getVersion()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        int $i0;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $i0 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mVersion>;

        return $i0;
    }

    public java.lang.String getInstanceName()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.lang.String $r1;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $r1 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mInstanceName>;

        return $r1;
    }

    public java.util.Map getTxtRecord()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.util.HashMap $r1;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $r1 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.HashMap mTxtRecord>;

        return $r1;
    }

    public java.lang.String toString()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.lang.StringBuffer r1, $r4, $r5, $r6, $r8, $r11, $r14, $r19, $r27, $r30, $r35, $r36;
        java.util.Iterator r2;
        java.lang.String r3, $r9, $r13, $r17, $r22, $r26, $r28, $r31, $r37;
        int $i0, $i1, $i2;
        android.net.wifi.p2p.WifiP2pDevice $r12;
        java.lang.Object[] $r16;
        java.lang.Integer $r18;
        java.util.HashMap $r23, $r33;
        java.util.Set $r25;
        boolean $z0;
        java.lang.Object $r29, $r34;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r1 = $r4;

        $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("serviceType:DnsSd(");

        $i0 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mServiceType>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" status:");

        $i1 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mStatus>;

        $r9 = staticinvoke <android.net.wifi.p2p.nsd.WifiP2pServiceResponse$Status: java.lang.String toString(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" srcAddr:");

        $r12 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: android.net.wifi.p2p.WifiP2pDevice mDevice>;

        $r13 = $r12.<android.net.wifi.p2p.WifiP2pDevice: java.lang.String deviceAddress>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r14 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" version:");

        $r16 = newarray (java.lang.Object)[1];

        $i2 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mVersion>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r16[0] = $r18;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r16);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" dnsName:");

        $r22 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" TxtRecord:");

        $r23 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.HashMap mTxtRecord>;

        $r25 = virtualinvoke $r23.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r29 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r29;

        $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key:");

        $r35 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value:");

        $r33 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.HashMap mTxtRecord>;

        $r34 = virtualinvoke $r33.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r37 = (java.lang.String) $r34;

        virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        goto label1;

     label2:
        $r28 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mInstanceName>;

        if $r28 == null goto label3;

        $r27 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" InsName:");

        $r31 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mInstanceName>;

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

     label3:
        $r26 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r26;
    }

    protected void <init>(int, int, android.net.wifi.p2p.WifiP2pDevice, byte[])
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        int i0, i1;
        android.net.wifi.p2p.WifiP2pDevice r1;
        byte[] r2;
        java.util.HashMap $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.net.wifi.p2p.WifiP2pDevice;

        r2 := @parameter3: byte[];

        specialinvoke r0.<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void <init>(int,int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>(1, i0, i1, r1, r2);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.HashMap mTxtRecord> = $r3;

        $z0 = specialinvoke r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: boolean parse()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Malformed bonjour service response");

        throw $r4;

     label1:
        return;
    }

    private boolean parse()
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.io.DataInputStream r1, $r4;
        java.io.IOException r2, $r11;
        byte[] $r3, $r6;
        java.io.ByteArrayInputStream $r5;
        java.lang.String $r7, $r8, $r9, $r10, $r12, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        $r3 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: byte[] mData>;

        if $r3 != null goto label01;

        return 1;

     label01:
        $r4 = new java.io.DataInputStream;

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: byte[] mData>;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r5);

        r1 = $r4;

        $r7 = specialinvoke r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String readDnsName(java.io.DataInputStream)>(r1);

        r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName> = $r7;

        $r8 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        if $r8 != null goto label02;

        return 0;

     label02:
        $i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mDnsType> = $i0;

        $i1 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mVersion> = $i1;

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        r2 = $r11;

        virtualinvoke r2.<java.io.IOException: void printStackTrace()>();

        return 0;

     label05:
        $i2 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mDnsType>;

        if $i2 != 12 goto label08;

        r13 = specialinvoke r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String readDnsName(java.io.DataInputStream)>(r1);

        if r13 != null goto label06;

        return 0;

     label06:
        $i4 = virtualinvoke r13.<java.lang.String: int length()>();

        $r9 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        $i5 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i4 > $i5 goto label07;

        return 0;

     label07:
        $i6 = virtualinvoke r13.<java.lang.String: int length()>();

        $r10 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        $i7 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i9 = $i6 - $i7;

        $i8 = $i9 - 1;

        $r12 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mInstanceName> = $r12;

        goto label10;

     label08:
        $i3 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int mDnsType>;

        if $i3 != 16 goto label09;

        $z0 = specialinvoke r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: boolean readTxtData(java.io.DataInputStream)>(r1);

        return $z0;

     label09:
        return 0;

     label10:
        return 1;

        catch java.io.IOException from label02 to label03 with label04;
    }

    private java.lang.String readDnsName(java.io.DataInputStream)
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.io.DataInputStream r1;
        java.lang.StringBuffer r2, $r5;
        java.util.HashMap r3, $r6;
        int i0, $i1;
        java.lang.String r4, $r8, $r9, $r15, $r16, $r17;
        java.util.Map $r7;
        java.lang.Integer $r12, $r18;
        java.lang.Object $r14;
        java.io.IOException $r19, r22;
        byte[] r21;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        r1 := @parameter0: java.io.DataInputStream;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r2 = $r5;

        $r6 = new java.util.HashMap;

        $r7 = <android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map sVmpack>;

        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>($r7);

        r3 = $r6;

        $r8 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        if $r8 == null goto label1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(39);

        $r17 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String mDnsQueryName>;

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

     label1:
        i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        if i0 != 0 goto label3;

        $r15 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return $r15;

     label3:
        if i0 != 192 goto label7;

        $i1 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r14 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        r4 = (java.lang.String) $r14;

        if r4 != null goto label5;

     label4:
        return null;

     label5:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r16 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        return $r16;

     label7:
        r21 = newarray (byte)[i0];

        virtualinvoke r1.<java.io.DataInputStream: void readFully(byte[])>(r21);

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>(r21);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        goto label1;

     label8:
        $r19 := @caughtexception;

        r22 = $r19;

        virtualinvoke r22.<java.io.IOException: void printStackTrace()>();

        return null;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
        catch java.io.IOException from label7 to label8 with label8;
    }

    private boolean readTxtData(java.io.DataInputStream)
    {
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse r0;
        java.io.DataInputStream r1;
        int i0, $i1, $i2;
        byte[] r2;
        java.lang.String[] r3;
        java.lang.String $r4, $r5, $r6;
        java.util.HashMap $r7;
        java.io.IOException $r9, r10;

        r0 := @this: android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        r1 := @parameter0: java.io.DataInputStream;

     label1:
        $i1 = virtualinvoke r1.<java.io.DataInputStream: int available()>();

        if $i1 <= 0 goto label5;

        i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        if i0 != 0 goto label2;

        goto label5;

     label2:
        r2 = newarray (byte)[i0];

        virtualinvoke r1.<java.io.DataInputStream: void readFully(byte[])>(r2);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>(r2);

        r3 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i2 = lengthof r3;

        if $i2 == 2 goto label4;

     label3:
        return 0;

     label4:
        $r7 = r0.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.HashMap mTxtRecord>;

        $r6 = r3[0];

        $r5 = r3[1];

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label5:
        return 1;

     label6:
        $r9 := @caughtexception;

        r10 = $r9;

        virtualinvoke r10.<java.io.IOException: void printStackTrace()>();

        return 0;

        catch java.io.IOException from label1 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    static android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse newInstance(int, int, android.net.wifi.p2p.WifiP2pDevice, byte[])
    {
        int i0, i1;
        android.net.wifi.p2p.WifiP2pDevice r0;
        byte[] r1;
        java.lang.IllegalArgumentException r2, $r5;
        android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.net.wifi.p2p.WifiP2pDevice;

        r1 := @parameter3: byte[];

        if i0 == 0 goto label1;

        $r4 = new android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        specialinvoke $r4.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>(i0, i1, r0, null);

        return $r4;

     label1:
        $r3 = new android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse;

        specialinvoke $r3.<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: void <init>(int,int,android.net.wifi.p2p.WifiP2pDevice,byte[])>(i0, i1, r0, r1);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r2.<java.lang.IllegalArgumentException: void printStackTrace()>();

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r4, $r7;
        java.lang.Integer $r2, $r5, $r8;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map sVmpack> = $r0;

        $r1 = <android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map sVmpack>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "_tcp.local.");

        $r4 = <android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map sVmpack>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "local.");

        $r7 = <android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map sVmpack>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(28);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "_udp.local.");

        return;
    }
}
